// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension IamClientTypes {
    public enum AccessAdvisorUsageGranularityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case actionLevel
        case serviceLevel
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessAdvisorUsageGranularityType] {
            return [
                .actionLevel,
                .serviceLevel,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .actionLevel: return "ACTION_LEVEL"
            case .serviceLevel: return "SERVICE_LEVEL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccessAdvisorUsageGranularityType(rawValue: rawValue) ?? AccessAdvisorUsageGranularityType.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes.AccessDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityPath = "EntityPath"
        case lastAuthenticatedTime = "LastAuthenticatedTime"
        case region = "Region"
        case serviceName = "ServiceName"
        case serviceNamespace = "ServiceNamespace"
        case totalAuthenticatedEntities = "TotalAuthenticatedEntities"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let entityPath = entityPath {
            try container.encode(entityPath, forKey: ClientRuntime.Key("EntityPath"))
        }
        if let lastAuthenticatedTime = lastAuthenticatedTime {
            try container.encode(ClientRuntime.TimestampWrapper(lastAuthenticatedTime, format: .dateTime), forKey: ClientRuntime.Key("lastAuthenticatedTime"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let serviceName = serviceName {
            try container.encode(serviceName, forKey: ClientRuntime.Key("ServiceName"))
        }
        if let serviceNamespace = serviceNamespace {
            try container.encode(serviceNamespace, forKey: ClientRuntime.Key("ServiceNamespace"))
        }
        if let totalAuthenticatedEntities = totalAuthenticatedEntities {
            try container.encode(totalAuthenticatedEntities, forKey: ClientRuntime.Key("TotalAuthenticatedEntities"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let entityPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityPath)
        entityPath = entityPathDecoded
        let lastAuthenticatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAuthenticatedTime)
        var lastAuthenticatedTimeBuffer:ClientRuntime.Date? = nil
        if let lastAuthenticatedTimeDecoded = lastAuthenticatedTimeDecoded {
            lastAuthenticatedTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastAuthenticatedTimeDecoded, format: .dateTime)
        }
        lastAuthenticatedTime = lastAuthenticatedTimeBuffer
        let totalAuthenticatedEntitiesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalAuthenticatedEntities)
        totalAuthenticatedEntities = totalAuthenticatedEntitiesDecoded
    }
}

extension IamClientTypes.AccessDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDetail(entityPath: \(Swift.String(describing: entityPath)), lastAuthenticatedTime: \(Swift.String(describing: lastAuthenticatedTime)), region: \(Swift.String(describing: region)), serviceName: \(Swift.String(describing: serviceName)), serviceNamespace: \(Swift.String(describing: serviceNamespace)), totalAuthenticatedEntities: \(Swift.String(describing: totalAuthenticatedEntities)))"}
}

extension IamClientTypes {
    /// An object that contains details about when a principal in the reported Organizations entity last attempted to access an Amazon Web Services service. A principal can be an IAM user, an IAM role, or the Amazon Web Services account root user within the reported Organizations entity. This data type is a response element in the [GetOrganizationsAccessReport] operation.
    public struct AccessDetail: Swift.Equatable {
        /// The path of the Organizations entity (root, organizational unit, or account) from which an authenticated principal last attempted to access the service. Amazon Web Services does not report unauthenticated requests. This field is null if no principals (IAM users, IAM roles, or root users) in the reported Organizations entity attempted to access the service within the [reporting period](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period).
        public var entityPath: Swift.String?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when an authenticated principal most recently attempted to access the service. Amazon Web Services does not report unauthenticated requests. This field is null if no principals in the reported Organizations entity attempted to access the service within the [reporting period](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period).
        public var lastAuthenticatedTime: ClientRuntime.Date?
        /// The Region where the last service access attempt occurred. This field is null if no principals in the reported Organizations entity attempted to access the service within the [reporting period](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period).
        public var region: Swift.String?
        /// The name of the service in which access was attempted.
        /// This member is required.
        public var serviceName: Swift.String?
        /// The namespace of the service in which access was attempted. To learn the service namespace of a service, see [Actions, resources, and condition keys for Amazon Web Services services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) in the Service Authorization Reference. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, (service prefix: a4b). For more information about service namespaces, see [Amazon Web Services service namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces) in the Amazon Web Services General Reference.
        /// This member is required.
        public var serviceNamespace: Swift.String?
        /// The number of accounts with authenticated principals (root users, IAM users, and IAM roles) that attempted to access the service in the reporting period.
        public var totalAuthenticatedEntities: Swift.Int?

        public init (
            entityPath: Swift.String? = nil,
            lastAuthenticatedTime: ClientRuntime.Date? = nil,
            region: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            serviceNamespace: Swift.String? = nil,
            totalAuthenticatedEntities: Swift.Int? = nil
        )
        {
            self.entityPath = entityPath
            self.lastAuthenticatedTime = lastAuthenticatedTime
            self.region = region
            self.serviceName = serviceName
            self.serviceNamespace = serviceNamespace
            self.totalAuthenticatedEntities = totalAuthenticatedEntities
        }
    }

}

extension IamClientTypes.AccessKey: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyId = "AccessKeyId"
        case createDate = "CreateDate"
        case secretAccessKey = "SecretAccessKey"
        case status = "Status"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accessKeyId = accessKeyId {
            try container.encode(accessKeyId, forKey: ClientRuntime.Key("AccessKeyId"))
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let secretAccessKey = secretAccessKey {
            try container.encode(secretAccessKey, forKey: ClientRuntime.Key("SecretAccessKey"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let accessKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKeyId)
        accessKeyId = accessKeyIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IamClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
        let secretAccessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretAccessKey)
        secretAccessKey = secretAccessKeyDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
    }
}

extension IamClientTypes.AccessKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessKey(accessKeyId: \(Swift.String(describing: accessKeyId)), createDate: \(Swift.String(describing: createDate)), secretAccessKey: \(Swift.String(describing: secretAccessKey)), status: \(Swift.String(describing: status)), userName: \(Swift.String(describing: userName)))"}
}

extension IamClientTypes {
    /// Contains information about an Amazon Web Services access key. This data type is used as a response element in the [CreateAccessKey] and [ListAccessKeys] operations. The SecretAccessKey value is returned only in response to [CreateAccessKey]. You can get a secret access key only when you first create an access key; you cannot recover the secret access key later. If you lose a secret access key, you must create a new access key.
    public struct AccessKey: Swift.Equatable {
        /// The ID for this access key.
        /// This member is required.
        public var accessKeyId: Swift.String?
        /// The date when the access key was created.
        public var createDate: ClientRuntime.Date?
        /// The secret key used to sign requests.
        /// This member is required.
        public var secretAccessKey: Swift.String?
        /// The status of the access key. Active means that the key is valid for API calls, while Inactive means it is not.
        /// This member is required.
        public var status: IamClientTypes.StatusType?
        /// The name of the IAM user that the access key is associated with.
        /// This member is required.
        public var userName: Swift.String?

        public init (
            accessKeyId: Swift.String? = nil,
            createDate: ClientRuntime.Date? = nil,
            secretAccessKey: Swift.String? = nil,
            status: IamClientTypes.StatusType? = nil,
            userName: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.createDate = createDate
            self.secretAccessKey = secretAccessKey
            self.status = status
            self.userName = userName
        }
    }

}

extension IamClientTypes.AccessKeyLastUsed: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUsedDate = "LastUsedDate"
        case region = "Region"
        case serviceName = "ServiceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastUsedDate = lastUsedDate {
            try container.encode(ClientRuntime.TimestampWrapper(lastUsedDate, format: .dateTime), forKey: ClientRuntime.Key("lastUsedDate"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let serviceName = serviceName {
            try container.encode(serviceName, forKey: ClientRuntime.Key("ServiceName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastUsedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUsedDate)
        var lastUsedDateBuffer:ClientRuntime.Date? = nil
        if let lastUsedDateDecoded = lastUsedDateDecoded {
            lastUsedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUsedDateDecoded, format: .dateTime)
        }
        lastUsedDate = lastUsedDateBuffer
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension IamClientTypes.AccessKeyLastUsed: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessKeyLastUsed(lastUsedDate: \(Swift.String(describing: lastUsedDate)), region: \(Swift.String(describing: region)), serviceName: \(Swift.String(describing: serviceName)))"}
}

extension IamClientTypes {
    /// Contains information about the last time an Amazon Web Services access key was used since IAM began tracking this information on April 22, 2015. This data type is used as a response element in the [GetAccessKeyLastUsed] operation.
    public struct AccessKeyLastUsed: Swift.Equatable {
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the access key was most recently used. This field is null in the following situations:
        ///
        /// * The user does not have an access key.
        ///
        /// * An access key exists but has not been used since IAM began tracking this information.
        ///
        /// * There is no sign-in data associated with the user.
        /// This member is required.
        public var lastUsedDate: ClientRuntime.Date?
        /// The Amazon Web Services Region where this access key was most recently used. The value for this field is "N/A" in the following situations:
        ///
        /// * The user does not have an access key.
        ///
        /// * An access key exists but has not been used since IAM began tracking this information.
        ///
        /// * There is no sign-in data associated with the user.
        ///
        ///
        /// For more information about Amazon Web Services Regions, see [Regions and endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html) in the Amazon Web Services General Reference.
        /// This member is required.
        public var region: Swift.String?
        /// The name of the Amazon Web Services service with which this access key was most recently used. The value of this field is "N/A" in the following situations:
        ///
        /// * The user does not have an access key.
        ///
        /// * An access key exists but has not been used since IAM started tracking this information.
        ///
        /// * There is no sign-in data associated with the user.
        /// This member is required.
        public var serviceName: Swift.String?

        public init (
            lastUsedDate: ClientRuntime.Date? = nil,
            region: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.lastUsedDate = lastUsedDate
            self.region = region
            self.serviceName = serviceName
        }
    }

}

extension IamClientTypes.AccessKeyMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyId = "AccessKeyId"
        case createDate = "CreateDate"
        case status = "Status"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accessKeyId = accessKeyId {
            try container.encode(accessKeyId, forKey: ClientRuntime.Key("AccessKeyId"))
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let accessKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKeyId)
        accessKeyId = accessKeyIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IamClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
    }
}

extension IamClientTypes.AccessKeyMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessKeyMetadata(accessKeyId: \(Swift.String(describing: accessKeyId)), createDate: \(Swift.String(describing: createDate)), status: \(Swift.String(describing: status)), userName: \(Swift.String(describing: userName)))"}
}

extension IamClientTypes {
    /// Contains information about an Amazon Web Services access key, without its secret key. This data type is used as a response element in the [ListAccessKeys] operation.
    public struct AccessKeyMetadata: Swift.Equatable {
        /// The ID for this access key.
        public var accessKeyId: Swift.String?
        /// The date when the access key was created.
        public var createDate: ClientRuntime.Date?
        /// The status of the access key. Active means that the key is valid for API calls; Inactive means it is not.
        public var status: IamClientTypes.StatusType?
        /// The name of the IAM user that the key is associated with.
        public var userName: Swift.String?

        public init (
            accessKeyId: Swift.String? = nil,
            createDate: ClientRuntime.Date? = nil,
            status: IamClientTypes.StatusType? = nil,
            userName: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.createDate = createDate
            self.status = status
            self.userName = userName
        }
    }

}

extension AddClientIDToOpenIDConnectProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddClientIDToOpenIDConnectProviderInput(clientID: \(Swift.String(describing: clientID)), openIDConnectProviderArn: \(Swift.String(describing: openIDConnectProviderArn)))"}
}

extension AddClientIDToOpenIDConnectProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientID = clientID {
            try container.encode(clientID, forKey: ClientRuntime.Key("ClientID"))
        }
        if let openIDConnectProviderArn = openIDConnectProviderArn {
            try container.encode(openIDConnectProviderArn, forKey: ClientRuntime.Key("OpenIDConnectProviderArn"))
        }
        try container.encode("AddClientIDToOpenIDConnectProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddClientIDToOpenIDConnectProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AddClientIDToOpenIDConnectProviderInput: Swift.Equatable {
    /// The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
    /// This member is required.
    public var clientID: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM OpenID Connect (OIDC) provider resource to add the client ID to. You can get a list of OIDC provider ARNs by using the [ListOpenIDConnectProviders] operation.
    /// This member is required.
    public var openIDConnectProviderArn: Swift.String?

    public init (
        clientID: Swift.String? = nil,
        openIDConnectProviderArn: Swift.String? = nil
    )
    {
        self.clientID = clientID
        self.openIDConnectProviderArn = openIDConnectProviderArn
    }
}

extension AddClientIDToOpenIDConnectProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AddClientIDToOpenIDConnectProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddClientIDToOpenIDConnectProviderOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddClientIDToOpenIDConnectProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddClientIDToOpenIDConnectProviderOutputResponse()"}
}

extension AddClientIDToOpenIDConnectProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddClientIDToOpenIDConnectProviderOutputResponse: Swift.Equatable {

    public init() {}
}

struct AddClientIDToOpenIDConnectProviderOutputResponseBody: Swift.Equatable {
}

extension AddClientIDToOpenIDConnectProviderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AddRoleToInstanceProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddRoleToInstanceProfileInput(instanceProfileName: \(Swift.String(describing: instanceProfileName)), roleName: \(Swift.String(describing: roleName)))"}
}

extension AddRoleToInstanceProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceProfileName = instanceProfileName {
            try container.encode(instanceProfileName, forKey: ClientRuntime.Key("InstanceProfileName"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("AddRoleToInstanceProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddRoleToInstanceProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AddRoleToInstanceProfileInput: Swift.Equatable {
    /// The name of the instance profile to update. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var instanceProfileName: Swift.String?
    /// The name of the role to add. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        instanceProfileName: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.instanceProfileName = instanceProfileName
        self.roleName = roleName
    }
}

extension AddRoleToInstanceProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AddRoleToInstanceProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddRoleToInstanceProfileOutputError: Swift.Error, Swift.Equatable {
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddRoleToInstanceProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddRoleToInstanceProfileOutputResponse()"}
}

extension AddRoleToInstanceProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddRoleToInstanceProfileOutputResponse: Swift.Equatable {

    public init() {}
}

struct AddRoleToInstanceProfileOutputResponseBody: Swift.Equatable {
}

extension AddRoleToInstanceProfileOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AddUserToGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddUserToGroupInput(groupName: \(Swift.String(describing: groupName)), userName: \(Swift.String(describing: userName)))"}
}

extension AddUserToGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("AddUserToGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddUserToGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AddUserToGroupInput: Swift.Equatable {
    /// The name of the group to update. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var groupName: Swift.String?
    /// The name of the user to add. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.userName = userName
    }
}

extension AddUserToGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AddUserToGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddUserToGroupOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddUserToGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddUserToGroupOutputResponse()"}
}

extension AddUserToGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddUserToGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct AddUserToGroupOutputResponseBody: Swift.Equatable {
}

extension AddUserToGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IamClientTypes {
    public enum AssignmentStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case any
        case assigned
        case unassigned
        case sdkUnknown(Swift.String)

        public static var allCases: [AssignmentStatusType] {
            return [
                .any,
                .assigned,
                .unassigned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .any: return "Any"
            case .assigned: return "Assigned"
            case .unassigned: return "Unassigned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AssignmentStatusType(rawValue: rawValue) ?? AssignmentStatusType.sdkUnknown(rawValue)
        }
    }
}

extension AttachGroupPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachGroupPolicyInput(groupName: \(Swift.String(describing: groupName)), policyArn: \(Swift.String(describing: policyArn)))"}
}

extension AttachGroupPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        try container.encode("AttachGroupPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension AttachGroupPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachGroupPolicyInput: Swift.Equatable {
    /// The name (friendly name, not ARN) of the group to attach the policy to. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var groupName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM policy you want to attach. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        policyArn: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.policyArn = policyArn
    }
}

extension AttachGroupPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachGroupPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotAttachable" : self = .policyNotAttachableException(try PolicyNotAttachableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachGroupPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case policyNotAttachableException(PolicyNotAttachableException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachGroupPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachGroupPolicyOutputResponse()"}
}

extension AttachGroupPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachGroupPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct AttachGroupPolicyOutputResponseBody: Swift.Equatable {
}

extension AttachGroupPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AttachRolePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachRolePolicyInput(policyArn: \(Swift.String(describing: policyArn)), roleName: \(Swift.String(describing: roleName)))"}
}

extension AttachRolePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("AttachRolePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension AttachRolePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachRolePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM policy you want to attach. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?
    /// The name (friendly name, not ARN) of the role to attach the policy to. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        policyArn: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
        self.roleName = roleName
    }
}

extension AttachRolePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachRolePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotAttachable" : self = .policyNotAttachableException(try PolicyNotAttachableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachRolePolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case policyNotAttachableException(PolicyNotAttachableException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachRolePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachRolePolicyOutputResponse()"}
}

extension AttachRolePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachRolePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct AttachRolePolicyOutputResponseBody: Swift.Equatable {
}

extension AttachRolePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AttachUserPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachUserPolicyInput(policyArn: \(Swift.String(describing: policyArn)), userName: \(Swift.String(describing: userName)))"}
}

extension AttachUserPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("AttachUserPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension AttachUserPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachUserPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM policy you want to attach. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?
    /// The name (friendly name, not ARN) of the IAM user to attach the policy to. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        policyArn: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
        self.userName = userName
    }
}

extension AttachUserPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachUserPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotAttachable" : self = .policyNotAttachableException(try PolicyNotAttachableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachUserPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case policyNotAttachableException(PolicyNotAttachableException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachUserPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachUserPolicyOutputResponse()"}
}

extension AttachUserPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachUserPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct AttachUserPolicyOutputResponseBody: Swift.Equatable {
}

extension AttachUserPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IamClientTypes.AttachedPermissionsBoundary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case permissionsBoundaryArn = "PermissionsBoundaryArn"
        case permissionsBoundaryType = "PermissionsBoundaryType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let permissionsBoundaryArn = permissionsBoundaryArn {
            try container.encode(permissionsBoundaryArn, forKey: ClientRuntime.Key("PermissionsBoundaryArn"))
        }
        if let permissionsBoundaryType = permissionsBoundaryType {
            try container.encode(permissionsBoundaryType, forKey: ClientRuntime.Key("PermissionsBoundaryType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let permissionsBoundaryTypeDecoded = try containerValues.decodeIfPresent(IamClientTypes.PermissionsBoundaryAttachmentType.self, forKey: .permissionsBoundaryType)
        permissionsBoundaryType = permissionsBoundaryTypeDecoded
        let permissionsBoundaryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .permissionsBoundaryArn)
        permissionsBoundaryArn = permissionsBoundaryArnDecoded
    }
}

extension IamClientTypes.AttachedPermissionsBoundary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachedPermissionsBoundary(permissionsBoundaryArn: \(Swift.String(describing: permissionsBoundaryArn)), permissionsBoundaryType: \(Swift.String(describing: permissionsBoundaryType)))"}
}

extension IamClientTypes {
    /// Contains information about an attached permissions boundary. An attached permissions boundary is a managed policy that has been attached to a user or role to set the permissions boundary. For more information about permissions boundaries, see [Permissions boundaries for IAM identities ](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the IAM User Guide.
    public struct AttachedPermissionsBoundary: Swift.Equatable {
        /// The ARN of the policy used to set the permissions boundary for the user or role.
        public var permissionsBoundaryArn: Swift.String?
        /// The permissions boundary usage type that indicates what type of IAM resource is used as the permissions boundary for an entity. This data type can only have a value of Policy.
        public var permissionsBoundaryType: IamClientTypes.PermissionsBoundaryAttachmentType?

        public init (
            permissionsBoundaryArn: Swift.String? = nil,
            permissionsBoundaryType: IamClientTypes.PermissionsBoundaryAttachmentType? = nil
        )
        {
            self.permissionsBoundaryArn = permissionsBoundaryArn
            self.permissionsBoundaryType = permissionsBoundaryType
        }
    }

}

extension IamClientTypes.AttachedPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyArn = "PolicyArn"
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
    }
}

extension IamClientTypes.AttachedPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachedPolicy(policyArn: \(Swift.String(describing: policyArn)), policyName: \(Swift.String(describing: policyName)))"}
}

extension IamClientTypes {
    /// Contains information about an attached policy. An attached policy is a managed policy that has been attached to a user, group, or role. This data type is used as a response element in the [ListAttachedGroupPolicies], [ListAttachedRolePolicies], [ListAttachedUserPolicies], and [GetAccountAuthorizationDetails] operations. For more information about managed policies, refer to [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the IAM User Guide.
    public struct AttachedPolicy: Swift.Equatable {
        /// The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources. For more information about ARNs, go to [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var policyArn: Swift.String?
        /// The friendly name of the attached policy.
        public var policyName: Swift.String?

        public init (
            policyArn: Swift.String? = nil,
            policyName: Swift.String? = nil
        )
        {
            self.policyArn = policyArn
            self.policyName = policyName
        }
    }

}

extension ChangePasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangePasswordInput(newPassword: \(Swift.String(describing: newPassword)), oldPassword: \(Swift.String(describing: oldPassword)))"}
}

extension ChangePasswordInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let newPassword = newPassword {
            try container.encode(newPassword, forKey: ClientRuntime.Key("NewPassword"))
        }
        if let oldPassword = oldPassword {
            try container.encode(oldPassword, forKey: ClientRuntime.Key("OldPassword"))
        }
        try container.encode("ChangePassword", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ChangePasswordInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ChangePasswordInput: Swift.Equatable {
    /// The new password. The new password must conform to the Amazon Web Services account's password policy, if one exists. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the Amazon Web Services Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.
    /// This member is required.
    public var newPassword: Swift.String?
    /// The IAM user's current password.
    /// This member is required.
    public var oldPassword: Swift.String?

    public init (
        newPassword: Swift.String? = nil,
        oldPassword: Swift.String? = nil
    )
    {
        self.newPassword = newPassword
        self.oldPassword = oldPassword
    }
}

extension ChangePasswordOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ChangePasswordOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityTemporarilyUnmodifiable" : self = .entityTemporarilyUnmodifiableException(try EntityTemporarilyUnmodifiableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserType" : self = .invalidUserTypeException(try InvalidUserTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordPolicyViolation" : self = .passwordPolicyViolationException(try PasswordPolicyViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ChangePasswordOutputError: Swift.Error, Swift.Equatable {
    case entityTemporarilyUnmodifiableException(EntityTemporarilyUnmodifiableException)
    case invalidUserTypeException(InvalidUserTypeException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case passwordPolicyViolationException(PasswordPolicyViolationException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ChangePasswordOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangePasswordOutputResponse()"}
}

extension ChangePasswordOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ChangePasswordOutputResponse: Swift.Equatable {

    public init() {}
}

struct ChangePasswordOutputResponseBody: Swift.Equatable {
}

extension ChangePasswordOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ConcurrentModificationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConcurrentModificationException(message: \(Swift.String(describing: message)))"}
}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ConcurrentModificationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because multiple requests to change this object were submitted simultaneously. Wait a few minutes and submit your request again.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes.ContextEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextKeyName = "ContextKeyName"
        case contextKeyType = "ContextKeyType"
        case contextKeyValues = "ContextKeyValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let contextKeyName = contextKeyName {
            try container.encode(contextKeyName, forKey: ClientRuntime.Key("ContextKeyName"))
        }
        if let contextKeyType = contextKeyType {
            try container.encode(contextKeyType, forKey: ClientRuntime.Key("ContextKeyType"))
        }
        if let contextKeyValues = contextKeyValues {
            var contextKeyValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ContextKeyValues"))
            for (index0, contextkeyvaluetype0) in contextKeyValues.enumerated() {
                try contextKeyValuesContainer.encode(contextkeyvaluetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextKeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextKeyName)
        contextKeyName = contextKeyNameDecoded
        if containerValues.contains(.contextKeyValues) {
            struct KeyVal0{struct member{}}
            let contextKeyValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .contextKeyValues)
            if let contextKeyValuesWrappedContainer = contextKeyValuesWrappedContainer {
                let contextKeyValuesContainer = try contextKeyValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var contextKeyValuesBuffer:[Swift.String]? = nil
                if let contextKeyValuesContainer = contextKeyValuesContainer {
                    contextKeyValuesBuffer = [Swift.String]()
                    for stringContainer0 in contextKeyValuesContainer {
                        contextKeyValuesBuffer?.append(stringContainer0)
                    }
                }
                contextKeyValues = contextKeyValuesBuffer
            } else {
                contextKeyValues = []
            }
        } else {
            contextKeyValues = nil
        }
        let contextKeyTypeDecoded = try containerValues.decodeIfPresent(IamClientTypes.ContextKeyTypeEnum.self, forKey: .contextKeyType)
        contextKeyType = contextKeyTypeDecoded
    }
}

extension IamClientTypes.ContextEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContextEntry(contextKeyName: \(Swift.String(describing: contextKeyName)), contextKeyType: \(Swift.String(describing: contextKeyType)), contextKeyValues: \(Swift.String(describing: contextKeyValues)))"}
}

extension IamClientTypes {
    /// Contains information about a condition context key. It includes the name of the key and specifies the value (or values, if the context key supports multiple values) to use in the simulation. This information is used when evaluating the Condition elements of the input policies. This data type is used as an input parameter to [SimulateCustomPolicy] and [SimulatePrincipalPolicy].
    public struct ContextEntry: Swift.Equatable {
        /// The full name of a condition context key, including the service prefix. For example, aws:SourceIp or s3:VersionId.
        public var contextKeyName: Swift.String?
        /// The data type of the value (or values) specified in the ContextKeyValues parameter.
        public var contextKeyType: IamClientTypes.ContextKeyTypeEnum?
        /// The value (or values, if the condition context key supports multiple values) to provide to the simulation when the key is referenced by a Condition element in an input policy.
        public var contextKeyValues: [Swift.String]?

        public init (
            contextKeyName: Swift.String? = nil,
            contextKeyType: IamClientTypes.ContextKeyTypeEnum? = nil,
            contextKeyValues: [Swift.String]? = nil
        )
        {
            self.contextKeyName = contextKeyName
            self.contextKeyType = contextKeyType
            self.contextKeyValues = contextKeyValues
        }
    }

}

extension IamClientTypes {
    public enum ContextKeyTypeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case binary
        case binaryList
        case boolean
        case booleanList
        case date
        case dateList
        case ip
        case ipList
        case numeric
        case numericList
        case string
        case stringList
        case sdkUnknown(Swift.String)

        public static var allCases: [ContextKeyTypeEnum] {
            return [
                .binary,
                .binaryList,
                .boolean,
                .booleanList,
                .date,
                .dateList,
                .ip,
                .ipList,
                .numeric,
                .numericList,
                .string,
                .stringList,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .binary: return "binary"
            case .binaryList: return "binaryList"
            case .boolean: return "boolean"
            case .booleanList: return "booleanList"
            case .date: return "date"
            case .dateList: return "dateList"
            case .ip: return "ip"
            case .ipList: return "ipList"
            case .numeric: return "numeric"
            case .numericList: return "numericList"
            case .string: return "string"
            case .stringList: return "stringList"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContextKeyTypeEnum(rawValue: rawValue) ?? ContextKeyTypeEnum.sdkUnknown(rawValue)
        }
    }
}

extension CreateAccessKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAccessKeyInput(userName: \(Swift.String(describing: userName)))"}
}

extension CreateAccessKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("CreateAccessKey", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateAccessKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAccessKeyInput: Swift.Equatable {
    /// The name of the IAM user that the new key will belong to. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        userName: Swift.String? = nil
    )
    {
        self.userName = userName
    }
}

extension CreateAccessKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateAccessKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAccessKeyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAccessKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAccessKeyOutputResponse(accessKey: \(Swift.String(describing: accessKey)))"}
}

extension CreateAccessKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateAccessKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessKey = output.accessKey
        } else {
            self.accessKey = nil
        }
    }
}

/// Contains the response to a successful [CreateAccessKey] request.
public struct CreateAccessKeyOutputResponse: Swift.Equatable {
    /// A structure with details about the access key.
    /// This member is required.
    public var accessKey: IamClientTypes.AccessKey?

    public init (
        accessKey: IamClientTypes.AccessKey? = nil
    )
    {
        self.accessKey = accessKey
    }
}

struct CreateAccessKeyOutputResponseBody: Swift.Equatable {
    public let accessKey: IamClientTypes.AccessKey?
}

extension CreateAccessKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateAccessKeyResult"))
        let accessKeyDecoded = try containerValues.decodeIfPresent(IamClientTypes.AccessKey.self, forKey: .accessKey)
        accessKey = accessKeyDecoded
    }
}

extension CreateAccountAliasInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAccountAliasInput(accountAlias: \(Swift.String(describing: accountAlias)))"}
}

extension CreateAccountAliasInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountAlias = accountAlias {
            try container.encode(accountAlias, forKey: ClientRuntime.Key("AccountAlias"))
        }
        try container.encode("CreateAccountAlias", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateAccountAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAccountAliasInput: Swift.Equatable {
    /// The account alias to create. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.
    /// This member is required.
    public var accountAlias: Swift.String?

    public init (
        accountAlias: Swift.String? = nil
    )
    {
        self.accountAlias = accountAlias
    }
}

extension CreateAccountAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateAccountAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAccountAliasOutputError: Swift.Error, Swift.Equatable {
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAccountAliasOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAccountAliasOutputResponse()"}
}

extension CreateAccountAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateAccountAliasOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateAccountAliasOutputResponseBody: Swift.Equatable {
}

extension CreateAccountAliasOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CreateGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateGroupInput(groupName: \(Swift.String(describing: groupName)), path: \(Swift.String(describing: path)))"}
}

extension CreateGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        try container.encode("CreateGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateGroupInput: Swift.Equatable {
    /// The name of the group to create. Do not include the path in this value. IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".
    /// This member is required.
    public var groupName: Swift.String?
    /// The path to the group. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var path: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        path: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.path = path
    }
}

extension CreateGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateGroupOutputError: Swift.Error, Swift.Equatable {
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateGroupOutputResponse(group: \(Swift.String(describing: group)))"}
}

extension CreateGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.group = output.group
        } else {
            self.group = nil
        }
    }
}

/// Contains the response to a successful [CreateGroup] request.
public struct CreateGroupOutputResponse: Swift.Equatable {
    /// A structure containing details about the new group.
    /// This member is required.
    public var group: IamClientTypes.Group?

    public init (
        group: IamClientTypes.Group? = nil
    )
    {
        self.group = group
    }
}

struct CreateGroupOutputResponseBody: Swift.Equatable {
    public let group: IamClientTypes.Group?
}

extension CreateGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateGroupResult"))
        let groupDecoded = try containerValues.decodeIfPresent(IamClientTypes.Group.self, forKey: .group)
        group = groupDecoded
    }
}

extension CreateInstanceProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInstanceProfileInput(instanceProfileName: \(Swift.String(describing: instanceProfileName)), path: \(Swift.String(describing: path)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateInstanceProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceProfileName = instanceProfileName {
            try container.encode(instanceProfileName, forKey: ClientRuntime.Key("InstanceProfileName"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateInstanceProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateInstanceProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateInstanceProfileInput: Swift.Equatable {
    /// The name of the instance profile to create. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var instanceProfileName: Swift.String?
    /// The path to the instance profile. For more information about paths, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var path: Swift.String?
    /// A list of tags that you want to attach to the newly created IAM instance profile. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide. If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
    public var tags: [IamClientTypes.Tag]?

    public init (
        instanceProfileName: Swift.String? = nil,
        path: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.instanceProfileName = instanceProfileName
        self.path = path
        self.tags = tags
    }
}

extension CreateInstanceProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateInstanceProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateInstanceProfileOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInstanceProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInstanceProfileOutputResponse(instanceProfile: \(Swift.String(describing: instanceProfile)))"}
}

extension CreateInstanceProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateInstanceProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceProfile = output.instanceProfile
        } else {
            self.instanceProfile = nil
        }
    }
}

/// Contains the response to a successful [CreateInstanceProfile] request.
public struct CreateInstanceProfileOutputResponse: Swift.Equatable {
    /// A structure containing details about the new instance profile.
    /// This member is required.
    public var instanceProfile: IamClientTypes.InstanceProfile?

    public init (
        instanceProfile: IamClientTypes.InstanceProfile? = nil
    )
    {
        self.instanceProfile = instanceProfile
    }
}

struct CreateInstanceProfileOutputResponseBody: Swift.Equatable {
    public let instanceProfile: IamClientTypes.InstanceProfile?
}

extension CreateInstanceProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceProfile = "InstanceProfile"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateInstanceProfileResult"))
        let instanceProfileDecoded = try containerValues.decodeIfPresent(IamClientTypes.InstanceProfile.self, forKey: .instanceProfile)
        instanceProfile = instanceProfileDecoded
    }
}

extension CreateLoginProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLoginProfileInput(password: \(Swift.String(describing: password)), passwordResetRequired: \(Swift.String(describing: passwordResetRequired)), userName: \(Swift.String(describing: userName)))"}
}

extension CreateLoginProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let password = password {
            try container.encode(password, forKey: ClientRuntime.Key("Password"))
        }
        if passwordResetRequired != false {
            try container.encode(passwordResetRequired, forKey: ClientRuntime.Key("PasswordResetRequired"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("CreateLoginProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateLoginProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLoginProfileInput: Swift.Equatable {
    /// The new password for the user. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the Amazon Web Services Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.
    /// This member is required.
    public var password: Swift.String?
    /// Specifies whether the user is required to set a new password on next sign-in.
    public var passwordResetRequired: Swift.Bool
    /// The name of the IAM user to create a password for. The user must already exist. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        password: Swift.String? = nil,
        passwordResetRequired: Swift.Bool = false,
        userName: Swift.String? = nil
    )
    {
        self.password = password
        self.passwordResetRequired = passwordResetRequired
        self.userName = userName
    }
}

extension CreateLoginProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateLoginProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordPolicyViolation" : self = .passwordPolicyViolationException(try PasswordPolicyViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLoginProfileOutputError: Swift.Error, Swift.Equatable {
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case passwordPolicyViolationException(PasswordPolicyViolationException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLoginProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLoginProfileOutputResponse(loginProfile: \(Swift.String(describing: loginProfile)))"}
}

extension CreateLoginProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLoginProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loginProfile = output.loginProfile
        } else {
            self.loginProfile = nil
        }
    }
}

/// Contains the response to a successful [CreateLoginProfile] request.
public struct CreateLoginProfileOutputResponse: Swift.Equatable {
    /// A structure containing the user name and password create date.
    /// This member is required.
    public var loginProfile: IamClientTypes.LoginProfile?

    public init (
        loginProfile: IamClientTypes.LoginProfile? = nil
    )
    {
        self.loginProfile = loginProfile
    }
}

struct CreateLoginProfileOutputResponseBody: Swift.Equatable {
    public let loginProfile: IamClientTypes.LoginProfile?
}

extension CreateLoginProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loginProfile = "LoginProfile"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateLoginProfileResult"))
        let loginProfileDecoded = try containerValues.decodeIfPresent(IamClientTypes.LoginProfile.self, forKey: .loginProfile)
        loginProfile = loginProfileDecoded
    }
}

extension CreateOpenIDConnectProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateOpenIDConnectProviderInput(clientIDList: \(Swift.String(describing: clientIDList)), tags: \(Swift.String(describing: tags)), thumbprintList: \(Swift.String(describing: thumbprintList)), url: \(Swift.String(describing: url)))"}
}

extension CreateOpenIDConnectProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientIDList = clientIDList {
            var clientIDListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClientIDList"))
            for (index0, clientidtype0) in clientIDList.enumerated() {
                try clientIDListContainer.encode(clientidtype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let thumbprintList = thumbprintList {
            var thumbprintListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ThumbprintList"))
            for (index0, thumbprinttype0) in thumbprintList.enumerated() {
                try thumbprintListContainer.encode(thumbprinttype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let url = url {
            try container.encode(url, forKey: ClientRuntime.Key("Url"))
        }
        try container.encode("CreateOpenIDConnectProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateOpenIDConnectProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateOpenIDConnectProviderInput: Swift.Equatable {
    /// Provides a list of client IDs, also known as audiences. When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. This is the value that's sent as the client_id parameter on OAuth requests. You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider. There is no defined format for a client ID. The CreateOpenIDConnectProviderRequest operation accepts client IDs up to 255 characters long.
    public var clientIDList: [Swift.String]?
    /// A list of tags that you want to attach to the new IAM OpenID Connect (OIDC) provider. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide. If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
    public var tags: [IamClientTypes.Tag]?
    /// A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificates. Typically this list includes only one entry. However, IAM lets you have up to five thumbprints for an OIDC provider. This lets you maintain multiple thumbprints if the identity provider is rotating certificates. The server certificate thumbprint is the hex-encoded SHA-1 hash value of the X.509 certificate used by the domain where the OpenID Connect provider makes its keys available. It is always a 40-character string. You must provide at least one thumbprint when creating an IAM OIDC provider. For example, assume that the OIDC provider is server.example.com and the provider stores its keys at https://keys.server.example.com/openid-connect. In that case, the thumbprint string would be the hex-encoded SHA-1 hash value of the certificate used by https://keys.server.example.com. For more information about obtaining the OIDC provider thumbprint, see [Obtaining the thumbprint for an OpenID Connect provider](https://docs.aws.amazon.com/IAM/latest/UserGuide/identity-providers-oidc-obtain-thumbprint.html) in the IAM User Guide.
    /// This member is required.
    public var thumbprintList: [Swift.String]?
    /// The URL of the identity provider. The URL must begin with https:// and should correspond to the iss claim in the provider's OpenID Connect ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a hostname, like https://server.example.org or https://example.com. The URL should not contain a port number. You cannot register the same provider multiple times in a single Amazon Web Services account. If you try to submit a URL that has already been used for an OpenID Connect provider in the Amazon Web Services account, you will get an error.
    /// This member is required.
    public var url: Swift.String?

    public init (
        clientIDList: [Swift.String]? = nil,
        tags: [IamClientTypes.Tag]? = nil,
        thumbprintList: [Swift.String]? = nil,
        url: Swift.String? = nil
    )
    {
        self.clientIDList = clientIDList
        self.tags = tags
        self.thumbprintList = thumbprintList
        self.url = url
    }
}

extension CreateOpenIDConnectProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateOpenIDConnectProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateOpenIDConnectProviderOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOpenIDConnectProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateOpenIDConnectProviderOutputResponse(openIDConnectProviderArn: \(Swift.String(describing: openIDConnectProviderArn)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateOpenIDConnectProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateOpenIDConnectProviderOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.openIDConnectProviderArn = output.openIDConnectProviderArn
            self.tags = output.tags
        } else {
            self.openIDConnectProviderArn = nil
            self.tags = nil
        }
    }
}

/// Contains the response to a successful [CreateOpenIDConnectProvider] request.
public struct CreateOpenIDConnectProviderOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the new IAM OpenID Connect provider that is created. For more information, see [OpenIDConnectProviderListEntry].
    public var openIDConnectProviderArn: Swift.String?
    /// A list of tags that are attached to the new IAM OIDC provider. The returned list of tags is sorted by tag key. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
    public var tags: [IamClientTypes.Tag]?

    public init (
        openIDConnectProviderArn: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.openIDConnectProviderArn = openIDConnectProviderArn
        self.tags = tags
    }
}

struct CreateOpenIDConnectProviderOutputResponseBody: Swift.Equatable {
    public let openIDConnectProviderArn: Swift.String?
    public let tags: [IamClientTypes.Tag]?
}

extension CreateOpenIDConnectProviderOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case openIDConnectProviderArn = "OpenIDConnectProviderArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateOpenIDConnectProviderResult"))
        let openIDConnectProviderArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .openIDConnectProviderArn)
        openIDConnectProviderArn = openIDConnectProviderArnDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreatePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePolicyInput(description: \(Swift.String(describing: description)), path: \(Swift.String(describing: path)), policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreatePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let policyDocument = policyDocument {
            try container.encode(policyDocument, forKey: ClientRuntime.Key("PolicyDocument"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreatePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreatePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreatePolicyInput: Swift.Equatable {
    /// A friendly description of the policy. Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables." The policy description is immutable. After a value is assigned, it cannot be changed.
    public var description: Swift.String?
    /// The path for the policy. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters. You cannot use an asterisk (*) in the path name.
    public var path: Swift.String?
    /// The JSON policy document that you want to use as the content for the new policy. You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM. The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see [IAM and STS character quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length). To learn more about JSON policy grammar, see [Grammar of the IAM JSON policy language](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html) in the IAM User Guide. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var policyDocument: Swift.String?
    /// The friendly name of the policy. IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".
    /// This member is required.
    public var policyName: Swift.String?
    /// A list of tags that you want to attach to the new IAM customer managed policy. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide. If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
    public var tags: [IamClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        path: Swift.String? = nil,
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.path = path
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.tags = tags
    }
}

extension CreatePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreatePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocument" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePolicyOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePolicyOutputResponse(policy: \(Swift.String(describing: policy)))"}
}

extension CreatePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreatePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

/// Contains the response to a successful [CreatePolicy] request.
public struct CreatePolicyOutputResponse: Swift.Equatable {
    /// A structure containing details about the new policy.
    public var policy: IamClientTypes.Policy?

    public init (
        policy: IamClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

struct CreatePolicyOutputResponseBody: Swift.Equatable {
    public let policy: IamClientTypes.Policy?
}

extension CreatePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreatePolicyResult"))
        let policyDecoded = try containerValues.decodeIfPresent(IamClientTypes.Policy.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension CreatePolicyVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePolicyVersionInput(policyArn: \(Swift.String(describing: policyArn)), policyDocument: \(Swift.String(describing: policyDocument)), setAsDefault: \(Swift.String(describing: setAsDefault)))"}
}

extension CreatePolicyVersionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let policyDocument = policyDocument {
            try container.encode(policyDocument, forKey: ClientRuntime.Key("PolicyDocument"))
        }
        if setAsDefault != false {
            try container.encode(setAsDefault, forKey: ClientRuntime.Key("SetAsDefault"))
        }
        try container.encode("CreatePolicyVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreatePolicyVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreatePolicyVersionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM policy to which you want to add a new version. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?
    /// The JSON policy document that you want to use as the content for this new version of the policy. You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM. The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see [IAM and STS character quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length). The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var policyDocument: Swift.String?
    /// Specifies whether to set this version as the policy's default version. When this parameter is true, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to. For more information about managed policy versions, see [Versioning for managed policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html) in the IAM User Guide.
    public var setAsDefault: Swift.Bool

    public init (
        policyArn: Swift.String? = nil,
        policyDocument: Swift.String? = nil,
        setAsDefault: Swift.Bool = false
    )
    {
        self.policyArn = policyArn
        self.policyDocument = policyDocument
        self.setAsDefault = setAsDefault
    }
}

extension CreatePolicyVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreatePolicyVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocument" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePolicyVersionOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePolicyVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePolicyVersionOutputResponse(policyVersion: \(Swift.String(describing: policyVersion)))"}
}

extension CreatePolicyVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreatePolicyVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policyVersion = output.policyVersion
        } else {
            self.policyVersion = nil
        }
    }
}

/// Contains the response to a successful [CreatePolicyVersion] request.
public struct CreatePolicyVersionOutputResponse: Swift.Equatable {
    /// A structure containing details about the new policy version.
    public var policyVersion: IamClientTypes.PolicyVersion?

    public init (
        policyVersion: IamClientTypes.PolicyVersion? = nil
    )
    {
        self.policyVersion = policyVersion
    }
}

struct CreatePolicyVersionOutputResponseBody: Swift.Equatable {
    public let policyVersion: IamClientTypes.PolicyVersion?
}

extension CreatePolicyVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyVersion = "PolicyVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreatePolicyVersionResult"))
        let policyVersionDecoded = try containerValues.decodeIfPresent(IamClientTypes.PolicyVersion.self, forKey: .policyVersion)
        policyVersion = policyVersionDecoded
    }
}

extension CreateRoleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRoleInput(assumeRolePolicyDocument: \(Swift.String(describing: assumeRolePolicyDocument)), description: \(Swift.String(describing: description)), maxSessionDuration: \(Swift.String(describing: maxSessionDuration)), path: \(Swift.String(describing: path)), permissionsBoundary: \(Swift.String(describing: permissionsBoundary)), roleName: \(Swift.String(describing: roleName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateRoleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let assumeRolePolicyDocument = assumeRolePolicyDocument {
            try container.encode(assumeRolePolicyDocument, forKey: ClientRuntime.Key("AssumeRolePolicyDocument"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let maxSessionDuration = maxSessionDuration {
            try container.encode(maxSessionDuration, forKey: ClientRuntime.Key("MaxSessionDuration"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let permissionsBoundary = permissionsBoundary {
            try container.encode(permissionsBoundary, forKey: ClientRuntime.Key("PermissionsBoundary"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateRole", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRoleInput: Swift.Equatable {
    /// The trust relationship policy document that grants an entity permission to assume the role. In IAM, you must provide a JSON policy that has been converted to a string. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    ///
    ///
    /// Upon success, the response includes the same trust policy in JSON format.
    /// This member is required.
    public var assumeRolePolicyDocument: Swift.String?
    /// A description of the role.
    public var description: Swift.String?
    /// The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours. Anyone who assumes the role from the or API can use the DurationSeconds API parameter or the duration-seconds CLI parameter to request a longer session. The MaxSessionDuration setting determines the maximum duration that can be requested using the DurationSeconds parameter. If users don't specify a value for the DurationSeconds parameter, their security credentials are valid for one hour by default. This applies when you use the AssumeRole* API operations or the assume-role* CLI operations but does not apply when you use those operations to create a console URL. For more information, see [Using IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) in the IAM User Guide.
    public var maxSessionDuration: Swift.Int?
    /// The path to the role. For more information about paths, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var path: Swift.String?
    /// The ARN of the policy that is used to set the permissions boundary for the role.
    public var permissionsBoundary: Swift.String?
    /// The name of the role to create. IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".
    /// This member is required.
    public var roleName: Swift.String?
    /// A list of tags that you want to attach to the new role. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide. If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
    public var tags: [IamClientTypes.Tag]?

    public init (
        assumeRolePolicyDocument: Swift.String? = nil,
        description: Swift.String? = nil,
        maxSessionDuration: Swift.Int? = nil,
        path: Swift.String? = nil,
        permissionsBoundary: Swift.String? = nil,
        roleName: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.assumeRolePolicyDocument = assumeRolePolicyDocument
        self.description = description
        self.maxSessionDuration = maxSessionDuration
        self.path = path
        self.permissionsBoundary = permissionsBoundary
        self.roleName = roleName
        self.tags = tags
    }
}

extension CreateRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocument" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRoleOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRoleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRoleOutputResponse(role: \(Swift.String(describing: role)))"}
}

extension CreateRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateRoleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.role = output.role
        } else {
            self.role = nil
        }
    }
}

/// Contains the response to a successful [CreateRole] request.
public struct CreateRoleOutputResponse: Swift.Equatable {
    /// A structure containing details about the new role.
    /// This member is required.
    public var role: IamClientTypes.Role?

    public init (
        role: IamClientTypes.Role? = nil
    )
    {
        self.role = role
    }
}

struct CreateRoleOutputResponseBody: Swift.Equatable {
    public let role: IamClientTypes.Role?
}

extension CreateRoleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case role = "Role"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateRoleResult"))
        let roleDecoded = try containerValues.decodeIfPresent(IamClientTypes.Role.self, forKey: .role)
        role = roleDecoded
    }
}

extension CreateSAMLProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSAMLProviderInput(name: \(Swift.String(describing: name)), sAMLMetadataDocument: \(Swift.String(describing: sAMLMetadataDocument)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateSAMLProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let sAMLMetadataDocument = sAMLMetadataDocument {
            try container.encode(sAMLMetadataDocument, forKey: ClientRuntime.Key("SAMLMetadataDocument"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateSAMLProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateSAMLProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateSAMLProviderInput: Swift.Equatable {
    /// The name of the provider to create. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var name: Swift.String?
    /// An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP. For more information, see [About SAML 2.0-based federation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html) in the IAM User Guide
    /// This member is required.
    public var sAMLMetadataDocument: Swift.String?
    /// A list of tags that you want to attach to the new IAM SAML provider. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide. If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
    public var tags: [IamClientTypes.Tag]?

    public init (
        name: Swift.String? = nil,
        sAMLMetadataDocument: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.name = name
        self.sAMLMetadataDocument = sAMLMetadataDocument
        self.tags = tags
    }
}

extension CreateSAMLProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateSAMLProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateSAMLProviderOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSAMLProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSAMLProviderOutputResponse(sAMLProviderArn: \(Swift.String(describing: sAMLProviderArn)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateSAMLProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateSAMLProviderOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sAMLProviderArn = output.sAMLProviderArn
            self.tags = output.tags
        } else {
            self.sAMLProviderArn = nil
            self.tags = nil
        }
    }
}

/// Contains the response to a successful [CreateSAMLProvider] request.
public struct CreateSAMLProviderOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the new SAML provider resource in IAM.
    public var sAMLProviderArn: Swift.String?
    /// A list of tags that are attached to the new IAM SAML provider. The returned list of tags is sorted by tag key. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
    public var tags: [IamClientTypes.Tag]?

    public init (
        sAMLProviderArn: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.sAMLProviderArn = sAMLProviderArn
        self.tags = tags
    }
}

struct CreateSAMLProviderOutputResponseBody: Swift.Equatable {
    public let sAMLProviderArn: Swift.String?
    public let tags: [IamClientTypes.Tag]?
}

extension CreateSAMLProviderOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sAMLProviderArn = "SAMLProviderArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateSAMLProviderResult"))
        let sAMLProviderArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sAMLProviderArn)
        sAMLProviderArn = sAMLProviderArnDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateServiceLinkedRoleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateServiceLinkedRoleInput(aWSServiceName: \(Swift.String(describing: aWSServiceName)), customSuffix: \(Swift.String(describing: customSuffix)), description: \(Swift.String(describing: description)))"}
}

extension CreateServiceLinkedRoleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aWSServiceName = aWSServiceName {
            try container.encode(aWSServiceName, forKey: ClientRuntime.Key("AWSServiceName"))
        }
        if let customSuffix = customSuffix {
            try container.encode(customSuffix, forKey: ClientRuntime.Key("CustomSuffix"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        try container.encode("CreateServiceLinkedRole", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateServiceLinkedRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateServiceLinkedRoleInput: Swift.Equatable {
    /// The service principal for the Amazon Web Services service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: elasticbeanstalk.amazonaws.com. Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see [Amazon Web Services services that work with IAM](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html) in the IAM User Guide. Look for the services that have Yes in the Service-Linked Role column. Choose the Yes link to view the service-linked role documentation for that service.
    /// This member is required.
    public var aWSServiceName: Swift.String?
    /// A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different CustomSuffix for each request. Otherwise the request fails with a duplicate role name error. For example, you could add -1 or -debug to the suffix. Some services do not support the CustomSuffix parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.
    public var customSuffix: Swift.String?
    /// The description of the role.
    public var description: Swift.String?

    public init (
        aWSServiceName: Swift.String? = nil,
        customSuffix: Swift.String? = nil,
        description: Swift.String? = nil
    )
    {
        self.aWSServiceName = aWSServiceName
        self.customSuffix = customSuffix
        self.description = description
    }
}

extension CreateServiceLinkedRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateServiceLinkedRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateServiceLinkedRoleOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateServiceLinkedRoleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateServiceLinkedRoleOutputResponse(role: \(Swift.String(describing: role)))"}
}

extension CreateServiceLinkedRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateServiceLinkedRoleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.role = output.role
        } else {
            self.role = nil
        }
    }
}

public struct CreateServiceLinkedRoleOutputResponse: Swift.Equatable {
    /// A [Role] object that contains details about the newly created role.
    public var role: IamClientTypes.Role?

    public init (
        role: IamClientTypes.Role? = nil
    )
    {
        self.role = role
    }
}

struct CreateServiceLinkedRoleOutputResponseBody: Swift.Equatable {
    public let role: IamClientTypes.Role?
}

extension CreateServiceLinkedRoleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case role = "Role"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateServiceLinkedRoleResult"))
        let roleDecoded = try containerValues.decodeIfPresent(IamClientTypes.Role.self, forKey: .role)
        role = roleDecoded
    }
}

extension CreateServiceSpecificCredentialInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateServiceSpecificCredentialInput(serviceName: \(Swift.String(describing: serviceName)), userName: \(Swift.String(describing: userName)))"}
}

extension CreateServiceSpecificCredentialInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serviceName = serviceName {
            try container.encode(serviceName, forKey: ClientRuntime.Key("ServiceName"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("CreateServiceSpecificCredential", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateServiceSpecificCredentialInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateServiceSpecificCredentialInput: Swift.Equatable {
    /// The name of the Amazon Web Services service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        serviceName: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
        self.userName = userName
    }
}

extension CreateServiceSpecificCredentialOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateServiceSpecificCredentialOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotSupportedService" : self = .serviceNotSupportedException(try ServiceNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateServiceSpecificCredentialOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceNotSupportedException(ServiceNotSupportedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateServiceSpecificCredentialOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateServiceSpecificCredentialOutputResponse(serviceSpecificCredential: \(Swift.String(describing: serviceSpecificCredential)))"}
}

extension CreateServiceSpecificCredentialOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateServiceSpecificCredentialOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serviceSpecificCredential = output.serviceSpecificCredential
        } else {
            self.serviceSpecificCredential = nil
        }
    }
}

public struct CreateServiceSpecificCredentialOutputResponse: Swift.Equatable {
    /// A structure that contains information about the newly created service-specific credential. This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you must reset the password with [ResetServiceSpecificCredential].
    public var serviceSpecificCredential: IamClientTypes.ServiceSpecificCredential?

    public init (
        serviceSpecificCredential: IamClientTypes.ServiceSpecificCredential? = nil
    )
    {
        self.serviceSpecificCredential = serviceSpecificCredential
    }
}

struct CreateServiceSpecificCredentialOutputResponseBody: Swift.Equatable {
    public let serviceSpecificCredential: IamClientTypes.ServiceSpecificCredential?
}

extension CreateServiceSpecificCredentialOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceSpecificCredential = "ServiceSpecificCredential"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateServiceSpecificCredentialResult"))
        let serviceSpecificCredentialDecoded = try containerValues.decodeIfPresent(IamClientTypes.ServiceSpecificCredential.self, forKey: .serviceSpecificCredential)
        serviceSpecificCredential = serviceSpecificCredentialDecoded
    }
}

extension CreateUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateUserInput(path: \(Swift.String(describing: path)), permissionsBoundary: \(Swift.String(describing: permissionsBoundary)), tags: \(Swift.String(describing: tags)), userName: \(Swift.String(describing: userName)))"}
}

extension CreateUserInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let permissionsBoundary = permissionsBoundary {
            try container.encode(permissionsBoundary, forKey: ClientRuntime.Key("PermissionsBoundary"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("CreateUser", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateUserInput: Swift.Equatable {
    /// The path for the user name. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var path: Swift.String?
    /// The ARN of the policy that is used to set the permissions boundary for the user.
    public var permissionsBoundary: Swift.String?
    /// A list of tags that you want to attach to the new user. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide. If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
    public var tags: [IamClientTypes.Tag]?
    /// The name of the user to create. IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".
    /// This member is required.
    public var userName: Swift.String?

    public init (
        path: Swift.String? = nil,
        permissionsBoundary: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil,
        userName: Swift.String? = nil
    )
    {
        self.path = path
        self.permissionsBoundary = permissionsBoundary
        self.tags = tags
        self.userName = userName
    }
}

extension CreateUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateUserOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateUserOutputResponse(user: \(Swift.String(describing: user)))"}
}

extension CreateUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.user = output.user
        } else {
            self.user = nil
        }
    }
}

/// Contains the response to a successful [CreateUser] request.
public struct CreateUserOutputResponse: Swift.Equatable {
    /// A structure with details about the new IAM user.
    public var user: IamClientTypes.User?

    public init (
        user: IamClientTypes.User? = nil
    )
    {
        self.user = user
    }
}

struct CreateUserOutputResponseBody: Swift.Equatable {
    public let user: IamClientTypes.User?
}

extension CreateUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case user = "User"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateUserResult"))
        let userDecoded = try containerValues.decodeIfPresent(IamClientTypes.User.self, forKey: .user)
        user = userDecoded
    }
}

extension CreateVirtualMFADeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVirtualMFADeviceInput(path: \(Swift.String(describing: path)), tags: \(Swift.String(describing: tags)), virtualMFADeviceName: \(Swift.String(describing: virtualMFADeviceName)))"}
}

extension CreateVirtualMFADeviceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let virtualMFADeviceName = virtualMFADeviceName {
            try container.encode(virtualMFADeviceName, forKey: ClientRuntime.Key("VirtualMFADeviceName"))
        }
        try container.encode("CreateVirtualMFADevice", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateVirtualMFADeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateVirtualMFADeviceInput: Swift.Equatable {
    /// The path for the virtual MFA device. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var path: Swift.String?
    /// A list of tags that you want to attach to the new IAM virtual MFA device. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide. If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
    public var tags: [IamClientTypes.Tag]?
    /// The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var virtualMFADeviceName: Swift.String?

    public init (
        path: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil,
        virtualMFADeviceName: Swift.String? = nil
    )
    {
        self.path = path
        self.tags = tags
        self.virtualMFADeviceName = virtualMFADeviceName
    }
}

extension CreateVirtualMFADeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateVirtualMFADeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVirtualMFADeviceOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVirtualMFADeviceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVirtualMFADeviceOutputResponse(virtualMFADevice: \(Swift.String(describing: virtualMFADevice)))"}
}

extension CreateVirtualMFADeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateVirtualMFADeviceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualMFADevice = output.virtualMFADevice
        } else {
            self.virtualMFADevice = nil
        }
    }
}

/// Contains the response to a successful [CreateVirtualMFADevice] request.
public struct CreateVirtualMFADeviceOutputResponse: Swift.Equatable {
    /// A structure containing details about the new virtual MFA device.
    /// This member is required.
    public var virtualMFADevice: IamClientTypes.VirtualMFADevice?

    public init (
        virtualMFADevice: IamClientTypes.VirtualMFADevice? = nil
    )
    {
        self.virtualMFADevice = virtualMFADevice
    }
}

struct CreateVirtualMFADeviceOutputResponseBody: Swift.Equatable {
    public let virtualMFADevice: IamClientTypes.VirtualMFADevice?
}

extension CreateVirtualMFADeviceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualMFADevice = "VirtualMFADevice"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateVirtualMFADeviceResult"))
        let virtualMFADeviceDecoded = try containerValues.decodeIfPresent(IamClientTypes.VirtualMFADevice.self, forKey: .virtualMFADevice)
        virtualMFADevice = virtualMFADeviceDecoded
    }
}

extension CredentialReportExpiredException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CredentialReportExpiredException(message: \(Swift.String(describing: message)))"}
}

extension CredentialReportExpiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CredentialReportExpiredExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the most recent credential report has expired. To generate a new credential report, use [GenerateCredentialReport]. For more information about credential report expiration, see [Getting credential reports](https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html) in the IAM User Guide.
public struct CredentialReportExpiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CredentialReportExpiredExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension CredentialReportExpiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CredentialReportNotPresentException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CredentialReportNotPresentException(message: \(Swift.String(describing: message)))"}
}

extension CredentialReportNotPresentException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CredentialReportNotPresentExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the credential report does not exist. To generate a credential report, use [GenerateCredentialReport].
public struct CredentialReportNotPresentException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CredentialReportNotPresentExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension CredentialReportNotPresentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CredentialReportNotReadyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CredentialReportNotReadyException(message: \(Swift.String(describing: message)))"}
}

extension CredentialReportNotReadyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CredentialReportNotReadyExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the credential report is still being generated.
public struct CredentialReportNotReadyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CredentialReportNotReadyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension CredentialReportNotReadyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeactivateMFADeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeactivateMFADeviceInput(serialNumber: \(Swift.String(describing: serialNumber)), userName: \(Swift.String(describing: userName)))"}
}

extension DeactivateMFADeviceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serialNumber = serialNumber {
            try container.encode(serialNumber, forKey: ClientRuntime.Key("SerialNumber"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("DeactivateMFADevice", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeactivateMFADeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeactivateMFADeviceInput: Swift.Equatable {
    /// The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-
    /// This member is required.
    public var serialNumber: Swift.String?
    /// The name of the user whose MFA device you want to deactivate. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        serialNumber: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.serialNumber = serialNumber
        self.userName = userName
    }
}

extension DeactivateMFADeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeactivateMFADeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityTemporarilyUnmodifiable" : self = .entityTemporarilyUnmodifiableException(try EntityTemporarilyUnmodifiableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeactivateMFADeviceOutputError: Swift.Error, Swift.Equatable {
    case entityTemporarilyUnmodifiableException(EntityTemporarilyUnmodifiableException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeactivateMFADeviceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeactivateMFADeviceOutputResponse()"}
}

extension DeactivateMFADeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeactivateMFADeviceOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeactivateMFADeviceOutputResponseBody: Swift.Equatable {
}

extension DeactivateMFADeviceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteAccessKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAccessKeyInput(accessKeyId: \(Swift.String(describing: accessKeyId)), userName: \(Swift.String(describing: userName)))"}
}

extension DeleteAccessKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accessKeyId = accessKeyId {
            try container.encode(accessKeyId, forKey: ClientRuntime.Key("AccessKeyId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("DeleteAccessKey", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteAccessKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAccessKeyInput: Swift.Equatable {
    /// The access key ID for the access key ID and secret access key you want to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that can consist of any upper or lowercased letter or digit.
    /// This member is required.
    public var accessKeyId: Swift.String?
    /// The name of the user whose access key pair you want to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        accessKeyId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.accessKeyId = accessKeyId
        self.userName = userName
    }
}

extension DeleteAccessKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteAccessKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAccessKeyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAccessKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAccessKeyOutputResponse()"}
}

extension DeleteAccessKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAccessKeyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteAccessKeyOutputResponseBody: Swift.Equatable {
}

extension DeleteAccessKeyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteAccountAliasInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAccountAliasInput(accountAlias: \(Swift.String(describing: accountAlias)))"}
}

extension DeleteAccountAliasInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountAlias = accountAlias {
            try container.encode(accountAlias, forKey: ClientRuntime.Key("AccountAlias"))
        }
        try container.encode("DeleteAccountAlias", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteAccountAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAccountAliasInput: Swift.Equatable {
    /// The name of the account alias to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.
    /// This member is required.
    public var accountAlias: Swift.String?

    public init (
        accountAlias: Swift.String? = nil
    )
    {
        self.accountAlias = accountAlias
    }
}

extension DeleteAccountAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteAccountAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAccountAliasOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAccountAliasOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAccountAliasOutputResponse()"}
}

extension DeleteAccountAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAccountAliasOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteAccountAliasOutputResponseBody: Swift.Equatable {
}

extension DeleteAccountAliasOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteAccountPasswordPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAccountPasswordPolicyInput()"}
}

extension DeleteAccountPasswordPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DeleteAccountPasswordPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteAccountPasswordPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAccountPasswordPolicyInput: Swift.Equatable {

    public init() {}
}

extension DeleteAccountPasswordPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteAccountPasswordPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAccountPasswordPolicyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAccountPasswordPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAccountPasswordPolicyOutputResponse()"}
}

extension DeleteAccountPasswordPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAccountPasswordPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteAccountPasswordPolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteAccountPasswordPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConflictException(message: \(Swift.String(describing: message)))"}
}

extension DeleteConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<DeleteConflictExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.
public struct DeleteConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeleteConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DeleteConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeleteGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteGroupInput(groupName: \(Swift.String(describing: groupName)))"}
}

extension DeleteGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        try container.encode("DeleteGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteGroupInput: Swift.Equatable {
    /// The name of the IAM group to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var groupName: Swift.String?

    public init (
        groupName: Swift.String? = nil
    )
    {
        self.groupName = groupName
    }
}

extension DeleteGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeleteConflict" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteGroupOutputError: Swift.Error, Swift.Equatable {
    case deleteConflictException(DeleteConflictException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteGroupOutputResponse()"}
}

extension DeleteGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteGroupOutputResponseBody: Swift.Equatable {
}

extension DeleteGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteGroupPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteGroupPolicyInput(groupName: \(Swift.String(describing: groupName)), policyName: \(Swift.String(describing: policyName)))"}
}

extension DeleteGroupPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("DeleteGroupPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteGroupPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteGroupPolicyInput: Swift.Equatable {
    /// The name (friendly name, not ARN) identifying the group that the policy is embedded in. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var groupName: Swift.String?
    /// The name identifying the policy document to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.policyName = policyName
    }
}

extension DeleteGroupPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteGroupPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteGroupPolicyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGroupPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteGroupPolicyOutputResponse()"}
}

extension DeleteGroupPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteGroupPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteGroupPolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteGroupPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteInstanceProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInstanceProfileInput(instanceProfileName: \(Swift.String(describing: instanceProfileName)))"}
}

extension DeleteInstanceProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceProfileName = instanceProfileName {
            try container.encode(instanceProfileName, forKey: ClientRuntime.Key("InstanceProfileName"))
        }
        try container.encode("DeleteInstanceProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteInstanceProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteInstanceProfileInput: Swift.Equatable {
    /// The name of the instance profile to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var instanceProfileName: Swift.String?

    public init (
        instanceProfileName: Swift.String? = nil
    )
    {
        self.instanceProfileName = instanceProfileName
    }
}

extension DeleteInstanceProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteInstanceProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeleteConflict" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInstanceProfileOutputError: Swift.Error, Swift.Equatable {
    case deleteConflictException(DeleteConflictException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInstanceProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInstanceProfileOutputResponse()"}
}

extension DeleteInstanceProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteInstanceProfileOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteInstanceProfileOutputResponseBody: Swift.Equatable {
}

extension DeleteInstanceProfileOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteLoginProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLoginProfileInput(userName: \(Swift.String(describing: userName)))"}
}

extension DeleteLoginProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("DeleteLoginProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteLoginProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLoginProfileInput: Swift.Equatable {
    /// The name of the user whose password you want to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        userName: Swift.String? = nil
    )
    {
        self.userName = userName
    }
}

extension DeleteLoginProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteLoginProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityTemporarilyUnmodifiable" : self = .entityTemporarilyUnmodifiableException(try EntityTemporarilyUnmodifiableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLoginProfileOutputError: Swift.Error, Swift.Equatable {
    case entityTemporarilyUnmodifiableException(EntityTemporarilyUnmodifiableException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLoginProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLoginProfileOutputResponse()"}
}

extension DeleteLoginProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLoginProfileOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteLoginProfileOutputResponseBody: Swift.Equatable {
}

extension DeleteLoginProfileOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteOpenIDConnectProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteOpenIDConnectProviderInput(openIDConnectProviderArn: \(Swift.String(describing: openIDConnectProviderArn)))"}
}

extension DeleteOpenIDConnectProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let openIDConnectProviderArn = openIDConnectProviderArn {
            try container.encode(openIDConnectProviderArn, forKey: ClientRuntime.Key("OpenIDConnectProviderArn"))
        }
        try container.encode("DeleteOpenIDConnectProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteOpenIDConnectProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteOpenIDConnectProviderInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM OpenID Connect provider resource object to delete. You can get a list of OpenID Connect provider resource ARNs by using the [ListOpenIDConnectProviders] operation.
    /// This member is required.
    public var openIDConnectProviderArn: Swift.String?

    public init (
        openIDConnectProviderArn: Swift.String? = nil
    )
    {
        self.openIDConnectProviderArn = openIDConnectProviderArn
    }
}

extension DeleteOpenIDConnectProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteOpenIDConnectProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteOpenIDConnectProviderOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteOpenIDConnectProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteOpenIDConnectProviderOutputResponse()"}
}

extension DeleteOpenIDConnectProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteOpenIDConnectProviderOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteOpenIDConnectProviderOutputResponseBody: Swift.Equatable {
}

extension DeleteOpenIDConnectProviderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePolicyInput(policyArn: \(Swift.String(describing: policyArn)))"}
}

extension DeletePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        try container.encode("DeletePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeletePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM policy you want to delete. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?

    public init (
        policyArn: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
    }
}

extension DeletePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeletePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeleteConflict" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePolicyOutputError: Swift.Error, Swift.Equatable {
    case deleteConflictException(DeleteConflictException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePolicyOutputResponse()"}
}

extension DeletePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeletePolicyOutputResponseBody: Swift.Equatable {
}

extension DeletePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePolicyVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePolicyVersionInput(policyArn: \(Swift.String(describing: policyArn)), versionId: \(Swift.String(describing: versionId)))"}
}

extension DeletePolicyVersionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("DeletePolicyVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeletePolicyVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePolicyVersionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM policy from which you want to delete a version. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?
    /// The policy version to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits. For more information about managed policy versions, see [Versioning for managed policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html) in the IAM User Guide.
    /// This member is required.
    public var versionId: Swift.String?

    public init (
        policyArn: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
        self.versionId = versionId
    }
}

extension DeletePolicyVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeletePolicyVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeleteConflict" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePolicyVersionOutputError: Swift.Error, Swift.Equatable {
    case deleteConflictException(DeleteConflictException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePolicyVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePolicyVersionOutputResponse()"}
}

extension DeletePolicyVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePolicyVersionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeletePolicyVersionOutputResponseBody: Swift.Equatable {
}

extension DeletePolicyVersionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRoleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRoleInput(roleName: \(Swift.String(describing: roleName)))"}
}

extension DeleteRoleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("DeleteRole", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRoleInput: Swift.Equatable {
    /// The name of the role to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        roleName: Swift.String? = nil
    )
    {
        self.roleName = roleName
    }
}

extension DeleteRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeleteConflict" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRoleOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case deleteConflictException(DeleteConflictException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRoleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRoleOutputResponse()"}
}

extension DeleteRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRoleOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteRoleOutputResponseBody: Swift.Equatable {
}

extension DeleteRoleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRolePermissionsBoundaryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRolePermissionsBoundaryInput(roleName: \(Swift.String(describing: roleName)))"}
}

extension DeleteRolePermissionsBoundaryInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("DeleteRolePermissionsBoundary", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteRolePermissionsBoundaryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRolePermissionsBoundaryInput: Swift.Equatable {
    /// The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        roleName: Swift.String? = nil
    )
    {
        self.roleName = roleName
    }
}

extension DeleteRolePermissionsBoundaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteRolePermissionsBoundaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRolePermissionsBoundaryOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRolePermissionsBoundaryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRolePermissionsBoundaryOutputResponse()"}
}

extension DeleteRolePermissionsBoundaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRolePermissionsBoundaryOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteRolePermissionsBoundaryOutputResponseBody: Swift.Equatable {
}

extension DeleteRolePermissionsBoundaryOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRolePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRolePolicyInput(policyName: \(Swift.String(describing: policyName)), roleName: \(Swift.String(describing: roleName)))"}
}

extension DeleteRolePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("DeleteRolePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteRolePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRolePolicyInput: Swift.Equatable {
    /// The name of the inline policy to delete from the specified IAM role. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyName: Swift.String?
    /// The name (friendly name, not ARN) identifying the role that the policy is embedded in. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.roleName = roleName
    }
}

extension DeleteRolePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteRolePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRolePolicyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRolePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRolePolicyOutputResponse()"}
}

extension DeleteRolePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRolePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteRolePolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteRolePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSAMLProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSAMLProviderInput(sAMLProviderArn: \(Swift.String(describing: sAMLProviderArn)))"}
}

extension DeleteSAMLProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sAMLProviderArn = sAMLProviderArn {
            try container.encode(sAMLProviderArn, forKey: ClientRuntime.Key("SAMLProviderArn"))
        }
        try container.encode("DeleteSAMLProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteSAMLProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSAMLProviderInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the SAML provider to delete.
    /// This member is required.
    public var sAMLProviderArn: Swift.String?

    public init (
        sAMLProviderArn: Swift.String? = nil
    )
    {
        self.sAMLProviderArn = sAMLProviderArn
    }
}

extension DeleteSAMLProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteSAMLProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSAMLProviderOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSAMLProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSAMLProviderOutputResponse()"}
}

extension DeleteSAMLProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSAMLProviderOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteSAMLProviderOutputResponseBody: Swift.Equatable {
}

extension DeleteSAMLProviderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSSHPublicKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSSHPublicKeyInput(sSHPublicKeyId: \(Swift.String(describing: sSHPublicKeyId)), userName: \(Swift.String(describing: userName)))"}
}

extension DeleteSSHPublicKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sSHPublicKeyId = sSHPublicKeyId {
            try container.encode(sSHPublicKeyId, forKey: ClientRuntime.Key("SSHPublicKeyId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("DeleteSSHPublicKey", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteSSHPublicKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSSHPublicKeyInput: Swift.Equatable {
    /// The unique identifier for the SSH public key. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that can consist of any upper or lowercased letter or digit.
    /// This member is required.
    public var sSHPublicKeyId: Swift.String?
    /// The name of the IAM user associated with the SSH public key. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        sSHPublicKeyId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.sSHPublicKeyId = sSHPublicKeyId
        self.userName = userName
    }
}

extension DeleteSSHPublicKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteSSHPublicKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSSHPublicKeyOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSSHPublicKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSSHPublicKeyOutputResponse()"}
}

extension DeleteSSHPublicKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSSHPublicKeyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteSSHPublicKeyOutputResponseBody: Swift.Equatable {
}

extension DeleteSSHPublicKeyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteServerCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteServerCertificateInput(serverCertificateName: \(Swift.String(describing: serverCertificateName)))"}
}

extension DeleteServerCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serverCertificateName = serverCertificateName {
            try container.encode(serverCertificateName, forKey: ClientRuntime.Key("ServerCertificateName"))
        }
        try container.encode("DeleteServerCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteServerCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteServerCertificateInput: Swift.Equatable {
    /// The name of the server certificate you want to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var serverCertificateName: Swift.String?

    public init (
        serverCertificateName: Swift.String? = nil
    )
    {
        self.serverCertificateName = serverCertificateName
    }
}

extension DeleteServerCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteServerCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeleteConflict" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteServerCertificateOutputError: Swift.Error, Swift.Equatable {
    case deleteConflictException(DeleteConflictException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteServerCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteServerCertificateOutputResponse()"}
}

extension DeleteServerCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteServerCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteServerCertificateOutputResponseBody: Swift.Equatable {
}

extension DeleteServerCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteServiceLinkedRoleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteServiceLinkedRoleInput(roleName: \(Swift.String(describing: roleName)))"}
}

extension DeleteServiceLinkedRoleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("DeleteServiceLinkedRole", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteServiceLinkedRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteServiceLinkedRoleInput: Swift.Equatable {
    /// The name of the service-linked role to be deleted.
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        roleName: Swift.String? = nil
    )
    {
        self.roleName = roleName
    }
}

extension DeleteServiceLinkedRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteServiceLinkedRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteServiceLinkedRoleOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteServiceLinkedRoleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteServiceLinkedRoleOutputResponse(deletionTaskId: \(Swift.String(describing: deletionTaskId)))"}
}

extension DeleteServiceLinkedRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteServiceLinkedRoleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deletionTaskId = output.deletionTaskId
        } else {
            self.deletionTaskId = nil
        }
    }
}

public struct DeleteServiceLinkedRoleOutputResponse: Swift.Equatable {
    /// The deletion task identifier that you can use to check the status of the deletion. This identifier is returned in the format task/aws-service-role///.
    /// This member is required.
    public var deletionTaskId: Swift.String?

    public init (
        deletionTaskId: Swift.String? = nil
    )
    {
        self.deletionTaskId = deletionTaskId
    }
}

struct DeleteServiceLinkedRoleOutputResponseBody: Swift.Equatable {
    public let deletionTaskId: Swift.String?
}

extension DeleteServiceLinkedRoleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deletionTaskId = "DeletionTaskId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteServiceLinkedRoleResult"))
        let deletionTaskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deletionTaskId)
        deletionTaskId = deletionTaskIdDecoded
    }
}

extension DeleteServiceSpecificCredentialInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteServiceSpecificCredentialInput(serviceSpecificCredentialId: \(Swift.String(describing: serviceSpecificCredentialId)), userName: \(Swift.String(describing: userName)))"}
}

extension DeleteServiceSpecificCredentialInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serviceSpecificCredentialId = serviceSpecificCredentialId {
            try container.encode(serviceSpecificCredentialId, forKey: ClientRuntime.Key("ServiceSpecificCredentialId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("DeleteServiceSpecificCredential", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteServiceSpecificCredentialInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteServiceSpecificCredentialInput: Swift.Equatable {
    /// The unique identifier of the service-specific credential. You can get this value by calling [ListServiceSpecificCredentials]. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that can consist of any upper or lowercased letter or digit.
    /// This member is required.
    public var serviceSpecificCredentialId: Swift.String?
    /// The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        serviceSpecificCredentialId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.serviceSpecificCredentialId = serviceSpecificCredentialId
        self.userName = userName
    }
}

extension DeleteServiceSpecificCredentialOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteServiceSpecificCredentialOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteServiceSpecificCredentialOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteServiceSpecificCredentialOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteServiceSpecificCredentialOutputResponse()"}
}

extension DeleteServiceSpecificCredentialOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteServiceSpecificCredentialOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteServiceSpecificCredentialOutputResponseBody: Swift.Equatable {
}

extension DeleteServiceSpecificCredentialOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSigningCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSigningCertificateInput(certificateId: \(Swift.String(describing: certificateId)), userName: \(Swift.String(describing: userName)))"}
}

extension DeleteSigningCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateId = certificateId {
            try container.encode(certificateId, forKey: ClientRuntime.Key("CertificateId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("DeleteSigningCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteSigningCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSigningCertificateInput: Swift.Equatable {
    /// The ID of the signing certificate to delete. The format of this parameter, as described by its [regex](http://wikipedia.org/wiki/regex) pattern, is a string of characters that can be upper- or lower-cased letters or digits.
    /// This member is required.
    public var certificateId: Swift.String?
    /// The name of the user the signing certificate belongs to. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        certificateId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.certificateId = certificateId
        self.userName = userName
    }
}

extension DeleteSigningCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteSigningCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSigningCertificateOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSigningCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSigningCertificateOutputResponse()"}
}

extension DeleteSigningCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSigningCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteSigningCertificateOutputResponseBody: Swift.Equatable {
}

extension DeleteSigningCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserInput(userName: \(Swift.String(describing: userName)))"}
}

extension DeleteUserInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("DeleteUser", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteUserInput: Swift.Equatable {
    /// The name of the user to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        userName: Swift.String? = nil
    )
    {
        self.userName = userName
    }
}

extension DeleteUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeleteConflict" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUserOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case deleteConflictException(DeleteConflictException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserOutputResponse()"}
}

extension DeleteUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUserOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteUserOutputResponseBody: Swift.Equatable {
}

extension DeleteUserOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUserPermissionsBoundaryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserPermissionsBoundaryInput(userName: \(Swift.String(describing: userName)))"}
}

extension DeleteUserPermissionsBoundaryInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("DeleteUserPermissionsBoundary", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteUserPermissionsBoundaryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteUserPermissionsBoundaryInput: Swift.Equatable {
    /// The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
    /// This member is required.
    public var userName: Swift.String?

    public init (
        userName: Swift.String? = nil
    )
    {
        self.userName = userName
    }
}

extension DeleteUserPermissionsBoundaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteUserPermissionsBoundaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUserPermissionsBoundaryOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserPermissionsBoundaryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserPermissionsBoundaryOutputResponse()"}
}

extension DeleteUserPermissionsBoundaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUserPermissionsBoundaryOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteUserPermissionsBoundaryOutputResponseBody: Swift.Equatable {
}

extension DeleteUserPermissionsBoundaryOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUserPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserPolicyInput(policyName: \(Swift.String(describing: policyName)), userName: \(Swift.String(describing: userName)))"}
}

extension DeleteUserPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("DeleteUserPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteUserPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteUserPolicyInput: Swift.Equatable {
    /// The name identifying the policy document to delete. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyName: Swift.String?
    /// The name (friendly name, not ARN) identifying the user that the policy is embedded in. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.userName = userName
    }
}

extension DeleteUserPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteUserPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUserPolicyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserPolicyOutputResponse()"}
}

extension DeleteUserPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUserPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteUserPolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteUserPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVirtualMFADeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualMFADeviceInput(serialNumber: \(Swift.String(describing: serialNumber)))"}
}

extension DeleteVirtualMFADeviceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serialNumber = serialNumber {
            try container.encode(serialNumber, forKey: ClientRuntime.Key("SerialNumber"))
        }
        try container.encode("DeleteVirtualMFADevice", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteVirtualMFADeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteVirtualMFADeviceInput: Swift.Equatable {
    /// The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-
    /// This member is required.
    public var serialNumber: Swift.String?

    public init (
        serialNumber: Swift.String? = nil
    )
    {
        self.serialNumber = serialNumber
    }
}

extension DeleteVirtualMFADeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteVirtualMFADeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeleteConflict" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVirtualMFADeviceOutputError: Swift.Error, Swift.Equatable {
    case deleteConflictException(DeleteConflictException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVirtualMFADeviceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualMFADeviceOutputResponse()"}
}

extension DeleteVirtualMFADeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteVirtualMFADeviceOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteVirtualMFADeviceOutputResponseBody: Swift.Equatable {
}

extension DeleteVirtualMFADeviceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IamClientTypes.DeletionTaskFailureReasonType: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reason = "Reason"
        case roleUsageList = "RoleUsageList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let reason = reason {
            try container.encode(reason, forKey: ClientRuntime.Key("Reason"))
        }
        if let roleUsageList = roleUsageList {
            var roleUsageListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RoleUsageList"))
            for (index0, roleusagetype0) in roleUsageList.enumerated() {
                try roleUsageListContainer.encode(roleusagetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        if containerValues.contains(.roleUsageList) {
            struct KeyVal0{struct member{}}
            let roleUsageListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .roleUsageList)
            if let roleUsageListWrappedContainer = roleUsageListWrappedContainer {
                let roleUsageListContainer = try roleUsageListWrappedContainer.decodeIfPresent([IamClientTypes.RoleUsageType].self, forKey: .member)
                var roleUsageListBuffer:[IamClientTypes.RoleUsageType]? = nil
                if let roleUsageListContainer = roleUsageListContainer {
                    roleUsageListBuffer = [IamClientTypes.RoleUsageType]()
                    for structureContainer0 in roleUsageListContainer {
                        roleUsageListBuffer?.append(structureContainer0)
                    }
                }
                roleUsageList = roleUsageListBuffer
            } else {
                roleUsageList = []
            }
        } else {
            roleUsageList = nil
        }
    }
}

extension IamClientTypes.DeletionTaskFailureReasonType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletionTaskFailureReasonType(reason: \(Swift.String(describing: reason)), roleUsageList: \(Swift.String(describing: roleUsageList)))"}
}

extension IamClientTypes {
    /// The reason that the service-linked role deletion failed. This data type is used as a response element in the [GetServiceLinkedRoleDeletionStatus] operation.
    public struct DeletionTaskFailureReasonType: Swift.Equatable {
        /// A short description of the reason that the service-linked role deletion failed.
        public var reason: Swift.String?
        /// A list of objects that contains details about the service-linked role deletion failure, if that information is returned by the service. If the service-linked role has active sessions or if any resources that were used by the role have not been deleted from the linked service, the role can't be deleted. This parameter includes a list of the resources that are associated with the role and the Region in which the resources are being used.
        public var roleUsageList: [IamClientTypes.RoleUsageType]?

        public init (
            reason: Swift.String? = nil,
            roleUsageList: [IamClientTypes.RoleUsageType]? = nil
        )
        {
            self.reason = reason
            self.roleUsageList = roleUsageList
        }
    }

}

extension IamClientTypes {
    public enum DeletionTaskStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case notStarted
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [DeletionTaskStatusType] {
            return [
                .failed,
                .inProgress,
                .notStarted,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .notStarted: return "NOT_STARTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeletionTaskStatusType(rawValue: rawValue) ?? DeletionTaskStatusType.sdkUnknown(rawValue)
        }
    }
}

extension DetachGroupPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachGroupPolicyInput(groupName: \(Swift.String(describing: groupName)), policyArn: \(Swift.String(describing: policyArn)))"}
}

extension DetachGroupPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        try container.encode("DetachGroupPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetachGroupPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachGroupPolicyInput: Swift.Equatable {
    /// The name (friendly name, not ARN) of the IAM group to detach the policy from. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var groupName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM policy you want to detach. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        policyArn: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.policyArn = policyArn
    }
}

extension DetachGroupPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachGroupPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachGroupPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachGroupPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachGroupPolicyOutputResponse()"}
}

extension DetachGroupPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachGroupPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DetachGroupPolicyOutputResponseBody: Swift.Equatable {
}

extension DetachGroupPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DetachRolePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachRolePolicyInput(policyArn: \(Swift.String(describing: policyArn)), roleName: \(Swift.String(describing: roleName)))"}
}

extension DetachRolePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("DetachRolePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetachRolePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachRolePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM policy you want to detach. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?
    /// The name (friendly name, not ARN) of the IAM role to detach the policy from. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        policyArn: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
        self.roleName = roleName
    }
}

extension DetachRolePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachRolePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachRolePolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachRolePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachRolePolicyOutputResponse()"}
}

extension DetachRolePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachRolePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DetachRolePolicyOutputResponseBody: Swift.Equatable {
}

extension DetachRolePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DetachUserPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachUserPolicyInput(policyArn: \(Swift.String(describing: policyArn)), userName: \(Swift.String(describing: userName)))"}
}

extension DetachUserPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("DetachUserPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetachUserPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachUserPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM policy you want to detach. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?
    /// The name (friendly name, not ARN) of the IAM user to detach the policy from. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        policyArn: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
        self.userName = userName
    }
}

extension DetachUserPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachUserPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachUserPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachUserPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachUserPolicyOutputResponse()"}
}

extension DetachUserPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachUserPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DetachUserPolicyOutputResponseBody: Swift.Equatable {
}

extension DetachUserPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DuplicateCertificateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DuplicateCertificateException(message: \(Swift.String(describing: message)))"}
}

extension DuplicateCertificateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<DuplicateCertificateExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the same certificate is associated with an IAM user in the account.
public struct DuplicateCertificateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateCertificateExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DuplicateCertificateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DuplicateSSHPublicKeyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DuplicateSSHPublicKeyException(message: \(Swift.String(describing: message)))"}
}

extension DuplicateSSHPublicKeyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<DuplicateSSHPublicKeyExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the SSH public key is already associated with the specified IAM user.
public struct DuplicateSSHPublicKeyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateSSHPublicKeyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DuplicateSSHPublicKeyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EnableMFADeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableMFADeviceInput(authenticationCode1: \(Swift.String(describing: authenticationCode1)), authenticationCode2: \(Swift.String(describing: authenticationCode2)), serialNumber: \(Swift.String(describing: serialNumber)), userName: \(Swift.String(describing: userName)))"}
}

extension EnableMFADeviceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationCode1 = authenticationCode1 {
            try container.encode(authenticationCode1, forKey: ClientRuntime.Key("AuthenticationCode1"))
        }
        if let authenticationCode2 = authenticationCode2 {
            try container.encode(authenticationCode2, forKey: ClientRuntime.Key("AuthenticationCode2"))
        }
        if let serialNumber = serialNumber {
            try container.encode(serialNumber, forKey: ClientRuntime.Key("SerialNumber"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("EnableMFADevice", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension EnableMFADeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnableMFADeviceInput: Swift.Equatable {
    /// An authentication code emitted by the device. The format for this parameter is a string of six digits. Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can [resync the device](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html).
    /// This member is required.
    public var authenticationCode1: Swift.String?
    /// A subsequent authentication code emitted by the device. The format for this parameter is a string of six digits. Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can [resync the device](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html).
    /// This member is required.
    public var authenticationCode2: Swift.String?
    /// The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-
    /// This member is required.
    public var serialNumber: Swift.String?
    /// The name of the IAM user for whom you want to enable the MFA device. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        authenticationCode1: Swift.String? = nil,
        authenticationCode2: Swift.String? = nil,
        serialNumber: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.authenticationCode1 = authenticationCode1
        self.authenticationCode2 = authenticationCode2
        self.serialNumber = serialNumber
        self.userName = userName
    }
}

extension EnableMFADeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnableMFADeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityTemporarilyUnmodifiable" : self = .entityTemporarilyUnmodifiableException(try EntityTemporarilyUnmodifiableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAuthenticationCode" : self = .invalidAuthenticationCodeException(try InvalidAuthenticationCodeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableMFADeviceOutputError: Swift.Error, Swift.Equatable {
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case entityTemporarilyUnmodifiableException(EntityTemporarilyUnmodifiableException)
    case invalidAuthenticationCodeException(InvalidAuthenticationCodeException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableMFADeviceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableMFADeviceOutputResponse()"}
}

extension EnableMFADeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableMFADeviceOutputResponse: Swift.Equatable {

    public init() {}
}

struct EnableMFADeviceOutputResponseBody: Swift.Equatable {
}

extension EnableMFADeviceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IamClientTypes {
    public enum EncodingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pem
        case ssh
        case sdkUnknown(Swift.String)

        public static var allCases: [EncodingType] {
            return [
                .pem,
                .ssh,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pem: return "PEM"
            case .ssh: return "SSH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EncodingType(rawValue: rawValue) ?? EncodingType.sdkUnknown(rawValue)
        }
    }
}

extension EntityAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EntityAlreadyExistsException(message: \(Swift.String(describing: message)))"}
}

extension EntityAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<EntityAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because it attempted to create a resource that already exists.
public struct EntityAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct EntityAlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension EntityAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes.EntityDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityInfo = "EntityInfo"
        case lastAuthenticated = "LastAuthenticated"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let entityInfo = entityInfo {
            try container.encode(entityInfo, forKey: ClientRuntime.Key("EntityInfo"))
        }
        if let lastAuthenticated = lastAuthenticated {
            try container.encode(ClientRuntime.TimestampWrapper(lastAuthenticated, format: .dateTime), forKey: ClientRuntime.Key("lastAuthenticated"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityInfoDecoded = try containerValues.decodeIfPresent(IamClientTypes.EntityInfo.self, forKey: .entityInfo)
        entityInfo = entityInfoDecoded
        let lastAuthenticatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAuthenticated)
        var lastAuthenticatedBuffer:ClientRuntime.Date? = nil
        if let lastAuthenticatedDecoded = lastAuthenticatedDecoded {
            lastAuthenticatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastAuthenticatedDecoded, format: .dateTime)
        }
        lastAuthenticated = lastAuthenticatedBuffer
    }
}

extension IamClientTypes.EntityDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EntityDetails(entityInfo: \(Swift.String(describing: entityInfo)), lastAuthenticated: \(Swift.String(describing: lastAuthenticated)))"}
}

extension IamClientTypes {
    /// An object that contains details about when the IAM entities (users or roles) were last used in an attempt to access the specified Amazon Web Services service. This data type is a response element in the [GetServiceLastAccessedDetailsWithEntities] operation.
    public struct EntityDetails: Swift.Equatable {
        /// The EntityInfo object that contains details about the entity (user or role).
        /// This member is required.
        public var entityInfo: IamClientTypes.EntityInfo?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the authenticated entity last attempted to access Amazon Web Services. Amazon Web Services does not report unauthenticated requests. This field is null if no IAM entities attempted to access the service within the [reporting period](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period).
        public var lastAuthenticated: ClientRuntime.Date?

        public init (
            entityInfo: IamClientTypes.EntityInfo? = nil,
            lastAuthenticated: ClientRuntime.Date? = nil
        )
        {
            self.entityInfo = entityInfo
            self.lastAuthenticated = lastAuthenticated
        }
    }

}

extension IamClientTypes.EntityInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
        case path = "Path"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(IamClientTypes.PolicyOwnerEntityType.self, forKey: .type)
        type = typeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
    }
}

extension IamClientTypes.EntityInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EntityInfo(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), path: \(Swift.String(describing: path)), type: \(Swift.String(describing: type)))"}
}

extension IamClientTypes {
    /// Contains details about the specified entity (user or role). This data type is an element of the [EntityDetails] object.
    public struct EntityInfo: Swift.Equatable {
        /// The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources. For more information about ARNs, go to [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        /// This member is required.
        public var arn: Swift.String?
        /// The identifier of the entity (user or role).
        /// This member is required.
        public var id: Swift.String?
        /// The name of the entity (user or role).
        /// This member is required.
        public var name: Swift.String?
        /// The path to the entity (user or role). For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        public var path: Swift.String?
        /// The type of entity (user or role).
        /// This member is required.
        public var type: IamClientTypes.PolicyOwnerEntityType?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            path: Swift.String? = nil,
            type: IamClientTypes.PolicyOwnerEntityType? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
            self.path = path
            self.type = type
        }
    }

}

extension EntityTemporarilyUnmodifiableException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EntityTemporarilyUnmodifiableException(message: \(Swift.String(describing: message)))"}
}

extension EntityTemporarilyUnmodifiableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<EntityTemporarilyUnmodifiableExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.
public struct EntityTemporarilyUnmodifiableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct EntityTemporarilyUnmodifiableExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension EntityTemporarilyUnmodifiableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes {
    public enum EntityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsmanagedpolicy
        case group
        case localmanagedpolicy
        case role
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityType] {
            return [
                .awsmanagedpolicy,
                .group,
                .localmanagedpolicy,
                .role,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsmanagedpolicy: return "AWSManagedPolicy"
            case .group: return "Group"
            case .localmanagedpolicy: return "LocalManagedPolicy"
            case .role: return "Role"
            case .user: return "User"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EntityType(rawValue: rawValue) ?? EntityType.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes.ErrorDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let code = code {
            try container.encode(code, forKey: ClientRuntime.Key("Code"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension IamClientTypes.ErrorDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ErrorDetails(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension IamClientTypes {
    /// Contains information about the reason that the operation failed. This data type is used as a response element in the [GetOrganizationsAccessReport], [GetServiceLastAccessedDetails], and [GetServiceLastAccessedDetailsWithEntities] operations.
    public struct ErrorDetails: Swift.Equatable {
        /// The error code associated with the operation failure.
        /// This member is required.
        public var code: Swift.String?
        /// Detailed information about the reason that the operation failed.
        /// This member is required.
        public var message: Swift.String?

        public init (
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension IamClientTypes.EvaluationResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evalActionName = "EvalActionName"
        case evalDecision = "EvalDecision"
        case evalDecisionDetails = "EvalDecisionDetails"
        case evalResourceName = "EvalResourceName"
        case matchedStatements = "MatchedStatements"
        case missingContextValues = "MissingContextValues"
        case organizationsDecisionDetail = "OrganizationsDecisionDetail"
        case permissionsBoundaryDecisionDetail = "PermissionsBoundaryDecisionDetail"
        case resourceSpecificResults = "ResourceSpecificResults"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let evalActionName = evalActionName {
            try container.encode(evalActionName, forKey: ClientRuntime.Key("EvalActionName"))
        }
        if let evalDecision = evalDecision {
            try container.encode(evalDecision, forKey: ClientRuntime.Key("EvalDecision"))
        }
        if let evalDecisionDetails = evalDecisionDetails {
            var evalDecisionDetailsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EvalDecisionDetails"))
            for (index0, element0) in evalDecisionDetails.sorted(by: { $0.key < $1.key }).enumerated() {
                let evaldecisionsourcetypeKey0 = element0.key
                let policyevaluationdecisiontypeValue0 = element0.value
                var entryContainer0 = evalDecisionDetailsContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(evaldecisionsourcetypeKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(policyevaluationdecisiontypeValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let evalResourceName = evalResourceName {
            try container.encode(evalResourceName, forKey: ClientRuntime.Key("EvalResourceName"))
        }
        if let matchedStatements = matchedStatements {
            var matchedStatementsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MatchedStatements"))
            for (index0, statement0) in matchedStatements.enumerated() {
                try matchedStatementsContainer.encode(statement0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let missingContextValues = missingContextValues {
            var missingContextValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MissingContextValues"))
            for (index0, contextkeynametype0) in missingContextValues.enumerated() {
                try missingContextValuesContainer.encode(contextkeynametype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let organizationsDecisionDetail = organizationsDecisionDetail {
            try container.encode(organizationsDecisionDetail, forKey: ClientRuntime.Key("OrganizationsDecisionDetail"))
        }
        if let permissionsBoundaryDecisionDetail = permissionsBoundaryDecisionDetail {
            try container.encode(permissionsBoundaryDecisionDetail, forKey: ClientRuntime.Key("PermissionsBoundaryDecisionDetail"))
        }
        if let resourceSpecificResults = resourceSpecificResults {
            var resourceSpecificResultsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceSpecificResults"))
            for (index0, resourcespecificresult0) in resourceSpecificResults.enumerated() {
                try resourceSpecificResultsContainer.encode(resourcespecificresult0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evalActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evalActionName)
        evalActionName = evalActionNameDecoded
        let evalResourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evalResourceName)
        evalResourceName = evalResourceNameDecoded
        let evalDecisionDecoded = try containerValues.decodeIfPresent(IamClientTypes.PolicyEvaluationDecisionType.self, forKey: .evalDecision)
        evalDecision = evalDecisionDecoded
        if containerValues.contains(.matchedStatements) {
            struct KeyVal0{struct member{}}
            let matchedStatementsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .matchedStatements)
            if let matchedStatementsWrappedContainer = matchedStatementsWrappedContainer {
                let matchedStatementsContainer = try matchedStatementsWrappedContainer.decodeIfPresent([IamClientTypes.Statement].self, forKey: .member)
                var matchedStatementsBuffer:[IamClientTypes.Statement]? = nil
                if let matchedStatementsContainer = matchedStatementsContainer {
                    matchedStatementsBuffer = [IamClientTypes.Statement]()
                    for structureContainer0 in matchedStatementsContainer {
                        matchedStatementsBuffer?.append(structureContainer0)
                    }
                }
                matchedStatements = matchedStatementsBuffer
            } else {
                matchedStatements = []
            }
        } else {
            matchedStatements = nil
        }
        if containerValues.contains(.missingContextValues) {
            struct KeyVal0{struct member{}}
            let missingContextValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .missingContextValues)
            if let missingContextValuesWrappedContainer = missingContextValuesWrappedContainer {
                let missingContextValuesContainer = try missingContextValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var missingContextValuesBuffer:[Swift.String]? = nil
                if let missingContextValuesContainer = missingContextValuesContainer {
                    missingContextValuesBuffer = [Swift.String]()
                    for stringContainer0 in missingContextValuesContainer {
                        missingContextValuesBuffer?.append(stringContainer0)
                    }
                }
                missingContextValues = missingContextValuesBuffer
            } else {
                missingContextValues = []
            }
        } else {
            missingContextValues = nil
        }
        let organizationsDecisionDetailDecoded = try containerValues.decodeIfPresent(IamClientTypes.OrganizationsDecisionDetail.self, forKey: .organizationsDecisionDetail)
        organizationsDecisionDetail = organizationsDecisionDetailDecoded
        let permissionsBoundaryDecisionDetailDecoded = try containerValues.decodeIfPresent(IamClientTypes.PermissionsBoundaryDecisionDetail.self, forKey: .permissionsBoundaryDecisionDetail)
        permissionsBoundaryDecisionDetail = permissionsBoundaryDecisionDetailDecoded
        if containerValues.contains(.evalDecisionDetails) {
            struct KeyVal0{struct key{}; struct value{}}
            let evalDecisionDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, IamClientTypes.PolicyEvaluationDecisionType, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .evalDecisionDetails)
            if let evalDecisionDetailsWrappedContainer = evalDecisionDetailsWrappedContainer {
                let evalDecisionDetailsContainer = try evalDecisionDetailsWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, IamClientTypes.PolicyEvaluationDecisionType, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var evalDecisionDetailsBuffer: [Swift.String:IamClientTypes.PolicyEvaluationDecisionType]? = nil
                if let evalDecisionDetailsContainer = evalDecisionDetailsContainer {
                    evalDecisionDetailsBuffer = [Swift.String:IamClientTypes.PolicyEvaluationDecisionType]()
                    for stringContainer0 in evalDecisionDetailsContainer {
                        evalDecisionDetailsBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                evalDecisionDetails = evalDecisionDetailsBuffer
            } else {
                evalDecisionDetails = [:]
            }
        } else {
            evalDecisionDetails = nil
        }
        if containerValues.contains(.resourceSpecificResults) {
            struct KeyVal0{struct member{}}
            let resourceSpecificResultsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceSpecificResults)
            if let resourceSpecificResultsWrappedContainer = resourceSpecificResultsWrappedContainer {
                let resourceSpecificResultsContainer = try resourceSpecificResultsWrappedContainer.decodeIfPresent([IamClientTypes.ResourceSpecificResult].self, forKey: .member)
                var resourceSpecificResultsBuffer:[IamClientTypes.ResourceSpecificResult]? = nil
                if let resourceSpecificResultsContainer = resourceSpecificResultsContainer {
                    resourceSpecificResultsBuffer = [IamClientTypes.ResourceSpecificResult]()
                    for structureContainer0 in resourceSpecificResultsContainer {
                        resourceSpecificResultsBuffer?.append(structureContainer0)
                    }
                }
                resourceSpecificResults = resourceSpecificResultsBuffer
            } else {
                resourceSpecificResults = []
            }
        } else {
            resourceSpecificResults = nil
        }
    }
}

extension IamClientTypes.EvaluationResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EvaluationResult(evalActionName: \(Swift.String(describing: evalActionName)), evalDecision: \(Swift.String(describing: evalDecision)), evalDecisionDetails: \(Swift.String(describing: evalDecisionDetails)), evalResourceName: \(Swift.String(describing: evalResourceName)), matchedStatements: \(Swift.String(describing: matchedStatements)), missingContextValues: \(Swift.String(describing: missingContextValues)), organizationsDecisionDetail: \(Swift.String(describing: organizationsDecisionDetail)), permissionsBoundaryDecisionDetail: \(Swift.String(describing: permissionsBoundaryDecisionDetail)), resourceSpecificResults: \(Swift.String(describing: resourceSpecificResults)))"}
}

extension IamClientTypes {
    /// Contains the results of a simulation. This data type is used by the return parameter of [SimulateCustomPolicy] and [SimulatePrincipalPolicy].
    public struct EvaluationResult: Swift.Equatable {
        /// The name of the API operation tested on the indicated resource.
        /// This member is required.
        public var evalActionName: Swift.String?
        /// The result of the simulation.
        /// This member is required.
        public var evalDecision: IamClientTypes.PolicyEvaluationDecisionType?
        /// Additional details about the results of the cross-account evaluation decision. This parameter is populated for only cross-account simulations. It contains a brief summary of how each policy type contributes to the final evaluation decision. If the simulation evaluates policies within the same account and includes a resource ARN, then the parameter is present but the response is empty. If the simulation evaluates policies within the same account and specifies all resources (*), then the parameter is not returned. When you make a cross-account request, Amazon Web Services evaluates the request in the trusting account and the trusted account. The request is allowed only if both evaluations return true. For more information about how policies are evaluated, see [Evaluating policies within a single account](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics). If an Organizations SCP included in the evaluation denies access, the simulation ends. In this case, policy evaluation does not proceed any further and this parameter is not returned.
        public var evalDecisionDetails: [Swift.String:IamClientTypes.PolicyEvaluationDecisionType]?
        /// The ARN of the resource that the indicated API operation was tested on.
        public var evalResourceName: Swift.String?
        /// A list of the statements in the input policies that determine the result for this scenario. Remember that even if multiple statements allow the operation on the resource, if only one statement denies that operation, then the explicit deny overrides any allow. In addition, the deny statement is the only entry included in the result.
        public var matchedStatements: [IamClientTypes.Statement]?
        /// A list of context keys that are required by the included input policies but that were not provided by one of the input parameters. This list is used when the resource in a simulation is "*", either explicitly, or when the ResourceArns parameter blank. If you include a list of resources, then any missing context values are instead included under the ResourceSpecificResults section. To discover the context keys used by a set of policies, you can call [GetContextKeysForCustomPolicy] or [GetContextKeysForPrincipalPolicy].
        public var missingContextValues: [Swift.String]?
        /// A structure that details how Organizations and its service control policies affect the results of the simulation. Only applies if the simulated user's account is part of an organization.
        public var organizationsDecisionDetail: IamClientTypes.OrganizationsDecisionDetail?
        /// Contains information about the effect that a permissions boundary has on a policy simulation when the boundary is applied to an IAM entity.
        public var permissionsBoundaryDecisionDetail: IamClientTypes.PermissionsBoundaryDecisionDetail?
        /// The individual results of the simulation of the API operation specified in EvalActionName on each resource.
        public var resourceSpecificResults: [IamClientTypes.ResourceSpecificResult]?

        public init (
            evalActionName: Swift.String? = nil,
            evalDecision: IamClientTypes.PolicyEvaluationDecisionType? = nil,
            evalDecisionDetails: [Swift.String:IamClientTypes.PolicyEvaluationDecisionType]? = nil,
            evalResourceName: Swift.String? = nil,
            matchedStatements: [IamClientTypes.Statement]? = nil,
            missingContextValues: [Swift.String]? = nil,
            organizationsDecisionDetail: IamClientTypes.OrganizationsDecisionDetail? = nil,
            permissionsBoundaryDecisionDetail: IamClientTypes.PermissionsBoundaryDecisionDetail? = nil,
            resourceSpecificResults: [IamClientTypes.ResourceSpecificResult]? = nil
        )
        {
            self.evalActionName = evalActionName
            self.evalDecision = evalDecision
            self.evalDecisionDetails = evalDecisionDetails
            self.evalResourceName = evalResourceName
            self.matchedStatements = matchedStatements
            self.missingContextValues = missingContextValues
            self.organizationsDecisionDetail = organizationsDecisionDetail
            self.permissionsBoundaryDecisionDetail = permissionsBoundaryDecisionDetail
            self.resourceSpecificResults = resourceSpecificResults
        }
    }

}

extension GenerateCredentialReportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateCredentialReportInput()"}
}

extension GenerateCredentialReportInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GenerateCredentialReport", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GenerateCredentialReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GenerateCredentialReportInput: Swift.Equatable {

    public init() {}
}

extension GenerateCredentialReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GenerateCredentialReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GenerateCredentialReportOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GenerateCredentialReportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateCredentialReportOutputResponse(description: \(Swift.String(describing: description)), state: \(Swift.String(describing: state)))"}
}

extension GenerateCredentialReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GenerateCredentialReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.description = output.description
            self.state = output.state
        } else {
            self.description = nil
            self.state = nil
        }
    }
}

/// Contains the response to a successful [GenerateCredentialReport] request.
public struct GenerateCredentialReportOutputResponse: Swift.Equatable {
    /// Information about the credential report.
    public var description: Swift.String?
    /// Information about the state of the credential report.
    public var state: IamClientTypes.ReportStateType?

    public init (
        description: Swift.String? = nil,
        state: IamClientTypes.ReportStateType? = nil
    )
    {
        self.description = description
        self.state = state
    }
}

struct GenerateCredentialReportOutputResponseBody: Swift.Equatable {
    public let state: IamClientTypes.ReportStateType?
    public let description: Swift.String?
}

extension GenerateCredentialReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case state = "State"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GenerateCredentialReportResult"))
        let stateDecoded = try containerValues.decodeIfPresent(IamClientTypes.ReportStateType.self, forKey: .state)
        state = stateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension GenerateOrganizationsAccessReportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateOrganizationsAccessReportInput(entityPath: \(Swift.String(describing: entityPath)), organizationsPolicyId: \(Swift.String(describing: organizationsPolicyId)))"}
}

extension GenerateOrganizationsAccessReportInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let entityPath = entityPath {
            try container.encode(entityPath, forKey: ClientRuntime.Key("EntityPath"))
        }
        if let organizationsPolicyId = organizationsPolicyId {
            try container.encode(organizationsPolicyId, forKey: ClientRuntime.Key("OrganizationsPolicyId"))
        }
        try container.encode("GenerateOrganizationsAccessReport", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GenerateOrganizationsAccessReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GenerateOrganizationsAccessReportInput: Swift.Equatable {
    /// The path of the Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is 123456789012 and its parent OU ID is ou-rge0-awsabcde. The organization root ID is r-f6g7h8i9j0example and your organization ID is o-a1b2c3d4e5. Your entity path is o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012.
    /// This member is required.
    public var entityPath: Swift.String?
    /// The identifier of the Organizations service control policy (SCP). This parameter is optional. This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an Amazon Web Services service.
    public var organizationsPolicyId: Swift.String?

    public init (
        entityPath: Swift.String? = nil,
        organizationsPolicyId: Swift.String? = nil
    )
    {
        self.entityPath = entityPath
        self.organizationsPolicyId = organizationsPolicyId
    }
}

extension GenerateOrganizationsAccessReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GenerateOrganizationsAccessReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ReportGenerationLimitExceeded" : self = .reportGenerationLimitExceededException(try ReportGenerationLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GenerateOrganizationsAccessReportOutputError: Swift.Error, Swift.Equatable {
    case reportGenerationLimitExceededException(ReportGenerationLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GenerateOrganizationsAccessReportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateOrganizationsAccessReportOutputResponse(jobId: \(Swift.String(describing: jobId)))"}
}

extension GenerateOrganizationsAccessReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GenerateOrganizationsAccessReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct GenerateOrganizationsAccessReportOutputResponse: Swift.Equatable {
    /// The job identifier that you can use in the [GetOrganizationsAccessReport] operation.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct GenerateOrganizationsAccessReportOutputResponseBody: Swift.Equatable {
    public let jobId: Swift.String?
}

extension GenerateOrganizationsAccessReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GenerateOrganizationsAccessReportResult"))
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension GenerateServiceLastAccessedDetailsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateServiceLastAccessedDetailsInput(arn: \(Swift.String(describing: arn)), granularity: \(Swift.String(describing: granularity)))"}
}

extension GenerateServiceLastAccessedDetailsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let granularity = granularity {
            try container.encode(granularity, forKey: ClientRuntime.Key("Granularity"))
        }
        try container.encode("GenerateServiceLastAccessedDetails", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GenerateServiceLastAccessedDetailsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GenerateServiceLastAccessedDetailsInput: Swift.Equatable {
    /// The ARN of the IAM resource (user, group, role, or managed policy) used to generate information about when the resource was last used in an attempt to access an Amazon Web Services service.
    /// This member is required.
    public var arn: Swift.String?
    /// The level of detail that you want to generate. You can specify whether you want to generate information about the last attempt to access services or actions. If you specify service-level granularity, this operation generates only service data. If you specify action-level granularity, it generates service and action data. If you don't include this optional parameter, the operation generates service data.
    public var granularity: IamClientTypes.AccessAdvisorUsageGranularityType?

    public init (
        arn: Swift.String? = nil,
        granularity: IamClientTypes.AccessAdvisorUsageGranularityType? = nil
    )
    {
        self.arn = arn
        self.granularity = granularity
    }
}

extension GenerateServiceLastAccessedDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GenerateServiceLastAccessedDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GenerateServiceLastAccessedDetailsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GenerateServiceLastAccessedDetailsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateServiceLastAccessedDetailsOutputResponse(jobId: \(Swift.String(describing: jobId)))"}
}

extension GenerateServiceLastAccessedDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GenerateServiceLastAccessedDetailsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

public struct GenerateServiceLastAccessedDetailsOutputResponse: Swift.Equatable {
    /// The JobId that you can use in the [GetServiceLastAccessedDetails] or [GetServiceLastAccessedDetailsWithEntities] operations. The JobId returned by GenerateServiceLastAccessedDetail must be used by the same role within a session, or by the same user when used to call GetServiceLastAccessedDetail.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct GenerateServiceLastAccessedDetailsOutputResponseBody: Swift.Equatable {
    public let jobId: Swift.String?
}

extension GenerateServiceLastAccessedDetailsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GenerateServiceLastAccessedDetailsResult"))
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension GetAccessKeyLastUsedInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccessKeyLastUsedInput(accessKeyId: \(Swift.String(describing: accessKeyId)))"}
}

extension GetAccessKeyLastUsedInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accessKeyId = accessKeyId {
            try container.encode(accessKeyId, forKey: ClientRuntime.Key("AccessKeyId"))
        }
        try container.encode("GetAccessKeyLastUsed", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetAccessKeyLastUsedInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAccessKeyLastUsedInput: Swift.Equatable {
    /// The identifier of an access key. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that can consist of any upper or lowercased letter or digit.
    /// This member is required.
    public var accessKeyId: Swift.String?

    public init (
        accessKeyId: Swift.String? = nil
    )
    {
        self.accessKeyId = accessKeyId
    }
}

extension GetAccessKeyLastUsedOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetAccessKeyLastUsedOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAccessKeyLastUsedOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccessKeyLastUsedOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccessKeyLastUsedOutputResponse(accessKeyLastUsed: \(Swift.String(describing: accessKeyLastUsed)), userName: \(Swift.String(describing: userName)))"}
}

extension GetAccessKeyLastUsedOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAccessKeyLastUsedOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessKeyLastUsed = output.accessKeyLastUsed
            self.userName = output.userName
        } else {
            self.accessKeyLastUsed = nil
            self.userName = nil
        }
    }
}

/// Contains the response to a successful [GetAccessKeyLastUsed] request. It is also returned as a member of the [AccessKeyMetaData] structure returned by the [ListAccessKeys] action.
public struct GetAccessKeyLastUsedOutputResponse: Swift.Equatable {
    /// Contains information about the last time the access key was used.
    public var accessKeyLastUsed: IamClientTypes.AccessKeyLastUsed?
    /// The name of the IAM user that owns this access key.
    public var userName: Swift.String?

    public init (
        accessKeyLastUsed: IamClientTypes.AccessKeyLastUsed? = nil,
        userName: Swift.String? = nil
    )
    {
        self.accessKeyLastUsed = accessKeyLastUsed
        self.userName = userName
    }
}

struct GetAccessKeyLastUsedOutputResponseBody: Swift.Equatable {
    public let userName: Swift.String?
    public let accessKeyLastUsed: IamClientTypes.AccessKeyLastUsed?
}

extension GetAccessKeyLastUsedOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyLastUsed = "AccessKeyLastUsed"
        case userName = "UserName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetAccessKeyLastUsedResult"))
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let accessKeyLastUsedDecoded = try containerValues.decodeIfPresent(IamClientTypes.AccessKeyLastUsed.self, forKey: .accessKeyLastUsed)
        accessKeyLastUsed = accessKeyLastUsedDecoded
    }
}

extension GetAccountAuthorizationDetailsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountAuthorizationDetailsInput(filter: \(Swift.String(describing: filter)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)))"}
}

extension GetAccountAuthorizationDetailsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filter = filter {
            var filterContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filter"))
            for (index0, entitytype0) in filter.enumerated() {
                try filterContainer.encode(entitytype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        try container.encode("GetAccountAuthorizationDetails", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetAccountAuthorizationDetailsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAccountAuthorizationDetailsInput: Swift.Equatable {
    /// A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value LocalManagedPolicy to include customer managed policies. The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.
    public var filter: [IamClientTypes.EntityType]?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?

    public init (
        filter: [IamClientTypes.EntityType]? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.filter = filter
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension GetAccountAuthorizationDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetAccountAuthorizationDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAccountAuthorizationDetailsOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccountAuthorizationDetailsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountAuthorizationDetailsOutputResponse(groupDetailList: \(Swift.String(describing: groupDetailList)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), policies: \(Swift.String(describing: policies)), roleDetailList: \(Swift.String(describing: roleDetailList)), userDetailList: \(Swift.String(describing: userDetailList)))"}
}

extension GetAccountAuthorizationDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAccountAuthorizationDetailsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groupDetailList = output.groupDetailList
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.policies = output.policies
            self.roleDetailList = output.roleDetailList
            self.userDetailList = output.userDetailList
        } else {
            self.groupDetailList = nil
            self.isTruncated = false
            self.marker = nil
            self.policies = nil
            self.roleDetailList = nil
            self.userDetailList = nil
        }
    }
}

/// Contains the response to a successful [GetAccountAuthorizationDetails] request.
public struct GetAccountAuthorizationDetailsOutputResponse: Swift.Equatable {
    /// A list containing information about IAM groups.
    public var groupDetailList: [IamClientTypes.GroupDetail]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list containing information about managed policies.
    public var policies: [IamClientTypes.ManagedPolicyDetail]?
    /// A list containing information about IAM roles.
    public var roleDetailList: [IamClientTypes.RoleDetail]?
    /// A list containing information about IAM users.
    public var userDetailList: [IamClientTypes.UserDetail]?

    public init (
        groupDetailList: [IamClientTypes.GroupDetail]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        policies: [IamClientTypes.ManagedPolicyDetail]? = nil,
        roleDetailList: [IamClientTypes.RoleDetail]? = nil,
        userDetailList: [IamClientTypes.UserDetail]? = nil
    )
    {
        self.groupDetailList = groupDetailList
        self.isTruncated = isTruncated
        self.marker = marker
        self.policies = policies
        self.roleDetailList = roleDetailList
        self.userDetailList = userDetailList
    }
}

struct GetAccountAuthorizationDetailsOutputResponseBody: Swift.Equatable {
    public let userDetailList: [IamClientTypes.UserDetail]?
    public let groupDetailList: [IamClientTypes.GroupDetail]?
    public let roleDetailList: [IamClientTypes.RoleDetail]?
    public let policies: [IamClientTypes.ManagedPolicyDetail]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension GetAccountAuthorizationDetailsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupDetailList = "GroupDetailList"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case policies = "Policies"
        case roleDetailList = "RoleDetailList"
        case userDetailList = "UserDetailList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetAccountAuthorizationDetailsResult"))
        if containerValues.contains(.userDetailList) {
            struct KeyVal0{struct member{}}
            let userDetailListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userDetailList)
            if let userDetailListWrappedContainer = userDetailListWrappedContainer {
                let userDetailListContainer = try userDetailListWrappedContainer.decodeIfPresent([IamClientTypes.UserDetail].self, forKey: .member)
                var userDetailListBuffer:[IamClientTypes.UserDetail]? = nil
                if let userDetailListContainer = userDetailListContainer {
                    userDetailListBuffer = [IamClientTypes.UserDetail]()
                    for structureContainer0 in userDetailListContainer {
                        userDetailListBuffer?.append(structureContainer0)
                    }
                }
                userDetailList = userDetailListBuffer
            } else {
                userDetailList = []
            }
        } else {
            userDetailList = nil
        }
        if containerValues.contains(.groupDetailList) {
            struct KeyVal0{struct member{}}
            let groupDetailListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .groupDetailList)
            if let groupDetailListWrappedContainer = groupDetailListWrappedContainer {
                let groupDetailListContainer = try groupDetailListWrappedContainer.decodeIfPresent([IamClientTypes.GroupDetail].self, forKey: .member)
                var groupDetailListBuffer:[IamClientTypes.GroupDetail]? = nil
                if let groupDetailListContainer = groupDetailListContainer {
                    groupDetailListBuffer = [IamClientTypes.GroupDetail]()
                    for structureContainer0 in groupDetailListContainer {
                        groupDetailListBuffer?.append(structureContainer0)
                    }
                }
                groupDetailList = groupDetailListBuffer
            } else {
                groupDetailList = []
            }
        } else {
            groupDetailList = nil
        }
        if containerValues.contains(.roleDetailList) {
            struct KeyVal0{struct member{}}
            let roleDetailListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .roleDetailList)
            if let roleDetailListWrappedContainer = roleDetailListWrappedContainer {
                let roleDetailListContainer = try roleDetailListWrappedContainer.decodeIfPresent([IamClientTypes.RoleDetail].self, forKey: .member)
                var roleDetailListBuffer:[IamClientTypes.RoleDetail]? = nil
                if let roleDetailListContainer = roleDetailListContainer {
                    roleDetailListBuffer = [IamClientTypes.RoleDetail]()
                    for structureContainer0 in roleDetailListContainer {
                        roleDetailListBuffer?.append(structureContainer0)
                    }
                }
                roleDetailList = roleDetailListBuffer
            } else {
                roleDetailList = []
            }
        } else {
            roleDetailList = nil
        }
        if containerValues.contains(.policies) {
            struct KeyVal0{struct member{}}
            let policiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policies)
            if let policiesWrappedContainer = policiesWrappedContainer {
                let policiesContainer = try policiesWrappedContainer.decodeIfPresent([IamClientTypes.ManagedPolicyDetail].self, forKey: .member)
                var policiesBuffer:[IamClientTypes.ManagedPolicyDetail]? = nil
                if let policiesContainer = policiesContainer {
                    policiesBuffer = [IamClientTypes.ManagedPolicyDetail]()
                    for structureContainer0 in policiesContainer {
                        policiesBuffer?.append(structureContainer0)
                    }
                }
                policies = policiesBuffer
            } else {
                policies = []
            }
        } else {
            policies = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension GetAccountPasswordPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountPasswordPolicyInput()"}
}

extension GetAccountPasswordPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetAccountPasswordPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetAccountPasswordPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAccountPasswordPolicyInput: Swift.Equatable {

    public init() {}
}

extension GetAccountPasswordPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetAccountPasswordPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAccountPasswordPolicyOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccountPasswordPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountPasswordPolicyOutputResponse(passwordPolicy: \(Swift.String(describing: passwordPolicy)))"}
}

extension GetAccountPasswordPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAccountPasswordPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.passwordPolicy = output.passwordPolicy
        } else {
            self.passwordPolicy = nil
        }
    }
}

/// Contains the response to a successful [GetAccountPasswordPolicy] request.
public struct GetAccountPasswordPolicyOutputResponse: Swift.Equatable {
    /// A structure that contains details about the account's password policy.
    /// This member is required.
    public var passwordPolicy: IamClientTypes.PasswordPolicy?

    public init (
        passwordPolicy: IamClientTypes.PasswordPolicy? = nil
    )
    {
        self.passwordPolicy = passwordPolicy
    }
}

struct GetAccountPasswordPolicyOutputResponseBody: Swift.Equatable {
    public let passwordPolicy: IamClientTypes.PasswordPolicy?
}

extension GetAccountPasswordPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordPolicy = "PasswordPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetAccountPasswordPolicyResult"))
        let passwordPolicyDecoded = try containerValues.decodeIfPresent(IamClientTypes.PasswordPolicy.self, forKey: .passwordPolicy)
        passwordPolicy = passwordPolicyDecoded
    }
}

extension GetAccountSummaryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountSummaryInput()"}
}

extension GetAccountSummaryInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetAccountSummary", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetAccountSummaryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAccountSummaryInput: Swift.Equatable {

    public init() {}
}

extension GetAccountSummaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetAccountSummaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAccountSummaryOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccountSummaryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountSummaryOutputResponse(summaryMap: \(Swift.String(describing: summaryMap)))"}
}

extension GetAccountSummaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAccountSummaryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.summaryMap = output.summaryMap
        } else {
            self.summaryMap = nil
        }
    }
}

/// Contains the response to a successful [GetAccountSummary] request.
public struct GetAccountSummaryOutputResponse: Swift.Equatable {
    /// A set of key–value pairs containing information about IAM entity usage and IAM quotas.
    public var summaryMap: [Swift.String:Swift.Int]?

    public init (
        summaryMap: [Swift.String:Swift.Int]? = nil
    )
    {
        self.summaryMap = summaryMap
    }
}

struct GetAccountSummaryOutputResponseBody: Swift.Equatable {
    public let summaryMap: [Swift.String:Swift.Int]?
}

extension GetAccountSummaryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case summaryMap = "SummaryMap"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetAccountSummaryResult"))
        if containerValues.contains(.summaryMap) {
            struct KeyVal0{struct key{}; struct value{}}
            let summaryMapWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.Int, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .summaryMap)
            if let summaryMapWrappedContainer = summaryMapWrappedContainer {
                let summaryMapContainer = try summaryMapWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.Int, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var summaryMapBuffer: [Swift.String:Swift.Int]? = nil
                if let summaryMapContainer = summaryMapContainer {
                    summaryMapBuffer = [Swift.String:Swift.Int]()
                    for integerContainer0 in summaryMapContainer {
                        summaryMapBuffer?[integerContainer0.key] = integerContainer0.value
                    }
                }
                summaryMap = summaryMapBuffer
            } else {
                summaryMap = [:]
            }
        } else {
            summaryMap = nil
        }
    }
}

extension GetContextKeysForCustomPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContextKeysForCustomPolicyInput(policyInputList: \(Swift.String(describing: policyInputList)))"}
}

extension GetContextKeysForCustomPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyInputList = policyInputList {
            var policyInputListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyInputList"))
            for (index0, policydocumenttype0) in policyInputList.enumerated() {
                try policyInputListContainer.encode(policydocumenttype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("GetContextKeysForCustomPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetContextKeysForCustomPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetContextKeysForCustomPolicyInput: Swift.Equatable {
    /// A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var policyInputList: [Swift.String]?

    public init (
        policyInputList: [Swift.String]? = nil
    )
    {
        self.policyInputList = policyInputList
    }
}

extension GetContextKeysForCustomPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetContextKeysForCustomPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContextKeysForCustomPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContextKeysForCustomPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContextKeysForCustomPolicyOutputResponse(contextKeyNames: \(Swift.String(describing: contextKeyNames)))"}
}

extension GetContextKeysForCustomPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContextKeysForCustomPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contextKeyNames = output.contextKeyNames
        } else {
            self.contextKeyNames = nil
        }
    }
}

/// Contains the response to a successful [GetContextKeysForPrincipalPolicy] or [GetContextKeysForCustomPolicy] request.
public struct GetContextKeysForCustomPolicyOutputResponse: Swift.Equatable {
    /// The list of context keys that are referenced in the input policies.
    public var contextKeyNames: [Swift.String]?

    public init (
        contextKeyNames: [Swift.String]? = nil
    )
    {
        self.contextKeyNames = contextKeyNames
    }
}

struct GetContextKeysForCustomPolicyOutputResponseBody: Swift.Equatable {
    public let contextKeyNames: [Swift.String]?
}

extension GetContextKeysForCustomPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextKeyNames = "ContextKeyNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetContextKeysForCustomPolicyResult"))
        if containerValues.contains(.contextKeyNames) {
            struct KeyVal0{struct member{}}
            let contextKeyNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .contextKeyNames)
            if let contextKeyNamesWrappedContainer = contextKeyNamesWrappedContainer {
                let contextKeyNamesContainer = try contextKeyNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var contextKeyNamesBuffer:[Swift.String]? = nil
                if let contextKeyNamesContainer = contextKeyNamesContainer {
                    contextKeyNamesBuffer = [Swift.String]()
                    for stringContainer0 in contextKeyNamesContainer {
                        contextKeyNamesBuffer?.append(stringContainer0)
                    }
                }
                contextKeyNames = contextKeyNamesBuffer
            } else {
                contextKeyNames = []
            }
        } else {
            contextKeyNames = nil
        }
    }
}

extension GetContextKeysForPrincipalPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContextKeysForPrincipalPolicyInput(policyInputList: \(Swift.String(describing: policyInputList)), policySourceArn: \(Swift.String(describing: policySourceArn)))"}
}

extension GetContextKeysForPrincipalPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyInputList = policyInputList {
            var policyInputListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyInputList"))
            for (index0, policydocumenttype0) in policyInputList.enumerated() {
                try policyInputListContainer.encode(policydocumenttype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let policySourceArn = policySourceArn {
            try container.encode(policySourceArn, forKey: ClientRuntime.Key("PolicySourceArn"))
        }
        try container.encode("GetContextKeysForPrincipalPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetContextKeysForPrincipalPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetContextKeysForPrincipalPolicyInput: Swift.Equatable {
    /// An optional list of additional policies for which you want the list of context keys that are referenced. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    public var policyInputList: [Swift.String]?
    /// The ARN of a user, group, or role whose policies contain the context keys that you want listed. If you specify a user, the list includes context keys that are found in all policies that are attached to the user. The list also includes all groups that the user is a member of. If you pick a group or a role, then it includes only those context keys that are found in policies attached to that entity. Note that all parameters are shown in unencoded form here for clarity, but must be URL encoded to be included as a part of a real HTML request. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policySourceArn: Swift.String?

    public init (
        policyInputList: [Swift.String]? = nil,
        policySourceArn: Swift.String? = nil
    )
    {
        self.policyInputList = policyInputList
        self.policySourceArn = policySourceArn
    }
}

extension GetContextKeysForPrincipalPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetContextKeysForPrincipalPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContextKeysForPrincipalPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContextKeysForPrincipalPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContextKeysForPrincipalPolicyOutputResponse(contextKeyNames: \(Swift.String(describing: contextKeyNames)))"}
}

extension GetContextKeysForPrincipalPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContextKeysForPrincipalPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contextKeyNames = output.contextKeyNames
        } else {
            self.contextKeyNames = nil
        }
    }
}

/// Contains the response to a successful [GetContextKeysForPrincipalPolicy] or [GetContextKeysForCustomPolicy] request.
public struct GetContextKeysForPrincipalPolicyOutputResponse: Swift.Equatable {
    /// The list of context keys that are referenced in the input policies.
    public var contextKeyNames: [Swift.String]?

    public init (
        contextKeyNames: [Swift.String]? = nil
    )
    {
        self.contextKeyNames = contextKeyNames
    }
}

struct GetContextKeysForPrincipalPolicyOutputResponseBody: Swift.Equatable {
    public let contextKeyNames: [Swift.String]?
}

extension GetContextKeysForPrincipalPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextKeyNames = "ContextKeyNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetContextKeysForPrincipalPolicyResult"))
        if containerValues.contains(.contextKeyNames) {
            struct KeyVal0{struct member{}}
            let contextKeyNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .contextKeyNames)
            if let contextKeyNamesWrappedContainer = contextKeyNamesWrappedContainer {
                let contextKeyNamesContainer = try contextKeyNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var contextKeyNamesBuffer:[Swift.String]? = nil
                if let contextKeyNamesContainer = contextKeyNamesContainer {
                    contextKeyNamesBuffer = [Swift.String]()
                    for stringContainer0 in contextKeyNamesContainer {
                        contextKeyNamesBuffer?.append(stringContainer0)
                    }
                }
                contextKeyNames = contextKeyNamesBuffer
            } else {
                contextKeyNames = []
            }
        } else {
            contextKeyNames = nil
        }
    }
}

extension GetCredentialReportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCredentialReportInput()"}
}

extension GetCredentialReportInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetCredentialReport", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetCredentialReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetCredentialReportInput: Swift.Equatable {

    public init() {}
}

extension GetCredentialReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetCredentialReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ReportExpired" : self = .credentialReportExpiredException(try CredentialReportExpiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReportNotPresent" : self = .credentialReportNotPresentException(try CredentialReportNotPresentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReportInProgress" : self = .credentialReportNotReadyException(try CredentialReportNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCredentialReportOutputError: Swift.Error, Swift.Equatable {
    case credentialReportExpiredException(CredentialReportExpiredException)
    case credentialReportNotPresentException(CredentialReportNotPresentException)
    case credentialReportNotReadyException(CredentialReportNotReadyException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCredentialReportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCredentialReportOutputResponse(content: \(Swift.String(describing: content)), generatedTime: \(Swift.String(describing: generatedTime)), reportFormat: \(Swift.String(describing: reportFormat)))"}
}

extension GetCredentialReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCredentialReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.content = output.content
            self.generatedTime = output.generatedTime
            self.reportFormat = output.reportFormat
        } else {
            self.content = nil
            self.generatedTime = nil
            self.reportFormat = nil
        }
    }
}

/// Contains the response to a successful [GetCredentialReport] request.
public struct GetCredentialReportOutputResponse: Swift.Equatable {
    /// Contains the credential report. The report is Base64-encoded.
    public var content: ClientRuntime.Data?
    /// The date and time when the credential report was created, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601).
    public var generatedTime: ClientRuntime.Date?
    /// The format (MIME type) of the credential report.
    public var reportFormat: IamClientTypes.ReportFormatType?

    public init (
        content: ClientRuntime.Data? = nil,
        generatedTime: ClientRuntime.Date? = nil,
        reportFormat: IamClientTypes.ReportFormatType? = nil
    )
    {
        self.content = content
        self.generatedTime = generatedTime
        self.reportFormat = reportFormat
    }
}

struct GetCredentialReportOutputResponseBody: Swift.Equatable {
    public let content: ClientRuntime.Data?
    public let reportFormat: IamClientTypes.ReportFormatType?
    public let generatedTime: ClientRuntime.Date?
}

extension GetCredentialReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case generatedTime = "GeneratedTime"
        case reportFormat = "ReportFormat"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetCredentialReportResult"))
        if containerValues.contains(.content) {
            do {
                let contentDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .content)
                content = contentDecoded
            } catch {
                content = "".data(using: .utf8)
            }
        } else {
            content = nil
        }
        let reportFormatDecoded = try containerValues.decodeIfPresent(IamClientTypes.ReportFormatType.self, forKey: .reportFormat)
        reportFormat = reportFormatDecoded
        let generatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generatedTime)
        var generatedTimeBuffer:ClientRuntime.Date? = nil
        if let generatedTimeDecoded = generatedTimeDecoded {
            generatedTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(generatedTimeDecoded, format: .dateTime)
        }
        generatedTime = generatedTimeBuffer
    }
}

extension GetGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetGroupInput(groupName: \(Swift.String(describing: groupName)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)))"}
}

extension GetGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        try container.encode("GetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetGroupInput: Swift.Equatable {
    /// The name of the group. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var groupName: Swift.String?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?

    public init (
        groupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.groupName = groupName
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension GetGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetGroupOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetGroupOutputResponse(group: \(Swift.String(describing: group)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), users: \(Swift.String(describing: users)))"}
}

extension GetGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.group = output.group
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.users = output.users
        } else {
            self.group = nil
            self.isTruncated = false
            self.marker = nil
            self.users = nil
        }
    }
}

/// Contains the response to a successful [GetGroup] request.
public struct GetGroupOutputResponse: Swift.Equatable {
    /// A structure that contains details about the group.
    /// This member is required.
    public var group: IamClientTypes.Group?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list of users in the group.
    /// This member is required.
    public var users: [IamClientTypes.User]?

    public init (
        group: IamClientTypes.Group? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        users: [IamClientTypes.User]? = nil
    )
    {
        self.group = group
        self.isTruncated = isTruncated
        self.marker = marker
        self.users = users
    }
}

struct GetGroupOutputResponseBody: Swift.Equatable {
    public let group: IamClientTypes.Group?
    public let users: [IamClientTypes.User]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension GetGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case users = "Users"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetGroupResult"))
        let groupDecoded = try containerValues.decodeIfPresent(IamClientTypes.Group.self, forKey: .group)
        group = groupDecoded
        if containerValues.contains(.users) {
            struct KeyVal0{struct member{}}
            let usersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .users)
            if let usersWrappedContainer = usersWrappedContainer {
                let usersContainer = try usersWrappedContainer.decodeIfPresent([IamClientTypes.User].self, forKey: .member)
                var usersBuffer:[IamClientTypes.User]? = nil
                if let usersContainer = usersContainer {
                    usersBuffer = [IamClientTypes.User]()
                    for structureContainer0 in usersContainer {
                        usersBuffer?.append(structureContainer0)
                    }
                }
                users = usersBuffer
            } else {
                users = []
            }
        } else {
            users = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension GetGroupPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetGroupPolicyInput(groupName: \(Swift.String(describing: groupName)), policyName: \(Swift.String(describing: policyName)))"}
}

extension GetGroupPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("GetGroupPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetGroupPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetGroupPolicyInput: Swift.Equatable {
    /// The name of the group the policy is associated with. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var groupName: Swift.String?
    /// The name of the policy document to get. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.policyName = policyName
    }
}

extension GetGroupPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetGroupPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetGroupPolicyOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetGroupPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetGroupPolicyOutputResponse(groupName: \(Swift.String(describing: groupName)), policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)))"}
}

extension GetGroupPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetGroupPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groupName = output.groupName
            self.policyDocument = output.policyDocument
            self.policyName = output.policyName
        } else {
            self.groupName = nil
            self.policyDocument = nil
            self.policyName = nil
        }
    }
}

/// Contains the response to a successful [GetGroupPolicy] request.
public struct GetGroupPolicyOutputResponse: Swift.Equatable {
    /// The group the policy is associated with.
    /// This member is required.
    public var groupName: Swift.String?
    /// The policy document. IAM stores policies in JSON format. However, resources that were created using CloudFormation templates can be formatted in YAML. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.
    /// This member is required.
    public var policyDocument: Swift.String?
    /// The name of the policy.
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.policyDocument = policyDocument
        self.policyName = policyName
    }
}

struct GetGroupPolicyOutputResponseBody: Swift.Equatable {
    public let groupName: Swift.String?
    public let policyName: Swift.String?
    public let policyDocument: Swift.String?
}

extension GetGroupPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case policyDocument = "PolicyDocument"
        case policyName = "PolicyName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetGroupPolicyResult"))
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension GetInstanceProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceProfileInput(instanceProfileName: \(Swift.String(describing: instanceProfileName)))"}
}

extension GetInstanceProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceProfileName = instanceProfileName {
            try container.encode(instanceProfileName, forKey: ClientRuntime.Key("InstanceProfileName"))
        }
        try container.encode("GetInstanceProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetInstanceProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetInstanceProfileInput: Swift.Equatable {
    /// The name of the instance profile to get information about. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var instanceProfileName: Swift.String?

    public init (
        instanceProfileName: Swift.String? = nil
    )
    {
        self.instanceProfileName = instanceProfileName
    }
}

extension GetInstanceProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetInstanceProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInstanceProfileOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceProfileOutputResponse(instanceProfile: \(Swift.String(describing: instanceProfile)))"}
}

extension GetInstanceProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInstanceProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceProfile = output.instanceProfile
        } else {
            self.instanceProfile = nil
        }
    }
}

/// Contains the response to a successful [GetInstanceProfile] request.
public struct GetInstanceProfileOutputResponse: Swift.Equatable {
    /// A structure containing details about the instance profile.
    /// This member is required.
    public var instanceProfile: IamClientTypes.InstanceProfile?

    public init (
        instanceProfile: IamClientTypes.InstanceProfile? = nil
    )
    {
        self.instanceProfile = instanceProfile
    }
}

struct GetInstanceProfileOutputResponseBody: Swift.Equatable {
    public let instanceProfile: IamClientTypes.InstanceProfile?
}

extension GetInstanceProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceProfile = "InstanceProfile"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetInstanceProfileResult"))
        let instanceProfileDecoded = try containerValues.decodeIfPresent(IamClientTypes.InstanceProfile.self, forKey: .instanceProfile)
        instanceProfile = instanceProfileDecoded
    }
}

extension GetLoginProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoginProfileInput(userName: \(Swift.String(describing: userName)))"}
}

extension GetLoginProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("GetLoginProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetLoginProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLoginProfileInput: Swift.Equatable {
    /// The name of the user whose login profile you want to retrieve. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        userName: Swift.String? = nil
    )
    {
        self.userName = userName
    }
}

extension GetLoginProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetLoginProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLoginProfileOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoginProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoginProfileOutputResponse(loginProfile: \(Swift.String(describing: loginProfile)))"}
}

extension GetLoginProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetLoginProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loginProfile = output.loginProfile
        } else {
            self.loginProfile = nil
        }
    }
}

/// Contains the response to a successful [GetLoginProfile] request.
public struct GetLoginProfileOutputResponse: Swift.Equatable {
    /// A structure containing the user name and the profile creation date for the user.
    /// This member is required.
    public var loginProfile: IamClientTypes.LoginProfile?

    public init (
        loginProfile: IamClientTypes.LoginProfile? = nil
    )
    {
        self.loginProfile = loginProfile
    }
}

struct GetLoginProfileOutputResponseBody: Swift.Equatable {
    public let loginProfile: IamClientTypes.LoginProfile?
}

extension GetLoginProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loginProfile = "LoginProfile"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetLoginProfileResult"))
        let loginProfileDecoded = try containerValues.decodeIfPresent(IamClientTypes.LoginProfile.self, forKey: .loginProfile)
        loginProfile = loginProfileDecoded
    }
}

extension GetOpenIDConnectProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOpenIDConnectProviderInput(openIDConnectProviderArn: \(Swift.String(describing: openIDConnectProviderArn)))"}
}

extension GetOpenIDConnectProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let openIDConnectProviderArn = openIDConnectProviderArn {
            try container.encode(openIDConnectProviderArn, forKey: ClientRuntime.Key("OpenIDConnectProviderArn"))
        }
        try container.encode("GetOpenIDConnectProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetOpenIDConnectProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetOpenIDConnectProviderInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the OIDC provider resource object in IAM to get information for. You can get a list of OIDC provider resource ARNs by using the [ListOpenIDConnectProviders] operation. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var openIDConnectProviderArn: Swift.String?

    public init (
        openIDConnectProviderArn: Swift.String? = nil
    )
    {
        self.openIDConnectProviderArn = openIDConnectProviderArn
    }
}

extension GetOpenIDConnectProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetOpenIDConnectProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetOpenIDConnectProviderOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOpenIDConnectProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOpenIDConnectProviderOutputResponse(clientIDList: \(Swift.String(describing: clientIDList)), createDate: \(Swift.String(describing: createDate)), tags: \(Swift.String(describing: tags)), thumbprintList: \(Swift.String(describing: thumbprintList)), url: \(Swift.String(describing: url)))"}
}

extension GetOpenIDConnectProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetOpenIDConnectProviderOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.clientIDList = output.clientIDList
            self.createDate = output.createDate
            self.tags = output.tags
            self.thumbprintList = output.thumbprintList
            self.url = output.url
        } else {
            self.clientIDList = nil
            self.createDate = nil
            self.tags = nil
            self.thumbprintList = nil
            self.url = nil
        }
    }
}

/// Contains the response to a successful [GetOpenIDConnectProvider] request.
public struct GetOpenIDConnectProviderOutputResponse: Swift.Equatable {
    /// A list of client IDs (also known as audiences) that are associated with the specified IAM OIDC provider resource object. For more information, see [CreateOpenIDConnectProvider].
    public var clientIDList: [Swift.String]?
    /// The date and time when the IAM OIDC provider resource object was created in the Amazon Web Services account.
    public var createDate: ClientRuntime.Date?
    /// A list of tags that are attached to the specified IAM OIDC provider. The returned list of tags is sorted by tag key. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
    public var tags: [IamClientTypes.Tag]?
    /// A list of certificate thumbprints that are associated with the specified IAM OIDC provider resource object. For more information, see [CreateOpenIDConnectProvider].
    public var thumbprintList: [Swift.String]?
    /// The URL that the IAM OIDC provider resource object is associated with. For more information, see [CreateOpenIDConnectProvider].
    public var url: Swift.String?

    public init (
        clientIDList: [Swift.String]? = nil,
        createDate: ClientRuntime.Date? = nil,
        tags: [IamClientTypes.Tag]? = nil,
        thumbprintList: [Swift.String]? = nil,
        url: Swift.String? = nil
    )
    {
        self.clientIDList = clientIDList
        self.createDate = createDate
        self.tags = tags
        self.thumbprintList = thumbprintList
        self.url = url
    }
}

struct GetOpenIDConnectProviderOutputResponseBody: Swift.Equatable {
    public let url: Swift.String?
    public let clientIDList: [Swift.String]?
    public let thumbprintList: [Swift.String]?
    public let createDate: ClientRuntime.Date?
    public let tags: [IamClientTypes.Tag]?
}

extension GetOpenIDConnectProviderOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientIDList = "ClientIDList"
        case createDate = "CreateDate"
        case tags = "Tags"
        case thumbprintList = "ThumbprintList"
        case url = "Url"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetOpenIDConnectProviderResult"))
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        if containerValues.contains(.clientIDList) {
            struct KeyVal0{struct member{}}
            let clientIDListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .clientIDList)
            if let clientIDListWrappedContainer = clientIDListWrappedContainer {
                let clientIDListContainer = try clientIDListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var clientIDListBuffer:[Swift.String]? = nil
                if let clientIDListContainer = clientIDListContainer {
                    clientIDListBuffer = [Swift.String]()
                    for stringContainer0 in clientIDListContainer {
                        clientIDListBuffer?.append(stringContainer0)
                    }
                }
                clientIDList = clientIDListBuffer
            } else {
                clientIDList = []
            }
        } else {
            clientIDList = nil
        }
        if containerValues.contains(.thumbprintList) {
            struct KeyVal0{struct member{}}
            let thumbprintListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .thumbprintList)
            if let thumbprintListWrappedContainer = thumbprintListWrappedContainer {
                let thumbprintListContainer = try thumbprintListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var thumbprintListBuffer:[Swift.String]? = nil
                if let thumbprintListContainer = thumbprintListContainer {
                    thumbprintListBuffer = [Swift.String]()
                    for stringContainer0 in thumbprintListContainer {
                        thumbprintListBuffer?.append(stringContainer0)
                    }
                }
                thumbprintList = thumbprintListBuffer
            } else {
                thumbprintList = []
            }
        } else {
            thumbprintList = nil
        }
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension GetOrganizationsAccessReportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOrganizationsAccessReportInput(jobId: \(Swift.String(describing: jobId)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), sortKey: \(Swift.String(describing: sortKey)))"}
}

extension GetOrganizationsAccessReportInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let jobId = jobId {
            try container.encode(jobId, forKey: ClientRuntime.Key("JobId"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let sortKey = sortKey {
            try container.encode(sortKey, forKey: ClientRuntime.Key("SortKey"))
        }
        try container.encode("GetOrganizationsAccessReport", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetOrganizationsAccessReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetOrganizationsAccessReportInput: Swift.Equatable {
    /// The identifier of the request generated by the [GenerateOrganizationsAccessReport] operation.
    /// This member is required.
    public var jobId: Swift.String?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
    public var sortKey: IamClientTypes.SortKeyType?

    public init (
        jobId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        sortKey: IamClientTypes.SortKeyType? = nil
    )
    {
        self.jobId = jobId
        self.marker = marker
        self.maxItems = maxItems
        self.sortKey = sortKey
    }
}

extension GetOrganizationsAccessReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetOrganizationsAccessReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetOrganizationsAccessReportOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOrganizationsAccessReportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOrganizationsAccessReportOutputResponse(accessDetails: \(Swift.String(describing: accessDetails)), errorDetails: \(Swift.String(describing: errorDetails)), isTruncated: \(Swift.String(describing: isTruncated)), jobCompletionDate: \(Swift.String(describing: jobCompletionDate)), jobCreationDate: \(Swift.String(describing: jobCreationDate)), jobStatus: \(Swift.String(describing: jobStatus)), marker: \(Swift.String(describing: marker)), numberOfServicesAccessible: \(Swift.String(describing: numberOfServicesAccessible)), numberOfServicesNotAccessed: \(Swift.String(describing: numberOfServicesNotAccessed)))"}
}

extension GetOrganizationsAccessReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetOrganizationsAccessReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessDetails = output.accessDetails
            self.errorDetails = output.errorDetails
            self.isTruncated = output.isTruncated
            self.jobCompletionDate = output.jobCompletionDate
            self.jobCreationDate = output.jobCreationDate
            self.jobStatus = output.jobStatus
            self.marker = output.marker
            self.numberOfServicesAccessible = output.numberOfServicesAccessible
            self.numberOfServicesNotAccessed = output.numberOfServicesNotAccessed
        } else {
            self.accessDetails = nil
            self.errorDetails = nil
            self.isTruncated = false
            self.jobCompletionDate = nil
            self.jobCreationDate = nil
            self.jobStatus = nil
            self.marker = nil
            self.numberOfServicesAccessible = nil
            self.numberOfServicesNotAccessed = nil
        }
    }
}

public struct GetOrganizationsAccessReportOutputResponse: Swift.Equatable {
    /// An object that contains details about the most recent attempt to access the service.
    public var accessDetails: [IamClientTypes.AccessDetail]?
    /// Contains information about the reason that the operation failed. This data type is used as a response element in the [GetOrganizationsAccessReport], [GetServiceLastAccessedDetails], and [GetServiceLastAccessedDetailsWithEntities] operations.
    public var errorDetails: IamClientTypes.ErrorDetails?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the generated report job was completed or failed. This field is null if the job is still in progress, as indicated by a job status value of IN_PROGRESS.
    public var jobCompletionDate: ClientRuntime.Date?
    /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the report job was created.
    /// This member is required.
    public var jobCreationDate: ClientRuntime.Date?
    /// The status of the job.
    /// This member is required.
    public var jobStatus: IamClientTypes.JobStatusType?
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// The number of services that the applicable SCPs allow account principals to access.
    public var numberOfServicesAccessible: Swift.Int?
    /// The number of services that account principals are allowed but did not attempt to access.
    public var numberOfServicesNotAccessed: Swift.Int?

    public init (
        accessDetails: [IamClientTypes.AccessDetail]? = nil,
        errorDetails: IamClientTypes.ErrorDetails? = nil,
        isTruncated: Swift.Bool = false,
        jobCompletionDate: ClientRuntime.Date? = nil,
        jobCreationDate: ClientRuntime.Date? = nil,
        jobStatus: IamClientTypes.JobStatusType? = nil,
        marker: Swift.String? = nil,
        numberOfServicesAccessible: Swift.Int? = nil,
        numberOfServicesNotAccessed: Swift.Int? = nil
    )
    {
        self.accessDetails = accessDetails
        self.errorDetails = errorDetails
        self.isTruncated = isTruncated
        self.jobCompletionDate = jobCompletionDate
        self.jobCreationDate = jobCreationDate
        self.jobStatus = jobStatus
        self.marker = marker
        self.numberOfServicesAccessible = numberOfServicesAccessible
        self.numberOfServicesNotAccessed = numberOfServicesNotAccessed
    }
}

struct GetOrganizationsAccessReportOutputResponseBody: Swift.Equatable {
    public let jobStatus: IamClientTypes.JobStatusType?
    public let jobCreationDate: ClientRuntime.Date?
    public let jobCompletionDate: ClientRuntime.Date?
    public let numberOfServicesAccessible: Swift.Int?
    public let numberOfServicesNotAccessed: Swift.Int?
    public let accessDetails: [IamClientTypes.AccessDetail]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
    public let errorDetails: IamClientTypes.ErrorDetails?
}

extension GetOrganizationsAccessReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessDetails = "AccessDetails"
        case errorDetails = "ErrorDetails"
        case isTruncated = "IsTruncated"
        case jobCompletionDate = "JobCompletionDate"
        case jobCreationDate = "JobCreationDate"
        case jobStatus = "JobStatus"
        case marker = "Marker"
        case numberOfServicesAccessible = "NumberOfServicesAccessible"
        case numberOfServicesNotAccessed = "NumberOfServicesNotAccessed"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetOrganizationsAccessReportResult"))
        let jobStatusDecoded = try containerValues.decodeIfPresent(IamClientTypes.JobStatusType.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let jobCreationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobCreationDate)
        var jobCreationDateBuffer:ClientRuntime.Date? = nil
        if let jobCreationDateDecoded = jobCreationDateDecoded {
            jobCreationDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(jobCreationDateDecoded, format: .dateTime)
        }
        jobCreationDate = jobCreationDateBuffer
        let jobCompletionDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobCompletionDate)
        var jobCompletionDateBuffer:ClientRuntime.Date? = nil
        if let jobCompletionDateDecoded = jobCompletionDateDecoded {
            jobCompletionDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(jobCompletionDateDecoded, format: .dateTime)
        }
        jobCompletionDate = jobCompletionDateBuffer
        let numberOfServicesAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfServicesAccessible)
        numberOfServicesAccessible = numberOfServicesAccessibleDecoded
        let numberOfServicesNotAccessedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfServicesNotAccessed)
        numberOfServicesNotAccessed = numberOfServicesNotAccessedDecoded
        if containerValues.contains(.accessDetails) {
            struct KeyVal0{struct member{}}
            let accessDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accessDetails)
            if let accessDetailsWrappedContainer = accessDetailsWrappedContainer {
                let accessDetailsContainer = try accessDetailsWrappedContainer.decodeIfPresent([IamClientTypes.AccessDetail].self, forKey: .member)
                var accessDetailsBuffer:[IamClientTypes.AccessDetail]? = nil
                if let accessDetailsContainer = accessDetailsContainer {
                    accessDetailsBuffer = [IamClientTypes.AccessDetail]()
                    for structureContainer0 in accessDetailsContainer {
                        accessDetailsBuffer?.append(structureContainer0)
                    }
                }
                accessDetails = accessDetailsBuffer
            } else {
                accessDetails = []
            }
        } else {
            accessDetails = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(IamClientTypes.ErrorDetails.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}

extension GetPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPolicyInput(policyArn: \(Swift.String(describing: policyArn)))"}
}

extension GetPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        try container.encode("GetPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the managed policy that you want information about. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?

    public init (
        policyArn: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
    }
}

extension GetPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPolicyOutputResponse(policy: \(Swift.String(describing: policy)))"}
}

extension GetPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

/// Contains the response to a successful [GetPolicy] request.
public struct GetPolicyOutputResponse: Swift.Equatable {
    /// A structure containing details about the policy.
    public var policy: IamClientTypes.Policy?

    public init (
        policy: IamClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

struct GetPolicyOutputResponseBody: Swift.Equatable {
    public let policy: IamClientTypes.Policy?
}

extension GetPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetPolicyResult"))
        let policyDecoded = try containerValues.decodeIfPresent(IamClientTypes.Policy.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension GetPolicyVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPolicyVersionInput(policyArn: \(Swift.String(describing: policyArn)), versionId: \(Swift.String(describing: versionId)))"}
}

extension GetPolicyVersionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("GetPolicyVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetPolicyVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPolicyVersionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the managed policy that you want information about. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?
    /// Identifies the policy version to retrieve. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.
    /// This member is required.
    public var versionId: Swift.String?

    public init (
        policyArn: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
        self.versionId = versionId
    }
}

extension GetPolicyVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetPolicyVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPolicyVersionOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPolicyVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPolicyVersionOutputResponse(policyVersion: \(Swift.String(describing: policyVersion)))"}
}

extension GetPolicyVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPolicyVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policyVersion = output.policyVersion
        } else {
            self.policyVersion = nil
        }
    }
}

/// Contains the response to a successful [GetPolicyVersion] request.
public struct GetPolicyVersionOutputResponse: Swift.Equatable {
    /// A structure containing details about the policy version.
    public var policyVersion: IamClientTypes.PolicyVersion?

    public init (
        policyVersion: IamClientTypes.PolicyVersion? = nil
    )
    {
        self.policyVersion = policyVersion
    }
}

struct GetPolicyVersionOutputResponseBody: Swift.Equatable {
    public let policyVersion: IamClientTypes.PolicyVersion?
}

extension GetPolicyVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyVersion = "PolicyVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetPolicyVersionResult"))
        let policyVersionDecoded = try containerValues.decodeIfPresent(IamClientTypes.PolicyVersion.self, forKey: .policyVersion)
        policyVersion = policyVersionDecoded
    }
}

extension GetRoleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRoleInput(roleName: \(Swift.String(describing: roleName)))"}
}

extension GetRoleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("GetRole", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRoleInput: Swift.Equatable {
    /// The name of the IAM role to get information about. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        roleName: Swift.String? = nil
    )
    {
        self.roleName = roleName
    }
}

extension GetRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRoleOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRoleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRoleOutputResponse(role: \(Swift.String(describing: role)))"}
}

extension GetRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRoleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.role = output.role
        } else {
            self.role = nil
        }
    }
}

/// Contains the response to a successful [GetRole] request.
public struct GetRoleOutputResponse: Swift.Equatable {
    /// A structure containing details about the IAM role.
    /// This member is required.
    public var role: IamClientTypes.Role?

    public init (
        role: IamClientTypes.Role? = nil
    )
    {
        self.role = role
    }
}

struct GetRoleOutputResponseBody: Swift.Equatable {
    public let role: IamClientTypes.Role?
}

extension GetRoleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case role = "Role"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetRoleResult"))
        let roleDecoded = try containerValues.decodeIfPresent(IamClientTypes.Role.self, forKey: .role)
        role = roleDecoded
    }
}

extension GetRolePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRolePolicyInput(policyName: \(Swift.String(describing: policyName)), roleName: \(Swift.String(describing: roleName)))"}
}

extension GetRolePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("GetRolePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetRolePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRolePolicyInput: Swift.Equatable {
    /// The name of the policy document to get. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyName: Swift.String?
    /// The name of the role associated with the policy. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.roleName = roleName
    }
}

extension GetRolePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetRolePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRolePolicyOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRolePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRolePolicyOutputResponse(policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)), roleName: \(Swift.String(describing: roleName)))"}
}

extension GetRolePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRolePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policyDocument = output.policyDocument
            self.policyName = output.policyName
            self.roleName = output.roleName
        } else {
            self.policyDocument = nil
            self.policyName = nil
            self.roleName = nil
        }
    }
}

/// Contains the response to a successful [GetRolePolicy] request.
public struct GetRolePolicyOutputResponse: Swift.Equatable {
    /// The policy document. IAM stores policies in JSON format. However, resources that were created using CloudFormation templates can be formatted in YAML. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.
    /// This member is required.
    public var policyDocument: Swift.String?
    /// The name of the policy.
    /// This member is required.
    public var policyName: Swift.String?
    /// The role the policy is associated with.
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.roleName = roleName
    }
}

struct GetRolePolicyOutputResponseBody: Swift.Equatable {
    public let roleName: Swift.String?
    public let policyName: Swift.String?
    public let policyDocument: Swift.String?
}

extension GetRolePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument = "PolicyDocument"
        case policyName = "PolicyName"
        case roleName = "RoleName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetRolePolicyResult"))
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension GetSAMLProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSAMLProviderInput(sAMLProviderArn: \(Swift.String(describing: sAMLProviderArn)))"}
}

extension GetSAMLProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sAMLProviderArn = sAMLProviderArn {
            try container.encode(sAMLProviderArn, forKey: ClientRuntime.Key("SAMLProviderArn"))
        }
        try container.encode("GetSAMLProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetSAMLProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSAMLProviderInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the SAML provider resource object in IAM to get information about. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var sAMLProviderArn: Swift.String?

    public init (
        sAMLProviderArn: Swift.String? = nil
    )
    {
        self.sAMLProviderArn = sAMLProviderArn
    }
}

extension GetSAMLProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetSAMLProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSAMLProviderOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSAMLProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSAMLProviderOutputResponse(createDate: \(Swift.String(describing: createDate)), sAMLMetadataDocument: \(Swift.String(describing: sAMLMetadataDocument)), tags: \(Swift.String(describing: tags)), validUntil: \(Swift.String(describing: validUntil)))"}
}

extension GetSAMLProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSAMLProviderOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createDate = output.createDate
            self.sAMLMetadataDocument = output.sAMLMetadataDocument
            self.tags = output.tags
            self.validUntil = output.validUntil
        } else {
            self.createDate = nil
            self.sAMLMetadataDocument = nil
            self.tags = nil
            self.validUntil = nil
        }
    }
}

/// Contains the response to a successful [GetSAMLProvider] request.
public struct GetSAMLProviderOutputResponse: Swift.Equatable {
    /// The date and time when the SAML provider was created.
    public var createDate: ClientRuntime.Date?
    /// The XML metadata document that includes information about an identity provider.
    public var sAMLMetadataDocument: Swift.String?
    /// A list of tags that are attached to the specified IAM SAML provider. The returned list of tags is sorted by tag key. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
    public var tags: [IamClientTypes.Tag]?
    /// The expiration date and time for the SAML provider.
    public var validUntil: ClientRuntime.Date?

    public init (
        createDate: ClientRuntime.Date? = nil,
        sAMLMetadataDocument: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil,
        validUntil: ClientRuntime.Date? = nil
    )
    {
        self.createDate = createDate
        self.sAMLMetadataDocument = sAMLMetadataDocument
        self.tags = tags
        self.validUntil = validUntil
    }
}

struct GetSAMLProviderOutputResponseBody: Swift.Equatable {
    public let sAMLMetadataDocument: Swift.String?
    public let createDate: ClientRuntime.Date?
    public let validUntil: ClientRuntime.Date?
    public let tags: [IamClientTypes.Tag]?
}

extension GetSAMLProviderOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createDate = "CreateDate"
        case sAMLMetadataDocument = "SAMLMetadataDocument"
        case tags = "Tags"
        case validUntil = "ValidUntil"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetSAMLProviderResult"))
        let sAMLMetadataDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sAMLMetadataDocument)
        sAMLMetadataDocument = sAMLMetadataDocumentDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let validUntilDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validUntil)
        var validUntilBuffer:ClientRuntime.Date? = nil
        if let validUntilDecoded = validUntilDecoded {
            validUntilBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(validUntilDecoded, format: .dateTime)
        }
        validUntil = validUntilBuffer
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension GetSSHPublicKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSSHPublicKeyInput(encoding: \(Swift.String(describing: encoding)), sSHPublicKeyId: \(Swift.String(describing: sSHPublicKeyId)), userName: \(Swift.String(describing: userName)))"}
}

extension GetSSHPublicKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let encoding = encoding {
            try container.encode(encoding, forKey: ClientRuntime.Key("Encoding"))
        }
        if let sSHPublicKeyId = sSHPublicKeyId {
            try container.encode(sSHPublicKeyId, forKey: ClientRuntime.Key("SSHPublicKeyId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("GetSSHPublicKey", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetSSHPublicKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSSHPublicKeyInput: Swift.Equatable {
    /// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use SSH. To retrieve the public key in PEM format, use PEM.
    /// This member is required.
    public var encoding: IamClientTypes.EncodingType?
    /// The unique identifier for the SSH public key. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that can consist of any upper or lowercased letter or digit.
    /// This member is required.
    public var sSHPublicKeyId: Swift.String?
    /// The name of the IAM user associated with the SSH public key. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        encoding: IamClientTypes.EncodingType? = nil,
        sSHPublicKeyId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.encoding = encoding
        self.sSHPublicKeyId = sSHPublicKeyId
        self.userName = userName
    }
}

extension GetSSHPublicKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetSSHPublicKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnrecognizedPublicKeyEncoding" : self = .unrecognizedPublicKeyEncodingException(try UnrecognizedPublicKeyEncodingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSSHPublicKeyOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case unrecognizedPublicKeyEncodingException(UnrecognizedPublicKeyEncodingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSSHPublicKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSSHPublicKeyOutputResponse(sSHPublicKey: \(Swift.String(describing: sSHPublicKey)))"}
}

extension GetSSHPublicKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSSHPublicKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sSHPublicKey = output.sSHPublicKey
        } else {
            self.sSHPublicKey = nil
        }
    }
}

/// Contains the response to a successful [GetSSHPublicKey] request.
public struct GetSSHPublicKeyOutputResponse: Swift.Equatable {
    /// A structure containing details about the SSH public key.
    public var sSHPublicKey: IamClientTypes.SSHPublicKey?

    public init (
        sSHPublicKey: IamClientTypes.SSHPublicKey? = nil
    )
    {
        self.sSHPublicKey = sSHPublicKey
    }
}

struct GetSSHPublicKeyOutputResponseBody: Swift.Equatable {
    public let sSHPublicKey: IamClientTypes.SSHPublicKey?
}

extension GetSSHPublicKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sSHPublicKey = "SSHPublicKey"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetSSHPublicKeyResult"))
        let sSHPublicKeyDecoded = try containerValues.decodeIfPresent(IamClientTypes.SSHPublicKey.self, forKey: .sSHPublicKey)
        sSHPublicKey = sSHPublicKeyDecoded
    }
}

extension GetServerCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetServerCertificateInput(serverCertificateName: \(Swift.String(describing: serverCertificateName)))"}
}

extension GetServerCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serverCertificateName = serverCertificateName {
            try container.encode(serverCertificateName, forKey: ClientRuntime.Key("ServerCertificateName"))
        }
        try container.encode("GetServerCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetServerCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetServerCertificateInput: Swift.Equatable {
    /// The name of the server certificate you want to retrieve information about. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var serverCertificateName: Swift.String?

    public init (
        serverCertificateName: Swift.String? = nil
    )
    {
        self.serverCertificateName = serverCertificateName
    }
}

extension GetServerCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetServerCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetServerCertificateOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetServerCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetServerCertificateOutputResponse(serverCertificate: \(Swift.String(describing: serverCertificate)))"}
}

extension GetServerCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetServerCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serverCertificate = output.serverCertificate
        } else {
            self.serverCertificate = nil
        }
    }
}

/// Contains the response to a successful [GetServerCertificate] request.
public struct GetServerCertificateOutputResponse: Swift.Equatable {
    /// A structure containing details about the server certificate.
    /// This member is required.
    public var serverCertificate: IamClientTypes.ServerCertificate?

    public init (
        serverCertificate: IamClientTypes.ServerCertificate? = nil
    )
    {
        self.serverCertificate = serverCertificate
    }
}

struct GetServerCertificateOutputResponseBody: Swift.Equatable {
    public let serverCertificate: IamClientTypes.ServerCertificate?
}

extension GetServerCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverCertificate = "ServerCertificate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetServerCertificateResult"))
        let serverCertificateDecoded = try containerValues.decodeIfPresent(IamClientTypes.ServerCertificate.self, forKey: .serverCertificate)
        serverCertificate = serverCertificateDecoded
    }
}

extension GetServiceLastAccessedDetailsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetServiceLastAccessedDetailsInput(jobId: \(Swift.String(describing: jobId)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)))"}
}

extension GetServiceLastAccessedDetailsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let jobId = jobId {
            try container.encode(jobId, forKey: ClientRuntime.Key("JobId"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        try container.encode("GetServiceLastAccessedDetails", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetServiceLastAccessedDetailsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetServiceLastAccessedDetailsInput: Swift.Equatable {
    /// The ID of the request generated by the [GenerateServiceLastAccessedDetails] operation. The JobId returned by GenerateServiceLastAccessedDetail must be used by the same role within a session, or by the same user when used to call GetServiceLastAccessedDetail.
    /// This member is required.
    public var jobId: Swift.String?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?

    public init (
        jobId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.jobId = jobId
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension GetServiceLastAccessedDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetServiceLastAccessedDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetServiceLastAccessedDetailsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetServiceLastAccessedDetailsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetServiceLastAccessedDetailsOutputResponse(error: \(Swift.String(describing: error)), isTruncated: \(Swift.String(describing: isTruncated)), jobCompletionDate: \(Swift.String(describing: jobCompletionDate)), jobCreationDate: \(Swift.String(describing: jobCreationDate)), jobStatus: \(Swift.String(describing: jobStatus)), jobType: \(Swift.String(describing: jobType)), marker: \(Swift.String(describing: marker)), servicesLastAccessed: \(Swift.String(describing: servicesLastAccessed)))"}
}

extension GetServiceLastAccessedDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetServiceLastAccessedDetailsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.error = output.error
            self.isTruncated = output.isTruncated
            self.jobCompletionDate = output.jobCompletionDate
            self.jobCreationDate = output.jobCreationDate
            self.jobStatus = output.jobStatus
            self.jobType = output.jobType
            self.marker = output.marker
            self.servicesLastAccessed = output.servicesLastAccessed
        } else {
            self.error = nil
            self.isTruncated = false
            self.jobCompletionDate = nil
            self.jobCreationDate = nil
            self.jobStatus = nil
            self.jobType = nil
            self.marker = nil
            self.servicesLastAccessed = nil
        }
    }
}

public struct GetServiceLastAccessedDetailsOutputResponse: Swift.Equatable {
    /// An object that contains details about the reason the operation failed.
    public var error: IamClientTypes.ErrorDetails?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the generated report job was completed or failed. This field is null if the job is still in progress, as indicated by a job status value of IN_PROGRESS.
    /// This member is required.
    public var jobCompletionDate: ClientRuntime.Date?
    /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the report job was created.
    /// This member is required.
    public var jobCreationDate: ClientRuntime.Date?
    /// The status of the job.
    /// This member is required.
    public var jobStatus: IamClientTypes.JobStatusType?
    /// The type of job. Service jobs return information about when each service was last accessed. Action jobs also include information about when tracked actions within the service were last accessed.
    public var jobType: IamClientTypes.AccessAdvisorUsageGranularityType?
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A ServiceLastAccessed object that contains details about the most recent attempt to access the service.
    /// This member is required.
    public var servicesLastAccessed: [IamClientTypes.ServiceLastAccessed]?

    public init (
        error: IamClientTypes.ErrorDetails? = nil,
        isTruncated: Swift.Bool = false,
        jobCompletionDate: ClientRuntime.Date? = nil,
        jobCreationDate: ClientRuntime.Date? = nil,
        jobStatus: IamClientTypes.JobStatusType? = nil,
        jobType: IamClientTypes.AccessAdvisorUsageGranularityType? = nil,
        marker: Swift.String? = nil,
        servicesLastAccessed: [IamClientTypes.ServiceLastAccessed]? = nil
    )
    {
        self.error = error
        self.isTruncated = isTruncated
        self.jobCompletionDate = jobCompletionDate
        self.jobCreationDate = jobCreationDate
        self.jobStatus = jobStatus
        self.jobType = jobType
        self.marker = marker
        self.servicesLastAccessed = servicesLastAccessed
    }
}

struct GetServiceLastAccessedDetailsOutputResponseBody: Swift.Equatable {
    public let jobStatus: IamClientTypes.JobStatusType?
    public let jobType: IamClientTypes.AccessAdvisorUsageGranularityType?
    public let jobCreationDate: ClientRuntime.Date?
    public let servicesLastAccessed: [IamClientTypes.ServiceLastAccessed]?
    public let jobCompletionDate: ClientRuntime.Date?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
    public let error: IamClientTypes.ErrorDetails?
}

extension GetServiceLastAccessedDetailsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case error = "Error"
        case isTruncated = "IsTruncated"
        case jobCompletionDate = "JobCompletionDate"
        case jobCreationDate = "JobCreationDate"
        case jobStatus = "JobStatus"
        case jobType = "JobType"
        case marker = "Marker"
        case servicesLastAccessed = "ServicesLastAccessed"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetServiceLastAccessedDetailsResult"))
        let jobStatusDecoded = try containerValues.decodeIfPresent(IamClientTypes.JobStatusType.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(IamClientTypes.AccessAdvisorUsageGranularityType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let jobCreationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobCreationDate)
        var jobCreationDateBuffer:ClientRuntime.Date? = nil
        if let jobCreationDateDecoded = jobCreationDateDecoded {
            jobCreationDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(jobCreationDateDecoded, format: .dateTime)
        }
        jobCreationDate = jobCreationDateBuffer
        if containerValues.contains(.servicesLastAccessed) {
            struct KeyVal0{struct member{}}
            let servicesLastAccessedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .servicesLastAccessed)
            if let servicesLastAccessedWrappedContainer = servicesLastAccessedWrappedContainer {
                let servicesLastAccessedContainer = try servicesLastAccessedWrappedContainer.decodeIfPresent([IamClientTypes.ServiceLastAccessed].self, forKey: .member)
                var servicesLastAccessedBuffer:[IamClientTypes.ServiceLastAccessed]? = nil
                if let servicesLastAccessedContainer = servicesLastAccessedContainer {
                    servicesLastAccessedBuffer = [IamClientTypes.ServiceLastAccessed]()
                    for structureContainer0 in servicesLastAccessedContainer {
                        servicesLastAccessedBuffer?.append(structureContainer0)
                    }
                }
                servicesLastAccessed = servicesLastAccessedBuffer
            } else {
                servicesLastAccessed = []
            }
        } else {
            servicesLastAccessed = nil
        }
        let jobCompletionDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobCompletionDate)
        var jobCompletionDateBuffer:ClientRuntime.Date? = nil
        if let jobCompletionDateDecoded = jobCompletionDateDecoded {
            jobCompletionDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(jobCompletionDateDecoded, format: .dateTime)
        }
        jobCompletionDate = jobCompletionDateBuffer
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let errorDecoded = try containerValues.decodeIfPresent(IamClientTypes.ErrorDetails.self, forKey: .error)
        error = errorDecoded
    }
}

extension GetServiceLastAccessedDetailsWithEntitiesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetServiceLastAccessedDetailsWithEntitiesInput(jobId: \(Swift.String(describing: jobId)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), serviceNamespace: \(Swift.String(describing: serviceNamespace)))"}
}

extension GetServiceLastAccessedDetailsWithEntitiesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let jobId = jobId {
            try container.encode(jobId, forKey: ClientRuntime.Key("JobId"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let serviceNamespace = serviceNamespace {
            try container.encode(serviceNamespace, forKey: ClientRuntime.Key("ServiceNamespace"))
        }
        try container.encode("GetServiceLastAccessedDetailsWithEntities", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetServiceLastAccessedDetailsWithEntitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetServiceLastAccessedDetailsWithEntitiesInput: Swift.Equatable {
    /// The ID of the request generated by the GenerateServiceLastAccessedDetails operation.
    /// This member is required.
    public var jobId: Swift.String?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The service namespace for an Amazon Web Services service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service. To learn the service namespace for a service, see [Actions, resources, and condition keys for Amazon Web Services services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) in the IAM User Guide. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, (service prefix: a4b). For more information about service namespaces, see [Amazon Web Services service namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces) in the Amazon Web Services General Reference.
    /// This member is required.
    public var serviceNamespace: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        serviceNamespace: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.marker = marker
        self.maxItems = maxItems
        self.serviceNamespace = serviceNamespace
    }
}

extension GetServiceLastAccessedDetailsWithEntitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetServiceLastAccessedDetailsWithEntitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetServiceLastAccessedDetailsWithEntitiesOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetServiceLastAccessedDetailsWithEntitiesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetServiceLastAccessedDetailsWithEntitiesOutputResponse(entityDetailsList: \(Swift.String(describing: entityDetailsList)), error: \(Swift.String(describing: error)), isTruncated: \(Swift.String(describing: isTruncated)), jobCompletionDate: \(Swift.String(describing: jobCompletionDate)), jobCreationDate: \(Swift.String(describing: jobCreationDate)), jobStatus: \(Swift.String(describing: jobStatus)), marker: \(Swift.String(describing: marker)))"}
}

extension GetServiceLastAccessedDetailsWithEntitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetServiceLastAccessedDetailsWithEntitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entityDetailsList = output.entityDetailsList
            self.error = output.error
            self.isTruncated = output.isTruncated
            self.jobCompletionDate = output.jobCompletionDate
            self.jobCreationDate = output.jobCreationDate
            self.jobStatus = output.jobStatus
            self.marker = output.marker
        } else {
            self.entityDetailsList = nil
            self.error = nil
            self.isTruncated = false
            self.jobCompletionDate = nil
            self.jobCreationDate = nil
            self.jobStatus = nil
            self.marker = nil
        }
    }
}

public struct GetServiceLastAccessedDetailsWithEntitiesOutputResponse: Swift.Equatable {
    /// An EntityDetailsList object that contains details about when an IAM entity (user or role) used group or policy permissions in an attempt to access the specified Amazon Web Services service.
    /// This member is required.
    public var entityDetailsList: [IamClientTypes.EntityDetails]?
    /// An object that contains details about the reason the operation failed.
    public var error: IamClientTypes.ErrorDetails?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the generated report job was completed or failed. This field is null if the job is still in progress, as indicated by a job status value of IN_PROGRESS.
    /// This member is required.
    public var jobCompletionDate: ClientRuntime.Date?
    /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the report job was created.
    /// This member is required.
    public var jobCreationDate: ClientRuntime.Date?
    /// The status of the job.
    /// This member is required.
    public var jobStatus: IamClientTypes.JobStatusType?
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        entityDetailsList: [IamClientTypes.EntityDetails]? = nil,
        error: IamClientTypes.ErrorDetails? = nil,
        isTruncated: Swift.Bool = false,
        jobCompletionDate: ClientRuntime.Date? = nil,
        jobCreationDate: ClientRuntime.Date? = nil,
        jobStatus: IamClientTypes.JobStatusType? = nil,
        marker: Swift.String? = nil
    )
    {
        self.entityDetailsList = entityDetailsList
        self.error = error
        self.isTruncated = isTruncated
        self.jobCompletionDate = jobCompletionDate
        self.jobCreationDate = jobCreationDate
        self.jobStatus = jobStatus
        self.marker = marker
    }
}

struct GetServiceLastAccessedDetailsWithEntitiesOutputResponseBody: Swift.Equatable {
    public let jobStatus: IamClientTypes.JobStatusType?
    public let jobCreationDate: ClientRuntime.Date?
    public let jobCompletionDate: ClientRuntime.Date?
    public let entityDetailsList: [IamClientTypes.EntityDetails]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
    public let error: IamClientTypes.ErrorDetails?
}

extension GetServiceLastAccessedDetailsWithEntitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityDetailsList = "EntityDetailsList"
        case error = "Error"
        case isTruncated = "IsTruncated"
        case jobCompletionDate = "JobCompletionDate"
        case jobCreationDate = "JobCreationDate"
        case jobStatus = "JobStatus"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetServiceLastAccessedDetailsWithEntitiesResult"))
        let jobStatusDecoded = try containerValues.decodeIfPresent(IamClientTypes.JobStatusType.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let jobCreationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobCreationDate)
        var jobCreationDateBuffer:ClientRuntime.Date? = nil
        if let jobCreationDateDecoded = jobCreationDateDecoded {
            jobCreationDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(jobCreationDateDecoded, format: .dateTime)
        }
        jobCreationDate = jobCreationDateBuffer
        let jobCompletionDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobCompletionDate)
        var jobCompletionDateBuffer:ClientRuntime.Date? = nil
        if let jobCompletionDateDecoded = jobCompletionDateDecoded {
            jobCompletionDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(jobCompletionDateDecoded, format: .dateTime)
        }
        jobCompletionDate = jobCompletionDateBuffer
        if containerValues.contains(.entityDetailsList) {
            struct KeyVal0{struct member{}}
            let entityDetailsListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .entityDetailsList)
            if let entityDetailsListWrappedContainer = entityDetailsListWrappedContainer {
                let entityDetailsListContainer = try entityDetailsListWrappedContainer.decodeIfPresent([IamClientTypes.EntityDetails].self, forKey: .member)
                var entityDetailsListBuffer:[IamClientTypes.EntityDetails]? = nil
                if let entityDetailsListContainer = entityDetailsListContainer {
                    entityDetailsListBuffer = [IamClientTypes.EntityDetails]()
                    for structureContainer0 in entityDetailsListContainer {
                        entityDetailsListBuffer?.append(structureContainer0)
                    }
                }
                entityDetailsList = entityDetailsListBuffer
            } else {
                entityDetailsList = []
            }
        } else {
            entityDetailsList = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let errorDecoded = try containerValues.decodeIfPresent(IamClientTypes.ErrorDetails.self, forKey: .error)
        error = errorDecoded
    }
}

extension GetServiceLinkedRoleDeletionStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetServiceLinkedRoleDeletionStatusInput(deletionTaskId: \(Swift.String(describing: deletionTaskId)))"}
}

extension GetServiceLinkedRoleDeletionStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deletionTaskId = deletionTaskId {
            try container.encode(deletionTaskId, forKey: ClientRuntime.Key("DeletionTaskId"))
        }
        try container.encode("GetServiceLinkedRoleDeletionStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetServiceLinkedRoleDeletionStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetServiceLinkedRoleDeletionStatusInput: Swift.Equatable {
    /// The deletion task identifier. This identifier is returned by the [DeleteServiceLinkedRole] operation in the format task/aws-service-role///.
    /// This member is required.
    public var deletionTaskId: Swift.String?

    public init (
        deletionTaskId: Swift.String? = nil
    )
    {
        self.deletionTaskId = deletionTaskId
    }
}

extension GetServiceLinkedRoleDeletionStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetServiceLinkedRoleDeletionStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetServiceLinkedRoleDeletionStatusOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetServiceLinkedRoleDeletionStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetServiceLinkedRoleDeletionStatusOutputResponse(reason: \(Swift.String(describing: reason)), status: \(Swift.String(describing: status)))"}
}

extension GetServiceLinkedRoleDeletionStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetServiceLinkedRoleDeletionStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reason = output.reason
            self.status = output.status
        } else {
            self.reason = nil
            self.status = nil
        }
    }
}

public struct GetServiceLinkedRoleDeletionStatusOutputResponse: Swift.Equatable {
    /// An object that contains details about the reason the deletion failed.
    public var reason: IamClientTypes.DeletionTaskFailureReasonType?
    /// The status of the deletion.
    /// This member is required.
    public var status: IamClientTypes.DeletionTaskStatusType?

    public init (
        reason: IamClientTypes.DeletionTaskFailureReasonType? = nil,
        status: IamClientTypes.DeletionTaskStatusType? = nil
    )
    {
        self.reason = reason
        self.status = status
    }
}

struct GetServiceLinkedRoleDeletionStatusOutputResponseBody: Swift.Equatable {
    public let status: IamClientTypes.DeletionTaskStatusType?
    public let reason: IamClientTypes.DeletionTaskFailureReasonType?
}

extension GetServiceLinkedRoleDeletionStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reason = "Reason"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetServiceLinkedRoleDeletionStatusResult"))
        let statusDecoded = try containerValues.decodeIfPresent(IamClientTypes.DeletionTaskStatusType.self, forKey: .status)
        status = statusDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(IamClientTypes.DeletionTaskFailureReasonType.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension GetUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUserInput(userName: \(Swift.String(describing: userName)))"}
}

extension GetUserInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("GetUser", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetUserInput: Swift.Equatable {
    /// The name of the user to get information about. This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        userName: Swift.String? = nil
    )
    {
        self.userName = userName
    }
}

extension GetUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetUserOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUserOutputResponse(user: \(Swift.String(describing: user)))"}
}

extension GetUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.user = output.user
        } else {
            self.user = nil
        }
    }
}

/// Contains the response to a successful [GetUser] request.
public struct GetUserOutputResponse: Swift.Equatable {
    /// A structure containing details about the IAM user. Due to a service issue, password last used data does not include password use from May 3, 2018 22:50 PDT to May 23, 2018 14:08 PDT. This affects [last sign-in](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_finding-unused.html) dates shown in the IAM console and password last used dates in the [IAM credential report](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_getting-report.html), and returned by this operation. If users signed in during the affected time, the password last used date that is returned is the date the user last signed in before May 3, 2018. For users that signed in after May 23, 2018 14:08 PDT, the returned password last used date is accurate. You can use password last used information to identify unused credentials for deletion. For example, you might delete users who did not sign in to Amazon Web Services in the last 90 days. In cases like this, we recommend that you adjust your evaluation window to include dates after May 23, 2018. Alternatively, if your users use access keys to access Amazon Web Services programmatically you can refer to access key last used information because it is accurate for all dates.
    /// This member is required.
    public var user: IamClientTypes.User?

    public init (
        user: IamClientTypes.User? = nil
    )
    {
        self.user = user
    }
}

struct GetUserOutputResponseBody: Swift.Equatable {
    public let user: IamClientTypes.User?
}

extension GetUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case user = "User"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetUserResult"))
        let userDecoded = try containerValues.decodeIfPresent(IamClientTypes.User.self, forKey: .user)
        user = userDecoded
    }
}

extension GetUserPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUserPolicyInput(policyName: \(Swift.String(describing: policyName)), userName: \(Swift.String(describing: userName)))"}
}

extension GetUserPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("GetUserPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetUserPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetUserPolicyInput: Swift.Equatable {
    /// The name of the policy document to get. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyName: Swift.String?
    /// The name of the user who the policy is associated with. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.userName = userName
    }
}

extension GetUserPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetUserPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetUserPolicyOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUserPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUserPolicyOutputResponse(policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)), userName: \(Swift.String(describing: userName)))"}
}

extension GetUserPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetUserPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policyDocument = output.policyDocument
            self.policyName = output.policyName
            self.userName = output.userName
        } else {
            self.policyDocument = nil
            self.policyName = nil
            self.userName = nil
        }
    }
}

/// Contains the response to a successful [GetUserPolicy] request.
public struct GetUserPolicyOutputResponse: Swift.Equatable {
    /// The policy document. IAM stores policies in JSON format. However, resources that were created using CloudFormation templates can be formatted in YAML. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.
    /// This member is required.
    public var policyDocument: Swift.String?
    /// The name of the policy.
    /// This member is required.
    public var policyName: Swift.String?
    /// The user the policy is associated with.
    /// This member is required.
    public var userName: Swift.String?

    public init (
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.userName = userName
    }
}

struct GetUserPolicyOutputResponseBody: Swift.Equatable {
    public let userName: Swift.String?
    public let policyName: Swift.String?
    public let policyDocument: Swift.String?
}

extension GetUserPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument = "PolicyDocument"
        case policyName = "PolicyName"
        case userName = "UserName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetUserPolicyResult"))
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension IamClientTypes {
    public enum GlobalEndpointTokenVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case v1token
        case v2token
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalEndpointTokenVersion] {
            return [
                .v1token,
                .v2token,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .v1token: return "v1Token"
            case .v2token: return "v2Token"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GlobalEndpointTokenVersion(rawValue: rawValue) ?? GlobalEndpointTokenVersion.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes.Group: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createDate = "CreateDate"
        case groupId = "GroupId"
        case groupName = "GroupName"
        case path = "Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let groupId = groupId {
            try container.encode(groupId, forKey: ClientRuntime.Key("GroupId"))
        }
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
    }
}

extension IamClientTypes.Group: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Group(arn: \(Swift.String(describing: arn)), createDate: \(Swift.String(describing: createDate)), groupId: \(Swift.String(describing: groupId)), groupName: \(Swift.String(describing: groupName)), path: \(Swift.String(describing: path)))"}
}

extension IamClientTypes {
    /// Contains information about an IAM group entity. This data type is used as a response element in the following operations:
    ///
    /// * [CreateGroup]
    ///
    /// * [GetGroup]
    ///
    /// * [ListGroups]
    public struct Group: Swift.Equatable {
        /// The Amazon Resource Name (ARN) specifying the group. For more information about ARNs and how to use them in policies, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var arn: Swift.String?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the group was created.
        /// This member is required.
        public var createDate: ClientRuntime.Date?
        /// The stable and unique string identifying the group. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var groupId: Swift.String?
        /// The friendly name that identifies the group.
        /// This member is required.
        public var groupName: Swift.String?
        /// The path to the group. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var path: Swift.String?

        public init (
            arn: Swift.String? = nil,
            createDate: ClientRuntime.Date? = nil,
            groupId: Swift.String? = nil,
            groupName: Swift.String? = nil,
            path: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createDate = createDate
            self.groupId = groupId
            self.groupName = groupName
            self.path = path
        }
    }

}

extension IamClientTypes.GroupDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case attachedManagedPolicies = "AttachedManagedPolicies"
        case createDate = "CreateDate"
        case groupId = "GroupId"
        case groupName = "GroupName"
        case groupPolicyList = "GroupPolicyList"
        case path = "Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let attachedManagedPolicies = attachedManagedPolicies {
            var attachedManagedPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttachedManagedPolicies"))
            for (index0, attachedpolicy0) in attachedManagedPolicies.enumerated() {
                try attachedManagedPoliciesContainer.encode(attachedpolicy0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let groupId = groupId {
            try container.encode(groupId, forKey: ClientRuntime.Key("GroupId"))
        }
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let groupPolicyList = groupPolicyList {
            var groupPolicyListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("GroupPolicyList"))
            for (index0, policydetail0) in groupPolicyList.enumerated() {
                try groupPolicyListContainer.encode(policydetail0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        if containerValues.contains(.groupPolicyList) {
            struct KeyVal0{struct member{}}
            let groupPolicyListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .groupPolicyList)
            if let groupPolicyListWrappedContainer = groupPolicyListWrappedContainer {
                let groupPolicyListContainer = try groupPolicyListWrappedContainer.decodeIfPresent([IamClientTypes.PolicyDetail].self, forKey: .member)
                var groupPolicyListBuffer:[IamClientTypes.PolicyDetail]? = nil
                if let groupPolicyListContainer = groupPolicyListContainer {
                    groupPolicyListBuffer = [IamClientTypes.PolicyDetail]()
                    for structureContainer0 in groupPolicyListContainer {
                        groupPolicyListBuffer?.append(structureContainer0)
                    }
                }
                groupPolicyList = groupPolicyListBuffer
            } else {
                groupPolicyList = []
            }
        } else {
            groupPolicyList = nil
        }
        if containerValues.contains(.attachedManagedPolicies) {
            struct KeyVal0{struct member{}}
            let attachedManagedPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attachedManagedPolicies)
            if let attachedManagedPoliciesWrappedContainer = attachedManagedPoliciesWrappedContainer {
                let attachedManagedPoliciesContainer = try attachedManagedPoliciesWrappedContainer.decodeIfPresent([IamClientTypes.AttachedPolicy].self, forKey: .member)
                var attachedManagedPoliciesBuffer:[IamClientTypes.AttachedPolicy]? = nil
                if let attachedManagedPoliciesContainer = attachedManagedPoliciesContainer {
                    attachedManagedPoliciesBuffer = [IamClientTypes.AttachedPolicy]()
                    for structureContainer0 in attachedManagedPoliciesContainer {
                        attachedManagedPoliciesBuffer?.append(structureContainer0)
                    }
                }
                attachedManagedPolicies = attachedManagedPoliciesBuffer
            } else {
                attachedManagedPolicies = []
            }
        } else {
            attachedManagedPolicies = nil
        }
    }
}

extension IamClientTypes.GroupDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GroupDetail(arn: \(Swift.String(describing: arn)), attachedManagedPolicies: \(Swift.String(describing: attachedManagedPolicies)), createDate: \(Swift.String(describing: createDate)), groupId: \(Swift.String(describing: groupId)), groupName: \(Swift.String(describing: groupName)), groupPolicyList: \(Swift.String(describing: groupPolicyList)), path: \(Swift.String(describing: path)))"}
}

extension IamClientTypes {
    /// Contains information about an IAM group, including all of the group's policies. This data type is used as a response element in the [GetAccountAuthorizationDetails] operation.
    public struct GroupDetail: Swift.Equatable {
        /// The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources. For more information about ARNs, go to [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// A list of the managed policies attached to the group.
        public var attachedManagedPolicies: [IamClientTypes.AttachedPolicy]?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the group was created.
        public var createDate: ClientRuntime.Date?
        /// The stable and unique string identifying the group. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        public var groupId: Swift.String?
        /// The friendly name that identifies the group.
        public var groupName: Swift.String?
        /// A list of the inline policies embedded in the group.
        public var groupPolicyList: [IamClientTypes.PolicyDetail]?
        /// The path to the group. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        public var path: Swift.String?

        public init (
            arn: Swift.String? = nil,
            attachedManagedPolicies: [IamClientTypes.AttachedPolicy]? = nil,
            createDate: ClientRuntime.Date? = nil,
            groupId: Swift.String? = nil,
            groupName: Swift.String? = nil,
            groupPolicyList: [IamClientTypes.PolicyDetail]? = nil,
            path: Swift.String? = nil
        )
        {
            self.arn = arn
            self.attachedManagedPolicies = attachedManagedPolicies
            self.createDate = createDate
            self.groupId = groupId
            self.groupName = groupName
            self.groupPolicyList = groupPolicyList
            self.path = path
        }
    }

}

extension IamClientTypes.InstanceProfile: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createDate = "CreateDate"
        case instanceProfileId = "InstanceProfileId"
        case instanceProfileName = "InstanceProfileName"
        case path = "Path"
        case roles = "Roles"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let instanceProfileId = instanceProfileId {
            try container.encode(instanceProfileId, forKey: ClientRuntime.Key("InstanceProfileId"))
        }
        if let instanceProfileName = instanceProfileName {
            try container.encode(instanceProfileName, forKey: ClientRuntime.Key("InstanceProfileName"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let roles = roles {
            var rolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Roles"))
            for (index0, role0) in roles.enumerated() {
                try rolesContainer.encode(role0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let instanceProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceProfileName)
        instanceProfileName = instanceProfileNameDecoded
        let instanceProfileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceProfileId)
        instanceProfileId = instanceProfileIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        if containerValues.contains(.roles) {
            struct KeyVal0{struct member{}}
            let rolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .roles)
            if let rolesWrappedContainer = rolesWrappedContainer {
                let rolesContainer = try rolesWrappedContainer.decodeIfPresent([IamClientTypes.Role].self, forKey: .member)
                var rolesBuffer:[IamClientTypes.Role]? = nil
                if let rolesContainer = rolesContainer {
                    rolesBuffer = [IamClientTypes.Role]()
                    for structureContainer0 in rolesContainer {
                        rolesBuffer?.append(structureContainer0)
                    }
                }
                roles = rolesBuffer
            } else {
                roles = []
            }
        } else {
            roles = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension IamClientTypes.InstanceProfile: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceProfile(arn: \(Swift.String(describing: arn)), createDate: \(Swift.String(describing: createDate)), instanceProfileId: \(Swift.String(describing: instanceProfileId)), instanceProfileName: \(Swift.String(describing: instanceProfileName)), path: \(Swift.String(describing: path)), roles: \(Swift.String(describing: roles)), tags: \(Swift.String(describing: tags)))"}
}

extension IamClientTypes {
    /// Contains information about an instance profile. This data type is used as a response element in the following operations:
    ///
    /// * [CreateInstanceProfile]
    ///
    /// * [GetInstanceProfile]
    ///
    /// * [ListInstanceProfiles]
    ///
    /// * [ListInstanceProfilesForRole]
    public struct InstanceProfile: Swift.Equatable {
        /// The Amazon Resource Name (ARN) specifying the instance profile. For more information about ARNs and how to use them in policies, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var arn: Swift.String?
        /// The date when the instance profile was created.
        /// This member is required.
        public var createDate: ClientRuntime.Date?
        /// The stable and unique string identifying the instance profile. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var instanceProfileId: Swift.String?
        /// The name identifying the instance profile.
        /// This member is required.
        public var instanceProfileName: Swift.String?
        /// The path to the instance profile. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var path: Swift.String?
        /// The role associated with the instance profile.
        /// This member is required.
        public var roles: [IamClientTypes.Role]?
        /// A list of tags that are attached to the instance profile. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
        public var tags: [IamClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createDate: ClientRuntime.Date? = nil,
            instanceProfileId: Swift.String? = nil,
            instanceProfileName: Swift.String? = nil,
            path: Swift.String? = nil,
            roles: [IamClientTypes.Role]? = nil,
            tags: [IamClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createDate = createDate
            self.instanceProfileId = instanceProfileId
            self.instanceProfileName = instanceProfileName
            self.path = path
            self.roles = roles
            self.tags = tags
        }
    }

}

extension InvalidAuthenticationCodeException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidAuthenticationCodeException(message: \(Swift.String(describing: message)))"}
}

extension InvalidAuthenticationCodeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidAuthenticationCodeExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the authentication code was not recognized. The error message describes the specific error.
public struct InvalidAuthenticationCodeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidAuthenticationCodeExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidAuthenticationCodeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidCertificateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidCertificateException(message: \(Swift.String(describing: message)))"}
}

extension InvalidCertificateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidCertificateExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the certificate is invalid.
public struct InvalidCertificateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidCertificateExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidCertificateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInputException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidInputException(message: \(Swift.String(describing: message)))"}
}

extension InvalidInputException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidInputExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because an invalid or out-of-range value was supplied for an input parameter.
public struct InvalidInputException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInputExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidInputExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidPublicKeyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidPublicKeyException(message: \(Swift.String(describing: message)))"}
}

extension InvalidPublicKeyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidPublicKeyExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the public key is malformed or otherwise invalid.
public struct InvalidPublicKeyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidPublicKeyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidPublicKeyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidUserTypeException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidUserTypeException(message: \(Swift.String(describing: message)))"}
}

extension InvalidUserTypeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidUserTypeExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the type of user for the transaction was incorrect.
public struct InvalidUserTypeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidUserTypeExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidUserTypeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes {
    public enum JobStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatusType] {
            return [
                .completed,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatusType(rawValue: rawValue) ?? JobStatusType.sdkUnknown(rawValue)
        }
    }
}

extension KeyPairMismatchException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeyPairMismatchException(message: \(Swift.String(describing: message)))"}
}

extension KeyPairMismatchException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<KeyPairMismatchExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the public key certificate and the private key do not match.
public struct KeyPairMismatchException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct KeyPairMismatchExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension KeyPairMismatchExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<LimitExceededExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because it attempted to create resources beyond the current Amazon Web Services account limits. The error message describes the limit exceeded.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListAccessKeysInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAccessKeysInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), userName: \(Swift.String(describing: userName)))"}
}

extension ListAccessKeysInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("ListAccessKeys", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListAccessKeysInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAccessKeysInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The name of the user. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        userName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.userName = userName
    }
}

extension ListAccessKeysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListAccessKeysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAccessKeysOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAccessKeysOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAccessKeysOutputResponse(accessKeyMetadata: \(Swift.String(describing: accessKeyMetadata)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension ListAccessKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAccessKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessKeyMetadata = output.accessKeyMetadata
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.accessKeyMetadata = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [ListAccessKeys] request.
public struct ListAccessKeysOutputResponse: Swift.Equatable {
    /// A list of objects containing metadata about the access keys.
    /// This member is required.
    public var accessKeyMetadata: [IamClientTypes.AccessKeyMetadata]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        accessKeyMetadata: [IamClientTypes.AccessKeyMetadata]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.accessKeyMetadata = accessKeyMetadata
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct ListAccessKeysOutputResponseBody: Swift.Equatable {
    public let accessKeyMetadata: [IamClientTypes.AccessKeyMetadata]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListAccessKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyMetadata = "AccessKeyMetadata"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListAccessKeysResult"))
        if containerValues.contains(.accessKeyMetadata) {
            struct KeyVal0{struct member{}}
            let accessKeyMetadataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accessKeyMetadata)
            if let accessKeyMetadataWrappedContainer = accessKeyMetadataWrappedContainer {
                let accessKeyMetadataContainer = try accessKeyMetadataWrappedContainer.decodeIfPresent([IamClientTypes.AccessKeyMetadata].self, forKey: .member)
                var accessKeyMetadataBuffer:[IamClientTypes.AccessKeyMetadata]? = nil
                if let accessKeyMetadataContainer = accessKeyMetadataContainer {
                    accessKeyMetadataBuffer = [IamClientTypes.AccessKeyMetadata]()
                    for structureContainer0 in accessKeyMetadataContainer {
                        accessKeyMetadataBuffer?.append(structureContainer0)
                    }
                }
                accessKeyMetadata = accessKeyMetadataBuffer
            } else {
                accessKeyMetadata = []
            }
        } else {
            accessKeyMetadata = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListAccountAliasesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAccountAliasesInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)))"}
}

extension ListAccountAliasesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        try container.encode("ListAccountAliases", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListAccountAliasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAccountAliasesInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListAccountAliasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListAccountAliasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAccountAliasesOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAccountAliasesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAccountAliasesOutputResponse(accountAliases: \(Swift.String(describing: accountAliases)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension ListAccountAliasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAccountAliasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accountAliases = output.accountAliases
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.accountAliases = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [ListAccountAliases] request.
public struct ListAccountAliasesOutputResponse: Swift.Equatable {
    /// A list of aliases associated with the account. Amazon Web Services supports only one alias per account.
    /// This member is required.
    public var accountAliases: [Swift.String]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        accountAliases: [Swift.String]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.accountAliases = accountAliases
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct ListAccountAliasesOutputResponseBody: Swift.Equatable {
    public let accountAliases: [Swift.String]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListAccountAliasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountAliases = "AccountAliases"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListAccountAliasesResult"))
        if containerValues.contains(.accountAliases) {
            struct KeyVal0{struct member{}}
            let accountAliasesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accountAliases)
            if let accountAliasesWrappedContainer = accountAliasesWrappedContainer {
                let accountAliasesContainer = try accountAliasesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var accountAliasesBuffer:[Swift.String]? = nil
                if let accountAliasesContainer = accountAliasesContainer {
                    accountAliasesBuffer = [Swift.String]()
                    for stringContainer0 in accountAliasesContainer {
                        accountAliasesBuffer?.append(stringContainer0)
                    }
                }
                accountAliases = accountAliasesBuffer
            } else {
                accountAliases = []
            }
        } else {
            accountAliases = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListAttachedGroupPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAttachedGroupPoliciesInput(groupName: \(Swift.String(describing: groupName)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), pathPrefix: \(Swift.String(describing: pathPrefix)))"}
}

extension ListAttachedGroupPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let pathPrefix = pathPrefix {
            try container.encode(pathPrefix, forKey: ClientRuntime.Key("PathPrefix"))
        }
        try container.encode("ListAttachedGroupPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListAttachedGroupPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAttachedGroupPoliciesInput: Swift.Equatable {
    /// The name (friendly name, not ARN) of the group to list attached policies for. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var groupName: Swift.String?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var pathPrefix: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        pathPrefix: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.marker = marker
        self.maxItems = maxItems
        self.pathPrefix = pathPrefix
    }
}

extension ListAttachedGroupPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListAttachedGroupPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAttachedGroupPoliciesOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAttachedGroupPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAttachedGroupPoliciesOutputResponse(attachedPolicies: \(Swift.String(describing: attachedPolicies)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension ListAttachedGroupPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAttachedGroupPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attachedPolicies = output.attachedPolicies
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.attachedPolicies = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [ListAttachedGroupPolicies] request.
public struct ListAttachedGroupPoliciesOutputResponse: Swift.Equatable {
    /// A list of the attached policies.
    public var attachedPolicies: [IamClientTypes.AttachedPolicy]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        attachedPolicies: [IamClientTypes.AttachedPolicy]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.attachedPolicies = attachedPolicies
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct ListAttachedGroupPoliciesOutputResponseBody: Swift.Equatable {
    public let attachedPolicies: [IamClientTypes.AttachedPolicy]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListAttachedGroupPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachedPolicies = "AttachedPolicies"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListAttachedGroupPoliciesResult"))
        if containerValues.contains(.attachedPolicies) {
            struct KeyVal0{struct member{}}
            let attachedPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attachedPolicies)
            if let attachedPoliciesWrappedContainer = attachedPoliciesWrappedContainer {
                let attachedPoliciesContainer = try attachedPoliciesWrappedContainer.decodeIfPresent([IamClientTypes.AttachedPolicy].self, forKey: .member)
                var attachedPoliciesBuffer:[IamClientTypes.AttachedPolicy]? = nil
                if let attachedPoliciesContainer = attachedPoliciesContainer {
                    attachedPoliciesBuffer = [IamClientTypes.AttachedPolicy]()
                    for structureContainer0 in attachedPoliciesContainer {
                        attachedPoliciesBuffer?.append(structureContainer0)
                    }
                }
                attachedPolicies = attachedPoliciesBuffer
            } else {
                attachedPolicies = []
            }
        } else {
            attachedPolicies = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListAttachedRolePoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAttachedRolePoliciesInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), pathPrefix: \(Swift.String(describing: pathPrefix)), roleName: \(Swift.String(describing: roleName)))"}
}

extension ListAttachedRolePoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let pathPrefix = pathPrefix {
            try container.encode(pathPrefix, forKey: ClientRuntime.Key("PathPrefix"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("ListAttachedRolePolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListAttachedRolePoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAttachedRolePoliciesInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var pathPrefix: Swift.String?
    /// The name (friendly name, not ARN) of the role to list attached policies for. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        pathPrefix: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.pathPrefix = pathPrefix
        self.roleName = roleName
    }
}

extension ListAttachedRolePoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListAttachedRolePoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAttachedRolePoliciesOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAttachedRolePoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAttachedRolePoliciesOutputResponse(attachedPolicies: \(Swift.String(describing: attachedPolicies)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension ListAttachedRolePoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAttachedRolePoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attachedPolicies = output.attachedPolicies
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.attachedPolicies = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [ListAttachedRolePolicies] request.
public struct ListAttachedRolePoliciesOutputResponse: Swift.Equatable {
    /// A list of the attached policies.
    public var attachedPolicies: [IamClientTypes.AttachedPolicy]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        attachedPolicies: [IamClientTypes.AttachedPolicy]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.attachedPolicies = attachedPolicies
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct ListAttachedRolePoliciesOutputResponseBody: Swift.Equatable {
    public let attachedPolicies: [IamClientTypes.AttachedPolicy]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListAttachedRolePoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachedPolicies = "AttachedPolicies"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListAttachedRolePoliciesResult"))
        if containerValues.contains(.attachedPolicies) {
            struct KeyVal0{struct member{}}
            let attachedPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attachedPolicies)
            if let attachedPoliciesWrappedContainer = attachedPoliciesWrappedContainer {
                let attachedPoliciesContainer = try attachedPoliciesWrappedContainer.decodeIfPresent([IamClientTypes.AttachedPolicy].self, forKey: .member)
                var attachedPoliciesBuffer:[IamClientTypes.AttachedPolicy]? = nil
                if let attachedPoliciesContainer = attachedPoliciesContainer {
                    attachedPoliciesBuffer = [IamClientTypes.AttachedPolicy]()
                    for structureContainer0 in attachedPoliciesContainer {
                        attachedPoliciesBuffer?.append(structureContainer0)
                    }
                }
                attachedPolicies = attachedPoliciesBuffer
            } else {
                attachedPolicies = []
            }
        } else {
            attachedPolicies = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListAttachedUserPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAttachedUserPoliciesInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), pathPrefix: \(Swift.String(describing: pathPrefix)), userName: \(Swift.String(describing: userName)))"}
}

extension ListAttachedUserPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let pathPrefix = pathPrefix {
            try container.encode(pathPrefix, forKey: ClientRuntime.Key("PathPrefix"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("ListAttachedUserPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListAttachedUserPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAttachedUserPoliciesInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var pathPrefix: Swift.String?
    /// The name (friendly name, not ARN) of the user to list attached policies for. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        pathPrefix: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.pathPrefix = pathPrefix
        self.userName = userName
    }
}

extension ListAttachedUserPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListAttachedUserPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAttachedUserPoliciesOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAttachedUserPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAttachedUserPoliciesOutputResponse(attachedPolicies: \(Swift.String(describing: attachedPolicies)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension ListAttachedUserPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAttachedUserPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attachedPolicies = output.attachedPolicies
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.attachedPolicies = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [ListAttachedUserPolicies] request.
public struct ListAttachedUserPoliciesOutputResponse: Swift.Equatable {
    /// A list of the attached policies.
    public var attachedPolicies: [IamClientTypes.AttachedPolicy]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        attachedPolicies: [IamClientTypes.AttachedPolicy]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.attachedPolicies = attachedPolicies
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct ListAttachedUserPoliciesOutputResponseBody: Swift.Equatable {
    public let attachedPolicies: [IamClientTypes.AttachedPolicy]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListAttachedUserPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachedPolicies = "AttachedPolicies"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListAttachedUserPoliciesResult"))
        if containerValues.contains(.attachedPolicies) {
            struct KeyVal0{struct member{}}
            let attachedPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attachedPolicies)
            if let attachedPoliciesWrappedContainer = attachedPoliciesWrappedContainer {
                let attachedPoliciesContainer = try attachedPoliciesWrappedContainer.decodeIfPresent([IamClientTypes.AttachedPolicy].self, forKey: .member)
                var attachedPoliciesBuffer:[IamClientTypes.AttachedPolicy]? = nil
                if let attachedPoliciesContainer = attachedPoliciesContainer {
                    attachedPoliciesBuffer = [IamClientTypes.AttachedPolicy]()
                    for structureContainer0 in attachedPoliciesContainer {
                        attachedPoliciesBuffer?.append(structureContainer0)
                    }
                }
                attachedPolicies = attachedPoliciesBuffer
            } else {
                attachedPolicies = []
            }
        } else {
            attachedPolicies = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListEntitiesForPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEntitiesForPolicyInput(entityFilter: \(Swift.String(describing: entityFilter)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), pathPrefix: \(Swift.String(describing: pathPrefix)), policyArn: \(Swift.String(describing: policyArn)), policyUsageFilter: \(Swift.String(describing: policyUsageFilter)))"}
}

extension ListEntitiesForPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let entityFilter = entityFilter {
            try container.encode(entityFilter, forKey: ClientRuntime.Key("EntityFilter"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let pathPrefix = pathPrefix {
            try container.encode(pathPrefix, forKey: ClientRuntime.Key("PathPrefix"))
        }
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let policyUsageFilter = policyUsageFilter {
            try container.encode(policyUsageFilter, forKey: ClientRuntime.Key("PolicyUsageFilter"))
        }
        try container.encode("ListEntitiesForPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListEntitiesForPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListEntitiesForPolicyInput: Swift.Equatable {
    /// The entity type to use for filtering the results. For example, when EntityFilter is Role, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.
    public var entityFilter: IamClientTypes.EntityType?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var pathPrefix: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM policy for which you want the versions. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?
    /// The policy usage method to use for filtering the results. To list only permissions policies, set PolicyUsageFilter to PermissionsPolicy. To list only the policies used to set permissions boundaries, set the value to PermissionsBoundary. This parameter is optional. If it is not included, all policies are returned.
    public var policyUsageFilter: IamClientTypes.PolicyUsageType?

    public init (
        entityFilter: IamClientTypes.EntityType? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        pathPrefix: Swift.String? = nil,
        policyArn: Swift.String? = nil,
        policyUsageFilter: IamClientTypes.PolicyUsageType? = nil
    )
    {
        self.entityFilter = entityFilter
        self.marker = marker
        self.maxItems = maxItems
        self.pathPrefix = pathPrefix
        self.policyArn = policyArn
        self.policyUsageFilter = policyUsageFilter
    }
}

extension ListEntitiesForPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListEntitiesForPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListEntitiesForPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEntitiesForPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEntitiesForPolicyOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), policyGroups: \(Swift.String(describing: policyGroups)), policyRoles: \(Swift.String(describing: policyRoles)), policyUsers: \(Swift.String(describing: policyUsers)))"}
}

extension ListEntitiesForPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListEntitiesForPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.policyGroups = output.policyGroups
            self.policyRoles = output.policyRoles
            self.policyUsers = output.policyUsers
        } else {
            self.isTruncated = false
            self.marker = nil
            self.policyGroups = nil
            self.policyRoles = nil
            self.policyUsers = nil
        }
    }
}

/// Contains the response to a successful [ListEntitiesForPolicy] request.
public struct ListEntitiesForPolicyOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list of IAM groups that the policy is attached to.
    public var policyGroups: [IamClientTypes.PolicyGroup]?
    /// A list of IAM roles that the policy is attached to.
    public var policyRoles: [IamClientTypes.PolicyRole]?
    /// A list of IAM users that the policy is attached to.
    public var policyUsers: [IamClientTypes.PolicyUser]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        policyGroups: [IamClientTypes.PolicyGroup]? = nil,
        policyRoles: [IamClientTypes.PolicyRole]? = nil,
        policyUsers: [IamClientTypes.PolicyUser]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.policyGroups = policyGroups
        self.policyRoles = policyRoles
        self.policyUsers = policyUsers
    }
}

struct ListEntitiesForPolicyOutputResponseBody: Swift.Equatable {
    public let policyGroups: [IamClientTypes.PolicyGroup]?
    public let policyUsers: [IamClientTypes.PolicyUser]?
    public let policyRoles: [IamClientTypes.PolicyRole]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListEntitiesForPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case policyGroups = "PolicyGroups"
        case policyRoles = "PolicyRoles"
        case policyUsers = "PolicyUsers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListEntitiesForPolicyResult"))
        if containerValues.contains(.policyGroups) {
            struct KeyVal0{struct member{}}
            let policyGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyGroups)
            if let policyGroupsWrappedContainer = policyGroupsWrappedContainer {
                let policyGroupsContainer = try policyGroupsWrappedContainer.decodeIfPresent([IamClientTypes.PolicyGroup].self, forKey: .member)
                var policyGroupsBuffer:[IamClientTypes.PolicyGroup]? = nil
                if let policyGroupsContainer = policyGroupsContainer {
                    policyGroupsBuffer = [IamClientTypes.PolicyGroup]()
                    for structureContainer0 in policyGroupsContainer {
                        policyGroupsBuffer?.append(structureContainer0)
                    }
                }
                policyGroups = policyGroupsBuffer
            } else {
                policyGroups = []
            }
        } else {
            policyGroups = nil
        }
        if containerValues.contains(.policyUsers) {
            struct KeyVal0{struct member{}}
            let policyUsersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyUsers)
            if let policyUsersWrappedContainer = policyUsersWrappedContainer {
                let policyUsersContainer = try policyUsersWrappedContainer.decodeIfPresent([IamClientTypes.PolicyUser].self, forKey: .member)
                var policyUsersBuffer:[IamClientTypes.PolicyUser]? = nil
                if let policyUsersContainer = policyUsersContainer {
                    policyUsersBuffer = [IamClientTypes.PolicyUser]()
                    for structureContainer0 in policyUsersContainer {
                        policyUsersBuffer?.append(structureContainer0)
                    }
                }
                policyUsers = policyUsersBuffer
            } else {
                policyUsers = []
            }
        } else {
            policyUsers = nil
        }
        if containerValues.contains(.policyRoles) {
            struct KeyVal0{struct member{}}
            let policyRolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyRoles)
            if let policyRolesWrappedContainer = policyRolesWrappedContainer {
                let policyRolesContainer = try policyRolesWrappedContainer.decodeIfPresent([IamClientTypes.PolicyRole].self, forKey: .member)
                var policyRolesBuffer:[IamClientTypes.PolicyRole]? = nil
                if let policyRolesContainer = policyRolesContainer {
                    policyRolesBuffer = [IamClientTypes.PolicyRole]()
                    for structureContainer0 in policyRolesContainer {
                        policyRolesBuffer?.append(structureContainer0)
                    }
                }
                policyRoles = policyRolesBuffer
            } else {
                policyRoles = []
            }
        } else {
            policyRoles = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListGroupPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListGroupPoliciesInput(groupName: \(Swift.String(describing: groupName)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)))"}
}

extension ListGroupPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        try container.encode("ListGroupPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListGroupPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListGroupPoliciesInput: Swift.Equatable {
    /// The name of the group to list policies for. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var groupName: Swift.String?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?

    public init (
        groupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.groupName = groupName
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListGroupPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListGroupPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListGroupPoliciesOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGroupPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListGroupPoliciesOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), policyNames: \(Swift.String(describing: policyNames)))"}
}

extension ListGroupPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListGroupPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.policyNames = output.policyNames
        } else {
            self.isTruncated = false
            self.marker = nil
            self.policyNames = nil
        }
    }
}

/// Contains the response to a successful [ListGroupPolicies] request.
public struct ListGroupPoliciesOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list of policy names. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyNames: [Swift.String]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        policyNames: [Swift.String]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.policyNames = policyNames
    }
}

struct ListGroupPoliciesOutputResponseBody: Swift.Equatable {
    public let policyNames: [Swift.String]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListGroupPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case policyNames = "PolicyNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListGroupPoliciesResult"))
        if containerValues.contains(.policyNames) {
            struct KeyVal0{struct member{}}
            let policyNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyNames)
            if let policyNamesWrappedContainer = policyNamesWrappedContainer {
                let policyNamesContainer = try policyNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyNamesBuffer:[Swift.String]? = nil
                if let policyNamesContainer = policyNamesContainer {
                    policyNamesBuffer = [Swift.String]()
                    for stringContainer0 in policyNamesContainer {
                        policyNamesBuffer?.append(stringContainer0)
                    }
                }
                policyNames = policyNamesBuffer
            } else {
                policyNames = []
            }
        } else {
            policyNames = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListGroupsForUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListGroupsForUserInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), userName: \(Swift.String(describing: userName)))"}
}

extension ListGroupsForUserInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("ListGroupsForUser", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListGroupsForUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListGroupsForUserInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The name of the user to list groups for. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        userName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.userName = userName
    }
}

extension ListGroupsForUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListGroupsForUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListGroupsForUserOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGroupsForUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListGroupsForUserOutputResponse(groups: \(Swift.String(describing: groups)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension ListGroupsForUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListGroupsForUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groups = output.groups
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.groups = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [ListGroupsForUser] request.
public struct ListGroupsForUserOutputResponse: Swift.Equatable {
    /// A list of groups.
    /// This member is required.
    public var groups: [IamClientTypes.Group]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        groups: [IamClientTypes.Group]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.groups = groups
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct ListGroupsForUserOutputResponseBody: Swift.Equatable {
    public let groups: [IamClientTypes.Group]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListGroupsForUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groups = "Groups"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListGroupsForUserResult"))
        if containerValues.contains(.groups) {
            struct KeyVal0{struct member{}}
            let groupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .groups)
            if let groupsWrappedContainer = groupsWrappedContainer {
                let groupsContainer = try groupsWrappedContainer.decodeIfPresent([IamClientTypes.Group].self, forKey: .member)
                var groupsBuffer:[IamClientTypes.Group]? = nil
                if let groupsContainer = groupsContainer {
                    groupsBuffer = [IamClientTypes.Group]()
                    for structureContainer0 in groupsContainer {
                        groupsBuffer?.append(structureContainer0)
                    }
                }
                groups = groupsBuffer
            } else {
                groups = []
            }
        } else {
            groups = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListGroupsInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), pathPrefix: \(Swift.String(describing: pathPrefix)))"}
}

extension ListGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let pathPrefix = pathPrefix {
            try container.encode(pathPrefix, forKey: ClientRuntime.Key("PathPrefix"))
        }
        try container.encode("ListGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListGroupsInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The path prefix for filtering the results. For example, the prefix /division_abc/subdivision_xyz/ gets all groups whose path starts with /division_abc/subdivision_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var pathPrefix: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        pathPrefix: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.pathPrefix = pathPrefix
    }
}

extension ListGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListGroupsOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListGroupsOutputResponse(groups: \(Swift.String(describing: groups)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension ListGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groups = output.groups
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.groups = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [ListGroups] request.
public struct ListGroupsOutputResponse: Swift.Equatable {
    /// A list of groups.
    /// This member is required.
    public var groups: [IamClientTypes.Group]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        groups: [IamClientTypes.Group]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.groups = groups
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct ListGroupsOutputResponseBody: Swift.Equatable {
    public let groups: [IamClientTypes.Group]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groups = "Groups"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListGroupsResult"))
        if containerValues.contains(.groups) {
            struct KeyVal0{struct member{}}
            let groupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .groups)
            if let groupsWrappedContainer = groupsWrappedContainer {
                let groupsContainer = try groupsWrappedContainer.decodeIfPresent([IamClientTypes.Group].self, forKey: .member)
                var groupsBuffer:[IamClientTypes.Group]? = nil
                if let groupsContainer = groupsContainer {
                    groupsBuffer = [IamClientTypes.Group]()
                    for structureContainer0 in groupsContainer {
                        groupsBuffer?.append(structureContainer0)
                    }
                }
                groups = groupsBuffer
            } else {
                groups = []
            }
        } else {
            groups = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstanceProfileTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstanceProfileTagsInput(instanceProfileName: \(Swift.String(describing: instanceProfileName)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)))"}
}

extension ListInstanceProfileTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceProfileName = instanceProfileName {
            try container.encode(instanceProfileName, forKey: ClientRuntime.Key("InstanceProfileName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        try container.encode("ListInstanceProfileTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListInstanceProfileTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListInstanceProfileTagsInput: Swift.Equatable {
    /// The name of the IAM instance profile whose tags you want to see. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var instanceProfileName: Swift.String?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?

    public init (
        instanceProfileName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.instanceProfileName = instanceProfileName
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListInstanceProfileTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListInstanceProfileTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInstanceProfileTagsOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstanceProfileTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstanceProfileTagsOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), tags: \(Swift.String(describing: tags)))"}
}

extension ListInstanceProfileTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInstanceProfileTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.tags = output.tags
        } else {
            self.isTruncated = false
            self.marker = nil
            self.tags = nil
        }
    }
}

public struct ListInstanceProfileTagsOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// The list of tags that are currently attached to the IAM instance profile. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.tags = tags
    }
}

struct ListInstanceProfileTagsOutputResponseBody: Swift.Equatable {
    public let tags: [IamClientTypes.Tag]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListInstanceProfileTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListInstanceProfileTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstanceProfilesForRoleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstanceProfilesForRoleInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), roleName: \(Swift.String(describing: roleName)))"}
}

extension ListInstanceProfilesForRoleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("ListInstanceProfilesForRole", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListInstanceProfilesForRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListInstanceProfilesForRoleInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The name of the role to list instance profiles for. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.roleName = roleName
    }
}

extension ListInstanceProfilesForRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListInstanceProfilesForRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInstanceProfilesForRoleOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstanceProfilesForRoleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstanceProfilesForRoleOutputResponse(instanceProfiles: \(Swift.String(describing: instanceProfiles)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension ListInstanceProfilesForRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInstanceProfilesForRoleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceProfiles = output.instanceProfiles
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.instanceProfiles = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [ListInstanceProfilesForRole] request.
public struct ListInstanceProfilesForRoleOutputResponse: Swift.Equatable {
    /// A list of instance profiles.
    /// This member is required.
    public var instanceProfiles: [IamClientTypes.InstanceProfile]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        instanceProfiles: [IamClientTypes.InstanceProfile]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.instanceProfiles = instanceProfiles
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct ListInstanceProfilesForRoleOutputResponseBody: Swift.Equatable {
    public let instanceProfiles: [IamClientTypes.InstanceProfile]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListInstanceProfilesForRoleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceProfiles = "InstanceProfiles"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListInstanceProfilesForRoleResult"))
        if containerValues.contains(.instanceProfiles) {
            struct KeyVal0{struct member{}}
            let instanceProfilesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceProfiles)
            if let instanceProfilesWrappedContainer = instanceProfilesWrappedContainer {
                let instanceProfilesContainer = try instanceProfilesWrappedContainer.decodeIfPresent([IamClientTypes.InstanceProfile].self, forKey: .member)
                var instanceProfilesBuffer:[IamClientTypes.InstanceProfile]? = nil
                if let instanceProfilesContainer = instanceProfilesContainer {
                    instanceProfilesBuffer = [IamClientTypes.InstanceProfile]()
                    for structureContainer0 in instanceProfilesContainer {
                        instanceProfilesBuffer?.append(structureContainer0)
                    }
                }
                instanceProfiles = instanceProfilesBuffer
            } else {
                instanceProfiles = []
            }
        } else {
            instanceProfiles = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstanceProfilesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstanceProfilesInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), pathPrefix: \(Swift.String(describing: pathPrefix)))"}
}

extension ListInstanceProfilesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let pathPrefix = pathPrefix {
            try container.encode(pathPrefix, forKey: ClientRuntime.Key("PathPrefix"))
        }
        try container.encode("ListInstanceProfiles", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListInstanceProfilesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListInstanceProfilesInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The path prefix for filtering the results. For example, the prefix /application_abc/component_xyz/ gets all instance profiles whose path starts with /application_abc/component_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var pathPrefix: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        pathPrefix: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.pathPrefix = pathPrefix
    }
}

extension ListInstanceProfilesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListInstanceProfilesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInstanceProfilesOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstanceProfilesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstanceProfilesOutputResponse(instanceProfiles: \(Swift.String(describing: instanceProfiles)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension ListInstanceProfilesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInstanceProfilesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceProfiles = output.instanceProfiles
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.instanceProfiles = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [ListInstanceProfiles] request.
public struct ListInstanceProfilesOutputResponse: Swift.Equatable {
    /// A list of instance profiles.
    /// This member is required.
    public var instanceProfiles: [IamClientTypes.InstanceProfile]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        instanceProfiles: [IamClientTypes.InstanceProfile]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.instanceProfiles = instanceProfiles
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct ListInstanceProfilesOutputResponseBody: Swift.Equatable {
    public let instanceProfiles: [IamClientTypes.InstanceProfile]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListInstanceProfilesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceProfiles = "InstanceProfiles"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListInstanceProfilesResult"))
        if containerValues.contains(.instanceProfiles) {
            struct KeyVal0{struct member{}}
            let instanceProfilesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceProfiles)
            if let instanceProfilesWrappedContainer = instanceProfilesWrappedContainer {
                let instanceProfilesContainer = try instanceProfilesWrappedContainer.decodeIfPresent([IamClientTypes.InstanceProfile].self, forKey: .member)
                var instanceProfilesBuffer:[IamClientTypes.InstanceProfile]? = nil
                if let instanceProfilesContainer = instanceProfilesContainer {
                    instanceProfilesBuffer = [IamClientTypes.InstanceProfile]()
                    for structureContainer0 in instanceProfilesContainer {
                        instanceProfilesBuffer?.append(structureContainer0)
                    }
                }
                instanceProfiles = instanceProfilesBuffer
            } else {
                instanceProfiles = []
            }
        } else {
            instanceProfiles = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListMFADeviceTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMFADeviceTagsInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), serialNumber: \(Swift.String(describing: serialNumber)))"}
}

extension ListMFADeviceTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let serialNumber = serialNumber {
            try container.encode(serialNumber, forKey: ClientRuntime.Key("SerialNumber"))
        }
        try container.encode("ListMFADeviceTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListMFADeviceTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListMFADeviceTagsInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The unique identifier for the IAM virtual MFA device whose tags you want to see. For virtual MFA devices, the serial number is the same as the ARN. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var serialNumber: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        serialNumber: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.serialNumber = serialNumber
    }
}

extension ListMFADeviceTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListMFADeviceTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMFADeviceTagsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMFADeviceTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMFADeviceTagsOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), tags: \(Swift.String(describing: tags)))"}
}

extension ListMFADeviceTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMFADeviceTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.tags = output.tags
        } else {
            self.isTruncated = false
            self.marker = nil
            self.tags = nil
        }
    }
}

public struct ListMFADeviceTagsOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// The list of tags that are currently attached to the virtual MFA device. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.tags = tags
    }
}

struct ListMFADeviceTagsOutputResponseBody: Swift.Equatable {
    public let tags: [IamClientTypes.Tag]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListMFADeviceTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListMFADeviceTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListMFADevicesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMFADevicesInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), userName: \(Swift.String(describing: userName)))"}
}

extension ListMFADevicesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("ListMFADevices", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListMFADevicesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListMFADevicesInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The name of the user whose MFA devices you want to list. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        userName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.userName = userName
    }
}

extension ListMFADevicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListMFADevicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMFADevicesOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMFADevicesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMFADevicesOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), mFADevices: \(Swift.String(describing: mFADevices)), marker: \(Swift.String(describing: marker)))"}
}

extension ListMFADevicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMFADevicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.mFADevices = output.mFADevices
            self.marker = output.marker
        } else {
            self.isTruncated = false
            self.mFADevices = nil
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [ListMFADevices] request.
public struct ListMFADevicesOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// A list of MFA devices.
    /// This member is required.
    public var mFADevices: [IamClientTypes.MFADevice]?
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        isTruncated: Swift.Bool = false,
        mFADevices: [IamClientTypes.MFADevice]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.isTruncated = isTruncated
        self.mFADevices = mFADevices
        self.marker = marker
    }
}

struct ListMFADevicesOutputResponseBody: Swift.Equatable {
    public let mFADevices: [IamClientTypes.MFADevice]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListMFADevicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case mFADevices = "MFADevices"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListMFADevicesResult"))
        if containerValues.contains(.mFADevices) {
            struct KeyVal0{struct member{}}
            let mFADevicesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .mFADevices)
            if let mFADevicesWrappedContainer = mFADevicesWrappedContainer {
                let mFADevicesContainer = try mFADevicesWrappedContainer.decodeIfPresent([IamClientTypes.MFADevice].self, forKey: .member)
                var mFADevicesBuffer:[IamClientTypes.MFADevice]? = nil
                if let mFADevicesContainer = mFADevicesContainer {
                    mFADevicesBuffer = [IamClientTypes.MFADevice]()
                    for structureContainer0 in mFADevicesContainer {
                        mFADevicesBuffer?.append(structureContainer0)
                    }
                }
                mFADevices = mFADevicesBuffer
            } else {
                mFADevices = []
            }
        } else {
            mFADevices = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListOpenIDConnectProviderTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListOpenIDConnectProviderTagsInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), openIDConnectProviderArn: \(Swift.String(describing: openIDConnectProviderArn)))"}
}

extension ListOpenIDConnectProviderTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let openIDConnectProviderArn = openIDConnectProviderArn {
            try container.encode(openIDConnectProviderArn, forKey: ClientRuntime.Key("OpenIDConnectProviderArn"))
        }
        try container.encode("ListOpenIDConnectProviderTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListOpenIDConnectProviderTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListOpenIDConnectProviderTagsInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The ARN of the OpenID Connect (OIDC) identity provider whose tags you want to see. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var openIDConnectProviderArn: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        openIDConnectProviderArn: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.openIDConnectProviderArn = openIDConnectProviderArn
    }
}

extension ListOpenIDConnectProviderTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListOpenIDConnectProviderTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListOpenIDConnectProviderTagsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOpenIDConnectProviderTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListOpenIDConnectProviderTagsOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), tags: \(Swift.String(describing: tags)))"}
}

extension ListOpenIDConnectProviderTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListOpenIDConnectProviderTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.tags = output.tags
        } else {
            self.isTruncated = false
            self.marker = nil
            self.tags = nil
        }
    }
}

public struct ListOpenIDConnectProviderTagsOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// The list of tags that are currently attached to the OpenID Connect (OIDC) identity provider. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.tags = tags
    }
}

struct ListOpenIDConnectProviderTagsOutputResponseBody: Swift.Equatable {
    public let tags: [IamClientTypes.Tag]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListOpenIDConnectProviderTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListOpenIDConnectProviderTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListOpenIDConnectProvidersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListOpenIDConnectProvidersInput()"}
}

extension ListOpenIDConnectProvidersInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("ListOpenIDConnectProviders", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListOpenIDConnectProvidersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListOpenIDConnectProvidersInput: Swift.Equatable {

    public init() {}
}

extension ListOpenIDConnectProvidersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListOpenIDConnectProvidersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListOpenIDConnectProvidersOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOpenIDConnectProvidersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListOpenIDConnectProvidersOutputResponse(openIDConnectProviderList: \(Swift.String(describing: openIDConnectProviderList)))"}
}

extension ListOpenIDConnectProvidersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListOpenIDConnectProvidersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.openIDConnectProviderList = output.openIDConnectProviderList
        } else {
            self.openIDConnectProviderList = nil
        }
    }
}

/// Contains the response to a successful [ListOpenIDConnectProviders] request.
public struct ListOpenIDConnectProvidersOutputResponse: Swift.Equatable {
    /// The list of IAM OIDC provider resource objects defined in the Amazon Web Services account.
    public var openIDConnectProviderList: [IamClientTypes.OpenIDConnectProviderListEntry]?

    public init (
        openIDConnectProviderList: [IamClientTypes.OpenIDConnectProviderListEntry]? = nil
    )
    {
        self.openIDConnectProviderList = openIDConnectProviderList
    }
}

struct ListOpenIDConnectProvidersOutputResponseBody: Swift.Equatable {
    public let openIDConnectProviderList: [IamClientTypes.OpenIDConnectProviderListEntry]?
}

extension ListOpenIDConnectProvidersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case openIDConnectProviderList = "OpenIDConnectProviderList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListOpenIDConnectProvidersResult"))
        if containerValues.contains(.openIDConnectProviderList) {
            struct KeyVal0{struct member{}}
            let openIDConnectProviderListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .openIDConnectProviderList)
            if let openIDConnectProviderListWrappedContainer = openIDConnectProviderListWrappedContainer {
                let openIDConnectProviderListContainer = try openIDConnectProviderListWrappedContainer.decodeIfPresent([IamClientTypes.OpenIDConnectProviderListEntry].self, forKey: .member)
                var openIDConnectProviderListBuffer:[IamClientTypes.OpenIDConnectProviderListEntry]? = nil
                if let openIDConnectProviderListContainer = openIDConnectProviderListContainer {
                    openIDConnectProviderListBuffer = [IamClientTypes.OpenIDConnectProviderListEntry]()
                    for structureContainer0 in openIDConnectProviderListContainer {
                        openIDConnectProviderListBuffer?.append(structureContainer0)
                    }
                }
                openIDConnectProviderList = openIDConnectProviderListBuffer
            } else {
                openIDConnectProviderList = []
            }
        } else {
            openIDConnectProviderList = nil
        }
    }
}

extension IamClientTypes.ListPoliciesGrantingServiceAccessEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policies = "Policies"
        case serviceNamespace = "ServiceNamespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policies = policies {
            var policiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Policies"))
            for (index0, policygrantingserviceaccess0) in policies.enumerated() {
                try policiesContainer.encode(policygrantingserviceaccess0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let serviceNamespace = serviceNamespace {
            try container.encode(serviceNamespace, forKey: ClientRuntime.Key("ServiceNamespace"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        if containerValues.contains(.policies) {
            struct KeyVal0{struct member{}}
            let policiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policies)
            if let policiesWrappedContainer = policiesWrappedContainer {
                let policiesContainer = try policiesWrappedContainer.decodeIfPresent([IamClientTypes.PolicyGrantingServiceAccess].self, forKey: .member)
                var policiesBuffer:[IamClientTypes.PolicyGrantingServiceAccess]? = nil
                if let policiesContainer = policiesContainer {
                    policiesBuffer = [IamClientTypes.PolicyGrantingServiceAccess]()
                    for structureContainer0 in policiesContainer {
                        policiesBuffer?.append(structureContainer0)
                    }
                }
                policies = policiesBuffer
            } else {
                policies = []
            }
        } else {
            policies = nil
        }
    }
}

extension IamClientTypes.ListPoliciesGrantingServiceAccessEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPoliciesGrantingServiceAccessEntry(policies: \(Swift.String(describing: policies)), serviceNamespace: \(Swift.String(describing: serviceNamespace)))"}
}

extension IamClientTypes {
    /// Contains details about the permissions policies that are attached to the specified identity (user, group, or role). This data type is used as a response element in the [ListPoliciesGrantingServiceAccess] operation.
    public struct ListPoliciesGrantingServiceAccessEntry: Swift.Equatable {
        /// The PoliciesGrantingServiceAccess object that contains details about the policy.
        public var policies: [IamClientTypes.PolicyGrantingServiceAccess]?
        /// The namespace of the service that was accessed. To learn the service namespace of a service, see [Actions, resources, and condition keys for Amazon Web Services services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) in the Service Authorization Reference. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, (service prefix: a4b). For more information about service namespaces, see [Amazon Web Services service namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces) in the Amazon Web Services General Reference.
        public var serviceNamespace: Swift.String?

        public init (
            policies: [IamClientTypes.PolicyGrantingServiceAccess]? = nil,
            serviceNamespace: Swift.String? = nil
        )
        {
            self.policies = policies
            self.serviceNamespace = serviceNamespace
        }
    }

}

extension ListPoliciesGrantingServiceAccessInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPoliciesGrantingServiceAccessInput(arn: \(Swift.String(describing: arn)), marker: \(Swift.String(describing: marker)), serviceNamespaces: \(Swift.String(describing: serviceNamespaces)))"}
}

extension ListPoliciesGrantingServiceAccessInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let serviceNamespaces = serviceNamespaces {
            var serviceNamespacesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceNamespaces"))
            for (index0, servicenamespacetype0) in serviceNamespaces.enumerated() {
                try serviceNamespacesContainer.encode(servicenamespacetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ListPoliciesGrantingServiceAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListPoliciesGrantingServiceAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPoliciesGrantingServiceAccessInput: Swift.Equatable {
    /// The ARN of the IAM identity (user, group, or role) whose policies you want to list.
    /// This member is required.
    public var arn: Swift.String?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// The service namespace for the Amazon Web Services services whose policies you want to list. To learn the service namespace for a service, see [Actions, resources, and condition keys for Amazon Web Services services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) in the IAM User Guide. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, (service prefix: a4b). For more information about service namespaces, see [Amazon Web Services service namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces) in the Amazon Web Services General Reference.
    /// This member is required.
    public var serviceNamespaces: [Swift.String]?

    public init (
        arn: Swift.String? = nil,
        marker: Swift.String? = nil,
        serviceNamespaces: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.marker = marker
        self.serviceNamespaces = serviceNamespaces
    }
}

extension ListPoliciesGrantingServiceAccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListPoliciesGrantingServiceAccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPoliciesGrantingServiceAccessOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPoliciesGrantingServiceAccessOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPoliciesGrantingServiceAccessOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), policiesGrantingServiceAccess: \(Swift.String(describing: policiesGrantingServiceAccess)))"}
}

extension ListPoliciesGrantingServiceAccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPoliciesGrantingServiceAccessOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.policiesGrantingServiceAccess = output.policiesGrantingServiceAccess
        } else {
            self.isTruncated = false
            self.marker = nil
            self.policiesGrantingServiceAccess = nil
        }
    }
}

public struct ListPoliciesGrantingServiceAccessOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A ListPoliciesGrantingServiceAccess object that contains details about the permissions policies attached to the specified identity (user, group, or role).
    /// This member is required.
    public var policiesGrantingServiceAccess: [IamClientTypes.ListPoliciesGrantingServiceAccessEntry]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        policiesGrantingServiceAccess: [IamClientTypes.ListPoliciesGrantingServiceAccessEntry]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.policiesGrantingServiceAccess = policiesGrantingServiceAccess
    }
}

struct ListPoliciesGrantingServiceAccessOutputResponseBody: Swift.Equatable {
    public let policiesGrantingServiceAccess: [IamClientTypes.ListPoliciesGrantingServiceAccessEntry]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListPoliciesGrantingServiceAccessOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case policiesGrantingServiceAccess = "PoliciesGrantingServiceAccess"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListPoliciesGrantingServiceAccessResult"))
        if containerValues.contains(.policiesGrantingServiceAccess) {
            struct KeyVal0{struct member{}}
            let policiesGrantingServiceAccessWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policiesGrantingServiceAccess)
            if let policiesGrantingServiceAccessWrappedContainer = policiesGrantingServiceAccessWrappedContainer {
                let policiesGrantingServiceAccessContainer = try policiesGrantingServiceAccessWrappedContainer.decodeIfPresent([IamClientTypes.ListPoliciesGrantingServiceAccessEntry].self, forKey: .member)
                var policiesGrantingServiceAccessBuffer:[IamClientTypes.ListPoliciesGrantingServiceAccessEntry]? = nil
                if let policiesGrantingServiceAccessContainer = policiesGrantingServiceAccessContainer {
                    policiesGrantingServiceAccessBuffer = [IamClientTypes.ListPoliciesGrantingServiceAccessEntry]()
                    for structureContainer0 in policiesGrantingServiceAccessContainer {
                        policiesGrantingServiceAccessBuffer?.append(structureContainer0)
                    }
                }
                policiesGrantingServiceAccess = policiesGrantingServiceAccessBuffer
            } else {
                policiesGrantingServiceAccess = []
            }
        } else {
            policiesGrantingServiceAccess = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPoliciesInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), onlyAttached: \(Swift.String(describing: onlyAttached)), pathPrefix: \(Swift.String(describing: pathPrefix)), policyUsageFilter: \(Swift.String(describing: policyUsageFilter)), scope: \(Swift.String(describing: scope)))"}
}

extension ListPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if onlyAttached != false {
            try container.encode(onlyAttached, forKey: ClientRuntime.Key("OnlyAttached"))
        }
        if let pathPrefix = pathPrefix {
            try container.encode(pathPrefix, forKey: ClientRuntime.Key("PathPrefix"))
        }
        if let policyUsageFilter = policyUsageFilter {
            try container.encode(policyUsageFilter, forKey: ClientRuntime.Key("PolicyUsageFilter"))
        }
        if let scope = scope {
            try container.encode(scope, forKey: ClientRuntime.Key("Scope"))
        }
        try container.encode("ListPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPoliciesInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// A flag to filter the results to only the attached policies. When OnlyAttached is true, the returned list contains only the policies that are attached to an IAM user, group, or role. When OnlyAttached is false, or when the parameter is not included, all policies are returned.
    public var onlyAttached: Swift.Bool
    /// The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var pathPrefix: Swift.String?
    /// The policy usage method to use for filtering the results. To list only permissions policies, set PolicyUsageFilter to PermissionsPolicy. To list only the policies used to set permissions boundaries, set the value to PermissionsBoundary. This parameter is optional. If it is not included, all policies are returned.
    public var policyUsageFilter: IamClientTypes.PolicyUsageType?
    /// The scope to use for filtering the results. To list only Amazon Web Services managed policies, set Scope to AWS. To list only the customer managed policies in your Amazon Web Services account, set Scope to Local. This parameter is optional. If it is not included, or if it is set to All, all policies are returned.
    public var scope: IamClientTypes.PolicyScopeType?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        onlyAttached: Swift.Bool = false,
        pathPrefix: Swift.String? = nil,
        policyUsageFilter: IamClientTypes.PolicyUsageType? = nil,
        scope: IamClientTypes.PolicyScopeType? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.onlyAttached = onlyAttached
        self.pathPrefix = pathPrefix
        self.policyUsageFilter = policyUsageFilter
        self.scope = scope
    }
}

extension ListPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPoliciesOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPoliciesOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), policies: \(Swift.String(describing: policies)))"}
}

extension ListPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.policies = output.policies
        } else {
            self.isTruncated = false
            self.marker = nil
            self.policies = nil
        }
    }
}

/// Contains the response to a successful [ListPolicies] request.
public struct ListPoliciesOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list of policies.
    public var policies: [IamClientTypes.Policy]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        policies: [IamClientTypes.Policy]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.policies = policies
    }
}

struct ListPoliciesOutputResponseBody: Swift.Equatable {
    public let policies: [IamClientTypes.Policy]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case policies = "Policies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListPoliciesResult"))
        if containerValues.contains(.policies) {
            struct KeyVal0{struct member{}}
            let policiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policies)
            if let policiesWrappedContainer = policiesWrappedContainer {
                let policiesContainer = try policiesWrappedContainer.decodeIfPresent([IamClientTypes.Policy].self, forKey: .member)
                var policiesBuffer:[IamClientTypes.Policy]? = nil
                if let policiesContainer = policiesContainer {
                    policiesBuffer = [IamClientTypes.Policy]()
                    for structureContainer0 in policiesContainer {
                        policiesBuffer?.append(structureContainer0)
                    }
                }
                policies = policiesBuffer
            } else {
                policies = []
            }
        } else {
            policies = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListPolicyTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPolicyTagsInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), policyArn: \(Swift.String(describing: policyArn)))"}
}

extension ListPolicyTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        try container.encode("ListPolicyTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListPolicyTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPolicyTagsInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The ARN of the IAM customer managed policy whose tags you want to see. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyArn: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        policyArn: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.policyArn = policyArn
    }
}

extension ListPolicyTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListPolicyTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPolicyTagsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPolicyTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPolicyTagsOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), tags: \(Swift.String(describing: tags)))"}
}

extension ListPolicyTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPolicyTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.tags = output.tags
        } else {
            self.isTruncated = false
            self.marker = nil
            self.tags = nil
        }
    }
}

public struct ListPolicyTagsOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// The list of tags that are currently attached to the IAM customer managed policy. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.tags = tags
    }
}

struct ListPolicyTagsOutputResponseBody: Swift.Equatable {
    public let tags: [IamClientTypes.Tag]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListPolicyTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListPolicyTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListPolicyVersionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPolicyVersionsInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), policyArn: \(Swift.String(describing: policyArn)))"}
}

extension ListPolicyVersionsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        try container.encode("ListPolicyVersions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListPolicyVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPolicyVersionsInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The Amazon Resource Name (ARN) of the IAM policy for which you want the versions. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        policyArn: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.policyArn = policyArn
    }
}

extension ListPolicyVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListPolicyVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPolicyVersionsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPolicyVersionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPolicyVersionsOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), versions: \(Swift.String(describing: versions)))"}
}

extension ListPolicyVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPolicyVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.versions = output.versions
        } else {
            self.isTruncated = false
            self.marker = nil
            self.versions = nil
        }
    }
}

/// Contains the response to a successful [ListPolicyVersions] request.
public struct ListPolicyVersionsOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list of policy versions. For more information about managed policy versions, see [Versioning for managed policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html) in the IAM User Guide.
    public var versions: [IamClientTypes.PolicyVersion]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        versions: [IamClientTypes.PolicyVersion]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.versions = versions
    }
}

struct ListPolicyVersionsOutputResponseBody: Swift.Equatable {
    public let versions: [IamClientTypes.PolicyVersion]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListPolicyVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case versions = "Versions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListPolicyVersionsResult"))
        if containerValues.contains(.versions) {
            struct KeyVal0{struct member{}}
            let versionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .versions)
            if let versionsWrappedContainer = versionsWrappedContainer {
                let versionsContainer = try versionsWrappedContainer.decodeIfPresent([IamClientTypes.PolicyVersion].self, forKey: .member)
                var versionsBuffer:[IamClientTypes.PolicyVersion]? = nil
                if let versionsContainer = versionsContainer {
                    versionsBuffer = [IamClientTypes.PolicyVersion]()
                    for structureContainer0 in versionsContainer {
                        versionsBuffer?.append(structureContainer0)
                    }
                }
                versions = versionsBuffer
            } else {
                versions = []
            }
        } else {
            versions = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListRolePoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRolePoliciesInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), roleName: \(Swift.String(describing: roleName)))"}
}

extension ListRolePoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("ListRolePolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListRolePoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRolePoliciesInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The name of the role to list policies for. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.roleName = roleName
    }
}

extension ListRolePoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListRolePoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRolePoliciesOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRolePoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRolePoliciesOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), policyNames: \(Swift.String(describing: policyNames)))"}
}

extension ListRolePoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRolePoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.policyNames = output.policyNames
        } else {
            self.isTruncated = false
            self.marker = nil
            self.policyNames = nil
        }
    }
}

/// Contains the response to a successful [ListRolePolicies] request.
public struct ListRolePoliciesOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list of policy names.
    /// This member is required.
    public var policyNames: [Swift.String]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        policyNames: [Swift.String]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.policyNames = policyNames
    }
}

struct ListRolePoliciesOutputResponseBody: Swift.Equatable {
    public let policyNames: [Swift.String]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListRolePoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case policyNames = "PolicyNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListRolePoliciesResult"))
        if containerValues.contains(.policyNames) {
            struct KeyVal0{struct member{}}
            let policyNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyNames)
            if let policyNamesWrappedContainer = policyNamesWrappedContainer {
                let policyNamesContainer = try policyNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyNamesBuffer:[Swift.String]? = nil
                if let policyNamesContainer = policyNamesContainer {
                    policyNamesBuffer = [Swift.String]()
                    for stringContainer0 in policyNamesContainer {
                        policyNamesBuffer?.append(stringContainer0)
                    }
                }
                policyNames = policyNamesBuffer
            } else {
                policyNames = []
            }
        } else {
            policyNames = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListRoleTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoleTagsInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), roleName: \(Swift.String(describing: roleName)))"}
}

extension ListRoleTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("ListRoleTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListRoleTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRoleTagsInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The name of the IAM role for which you want to see the list of tags. This parameter accepts (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.roleName = roleName
    }
}

extension ListRoleTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListRoleTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRoleTagsOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRoleTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoleTagsOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), tags: \(Swift.String(describing: tags)))"}
}

extension ListRoleTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRoleTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.tags = output.tags
        } else {
            self.isTruncated = false
            self.marker = nil
            self.tags = nil
        }
    }
}

public struct ListRoleTagsOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// The list of tags that are currently attached to the role. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.tags = tags
    }
}

struct ListRoleTagsOutputResponseBody: Swift.Equatable {
    public let tags: [IamClientTypes.Tag]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListRoleTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListRoleTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListRolesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRolesInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), pathPrefix: \(Swift.String(describing: pathPrefix)))"}
}

extension ListRolesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let pathPrefix = pathPrefix {
            try container.encode(pathPrefix, forKey: ClientRuntime.Key("PathPrefix"))
        }
        try container.encode("ListRoles", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListRolesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRolesInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The path prefix for filtering the results. For example, the prefix /application_abc/component_xyz/ gets all roles whose path starts with /application_abc/component_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var pathPrefix: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        pathPrefix: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.pathPrefix = pathPrefix
    }
}

extension ListRolesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListRolesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRolesOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRolesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRolesOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), roles: \(Swift.String(describing: roles)))"}
}

extension ListRolesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRolesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.roles = output.roles
        } else {
            self.isTruncated = false
            self.marker = nil
            self.roles = nil
        }
    }
}

/// Contains the response to a successful [ListRoles] request.
public struct ListRolesOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list of roles.
    /// This member is required.
    public var roles: [IamClientTypes.Role]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        roles: [IamClientTypes.Role]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.roles = roles
    }
}

struct ListRolesOutputResponseBody: Swift.Equatable {
    public let roles: [IamClientTypes.Role]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListRolesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case roles = "Roles"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListRolesResult"))
        if containerValues.contains(.roles) {
            struct KeyVal0{struct member{}}
            let rolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .roles)
            if let rolesWrappedContainer = rolesWrappedContainer {
                let rolesContainer = try rolesWrappedContainer.decodeIfPresent([IamClientTypes.Role].self, forKey: .member)
                var rolesBuffer:[IamClientTypes.Role]? = nil
                if let rolesContainer = rolesContainer {
                    rolesBuffer = [IamClientTypes.Role]()
                    for structureContainer0 in rolesContainer {
                        rolesBuffer?.append(structureContainer0)
                    }
                }
                roles = rolesBuffer
            } else {
                roles = []
            }
        } else {
            roles = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListSAMLProviderTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSAMLProviderTagsInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), sAMLProviderArn: \(Swift.String(describing: sAMLProviderArn)))"}
}

extension ListSAMLProviderTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let sAMLProviderArn = sAMLProviderArn {
            try container.encode(sAMLProviderArn, forKey: ClientRuntime.Key("SAMLProviderArn"))
        }
        try container.encode("ListSAMLProviderTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListSAMLProviderTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSAMLProviderTagsInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The ARN of the Security Assertion Markup Language (SAML) identity provider whose tags you want to see. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var sAMLProviderArn: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        sAMLProviderArn: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.sAMLProviderArn = sAMLProviderArn
    }
}

extension ListSAMLProviderTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListSAMLProviderTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSAMLProviderTagsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSAMLProviderTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSAMLProviderTagsOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), tags: \(Swift.String(describing: tags)))"}
}

extension ListSAMLProviderTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSAMLProviderTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.tags = output.tags
        } else {
            self.isTruncated = false
            self.marker = nil
            self.tags = nil
        }
    }
}

public struct ListSAMLProviderTagsOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// The list of tags that are currently attached to the Security Assertion Markup Language (SAML) identity provider. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.tags = tags
    }
}

struct ListSAMLProviderTagsOutputResponseBody: Swift.Equatable {
    public let tags: [IamClientTypes.Tag]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListSAMLProviderTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListSAMLProviderTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListSAMLProvidersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSAMLProvidersInput()"}
}

extension ListSAMLProvidersInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("ListSAMLProviders", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListSAMLProvidersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSAMLProvidersInput: Swift.Equatable {

    public init() {}
}

extension ListSAMLProvidersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListSAMLProvidersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSAMLProvidersOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSAMLProvidersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSAMLProvidersOutputResponse(sAMLProviderList: \(Swift.String(describing: sAMLProviderList)))"}
}

extension ListSAMLProvidersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSAMLProvidersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sAMLProviderList = output.sAMLProviderList
        } else {
            self.sAMLProviderList = nil
        }
    }
}

/// Contains the response to a successful [ListSAMLProviders] request.
public struct ListSAMLProvidersOutputResponse: Swift.Equatable {
    /// The list of SAML provider resource objects defined in IAM for this Amazon Web Services account.
    public var sAMLProviderList: [IamClientTypes.SAMLProviderListEntry]?

    public init (
        sAMLProviderList: [IamClientTypes.SAMLProviderListEntry]? = nil
    )
    {
        self.sAMLProviderList = sAMLProviderList
    }
}

struct ListSAMLProvidersOutputResponseBody: Swift.Equatable {
    public let sAMLProviderList: [IamClientTypes.SAMLProviderListEntry]?
}

extension ListSAMLProvidersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sAMLProviderList = "SAMLProviderList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListSAMLProvidersResult"))
        if containerValues.contains(.sAMLProviderList) {
            struct KeyVal0{struct member{}}
            let sAMLProviderListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .sAMLProviderList)
            if let sAMLProviderListWrappedContainer = sAMLProviderListWrappedContainer {
                let sAMLProviderListContainer = try sAMLProviderListWrappedContainer.decodeIfPresent([IamClientTypes.SAMLProviderListEntry].self, forKey: .member)
                var sAMLProviderListBuffer:[IamClientTypes.SAMLProviderListEntry]? = nil
                if let sAMLProviderListContainer = sAMLProviderListContainer {
                    sAMLProviderListBuffer = [IamClientTypes.SAMLProviderListEntry]()
                    for structureContainer0 in sAMLProviderListContainer {
                        sAMLProviderListBuffer?.append(structureContainer0)
                    }
                }
                sAMLProviderList = sAMLProviderListBuffer
            } else {
                sAMLProviderList = []
            }
        } else {
            sAMLProviderList = nil
        }
    }
}

extension ListSSHPublicKeysInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSSHPublicKeysInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), userName: \(Swift.String(describing: userName)))"}
}

extension ListSSHPublicKeysInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("ListSSHPublicKeys", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListSSHPublicKeysInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSSHPublicKeysInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The name of the IAM user to list SSH public keys for. If none is specified, the UserName field is determined implicitly based on the Amazon Web Services access key used to sign the request. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        userName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.userName = userName
    }
}

extension ListSSHPublicKeysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListSSHPublicKeysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSSHPublicKeysOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSSHPublicKeysOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSSHPublicKeysOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), sSHPublicKeys: \(Swift.String(describing: sSHPublicKeys)))"}
}

extension ListSSHPublicKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSSHPublicKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.sSHPublicKeys = output.sSHPublicKeys
        } else {
            self.isTruncated = false
            self.marker = nil
            self.sSHPublicKeys = nil
        }
    }
}

/// Contains the response to a successful [ListSSHPublicKeys] request.
public struct ListSSHPublicKeysOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list of the SSH public keys assigned to IAM user.
    public var sSHPublicKeys: [IamClientTypes.SSHPublicKeyMetadata]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        sSHPublicKeys: [IamClientTypes.SSHPublicKeyMetadata]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.sSHPublicKeys = sSHPublicKeys
    }
}

struct ListSSHPublicKeysOutputResponseBody: Swift.Equatable {
    public let sSHPublicKeys: [IamClientTypes.SSHPublicKeyMetadata]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListSSHPublicKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case sSHPublicKeys = "SSHPublicKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListSSHPublicKeysResult"))
        if containerValues.contains(.sSHPublicKeys) {
            struct KeyVal0{struct member{}}
            let sSHPublicKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .sSHPublicKeys)
            if let sSHPublicKeysWrappedContainer = sSHPublicKeysWrappedContainer {
                let sSHPublicKeysContainer = try sSHPublicKeysWrappedContainer.decodeIfPresent([IamClientTypes.SSHPublicKeyMetadata].self, forKey: .member)
                var sSHPublicKeysBuffer:[IamClientTypes.SSHPublicKeyMetadata]? = nil
                if let sSHPublicKeysContainer = sSHPublicKeysContainer {
                    sSHPublicKeysBuffer = [IamClientTypes.SSHPublicKeyMetadata]()
                    for structureContainer0 in sSHPublicKeysContainer {
                        sSHPublicKeysBuffer?.append(structureContainer0)
                    }
                }
                sSHPublicKeys = sSHPublicKeysBuffer
            } else {
                sSHPublicKeys = []
            }
        } else {
            sSHPublicKeys = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListServerCertificateTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListServerCertificateTagsInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), serverCertificateName: \(Swift.String(describing: serverCertificateName)))"}
}

extension ListServerCertificateTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let serverCertificateName = serverCertificateName {
            try container.encode(serverCertificateName, forKey: ClientRuntime.Key("ServerCertificateName"))
        }
        try container.encode("ListServerCertificateTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListServerCertificateTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListServerCertificateTagsInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The name of the IAM server certificate whose tags you want to see. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var serverCertificateName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        serverCertificateName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.serverCertificateName = serverCertificateName
    }
}

extension ListServerCertificateTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListServerCertificateTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListServerCertificateTagsOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListServerCertificateTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListServerCertificateTagsOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), tags: \(Swift.String(describing: tags)))"}
}

extension ListServerCertificateTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListServerCertificateTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.tags = output.tags
        } else {
            self.isTruncated = false
            self.marker = nil
            self.tags = nil
        }
    }
}

public struct ListServerCertificateTagsOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// The list of tags that are currently attached to the IAM server certificate. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.tags = tags
    }
}

struct ListServerCertificateTagsOutputResponseBody: Swift.Equatable {
    public let tags: [IamClientTypes.Tag]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListServerCertificateTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListServerCertificateTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListServerCertificatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListServerCertificatesInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), pathPrefix: \(Swift.String(describing: pathPrefix)))"}
}

extension ListServerCertificatesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let pathPrefix = pathPrefix {
            try container.encode(pathPrefix, forKey: ClientRuntime.Key("PathPrefix"))
        }
        try container.encode("ListServerCertificates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListServerCertificatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListServerCertificatesInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The path prefix for filtering the results. For example: /company/servercerts would get all server certificates for which the path starts with /company/servercerts. This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var pathPrefix: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        pathPrefix: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.pathPrefix = pathPrefix
    }
}

extension ListServerCertificatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListServerCertificatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListServerCertificatesOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListServerCertificatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListServerCertificatesOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), serverCertificateMetadataList: \(Swift.String(describing: serverCertificateMetadataList)))"}
}

extension ListServerCertificatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListServerCertificatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.serverCertificateMetadataList = output.serverCertificateMetadataList
        } else {
            self.isTruncated = false
            self.marker = nil
            self.serverCertificateMetadataList = nil
        }
    }
}

/// Contains the response to a successful [ListServerCertificates] request.
public struct ListServerCertificatesOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list of server certificates.
    /// This member is required.
    public var serverCertificateMetadataList: [IamClientTypes.ServerCertificateMetadata]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        serverCertificateMetadataList: [IamClientTypes.ServerCertificateMetadata]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.serverCertificateMetadataList = serverCertificateMetadataList
    }
}

struct ListServerCertificatesOutputResponseBody: Swift.Equatable {
    public let serverCertificateMetadataList: [IamClientTypes.ServerCertificateMetadata]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListServerCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case serverCertificateMetadataList = "ServerCertificateMetadataList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListServerCertificatesResult"))
        if containerValues.contains(.serverCertificateMetadataList) {
            struct KeyVal0{struct member{}}
            let serverCertificateMetadataListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .serverCertificateMetadataList)
            if let serverCertificateMetadataListWrappedContainer = serverCertificateMetadataListWrappedContainer {
                let serverCertificateMetadataListContainer = try serverCertificateMetadataListWrappedContainer.decodeIfPresent([IamClientTypes.ServerCertificateMetadata].self, forKey: .member)
                var serverCertificateMetadataListBuffer:[IamClientTypes.ServerCertificateMetadata]? = nil
                if let serverCertificateMetadataListContainer = serverCertificateMetadataListContainer {
                    serverCertificateMetadataListBuffer = [IamClientTypes.ServerCertificateMetadata]()
                    for structureContainer0 in serverCertificateMetadataListContainer {
                        serverCertificateMetadataListBuffer?.append(structureContainer0)
                    }
                }
                serverCertificateMetadataList = serverCertificateMetadataListBuffer
            } else {
                serverCertificateMetadataList = []
            }
        } else {
            serverCertificateMetadataList = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListServiceSpecificCredentialsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListServiceSpecificCredentialsInput(serviceName: \(Swift.String(describing: serviceName)), userName: \(Swift.String(describing: userName)))"}
}

extension ListServiceSpecificCredentialsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serviceName = serviceName {
            try container.encode(serviceName, forKey: ClientRuntime.Key("ServiceName"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("ListServiceSpecificCredentials", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListServiceSpecificCredentialsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListServiceSpecificCredentialsInput: Swift.Equatable {
    /// Filters the returned results to only those for the specified Amazon Web Services service. If not specified, then Amazon Web Services returns service-specific credentials for all services.
    public var serviceName: Swift.String?
    /// The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        serviceName: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
        self.userName = userName
    }
}

extension ListServiceSpecificCredentialsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListServiceSpecificCredentialsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotSupportedService" : self = .serviceNotSupportedException(try ServiceNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListServiceSpecificCredentialsOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceNotSupportedException(ServiceNotSupportedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListServiceSpecificCredentialsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListServiceSpecificCredentialsOutputResponse(serviceSpecificCredentials: \(Swift.String(describing: serviceSpecificCredentials)))"}
}

extension ListServiceSpecificCredentialsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListServiceSpecificCredentialsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serviceSpecificCredentials = output.serviceSpecificCredentials
        } else {
            self.serviceSpecificCredentials = nil
        }
    }
}

public struct ListServiceSpecificCredentialsOutputResponse: Swift.Equatable {
    /// A list of structures that each contain details about a service-specific credential.
    public var serviceSpecificCredentials: [IamClientTypes.ServiceSpecificCredentialMetadata]?

    public init (
        serviceSpecificCredentials: [IamClientTypes.ServiceSpecificCredentialMetadata]? = nil
    )
    {
        self.serviceSpecificCredentials = serviceSpecificCredentials
    }
}

struct ListServiceSpecificCredentialsOutputResponseBody: Swift.Equatable {
    public let serviceSpecificCredentials: [IamClientTypes.ServiceSpecificCredentialMetadata]?
}

extension ListServiceSpecificCredentialsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceSpecificCredentials = "ServiceSpecificCredentials"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListServiceSpecificCredentialsResult"))
        if containerValues.contains(.serviceSpecificCredentials) {
            struct KeyVal0{struct member{}}
            let serviceSpecificCredentialsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .serviceSpecificCredentials)
            if let serviceSpecificCredentialsWrappedContainer = serviceSpecificCredentialsWrappedContainer {
                let serviceSpecificCredentialsContainer = try serviceSpecificCredentialsWrappedContainer.decodeIfPresent([IamClientTypes.ServiceSpecificCredentialMetadata].self, forKey: .member)
                var serviceSpecificCredentialsBuffer:[IamClientTypes.ServiceSpecificCredentialMetadata]? = nil
                if let serviceSpecificCredentialsContainer = serviceSpecificCredentialsContainer {
                    serviceSpecificCredentialsBuffer = [IamClientTypes.ServiceSpecificCredentialMetadata]()
                    for structureContainer0 in serviceSpecificCredentialsContainer {
                        serviceSpecificCredentialsBuffer?.append(structureContainer0)
                    }
                }
                serviceSpecificCredentials = serviceSpecificCredentialsBuffer
            } else {
                serviceSpecificCredentials = []
            }
        } else {
            serviceSpecificCredentials = nil
        }
    }
}

extension ListSigningCertificatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSigningCertificatesInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), userName: \(Swift.String(describing: userName)))"}
}

extension ListSigningCertificatesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("ListSigningCertificates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListSigningCertificatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSigningCertificatesInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The name of the IAM user whose signing certificates you want to examine. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        userName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.userName = userName
    }
}

extension ListSigningCertificatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListSigningCertificatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSigningCertificatesOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSigningCertificatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSigningCertificatesOutputResponse(certificates: \(Swift.String(describing: certificates)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension ListSigningCertificatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSigningCertificatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificates = output.certificates
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.certificates = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [ListSigningCertificates] request.
public struct ListSigningCertificatesOutputResponse: Swift.Equatable {
    /// A list of the user's signing certificate information.
    /// This member is required.
    public var certificates: [IamClientTypes.SigningCertificate]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        certificates: [IamClientTypes.SigningCertificate]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct ListSigningCertificatesOutputResponseBody: Swift.Equatable {
    public let certificates: [IamClientTypes.SigningCertificate]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListSigningCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificates = "Certificates"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListSigningCertificatesResult"))
        if containerValues.contains(.certificates) {
            struct KeyVal0{struct member{}}
            let certificatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .certificates)
            if let certificatesWrappedContainer = certificatesWrappedContainer {
                let certificatesContainer = try certificatesWrappedContainer.decodeIfPresent([IamClientTypes.SigningCertificate].self, forKey: .member)
                var certificatesBuffer:[IamClientTypes.SigningCertificate]? = nil
                if let certificatesContainer = certificatesContainer {
                    certificatesBuffer = [IamClientTypes.SigningCertificate]()
                    for structureContainer0 in certificatesContainer {
                        certificatesBuffer?.append(structureContainer0)
                    }
                }
                certificates = certificatesBuffer
            } else {
                certificates = []
            }
        } else {
            certificates = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListUserPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUserPoliciesInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), userName: \(Swift.String(describing: userName)))"}
}

extension ListUserPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("ListUserPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListUserPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListUserPoliciesInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The name of the user to list policies for. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        userName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.userName = userName
    }
}

extension ListUserPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListUserPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListUserPoliciesOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUserPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUserPoliciesOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), policyNames: \(Swift.String(describing: policyNames)))"}
}

extension ListUserPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListUserPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.policyNames = output.policyNames
        } else {
            self.isTruncated = false
            self.marker = nil
            self.policyNames = nil
        }
    }
}

/// Contains the response to a successful [ListUserPolicies] request.
public struct ListUserPoliciesOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list of policy names.
    /// This member is required.
    public var policyNames: [Swift.String]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        policyNames: [Swift.String]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.policyNames = policyNames
    }
}

struct ListUserPoliciesOutputResponseBody: Swift.Equatable {
    public let policyNames: [Swift.String]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListUserPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case policyNames = "PolicyNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListUserPoliciesResult"))
        if containerValues.contains(.policyNames) {
            struct KeyVal0{struct member{}}
            let policyNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyNames)
            if let policyNamesWrappedContainer = policyNamesWrappedContainer {
                let policyNamesContainer = try policyNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyNamesBuffer:[Swift.String]? = nil
                if let policyNamesContainer = policyNamesContainer {
                    policyNamesBuffer = [Swift.String]()
                    for stringContainer0 in policyNamesContainer {
                        policyNamesBuffer?.append(stringContainer0)
                    }
                }
                policyNames = policyNamesBuffer
            } else {
                policyNames = []
            }
        } else {
            policyNames = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListUserTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUserTagsInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), userName: \(Swift.String(describing: userName)))"}
}

extension ListUserTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("ListUserTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListUserTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListUserTagsInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The name of the IAM user whose tags you want to see. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        userName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.userName = userName
    }
}

extension ListUserTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListUserTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListUserTagsOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUserTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUserTagsOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), tags: \(Swift.String(describing: tags)))"}
}

extension ListUserTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListUserTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.tags = output.tags
        } else {
            self.isTruncated = false
            self.marker = nil
            self.tags = nil
        }
    }
}

public struct ListUserTagsOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// The list of tags that are currently attached to the user. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.tags = tags
    }
}

struct ListUserTagsOutputResponseBody: Swift.Equatable {
    public let tags: [IamClientTypes.Tag]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListUserTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListUserTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListUsersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUsersInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), pathPrefix: \(Swift.String(describing: pathPrefix)))"}
}

extension ListUsersInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let pathPrefix = pathPrefix {
            try container.encode(pathPrefix, forKey: ClientRuntime.Key("PathPrefix"))
        }
        try container.encode("ListUsers", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListUsersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListUsersInput: Swift.Equatable {
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The path prefix for filtering the results. For example: /division_abc/subdivision_xyz/, which would get all user names whose path starts with /division_abc/subdivision_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var pathPrefix: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        pathPrefix: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.pathPrefix = pathPrefix
    }
}

extension ListUsersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListUsersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListUsersOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUsersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUsersOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), users: \(Swift.String(describing: users)))"}
}

extension ListUsersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListUsersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.users = output.users
        } else {
            self.isTruncated = false
            self.marker = nil
            self.users = nil
        }
    }
}

/// Contains the response to a successful [ListUsers] request.
public struct ListUsersOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// A list of users.
    /// This member is required.
    public var users: [IamClientTypes.User]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        users: [IamClientTypes.User]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.users = users
    }
}

struct ListUsersOutputResponseBody: Swift.Equatable {
    public let users: [IamClientTypes.User]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListUsersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case users = "Users"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListUsersResult"))
        if containerValues.contains(.users) {
            struct KeyVal0{struct member{}}
            let usersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .users)
            if let usersWrappedContainer = usersWrappedContainer {
                let usersContainer = try usersWrappedContainer.decodeIfPresent([IamClientTypes.User].self, forKey: .member)
                var usersBuffer:[IamClientTypes.User]? = nil
                if let usersContainer = usersContainer {
                    usersBuffer = [IamClientTypes.User]()
                    for structureContainer0 in usersContainer {
                        usersBuffer?.append(structureContainer0)
                    }
                }
                users = usersBuffer
            } else {
                users = []
            }
        } else {
            users = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListVirtualMFADevicesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualMFADevicesInput(assignmentStatus: \(Swift.String(describing: assignmentStatus)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)))"}
}

extension ListVirtualMFADevicesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let assignmentStatus = assignmentStatus {
            try container.encode(assignmentStatus, forKey: ClientRuntime.Key("AssignmentStatus"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        try container.encode("ListVirtualMFADevices", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListVirtualMFADevicesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListVirtualMFADevicesInput: Swift.Equatable {
    /// The status (Unassigned or Assigned) of the devices to list. If you do not specify an AssignmentStatus, the operation defaults to Any, which lists both assigned and unassigned virtual MFA devices.,
    public var assignmentStatus: IamClientTypes.AssignmentStatusType?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?

    public init (
        assignmentStatus: IamClientTypes.AssignmentStatusType? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.assignmentStatus = assignmentStatus
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListVirtualMFADevicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListVirtualMFADevicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVirtualMFADevicesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVirtualMFADevicesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualMFADevicesOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), virtualMFADevices: \(Swift.String(describing: virtualMFADevices)))"}
}

extension ListVirtualMFADevicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListVirtualMFADevicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.virtualMFADevices = output.virtualMFADevices
        } else {
            self.isTruncated = false
            self.marker = nil
            self.virtualMFADevices = nil
        }
    }
}

/// Contains the response to a successful [ListVirtualMFADevices] request.
public struct ListVirtualMFADevicesOutputResponse: Swift.Equatable {
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?
    /// The list of virtual MFA devices in the current account that match the AssignmentStatus value that was passed in the request.
    /// This member is required.
    public var virtualMFADevices: [IamClientTypes.VirtualMFADevice]?

    public init (
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        virtualMFADevices: [IamClientTypes.VirtualMFADevice]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.marker = marker
        self.virtualMFADevices = virtualMFADevices
    }
}

struct ListVirtualMFADevicesOutputResponseBody: Swift.Equatable {
    public let virtualMFADevices: [IamClientTypes.VirtualMFADevice]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension ListVirtualMFADevicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case virtualMFADevices = "VirtualMFADevices"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListVirtualMFADevicesResult"))
        if containerValues.contains(.virtualMFADevices) {
            struct KeyVal0{struct member{}}
            let virtualMFADevicesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .virtualMFADevices)
            if let virtualMFADevicesWrappedContainer = virtualMFADevicesWrappedContainer {
                let virtualMFADevicesContainer = try virtualMFADevicesWrappedContainer.decodeIfPresent([IamClientTypes.VirtualMFADevice].self, forKey: .member)
                var virtualMFADevicesBuffer:[IamClientTypes.VirtualMFADevice]? = nil
                if let virtualMFADevicesContainer = virtualMFADevicesContainer {
                    virtualMFADevicesBuffer = [IamClientTypes.VirtualMFADevice]()
                    for structureContainer0 in virtualMFADevicesContainer {
                        virtualMFADevicesBuffer?.append(structureContainer0)
                    }
                }
                virtualMFADevices = virtualMFADevicesBuffer
            } else {
                virtualMFADevices = []
            }
        } else {
            virtualMFADevices = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension IamClientTypes.LoginProfile: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createDate = "CreateDate"
        case passwordResetRequired = "PasswordResetRequired"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if passwordResetRequired != false {
            try container.encode(passwordResetRequired, forKey: ClientRuntime.Key("PasswordResetRequired"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let passwordResetRequiredDecoded = try containerValues.decode(Swift.Bool.self, forKey: .passwordResetRequired)
        passwordResetRequired = passwordResetRequiredDecoded
    }
}

extension IamClientTypes.LoginProfile: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoginProfile(createDate: \(Swift.String(describing: createDate)), passwordResetRequired: \(Swift.String(describing: passwordResetRequired)), userName: \(Swift.String(describing: userName)))"}
}

extension IamClientTypes {
    /// Contains the user name and password create date for a user. This data type is used as a response element in the [CreateLoginProfile] and [GetLoginProfile] operations.
    public struct LoginProfile: Swift.Equatable {
        /// The date when the password for the user was created.
        /// This member is required.
        public var createDate: ClientRuntime.Date?
        /// Specifies whether the user is required to set a new password on next sign-in.
        public var passwordResetRequired: Swift.Bool
        /// The name of the user, which can be used for signing in to the Amazon Web Services Management Console.
        /// This member is required.
        public var userName: Swift.String?

        public init (
            createDate: ClientRuntime.Date? = nil,
            passwordResetRequired: Swift.Bool = false,
            userName: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.passwordResetRequired = passwordResetRequired
            self.userName = userName
        }
    }

}

extension IamClientTypes.MFADevice: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableDate = "EnableDate"
        case serialNumber = "SerialNumber"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enableDate = enableDate {
            try container.encode(ClientRuntime.TimestampWrapper(enableDate, format: .dateTime), forKey: ClientRuntime.Key("enableDate"))
        }
        if let serialNumber = serialNumber {
            try container.encode(serialNumber, forKey: ClientRuntime.Key("SerialNumber"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let enableDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enableDate)
        var enableDateBuffer:ClientRuntime.Date? = nil
        if let enableDateDecoded = enableDateDecoded {
            enableDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(enableDateDecoded, format: .dateTime)
        }
        enableDate = enableDateBuffer
    }
}

extension IamClientTypes.MFADevice: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MFADevice(enableDate: \(Swift.String(describing: enableDate)), serialNumber: \(Swift.String(describing: serialNumber)), userName: \(Swift.String(describing: userName)))"}
}

extension IamClientTypes {
    /// Contains information about an MFA device. This data type is used as a response element in the [ListMFADevices] operation.
    public struct MFADevice: Swift.Equatable {
        /// The date when the MFA device was enabled for the user.
        /// This member is required.
        public var enableDate: ClientRuntime.Date?
        /// The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.
        /// This member is required.
        public var serialNumber: Swift.String?
        /// The user with whom the MFA device is associated.
        /// This member is required.
        public var userName: Swift.String?

        public init (
            enableDate: ClientRuntime.Date? = nil,
            serialNumber: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.enableDate = enableDate
            self.serialNumber = serialNumber
            self.userName = userName
        }
    }

}

extension MalformedCertificateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MalformedCertificateException(message: \(Swift.String(describing: message)))"}
}

extension MalformedCertificateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<MalformedCertificateExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the certificate was malformed or expired. The error message describes the specific error.
public struct MalformedCertificateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MalformedCertificateExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MalformedCertificateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MalformedPolicyDocumentException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MalformedPolicyDocumentException(message: \(Swift.String(describing: message)))"}
}

extension MalformedPolicyDocumentException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<MalformedPolicyDocumentExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the policy document was malformed. The error message describes the specific error.
public struct MalformedPolicyDocumentException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MalformedPolicyDocumentExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MalformedPolicyDocumentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes.ManagedPolicyDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case attachmentCount = "AttachmentCount"
        case createDate = "CreateDate"
        case defaultVersionId = "DefaultVersionId"
        case description = "Description"
        case isAttachable = "IsAttachable"
        case path = "Path"
        case permissionsBoundaryUsageCount = "PermissionsBoundaryUsageCount"
        case policyId = "PolicyId"
        case policyName = "PolicyName"
        case policyVersionList = "PolicyVersionList"
        case updateDate = "UpdateDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let attachmentCount = attachmentCount {
            try container.encode(attachmentCount, forKey: ClientRuntime.Key("AttachmentCount"))
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let defaultVersionId = defaultVersionId {
            try container.encode(defaultVersionId, forKey: ClientRuntime.Key("DefaultVersionId"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if isAttachable != false {
            try container.encode(isAttachable, forKey: ClientRuntime.Key("IsAttachable"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let permissionsBoundaryUsageCount = permissionsBoundaryUsageCount {
            try container.encode(permissionsBoundaryUsageCount, forKey: ClientRuntime.Key("PermissionsBoundaryUsageCount"))
        }
        if let policyId = policyId {
            try container.encode(policyId, forKey: ClientRuntime.Key("PolicyId"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let policyVersionList = policyVersionList {
            var policyVersionListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyVersionList"))
            for (index0, policyversion0) in policyVersionList.enumerated() {
                try policyVersionListContainer.encode(policyversion0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let updateDate = updateDate {
            try container.encode(ClientRuntime.TimestampWrapper(updateDate, format: .dateTime), forKey: ClientRuntime.Key("updateDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let attachmentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .attachmentCount)
        attachmentCount = attachmentCountDecoded
        let permissionsBoundaryUsageCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .permissionsBoundaryUsageCount)
        permissionsBoundaryUsageCount = permissionsBoundaryUsageCountDecoded
        let isAttachableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isAttachable)
        isAttachable = isAttachableDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let updateDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateDate)
        var updateDateBuffer:ClientRuntime.Date? = nil
        if let updateDateDecoded = updateDateDecoded {
            updateDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(updateDateDecoded, format: .dateTime)
        }
        updateDate = updateDateBuffer
        if containerValues.contains(.policyVersionList) {
            struct KeyVal0{struct member{}}
            let policyVersionListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyVersionList)
            if let policyVersionListWrappedContainer = policyVersionListWrappedContainer {
                let policyVersionListContainer = try policyVersionListWrappedContainer.decodeIfPresent([IamClientTypes.PolicyVersion].self, forKey: .member)
                var policyVersionListBuffer:[IamClientTypes.PolicyVersion]? = nil
                if let policyVersionListContainer = policyVersionListContainer {
                    policyVersionListBuffer = [IamClientTypes.PolicyVersion]()
                    for structureContainer0 in policyVersionListContainer {
                        policyVersionListBuffer?.append(structureContainer0)
                    }
                }
                policyVersionList = policyVersionListBuffer
            } else {
                policyVersionList = []
            }
        } else {
            policyVersionList = nil
        }
    }
}

extension IamClientTypes.ManagedPolicyDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ManagedPolicyDetail(arn: \(Swift.String(describing: arn)), attachmentCount: \(Swift.String(describing: attachmentCount)), createDate: \(Swift.String(describing: createDate)), defaultVersionId: \(Swift.String(describing: defaultVersionId)), description: \(Swift.String(describing: description)), isAttachable: \(Swift.String(describing: isAttachable)), path: \(Swift.String(describing: path)), permissionsBoundaryUsageCount: \(Swift.String(describing: permissionsBoundaryUsageCount)), policyId: \(Swift.String(describing: policyId)), policyName: \(Swift.String(describing: policyName)), policyVersionList: \(Swift.String(describing: policyVersionList)), updateDate: \(Swift.String(describing: updateDate)))"}
}

extension IamClientTypes {
    /// Contains information about a managed policy, including the policy's ARN, versions, and the number of principal entities (users, groups, and roles) that the policy is attached to. This data type is used as a response element in the [GetAccountAuthorizationDetails] operation. For more information about managed policies, see [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the IAM User Guide.
    public struct ManagedPolicyDetail: Swift.Equatable {
        /// The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources. For more information about ARNs, go to [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The number of principal entities (users, groups, and roles) that the policy is attached to.
        public var attachmentCount: Swift.Int?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the policy was created.
        public var createDate: ClientRuntime.Date?
        /// The identifier for the version of the policy that is set as the default (operative) version. For more information about policy versions, see [Versioning for managed policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html) in the IAM User Guide.
        public var defaultVersionId: Swift.String?
        /// A friendly description of the policy.
        public var description: Swift.String?
        /// Specifies whether the policy can be attached to an IAM user, group, or role.
        public var isAttachable: Swift.Bool
        /// The path to the policy. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        public var path: Swift.String?
        /// The number of entities (users and roles) for which the policy is used as the permissions boundary. For more information about permissions boundaries, see [Permissions boundaries for IAM identities ](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the IAM User Guide.
        public var permissionsBoundaryUsageCount: Swift.Int?
        /// The stable and unique string identifying the policy. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        public var policyId: Swift.String?
        /// The friendly name (not ARN) identifying the policy.
        public var policyName: Swift.String?
        /// A list containing information about the versions of the policy.
        public var policyVersionList: [IamClientTypes.PolicyVersion]?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the policy was last updated. When a policy has only one version, this field contains the date and time when the policy was created. When a policy has more than one version, this field contains the date and time when the most recent policy version was created.
        public var updateDate: ClientRuntime.Date?

        public init (
            arn: Swift.String? = nil,
            attachmentCount: Swift.Int? = nil,
            createDate: ClientRuntime.Date? = nil,
            defaultVersionId: Swift.String? = nil,
            description: Swift.String? = nil,
            isAttachable: Swift.Bool = false,
            path: Swift.String? = nil,
            permissionsBoundaryUsageCount: Swift.Int? = nil,
            policyId: Swift.String? = nil,
            policyName: Swift.String? = nil,
            policyVersionList: [IamClientTypes.PolicyVersion]? = nil,
            updateDate: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.attachmentCount = attachmentCount
            self.createDate = createDate
            self.defaultVersionId = defaultVersionId
            self.description = description
            self.isAttachable = isAttachable
            self.path = path
            self.permissionsBoundaryUsageCount = permissionsBoundaryUsageCount
            self.policyId = policyId
            self.policyName = policyName
            self.policyVersionList = policyVersionList
            self.updateDate = updateDate
        }
    }

}

extension NoSuchEntityException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchEntityException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchEntityException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<NoSuchEntityExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.
public struct NoSuchEntityException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchEntityExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchEntityExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes.OpenIDConnectProviderListEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension IamClientTypes.OpenIDConnectProviderListEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OpenIDConnectProviderListEntry(arn: \(Swift.String(describing: arn)))"}
}

extension IamClientTypes {
    /// Contains the Amazon Resource Name (ARN) for an IAM OpenID Connect provider.
    public struct OpenIDConnectProviderListEntry: Swift.Equatable {
        /// The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources. For more information about ARNs, go to [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension IamClientTypes.OrganizationsDecisionDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedByOrganizations = "AllowedByOrganizations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if allowedByOrganizations != false {
            try container.encode(allowedByOrganizations, forKey: ClientRuntime.Key("AllowedByOrganizations"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedByOrganizationsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowedByOrganizations)
        allowedByOrganizations = allowedByOrganizationsDecoded
    }
}

extension IamClientTypes.OrganizationsDecisionDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationsDecisionDetail(allowedByOrganizations: \(Swift.String(describing: allowedByOrganizations)))"}
}

extension IamClientTypes {
    /// Contains information about the effect that Organizations has on a policy simulation.
    public struct OrganizationsDecisionDetail: Swift.Equatable {
        /// Specifies whether the simulated operation is allowed by the Organizations service control policies that impact the simulated user's account.
        public var allowedByOrganizations: Swift.Bool

        public init (
            allowedByOrganizations: Swift.Bool = false
        )
        {
            self.allowedByOrganizations = allowedByOrganizations
        }
    }

}

extension IamClientTypes.PasswordPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowUsersToChangePassword = "AllowUsersToChangePassword"
        case expirePasswords = "ExpirePasswords"
        case hardExpiry = "HardExpiry"
        case maxPasswordAge = "MaxPasswordAge"
        case minimumPasswordLength = "MinimumPasswordLength"
        case passwordReusePrevention = "PasswordReusePrevention"
        case requireLowercaseCharacters = "RequireLowercaseCharacters"
        case requireNumbers = "RequireNumbers"
        case requireSymbols = "RequireSymbols"
        case requireUppercaseCharacters = "RequireUppercaseCharacters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if allowUsersToChangePassword != false {
            try container.encode(allowUsersToChangePassword, forKey: ClientRuntime.Key("AllowUsersToChangePassword"))
        }
        if expirePasswords != false {
            try container.encode(expirePasswords, forKey: ClientRuntime.Key("ExpirePasswords"))
        }
        if let hardExpiry = hardExpiry {
            try container.encode(hardExpiry, forKey: ClientRuntime.Key("HardExpiry"))
        }
        if let maxPasswordAge = maxPasswordAge {
            try container.encode(maxPasswordAge, forKey: ClientRuntime.Key("MaxPasswordAge"))
        }
        if let minimumPasswordLength = minimumPasswordLength {
            try container.encode(minimumPasswordLength, forKey: ClientRuntime.Key("MinimumPasswordLength"))
        }
        if let passwordReusePrevention = passwordReusePrevention {
            try container.encode(passwordReusePrevention, forKey: ClientRuntime.Key("PasswordReusePrevention"))
        }
        if requireLowercaseCharacters != false {
            try container.encode(requireLowercaseCharacters, forKey: ClientRuntime.Key("RequireLowercaseCharacters"))
        }
        if requireNumbers != false {
            try container.encode(requireNumbers, forKey: ClientRuntime.Key("RequireNumbers"))
        }
        if requireSymbols != false {
            try container.encode(requireSymbols, forKey: ClientRuntime.Key("RequireSymbols"))
        }
        if requireUppercaseCharacters != false {
            try container.encode(requireUppercaseCharacters, forKey: ClientRuntime.Key("RequireUppercaseCharacters"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumPasswordLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumPasswordLength)
        minimumPasswordLength = minimumPasswordLengthDecoded
        let requireSymbolsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .requireSymbols)
        requireSymbols = requireSymbolsDecoded
        let requireNumbersDecoded = try containerValues.decode(Swift.Bool.self, forKey: .requireNumbers)
        requireNumbers = requireNumbersDecoded
        let requireUppercaseCharactersDecoded = try containerValues.decode(Swift.Bool.self, forKey: .requireUppercaseCharacters)
        requireUppercaseCharacters = requireUppercaseCharactersDecoded
        let requireLowercaseCharactersDecoded = try containerValues.decode(Swift.Bool.self, forKey: .requireLowercaseCharacters)
        requireLowercaseCharacters = requireLowercaseCharactersDecoded
        let allowUsersToChangePasswordDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowUsersToChangePassword)
        allowUsersToChangePassword = allowUsersToChangePasswordDecoded
        let expirePasswordsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .expirePasswords)
        expirePasswords = expirePasswordsDecoded
        let maxPasswordAgeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPasswordAge)
        maxPasswordAge = maxPasswordAgeDecoded
        let passwordReusePreventionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .passwordReusePrevention)
        passwordReusePrevention = passwordReusePreventionDecoded
        let hardExpiryDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hardExpiry)
        hardExpiry = hardExpiryDecoded
    }
}

extension IamClientTypes.PasswordPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PasswordPolicy(allowUsersToChangePassword: \(Swift.String(describing: allowUsersToChangePassword)), expirePasswords: \(Swift.String(describing: expirePasswords)), hardExpiry: \(Swift.String(describing: hardExpiry)), maxPasswordAge: \(Swift.String(describing: maxPasswordAge)), minimumPasswordLength: \(Swift.String(describing: minimumPasswordLength)), passwordReusePrevention: \(Swift.String(describing: passwordReusePrevention)), requireLowercaseCharacters: \(Swift.String(describing: requireLowercaseCharacters)), requireNumbers: \(Swift.String(describing: requireNumbers)), requireSymbols: \(Swift.String(describing: requireSymbols)), requireUppercaseCharacters: \(Swift.String(describing: requireUppercaseCharacters)))"}
}

extension IamClientTypes {
    /// Contains information about the account password policy. This data type is used as a response element in the [GetAccountPasswordPolicy] operation.
    public struct PasswordPolicy: Swift.Equatable {
        /// Specifies whether IAM users are allowed to change their own password.
        public var allowUsersToChangePassword: Swift.Bool
        /// Indicates whether passwords in the account expire. Returns true if MaxPasswordAge contains a value greater than 0. Returns false if MaxPasswordAge is 0 or not present.
        public var expirePasswords: Swift.Bool
        /// Specifies whether IAM users are prevented from setting a new password after their password has expired.
        public var hardExpiry: Swift.Bool?
        /// The number of days that an IAM user password is valid.
        public var maxPasswordAge: Swift.Int?
        /// Minimum length to require for IAM user passwords.
        public var minimumPasswordLength: Swift.Int?
        /// Specifies the number of previous passwords that IAM users are prevented from reusing.
        public var passwordReusePrevention: Swift.Int?
        /// Specifies whether IAM user passwords must contain at least one lowercase character (a to z).
        public var requireLowercaseCharacters: Swift.Bool
        /// Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).
        public var requireNumbers: Swift.Bool
        /// Specifies whether IAM user passwords must contain at least one of the following symbols: ! @ # $ % ^ & * ( ) _ + - = [ ] { } | '
        public var requireSymbols: Swift.Bool
        /// Specifies whether IAM user passwords must contain at least one uppercase character (A to Z).
        public var requireUppercaseCharacters: Swift.Bool

        public init (
            allowUsersToChangePassword: Swift.Bool = false,
            expirePasswords: Swift.Bool = false,
            hardExpiry: Swift.Bool? = nil,
            maxPasswordAge: Swift.Int? = nil,
            minimumPasswordLength: Swift.Int? = nil,
            passwordReusePrevention: Swift.Int? = nil,
            requireLowercaseCharacters: Swift.Bool = false,
            requireNumbers: Swift.Bool = false,
            requireSymbols: Swift.Bool = false,
            requireUppercaseCharacters: Swift.Bool = false
        )
        {
            self.allowUsersToChangePassword = allowUsersToChangePassword
            self.expirePasswords = expirePasswords
            self.hardExpiry = hardExpiry
            self.maxPasswordAge = maxPasswordAge
            self.minimumPasswordLength = minimumPasswordLength
            self.passwordReusePrevention = passwordReusePrevention
            self.requireLowercaseCharacters = requireLowercaseCharacters
            self.requireNumbers = requireNumbers
            self.requireSymbols = requireSymbols
            self.requireUppercaseCharacters = requireUppercaseCharacters
        }
    }

}

extension PasswordPolicyViolationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PasswordPolicyViolationException(message: \(Swift.String(describing: message)))"}
}

extension PasswordPolicyViolationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<PasswordPolicyViolationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the provided password did not meet the requirements imposed by the account password policy.
public struct PasswordPolicyViolationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PasswordPolicyViolationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension PasswordPolicyViolationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes {
    public enum PermissionsBoundaryAttachmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case policy
        case sdkUnknown(Swift.String)

        public static var allCases: [PermissionsBoundaryAttachmentType] {
            return [
                .policy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .policy: return "PermissionsBoundaryPolicy"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PermissionsBoundaryAttachmentType(rawValue: rawValue) ?? PermissionsBoundaryAttachmentType.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes.PermissionsBoundaryDecisionDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedByPermissionsBoundary = "AllowedByPermissionsBoundary"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if allowedByPermissionsBoundary != false {
            try container.encode(allowedByPermissionsBoundary, forKey: ClientRuntime.Key("AllowedByPermissionsBoundary"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedByPermissionsBoundaryDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowedByPermissionsBoundary)
        allowedByPermissionsBoundary = allowedByPermissionsBoundaryDecoded
    }
}

extension IamClientTypes.PermissionsBoundaryDecisionDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PermissionsBoundaryDecisionDetail(allowedByPermissionsBoundary: \(Swift.String(describing: allowedByPermissionsBoundary)))"}
}

extension IamClientTypes {
    /// Contains information about the effect that a permissions boundary has on a policy simulation when the boundary is applied to an IAM entity.
    public struct PermissionsBoundaryDecisionDetail: Swift.Equatable {
        /// Specifies whether an action is allowed by a permissions boundary that is applied to an IAM entity (user or role). A value of true means that the permissions boundary does not deny the action. This means that the policy includes an Allow statement that matches the request. In this case, if an identity-based policy also allows the action, the request is allowed. A value of false means that either the requested action is not allowed (implicitly denied) or that the action is explicitly denied by the permissions boundary. In both of these cases, the action is not allowed, regardless of the identity-based policy.
        public var allowedByPermissionsBoundary: Swift.Bool

        public init (
            allowedByPermissionsBoundary: Swift.Bool = false
        )
        {
            self.allowedByPermissionsBoundary = allowedByPermissionsBoundary
        }
    }

}

extension IamClientTypes.Policy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case attachmentCount = "AttachmentCount"
        case createDate = "CreateDate"
        case defaultVersionId = "DefaultVersionId"
        case description = "Description"
        case isAttachable = "IsAttachable"
        case path = "Path"
        case permissionsBoundaryUsageCount = "PermissionsBoundaryUsageCount"
        case policyId = "PolicyId"
        case policyName = "PolicyName"
        case tags = "Tags"
        case updateDate = "UpdateDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let attachmentCount = attachmentCount {
            try container.encode(attachmentCount, forKey: ClientRuntime.Key("AttachmentCount"))
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let defaultVersionId = defaultVersionId {
            try container.encode(defaultVersionId, forKey: ClientRuntime.Key("DefaultVersionId"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if isAttachable != false {
            try container.encode(isAttachable, forKey: ClientRuntime.Key("IsAttachable"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let permissionsBoundaryUsageCount = permissionsBoundaryUsageCount {
            try container.encode(permissionsBoundaryUsageCount, forKey: ClientRuntime.Key("PermissionsBoundaryUsageCount"))
        }
        if let policyId = policyId {
            try container.encode(policyId, forKey: ClientRuntime.Key("PolicyId"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let updateDate = updateDate {
            try container.encode(ClientRuntime.TimestampWrapper(updateDate, format: .dateTime), forKey: ClientRuntime.Key("updateDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let attachmentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .attachmentCount)
        attachmentCount = attachmentCountDecoded
        let permissionsBoundaryUsageCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .permissionsBoundaryUsageCount)
        permissionsBoundaryUsageCount = permissionsBoundaryUsageCountDecoded
        let isAttachableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isAttachable)
        isAttachable = isAttachableDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let updateDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateDate)
        var updateDateBuffer:ClientRuntime.Date? = nil
        if let updateDateDecoded = updateDateDecoded {
            updateDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(updateDateDecoded, format: .dateTime)
        }
        updateDate = updateDateBuffer
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension IamClientTypes.Policy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Policy(arn: \(Swift.String(describing: arn)), attachmentCount: \(Swift.String(describing: attachmentCount)), createDate: \(Swift.String(describing: createDate)), defaultVersionId: \(Swift.String(describing: defaultVersionId)), description: \(Swift.String(describing: description)), isAttachable: \(Swift.String(describing: isAttachable)), path: \(Swift.String(describing: path)), permissionsBoundaryUsageCount: \(Swift.String(describing: permissionsBoundaryUsageCount)), policyId: \(Swift.String(describing: policyId)), policyName: \(Swift.String(describing: policyName)), tags: \(Swift.String(describing: tags)), updateDate: \(Swift.String(describing: updateDate)))"}
}

extension IamClientTypes {
    /// Contains information about a managed policy. This data type is used as a response element in the [CreatePolicy], [GetPolicy], and [ListPolicies] operations. For more information about managed policies, refer to [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the IAM User Guide.
    public struct Policy: Swift.Equatable {
        /// The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources. For more information about ARNs, go to [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The number of entities (users, groups, and roles) that the policy is attached to.
        public var attachmentCount: Swift.Int?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the policy was created.
        public var createDate: ClientRuntime.Date?
        /// The identifier for the version of the policy that is set as the default version.
        public var defaultVersionId: Swift.String?
        /// A friendly description of the policy. This element is included in the response to the [GetPolicy] operation. It is not included in the response to the [ListPolicies] operation.
        public var description: Swift.String?
        /// Specifies whether the policy can be attached to an IAM user, group, or role.
        public var isAttachable: Swift.Bool
        /// The path to the policy. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        public var path: Swift.String?
        /// The number of entities (users and roles) for which the policy is used to set the permissions boundary. For more information about permissions boundaries, see [Permissions boundaries for IAM identities ](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the IAM User Guide.
        public var permissionsBoundaryUsageCount: Swift.Int?
        /// The stable and unique string identifying the policy. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        public var policyId: Swift.String?
        /// The friendly name (not ARN) identifying the policy.
        public var policyName: Swift.String?
        /// A list of tags that are attached to the instance profile. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
        public var tags: [IamClientTypes.Tag]?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the policy was last updated. When a policy has only one version, this field contains the date and time when the policy was created. When a policy has more than one version, this field contains the date and time when the most recent policy version was created.
        public var updateDate: ClientRuntime.Date?

        public init (
            arn: Swift.String? = nil,
            attachmentCount: Swift.Int? = nil,
            createDate: ClientRuntime.Date? = nil,
            defaultVersionId: Swift.String? = nil,
            description: Swift.String? = nil,
            isAttachable: Swift.Bool = false,
            path: Swift.String? = nil,
            permissionsBoundaryUsageCount: Swift.Int? = nil,
            policyId: Swift.String? = nil,
            policyName: Swift.String? = nil,
            tags: [IamClientTypes.Tag]? = nil,
            updateDate: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.attachmentCount = attachmentCount
            self.createDate = createDate
            self.defaultVersionId = defaultVersionId
            self.description = description
            self.isAttachable = isAttachable
            self.path = path
            self.permissionsBoundaryUsageCount = permissionsBoundaryUsageCount
            self.policyId = policyId
            self.policyName = policyName
            self.tags = tags
            self.updateDate = updateDate
        }
    }

}

extension IamClientTypes.PolicyDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument = "PolicyDocument"
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyDocument = policyDocument {
            try container.encode(policyDocument, forKey: ClientRuntime.Key("PolicyDocument"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension IamClientTypes.PolicyDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyDetail(policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)))"}
}

extension IamClientTypes {
    /// Contains information about an IAM policy, including the policy document. This data type is used as a response element in the [GetAccountAuthorizationDetails] operation.
    public struct PolicyDetail: Swift.Equatable {
        /// The policy document.
        public var policyDocument: Swift.String?
        /// The name of the policy.
        public var policyName: Swift.String?

        public init (
            policyDocument: Swift.String? = nil,
            policyName: Swift.String? = nil
        )
        {
            self.policyDocument = policyDocument
            self.policyName = policyName
        }
    }

}

extension IamClientTypes {
    public enum PolicyEvaluationDecisionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allowed
        case explicitDeny
        case implicitDeny
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyEvaluationDecisionType] {
            return [
                .allowed,
                .explicitDeny,
                .implicitDeny,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allowed: return "allowed"
            case .explicitDeny: return "explicitDeny"
            case .implicitDeny: return "implicitDeny"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyEvaluationDecisionType(rawValue: rawValue) ?? PolicyEvaluationDecisionType.sdkUnknown(rawValue)
        }
    }
}

extension PolicyEvaluationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyEvaluationException(message: \(Swift.String(describing: message)))"}
}

extension PolicyEvaluationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<PolicyEvaluationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request failed because a provided policy could not be successfully evaluated. An additional detailed message indicates the source of the failure.
public struct PolicyEvaluationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyEvaluationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension PolicyEvaluationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes.PolicyGrantingServiceAccess: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityName = "EntityName"
        case entityType = "EntityType"
        case policyArn = "PolicyArn"
        case policyName = "PolicyName"
        case policyType = "PolicyType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let entityName = entityName {
            try container.encode(entityName, forKey: ClientRuntime.Key("EntityName"))
        }
        if let entityType = entityType {
            try container.encode(entityType, forKey: ClientRuntime.Key("EntityType"))
        }
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let policyType = policyType {
            try container.encode(policyType, forKey: ClientRuntime.Key("PolicyType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(IamClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let entityTypeDecoded = try containerValues.decodeIfPresent(IamClientTypes.PolicyOwnerEntityType.self, forKey: .entityType)
        entityType = entityTypeDecoded
        let entityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityName)
        entityName = entityNameDecoded
    }
}

extension IamClientTypes.PolicyGrantingServiceAccess: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyGrantingServiceAccess(entityName: \(Swift.String(describing: entityName)), entityType: \(Swift.String(describing: entityType)), policyArn: \(Swift.String(describing: policyArn)), policyName: \(Swift.String(describing: policyName)), policyType: \(Swift.String(describing: policyType)))"}
}

extension IamClientTypes {
    /// Contains details about the permissions policies that are attached to the specified identity (user, group, or role). This data type is an element of the [ListPoliciesGrantingServiceAccessEntry] object.
    public struct PolicyGrantingServiceAccess: Swift.Equatable {
        /// The name of the entity (user or role) to which the inline policy is attached. This field is null for managed policies. For more information about these policy types, see [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html) in the IAM User Guide.
        public var entityName: Swift.String?
        /// The type of entity (user or role) that used the policy to access the service to which the inline policy is attached. This field is null for managed policies. For more information about these policy types, see [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html) in the IAM User Guide.
        public var entityType: IamClientTypes.PolicyOwnerEntityType?
        /// The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources. For more information about ARNs, go to [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var policyArn: Swift.String?
        /// The policy name.
        /// This member is required.
        public var policyName: Swift.String?
        /// The policy type. For more information about these policy types, see [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html) in the IAM User Guide.
        /// This member is required.
        public var policyType: IamClientTypes.PolicyType?

        public init (
            entityName: Swift.String? = nil,
            entityType: IamClientTypes.PolicyOwnerEntityType? = nil,
            policyArn: Swift.String? = nil,
            policyName: Swift.String? = nil,
            policyType: IamClientTypes.PolicyType? = nil
        )
        {
            self.entityName = entityName
            self.entityType = entityType
            self.policyArn = policyArn
            self.policyName = policyName
            self.policyType = policyType
        }
    }

}

extension IamClientTypes.PolicyGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupId = "GroupId"
        case groupName = "GroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupId = groupId {
            try container.encode(groupId, forKey: ClientRuntime.Key("GroupId"))
        }
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
    }
}

extension IamClientTypes.PolicyGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyGroup(groupId: \(Swift.String(describing: groupId)), groupName: \(Swift.String(describing: groupName)))"}
}

extension IamClientTypes {
    /// Contains information about a group that a managed policy is attached to. This data type is used as a response element in the [ListEntitiesForPolicy] operation. For more information about managed policies, refer to [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the IAM User Guide.
    public struct PolicyGroup: Swift.Equatable {
        /// The stable and unique string identifying the group. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html) in the IAM User Guide.
        public var groupId: Swift.String?
        /// The name (friendly name, not ARN) identifying the group.
        public var groupName: Swift.String?

        public init (
            groupId: Swift.String? = nil,
            groupName: Swift.String? = nil
        )
        {
            self.groupId = groupId
            self.groupName = groupName
        }
    }

}

extension PolicyNotAttachableException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyNotAttachableException(message: \(Swift.String(describing: message)))"}
}

extension PolicyNotAttachableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<PolicyNotAttachableExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request failed because Amazon Web Services service role policies can only be attached to the service-linked role for that service.
public struct PolicyNotAttachableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyNotAttachableExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension PolicyNotAttachableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes {
    public enum PolicyOwnerEntityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case group
        case role
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyOwnerEntityType] {
            return [
                .group,
                .role,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .role: return "ROLE"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyOwnerEntityType(rawValue: rawValue) ?? PolicyOwnerEntityType.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes.PolicyRole: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleId = "RoleId"
        case roleName = "RoleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let roleId = roleId {
            try container.encode(roleId, forKey: ClientRuntime.Key("RoleId"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let roleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleId)
        roleId = roleIdDecoded
    }
}

extension IamClientTypes.PolicyRole: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyRole(roleId: \(Swift.String(describing: roleId)), roleName: \(Swift.String(describing: roleName)))"}
}

extension IamClientTypes {
    /// Contains information about a role that a managed policy is attached to. This data type is used as a response element in the [ListEntitiesForPolicy] operation. For more information about managed policies, refer to [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the IAM User Guide.
    public struct PolicyRole: Swift.Equatable {
        /// The stable and unique string identifying the role. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html) in the IAM User Guide.
        public var roleId: Swift.String?
        /// The name (friendly name, not ARN) identifying the role.
        public var roleName: Swift.String?

        public init (
            roleId: Swift.String? = nil,
            roleName: Swift.String? = nil
        )
        {
            self.roleId = roleId
            self.roleName = roleName
        }
    }

}

extension IamClientTypes {
    public enum PolicyScopeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aws
        case all
        case local
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyScopeType] {
            return [
                .aws,
                .all,
                .local,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aws: return "AWS"
            case .all: return "All"
            case .local: return "Local"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyScopeType(rawValue: rawValue) ?? PolicyScopeType.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes {
    public enum PolicySourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsManaged
        case group
        case `none`
        case resource
        case role
        case user
        case userManaged
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicySourceType] {
            return [
                .awsManaged,
                .group,
                .none,
                .resource,
                .role,
                .user,
                .userManaged,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsManaged: return "aws-managed"
            case .group: return "group"
            case .none: return "none"
            case .resource: return "resource"
            case .role: return "role"
            case .user: return "user"
            case .userManaged: return "user-managed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicySourceType(rawValue: rawValue) ?? PolicySourceType.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes {
    public enum PolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case inline
        case managed
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyType] {
            return [
                .inline,
                .managed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .inline: return "INLINE"
            case .managed: return "MANAGED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyType(rawValue: rawValue) ?? PolicyType.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes {
    /// The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity. For more information about permissions boundaries, see [Permissions boundaries for IAM identities ](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the IAM User Guide.
    public enum PolicyUsageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case permissionsboundary
        case permissionspolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyUsageType] {
            return [
                .permissionsboundary,
                .permissionspolicy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .permissionsboundary: return "PermissionsBoundary"
            case .permissionspolicy: return "PermissionsPolicy"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyUsageType(rawValue: rawValue) ?? PolicyUsageType.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes.PolicyUser: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userId = "UserId"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userId = userId {
            try container.encode(userId, forKey: ClientRuntime.Key("UserId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
    }
}

extension IamClientTypes.PolicyUser: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyUser(userId: \(Swift.String(describing: userId)), userName: \(Swift.String(describing: userName)))"}
}

extension IamClientTypes {
    /// Contains information about a user that a managed policy is attached to. This data type is used as a response element in the [ListEntitiesForPolicy] operation. For more information about managed policies, refer to [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the IAM User Guide.
    public struct PolicyUser: Swift.Equatable {
        /// The stable and unique string identifying the user. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html) in the IAM User Guide.
        public var userId: Swift.String?
        /// The name (friendly name, not ARN) identifying the user.
        public var userName: Swift.String?

        public init (
            userId: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.userId = userId
            self.userName = userName
        }
    }

}

extension IamClientTypes.PolicyVersion: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createDate = "CreateDate"
        case document = "Document"
        case isDefaultVersion = "IsDefaultVersion"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let document = document {
            try container.encode(document, forKey: ClientRuntime.Key("Document"))
        }
        if isDefaultVersion != false {
            try container.encode(isDefaultVersion, forKey: ClientRuntime.Key("IsDefaultVersion"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .document)
        document = documentDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
    }
}

extension IamClientTypes.PolicyVersion: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyVersion(createDate: \(Swift.String(describing: createDate)), document: \(Swift.String(describing: document)), isDefaultVersion: \(Swift.String(describing: isDefaultVersion)), versionId: \(Swift.String(describing: versionId)))"}
}

extension IamClientTypes {
    /// Contains information about a version of a managed policy. This data type is used as a response element in the [CreatePolicyVersion], [GetPolicyVersion], [ListPolicyVersions], and [GetAccountAuthorizationDetails] operations. For more information about managed policies, refer to [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the IAM User Guide.
    public struct PolicyVersion: Swift.Equatable {
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the policy version was created.
        public var createDate: ClientRuntime.Date?
        /// The policy document. The policy document is returned in the response to the [GetPolicyVersion] and [GetAccountAuthorizationDetails] operations. It is not returned in the response to the [CreatePolicyVersion] or [ListPolicyVersions] operations. The policy document returned in this structure is URL-encoded compliant with [RFC 3986](https://tools.ietf.org/html/rfc3986). You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the decode method of the java.net.URLDecoder utility class in the Java SDK. Other languages and SDKs provide similar functionality.
        public var document: Swift.String?
        /// Specifies whether the policy version is set as the policy's default version.
        public var isDefaultVersion: Swift.Bool
        /// The identifier for the policy version. Policy version identifiers always begin with v (always lowercase). When a policy is created, the first policy version is v1.
        public var versionId: Swift.String?

        public init (
            createDate: ClientRuntime.Date? = nil,
            document: Swift.String? = nil,
            isDefaultVersion: Swift.Bool = false,
            versionId: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.document = document
            self.isDefaultVersion = isDefaultVersion
            self.versionId = versionId
        }
    }

}

extension IamClientTypes.Position: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case column = "Column"
        case line = "Line"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if column != 0 {
            try container.encode(column, forKey: ClientRuntime.Key("Column"))
        }
        if line != 0 {
            try container.encode(line, forKey: ClientRuntime.Key("Line"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineDecoded = try containerValues.decode(Swift.Int.self, forKey: .line)
        line = lineDecoded
        let columnDecoded = try containerValues.decode(Swift.Int.self, forKey: .column)
        column = columnDecoded
    }
}

extension IamClientTypes.Position: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Position(column: \(Swift.String(describing: column)), line: \(Swift.String(describing: line)))"}
}

extension IamClientTypes {
    /// Contains the row and column of a location of a Statement element in a policy document. This data type is used as a member of the [Statement] type.
    public struct Position: Swift.Equatable {
        /// The column in the line containing the specified position in the document.
        public var column: Swift.Int
        /// The line containing the specified position in the document.
        public var line: Swift.Int

        public init (
            column: Swift.Int = 0,
            line: Swift.Int = 0
        )
        {
            self.column = column
            self.line = line
        }
    }

}

extension PutGroupPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutGroupPolicyInput(groupName: \(Swift.String(describing: groupName)), policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)))"}
}

extension PutGroupPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let policyDocument = policyDocument {
            try container.encode(policyDocument, forKey: ClientRuntime.Key("PolicyDocument"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("PutGroupPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutGroupPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutGroupPolicyInput: Swift.Equatable {
    /// The name of the group to associate the policy with. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.
    /// This member is required.
    public var groupName: Swift.String?
    /// The policy document. You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to = IAM. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var policyDocument: Swift.String?
    /// The name of the policy document. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.policyDocument = policyDocument
        self.policyName = policyName
    }
}

extension PutGroupPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutGroupPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocument" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutGroupPolicyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutGroupPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutGroupPolicyOutputResponse()"}
}

extension PutGroupPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutGroupPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutGroupPolicyOutputResponseBody: Swift.Equatable {
}

extension PutGroupPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension PutRolePermissionsBoundaryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutRolePermissionsBoundaryInput(permissionsBoundary: \(Swift.String(describing: permissionsBoundary)), roleName: \(Swift.String(describing: roleName)))"}
}

extension PutRolePermissionsBoundaryInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let permissionsBoundary = permissionsBoundary {
            try container.encode(permissionsBoundary, forKey: ClientRuntime.Key("PermissionsBoundary"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("PutRolePermissionsBoundary", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutRolePermissionsBoundaryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutRolePermissionsBoundaryInput: Swift.Equatable {
    /// The ARN of the policy that is used to set the permissions boundary for the role.
    /// This member is required.
    public var permissionsBoundary: Swift.String?
    /// The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        permissionsBoundary: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.permissionsBoundary = permissionsBoundary
        self.roleName = roleName
    }
}

extension PutRolePermissionsBoundaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutRolePermissionsBoundaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotAttachable" : self = .policyNotAttachableException(try PolicyNotAttachableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutRolePermissionsBoundaryOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case policyNotAttachableException(PolicyNotAttachableException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRolePermissionsBoundaryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutRolePermissionsBoundaryOutputResponse()"}
}

extension PutRolePermissionsBoundaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutRolePermissionsBoundaryOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutRolePermissionsBoundaryOutputResponseBody: Swift.Equatable {
}

extension PutRolePermissionsBoundaryOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension PutRolePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutRolePolicyInput(policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)), roleName: \(Swift.String(describing: roleName)))"}
}

extension PutRolePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyDocument = policyDocument {
            try container.encode(policyDocument, forKey: ClientRuntime.Key("PolicyDocument"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("PutRolePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutRolePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutRolePolicyInput: Swift.Equatable {
    /// The policy document. You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var policyDocument: Swift.String?
    /// The name of the policy document. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyName: Swift.String?
    /// The name of the role to associate the policy with. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.roleName = roleName
    }
}

extension PutRolePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutRolePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocument" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutRolePolicyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRolePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutRolePolicyOutputResponse()"}
}

extension PutRolePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutRolePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutRolePolicyOutputResponseBody: Swift.Equatable {
}

extension PutRolePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension PutUserPermissionsBoundaryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutUserPermissionsBoundaryInput(permissionsBoundary: \(Swift.String(describing: permissionsBoundary)), userName: \(Swift.String(describing: userName)))"}
}

extension PutUserPermissionsBoundaryInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let permissionsBoundary = permissionsBoundary {
            try container.encode(permissionsBoundary, forKey: ClientRuntime.Key("PermissionsBoundary"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("PutUserPermissionsBoundary", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutUserPermissionsBoundaryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutUserPermissionsBoundaryInput: Swift.Equatable {
    /// The ARN of the policy that is used to set the permissions boundary for the user.
    /// This member is required.
    public var permissionsBoundary: Swift.String?
    /// The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
    /// This member is required.
    public var userName: Swift.String?

    public init (
        permissionsBoundary: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.permissionsBoundary = permissionsBoundary
        self.userName = userName
    }
}

extension PutUserPermissionsBoundaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutUserPermissionsBoundaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotAttachable" : self = .policyNotAttachableException(try PolicyNotAttachableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutUserPermissionsBoundaryOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case policyNotAttachableException(PolicyNotAttachableException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutUserPermissionsBoundaryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutUserPermissionsBoundaryOutputResponse()"}
}

extension PutUserPermissionsBoundaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutUserPermissionsBoundaryOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutUserPermissionsBoundaryOutputResponseBody: Swift.Equatable {
}

extension PutUserPermissionsBoundaryOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension PutUserPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutUserPolicyInput(policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)), userName: \(Swift.String(describing: userName)))"}
}

extension PutUserPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyDocument = policyDocument {
            try container.encode(policyDocument, forKey: ClientRuntime.Key("PolicyDocument"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("PutUserPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutUserPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutUserPolicyInput: Swift.Equatable {
    /// The policy document. You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var policyDocument: Swift.String?
    /// The name of the policy document. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyName: Swift.String?
    /// The name of the user to associate the policy with. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.userName = userName
    }
}

extension PutUserPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutUserPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocument" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutUserPolicyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutUserPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutUserPolicyOutputResponse()"}
}

extension PutUserPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutUserPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutUserPolicyOutputResponseBody: Swift.Equatable {
}

extension PutUserPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension RemoveClientIDFromOpenIDConnectProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveClientIDFromOpenIDConnectProviderInput(clientID: \(Swift.String(describing: clientID)), openIDConnectProviderArn: \(Swift.String(describing: openIDConnectProviderArn)))"}
}

extension RemoveClientIDFromOpenIDConnectProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientID = clientID {
            try container.encode(clientID, forKey: ClientRuntime.Key("ClientID"))
        }
        if let openIDConnectProviderArn = openIDConnectProviderArn {
            try container.encode(openIDConnectProviderArn, forKey: ClientRuntime.Key("OpenIDConnectProviderArn"))
        }
        try container.encode("RemoveClientIDFromOpenIDConnectProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveClientIDFromOpenIDConnectProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RemoveClientIDFromOpenIDConnectProviderInput: Swift.Equatable {
    /// The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see [CreateOpenIDConnectProvider].
    /// This member is required.
    public var clientID: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM OIDC provider resource to remove the client ID from. You can get a list of OIDC provider ARNs by using the [ListOpenIDConnectProviders] operation. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var openIDConnectProviderArn: Swift.String?

    public init (
        clientID: Swift.String? = nil,
        openIDConnectProviderArn: Swift.String? = nil
    )
    {
        self.clientID = clientID
        self.openIDConnectProviderArn = openIDConnectProviderArn
    }
}

extension RemoveClientIDFromOpenIDConnectProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RemoveClientIDFromOpenIDConnectProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveClientIDFromOpenIDConnectProviderOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveClientIDFromOpenIDConnectProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveClientIDFromOpenIDConnectProviderOutputResponse()"}
}

extension RemoveClientIDFromOpenIDConnectProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveClientIDFromOpenIDConnectProviderOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveClientIDFromOpenIDConnectProviderOutputResponseBody: Swift.Equatable {
}

extension RemoveClientIDFromOpenIDConnectProviderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension RemoveRoleFromInstanceProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveRoleFromInstanceProfileInput(instanceProfileName: \(Swift.String(describing: instanceProfileName)), roleName: \(Swift.String(describing: roleName)))"}
}

extension RemoveRoleFromInstanceProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceProfileName = instanceProfileName {
            try container.encode(instanceProfileName, forKey: ClientRuntime.Key("InstanceProfileName"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("RemoveRoleFromInstanceProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveRoleFromInstanceProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RemoveRoleFromInstanceProfileInput: Swift.Equatable {
    /// The name of the instance profile to update. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var instanceProfileName: Swift.String?
    /// The name of the role to remove. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        instanceProfileName: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.instanceProfileName = instanceProfileName
        self.roleName = roleName
    }
}

extension RemoveRoleFromInstanceProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RemoveRoleFromInstanceProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveRoleFromInstanceProfileOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveRoleFromInstanceProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveRoleFromInstanceProfileOutputResponse()"}
}

extension RemoveRoleFromInstanceProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveRoleFromInstanceProfileOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveRoleFromInstanceProfileOutputResponseBody: Swift.Equatable {
}

extension RemoveRoleFromInstanceProfileOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension RemoveUserFromGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveUserFromGroupInput(groupName: \(Swift.String(describing: groupName)), userName: \(Swift.String(describing: userName)))"}
}

extension RemoveUserFromGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("RemoveUserFromGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveUserFromGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RemoveUserFromGroupInput: Swift.Equatable {
    /// The name of the group to update. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var groupName: Swift.String?
    /// The name of the user to remove. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.userName = userName
    }
}

extension RemoveUserFromGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RemoveUserFromGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveUserFromGroupOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveUserFromGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveUserFromGroupOutputResponse()"}
}

extension RemoveUserFromGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveUserFromGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveUserFromGroupOutputResponseBody: Swift.Equatable {
}

extension RemoveUserFromGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IamClientTypes {
    public enum ReportFormatType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case textCsv
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportFormatType] {
            return [
                .textCsv,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .textCsv: return "text/csv"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportFormatType(rawValue: rawValue) ?? ReportFormatType.sdkUnknown(rawValue)
        }
    }
}

extension ReportGenerationLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReportGenerationLimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension ReportGenerationLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ReportGenerationLimitExceededExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request failed because the maximum number of concurrent requests for this account are already running.
public struct ReportGenerationLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ReportGenerationLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ReportGenerationLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes {
    public enum ReportStateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case inprogress
        case started
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportStateType] {
            return [
                .complete,
                .inprogress,
                .started,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .inprogress: return "INPROGRESS"
            case .started: return "STARTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportStateType(rawValue: rawValue) ?? ReportStateType.sdkUnknown(rawValue)
        }
    }
}

extension ResetServiceSpecificCredentialInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResetServiceSpecificCredentialInput(serviceSpecificCredentialId: \(Swift.String(describing: serviceSpecificCredentialId)), userName: \(Swift.String(describing: userName)))"}
}

extension ResetServiceSpecificCredentialInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serviceSpecificCredentialId = serviceSpecificCredentialId {
            try container.encode(serviceSpecificCredentialId, forKey: ClientRuntime.Key("ServiceSpecificCredentialId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("ResetServiceSpecificCredential", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResetServiceSpecificCredentialInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ResetServiceSpecificCredentialInput: Swift.Equatable {
    /// The unique identifier of the service-specific credential. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that can consist of any upper or lowercased letter or digit.
    /// This member is required.
    public var serviceSpecificCredentialId: Swift.String?
    /// The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        serviceSpecificCredentialId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.serviceSpecificCredentialId = serviceSpecificCredentialId
        self.userName = userName
    }
}

extension ResetServiceSpecificCredentialOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ResetServiceSpecificCredentialOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResetServiceSpecificCredentialOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResetServiceSpecificCredentialOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResetServiceSpecificCredentialOutputResponse(serviceSpecificCredential: \(Swift.String(describing: serviceSpecificCredential)))"}
}

extension ResetServiceSpecificCredentialOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResetServiceSpecificCredentialOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serviceSpecificCredential = output.serviceSpecificCredential
        } else {
            self.serviceSpecificCredential = nil
        }
    }
}

public struct ResetServiceSpecificCredentialOutputResponse: Swift.Equatable {
    /// A structure with details about the updated service-specific credential, including the new password. This is the only time that you can access the password. You cannot recover the password later, but you can reset it again.
    public var serviceSpecificCredential: IamClientTypes.ServiceSpecificCredential?

    public init (
        serviceSpecificCredential: IamClientTypes.ServiceSpecificCredential? = nil
    )
    {
        self.serviceSpecificCredential = serviceSpecificCredential
    }
}

struct ResetServiceSpecificCredentialOutputResponseBody: Swift.Equatable {
    public let serviceSpecificCredential: IamClientTypes.ServiceSpecificCredential?
}

extension ResetServiceSpecificCredentialOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceSpecificCredential = "ServiceSpecificCredential"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ResetServiceSpecificCredentialResult"))
        let serviceSpecificCredentialDecoded = try containerValues.decodeIfPresent(IamClientTypes.ServiceSpecificCredential.self, forKey: .serviceSpecificCredential)
        serviceSpecificCredential = serviceSpecificCredentialDecoded
    }
}

extension IamClientTypes.ResourceSpecificResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evalDecisionDetails = "EvalDecisionDetails"
        case evalResourceDecision = "EvalResourceDecision"
        case evalResourceName = "EvalResourceName"
        case matchedStatements = "MatchedStatements"
        case missingContextValues = "MissingContextValues"
        case permissionsBoundaryDecisionDetail = "PermissionsBoundaryDecisionDetail"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let evalDecisionDetails = evalDecisionDetails {
            var evalDecisionDetailsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EvalDecisionDetails"))
            for (index0, element0) in evalDecisionDetails.sorted(by: { $0.key < $1.key }).enumerated() {
                let evaldecisionsourcetypeKey0 = element0.key
                let policyevaluationdecisiontypeValue0 = element0.value
                var entryContainer0 = evalDecisionDetailsContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(evaldecisionsourcetypeKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(policyevaluationdecisiontypeValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let evalResourceDecision = evalResourceDecision {
            try container.encode(evalResourceDecision, forKey: ClientRuntime.Key("EvalResourceDecision"))
        }
        if let evalResourceName = evalResourceName {
            try container.encode(evalResourceName, forKey: ClientRuntime.Key("EvalResourceName"))
        }
        if let matchedStatements = matchedStatements {
            var matchedStatementsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MatchedStatements"))
            for (index0, statement0) in matchedStatements.enumerated() {
                try matchedStatementsContainer.encode(statement0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let missingContextValues = missingContextValues {
            var missingContextValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MissingContextValues"))
            for (index0, contextkeynametype0) in missingContextValues.enumerated() {
                try missingContextValuesContainer.encode(contextkeynametype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let permissionsBoundaryDecisionDetail = permissionsBoundaryDecisionDetail {
            try container.encode(permissionsBoundaryDecisionDetail, forKey: ClientRuntime.Key("PermissionsBoundaryDecisionDetail"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evalResourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evalResourceName)
        evalResourceName = evalResourceNameDecoded
        let evalResourceDecisionDecoded = try containerValues.decodeIfPresent(IamClientTypes.PolicyEvaluationDecisionType.self, forKey: .evalResourceDecision)
        evalResourceDecision = evalResourceDecisionDecoded
        if containerValues.contains(.matchedStatements) {
            struct KeyVal0{struct member{}}
            let matchedStatementsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .matchedStatements)
            if let matchedStatementsWrappedContainer = matchedStatementsWrappedContainer {
                let matchedStatementsContainer = try matchedStatementsWrappedContainer.decodeIfPresent([IamClientTypes.Statement].self, forKey: .member)
                var matchedStatementsBuffer:[IamClientTypes.Statement]? = nil
                if let matchedStatementsContainer = matchedStatementsContainer {
                    matchedStatementsBuffer = [IamClientTypes.Statement]()
                    for structureContainer0 in matchedStatementsContainer {
                        matchedStatementsBuffer?.append(structureContainer0)
                    }
                }
                matchedStatements = matchedStatementsBuffer
            } else {
                matchedStatements = []
            }
        } else {
            matchedStatements = nil
        }
        if containerValues.contains(.missingContextValues) {
            struct KeyVal0{struct member{}}
            let missingContextValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .missingContextValues)
            if let missingContextValuesWrappedContainer = missingContextValuesWrappedContainer {
                let missingContextValuesContainer = try missingContextValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var missingContextValuesBuffer:[Swift.String]? = nil
                if let missingContextValuesContainer = missingContextValuesContainer {
                    missingContextValuesBuffer = [Swift.String]()
                    for stringContainer0 in missingContextValuesContainer {
                        missingContextValuesBuffer?.append(stringContainer0)
                    }
                }
                missingContextValues = missingContextValuesBuffer
            } else {
                missingContextValues = []
            }
        } else {
            missingContextValues = nil
        }
        if containerValues.contains(.evalDecisionDetails) {
            struct KeyVal0{struct key{}; struct value{}}
            let evalDecisionDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, IamClientTypes.PolicyEvaluationDecisionType, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .evalDecisionDetails)
            if let evalDecisionDetailsWrappedContainer = evalDecisionDetailsWrappedContainer {
                let evalDecisionDetailsContainer = try evalDecisionDetailsWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, IamClientTypes.PolicyEvaluationDecisionType, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var evalDecisionDetailsBuffer: [Swift.String:IamClientTypes.PolicyEvaluationDecisionType]? = nil
                if let evalDecisionDetailsContainer = evalDecisionDetailsContainer {
                    evalDecisionDetailsBuffer = [Swift.String:IamClientTypes.PolicyEvaluationDecisionType]()
                    for stringContainer0 in evalDecisionDetailsContainer {
                        evalDecisionDetailsBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                evalDecisionDetails = evalDecisionDetailsBuffer
            } else {
                evalDecisionDetails = [:]
            }
        } else {
            evalDecisionDetails = nil
        }
        let permissionsBoundaryDecisionDetailDecoded = try containerValues.decodeIfPresent(IamClientTypes.PermissionsBoundaryDecisionDetail.self, forKey: .permissionsBoundaryDecisionDetail)
        permissionsBoundaryDecisionDetail = permissionsBoundaryDecisionDetailDecoded
    }
}

extension IamClientTypes.ResourceSpecificResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceSpecificResult(evalDecisionDetails: \(Swift.String(describing: evalDecisionDetails)), evalResourceDecision: \(Swift.String(describing: evalResourceDecision)), evalResourceName: \(Swift.String(describing: evalResourceName)), matchedStatements: \(Swift.String(describing: matchedStatements)), missingContextValues: \(Swift.String(describing: missingContextValues)), permissionsBoundaryDecisionDetail: \(Swift.String(describing: permissionsBoundaryDecisionDetail)))"}
}

extension IamClientTypes {
    /// Contains the result of the simulation of a single API operation call on a single resource. This data type is used by a member of the [EvaluationResult] data type.
    public struct ResourceSpecificResult: Swift.Equatable {
        /// Additional details about the results of the evaluation decision on a single resource. This parameter is returned only for cross-account simulations. This parameter explains how each policy type contributes to the resource-specific evaluation decision.
        public var evalDecisionDetails: [Swift.String:IamClientTypes.PolicyEvaluationDecisionType]?
        /// The result of the simulation of the simulated API operation on the resource specified in EvalResourceName.
        /// This member is required.
        public var evalResourceDecision: IamClientTypes.PolicyEvaluationDecisionType?
        /// The name of the simulated resource, in Amazon Resource Name (ARN) format.
        /// This member is required.
        public var evalResourceName: Swift.String?
        /// A list of the statements in the input policies that determine the result for this part of the simulation. Remember that even if multiple statements allow the operation on the resource, if any statement denies that operation, then the explicit deny overrides any allow. In addition, the deny statement is the only entry included in the result.
        public var matchedStatements: [IamClientTypes.Statement]?
        /// A list of context keys that are required by the included input policies but that were not provided by one of the input parameters. This list is used when a list of ARNs is included in the ResourceArns parameter instead of "*". If you do not specify individual resources, by setting ResourceArns to "*" or by not including the ResourceArns parameter, then any missing context values are instead included under the EvaluationResults section. To discover the context keys used by a set of policies, you can call [GetContextKeysForCustomPolicy] or [GetContextKeysForPrincipalPolicy].
        public var missingContextValues: [Swift.String]?
        /// Contains information about the effect that a permissions boundary has on a policy simulation when that boundary is applied to an IAM entity.
        public var permissionsBoundaryDecisionDetail: IamClientTypes.PermissionsBoundaryDecisionDetail?

        public init (
            evalDecisionDetails: [Swift.String:IamClientTypes.PolicyEvaluationDecisionType]? = nil,
            evalResourceDecision: IamClientTypes.PolicyEvaluationDecisionType? = nil,
            evalResourceName: Swift.String? = nil,
            matchedStatements: [IamClientTypes.Statement]? = nil,
            missingContextValues: [Swift.String]? = nil,
            permissionsBoundaryDecisionDetail: IamClientTypes.PermissionsBoundaryDecisionDetail? = nil
        )
        {
            self.evalDecisionDetails = evalDecisionDetails
            self.evalResourceDecision = evalResourceDecision
            self.evalResourceName = evalResourceName
            self.matchedStatements = matchedStatements
            self.missingContextValues = missingContextValues
            self.permissionsBoundaryDecisionDetail = permissionsBoundaryDecisionDetail
        }
    }

}

extension ResyncMFADeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResyncMFADeviceInput(authenticationCode1: \(Swift.String(describing: authenticationCode1)), authenticationCode2: \(Swift.String(describing: authenticationCode2)), serialNumber: \(Swift.String(describing: serialNumber)), userName: \(Swift.String(describing: userName)))"}
}

extension ResyncMFADeviceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationCode1 = authenticationCode1 {
            try container.encode(authenticationCode1, forKey: ClientRuntime.Key("AuthenticationCode1"))
        }
        if let authenticationCode2 = authenticationCode2 {
            try container.encode(authenticationCode2, forKey: ClientRuntime.Key("AuthenticationCode2"))
        }
        if let serialNumber = serialNumber {
            try container.encode(serialNumber, forKey: ClientRuntime.Key("SerialNumber"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("ResyncMFADevice", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResyncMFADeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ResyncMFADeviceInput: Swift.Equatable {
    /// An authentication code emitted by the device. The format for this parameter is a sequence of six digits.
    /// This member is required.
    public var authenticationCode1: Swift.String?
    /// A subsequent authentication code emitted by the device. The format for this parameter is a sequence of six digits.
    /// This member is required.
    public var authenticationCode2: Swift.String?
    /// Serial number that uniquely identifies the MFA device. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var serialNumber: Swift.String?
    /// The name of the user whose MFA device you want to resynchronize. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        authenticationCode1: Swift.String? = nil,
        authenticationCode2: Swift.String? = nil,
        serialNumber: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.authenticationCode1 = authenticationCode1
        self.authenticationCode2 = authenticationCode2
        self.serialNumber = serialNumber
        self.userName = userName
    }
}

extension ResyncMFADeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ResyncMFADeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidAuthenticationCode" : self = .invalidAuthenticationCodeException(try InvalidAuthenticationCodeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResyncMFADeviceOutputError: Swift.Error, Swift.Equatable {
    case invalidAuthenticationCodeException(InvalidAuthenticationCodeException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResyncMFADeviceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResyncMFADeviceOutputResponse()"}
}

extension ResyncMFADeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ResyncMFADeviceOutputResponse: Swift.Equatable {

    public init() {}
}

struct ResyncMFADeviceOutputResponseBody: Swift.Equatable {
}

extension ResyncMFADeviceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IamClientTypes.Role: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case assumeRolePolicyDocument = "AssumeRolePolicyDocument"
        case createDate = "CreateDate"
        case description = "Description"
        case maxSessionDuration = "MaxSessionDuration"
        case path = "Path"
        case permissionsBoundary = "PermissionsBoundary"
        case roleId = "RoleId"
        case roleLastUsed = "RoleLastUsed"
        case roleName = "RoleName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let assumeRolePolicyDocument = assumeRolePolicyDocument {
            try container.encode(assumeRolePolicyDocument, forKey: ClientRuntime.Key("AssumeRolePolicyDocument"))
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let maxSessionDuration = maxSessionDuration {
            try container.encode(maxSessionDuration, forKey: ClientRuntime.Key("MaxSessionDuration"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let permissionsBoundary = permissionsBoundary {
            try container.encode(permissionsBoundary, forKey: ClientRuntime.Key("PermissionsBoundary"))
        }
        if let roleId = roleId {
            try container.encode(roleId, forKey: ClientRuntime.Key("RoleId"))
        }
        if let roleLastUsed = roleLastUsed {
            try container.encode(roleLastUsed, forKey: ClientRuntime.Key("RoleLastUsed"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let roleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleId)
        roleId = roleIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let assumeRolePolicyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assumeRolePolicyDocument)
        assumeRolePolicyDocument = assumeRolePolicyDocumentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let maxSessionDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSessionDuration)
        maxSessionDuration = maxSessionDurationDecoded
        let permissionsBoundaryDecoded = try containerValues.decodeIfPresent(IamClientTypes.AttachedPermissionsBoundary.self, forKey: .permissionsBoundary)
        permissionsBoundary = permissionsBoundaryDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let roleLastUsedDecoded = try containerValues.decodeIfPresent(IamClientTypes.RoleLastUsed.self, forKey: .roleLastUsed)
        roleLastUsed = roleLastUsedDecoded
    }
}

extension IamClientTypes.Role: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Role(arn: \(Swift.String(describing: arn)), assumeRolePolicyDocument: \(Swift.String(describing: assumeRolePolicyDocument)), createDate: \(Swift.String(describing: createDate)), description: \(Swift.String(describing: description)), maxSessionDuration: \(Swift.String(describing: maxSessionDuration)), path: \(Swift.String(describing: path)), permissionsBoundary: \(Swift.String(describing: permissionsBoundary)), roleId: \(Swift.String(describing: roleId)), roleLastUsed: \(Swift.String(describing: roleLastUsed)), roleName: \(Swift.String(describing: roleName)), tags: \(Swift.String(describing: tags)))"}
}

extension IamClientTypes {
    /// Contains information about an IAM role. This structure is returned as a response element in several API operations that interact with roles.
    public struct Role: Swift.Equatable {
        /// The Amazon Resource Name (ARN) specifying the role. For more information about ARNs and how to use them in policies, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide guide.
        /// This member is required.
        public var arn: Swift.String?
        /// The policy that grants an entity permission to assume the role.
        public var assumeRolePolicyDocument: Swift.String?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the role was created.
        /// This member is required.
        public var createDate: ClientRuntime.Date?
        /// A description of the role that you provide.
        public var description: Swift.String?
        /// The maximum session duration (in seconds) for the specified role. Anyone who uses the CLI, or API to assume the role can specify the duration using the optional DurationSeconds API parameter or duration-seconds CLI parameter.
        public var maxSessionDuration: Swift.Int?
        /// The path to the role. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var path: Swift.String?
        /// The ARN of the policy used to set the permissions boundary for the role. For more information about permissions boundaries, see [Permissions boundaries for IAM identities ](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the IAM User Guide.
        public var permissionsBoundary: IamClientTypes.AttachedPermissionsBoundary?
        /// The stable and unique string identifying the role. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var roleId: Swift.String?
        /// Contains information about the last time that an IAM role was used. This includes the date and time and the Region in which the role was last used. Activity is only reported for the trailing 400 days. This period can be shorter if your Region began supporting these features within the last year. The role might have been used more than 400 days ago. For more information, see [Regions where data is tracked](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period) in the IAM User Guide.
        public var roleLastUsed: IamClientTypes.RoleLastUsed?
        /// The friendly name that identifies the role.
        /// This member is required.
        public var roleName: Swift.String?
        /// A list of tags that are attached to the role. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
        public var tags: [IamClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            assumeRolePolicyDocument: Swift.String? = nil,
            createDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            maxSessionDuration: Swift.Int? = nil,
            path: Swift.String? = nil,
            permissionsBoundary: IamClientTypes.AttachedPermissionsBoundary? = nil,
            roleId: Swift.String? = nil,
            roleLastUsed: IamClientTypes.RoleLastUsed? = nil,
            roleName: Swift.String? = nil,
            tags: [IamClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.assumeRolePolicyDocument = assumeRolePolicyDocument
            self.createDate = createDate
            self.description = description
            self.maxSessionDuration = maxSessionDuration
            self.path = path
            self.permissionsBoundary = permissionsBoundary
            self.roleId = roleId
            self.roleLastUsed = roleLastUsed
            self.roleName = roleName
            self.tags = tags
        }
    }

}

extension IamClientTypes.RoleDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case assumeRolePolicyDocument = "AssumeRolePolicyDocument"
        case attachedManagedPolicies = "AttachedManagedPolicies"
        case createDate = "CreateDate"
        case instanceProfileList = "InstanceProfileList"
        case path = "Path"
        case permissionsBoundary = "PermissionsBoundary"
        case roleId = "RoleId"
        case roleLastUsed = "RoleLastUsed"
        case roleName = "RoleName"
        case rolePolicyList = "RolePolicyList"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let assumeRolePolicyDocument = assumeRolePolicyDocument {
            try container.encode(assumeRolePolicyDocument, forKey: ClientRuntime.Key("AssumeRolePolicyDocument"))
        }
        if let attachedManagedPolicies = attachedManagedPolicies {
            var attachedManagedPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttachedManagedPolicies"))
            for (index0, attachedpolicy0) in attachedManagedPolicies.enumerated() {
                try attachedManagedPoliciesContainer.encode(attachedpolicy0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let instanceProfileList = instanceProfileList {
            var instanceProfileListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceProfileList"))
            for (index0, instanceprofile0) in instanceProfileList.enumerated() {
                try instanceProfileListContainer.encode(instanceprofile0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let permissionsBoundary = permissionsBoundary {
            try container.encode(permissionsBoundary, forKey: ClientRuntime.Key("PermissionsBoundary"))
        }
        if let roleId = roleId {
            try container.encode(roleId, forKey: ClientRuntime.Key("RoleId"))
        }
        if let roleLastUsed = roleLastUsed {
            try container.encode(roleLastUsed, forKey: ClientRuntime.Key("RoleLastUsed"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        if let rolePolicyList = rolePolicyList {
            var rolePolicyListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RolePolicyList"))
            for (index0, policydetail0) in rolePolicyList.enumerated() {
                try rolePolicyListContainer.encode(policydetail0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let roleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleId)
        roleId = roleIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let assumeRolePolicyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assumeRolePolicyDocument)
        assumeRolePolicyDocument = assumeRolePolicyDocumentDecoded
        if containerValues.contains(.instanceProfileList) {
            struct KeyVal0{struct member{}}
            let instanceProfileListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceProfileList)
            if let instanceProfileListWrappedContainer = instanceProfileListWrappedContainer {
                let instanceProfileListContainer = try instanceProfileListWrappedContainer.decodeIfPresent([IamClientTypes.InstanceProfile].self, forKey: .member)
                var instanceProfileListBuffer:[IamClientTypes.InstanceProfile]? = nil
                if let instanceProfileListContainer = instanceProfileListContainer {
                    instanceProfileListBuffer = [IamClientTypes.InstanceProfile]()
                    for structureContainer0 in instanceProfileListContainer {
                        instanceProfileListBuffer?.append(structureContainer0)
                    }
                }
                instanceProfileList = instanceProfileListBuffer
            } else {
                instanceProfileList = []
            }
        } else {
            instanceProfileList = nil
        }
        if containerValues.contains(.rolePolicyList) {
            struct KeyVal0{struct member{}}
            let rolePolicyListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .rolePolicyList)
            if let rolePolicyListWrappedContainer = rolePolicyListWrappedContainer {
                let rolePolicyListContainer = try rolePolicyListWrappedContainer.decodeIfPresent([IamClientTypes.PolicyDetail].self, forKey: .member)
                var rolePolicyListBuffer:[IamClientTypes.PolicyDetail]? = nil
                if let rolePolicyListContainer = rolePolicyListContainer {
                    rolePolicyListBuffer = [IamClientTypes.PolicyDetail]()
                    for structureContainer0 in rolePolicyListContainer {
                        rolePolicyListBuffer?.append(structureContainer0)
                    }
                }
                rolePolicyList = rolePolicyListBuffer
            } else {
                rolePolicyList = []
            }
        } else {
            rolePolicyList = nil
        }
        if containerValues.contains(.attachedManagedPolicies) {
            struct KeyVal0{struct member{}}
            let attachedManagedPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attachedManagedPolicies)
            if let attachedManagedPoliciesWrappedContainer = attachedManagedPoliciesWrappedContainer {
                let attachedManagedPoliciesContainer = try attachedManagedPoliciesWrappedContainer.decodeIfPresent([IamClientTypes.AttachedPolicy].self, forKey: .member)
                var attachedManagedPoliciesBuffer:[IamClientTypes.AttachedPolicy]? = nil
                if let attachedManagedPoliciesContainer = attachedManagedPoliciesContainer {
                    attachedManagedPoliciesBuffer = [IamClientTypes.AttachedPolicy]()
                    for structureContainer0 in attachedManagedPoliciesContainer {
                        attachedManagedPoliciesBuffer?.append(structureContainer0)
                    }
                }
                attachedManagedPolicies = attachedManagedPoliciesBuffer
            } else {
                attachedManagedPolicies = []
            }
        } else {
            attachedManagedPolicies = nil
        }
        let permissionsBoundaryDecoded = try containerValues.decodeIfPresent(IamClientTypes.AttachedPermissionsBoundary.self, forKey: .permissionsBoundary)
        permissionsBoundary = permissionsBoundaryDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let roleLastUsedDecoded = try containerValues.decodeIfPresent(IamClientTypes.RoleLastUsed.self, forKey: .roleLastUsed)
        roleLastUsed = roleLastUsedDecoded
    }
}

extension IamClientTypes.RoleDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RoleDetail(arn: \(Swift.String(describing: arn)), assumeRolePolicyDocument: \(Swift.String(describing: assumeRolePolicyDocument)), attachedManagedPolicies: \(Swift.String(describing: attachedManagedPolicies)), createDate: \(Swift.String(describing: createDate)), instanceProfileList: \(Swift.String(describing: instanceProfileList)), path: \(Swift.String(describing: path)), permissionsBoundary: \(Swift.String(describing: permissionsBoundary)), roleId: \(Swift.String(describing: roleId)), roleLastUsed: \(Swift.String(describing: roleLastUsed)), roleName: \(Swift.String(describing: roleName)), rolePolicyList: \(Swift.String(describing: rolePolicyList)), tags: \(Swift.String(describing: tags)))"}
}

extension IamClientTypes {
    /// Contains information about an IAM role, including all of the role's policies. This data type is used as a response element in the [GetAccountAuthorizationDetails] operation.
    public struct RoleDetail: Swift.Equatable {
        /// The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources. For more information about ARNs, go to [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The trust policy that grants permission to assume the role.
        public var assumeRolePolicyDocument: Swift.String?
        /// A list of managed policies attached to the role. These policies are the role's access (permissions) policies.
        public var attachedManagedPolicies: [IamClientTypes.AttachedPolicy]?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the role was created.
        public var createDate: ClientRuntime.Date?
        /// A list of instance profiles that contain this role.
        public var instanceProfileList: [IamClientTypes.InstanceProfile]?
        /// The path to the role. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        public var path: Swift.String?
        /// The ARN of the policy used to set the permissions boundary for the role. For more information about permissions boundaries, see [Permissions boundaries for IAM identities ](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the IAM User Guide.
        public var permissionsBoundary: IamClientTypes.AttachedPermissionsBoundary?
        /// The stable and unique string identifying the role. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        public var roleId: Swift.String?
        /// Contains information about the last time that an IAM role was used. This includes the date and time and the Region in which the role was last used. Activity is only reported for the trailing 400 days. This period can be shorter if your Region began supporting these features within the last year. The role might have been used more than 400 days ago. For more information, see [Regions where data is tracked](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period) in the IAM User Guide.
        public var roleLastUsed: IamClientTypes.RoleLastUsed?
        /// The friendly name that identifies the role.
        public var roleName: Swift.String?
        /// A list of inline policies embedded in the role. These policies are the role's access (permissions) policies.
        public var rolePolicyList: [IamClientTypes.PolicyDetail]?
        /// A list of tags that are attached to the role. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
        public var tags: [IamClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            assumeRolePolicyDocument: Swift.String? = nil,
            attachedManagedPolicies: [IamClientTypes.AttachedPolicy]? = nil,
            createDate: ClientRuntime.Date? = nil,
            instanceProfileList: [IamClientTypes.InstanceProfile]? = nil,
            path: Swift.String? = nil,
            permissionsBoundary: IamClientTypes.AttachedPermissionsBoundary? = nil,
            roleId: Swift.String? = nil,
            roleLastUsed: IamClientTypes.RoleLastUsed? = nil,
            roleName: Swift.String? = nil,
            rolePolicyList: [IamClientTypes.PolicyDetail]? = nil,
            tags: [IamClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.assumeRolePolicyDocument = assumeRolePolicyDocument
            self.attachedManagedPolicies = attachedManagedPolicies
            self.createDate = createDate
            self.instanceProfileList = instanceProfileList
            self.path = path
            self.permissionsBoundary = permissionsBoundary
            self.roleId = roleId
            self.roleLastUsed = roleLastUsed
            self.roleName = roleName
            self.rolePolicyList = rolePolicyList
            self.tags = tags
        }
    }

}

extension IamClientTypes.RoleLastUsed: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUsedDate = "LastUsedDate"
        case region = "Region"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastUsedDate = lastUsedDate {
            try container.encode(ClientRuntime.TimestampWrapper(lastUsedDate, format: .dateTime), forKey: ClientRuntime.Key("lastUsedDate"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastUsedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUsedDate)
        var lastUsedDateBuffer:ClientRuntime.Date? = nil
        if let lastUsedDateDecoded = lastUsedDateDecoded {
            lastUsedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUsedDateDecoded, format: .dateTime)
        }
        lastUsedDate = lastUsedDateBuffer
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension IamClientTypes.RoleLastUsed: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RoleLastUsed(lastUsedDate: \(Swift.String(describing: lastUsedDate)), region: \(Swift.String(describing: region)))"}
}

extension IamClientTypes {
    /// Contains information about the last time that an IAM role was used. This includes the date and time and the Region in which the role was last used. Activity is only reported for the trailing 400 days. This period can be shorter if your Region began supporting these features within the last year. The role might have been used more than 400 days ago. For more information, see [Regions where data is tracked](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period) in the IAM User Guide. This data type is returned as a response element in the [GetRole] and [GetAccountAuthorizationDetails] operations.
    public struct RoleLastUsed: Swift.Equatable {
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601) that the role was last used. This field is null if the role has not been used within the IAM tracking period. For more information about the tracking period, see [Regions where data is tracked](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period) in the IAM User Guide.
        public var lastUsedDate: ClientRuntime.Date?
        /// The name of the Amazon Web Services Region in which the role was last used.
        public var region: Swift.String?

        public init (
            lastUsedDate: ClientRuntime.Date? = nil,
            region: Swift.String? = nil
        )
        {
            self.lastUsedDate = lastUsedDate
            self.region = region
        }
    }

}

extension IamClientTypes.RoleUsageType: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case region = "Region"
        case resources = "Resources"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let resources = resources {
            var resourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Resources"))
            for (index0, arntype0) in resources.enumerated() {
                try resourcesContainer.encode(arntype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        if containerValues.contains(.resources) {
            struct KeyVal0{struct member{}}
            let resourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resources)
            if let resourcesWrappedContainer = resourcesWrappedContainer {
                let resourcesContainer = try resourcesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourcesBuffer:[Swift.String]? = nil
                if let resourcesContainer = resourcesContainer {
                    resourcesBuffer = [Swift.String]()
                    for stringContainer0 in resourcesContainer {
                        resourcesBuffer?.append(stringContainer0)
                    }
                }
                resources = resourcesBuffer
            } else {
                resources = []
            }
        } else {
            resources = nil
        }
    }
}

extension IamClientTypes.RoleUsageType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RoleUsageType(region: \(Swift.String(describing: region)), resources: \(Swift.String(describing: resources)))"}
}

extension IamClientTypes {
    /// An object that contains details about how a service-linked role is used, if that information is returned by the service. This data type is used as a response element in the [GetServiceLinkedRoleDeletionStatus] operation.
    public struct RoleUsageType: Swift.Equatable {
        /// The name of the Region where the service-linked role is being used.
        public var region: Swift.String?
        /// The name of the resource that is using the service-linked role.
        public var resources: [Swift.String]?

        public init (
            region: Swift.String? = nil,
            resources: [Swift.String]? = nil
        )
        {
            self.region = region
            self.resources = resources
        }
    }

}

extension IamClientTypes.SAMLProviderListEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createDate = "CreateDate"
        case validUntil = "ValidUntil"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let validUntil = validUntil {
            try container.encode(ClientRuntime.TimestampWrapper(validUntil, format: .dateTime), forKey: ClientRuntime.Key("validUntil"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let validUntilDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validUntil)
        var validUntilBuffer:ClientRuntime.Date? = nil
        if let validUntilDecoded = validUntilDecoded {
            validUntilBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(validUntilDecoded, format: .dateTime)
        }
        validUntil = validUntilBuffer
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
    }
}

extension IamClientTypes.SAMLProviderListEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SAMLProviderListEntry(arn: \(Swift.String(describing: arn)), createDate: \(Swift.String(describing: createDate)), validUntil: \(Swift.String(describing: validUntil)))"}
}

extension IamClientTypes {
    /// Contains the list of SAML providers for this account.
    public struct SAMLProviderListEntry: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the SAML provider.
        public var arn: Swift.String?
        /// The date and time when the SAML provider was created.
        public var createDate: ClientRuntime.Date?
        /// The expiration date and time for the SAML provider.
        public var validUntil: ClientRuntime.Date?

        public init (
            arn: Swift.String? = nil,
            createDate: ClientRuntime.Date? = nil,
            validUntil: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.createDate = createDate
            self.validUntil = validUntil
        }
    }

}

extension IamClientTypes.SSHPublicKey: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fingerprint = "Fingerprint"
        case sSHPublicKeyBody = "SSHPublicKeyBody"
        case sSHPublicKeyId = "SSHPublicKeyId"
        case status = "Status"
        case uploadDate = "UploadDate"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let fingerprint = fingerprint {
            try container.encode(fingerprint, forKey: ClientRuntime.Key("Fingerprint"))
        }
        if let sSHPublicKeyBody = sSHPublicKeyBody {
            try container.encode(sSHPublicKeyBody, forKey: ClientRuntime.Key("SSHPublicKeyBody"))
        }
        if let sSHPublicKeyId = sSHPublicKeyId {
            try container.encode(sSHPublicKeyId, forKey: ClientRuntime.Key("SSHPublicKeyId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let uploadDate = uploadDate {
            try container.encode(ClientRuntime.TimestampWrapper(uploadDate, format: .dateTime), forKey: ClientRuntime.Key("uploadDate"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let sSHPublicKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sSHPublicKeyId)
        sSHPublicKeyId = sSHPublicKeyIdDecoded
        let fingerprintDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fingerprint)
        fingerprint = fingerprintDecoded
        let sSHPublicKeyBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sSHPublicKeyBody)
        sSHPublicKeyBody = sSHPublicKeyBodyDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IamClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
        let uploadDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadDate)
        var uploadDateBuffer:ClientRuntime.Date? = nil
        if let uploadDateDecoded = uploadDateDecoded {
            uploadDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(uploadDateDecoded, format: .dateTime)
        }
        uploadDate = uploadDateBuffer
    }
}

extension IamClientTypes.SSHPublicKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SSHPublicKey(fingerprint: \(Swift.String(describing: fingerprint)), sSHPublicKeyBody: \(Swift.String(describing: sSHPublicKeyBody)), sSHPublicKeyId: \(Swift.String(describing: sSHPublicKeyId)), status: \(Swift.String(describing: status)), uploadDate: \(Swift.String(describing: uploadDate)), userName: \(Swift.String(describing: userName)))"}
}

extension IamClientTypes {
    /// Contains information about an SSH public key. This data type is used as a response element in the [GetSSHPublicKey] and [UploadSSHPublicKey] operations.
    public struct SSHPublicKey: Swift.Equatable {
        /// The MD5 message digest of the SSH public key.
        /// This member is required.
        public var fingerprint: Swift.String?
        /// The SSH public key.
        /// This member is required.
        public var sSHPublicKeyBody: Swift.String?
        /// The unique identifier for the SSH public key.
        /// This member is required.
        public var sSHPublicKeyId: Swift.String?
        /// The status of the SSH public key. Active means that the key can be used for authentication with an CodeCommit repository. Inactive means that the key cannot be used.
        /// This member is required.
        public var status: IamClientTypes.StatusType?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the SSH public key was uploaded.
        public var uploadDate: ClientRuntime.Date?
        /// The name of the IAM user associated with the SSH public key.
        /// This member is required.
        public var userName: Swift.String?

        public init (
            fingerprint: Swift.String? = nil,
            sSHPublicKeyBody: Swift.String? = nil,
            sSHPublicKeyId: Swift.String? = nil,
            status: IamClientTypes.StatusType? = nil,
            uploadDate: ClientRuntime.Date? = nil,
            userName: Swift.String? = nil
        )
        {
            self.fingerprint = fingerprint
            self.sSHPublicKeyBody = sSHPublicKeyBody
            self.sSHPublicKeyId = sSHPublicKeyId
            self.status = status
            self.uploadDate = uploadDate
            self.userName = userName
        }
    }

}

extension IamClientTypes.SSHPublicKeyMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sSHPublicKeyId = "SSHPublicKeyId"
        case status = "Status"
        case uploadDate = "UploadDate"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sSHPublicKeyId = sSHPublicKeyId {
            try container.encode(sSHPublicKeyId, forKey: ClientRuntime.Key("SSHPublicKeyId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let uploadDate = uploadDate {
            try container.encode(ClientRuntime.TimestampWrapper(uploadDate, format: .dateTime), forKey: ClientRuntime.Key("uploadDate"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let sSHPublicKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sSHPublicKeyId)
        sSHPublicKeyId = sSHPublicKeyIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IamClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
        let uploadDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadDate)
        var uploadDateBuffer:ClientRuntime.Date? = nil
        if let uploadDateDecoded = uploadDateDecoded {
            uploadDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(uploadDateDecoded, format: .dateTime)
        }
        uploadDate = uploadDateBuffer
    }
}

extension IamClientTypes.SSHPublicKeyMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SSHPublicKeyMetadata(sSHPublicKeyId: \(Swift.String(describing: sSHPublicKeyId)), status: \(Swift.String(describing: status)), uploadDate: \(Swift.String(describing: uploadDate)), userName: \(Swift.String(describing: userName)))"}
}

extension IamClientTypes {
    /// Contains information about an SSH public key, without the key's body or fingerprint. This data type is used as a response element in the [ListSSHPublicKeys] operation.
    public struct SSHPublicKeyMetadata: Swift.Equatable {
        /// The unique identifier for the SSH public key.
        /// This member is required.
        public var sSHPublicKeyId: Swift.String?
        /// The status of the SSH public key. Active means that the key can be used for authentication with an CodeCommit repository. Inactive means that the key cannot be used.
        /// This member is required.
        public var status: IamClientTypes.StatusType?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the SSH public key was uploaded.
        /// This member is required.
        public var uploadDate: ClientRuntime.Date?
        /// The name of the IAM user associated with the SSH public key.
        /// This member is required.
        public var userName: Swift.String?

        public init (
            sSHPublicKeyId: Swift.String? = nil,
            status: IamClientTypes.StatusType? = nil,
            uploadDate: ClientRuntime.Date? = nil,
            userName: Swift.String? = nil
        )
        {
            self.sSHPublicKeyId = sSHPublicKeyId
            self.status = status
            self.uploadDate = uploadDate
            self.userName = userName
        }
    }

}

extension IamClientTypes.ServerCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateBody = "CertificateBody"
        case certificateChain = "CertificateChain"
        case serverCertificateMetadata = "ServerCertificateMetadata"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateBody = certificateBody {
            try container.encode(certificateBody, forKey: ClientRuntime.Key("CertificateBody"))
        }
        if let certificateChain = certificateChain {
            try container.encode(certificateChain, forKey: ClientRuntime.Key("CertificateChain"))
        }
        if let serverCertificateMetadata = serverCertificateMetadata {
            try container.encode(serverCertificateMetadata, forKey: ClientRuntime.Key("ServerCertificateMetadata"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverCertificateMetadataDecoded = try containerValues.decodeIfPresent(IamClientTypes.ServerCertificateMetadata.self, forKey: .serverCertificateMetadata)
        serverCertificateMetadata = serverCertificateMetadataDecoded
        let certificateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateBody)
        certificateBody = certificateBodyDecoded
        let certificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension IamClientTypes.ServerCertificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServerCertificate(certificateBody: \(Swift.String(describing: certificateBody)), certificateChain: \(Swift.String(describing: certificateChain)), serverCertificateMetadata: \(Swift.String(describing: serverCertificateMetadata)), tags: \(Swift.String(describing: tags)))"}
}

extension IamClientTypes {
    /// Contains information about a server certificate. This data type is used as a response element in the [GetServerCertificate] operation.
    public struct ServerCertificate: Swift.Equatable {
        /// The contents of the public key certificate.
        /// This member is required.
        public var certificateBody: Swift.String?
        /// The contents of the public key certificate chain.
        public var certificateChain: Swift.String?
        /// The meta information of the server certificate, such as its name, path, ID, and ARN.
        /// This member is required.
        public var serverCertificateMetadata: IamClientTypes.ServerCertificateMetadata?
        /// A list of tags that are attached to the server certificate. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
        public var tags: [IamClientTypes.Tag]?

        public init (
            certificateBody: Swift.String? = nil,
            certificateChain: Swift.String? = nil,
            serverCertificateMetadata: IamClientTypes.ServerCertificateMetadata? = nil,
            tags: [IamClientTypes.Tag]? = nil
        )
        {
            self.certificateBody = certificateBody
            self.certificateChain = certificateChain
            self.serverCertificateMetadata = serverCertificateMetadata
            self.tags = tags
        }
    }

}

extension IamClientTypes.ServerCertificateMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case expiration = "Expiration"
        case path = "Path"
        case serverCertificateId = "ServerCertificateId"
        case serverCertificateName = "ServerCertificateName"
        case uploadDate = "UploadDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let expiration = expiration {
            try container.encode(ClientRuntime.TimestampWrapper(expiration, format: .dateTime), forKey: ClientRuntime.Key("expiration"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let serverCertificateId = serverCertificateId {
            try container.encode(serverCertificateId, forKey: ClientRuntime.Key("ServerCertificateId"))
        }
        if let serverCertificateName = serverCertificateName {
            try container.encode(serverCertificateName, forKey: ClientRuntime.Key("ServerCertificateName"))
        }
        if let uploadDate = uploadDate {
            try container.encode(ClientRuntime.TimestampWrapper(uploadDate, format: .dateTime), forKey: ClientRuntime.Key("uploadDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let serverCertificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverCertificateName)
        serverCertificateName = serverCertificateNameDecoded
        let serverCertificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverCertificateId)
        serverCertificateId = serverCertificateIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let uploadDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadDate)
        var uploadDateBuffer:ClientRuntime.Date? = nil
        if let uploadDateDecoded = uploadDateDecoded {
            uploadDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(uploadDateDecoded, format: .dateTime)
        }
        uploadDate = uploadDateBuffer
        let expirationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expiration)
        var expirationBuffer:ClientRuntime.Date? = nil
        if let expirationDecoded = expirationDecoded {
            expirationBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(expirationDecoded, format: .dateTime)
        }
        expiration = expirationBuffer
    }
}

extension IamClientTypes.ServerCertificateMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServerCertificateMetadata(arn: \(Swift.String(describing: arn)), expiration: \(Swift.String(describing: expiration)), path: \(Swift.String(describing: path)), serverCertificateId: \(Swift.String(describing: serverCertificateId)), serverCertificateName: \(Swift.String(describing: serverCertificateName)), uploadDate: \(Swift.String(describing: uploadDate)))"}
}

extension IamClientTypes {
    /// Contains information about a server certificate without its certificate body, certificate chain, and private key. This data type is used as a response element in the [UploadServerCertificate] and [ListServerCertificates] operations.
    public struct ServerCertificateMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var arn: Swift.String?
        /// The date on which the certificate is set to expire.
        public var expiration: ClientRuntime.Date?
        /// The path to the server certificate. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var path: Swift.String?
        /// The stable and unique string identifying the server certificate. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var serverCertificateId: Swift.String?
        /// The name that identifies the server certificate.
        /// This member is required.
        public var serverCertificateName: Swift.String?
        /// The date when the server certificate was uploaded.
        public var uploadDate: ClientRuntime.Date?

        public init (
            arn: Swift.String? = nil,
            expiration: ClientRuntime.Date? = nil,
            path: Swift.String? = nil,
            serverCertificateId: Swift.String? = nil,
            serverCertificateName: Swift.String? = nil,
            uploadDate: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.expiration = expiration
            self.path = path
            self.serverCertificateId = serverCertificateId
            self.serverCertificateName = serverCertificateName
            self.uploadDate = uploadDate
        }
    }

}

extension ServiceFailureException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceFailureException(message: \(Swift.String(describing: message)))"}
}

extension ServiceFailureException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ServiceFailureExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request processing has failed because of an unknown error, exception or failure.
public struct ServiceFailureException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceFailureExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes.ServiceLastAccessed: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastAuthenticated = "LastAuthenticated"
        case lastAuthenticatedEntity = "LastAuthenticatedEntity"
        case lastAuthenticatedRegion = "LastAuthenticatedRegion"
        case serviceName = "ServiceName"
        case serviceNamespace = "ServiceNamespace"
        case totalAuthenticatedEntities = "TotalAuthenticatedEntities"
        case trackedActionsLastAccessed = "TrackedActionsLastAccessed"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastAuthenticated = lastAuthenticated {
            try container.encode(ClientRuntime.TimestampWrapper(lastAuthenticated, format: .dateTime), forKey: ClientRuntime.Key("lastAuthenticated"))
        }
        if let lastAuthenticatedEntity = lastAuthenticatedEntity {
            try container.encode(lastAuthenticatedEntity, forKey: ClientRuntime.Key("LastAuthenticatedEntity"))
        }
        if let lastAuthenticatedRegion = lastAuthenticatedRegion {
            try container.encode(lastAuthenticatedRegion, forKey: ClientRuntime.Key("LastAuthenticatedRegion"))
        }
        if let serviceName = serviceName {
            try container.encode(serviceName, forKey: ClientRuntime.Key("ServiceName"))
        }
        if let serviceNamespace = serviceNamespace {
            try container.encode(serviceNamespace, forKey: ClientRuntime.Key("ServiceNamespace"))
        }
        if let totalAuthenticatedEntities = totalAuthenticatedEntities {
            try container.encode(totalAuthenticatedEntities, forKey: ClientRuntime.Key("TotalAuthenticatedEntities"))
        }
        if let trackedActionsLastAccessed = trackedActionsLastAccessed {
            var trackedActionsLastAccessedContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrackedActionsLastAccessed"))
            for (index0, trackedactionlastaccessed0) in trackedActionsLastAccessed.enumerated() {
                try trackedActionsLastAccessedContainer.encode(trackedactionlastaccessed0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let lastAuthenticatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAuthenticated)
        var lastAuthenticatedBuffer:ClientRuntime.Date? = nil
        if let lastAuthenticatedDecoded = lastAuthenticatedDecoded {
            lastAuthenticatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastAuthenticatedDecoded, format: .dateTime)
        }
        lastAuthenticated = lastAuthenticatedBuffer
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let lastAuthenticatedEntityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAuthenticatedEntity)
        lastAuthenticatedEntity = lastAuthenticatedEntityDecoded
        let lastAuthenticatedRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAuthenticatedRegion)
        lastAuthenticatedRegion = lastAuthenticatedRegionDecoded
        let totalAuthenticatedEntitiesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalAuthenticatedEntities)
        totalAuthenticatedEntities = totalAuthenticatedEntitiesDecoded
        if containerValues.contains(.trackedActionsLastAccessed) {
            struct KeyVal0{struct member{}}
            let trackedActionsLastAccessedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .trackedActionsLastAccessed)
            if let trackedActionsLastAccessedWrappedContainer = trackedActionsLastAccessedWrappedContainer {
                let trackedActionsLastAccessedContainer = try trackedActionsLastAccessedWrappedContainer.decodeIfPresent([IamClientTypes.TrackedActionLastAccessed].self, forKey: .member)
                var trackedActionsLastAccessedBuffer:[IamClientTypes.TrackedActionLastAccessed]? = nil
                if let trackedActionsLastAccessedContainer = trackedActionsLastAccessedContainer {
                    trackedActionsLastAccessedBuffer = [IamClientTypes.TrackedActionLastAccessed]()
                    for structureContainer0 in trackedActionsLastAccessedContainer {
                        trackedActionsLastAccessedBuffer?.append(structureContainer0)
                    }
                }
                trackedActionsLastAccessed = trackedActionsLastAccessedBuffer
            } else {
                trackedActionsLastAccessed = []
            }
        } else {
            trackedActionsLastAccessed = nil
        }
    }
}

extension IamClientTypes.ServiceLastAccessed: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceLastAccessed(lastAuthenticated: \(Swift.String(describing: lastAuthenticated)), lastAuthenticatedEntity: \(Swift.String(describing: lastAuthenticatedEntity)), lastAuthenticatedRegion: \(Swift.String(describing: lastAuthenticatedRegion)), serviceName: \(Swift.String(describing: serviceName)), serviceNamespace: \(Swift.String(describing: serviceNamespace)), totalAuthenticatedEntities: \(Swift.String(describing: totalAuthenticatedEntities)), trackedActionsLastAccessed: \(Swift.String(describing: trackedActionsLastAccessed)))"}
}

extension IamClientTypes {
    /// Contains details about the most recent attempt to access the service. This data type is used as a response element in the [GetServiceLastAccessedDetails] operation.
    public struct ServiceLastAccessed: Swift.Equatable {
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when an authenticated entity most recently attempted to access the service. Amazon Web Services does not report unauthenticated requests. This field is null if no IAM entities attempted to access the service within the [reporting period](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period).
        public var lastAuthenticated: ClientRuntime.Date?
        /// The ARN of the authenticated entity (user or role) that last attempted to access the service. Amazon Web Services does not report unauthenticated requests. This field is null if no IAM entities attempted to access the service within the [reporting period](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period).
        public var lastAuthenticatedEntity: Swift.String?
        /// The Region from which the authenticated entity (user or role) last attempted to access the service. Amazon Web Services does not report unauthenticated requests. This field is null if no IAM entities attempted to access the service within the [reporting period](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period).
        public var lastAuthenticatedRegion: Swift.String?
        /// The name of the service in which access was attempted.
        /// This member is required.
        public var serviceName: Swift.String?
        /// The namespace of the service in which access was attempted. To learn the service namespace of a service, see [Actions, resources, and condition keys for Amazon Web Services services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) in the Service Authorization Reference. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, (service prefix: a4b). For more information about service namespaces, see [Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces) in the Amazon Web Services General Reference.
        /// This member is required.
        public var serviceNamespace: Swift.String?
        /// The total number of authenticated principals (root user, IAM users, or IAM roles) that have attempted to access the service. This field is null if no principals attempted to access the service within the [reporting period](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period).
        public var totalAuthenticatedEntities: Swift.Int?
        /// An object that contains details about the most recent attempt to access a tracked action within the service. This field is null if there no tracked actions or if the principal did not use the tracked actions within the [reporting period](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period). This field is also null if the report was generated at the service level and not the action level. For more information, see the Granularity field in [GenerateServiceLastAccessedDetails].
        public var trackedActionsLastAccessed: [IamClientTypes.TrackedActionLastAccessed]?

        public init (
            lastAuthenticated: ClientRuntime.Date? = nil,
            lastAuthenticatedEntity: Swift.String? = nil,
            lastAuthenticatedRegion: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            serviceNamespace: Swift.String? = nil,
            totalAuthenticatedEntities: Swift.Int? = nil,
            trackedActionsLastAccessed: [IamClientTypes.TrackedActionLastAccessed]? = nil
        )
        {
            self.lastAuthenticated = lastAuthenticated
            self.lastAuthenticatedEntity = lastAuthenticatedEntity
            self.lastAuthenticatedRegion = lastAuthenticatedRegion
            self.serviceName = serviceName
            self.serviceNamespace = serviceNamespace
            self.totalAuthenticatedEntities = totalAuthenticatedEntities
            self.trackedActionsLastAccessed = trackedActionsLastAccessed
        }
    }

}

extension ServiceNotSupportedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceNotSupportedException(message: \(Swift.String(describing: message)))"}
}

extension ServiceNotSupportedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ServiceNotSupportedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified service does not support service-specific credentials.
public struct ServiceNotSupportedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceNotSupportedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceNotSupportedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamClientTypes.ServiceSpecificCredential: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createDate = "CreateDate"
        case serviceName = "ServiceName"
        case servicePassword = "ServicePassword"
        case serviceSpecificCredentialId = "ServiceSpecificCredentialId"
        case serviceUserName = "ServiceUserName"
        case status = "Status"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let serviceName = serviceName {
            try container.encode(serviceName, forKey: ClientRuntime.Key("ServiceName"))
        }
        if let servicePassword = servicePassword {
            try container.encode(servicePassword, forKey: ClientRuntime.Key("ServicePassword"))
        }
        if let serviceSpecificCredentialId = serviceSpecificCredentialId {
            try container.encode(serviceSpecificCredentialId, forKey: ClientRuntime.Key("ServiceSpecificCredentialId"))
        }
        if let serviceUserName = serviceUserName {
            try container.encode(serviceUserName, forKey: ClientRuntime.Key("ServiceUserName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let serviceUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUserName)
        serviceUserName = serviceUserNameDecoded
        let servicePasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .servicePassword)
        servicePassword = servicePasswordDecoded
        let serviceSpecificCredentialIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceSpecificCredentialId)
        serviceSpecificCredentialId = serviceSpecificCredentialIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IamClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
    }
}

extension IamClientTypes.ServiceSpecificCredential: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceSpecificCredential(createDate: \(Swift.String(describing: createDate)), serviceName: \(Swift.String(describing: serviceName)), servicePassword: \(Swift.String(describing: servicePassword)), serviceSpecificCredentialId: \(Swift.String(describing: serviceSpecificCredentialId)), serviceUserName: \(Swift.String(describing: serviceUserName)), status: \(Swift.String(describing: status)), userName: \(Swift.String(describing: userName)))"}
}

extension IamClientTypes {
    /// Contains the details of a service-specific credential.
    public struct ServiceSpecificCredential: Swift.Equatable {
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the service-specific credential were created.
        /// This member is required.
        public var createDate: ClientRuntime.Date?
        /// The name of the service associated with the service-specific credential.
        /// This member is required.
        public var serviceName: Swift.String?
        /// The generated password for the service-specific credential.
        /// This member is required.
        public var servicePassword: Swift.String?
        /// The unique identifier for the service-specific credential.
        /// This member is required.
        public var serviceSpecificCredentialId: Swift.String?
        /// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the Amazon Web Services account, as in jane-at-123456789012, for example. This value cannot be configured by the user.
        /// This member is required.
        public var serviceUserName: Swift.String?
        /// The status of the service-specific credential. Active means that the key is valid for API calls, while Inactive means it is not.
        /// This member is required.
        public var status: IamClientTypes.StatusType?
        /// The name of the IAM user associated with the service-specific credential.
        /// This member is required.
        public var userName: Swift.String?

        public init (
            createDate: ClientRuntime.Date? = nil,
            serviceName: Swift.String? = nil,
            servicePassword: Swift.String? = nil,
            serviceSpecificCredentialId: Swift.String? = nil,
            serviceUserName: Swift.String? = nil,
            status: IamClientTypes.StatusType? = nil,
            userName: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.serviceName = serviceName
            self.servicePassword = servicePassword
            self.serviceSpecificCredentialId = serviceSpecificCredentialId
            self.serviceUserName = serviceUserName
            self.status = status
            self.userName = userName
        }
    }

}

extension IamClientTypes.ServiceSpecificCredentialMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createDate = "CreateDate"
        case serviceName = "ServiceName"
        case serviceSpecificCredentialId = "ServiceSpecificCredentialId"
        case serviceUserName = "ServiceUserName"
        case status = "Status"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let serviceName = serviceName {
            try container.encode(serviceName, forKey: ClientRuntime.Key("ServiceName"))
        }
        if let serviceSpecificCredentialId = serviceSpecificCredentialId {
            try container.encode(serviceSpecificCredentialId, forKey: ClientRuntime.Key("ServiceSpecificCredentialId"))
        }
        if let serviceUserName = serviceUserName {
            try container.encode(serviceUserName, forKey: ClientRuntime.Key("ServiceUserName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IamClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
        let serviceUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUserName)
        serviceUserName = serviceUserNameDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let serviceSpecificCredentialIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceSpecificCredentialId)
        serviceSpecificCredentialId = serviceSpecificCredentialIdDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
    }
}

extension IamClientTypes.ServiceSpecificCredentialMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceSpecificCredentialMetadata(createDate: \(Swift.String(describing: createDate)), serviceName: \(Swift.String(describing: serviceName)), serviceSpecificCredentialId: \(Swift.String(describing: serviceSpecificCredentialId)), serviceUserName: \(Swift.String(describing: serviceUserName)), status: \(Swift.String(describing: status)), userName: \(Swift.String(describing: userName)))"}
}

extension IamClientTypes {
    /// Contains additional details about a service-specific credential.
    public struct ServiceSpecificCredentialMetadata: Swift.Equatable {
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the service-specific credential were created.
        /// This member is required.
        public var createDate: ClientRuntime.Date?
        /// The name of the service associated with the service-specific credential.
        /// This member is required.
        public var serviceName: Swift.String?
        /// The unique identifier for the service-specific credential.
        /// This member is required.
        public var serviceSpecificCredentialId: Swift.String?
        /// The generated user name for the service-specific credential.
        /// This member is required.
        public var serviceUserName: Swift.String?
        /// The status of the service-specific credential. Active means that the key is valid for API calls, while Inactive means it is not.
        /// This member is required.
        public var status: IamClientTypes.StatusType?
        /// The name of the IAM user associated with the service-specific credential.
        /// This member is required.
        public var userName: Swift.String?

        public init (
            createDate: ClientRuntime.Date? = nil,
            serviceName: Swift.String? = nil,
            serviceSpecificCredentialId: Swift.String? = nil,
            serviceUserName: Swift.String? = nil,
            status: IamClientTypes.StatusType? = nil,
            userName: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.serviceName = serviceName
            self.serviceSpecificCredentialId = serviceSpecificCredentialId
            self.serviceUserName = serviceUserName
            self.status = status
            self.userName = userName
        }
    }

}

extension SetDefaultPolicyVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetDefaultPolicyVersionInput(policyArn: \(Swift.String(describing: policyArn)), versionId: \(Swift.String(describing: versionId)))"}
}

extension SetDefaultPolicyVersionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("SetDefaultPolicyVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetDefaultPolicyVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetDefaultPolicyVersionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM policy whose default version you want to set. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policyArn: Swift.String?
    /// The version of the policy to set as the default (operative) version. For more information about managed policy versions, see [Versioning for managed policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html) in the IAM User Guide.
    /// This member is required.
    public var versionId: Swift.String?

    public init (
        policyArn: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
        self.versionId = versionId
    }
}

extension SetDefaultPolicyVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetDefaultPolicyVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetDefaultPolicyVersionOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetDefaultPolicyVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetDefaultPolicyVersionOutputResponse()"}
}

extension SetDefaultPolicyVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetDefaultPolicyVersionOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetDefaultPolicyVersionOutputResponseBody: Swift.Equatable {
}

extension SetDefaultPolicyVersionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SetSecurityTokenServicePreferencesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetSecurityTokenServicePreferencesInput(globalEndpointTokenVersion: \(Swift.String(describing: globalEndpointTokenVersion)))"}
}

extension SetSecurityTokenServicePreferencesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let globalEndpointTokenVersion = globalEndpointTokenVersion {
            try container.encode(globalEndpointTokenVersion, forKey: ClientRuntime.Key("GlobalEndpointTokenVersion"))
        }
        try container.encode("SetSecurityTokenServicePreferences", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetSecurityTokenServicePreferencesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetSecurityTokenServicePreferencesInput: Swift.Equatable {
    /// The version of the global endpoint token. Version 1 tokens are valid only in Amazon Web Services Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see [Activating and deactivating STS in an Amazon Web Services Region](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html) in the IAM User Guide.
    /// This member is required.
    public var globalEndpointTokenVersion: IamClientTypes.GlobalEndpointTokenVersion?

    public init (
        globalEndpointTokenVersion: IamClientTypes.GlobalEndpointTokenVersion? = nil
    )
    {
        self.globalEndpointTokenVersion = globalEndpointTokenVersion
    }
}

extension SetSecurityTokenServicePreferencesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetSecurityTokenServicePreferencesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetSecurityTokenServicePreferencesOutputError: Swift.Error, Swift.Equatable {
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetSecurityTokenServicePreferencesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetSecurityTokenServicePreferencesOutputResponse()"}
}

extension SetSecurityTokenServicePreferencesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetSecurityTokenServicePreferencesOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetSecurityTokenServicePreferencesOutputResponseBody: Swift.Equatable {
}

extension SetSecurityTokenServicePreferencesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IamClientTypes.SigningCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateBody = "CertificateBody"
        case certificateId = "CertificateId"
        case status = "Status"
        case uploadDate = "UploadDate"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateBody = certificateBody {
            try container.encode(certificateBody, forKey: ClientRuntime.Key("CertificateBody"))
        }
        if let certificateId = certificateId {
            try container.encode(certificateId, forKey: ClientRuntime.Key("CertificateId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let uploadDate = uploadDate {
            try container.encode(ClientRuntime.TimestampWrapper(uploadDate, format: .dateTime), forKey: ClientRuntime.Key("uploadDate"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let certificateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateBody)
        certificateBody = certificateBodyDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IamClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
        let uploadDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadDate)
        var uploadDateBuffer:ClientRuntime.Date? = nil
        if let uploadDateDecoded = uploadDateDecoded {
            uploadDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(uploadDateDecoded, format: .dateTime)
        }
        uploadDate = uploadDateBuffer
    }
}

extension IamClientTypes.SigningCertificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SigningCertificate(certificateBody: \(Swift.String(describing: certificateBody)), certificateId: \(Swift.String(describing: certificateId)), status: \(Swift.String(describing: status)), uploadDate: \(Swift.String(describing: uploadDate)), userName: \(Swift.String(describing: userName)))"}
}

extension IamClientTypes {
    /// Contains information about an X.509 signing certificate. This data type is used as a response element in the [UploadSigningCertificate] and [ListSigningCertificates] operations.
    public struct SigningCertificate: Swift.Equatable {
        /// The contents of the signing certificate.
        /// This member is required.
        public var certificateBody: Swift.String?
        /// The ID for the signing certificate.
        /// This member is required.
        public var certificateId: Swift.String?
        /// The status of the signing certificate. Active means that the key is valid for API calls, while Inactive means it is not.
        /// This member is required.
        public var status: IamClientTypes.StatusType?
        /// The date when the signing certificate was uploaded.
        public var uploadDate: ClientRuntime.Date?
        /// The name of the user the signing certificate is associated with.
        /// This member is required.
        public var userName: Swift.String?

        public init (
            certificateBody: Swift.String? = nil,
            certificateId: Swift.String? = nil,
            status: IamClientTypes.StatusType? = nil,
            uploadDate: ClientRuntime.Date? = nil,
            userName: Swift.String? = nil
        )
        {
            self.certificateBody = certificateBody
            self.certificateId = certificateId
            self.status = status
            self.uploadDate = uploadDate
            self.userName = userName
        }
    }

}

extension SimulateCustomPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SimulateCustomPolicyInput(actionNames: \(Swift.String(describing: actionNames)), callerArn: \(Swift.String(describing: callerArn)), contextEntries: \(Swift.String(describing: contextEntries)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), permissionsBoundaryPolicyInputList: \(Swift.String(describing: permissionsBoundaryPolicyInputList)), policyInputList: \(Swift.String(describing: policyInputList)), resourceArns: \(Swift.String(describing: resourceArns)), resourceHandlingOption: \(Swift.String(describing: resourceHandlingOption)), resourceOwner: \(Swift.String(describing: resourceOwner)), resourcePolicy: \(Swift.String(describing: resourcePolicy)))"}
}

extension SimulateCustomPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionNames = actionNames {
            var actionNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ActionNames"))
            for (index0, actionnametype0) in actionNames.enumerated() {
                try actionNamesContainer.encode(actionnametype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let callerArn = callerArn {
            try container.encode(callerArn, forKey: ClientRuntime.Key("CallerArn"))
        }
        if let contextEntries = contextEntries {
            var contextEntriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ContextEntries"))
            for (index0, contextentry0) in contextEntries.enumerated() {
                try contextEntriesContainer.encode(contextentry0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let permissionsBoundaryPolicyInputList = permissionsBoundaryPolicyInputList {
            var permissionsBoundaryPolicyInputListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PermissionsBoundaryPolicyInputList"))
            for (index0, policydocumenttype0) in permissionsBoundaryPolicyInputList.enumerated() {
                try permissionsBoundaryPolicyInputListContainer.encode(policydocumenttype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let policyInputList = policyInputList {
            var policyInputListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyInputList"))
            for (index0, policydocumenttype0) in policyInputList.enumerated() {
                try policyInputListContainer.encode(policydocumenttype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourceArns = resourceArns {
            var resourceArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceArns"))
            for (index0, resourcenametype0) in resourceArns.enumerated() {
                try resourceArnsContainer.encode(resourcenametype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourceHandlingOption = resourceHandlingOption {
            try container.encode(resourceHandlingOption, forKey: ClientRuntime.Key("ResourceHandlingOption"))
        }
        if let resourceOwner = resourceOwner {
            try container.encode(resourceOwner, forKey: ClientRuntime.Key("ResourceOwner"))
        }
        if let resourcePolicy = resourcePolicy {
            try container.encode(resourcePolicy, forKey: ClientRuntime.Key("ResourcePolicy"))
        }
        try container.encode("SimulateCustomPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension SimulateCustomPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SimulateCustomPolicyInput: Swift.Equatable {
    /// A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as iam:CreateUser. This operation does not support using wildcards (*) in an action name.
    /// This member is required.
    public var actionNames: [Swift.String]?
    /// The ARN of the IAM user that you want to use as the simulated caller of the API operations. CallerArn is required if you include a ResourcePolicy so that the policy's Principal element has a value to use in evaluating the policy. You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.
    public var callerArn: Swift.String?
    /// A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
    public var contextEntries: [IamClientTypes.ContextEntry]?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see [Permissions boundaries for IAM entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the IAM User Guide. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy. The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see [IAM and STS character quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length). The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    public var permissionsBoundaryPolicyInputList: [Swift.String]?
    /// A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the ResourcePolicy parameter. The policies cannot be "scope-down" policies, such as you could include in a call to [GetFederationToken](https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html) or one of the [AssumeRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html) API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials. The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see [IAM and STS character quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length). The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var policyInputList: [Swift.String]?
    /// A list of ARNs of Amazon Web Services resources to include in the simulation. If this parameter is not provided, then the value defaults to * (all resources). Each API in the ActionNames parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response. You can simulate resources that don't exist in your account. The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the ResourcePolicy parameter. If you include a ResourcePolicy, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    public var resourceArns: [Swift.String]?
    /// Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation. Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see [Supported platforms](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html) in the Amazon EC2 User Guide.
    ///
    /// * EC2-Classic-InstanceStore instance, image, security-group
    ///
    /// * EC2-Classic-EBS instance, image, security-group, volume
    ///
    /// * EC2-VPC-InstanceStore instance, image, security-group, network-interface
    ///
    /// * EC2-VPC-InstanceStore-Subnet instance, image, security-group, network-interface, subnet
    ///
    /// * EC2-VPC-EBS instance, image, security-group, network-interface, volume
    ///
    /// * EC2-VPC-EBS-Subnet instance, image, security-group, network-interface, subnet, volume
    public var resourceHandlingOption: Swift.String?
    /// An ARN representing the Amazon Web Services account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If ResourceOwner is specified, it is also used as the account owner of any ResourcePolicy included in the simulation. If the ResourceOwner parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in CallerArn. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user CallerArn. The ARN for an account uses the following syntax: arn:aws:iam::AWS-account-ID:root. For example, to represent the account with the 112233445566 ID, use the following ARN: arn:aws:iam::112233445566-ID:root.
    public var resourceOwner: Swift.String?
    /// A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation. The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see [IAM and STS character quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length). The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    public var resourcePolicy: Swift.String?

    public init (
        actionNames: [Swift.String]? = nil,
        callerArn: Swift.String? = nil,
        contextEntries: [IamClientTypes.ContextEntry]? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        permissionsBoundaryPolicyInputList: [Swift.String]? = nil,
        policyInputList: [Swift.String]? = nil,
        resourceArns: [Swift.String]? = nil,
        resourceHandlingOption: Swift.String? = nil,
        resourceOwner: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.actionNames = actionNames
        self.callerArn = callerArn
        self.contextEntries = contextEntries
        self.marker = marker
        self.maxItems = maxItems
        self.permissionsBoundaryPolicyInputList = permissionsBoundaryPolicyInputList
        self.policyInputList = policyInputList
        self.resourceArns = resourceArns
        self.resourceHandlingOption = resourceHandlingOption
        self.resourceOwner = resourceOwner
        self.resourcePolicy = resourcePolicy
    }
}

extension SimulateCustomPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SimulateCustomPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyEvaluation" : self = .policyEvaluationException(try PolicyEvaluationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SimulateCustomPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case policyEvaluationException(PolicyEvaluationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SimulateCustomPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SimulateCustomPolicyOutputResponse(evaluationResults: \(Swift.String(describing: evaluationResults)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension SimulateCustomPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SimulateCustomPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.evaluationResults = output.evaluationResults
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.evaluationResults = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [SimulatePrincipalPolicy] or [SimulateCustomPolicy] request.
public struct SimulateCustomPolicyOutputResponse: Swift.Equatable {
    /// The results of the simulation.
    public var evaluationResults: [IamClientTypes.EvaluationResult]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        evaluationResults: [IamClientTypes.EvaluationResult]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.evaluationResults = evaluationResults
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct SimulateCustomPolicyOutputResponseBody: Swift.Equatable {
    public let evaluationResults: [IamClientTypes.EvaluationResult]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension SimulateCustomPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationResults = "EvaluationResults"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SimulateCustomPolicyResult"))
        if containerValues.contains(.evaluationResults) {
            struct KeyVal0{struct member{}}
            let evaluationResultsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .evaluationResults)
            if let evaluationResultsWrappedContainer = evaluationResultsWrappedContainer {
                let evaluationResultsContainer = try evaluationResultsWrappedContainer.decodeIfPresent([IamClientTypes.EvaluationResult].self, forKey: .member)
                var evaluationResultsBuffer:[IamClientTypes.EvaluationResult]? = nil
                if let evaluationResultsContainer = evaluationResultsContainer {
                    evaluationResultsBuffer = [IamClientTypes.EvaluationResult]()
                    for structureContainer0 in evaluationResultsContainer {
                        evaluationResultsBuffer?.append(structureContainer0)
                    }
                }
                evaluationResults = evaluationResultsBuffer
            } else {
                evaluationResults = []
            }
        } else {
            evaluationResults = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension SimulatePrincipalPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SimulatePrincipalPolicyInput(actionNames: \(Swift.String(describing: actionNames)), callerArn: \(Swift.String(describing: callerArn)), contextEntries: \(Swift.String(describing: contextEntries)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), permissionsBoundaryPolicyInputList: \(Swift.String(describing: permissionsBoundaryPolicyInputList)), policyInputList: \(Swift.String(describing: policyInputList)), policySourceArn: \(Swift.String(describing: policySourceArn)), resourceArns: \(Swift.String(describing: resourceArns)), resourceHandlingOption: \(Swift.String(describing: resourceHandlingOption)), resourceOwner: \(Swift.String(describing: resourceOwner)), resourcePolicy: \(Swift.String(describing: resourcePolicy)))"}
}

extension SimulatePrincipalPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionNames = actionNames {
            var actionNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ActionNames"))
            for (index0, actionnametype0) in actionNames.enumerated() {
                try actionNamesContainer.encode(actionnametype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let callerArn = callerArn {
            try container.encode(callerArn, forKey: ClientRuntime.Key("CallerArn"))
        }
        if let contextEntries = contextEntries {
            var contextEntriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ContextEntries"))
            for (index0, contextentry0) in contextEntries.enumerated() {
                try contextEntriesContainer.encode(contextentry0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let permissionsBoundaryPolicyInputList = permissionsBoundaryPolicyInputList {
            var permissionsBoundaryPolicyInputListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PermissionsBoundaryPolicyInputList"))
            for (index0, policydocumenttype0) in permissionsBoundaryPolicyInputList.enumerated() {
                try permissionsBoundaryPolicyInputListContainer.encode(policydocumenttype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let policyInputList = policyInputList {
            var policyInputListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyInputList"))
            for (index0, policydocumenttype0) in policyInputList.enumerated() {
                try policyInputListContainer.encode(policydocumenttype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let policySourceArn = policySourceArn {
            try container.encode(policySourceArn, forKey: ClientRuntime.Key("PolicySourceArn"))
        }
        if let resourceArns = resourceArns {
            var resourceArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceArns"))
            for (index0, resourcenametype0) in resourceArns.enumerated() {
                try resourceArnsContainer.encode(resourcenametype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourceHandlingOption = resourceHandlingOption {
            try container.encode(resourceHandlingOption, forKey: ClientRuntime.Key("ResourceHandlingOption"))
        }
        if let resourceOwner = resourceOwner {
            try container.encode(resourceOwner, forKey: ClientRuntime.Key("ResourceOwner"))
        }
        if let resourcePolicy = resourcePolicy {
            try container.encode(resourcePolicy, forKey: ClientRuntime.Key("ResourcePolicy"))
        }
        try container.encode("SimulatePrincipalPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension SimulatePrincipalPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SimulatePrincipalPolicyInput: Swift.Equatable {
    /// A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as iam:CreateUser.
    /// This member is required.
    public var actionNames: [Swift.String]?
    /// The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a CallerArn, it defaults to the ARN of the user that you specify in PolicySourceArn, if you specified a user. If you include both a PolicySourceArn (for example, arn:aws:iam::123456789012:user/David) and a CallerArn (for example, arn:aws:iam::123456789012:user/Bob), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies. You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal. CallerArn is required if you include a ResourcePolicy and the PolicySourceArn is not the ARN for an IAM user. This is required so that the resource-based policy's Principal element has a value to use in evaluating the policy. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    public var callerArn: Swift.String?
    /// A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
    public var contextEntries: [IamClientTypes.ContextEntry]?
    /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
    public var marker: Swift.String?
    /// Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true, and Marker contains a value to include in the subsequent call that tells the service where to continue from.
    public var maxItems: Swift.Int?
    /// The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permissions boundary policy is used for the simulation. For more information about permissions boundaries, see [Permissions boundaries for IAM entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the IAM User Guide. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy. The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see [IAM and STS character quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length). The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    public var permissionsBoundaryPolicyInputList: [Swift.String]?
    /// An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    public var policyInputList: [Swift.String]?
    /// The Amazon Resource Name (ARN) of a user, group, or role whose policies you want to include in the simulation. If you specify a user, group, or role, the simulation includes all policies that are associated with that entity. If you specify a user, the simulation also includes all policies that are attached to any groups the user belongs to. The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see [IAM and STS character quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length). For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var policySourceArn: Swift.String?
    /// A list of ARNs of Amazon Web Services resources to include in the simulation. If this parameter is not provided, then the value defaults to * (all resources). Each API in the ActionNames parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response. You can simulate resources that don't exist in your account. The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the ResourcePolicy parameter. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    public var resourceArns: [Swift.String]?
    /// Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation. Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see [Supported platforms](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html) in the Amazon EC2 User Guide.
    ///
    /// * EC2-Classic-InstanceStore instance, image, security group
    ///
    /// * EC2-Classic-EBS instance, image, security group, volume
    ///
    /// * EC2-VPC-InstanceStore instance, image, security group, network interface
    ///
    /// * EC2-VPC-InstanceStore-Subnet instance, image, security group, network interface, subnet
    ///
    /// * EC2-VPC-EBS instance, image, security group, network interface, volume
    ///
    /// * EC2-VPC-EBS-Subnet instance, image, security group, network interface, subnet, volume
    public var resourceHandlingOption: Swift.String?
    /// An Amazon Web Services account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If ResourceOwner is specified, it is also used as the account owner of any ResourcePolicy included in the simulation. If the ResourceOwner parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in CallerArn. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user CallerArn.
    public var resourceOwner: Swift.String?
    /// A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation. The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see [IAM and STS character quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length). The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    public var resourcePolicy: Swift.String?

    public init (
        actionNames: [Swift.String]? = nil,
        callerArn: Swift.String? = nil,
        contextEntries: [IamClientTypes.ContextEntry]? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        permissionsBoundaryPolicyInputList: [Swift.String]? = nil,
        policyInputList: [Swift.String]? = nil,
        policySourceArn: Swift.String? = nil,
        resourceArns: [Swift.String]? = nil,
        resourceHandlingOption: Swift.String? = nil,
        resourceOwner: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.actionNames = actionNames
        self.callerArn = callerArn
        self.contextEntries = contextEntries
        self.marker = marker
        self.maxItems = maxItems
        self.permissionsBoundaryPolicyInputList = permissionsBoundaryPolicyInputList
        self.policyInputList = policyInputList
        self.policySourceArn = policySourceArn
        self.resourceArns = resourceArns
        self.resourceHandlingOption = resourceHandlingOption
        self.resourceOwner = resourceOwner
        self.resourcePolicy = resourcePolicy
    }
}

extension SimulatePrincipalPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SimulatePrincipalPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyEvaluation" : self = .policyEvaluationException(try PolicyEvaluationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SimulatePrincipalPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case policyEvaluationException(PolicyEvaluationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SimulatePrincipalPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SimulatePrincipalPolicyOutputResponse(evaluationResults: \(Swift.String(describing: evaluationResults)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)))"}
}

extension SimulatePrincipalPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SimulatePrincipalPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.evaluationResults = output.evaluationResults
            self.isTruncated = output.isTruncated
            self.marker = output.marker
        } else {
            self.evaluationResults = nil
            self.isTruncated = false
            self.marker = nil
        }
    }
}

/// Contains the response to a successful [SimulatePrincipalPolicy] or [SimulateCustomPolicy] request.
public struct SimulatePrincipalPolicyOutputResponse: Swift.Equatable {
    /// The results of the simulation.
    public var evaluationResults: [IamClientTypes.EvaluationResult]?
    /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.
    public var isTruncated: Swift.Bool
    /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
    public var marker: Swift.String?

    public init (
        evaluationResults: [IamClientTypes.EvaluationResult]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil
    )
    {
        self.evaluationResults = evaluationResults
        self.isTruncated = isTruncated
        self.marker = marker
    }
}

struct SimulatePrincipalPolicyOutputResponseBody: Swift.Equatable {
    public let evaluationResults: [IamClientTypes.EvaluationResult]?
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
}

extension SimulatePrincipalPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationResults = "EvaluationResults"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SimulatePrincipalPolicyResult"))
        if containerValues.contains(.evaluationResults) {
            struct KeyVal0{struct member{}}
            let evaluationResultsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .evaluationResults)
            if let evaluationResultsWrappedContainer = evaluationResultsWrappedContainer {
                let evaluationResultsContainer = try evaluationResultsWrappedContainer.decodeIfPresent([IamClientTypes.EvaluationResult].self, forKey: .member)
                var evaluationResultsBuffer:[IamClientTypes.EvaluationResult]? = nil
                if let evaluationResultsContainer = evaluationResultsContainer {
                    evaluationResultsBuffer = [IamClientTypes.EvaluationResult]()
                    for structureContainer0 in evaluationResultsContainer {
                        evaluationResultsBuffer?.append(structureContainer0)
                    }
                }
                evaluationResults = evaluationResultsBuffer
            } else {
                evaluationResults = []
            }
        } else {
            evaluationResults = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension IamClientTypes {
    public enum SortKeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lastAuthenticatedTimeAscending
        case lastAuthenticatedTimeDescending
        case serviceNamespaceAscending
        case serviceNamespaceDescending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortKeyType] {
            return [
                .lastAuthenticatedTimeAscending,
                .lastAuthenticatedTimeDescending,
                .serviceNamespaceAscending,
                .serviceNamespaceDescending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lastAuthenticatedTimeAscending: return "LAST_AUTHENTICATED_TIME_ASCENDING"
            case .lastAuthenticatedTimeDescending: return "LAST_AUTHENTICATED_TIME_DESCENDING"
            case .serviceNamespaceAscending: return "SERVICE_NAMESPACE_ASCENDING"
            case .serviceNamespaceDescending: return "SERVICE_NAMESPACE_DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortKeyType(rawValue: rawValue) ?? SortKeyType.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes.Statement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endPosition = "EndPosition"
        case sourcePolicyId = "SourcePolicyId"
        case sourcePolicyType = "SourcePolicyType"
        case startPosition = "StartPosition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endPosition = endPosition {
            try container.encode(endPosition, forKey: ClientRuntime.Key("EndPosition"))
        }
        if let sourcePolicyId = sourcePolicyId {
            try container.encode(sourcePolicyId, forKey: ClientRuntime.Key("SourcePolicyId"))
        }
        if let sourcePolicyType = sourcePolicyType {
            try container.encode(sourcePolicyType, forKey: ClientRuntime.Key("SourcePolicyType"))
        }
        if let startPosition = startPosition {
            try container.encode(startPosition, forKey: ClientRuntime.Key("StartPosition"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourcePolicyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourcePolicyId)
        sourcePolicyId = sourcePolicyIdDecoded
        let sourcePolicyTypeDecoded = try containerValues.decodeIfPresent(IamClientTypes.PolicySourceType.self, forKey: .sourcePolicyType)
        sourcePolicyType = sourcePolicyTypeDecoded
        let startPositionDecoded = try containerValues.decodeIfPresent(IamClientTypes.Position.self, forKey: .startPosition)
        startPosition = startPositionDecoded
        let endPositionDecoded = try containerValues.decodeIfPresent(IamClientTypes.Position.self, forKey: .endPosition)
        endPosition = endPositionDecoded
    }
}

extension IamClientTypes.Statement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Statement(endPosition: \(Swift.String(describing: endPosition)), sourcePolicyId: \(Swift.String(describing: sourcePolicyId)), sourcePolicyType: \(Swift.String(describing: sourcePolicyType)), startPosition: \(Swift.String(describing: startPosition)))"}
}

extension IamClientTypes {
    /// Contains a reference to a Statement element in a policy document that determines the result of the simulation. This data type is used by the MatchedStatements member of the [EvaluationResult] type.
    public struct Statement: Swift.Equatable {
        /// The row and column of the end of a Statement in an IAM policy.
        public var endPosition: IamClientTypes.Position?
        /// The identifier of the policy that was provided as an input.
        public var sourcePolicyId: Swift.String?
        /// The type of the policy.
        public var sourcePolicyType: IamClientTypes.PolicySourceType?
        /// The row and column of the beginning of the Statement in an IAM policy.
        public var startPosition: IamClientTypes.Position?

        public init (
            endPosition: IamClientTypes.Position? = nil,
            sourcePolicyId: Swift.String? = nil,
            sourcePolicyType: IamClientTypes.PolicySourceType? = nil,
            startPosition: IamClientTypes.Position? = nil
        )
        {
            self.endPosition = endPosition
            self.sourcePolicyId = sourcePolicyId
            self.sourcePolicyType = sourcePolicyType
            self.startPosition = startPosition
        }
    }

}

extension IamClientTypes {
    public enum StatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusType] {
            return [
                .active,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatusType(rawValue: rawValue) ?? StatusType.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes {
    public enum SummaryKeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accesskeysperuserquota
        case accountaccesskeyspresent
        case accountmfaenabled
        case accountsigningcertificatespresent
        case attachedpoliciespergroupquota
        case attachedpoliciesperrolequota
        case attachedpoliciesperuserquota
        case globalendpointtokenversion
        case grouppolicysizequota
        case groups
        case groupsperuserquota
        case groupsquota
        case mfadevices
        case mfadevicesinuse
        case policies
        case policiesquota
        case policysizequota
        case policyversionsinuse
        case policyversionsinusequota
        case servercertificates
        case servercertificatesquota
        case signingcertificatesperuserquota
        case userpolicysizequota
        case users
        case usersquota
        case versionsperpolicyquota
        case sdkUnknown(Swift.String)

        public static var allCases: [SummaryKeyType] {
            return [
                .accesskeysperuserquota,
                .accountaccesskeyspresent,
                .accountmfaenabled,
                .accountsigningcertificatespresent,
                .attachedpoliciespergroupquota,
                .attachedpoliciesperrolequota,
                .attachedpoliciesperuserquota,
                .globalendpointtokenversion,
                .grouppolicysizequota,
                .groups,
                .groupsperuserquota,
                .groupsquota,
                .mfadevices,
                .mfadevicesinuse,
                .policies,
                .policiesquota,
                .policysizequota,
                .policyversionsinuse,
                .policyversionsinusequota,
                .servercertificates,
                .servercertificatesquota,
                .signingcertificatesperuserquota,
                .userpolicysizequota,
                .users,
                .usersquota,
                .versionsperpolicyquota,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accesskeysperuserquota: return "AccessKeysPerUserQuota"
            case .accountaccesskeyspresent: return "AccountAccessKeysPresent"
            case .accountmfaenabled: return "AccountMFAEnabled"
            case .accountsigningcertificatespresent: return "AccountSigningCertificatesPresent"
            case .attachedpoliciespergroupquota: return "AttachedPoliciesPerGroupQuota"
            case .attachedpoliciesperrolequota: return "AttachedPoliciesPerRoleQuota"
            case .attachedpoliciesperuserquota: return "AttachedPoliciesPerUserQuota"
            case .globalendpointtokenversion: return "GlobalEndpointTokenVersion"
            case .grouppolicysizequota: return "GroupPolicySizeQuota"
            case .groups: return "Groups"
            case .groupsperuserquota: return "GroupsPerUserQuota"
            case .groupsquota: return "GroupsQuota"
            case .mfadevices: return "MFADevices"
            case .mfadevicesinuse: return "MFADevicesInUse"
            case .policies: return "Policies"
            case .policiesquota: return "PoliciesQuota"
            case .policysizequota: return "PolicySizeQuota"
            case .policyversionsinuse: return "PolicyVersionsInUse"
            case .policyversionsinusequota: return "PolicyVersionsInUseQuota"
            case .servercertificates: return "ServerCertificates"
            case .servercertificatesquota: return "ServerCertificatesQuota"
            case .signingcertificatesperuserquota: return "SigningCertificatesPerUserQuota"
            case .userpolicysizequota: return "UserPolicySizeQuota"
            case .users: return "Users"
            case .usersquota: return "UsersQuota"
            case .versionsperpolicyquota: return "VersionsPerPolicyQuota"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SummaryKeyType(rawValue: rawValue) ?? SummaryKeyType.sdkUnknown(rawValue)
        }
    }
}

extension IamClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension IamClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension IamClientTypes {
    /// A structure that represents user-provided metadata that can be associated with an IAM resource. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
    public struct Tag: Swift.Equatable {
        /// The key name that can be used to look up or retrieve the associated value. For example, Department or Cost Center are common choices.
        /// This member is required.
        public var key: Swift.String?
        /// The value associated with this tag. For example, tags with a key name of Department could have values such as Human Resources, Accounting, and Support. Tags with a key name of Cost Center might have values that consist of the number associated with the different cost centers in your company. Typically, many resources have tags with the same key name but with different values. Amazon Web Services always interprets the tag Value as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagInstanceProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagInstanceProfileInput(instanceProfileName: \(Swift.String(describing: instanceProfileName)), tags: \(Swift.String(describing: tags)))"}
}

extension TagInstanceProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceProfileName = instanceProfileName {
            try container.encode(instanceProfileName, forKey: ClientRuntime.Key("InstanceProfileName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("TagInstanceProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension TagInstanceProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagInstanceProfileInput: Swift.Equatable {
    /// The name of the IAM instance profile to which you want to add tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var instanceProfileName: Swift.String?
    /// The list of tags that you want to attach to the IAM instance profile. Each tag consists of a key name and an associated value.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        instanceProfileName: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.instanceProfileName = instanceProfileName
        self.tags = tags
    }
}

extension TagInstanceProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TagInstanceProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagInstanceProfileOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagInstanceProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagInstanceProfileOutputResponse()"}
}

extension TagInstanceProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagInstanceProfileOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagInstanceProfileOutputResponseBody: Swift.Equatable {
}

extension TagInstanceProfileOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension TagMFADeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagMFADeviceInput(serialNumber: \(Swift.String(describing: serialNumber)), tags: \(Swift.String(describing: tags)))"}
}

extension TagMFADeviceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serialNumber = serialNumber {
            try container.encode(serialNumber, forKey: ClientRuntime.Key("SerialNumber"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("TagMFADevice", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension TagMFADeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagMFADeviceInput: Swift.Equatable {
    /// The unique identifier for the IAM virtual MFA device to which you want to add tags. For virtual MFA devices, the serial number is the same as the ARN. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var serialNumber: Swift.String?
    /// The list of tags that you want to attach to the IAM virtual MFA device. Each tag consists of a key name and an associated value.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        serialNumber: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.serialNumber = serialNumber
        self.tags = tags
    }
}

extension TagMFADeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TagMFADeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagMFADeviceOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagMFADeviceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagMFADeviceOutputResponse()"}
}

extension TagMFADeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagMFADeviceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagMFADeviceOutputResponseBody: Swift.Equatable {
}

extension TagMFADeviceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension TagOpenIDConnectProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagOpenIDConnectProviderInput(openIDConnectProviderArn: \(Swift.String(describing: openIDConnectProviderArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagOpenIDConnectProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let openIDConnectProviderArn = openIDConnectProviderArn {
            try container.encode(openIDConnectProviderArn, forKey: ClientRuntime.Key("OpenIDConnectProviderArn"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("TagOpenIDConnectProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension TagOpenIDConnectProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagOpenIDConnectProviderInput: Swift.Equatable {
    /// The ARN of the OIDC identity provider in IAM to which you want to add tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var openIDConnectProviderArn: Swift.String?
    /// The list of tags that you want to attach to the OIDC identity provider in IAM. Each tag consists of a key name and an associated value.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        openIDConnectProviderArn: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.openIDConnectProviderArn = openIDConnectProviderArn
        self.tags = tags
    }
}

extension TagOpenIDConnectProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TagOpenIDConnectProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagOpenIDConnectProviderOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagOpenIDConnectProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagOpenIDConnectProviderOutputResponse()"}
}

extension TagOpenIDConnectProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagOpenIDConnectProviderOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagOpenIDConnectProviderOutputResponseBody: Swift.Equatable {
}

extension TagOpenIDConnectProviderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension TagPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagPolicyInput(policyArn: \(Swift.String(describing: policyArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("TagPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension TagPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagPolicyInput: Swift.Equatable {
    /// The ARN of the IAM customer managed policy to which you want to add tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyArn: Swift.String?
    /// The list of tags that you want to attach to the IAM customer managed policy. Each tag consists of a key name and an associated value.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        policyArn: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.policyArn = policyArn
        self.tags = tags
    }
}

extension TagPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TagPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagPolicyOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagPolicyOutputResponse()"}
}

extension TagPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagPolicyOutputResponseBody: Swift.Equatable {
}

extension TagPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension TagRoleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagRoleInput(roleName: \(Swift.String(describing: roleName)), tags: \(Swift.String(describing: tags)))"}
}

extension TagRoleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("TagRole", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension TagRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagRoleInput: Swift.Equatable {
    /// The name of the IAM role to which you want to add tags. This parameter accepts (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?
    /// The list of tags that you want to attach to the IAM role. Each tag consists of a key name and an associated value.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        roleName: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.roleName = roleName
        self.tags = tags
    }
}

extension TagRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TagRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagRoleOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagRoleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagRoleOutputResponse()"}
}

extension TagRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagRoleOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagRoleOutputResponseBody: Swift.Equatable {
}

extension TagRoleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension TagSAMLProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagSAMLProviderInput(sAMLProviderArn: \(Swift.String(describing: sAMLProviderArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagSAMLProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sAMLProviderArn = sAMLProviderArn {
            try container.encode(sAMLProviderArn, forKey: ClientRuntime.Key("SAMLProviderArn"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("TagSAMLProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension TagSAMLProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagSAMLProviderInput: Swift.Equatable {
    /// The ARN of the SAML identity provider in IAM to which you want to add tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var sAMLProviderArn: Swift.String?
    /// The list of tags that you want to attach to the SAML identity provider in IAM. Each tag consists of a key name and an associated value.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        sAMLProviderArn: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.sAMLProviderArn = sAMLProviderArn
        self.tags = tags
    }
}

extension TagSAMLProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TagSAMLProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagSAMLProviderOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagSAMLProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagSAMLProviderOutputResponse()"}
}

extension TagSAMLProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagSAMLProviderOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagSAMLProviderOutputResponseBody: Swift.Equatable {
}

extension TagSAMLProviderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension TagServerCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagServerCertificateInput(serverCertificateName: \(Swift.String(describing: serverCertificateName)), tags: \(Swift.String(describing: tags)))"}
}

extension TagServerCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serverCertificateName = serverCertificateName {
            try container.encode(serverCertificateName, forKey: ClientRuntime.Key("ServerCertificateName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("TagServerCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension TagServerCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagServerCertificateInput: Swift.Equatable {
    /// The name of the IAM server certificate to which you want to add tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var serverCertificateName: Swift.String?
    /// The list of tags that you want to attach to the IAM server certificate. Each tag consists of a key name and an associated value.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?

    public init (
        serverCertificateName: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.serverCertificateName = serverCertificateName
        self.tags = tags
    }
}

extension TagServerCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TagServerCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagServerCertificateOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagServerCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagServerCertificateOutputResponse()"}
}

extension TagServerCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagServerCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagServerCertificateOutputResponseBody: Swift.Equatable {
}

extension TagServerCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension TagUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagUserInput(tags: \(Swift.String(describing: tags)), userName: \(Swift.String(describing: userName)))"}
}

extension TagUserInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("TagUser", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension TagUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagUserInput: Swift.Equatable {
    /// The list of tags that you want to attach to the IAM user. Each tag consists of a key name and an associated value.
    /// This member is required.
    public var tags: [IamClientTypes.Tag]?
    /// The name of the IAM user to which you want to add tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        tags: [IamClientTypes.Tag]? = nil,
        userName: Swift.String? = nil
    )
    {
        self.tags = tags
        self.userName = userName
    }
}

extension TagUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TagUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagUserOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagUserOutputResponse()"}
}

extension TagUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagUserOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagUserOutputResponseBody: Swift.Equatable {
}

extension TagUserOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IamClientTypes.TrackedActionLastAccessed: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "ActionName"
        case lastAccessedEntity = "LastAccessedEntity"
        case lastAccessedRegion = "LastAccessedRegion"
        case lastAccessedTime = "LastAccessedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionName = actionName {
            try container.encode(actionName, forKey: ClientRuntime.Key("ActionName"))
        }
        if let lastAccessedEntity = lastAccessedEntity {
            try container.encode(lastAccessedEntity, forKey: ClientRuntime.Key("LastAccessedEntity"))
        }
        if let lastAccessedRegion = lastAccessedRegion {
            try container.encode(lastAccessedRegion, forKey: ClientRuntime.Key("LastAccessedRegion"))
        }
        if let lastAccessedTime = lastAccessedTime {
            try container.encode(ClientRuntime.TimestampWrapper(lastAccessedTime, format: .dateTime), forKey: ClientRuntime.Key("lastAccessedTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let lastAccessedEntityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAccessedEntity)
        lastAccessedEntity = lastAccessedEntityDecoded
        let lastAccessedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAccessedTime)
        var lastAccessedTimeBuffer:ClientRuntime.Date? = nil
        if let lastAccessedTimeDecoded = lastAccessedTimeDecoded {
            lastAccessedTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastAccessedTimeDecoded, format: .dateTime)
        }
        lastAccessedTime = lastAccessedTimeBuffer
        let lastAccessedRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAccessedRegion)
        lastAccessedRegion = lastAccessedRegionDecoded
    }
}

extension IamClientTypes.TrackedActionLastAccessed: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrackedActionLastAccessed(actionName: \(Swift.String(describing: actionName)), lastAccessedEntity: \(Swift.String(describing: lastAccessedEntity)), lastAccessedRegion: \(Swift.String(describing: lastAccessedRegion)), lastAccessedTime: \(Swift.String(describing: lastAccessedTime)))"}
}

extension IamClientTypes {
    /// Contains details about the most recent attempt to access an action within the service. This data type is used as a response element in the [GetServiceLastAccessedDetails] operation.
    public struct TrackedActionLastAccessed: Swift.Equatable {
        /// The name of the tracked action to which access was attempted. Tracked actions are actions that report activity to IAM.
        public var actionName: Swift.String?
        /// The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources. For more information about ARNs, go to [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var lastAccessedEntity: Swift.String?
        /// The Region from which the authenticated entity (user or role) last attempted to access the tracked action. Amazon Web Services does not report unauthenticated requests. This field is null if no IAM entities attempted to access the service within the [reporting period](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period).
        public var lastAccessedRegion: Swift.String?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when an authenticated entity most recently attempted to access the tracked service. Amazon Web Services does not report unauthenticated requests. This field is null if no IAM entities attempted to access the service within the [reporting period](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period).
        public var lastAccessedTime: ClientRuntime.Date?

        public init (
            actionName: Swift.String? = nil,
            lastAccessedEntity: Swift.String? = nil,
            lastAccessedRegion: Swift.String? = nil,
            lastAccessedTime: ClientRuntime.Date? = nil
        )
        {
            self.actionName = actionName
            self.lastAccessedEntity = lastAccessedEntity
            self.lastAccessedRegion = lastAccessedRegion
            self.lastAccessedTime = lastAccessedTime
        }
    }

}

extension UnmodifiableEntityException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnmodifiableEntityException(message: \(Swift.String(describing: message)))"}
}

extension UnmodifiableEntityException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<UnmodifiableEntityExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.
public struct UnmodifiableEntityException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnmodifiableEntityExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension UnmodifiableEntityExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnrecognizedPublicKeyEncodingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnrecognizedPublicKeyEncodingException(message: \(Swift.String(describing: message)))"}
}

extension UnrecognizedPublicKeyEncodingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<UnrecognizedPublicKeyEncodingExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the public key encoding format is unsupported or unrecognized.
public struct UnrecognizedPublicKeyEncodingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnrecognizedPublicKeyEncodingExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension UnrecognizedPublicKeyEncodingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagInstanceProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagInstanceProfileInput(instanceProfileName: \(Swift.String(describing: instanceProfileName)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagInstanceProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceProfileName = instanceProfileName {
            try container.encode(instanceProfileName, forKey: ClientRuntime.Key("InstanceProfileName"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
            for (index0, tagkeytype0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(tagkeytype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("UntagInstanceProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UntagInstanceProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagInstanceProfileInput: Swift.Equatable {
    /// The name of the IAM instance profile from which you want to remove tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var instanceProfileName: Swift.String?
    /// A list of key names as a simple array of strings. The tags with matching keys are removed from the specified instance profile.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        instanceProfileName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.instanceProfileName = instanceProfileName
        self.tagKeys = tagKeys
    }
}

extension UntagInstanceProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UntagInstanceProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagInstanceProfileOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagInstanceProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagInstanceProfileOutputResponse()"}
}

extension UntagInstanceProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagInstanceProfileOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagInstanceProfileOutputResponseBody: Swift.Equatable {
}

extension UntagInstanceProfileOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagMFADeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagMFADeviceInput(serialNumber: \(Swift.String(describing: serialNumber)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagMFADeviceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serialNumber = serialNumber {
            try container.encode(serialNumber, forKey: ClientRuntime.Key("SerialNumber"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
            for (index0, tagkeytype0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(tagkeytype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("UntagMFADevice", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UntagMFADeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagMFADeviceInput: Swift.Equatable {
    /// The unique identifier for the IAM virtual MFA device from which you want to remove tags. For virtual MFA devices, the serial number is the same as the ARN. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var serialNumber: Swift.String?
    /// A list of key names as a simple array of strings. The tags with matching keys are removed from the specified instance profile.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        serialNumber: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.serialNumber = serialNumber
        self.tagKeys = tagKeys
    }
}

extension UntagMFADeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UntagMFADeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagMFADeviceOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagMFADeviceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagMFADeviceOutputResponse()"}
}

extension UntagMFADeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagMFADeviceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagMFADeviceOutputResponseBody: Swift.Equatable {
}

extension UntagMFADeviceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagOpenIDConnectProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagOpenIDConnectProviderInput(openIDConnectProviderArn: \(Swift.String(describing: openIDConnectProviderArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagOpenIDConnectProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let openIDConnectProviderArn = openIDConnectProviderArn {
            try container.encode(openIDConnectProviderArn, forKey: ClientRuntime.Key("OpenIDConnectProviderArn"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
            for (index0, tagkeytype0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(tagkeytype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("UntagOpenIDConnectProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UntagOpenIDConnectProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagOpenIDConnectProviderInput: Swift.Equatable {
    /// The ARN of the OIDC provider in IAM from which you want to remove tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var openIDConnectProviderArn: Swift.String?
    /// A list of key names as a simple array of strings. The tags with matching keys are removed from the specified OIDC provider.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        openIDConnectProviderArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.openIDConnectProviderArn = openIDConnectProviderArn
        self.tagKeys = tagKeys
    }
}

extension UntagOpenIDConnectProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UntagOpenIDConnectProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagOpenIDConnectProviderOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagOpenIDConnectProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagOpenIDConnectProviderOutputResponse()"}
}

extension UntagOpenIDConnectProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagOpenIDConnectProviderOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagOpenIDConnectProviderOutputResponseBody: Swift.Equatable {
}

extension UntagOpenIDConnectProviderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagPolicyInput(policyArn: \(Swift.String(describing: policyArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyArn = policyArn {
            try container.encode(policyArn, forKey: ClientRuntime.Key("PolicyArn"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
            for (index0, tagkeytype0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(tagkeytype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("UntagPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UntagPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagPolicyInput: Swift.Equatable {
    /// The ARN of the IAM customer managed policy from which you want to remove tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var policyArn: Swift.String?
    /// A list of key names as a simple array of strings. The tags with matching keys are removed from the specified policy.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        policyArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.policyArn = policyArn
        self.tagKeys = tagKeys
    }
}

extension UntagPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UntagPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagPolicyOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagPolicyOutputResponse()"}
}

extension UntagPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagPolicyOutputResponseBody: Swift.Equatable {
}

extension UntagPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagRoleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagRoleInput(roleName: \(Swift.String(describing: roleName)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagRoleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
            for (index0, tagkeytype0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(tagkeytype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("UntagRole", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UntagRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagRoleInput: Swift.Equatable {
    /// The name of the IAM role from which you want to remove tags. This parameter accepts (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?
    /// A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        roleName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.roleName = roleName
        self.tagKeys = tagKeys
    }
}

extension UntagRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UntagRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagRoleOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagRoleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagRoleOutputResponse()"}
}

extension UntagRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagRoleOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagRoleOutputResponseBody: Swift.Equatable {
}

extension UntagRoleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagSAMLProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagSAMLProviderInput(sAMLProviderArn: \(Swift.String(describing: sAMLProviderArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagSAMLProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sAMLProviderArn = sAMLProviderArn {
            try container.encode(sAMLProviderArn, forKey: ClientRuntime.Key("SAMLProviderArn"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
            for (index0, tagkeytype0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(tagkeytype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("UntagSAMLProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UntagSAMLProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagSAMLProviderInput: Swift.Equatable {
    /// The ARN of the SAML identity provider in IAM from which you want to remove tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var sAMLProviderArn: Swift.String?
    /// A list of key names as a simple array of strings. The tags with matching keys are removed from the specified SAML identity provider.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        sAMLProviderArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.sAMLProviderArn = sAMLProviderArn
        self.tagKeys = tagKeys
    }
}

extension UntagSAMLProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UntagSAMLProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagSAMLProviderOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagSAMLProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagSAMLProviderOutputResponse()"}
}

extension UntagSAMLProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagSAMLProviderOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagSAMLProviderOutputResponseBody: Swift.Equatable {
}

extension UntagSAMLProviderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagServerCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagServerCertificateInput(serverCertificateName: \(Swift.String(describing: serverCertificateName)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagServerCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serverCertificateName = serverCertificateName {
            try container.encode(serverCertificateName, forKey: ClientRuntime.Key("ServerCertificateName"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
            for (index0, tagkeytype0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(tagkeytype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("UntagServerCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UntagServerCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagServerCertificateInput: Swift.Equatable {
    /// The name of the IAM server certificate from which you want to remove tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var serverCertificateName: Swift.String?
    /// A list of key names as a simple array of strings. The tags with matching keys are removed from the specified IAM server certificate.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        serverCertificateName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.serverCertificateName = serverCertificateName
        self.tagKeys = tagKeys
    }
}

extension UntagServerCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UntagServerCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagServerCertificateOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagServerCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagServerCertificateOutputResponse()"}
}

extension UntagServerCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagServerCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagServerCertificateOutputResponseBody: Swift.Equatable {
}

extension UntagServerCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagUserInput(tagKeys: \(Swift.String(describing: tagKeys)), userName: \(Swift.String(describing: userName)))"}
}

extension UntagUserInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
            for (index0, tagkeytype0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(tagkeytype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("UntagUser", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UntagUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagUserInput: Swift.Equatable {
    /// A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
    /// This member is required.
    public var tagKeys: [Swift.String]?
    /// The name of the IAM user from which you want to remove tags. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        tagKeys: [Swift.String]? = nil,
        userName: Swift.String? = nil
    )
    {
        self.tagKeys = tagKeys
        self.userName = userName
    }
}

extension UntagUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UntagUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagUserOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagUserOutputResponse()"}
}

extension UntagUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagUserOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagUserOutputResponseBody: Swift.Equatable {
}

extension UntagUserOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateAccessKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAccessKeyInput(accessKeyId: \(Swift.String(describing: accessKeyId)), status: \(Swift.String(describing: status)), userName: \(Swift.String(describing: userName)))"}
}

extension UpdateAccessKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accessKeyId = accessKeyId {
            try container.encode(accessKeyId, forKey: ClientRuntime.Key("AccessKeyId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("UpdateAccessKey", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateAccessKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateAccessKeyInput: Swift.Equatable {
    /// The access key ID of the secret access key you want to update. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that can consist of any upper or lowercased letter or digit.
    /// This member is required.
    public var accessKeyId: Swift.String?
    /// The status you want to assign to the secret access key. Active means that the key can be used for programmatic calls to Amazon Web Services, while Inactive means that the key cannot be used.
    /// This member is required.
    public var status: IamClientTypes.StatusType?
    /// The name of the user whose key you want to update. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        accessKeyId: Swift.String? = nil,
        status: IamClientTypes.StatusType? = nil,
        userName: Swift.String? = nil
    )
    {
        self.accessKeyId = accessKeyId
        self.status = status
        self.userName = userName
    }
}

extension UpdateAccessKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateAccessKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAccessKeyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAccessKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAccessKeyOutputResponse()"}
}

extension UpdateAccessKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAccessKeyOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateAccessKeyOutputResponseBody: Swift.Equatable {
}

extension UpdateAccessKeyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateAccountPasswordPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAccountPasswordPolicyInput(allowUsersToChangePassword: \(Swift.String(describing: allowUsersToChangePassword)), hardExpiry: \(Swift.String(describing: hardExpiry)), maxPasswordAge: \(Swift.String(describing: maxPasswordAge)), minimumPasswordLength: \(Swift.String(describing: minimumPasswordLength)), passwordReusePrevention: \(Swift.String(describing: passwordReusePrevention)), requireLowercaseCharacters: \(Swift.String(describing: requireLowercaseCharacters)), requireNumbers: \(Swift.String(describing: requireNumbers)), requireSymbols: \(Swift.String(describing: requireSymbols)), requireUppercaseCharacters: \(Swift.String(describing: requireUppercaseCharacters)))"}
}

extension UpdateAccountPasswordPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if allowUsersToChangePassword != false {
            try container.encode(allowUsersToChangePassword, forKey: ClientRuntime.Key("AllowUsersToChangePassword"))
        }
        if let hardExpiry = hardExpiry {
            try container.encode(hardExpiry, forKey: ClientRuntime.Key("HardExpiry"))
        }
        if let maxPasswordAge = maxPasswordAge {
            try container.encode(maxPasswordAge, forKey: ClientRuntime.Key("MaxPasswordAge"))
        }
        if let minimumPasswordLength = minimumPasswordLength {
            try container.encode(minimumPasswordLength, forKey: ClientRuntime.Key("MinimumPasswordLength"))
        }
        if let passwordReusePrevention = passwordReusePrevention {
            try container.encode(passwordReusePrevention, forKey: ClientRuntime.Key("PasswordReusePrevention"))
        }
        if requireLowercaseCharacters != false {
            try container.encode(requireLowercaseCharacters, forKey: ClientRuntime.Key("RequireLowercaseCharacters"))
        }
        if requireNumbers != false {
            try container.encode(requireNumbers, forKey: ClientRuntime.Key("RequireNumbers"))
        }
        if requireSymbols != false {
            try container.encode(requireSymbols, forKey: ClientRuntime.Key("RequireSymbols"))
        }
        if requireUppercaseCharacters != false {
            try container.encode(requireUppercaseCharacters, forKey: ClientRuntime.Key("RequireUppercaseCharacters"))
        }
        try container.encode("UpdateAccountPasswordPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateAccountPasswordPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateAccountPasswordPolicyInput: Swift.Equatable {
    /// Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own passwords. For more information, see [Letting IAM users change their own passwords](https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html) in the IAM User Guide. If you do not specify a value for this parameter, then the operation uses the default value of false. The result is that IAM users in the account do not automatically have permissions to change their own password.
    public var allowUsersToChangePassword: Swift.Bool
    /// Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password. If you do not specify a value for this parameter, then the operation uses the default value of false. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.
    public var hardExpiry: Swift.Bool?
    /// The number of days that an IAM user password is valid. If you do not specify a value for this parameter, then the operation uses the default value of 0. The result is that IAM user passwords never expire.
    public var maxPasswordAge: Swift.Int?
    /// The minimum number of characters allowed in an IAM user password. If you do not specify a value for this parameter, then the operation uses the default value of 6.
    public var minimumPasswordLength: Swift.Int?
    /// Specifies the number of previous passwords that IAM users are prevented from reusing. If you do not specify a value for this parameter, then the operation uses the default value of 0. The result is that IAM users are not prevented from reusing previous passwords.
    public var passwordReusePrevention: Swift.Int?
    /// Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z). If you do not specify a value for this parameter, then the operation uses the default value of false. The result is that passwords do not require at least one lowercase character.
    public var requireLowercaseCharacters: Swift.Bool
    /// Specifies whether IAM user passwords must contain at least one numeric character (0 to 9). If you do not specify a value for this parameter, then the operation uses the default value of false. The result is that passwords do not require at least one numeric character.
    public var requireNumbers: Swift.Bool
    /// Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters: ! @ # $ % ^ & * ( ) _ + - = [ ] { } | ' If you do not specify a value for this parameter, then the operation uses the default value of false. The result is that passwords do not require at least one symbol character.
    public var requireSymbols: Swift.Bool
    /// Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z). If you do not specify a value for this parameter, then the operation uses the default value of false. The result is that passwords do not require at least one uppercase character.
    public var requireUppercaseCharacters: Swift.Bool

    public init (
        allowUsersToChangePassword: Swift.Bool = false,
        hardExpiry: Swift.Bool? = nil,
        maxPasswordAge: Swift.Int? = nil,
        minimumPasswordLength: Swift.Int? = nil,
        passwordReusePrevention: Swift.Int? = nil,
        requireLowercaseCharacters: Swift.Bool = false,
        requireNumbers: Swift.Bool = false,
        requireSymbols: Swift.Bool = false,
        requireUppercaseCharacters: Swift.Bool = false
    )
    {
        self.allowUsersToChangePassword = allowUsersToChangePassword
        self.hardExpiry = hardExpiry
        self.maxPasswordAge = maxPasswordAge
        self.minimumPasswordLength = minimumPasswordLength
        self.passwordReusePrevention = passwordReusePrevention
        self.requireLowercaseCharacters = requireLowercaseCharacters
        self.requireNumbers = requireNumbers
        self.requireSymbols = requireSymbols
        self.requireUppercaseCharacters = requireUppercaseCharacters
    }
}

extension UpdateAccountPasswordPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateAccountPasswordPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocument" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAccountPasswordPolicyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAccountPasswordPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAccountPasswordPolicyOutputResponse()"}
}

extension UpdateAccountPasswordPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAccountPasswordPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateAccountPasswordPolicyOutputResponseBody: Swift.Equatable {
}

extension UpdateAccountPasswordPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateAssumeRolePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAssumeRolePolicyInput(policyDocument: \(Swift.String(describing: policyDocument)), roleName: \(Swift.String(describing: roleName)))"}
}

extension UpdateAssumeRolePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyDocument = policyDocument {
            try container.encode(policyDocument, forKey: ClientRuntime.Key("PolicyDocument"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("UpdateAssumeRolePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateAssumeRolePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateAssumeRolePolicyInput: Swift.Equatable {
    /// The policy that grants an entity permission to assume the role. You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var policyDocument: Swift.String?
    /// The name of the role to update with the new policy. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        policyDocument: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.roleName = roleName
    }
}

extension UpdateAssumeRolePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateAssumeRolePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocument" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAssumeRolePolicyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAssumeRolePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAssumeRolePolicyOutputResponse()"}
}

extension UpdateAssumeRolePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAssumeRolePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateAssumeRolePolicyOutputResponseBody: Swift.Equatable {
}

extension UpdateAssumeRolePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateGroupInput(groupName: \(Swift.String(describing: groupName)), newGroupName: \(Swift.String(describing: newGroupName)), newPath: \(Swift.String(describing: newPath)))"}
}

extension UpdateGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let newGroupName = newGroupName {
            try container.encode(newGroupName, forKey: ClientRuntime.Key("NewGroupName"))
        }
        if let newPath = newPath {
            try container.encode(newPath, forKey: ClientRuntime.Key("NewPath"))
        }
        try container.encode("UpdateGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateGroupInput: Swift.Equatable {
    /// Name of the IAM group to update. If you're changing the name of the group, this is the original name. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var groupName: Swift.String?
    /// New name for the IAM group. Only include this if changing the group's name. IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".
    public var newGroupName: Swift.String?
    /// New path for the IAM group. Only include this if changing the group's path. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var newPath: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        newGroupName: Swift.String? = nil,
        newPath: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.newGroupName = newGroupName
        self.newPath = newPath
    }
}

extension UpdateGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateGroupOutputError: Swift.Error, Swift.Equatable {
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateGroupOutputResponse()"}
}

extension UpdateGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateGroupOutputResponseBody: Swift.Equatable {
}

extension UpdateGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateLoginProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLoginProfileInput(password: \(Swift.String(describing: password)), passwordResetRequired: \(Swift.String(describing: passwordResetRequired)), userName: \(Swift.String(describing: userName)))"}
}

extension UpdateLoginProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let password = password {
            try container.encode(password, forKey: ClientRuntime.Key("Password"))
        }
        if let passwordResetRequired = passwordResetRequired {
            try container.encode(passwordResetRequired, forKey: ClientRuntime.Key("PasswordResetRequired"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("UpdateLoginProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateLoginProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateLoginProfileInput: Swift.Equatable {
    /// The new password for the specified IAM user. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    ///
    ///
    /// However, the format can be further restricted by the account administrator by setting a password policy on the Amazon Web Services account. For more information, see [UpdateAccountPasswordPolicy].
    public var password: Swift.String?
    /// Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
    public var passwordResetRequired: Swift.Bool?
    /// The name of the user whose password you want to update. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        password: Swift.String? = nil,
        passwordResetRequired: Swift.Bool? = nil,
        userName: Swift.String? = nil
    )
    {
        self.password = password
        self.passwordResetRequired = passwordResetRequired
        self.userName = userName
    }
}

extension UpdateLoginProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateLoginProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityTemporarilyUnmodifiable" : self = .entityTemporarilyUnmodifiableException(try EntityTemporarilyUnmodifiableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordPolicyViolation" : self = .passwordPolicyViolationException(try PasswordPolicyViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateLoginProfileOutputError: Swift.Error, Swift.Equatable {
    case entityTemporarilyUnmodifiableException(EntityTemporarilyUnmodifiableException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case passwordPolicyViolationException(PasswordPolicyViolationException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateLoginProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLoginProfileOutputResponse()"}
}

extension UpdateLoginProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateLoginProfileOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateLoginProfileOutputResponseBody: Swift.Equatable {
}

extension UpdateLoginProfileOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateOpenIDConnectProviderThumbprintInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateOpenIDConnectProviderThumbprintInput(openIDConnectProviderArn: \(Swift.String(describing: openIDConnectProviderArn)), thumbprintList: \(Swift.String(describing: thumbprintList)))"}
}

extension UpdateOpenIDConnectProviderThumbprintInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let openIDConnectProviderArn = openIDConnectProviderArn {
            try container.encode(openIDConnectProviderArn, forKey: ClientRuntime.Key("OpenIDConnectProviderArn"))
        }
        if let thumbprintList = thumbprintList {
            var thumbprintListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ThumbprintList"))
            for (index0, thumbprinttype0) in thumbprintList.enumerated() {
                try thumbprintListContainer.encode(thumbprinttype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("UpdateOpenIDConnectProviderThumbprint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateOpenIDConnectProviderThumbprintInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateOpenIDConnectProviderThumbprintInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM OIDC provider resource object for which you want to update the thumbprint. You can get a list of OIDC provider ARNs by using the [ListOpenIDConnectProviders] operation. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var openIDConnectProviderArn: Swift.String?
    /// A list of certificate thumbprints that are associated with the specified IAM OpenID Connect provider. For more information, see [CreateOpenIDConnectProvider].
    /// This member is required.
    public var thumbprintList: [Swift.String]?

    public init (
        openIDConnectProviderArn: Swift.String? = nil,
        thumbprintList: [Swift.String]? = nil
    )
    {
        self.openIDConnectProviderArn = openIDConnectProviderArn
        self.thumbprintList = thumbprintList
    }
}

extension UpdateOpenIDConnectProviderThumbprintOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateOpenIDConnectProviderThumbprintOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateOpenIDConnectProviderThumbprintOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateOpenIDConnectProviderThumbprintOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateOpenIDConnectProviderThumbprintOutputResponse()"}
}

extension UpdateOpenIDConnectProviderThumbprintOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateOpenIDConnectProviderThumbprintOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateOpenIDConnectProviderThumbprintOutputResponseBody: Swift.Equatable {
}

extension UpdateOpenIDConnectProviderThumbprintOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateRoleDescriptionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoleDescriptionInput(description: \(Swift.String(describing: description)), roleName: \(Swift.String(describing: roleName)))"}
}

extension UpdateRoleDescriptionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("UpdateRoleDescription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateRoleDescriptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRoleDescriptionInput: Swift.Equatable {
    /// The new description that you want to apply to the specified role.
    /// This member is required.
    public var description: Swift.String?
    /// The name of the role that you want to modify.
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        description: Swift.String? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.description = description
        self.roleName = roleName
    }
}

extension UpdateRoleDescriptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateRoleDescriptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRoleDescriptionOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRoleDescriptionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoleDescriptionOutputResponse(role: \(Swift.String(describing: role)))"}
}

extension UpdateRoleDescriptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateRoleDescriptionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.role = output.role
        } else {
            self.role = nil
        }
    }
}

public struct UpdateRoleDescriptionOutputResponse: Swift.Equatable {
    /// A structure that contains details about the modified role.
    public var role: IamClientTypes.Role?

    public init (
        role: IamClientTypes.Role? = nil
    )
    {
        self.role = role
    }
}

struct UpdateRoleDescriptionOutputResponseBody: Swift.Equatable {
    public let role: IamClientTypes.Role?
}

extension UpdateRoleDescriptionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case role = "Role"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateRoleDescriptionResult"))
        let roleDecoded = try containerValues.decodeIfPresent(IamClientTypes.Role.self, forKey: .role)
        role = roleDecoded
    }
}

extension UpdateRoleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoleInput(description: \(Swift.String(describing: description)), maxSessionDuration: \(Swift.String(describing: maxSessionDuration)), roleName: \(Swift.String(describing: roleName)))"}
}

extension UpdateRoleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let maxSessionDuration = maxSessionDuration {
            try container.encode(maxSessionDuration, forKey: ClientRuntime.Key("MaxSessionDuration"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        try container.encode("UpdateRole", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRoleInput: Swift.Equatable {
    /// The new description that you want to apply to the specified role.
    public var description: Swift.String?
    /// The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours. Anyone who assumes the role from the CLI or API can use the DurationSeconds API parameter or the duration-seconds CLI parameter to request a longer session. The MaxSessionDuration setting determines the maximum duration that can be requested using the DurationSeconds parameter. If users don't specify a value for the DurationSeconds parameter, their security credentials are valid for one hour by default. This applies when you use the AssumeRole* API operations or the assume-role* CLI operations but does not apply when you use those operations to create a console URL. For more information, see [Using IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) in the IAM User Guide.
    public var maxSessionDuration: Swift.Int?
    /// The name of the role that you want to modify.
    /// This member is required.
    public var roleName: Swift.String?

    public init (
        description: Swift.String? = nil,
        maxSessionDuration: Swift.Int? = nil,
        roleName: Swift.String? = nil
    )
    {
        self.description = description
        self.maxSessionDuration = maxSessionDuration
        self.roleName = roleName
    }
}

extension UpdateRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnmodifiableEntity" : self = .unmodifiableEntityException(try UnmodifiableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRoleOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unmodifiableEntityException(UnmodifiableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRoleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoleOutputResponse()"}
}

extension UpdateRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateRoleOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateRoleOutputResponseBody: Swift.Equatable {
}

extension UpdateRoleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateSAMLProviderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSAMLProviderInput(sAMLMetadataDocument: \(Swift.String(describing: sAMLMetadataDocument)), sAMLProviderArn: \(Swift.String(describing: sAMLProviderArn)))"}
}

extension UpdateSAMLProviderInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sAMLMetadataDocument = sAMLMetadataDocument {
            try container.encode(sAMLMetadataDocument, forKey: ClientRuntime.Key("SAMLMetadataDocument"))
        }
        if let sAMLProviderArn = sAMLProviderArn {
            try container.encode(sAMLProviderArn, forKey: ClientRuntime.Key("SAMLProviderArn"))
        }
        try container.encode("UpdateSAMLProvider", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateSAMLProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateSAMLProviderInput: Swift.Equatable {
    /// An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
    /// This member is required.
    public var sAMLMetadataDocument: Swift.String?
    /// The Amazon Resource Name (ARN) of the SAML provider to update. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var sAMLProviderArn: Swift.String?

    public init (
        sAMLMetadataDocument: Swift.String? = nil,
        sAMLProviderArn: Swift.String? = nil
    )
    {
        self.sAMLMetadataDocument = sAMLMetadataDocument
        self.sAMLProviderArn = sAMLProviderArn
    }
}

extension UpdateSAMLProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateSAMLProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateSAMLProviderOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSAMLProviderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSAMLProviderOutputResponse(sAMLProviderArn: \(Swift.String(describing: sAMLProviderArn)))"}
}

extension UpdateSAMLProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateSAMLProviderOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sAMLProviderArn = output.sAMLProviderArn
        } else {
            self.sAMLProviderArn = nil
        }
    }
}

/// Contains the response to a successful [UpdateSAMLProvider] request.
public struct UpdateSAMLProviderOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the SAML provider that was updated.
    public var sAMLProviderArn: Swift.String?

    public init (
        sAMLProviderArn: Swift.String? = nil
    )
    {
        self.sAMLProviderArn = sAMLProviderArn
    }
}

struct UpdateSAMLProviderOutputResponseBody: Swift.Equatable {
    public let sAMLProviderArn: Swift.String?
}

extension UpdateSAMLProviderOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sAMLProviderArn = "SAMLProviderArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateSAMLProviderResult"))
        let sAMLProviderArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sAMLProviderArn)
        sAMLProviderArn = sAMLProviderArnDecoded
    }
}

extension UpdateSSHPublicKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSSHPublicKeyInput(sSHPublicKeyId: \(Swift.String(describing: sSHPublicKeyId)), status: \(Swift.String(describing: status)), userName: \(Swift.String(describing: userName)))"}
}

extension UpdateSSHPublicKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sSHPublicKeyId = sSHPublicKeyId {
            try container.encode(sSHPublicKeyId, forKey: ClientRuntime.Key("SSHPublicKeyId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("UpdateSSHPublicKey", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateSSHPublicKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateSSHPublicKeyInput: Swift.Equatable {
    /// The unique identifier for the SSH public key. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that can consist of any upper or lowercased letter or digit.
    /// This member is required.
    public var sSHPublicKeyId: Swift.String?
    /// The status to assign to the SSH public key. Active means that the key can be used for authentication with an CodeCommit repository. Inactive means that the key cannot be used.
    /// This member is required.
    public var status: IamClientTypes.StatusType?
    /// The name of the IAM user associated with the SSH public key. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        sSHPublicKeyId: Swift.String? = nil,
        status: IamClientTypes.StatusType? = nil,
        userName: Swift.String? = nil
    )
    {
        self.sSHPublicKeyId = sSHPublicKeyId
        self.status = status
        self.userName = userName
    }
}

extension UpdateSSHPublicKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateSSHPublicKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateSSHPublicKeyOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSSHPublicKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSSHPublicKeyOutputResponse()"}
}

extension UpdateSSHPublicKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateSSHPublicKeyOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateSSHPublicKeyOutputResponseBody: Swift.Equatable {
}

extension UpdateSSHPublicKeyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateServerCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServerCertificateInput(newPath: \(Swift.String(describing: newPath)), newServerCertificateName: \(Swift.String(describing: newServerCertificateName)), serverCertificateName: \(Swift.String(describing: serverCertificateName)))"}
}

extension UpdateServerCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let newPath = newPath {
            try container.encode(newPath, forKey: ClientRuntime.Key("NewPath"))
        }
        if let newServerCertificateName = newServerCertificateName {
            try container.encode(newServerCertificateName, forKey: ClientRuntime.Key("NewServerCertificateName"))
        }
        if let serverCertificateName = serverCertificateName {
            try container.encode(serverCertificateName, forKey: ClientRuntime.Key("ServerCertificateName"))
        }
        try container.encode("UpdateServerCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateServerCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateServerCertificateInput: Swift.Equatable {
    /// The new path for the server certificate. Include this only if you are updating the server certificate's path. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var newPath: Swift.String?
    /// The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var newServerCertificateName: Swift.String?
    /// The name of the server certificate that you want to update. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var serverCertificateName: Swift.String?

    public init (
        newPath: Swift.String? = nil,
        newServerCertificateName: Swift.String? = nil,
        serverCertificateName: Swift.String? = nil
    )
    {
        self.newPath = newPath
        self.newServerCertificateName = newServerCertificateName
        self.serverCertificateName = serverCertificateName
    }
}

extension UpdateServerCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateServerCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateServerCertificateOutputError: Swift.Error, Swift.Equatable {
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateServerCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServerCertificateOutputResponse()"}
}

extension UpdateServerCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateServerCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateServerCertificateOutputResponseBody: Swift.Equatable {
}

extension UpdateServerCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateServiceSpecificCredentialInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServiceSpecificCredentialInput(serviceSpecificCredentialId: \(Swift.String(describing: serviceSpecificCredentialId)), status: \(Swift.String(describing: status)), userName: \(Swift.String(describing: userName)))"}
}

extension UpdateServiceSpecificCredentialInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serviceSpecificCredentialId = serviceSpecificCredentialId {
            try container.encode(serviceSpecificCredentialId, forKey: ClientRuntime.Key("ServiceSpecificCredentialId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("UpdateServiceSpecificCredential", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateServiceSpecificCredentialInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateServiceSpecificCredentialInput: Swift.Equatable {
    /// The unique identifier of the service-specific credential. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that can consist of any upper or lowercased letter or digit.
    /// This member is required.
    public var serviceSpecificCredentialId: Swift.String?
    /// The status to be assigned to the service-specific credential.
    /// This member is required.
    public var status: IamClientTypes.StatusType?
    /// The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        serviceSpecificCredentialId: Swift.String? = nil,
        status: IamClientTypes.StatusType? = nil,
        userName: Swift.String? = nil
    )
    {
        self.serviceSpecificCredentialId = serviceSpecificCredentialId
        self.status = status
        self.userName = userName
    }
}

extension UpdateServiceSpecificCredentialOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateServiceSpecificCredentialOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateServiceSpecificCredentialOutputError: Swift.Error, Swift.Equatable {
    case noSuchEntityException(NoSuchEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateServiceSpecificCredentialOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServiceSpecificCredentialOutputResponse()"}
}

extension UpdateServiceSpecificCredentialOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateServiceSpecificCredentialOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateServiceSpecificCredentialOutputResponseBody: Swift.Equatable {
}

extension UpdateServiceSpecificCredentialOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateSigningCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSigningCertificateInput(certificateId: \(Swift.String(describing: certificateId)), status: \(Swift.String(describing: status)), userName: \(Swift.String(describing: userName)))"}
}

extension UpdateSigningCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateId = certificateId {
            try container.encode(certificateId, forKey: ClientRuntime.Key("CertificateId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("UpdateSigningCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateSigningCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateSigningCertificateInput: Swift.Equatable {
    /// The ID of the signing certificate you want to update. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters that can consist of any upper or lowercased letter or digit.
    /// This member is required.
    public var certificateId: Swift.String?
    /// The status you want to assign to the certificate. Active means that the certificate can be used for programmatic calls to Amazon Web Services Inactive means that the certificate cannot be used.
    /// This member is required.
    public var status: IamClientTypes.StatusType?
    /// The name of the IAM user the signing certificate belongs to. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        certificateId: Swift.String? = nil,
        status: IamClientTypes.StatusType? = nil,
        userName: Swift.String? = nil
    )
    {
        self.certificateId = certificateId
        self.status = status
        self.userName = userName
    }
}

extension UpdateSigningCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateSigningCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateSigningCertificateOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSigningCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSigningCertificateOutputResponse()"}
}

extension UpdateSigningCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateSigningCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateSigningCertificateOutputResponseBody: Swift.Equatable {
}

extension UpdateSigningCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserInput(newPath: \(Swift.String(describing: newPath)), newUserName: \(Swift.String(describing: newUserName)), userName: \(Swift.String(describing: userName)))"}
}

extension UpdateUserInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let newPath = newPath {
            try container.encode(newPath, forKey: ClientRuntime.Key("NewPath"))
        }
        if let newUserName = newUserName {
            try container.encode(newUserName, forKey: ClientRuntime.Key("NewUserName"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("UpdateUser", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateUserInput: Swift.Equatable {
    /// New path for the IAM user. Include this parameter only if you're changing the user's path. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
    public var newPath: Swift.String?
    /// New name for the user. Include this parameter only if you're changing the user's name. IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".
    public var newUserName: Swift.String?
    /// Name of the user to update. If you're changing the name of the user, this is the original user name. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        newPath: Swift.String? = nil,
        newUserName: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.newPath = newPath
        self.newUserName = newUserName
        self.userName = userName
    }
}

extension UpdateUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityTemporarilyUnmodifiable" : self = .entityTemporarilyUnmodifiableException(try EntityTemporarilyUnmodifiableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateUserOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case entityTemporarilyUnmodifiableException(EntityTemporarilyUnmodifiableException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserOutputResponse()"}
}

extension UpdateUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateUserOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateUserOutputResponseBody: Swift.Equatable {
}

extension UpdateUserOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UploadSSHPublicKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadSSHPublicKeyInput(sSHPublicKeyBody: \(Swift.String(describing: sSHPublicKeyBody)), userName: \(Swift.String(describing: userName)))"}
}

extension UploadSSHPublicKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sSHPublicKeyBody = sSHPublicKeyBody {
            try container.encode(sSHPublicKeyBody, forKey: ClientRuntime.Key("SSHPublicKeyBody"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("UploadSSHPublicKey", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UploadSSHPublicKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UploadSSHPublicKeyInput: Swift.Equatable {
    /// The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var sSHPublicKeyBody: Swift.String?
    /// The name of the IAM user to associate the SSH public key with. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var userName: Swift.String?

    public init (
        sSHPublicKeyBody: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.sSHPublicKeyBody = sSHPublicKeyBody
        self.userName = userName
    }
}

extension UploadSSHPublicKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UploadSSHPublicKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateSSHPublicKey" : self = .duplicateSSHPublicKeyException(try DuplicateSSHPublicKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPublicKey" : self = .invalidPublicKeyException(try InvalidPublicKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnrecognizedPublicKeyEncoding" : self = .unrecognizedPublicKeyEncodingException(try UnrecognizedPublicKeyEncodingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UploadSSHPublicKeyOutputError: Swift.Error, Swift.Equatable {
    case duplicateSSHPublicKeyException(DuplicateSSHPublicKeyException)
    case invalidPublicKeyException(InvalidPublicKeyException)
    case limitExceededException(LimitExceededException)
    case noSuchEntityException(NoSuchEntityException)
    case unrecognizedPublicKeyEncodingException(UnrecognizedPublicKeyEncodingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UploadSSHPublicKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadSSHPublicKeyOutputResponse(sSHPublicKey: \(Swift.String(describing: sSHPublicKey)))"}
}

extension UploadSSHPublicKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UploadSSHPublicKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sSHPublicKey = output.sSHPublicKey
        } else {
            self.sSHPublicKey = nil
        }
    }
}

/// Contains the response to a successful [UploadSSHPublicKey] request.
public struct UploadSSHPublicKeyOutputResponse: Swift.Equatable {
    /// Contains information about the SSH public key.
    public var sSHPublicKey: IamClientTypes.SSHPublicKey?

    public init (
        sSHPublicKey: IamClientTypes.SSHPublicKey? = nil
    )
    {
        self.sSHPublicKey = sSHPublicKey
    }
}

struct UploadSSHPublicKeyOutputResponseBody: Swift.Equatable {
    public let sSHPublicKey: IamClientTypes.SSHPublicKey?
}

extension UploadSSHPublicKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sSHPublicKey = "SSHPublicKey"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UploadSSHPublicKeyResult"))
        let sSHPublicKeyDecoded = try containerValues.decodeIfPresent(IamClientTypes.SSHPublicKey.self, forKey: .sSHPublicKey)
        sSHPublicKey = sSHPublicKeyDecoded
    }
}

extension UploadServerCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadServerCertificateInput(certificateBody: \(Swift.String(describing: certificateBody)), certificateChain: \(Swift.String(describing: certificateChain)), path: \(Swift.String(describing: path)), privateKey: \(Swift.String(describing: privateKey)), serverCertificateName: \(Swift.String(describing: serverCertificateName)), tags: \(Swift.String(describing: tags)))"}
}

extension UploadServerCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateBody = certificateBody {
            try container.encode(certificateBody, forKey: ClientRuntime.Key("CertificateBody"))
        }
        if let certificateChain = certificateChain {
            try container.encode(certificateChain, forKey: ClientRuntime.Key("CertificateChain"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let privateKey = privateKey {
            try container.encode(privateKey, forKey: ClientRuntime.Key("PrivateKey"))
        }
        if let serverCertificateName = serverCertificateName {
            try container.encode(serverCertificateName, forKey: ClientRuntime.Key("ServerCertificateName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("UploadServerCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UploadServerCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UploadServerCertificateInput: Swift.Equatable {
    /// The contents of the public key certificate in PEM-encoded format. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var certificateBody: Swift.String?
    /// The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    public var certificateChain: Swift.String?
    /// The path for the server certificate. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters. If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the path parameter. The path must begin with /cloudfront and must include a trailing slash (for example, /cloudfront/test/).
    public var path: Swift.String?
    /// The contents of the private key in PEM-encoded format. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var privateKey: Swift.String?
    /// The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    /// This member is required.
    public var serverCertificateName: Swift.String?
    /// A list of tags that you want to attach to the new IAM server certificate resource. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide. If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
    public var tags: [IamClientTypes.Tag]?

    public init (
        certificateBody: Swift.String? = nil,
        certificateChain: Swift.String? = nil,
        path: Swift.String? = nil,
        privateKey: Swift.String? = nil,
        serverCertificateName: Swift.String? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.certificateBody = certificateBody
        self.certificateChain = certificateChain
        self.path = path
        self.privateKey = privateKey
        self.serverCertificateName = serverCertificateName
        self.tags = tags
    }
}

extension UploadServerCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UploadServerCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyPairMismatch" : self = .keyPairMismatchException(try KeyPairMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedCertificate" : self = .malformedCertificateException(try MalformedCertificateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UploadServerCertificateOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case invalidInputException(InvalidInputException)
    case keyPairMismatchException(KeyPairMismatchException)
    case limitExceededException(LimitExceededException)
    case malformedCertificateException(MalformedCertificateException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UploadServerCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadServerCertificateOutputResponse(serverCertificateMetadata: \(Swift.String(describing: serverCertificateMetadata)), tags: \(Swift.String(describing: tags)))"}
}

extension UploadServerCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UploadServerCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serverCertificateMetadata = output.serverCertificateMetadata
            self.tags = output.tags
        } else {
            self.serverCertificateMetadata = nil
            self.tags = nil
        }
    }
}

/// Contains the response to a successful [UploadServerCertificate] request.
public struct UploadServerCertificateOutputResponse: Swift.Equatable {
    /// The meta information of the uploaded server certificate without its certificate body, certificate chain, and private key.
    public var serverCertificateMetadata: IamClientTypes.ServerCertificateMetadata?
    /// A list of tags that are attached to the new IAM server certificate. The returned list of tags is sorted by tag key. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
    public var tags: [IamClientTypes.Tag]?

    public init (
        serverCertificateMetadata: IamClientTypes.ServerCertificateMetadata? = nil,
        tags: [IamClientTypes.Tag]? = nil
    )
    {
        self.serverCertificateMetadata = serverCertificateMetadata
        self.tags = tags
    }
}

struct UploadServerCertificateOutputResponseBody: Swift.Equatable {
    public let serverCertificateMetadata: IamClientTypes.ServerCertificateMetadata?
    public let tags: [IamClientTypes.Tag]?
}

extension UploadServerCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverCertificateMetadata = "ServerCertificateMetadata"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UploadServerCertificateResult"))
        let serverCertificateMetadataDecoded = try containerValues.decodeIfPresent(IamClientTypes.ServerCertificateMetadata.self, forKey: .serverCertificateMetadata)
        serverCertificateMetadata = serverCertificateMetadataDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension UploadSigningCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadSigningCertificateInput(certificateBody: \(Swift.String(describing: certificateBody)), userName: \(Swift.String(describing: userName)))"}
}

extension UploadSigningCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateBody = certificateBody {
            try container.encode(certificateBody, forKey: ClientRuntime.Key("CertificateBody"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("UploadSigningCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-08", forKey:ClientRuntime.Key("Version"))
    }
}

extension UploadSigningCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UploadSigningCertificateInput: Swift.Equatable {
    /// The contents of the signing certificate. The [regex pattern](http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
    ///
    /// * Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range
    ///
    /// * The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)
    ///
    /// * The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)
    /// This member is required.
    public var certificateBody: Swift.String?
    /// The name of the user the signing certificate is for. This parameter allows (through its [regex pattern](http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    public var userName: Swift.String?

    public init (
        certificateBody: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.certificateBody = certificateBody
        self.userName = userName
    }
}

extension UploadSigningCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UploadSigningCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateCertificate" : self = .duplicateCertificateException(try DuplicateCertificateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExists" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCertificate" : self = .invalidCertificateException(try InvalidCertificateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedCertificate" : self = .malformedCertificateException(try MalformedCertificateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchEntity" : self = .noSuchEntityException(try NoSuchEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailure" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UploadSigningCertificateOutputError: Swift.Error, Swift.Equatable {
    case duplicateCertificateException(DuplicateCertificateException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case invalidCertificateException(InvalidCertificateException)
    case limitExceededException(LimitExceededException)
    case malformedCertificateException(MalformedCertificateException)
    case noSuchEntityException(NoSuchEntityException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UploadSigningCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadSigningCertificateOutputResponse(certificate: \(Swift.String(describing: certificate)))"}
}

extension UploadSigningCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UploadSigningCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificate = output.certificate
        } else {
            self.certificate = nil
        }
    }
}

/// Contains the response to a successful [UploadSigningCertificate] request.
public struct UploadSigningCertificateOutputResponse: Swift.Equatable {
    /// Information about the certificate.
    /// This member is required.
    public var certificate: IamClientTypes.SigningCertificate?

    public init (
        certificate: IamClientTypes.SigningCertificate? = nil
    )
    {
        self.certificate = certificate
    }
}

struct UploadSigningCertificateOutputResponseBody: Swift.Equatable {
    public let certificate: IamClientTypes.SigningCertificate?
}

extension UploadSigningCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate = "Certificate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UploadSigningCertificateResult"))
        let certificateDecoded = try containerValues.decodeIfPresent(IamClientTypes.SigningCertificate.self, forKey: .certificate)
        certificate = certificateDecoded
    }
}

extension IamClientTypes.User: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createDate = "CreateDate"
        case passwordLastUsed = "PasswordLastUsed"
        case path = "Path"
        case permissionsBoundary = "PermissionsBoundary"
        case tags = "Tags"
        case userId = "UserId"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let passwordLastUsed = passwordLastUsed {
            try container.encode(ClientRuntime.TimestampWrapper(passwordLastUsed, format: .dateTime), forKey: ClientRuntime.Key("passwordLastUsed"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let permissionsBoundary = permissionsBoundary {
            try container.encode(permissionsBoundary, forKey: ClientRuntime.Key("PermissionsBoundary"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userId = userId {
            try container.encode(userId, forKey: ClientRuntime.Key("UserId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let passwordLastUsedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .passwordLastUsed)
        var passwordLastUsedBuffer:ClientRuntime.Date? = nil
        if let passwordLastUsedDecoded = passwordLastUsedDecoded {
            passwordLastUsedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(passwordLastUsedDecoded, format: .dateTime)
        }
        passwordLastUsed = passwordLastUsedBuffer
        let permissionsBoundaryDecoded = try containerValues.decodeIfPresent(IamClientTypes.AttachedPermissionsBoundary.self, forKey: .permissionsBoundary)
        permissionsBoundary = permissionsBoundaryDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension IamClientTypes.User: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "User(arn: \(Swift.String(describing: arn)), createDate: \(Swift.String(describing: createDate)), passwordLastUsed: \(Swift.String(describing: passwordLastUsed)), path: \(Swift.String(describing: path)), permissionsBoundary: \(Swift.String(describing: permissionsBoundary)), tags: \(Swift.String(describing: tags)), userId: \(Swift.String(describing: userId)), userName: \(Swift.String(describing: userName)))"}
}

extension IamClientTypes {
    /// Contains information about an IAM user entity. This data type is used as a response element in the following operations:
    ///
    /// * [CreateUser]
    ///
    /// * [GetUser]
    ///
    /// * [ListUsers]
    public struct User: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that identifies the user. For more information about ARNs and how to use ARNs in policies, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var arn: Swift.String?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the user was created.
        /// This member is required.
        public var createDate: ClientRuntime.Date?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the user's password was last used to sign in to an Amazon Web Services website. For a list of Amazon Web Services websites that capture a user's last sign-in time, see the [Credential reports](https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html) topic in the IAM User Guide. If a password is used more than once in a five-minute span, only the first use is returned in this field. If the field is null (no value), then it indicates that they never signed in with a password. This can be because:
        ///
        /// * The user never had a password.
        ///
        /// * A password exists but has not been used since IAM started tracking this information on October 20, 2014.
        ///
        ///
        /// A null value does not mean that the user never had a password. Also, if the user does not currently have a password but had one in the past, then this field contains the date and time the most recent password was used. This value is returned only in the [GetUser] and [ListUsers] operations.
        public var passwordLastUsed: ClientRuntime.Date?
        /// The path to the user. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide. The ARN of the policy used to set the permissions boundary for the user.
        /// This member is required.
        public var path: Swift.String?
        /// For more information about permissions boundaries, see [Permissions boundaries for IAM identities ](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the IAM User Guide.
        public var permissionsBoundary: IamClientTypes.AttachedPermissionsBoundary?
        /// A list of tags that are associated with the user. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
        public var tags: [IamClientTypes.Tag]?
        /// The stable and unique string identifying the user. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        /// This member is required.
        public var userId: Swift.String?
        /// The friendly name identifying the user.
        /// This member is required.
        public var userName: Swift.String?

        public init (
            arn: Swift.String? = nil,
            createDate: ClientRuntime.Date? = nil,
            passwordLastUsed: ClientRuntime.Date? = nil,
            path: Swift.String? = nil,
            permissionsBoundary: IamClientTypes.AttachedPermissionsBoundary? = nil,
            tags: [IamClientTypes.Tag]? = nil,
            userId: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createDate = createDate
            self.passwordLastUsed = passwordLastUsed
            self.path = path
            self.permissionsBoundary = permissionsBoundary
            self.tags = tags
            self.userId = userId
            self.userName = userName
        }
    }

}

extension IamClientTypes.UserDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case attachedManagedPolicies = "AttachedManagedPolicies"
        case createDate = "CreateDate"
        case groupList = "GroupList"
        case path = "Path"
        case permissionsBoundary = "PermissionsBoundary"
        case tags = "Tags"
        case userId = "UserId"
        case userName = "UserName"
        case userPolicyList = "UserPolicyList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let attachedManagedPolicies = attachedManagedPolicies {
            var attachedManagedPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttachedManagedPolicies"))
            for (index0, attachedpolicy0) in attachedManagedPolicies.enumerated() {
                try attachedManagedPoliciesContainer.encode(attachedpolicy0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("createDate"))
        }
        if let groupList = groupList {
            var groupListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("GroupList"))
            for (index0, groupnametype0) in groupList.enumerated() {
                try groupListContainer.encode(groupnametype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let permissionsBoundary = permissionsBoundary {
            try container.encode(permissionsBoundary, forKey: ClientRuntime.Key("PermissionsBoundary"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userId = userId {
            try container.encode(userId, forKey: ClientRuntime.Key("UserId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        if let userPolicyList = userPolicyList {
            var userPolicyListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserPolicyList"))
            for (index0, policydetail0) in userPolicyList.enumerated() {
                try userPolicyListContainer.encode(policydetail0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        if containerValues.contains(.userPolicyList) {
            struct KeyVal0{struct member{}}
            let userPolicyListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userPolicyList)
            if let userPolicyListWrappedContainer = userPolicyListWrappedContainer {
                let userPolicyListContainer = try userPolicyListWrappedContainer.decodeIfPresent([IamClientTypes.PolicyDetail].self, forKey: .member)
                var userPolicyListBuffer:[IamClientTypes.PolicyDetail]? = nil
                if let userPolicyListContainer = userPolicyListContainer {
                    userPolicyListBuffer = [IamClientTypes.PolicyDetail]()
                    for structureContainer0 in userPolicyListContainer {
                        userPolicyListBuffer?.append(structureContainer0)
                    }
                }
                userPolicyList = userPolicyListBuffer
            } else {
                userPolicyList = []
            }
        } else {
            userPolicyList = nil
        }
        if containerValues.contains(.groupList) {
            struct KeyVal0{struct member{}}
            let groupListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .groupList)
            if let groupListWrappedContainer = groupListWrappedContainer {
                let groupListContainer = try groupListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var groupListBuffer:[Swift.String]? = nil
                if let groupListContainer = groupListContainer {
                    groupListBuffer = [Swift.String]()
                    for stringContainer0 in groupListContainer {
                        groupListBuffer?.append(stringContainer0)
                    }
                }
                groupList = groupListBuffer
            } else {
                groupList = []
            }
        } else {
            groupList = nil
        }
        if containerValues.contains(.attachedManagedPolicies) {
            struct KeyVal0{struct member{}}
            let attachedManagedPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attachedManagedPolicies)
            if let attachedManagedPoliciesWrappedContainer = attachedManagedPoliciesWrappedContainer {
                let attachedManagedPoliciesContainer = try attachedManagedPoliciesWrappedContainer.decodeIfPresent([IamClientTypes.AttachedPolicy].self, forKey: .member)
                var attachedManagedPoliciesBuffer:[IamClientTypes.AttachedPolicy]? = nil
                if let attachedManagedPoliciesContainer = attachedManagedPoliciesContainer {
                    attachedManagedPoliciesBuffer = [IamClientTypes.AttachedPolicy]()
                    for structureContainer0 in attachedManagedPoliciesContainer {
                        attachedManagedPoliciesBuffer?.append(structureContainer0)
                    }
                }
                attachedManagedPolicies = attachedManagedPoliciesBuffer
            } else {
                attachedManagedPolicies = []
            }
        } else {
            attachedManagedPolicies = nil
        }
        let permissionsBoundaryDecoded = try containerValues.decodeIfPresent(IamClientTypes.AttachedPermissionsBoundary.self, forKey: .permissionsBoundary)
        permissionsBoundary = permissionsBoundaryDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension IamClientTypes.UserDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserDetail(arn: \(Swift.String(describing: arn)), attachedManagedPolicies: \(Swift.String(describing: attachedManagedPolicies)), createDate: \(Swift.String(describing: createDate)), groupList: \(Swift.String(describing: groupList)), path: \(Swift.String(describing: path)), permissionsBoundary: \(Swift.String(describing: permissionsBoundary)), tags: \(Swift.String(describing: tags)), userId: \(Swift.String(describing: userId)), userName: \(Swift.String(describing: userName)), userPolicyList: \(Swift.String(describing: userPolicyList)))"}
}

extension IamClientTypes {
    /// Contains information about an IAM user, including all the user's policies and all the IAM groups the user is in. This data type is used as a response element in the [GetAccountAuthorizationDetails] operation.
    public struct UserDetail: Swift.Equatable {
        /// The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources. For more information about ARNs, go to [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// A list of the managed policies attached to the user.
        public var attachedManagedPolicies: [IamClientTypes.AttachedPolicy]?
        /// The date and time, in [ISO 8601 date-time format](http://www.iso.org/iso/iso8601), when the user was created.
        public var createDate: ClientRuntime.Date?
        /// A list of IAM groups that the user is in.
        public var groupList: [Swift.String]?
        /// The path to the user. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        public var path: Swift.String?
        /// The ARN of the policy used to set the permissions boundary for the user. For more information about permissions boundaries, see [Permissions boundaries for IAM identities ](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the IAM User Guide.
        public var permissionsBoundary: IamClientTypes.AttachedPermissionsBoundary?
        /// A list of tags that are associated with the user. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
        public var tags: [IamClientTypes.Tag]?
        /// The stable and unique string identifying the user. For more information about IDs, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
        public var userId: Swift.String?
        /// The friendly name identifying the user.
        public var userName: Swift.String?
        /// A list of the inline policies embedded in the user.
        public var userPolicyList: [IamClientTypes.PolicyDetail]?

        public init (
            arn: Swift.String? = nil,
            attachedManagedPolicies: [IamClientTypes.AttachedPolicy]? = nil,
            createDate: ClientRuntime.Date? = nil,
            groupList: [Swift.String]? = nil,
            path: Swift.String? = nil,
            permissionsBoundary: IamClientTypes.AttachedPermissionsBoundary? = nil,
            tags: [IamClientTypes.Tag]? = nil,
            userId: Swift.String? = nil,
            userName: Swift.String? = nil,
            userPolicyList: [IamClientTypes.PolicyDetail]? = nil
        )
        {
            self.arn = arn
            self.attachedManagedPolicies = attachedManagedPolicies
            self.createDate = createDate
            self.groupList = groupList
            self.path = path
            self.permissionsBoundary = permissionsBoundary
            self.tags = tags
            self.userId = userId
            self.userName = userName
            self.userPolicyList = userPolicyList
        }
    }

}

extension IamClientTypes.VirtualMFADevice: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case base32StringSeed = "Base32StringSeed"
        case enableDate = "EnableDate"
        case qRCodePNG = "QRCodePNG"
        case serialNumber = "SerialNumber"
        case tags = "Tags"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let base32StringSeed = base32StringSeed {
            try container.encode(base32StringSeed.base64EncodedString(), forKey: ClientRuntime.Key("Base32StringSeed"))
        }
        if let enableDate = enableDate {
            try container.encode(ClientRuntime.TimestampWrapper(enableDate, format: .dateTime), forKey: ClientRuntime.Key("enableDate"))
        }
        if let qRCodePNG = qRCodePNG {
            try container.encode(qRCodePNG.base64EncodedString(), forKey: ClientRuntime.Key("QRCodePNG"))
        }
        if let serialNumber = serialNumber {
            try container.encode(serialNumber, forKey: ClientRuntime.Key("SerialNumber"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let user = user {
            try container.encode(user, forKey: ClientRuntime.Key("User"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        if containerValues.contains(.base32StringSeed) {
            do {
                let base32StringSeedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .base32StringSeed)
                base32StringSeed = base32StringSeedDecoded
            } catch {
                base32StringSeed = "".data(using: .utf8)
            }
        } else {
            base32StringSeed = nil
        }
        if containerValues.contains(.qRCodePNG) {
            do {
                let qRCodePNGDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .qRCodePNG)
                qRCodePNG = qRCodePNGDecoded
            } catch {
                qRCodePNG = "".data(using: .utf8)
            }
        } else {
            qRCodePNG = nil
        }
        let userDecoded = try containerValues.decodeIfPresent(IamClientTypes.User.self, forKey: .user)
        user = userDecoded
        let enableDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enableDate)
        var enableDateBuffer:ClientRuntime.Date? = nil
        if let enableDateDecoded = enableDateDecoded {
            enableDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(enableDateDecoded, format: .dateTime)
        }
        enableDate = enableDateBuffer
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension IamClientTypes.VirtualMFADevice: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualMFADevice(base32StringSeed: \(Swift.String(describing: base32StringSeed)), enableDate: \(Swift.String(describing: enableDate)), qRCodePNG: \(Swift.String(describing: qRCodePNG)), serialNumber: \(Swift.String(describing: serialNumber)), tags: \(Swift.String(describing: tags)), user: \(Swift.String(describing: user)))"}
}

extension IamClientTypes {
    /// Contains information about a virtual MFA device.
    public struct VirtualMFADevice: Swift.Equatable {
        /// The base32 seed defined as specified in [RFC3548](https://tools.ietf.org/html/rfc3548.txt). The Base32StringSeed is base64-encoded.
        public var base32StringSeed: ClientRuntime.Data?
        /// The date and time on which the virtual MFA device was enabled.
        public var enableDate: ClientRuntime.Date?
        /// A QR code PNG image that encodes otpauth://totp/$virtualMFADeviceName@$AccountName?secret=$Base32String where $virtualMFADeviceName is one of the create call arguments. AccountName is the user name if set (otherwise, the account ID otherwise), and Base32String is the seed in base32 format. The Base32String value is base64-encoded.
        public var qRCodePNG: ClientRuntime.Data?
        /// The serial number associated with VirtualMFADevice.
        /// This member is required.
        public var serialNumber: Swift.String?
        /// A list of tags that are attached to the virtual MFA device. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
        public var tags: [IamClientTypes.Tag]?
        /// The IAM user associated with this virtual MFA device.
        public var user: IamClientTypes.User?

        public init (
            base32StringSeed: ClientRuntime.Data? = nil,
            enableDate: ClientRuntime.Date? = nil,
            qRCodePNG: ClientRuntime.Data? = nil,
            serialNumber: Swift.String? = nil,
            tags: [IamClientTypes.Tag]? = nil,
            user: IamClientTypes.User? = nil
        )
        {
            self.base32StringSeed = base32StringSeed
            self.enableDate = enableDate
            self.qRCodePNG = qRCodePNG
            self.serialNumber = serialNumber
            self.tags = tags
            self.user = user
        }
    }

}
