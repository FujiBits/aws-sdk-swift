// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CopyProductInputHeadersMiddleware: Middleware {
    public let id: String = "CopyProductInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CopyProductInput>,
                  next: H) -> Swift.Result<OperationOutput<CopyProductOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CopyProductInput>
    public typealias MOutput = OperationOutput<CopyProductOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CopyProductOutputError>
}

public struct CopyProductInputQueryItemMiddleware: Middleware {
    public let id: String = "CopyProductInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CopyProductInput>,
                  next: H) -> Swift.Result<OperationOutput<CopyProductOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CopyProductInput>
    public typealias MOutput = OperationOutput<CopyProductOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CopyProductOutputError>
}

public struct CopyProductInputBodyMiddleware: Middleware {
    public let id: String = "CopyProductInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CopyProductInput>,
                  next: H) -> Swift.Result<OperationOutput<CopyProductOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CopyProductInput>
    public typealias MOutput = OperationOutput<CopyProductOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CopyProductOutputError>
}

extension CopyProductInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceptLanguage = "AcceptLanguage"
        case copyOptions = "CopyOptions"
        case idempotencyToken = "IdempotencyToken"
        case sourceProductArn = "SourceProductArn"
        case sourceProvisioningArtifactIdentifiers = "SourceProvisioningArtifactIdentifiers"
        case targetProductId = "TargetProductId"
        case targetProductName = "TargetProductName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptLanguage = acceptLanguage {
            try encodeContainer.encode(acceptLanguage, forKey: .acceptLanguage)
        }
        if let copyOptions = copyOptions {
            var copyOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .copyOptions)
            for copyoptions0 in copyOptions {
                try copyOptionsContainer.encode(copyoptions0.rawValue)
            }
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let sourceProductArn = sourceProductArn {
            try encodeContainer.encode(sourceProductArn, forKey: .sourceProductArn)
        }
        if let sourceProvisioningArtifactIdentifiers = sourceProvisioningArtifactIdentifiers {
            var sourceProvisioningArtifactIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceProvisioningArtifactIdentifiers)
            for sourceprovisioningartifactproperties0 in sourceProvisioningArtifactIdentifiers {
                var sourceprovisioningartifactproperties0Container = sourceProvisioningArtifactIdentifiersContainer.nestedContainer(keyedBy: Key.self)
                for (dictKey1, sourceprovisioningartifactpropertiesmap1) in sourceprovisioningartifactproperties0 {
                    try sourceprovisioningartifactproperties0Container.encode(sourceprovisioningartifactpropertiesmap1, forKey: Key(stringValue: dictKey1))
                }
            }
        }
        if let targetProductId = targetProductId {
            try encodeContainer.encode(targetProductId, forKey: .targetProductId)
        }
        if let targetProductName = targetProductName {
            try encodeContainer.encode(targetProductName, forKey: .targetProductName)
        }
    }
}
