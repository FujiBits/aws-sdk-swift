// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateProductInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateProductInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateProductInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateProductOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateProductInput>
    public typealias MOutput = OperationOutput<UpdateProductOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateProductOutputError>
}

public struct UpdateProductInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateProductInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateProductInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateProductOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateProductInput>
    public typealias MOutput = OperationOutput<UpdateProductOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateProductOutputError>
}

public struct UpdateProductInputBodyMiddleware: Middleware {
    public let id: String = "UpdateProductInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateProductInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateProductOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateProductInput>
    public typealias MOutput = OperationOutput<UpdateProductOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateProductOutputError>
}

extension UpdateProductInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceptLanguage = "AcceptLanguage"
        case addTags = "AddTags"
        case description = "Description"
        case distributor = "Distributor"
        case id = "Id"
        case name = "Name"
        case owner = "Owner"
        case removeTags = "RemoveTags"
        case supportDescription = "SupportDescription"
        case supportEmail = "SupportEmail"
        case supportUrl = "SupportUrl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptLanguage = acceptLanguage {
            try encodeContainer.encode(acceptLanguage, forKey: .acceptLanguage)
        }
        if let addTags = addTags {
            var addTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addTags)
            for addtags0 in addTags {
                try addTagsContainer.encode(addtags0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let distributor = distributor {
            try encodeContainer.encode(distributor, forKey: .distributor)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let removeTags = removeTags {
            var removeTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removeTags)
            for tagkeys0 in removeTags {
                try removeTagsContainer.encode(tagkeys0)
            }
        }
        if let supportDescription = supportDescription {
            try encodeContainer.encode(supportDescription, forKey: .supportDescription)
        }
        if let supportEmail = supportEmail {
            try encodeContainer.encode(supportEmail, forKey: .supportEmail)
        }
        if let supportUrl = supportUrl {
            try encodeContainer.encode(supportUrl, forKey: .supportUrl)
        }
    }
}
