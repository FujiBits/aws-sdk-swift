// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateServiceActionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateServiceActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateServiceActionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateServiceActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateServiceActionInput>
    public typealias MOutput = OperationOutput<CreateServiceActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateServiceActionOutputError>
}

public struct CreateServiceActionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateServiceActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateServiceActionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateServiceActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateServiceActionInput>
    public typealias MOutput = OperationOutput<CreateServiceActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateServiceActionOutputError>
}

public struct CreateServiceActionInputBodyMiddleware: Middleware {
    public let id: String = "CreateServiceActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateServiceActionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateServiceActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateServiceActionInput>
    public typealias MOutput = OperationOutput<CreateServiceActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateServiceActionOutputError>
}

extension CreateServiceActionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceptLanguage = "AcceptLanguage"
        case definition = "Definition"
        case definitionType = "DefinitionType"
        case description = "Description"
        case idempotencyToken = "IdempotencyToken"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptLanguage = acceptLanguage {
            try encodeContainer.encode(acceptLanguage, forKey: .acceptLanguage)
        }
        if let definition = definition {
            var definitionContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .definition)
            for (dictKey0, serviceactiondefinitionmap0) in definition {
                try definitionContainer.encode(serviceactiondefinitionmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let definitionType = definitionType {
            try encodeContainer.encode(definitionType.rawValue, forKey: .definitionType)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}
