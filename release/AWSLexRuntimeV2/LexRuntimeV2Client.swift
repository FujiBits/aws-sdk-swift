// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation
import Logging

public class LexRuntimeV2Client {
    let client: ClientRuntime.SdkHttpClient
    let config: AWSClientRuntime.AWSClientConfiguration
    let serviceName = "Lex Runtime V2"
    let encoder: ClientRuntime.RequestEncoder
    let decoder: ClientRuntime.ResponseDecoder

    public init(config: AWSClientRuntime.AWSClientConfiguration) {
        client = ClientRuntime.SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public convenience init(region: Swift.String? = nil) throws {
        let config = try LexRuntimeV2ClientConfiguration(region: region)
        self.init(config: config)
    }

    deinit {
        client.close()
    }

    public class LexRuntimeV2ClientConfiguration: AWSClientRuntime.AWSClientConfiguration {

        public var clientLogMode: ClientRuntime.ClientLogMode
        public var decoder: ClientRuntime.ResponseDecoder?
        public var encoder: ClientRuntime.RequestEncoder?
        public var httpClientConfiguration: ClientRuntime.HttpClientConfiguration
        public var httpClientEngine: ClientRuntime.HttpClientEngine
        public var idempotencyTokenGenerator: ClientRuntime.IdempotencyTokenGenerator
        public var logger: ClientRuntime.LogAgent
        public var retryer: ClientRuntime.SDKRetryer

        public var credentialsProvider: AWSClientRuntime.CredentialsProvider
        public var endpointResolver: AWSClientRuntime.EndpointResolver
        public var region: Swift.String?
        public var regionResolver: AWSClientRuntime.RegionResolver
        public var signingRegion: Swift.String?

        public init(
            credentialsProvider: AWSClientRuntime.CredentialsProvider? = nil,
            endpointResolver: AWSClientRuntime.EndpointResolver? = nil,
            region: Swift.String? = nil,
            regionResolver: AWSClientRuntime.RegionResolver? = nil,
            signingRegion: Swift.String? = nil,
            runtimeConfig: ClientRuntime.SDKRuntimeConfiguration
        ) throws {
            self.regionResolver = regionResolver ?? DefaultRegionResolver()
            let defaultRegion = self.regionResolver.resolveRegion()
            self.region = region ?? defaultRegion
            self.signingRegion = signingRegion ?? defaultRegion
            self.endpointResolver = endpointResolver ?? DefaultEndpointResolver()
            if let credProvider = credentialsProvider {
                self.credentialsProvider = try AWSClientRuntime.AWSCredentialsProvider.fromCustom(credProvider)
            } else {
                self.credentialsProvider = try AWSClientRuntime.AWSCredentialsProvider.fromChain()
            }
            self.clientLogMode = runtimeConfig.clientLogMode
            self.decoder = runtimeConfig.decoder
            self.encoder = runtimeConfig.encoder
            self.httpClientConfiguration = runtimeConfig.httpClientConfiguration
            self.httpClientEngine = runtimeConfig.httpClientEngine
            self.idempotencyTokenGenerator = runtimeConfig.idempotencyTokenGenerator
            self.logger = runtimeConfig.logger
            self.retryer = runtimeConfig.retryer
        }

        public convenience init(
            credentialsProvider: AWSClientRuntime.CredentialsProvider? = nil,
            endpointResolver: AWSClientRuntime.EndpointResolver? = nil,
            region: Swift.String? = nil,
            regionResolver: AWSClientRuntime.RegionResolver? = nil,
            signingRegion: Swift.String? = nil
        ) throws {
            let defaultRuntimeConfig = try ClientRuntime.DefaultSDKRuntimeConfiguration("LexRuntimeV2Client")
            try self.init(credentialsProvider: credentialsProvider, endpointResolver: endpointResolver, region: region, regionResolver: regionResolver, signingRegion: signingRegion, runtimeConfig: defaultRuntimeConfig)
        }
    }
}

public struct LexRuntimeV2ClientLogHandlerFactory: ClientRuntime.SDKLogHandlerFactory {
    public var label = "LexRuntimeV2Client"
    let logLevel: ClientRuntime.SDKLogLevel
    public func construct(label: String) -> LogHandler {
        var handler = StreamLogHandler.standardOutput(label: label)
        handler.logLevel = logLevel.toLoggerType()
        return handler
    }
    public init(logLevel: ClientRuntime.SDKLogLevel) {
        self.logLevel = logLevel
    }
}

extension LexRuntimeV2Client: LexRuntimeV2ClientProtocol {
    /// Removes session information for a specified bot, alias, and user ID.
    ///          You can use this operation to restart a conversation with a bot.
    ///          When you remove a session, the entire history of the session is removed
    ///          so that you can start again.
    ///          You don't need to delete a session. Sessions have a time limit and
    ///          will expire. Set the session time limit when you create the bot. The
    ///          default is 5 minutes, but you can specify anything between 1 minute and
    ///          24 hours.
    ///          If you specify a bot or alias ID that doesn't exist, you receive a
    ///             BadRequestException.
    ///
    ///          If the locale doesn't exist in the bot, or if the locale hasn't been
    ///          enables for the alias, you receive a
    ///          BadRequestException.
    public func deleteSession(input: DeleteSessionInput, completion: @escaping (ClientRuntime.SdkResult<DeleteSessionOutputResponse, DeleteSessionOutputError>) -> Void)
    {
        guard let botId = input.botId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        guard let botAliasId = input.botAliasId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botAliasId unexpectedly nil"))))
            return
        }
        guard let localeId = input.localeId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component localeId unexpectedly nil"))))
            return
        }
        guard let sessionId = input.sessionId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component sessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/bots/\(botId)/botAliases/\(botAliasId)/botLocales/\(localeId)/sessions/\(sessionId)"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteSession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "lex")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<DeleteSessionInput, DeleteSessionOutputResponse, DeleteSessionOutputError>(id: "deleteSession")
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: DeleteSessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: DeleteSessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<DeleteSessionInput, DeleteSessionOutputResponse, DeleteSessionOutputError>(contentType: "application/json"))
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// Returns session information for a specified bot, alias, and
    ///          user.
    ///          For example, you can use this operation to retrieve session
    ///          information for a user that has left a long-running session in
    ///          use.
    ///          If the bot, alias, or session identifier doesn't exist, Amazon Lex V2
    ///          returns a BadRequestException. If the locale doesn't exist
    ///          or is not enabled for the alias, you receive a
    ///             BadRequestException.
    public func getSession(input: GetSessionInput, completion: @escaping (ClientRuntime.SdkResult<GetSessionOutputResponse, GetSessionOutputError>) -> Void)
    {
        guard let botId = input.botId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        guard let botAliasId = input.botAliasId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botAliasId unexpectedly nil"))))
            return
        }
        guard let localeId = input.localeId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component localeId unexpectedly nil"))))
            return
        }
        guard let sessionId = input.sessionId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component sessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/bots/\(botId)/botAliases/\(botAliasId)/botLocales/\(localeId)/sessions/\(sessionId)"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getSession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "lex")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<GetSessionInput, GetSessionOutputResponse, GetSessionOutputError>(id: "getSession")
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: GetSessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: GetSessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<GetSessionInput, GetSessionOutputResponse, GetSessionOutputError>(contentType: "application/json"))
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// Creates a new session or modifies an existing session with an Amazon Lex V2
    ///          bot. Use this operation to enable your application to set the state of
    ///          the bot.
    public func putSession(input: PutSessionInput, completion: @escaping (ClientRuntime.SdkResult<PutSessionOutputResponse, PutSessionOutputError>) -> Void)
    {
        guard let botId = input.botId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        guard let botAliasId = input.botAliasId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botAliasId unexpectedly nil"))))
            return
        }
        guard let localeId = input.localeId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component localeId unexpectedly nil"))))
            return
        }
        guard let sessionId = input.sessionId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component sessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/bots/\(botId)/botAliases/\(botAliasId)/botLocales/\(localeId)/sessions/\(sessionId)"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putSession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "lex")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<PutSessionInput, PutSessionOutputResponse, PutSessionOutputError>(id: "putSession")
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: PutSessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: PutSessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<PutSessionInput, PutSessionOutputResponse, PutSessionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .after, middleware: PutSessionInputBodyMiddleware())
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// Sends user input to Amazon Lex V2. Client applications use this API to send
    ///          requests to Amazon Lex V2 at runtime. Amazon Lex V2 then interprets the user input
    ///          using the machine learning model that it build for the bot.
    ///          In response, Amazon Lex V2 returns the next message to convey to the user
    ///          and an optional response card to display.
    public func recognizeText(input: RecognizeTextInput, completion: @escaping (ClientRuntime.SdkResult<RecognizeTextOutputResponse, RecognizeTextOutputError>) -> Void)
    {
        guard let botId = input.botId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        guard let botAliasId = input.botAliasId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botAliasId unexpectedly nil"))))
            return
        }
        guard let localeId = input.localeId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component localeId unexpectedly nil"))))
            return
        }
        guard let sessionId = input.sessionId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component sessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/bots/\(botId)/botAliases/\(botAliasId)/botLocales/\(localeId)/sessions/\(sessionId)/text"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "recognizeText")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "lex")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<RecognizeTextInput, RecognizeTextOutputResponse, RecognizeTextOutputError>(id: "recognizeText")
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: RecognizeTextInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: RecognizeTextInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<RecognizeTextInput, RecognizeTextOutputResponse, RecognizeTextOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .after, middleware: RecognizeTextInputBodyMiddleware())
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// Sends user input to Amazon Lex V2. You can send text or speech. Clients use
    ///          this API to send text and audio requests to Amazon Lex V2 at runtime. Amazon Lex V2
    ///          interprets the user input using the machine learning model built for
    ///          the bot.
    ///          The following request fields must be compressed with gzip and then
    ///          base64 encoded before you send them to Amazon Lex V2.
    ///
    ///
    ///                requestAttributes
    ///
    ///
    ///                sessionState
    ///
    ///
    ///          The following response fields are compressed using gzip and then
    ///          base64 encoded by Amazon Lex V2. Before you can use these fields, you must
    ///          decode and decompress them.
    ///
    ///
    ///                inputTranscript
    ///
    ///
    ///                interpretations
    ///
    ///
    ///                messages
    ///
    ///
    ///                requestAttributes
    ///
    ///
    ///                sessionState
    ///
    ///
    ///          The example contains a Java application that compresses and encodes
    ///          a Java object to send to Amazon Lex V2, and a second that decodes and
    ///          decompresses a response from Amazon Lex V2.
    public func recognizeUtterance(input: RecognizeUtteranceInput, completion: @escaping (ClientRuntime.SdkResult<RecognizeUtteranceOutputResponse, RecognizeUtteranceOutputError>) -> Void)
    {
        guard let botId = input.botId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        guard let botAliasId = input.botAliasId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botAliasId unexpectedly nil"))))
            return
        }
        guard let localeId = input.localeId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component localeId unexpectedly nil"))))
            return
        }
        guard let sessionId = input.sessionId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component sessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/bots/\(botId)/botAliases/\(botAliasId)/botLocales/\(localeId)/sessions/\(sessionId)/utterance"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "recognizeUtterance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "lex")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<RecognizeUtteranceInput, RecognizeUtteranceOutputResponse, RecognizeUtteranceOutputError>(id: "recognizeUtterance")
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: RecognizeUtteranceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: RecognizeUtteranceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<RecognizeUtteranceInput, RecognizeUtteranceOutputResponse, RecognizeUtteranceOutputError>(contentType: "application/octet-stream"))
        operation.serializeStep.intercept(position: .after, middleware: RecognizeUtteranceInputBodyMiddleware())
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: true)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// Starts an HTTP/2 bidirectional event stream that enables you to send
    ///          audio, text, or DTMF input in real time. After your application starts
    ///          a conversation, users send input to Amazon Lex V2 as a stream of events. Amazon Lex V2
    ///          processes the incoming events and responds with streaming text or audio
    ///          events.
    ///
    ///          Audio input must be in the following format: audio/lpcm
    ///             sample-rate=8000 sample-size-bits=16 channel-count=1;
    ///             is-big-endian=false.
    ///          The StartConversation operation is supported only in
    ///          the following SDKs:
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/goto/SdkForCpp/runtime.lex.v2-2020-08-07/StartConversation">AWS SDK for C++
    ///
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/goto/SdkForJavaV2/runtime.lex.v2-2020-08-07/StartConversation">AWS SDK for Java V2
    ///
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/goto/SdkForRubyV3/runtime.lex.v2-2020-08-07/StartConversation">AWS SDK for Ruby V3
    ///
    ///
    ///
    public func startConversation(input: StartConversationInput, completion: @escaping (ClientRuntime.SdkResult<StartConversationOutputResponse, StartConversationOutputError>) -> Void)
    {
        guard let botId = input.botId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        guard let botAliasId = input.botAliasId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component botAliasId unexpectedly nil"))))
            return
        }
        guard let localeId = input.localeId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component localeId unexpectedly nil"))))
            return
        }
        guard let sessionId = input.sessionId else {
            completion(.failure(.client(ClientRuntime.ClientError.serializationFailed("uri component sessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/bots/\(botId)/botAliases/\(botAliasId)/botLocales/\(localeId)/sessions/\(sessionId)/conversation"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startConversation")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "lex")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<StartConversationInput, StartConversationOutputResponse, StartConversationOutputError>(id: "startConversation")
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: StartConversationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: StartConversationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<StartConversationInput, StartConversationOutputResponse, StartConversationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .after, middleware: StartConversationInputBodyMiddleware())
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
