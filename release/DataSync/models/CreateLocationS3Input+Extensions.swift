// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateLocationS3InputHeadersMiddleware: Middleware {
    public let id: String = "CreateLocationS3InputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLocationS3Input>,
                  next: H) -> Swift.Result<OperationOutput<CreateLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLocationS3Input>
    public typealias MOutput = OperationOutput<CreateLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLocationS3OutputError>
}

public struct CreateLocationS3InputQueryItemMiddleware: Middleware {
    public let id: String = "CreateLocationS3InputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLocationS3Input>,
                  next: H) -> Swift.Result<OperationOutput<CreateLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLocationS3Input>
    public typealias MOutput = OperationOutput<CreateLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLocationS3OutputError>
}

public struct CreateLocationS3InputBodyMiddleware: Middleware {
    public let id: String = "CreateLocationS3InputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLocationS3Input>,
                  next: H) -> Swift.Result<OperationOutput<CreateLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLocationS3Input>
    public typealias MOutput = OperationOutput<CreateLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLocationS3OutputError>
}

extension CreateLocationS3Input: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case agentArns = "AgentArns"
        case s3BucketArn = "S3BucketArn"
        case s3Config = "S3Config"
        case s3StorageClass = "S3StorageClass"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarnlist0 in agentArns {
                try agentArnsContainer.encode(agentarnlist0)
            }
        }
        if let s3BucketArn = s3BucketArn {
            try encodeContainer.encode(s3BucketArn, forKey: .s3BucketArn)
        }
        if let s3Config = s3Config {
            try encodeContainer.encode(s3Config, forKey: .s3Config)
        }
        if let s3StorageClass = s3StorageClass {
            try encodeContainer.encode(s3StorageClass.rawValue, forKey: .s3StorageClass)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
    }
}
