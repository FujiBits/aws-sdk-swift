// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateLocationEfsInputHeadersMiddleware: Middleware {
    public let id: String = "CreateLocationEfsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLocationEfsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLocationEfsInput>
    public typealias MOutput = OperationOutput<CreateLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLocationEfsOutputError>
}

public struct CreateLocationEfsInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateLocationEfsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLocationEfsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLocationEfsInput>
    public typealias MOutput = OperationOutput<CreateLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLocationEfsOutputError>
}

public struct CreateLocationEfsInputBodyMiddleware: Middleware {
    public let id: String = "CreateLocationEfsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLocationEfsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLocationEfsInput>
    public typealias MOutput = OperationOutput<CreateLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLocationEfsOutputError>
}

extension CreateLocationEfsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ec2Config = "Ec2Config"
        case efsFilesystemArn = "EfsFilesystemArn"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2Config = ec2Config {
            try encodeContainer.encode(ec2Config, forKey: .ec2Config)
        }
        if let efsFilesystemArn = efsFilesystemArn {
            try encodeContainer.encode(efsFilesystemArn, forKey: .efsFilesystemArn)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
    }
}
