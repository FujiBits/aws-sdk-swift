// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateLocationFsxWindowsInputHeadersMiddleware: Middleware {
    public let id: String = "CreateLocationFsxWindowsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLocationFsxWindowsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLocationFsxWindowsInput>
    public typealias MOutput = OperationOutput<CreateLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLocationFsxWindowsOutputError>
}

public struct CreateLocationFsxWindowsInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateLocationFsxWindowsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLocationFsxWindowsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLocationFsxWindowsInput>
    public typealias MOutput = OperationOutput<CreateLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLocationFsxWindowsOutputError>
}

public struct CreateLocationFsxWindowsInputBodyMiddleware: Middleware {
    public let id: String = "CreateLocationFsxWindowsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLocationFsxWindowsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLocationFsxWindowsInput>
    public typealias MOutput = OperationOutput<CreateLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLocationFsxWindowsOutputError>
}

extension CreateLocationFsxWindowsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain = "Domain"
        case fsxFilesystemArn = "FsxFilesystemArn"
        case password = "Password"
        case securityGroupArns = "SecurityGroupArns"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
        case user = "User"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let fsxFilesystemArn = fsxFilesystemArn {
            try encodeContainer.encode(fsxFilesystemArn, forKey: .fsxFilesystemArn)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for ec2securitygrouparnlist0 in securityGroupArns {
                try securityGroupArnsContainer.encode(ec2securitygrouparnlist0)
            }
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
        if let user = user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }
}
