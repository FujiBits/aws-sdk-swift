// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateLocationSmbInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateLocationSmbInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateLocationSmbInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateLocationSmbInput>
    public typealias MOutput = OperationOutput<UpdateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateLocationSmbOutputError>
}

public struct UpdateLocationSmbInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateLocationSmbInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateLocationSmbInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateLocationSmbInput>
    public typealias MOutput = OperationOutput<UpdateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateLocationSmbOutputError>
}

public struct UpdateLocationSmbInputBodyMiddleware: Middleware {
    public let id: String = "UpdateLocationSmbInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateLocationSmbInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateLocationSmbInput>
    public typealias MOutput = OperationOutput<UpdateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateLocationSmbOutputError>
}

extension UpdateLocationSmbInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case agentArns = "AgentArns"
        case domain = "Domain"
        case locationArn = "LocationArn"
        case mountOptions = "MountOptions"
        case password = "Password"
        case subdirectory = "Subdirectory"
        case user = "User"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarnlist0 in agentArns {
                try agentArnsContainer.encode(agentarnlist0)
            }
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let mountOptions = mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let user = user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }
}
