// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartTaskExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "StartTaskExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartTaskExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartTaskExecutionInput>
    public typealias MOutput = OperationOutput<StartTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartTaskExecutionOutputError>
}

public struct StartTaskExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "StartTaskExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartTaskExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartTaskExecutionInput>
    public typealias MOutput = OperationOutput<StartTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartTaskExecutionOutputError>
}

public struct StartTaskExecutionInputBodyMiddleware: Middleware {
    public let id: String = "StartTaskExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartTaskExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartTaskExecutionInput>
    public typealias MOutput = OperationOutput<StartTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartTaskExecutionOutputError>
}

extension StartTaskExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case includes = "Includes"
        case overrideOptions = "OverrideOptions"
        case taskArn = "TaskArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includes = includes {
            var includesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includes)
            for filterlist0 in includes {
                try includesContainer.encode(filterlist0)
            }
        }
        if let overrideOptions = overrideOptions {
            try encodeContainer.encode(overrideOptions, forKey: .overrideOptions)
        }
        if let taskArn = taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }
}
