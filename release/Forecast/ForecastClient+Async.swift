// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ForecastClient {
    /// <p>Creates an Amazon Forecast dataset. The information about the dataset that you provide helps
    ///       Forecast understand how to consume the data for model training. This includes the
    ///       following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <i>
    ///                      <code>DataFrequency</code>
    ///                   </i> - How frequently your historical
    ///           time-series data is collected.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>
    ///                      <code>Domain</code>
    ///                   </i> and
    ///             <i>
    ///                      <code>DatasetType</code>
    ///                   </i> - Each dataset has an associated dataset
    ///           domain and a type within the domain. Amazon Forecast provides a list of predefined domains and
    ///           types within each domain. For each unique dataset domain and type within the domain,
    ///           Amazon Forecast requires your data to include a minimum set of predefined fields.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>
    ///                      <code>Schema</code>
    ///                   </i> - A schema specifies the fields in the dataset,
    ///           including the field name and data type.</p>
    ///             </li>
    ///          </ul>
    ///          <p>After creating a dataset, you import your training data into it and add the dataset to a
    ///       dataset group. You use the dataset group to create a predictor. For more information, see
    ///         <a>howitworks-datasets-groups</a>.</p>
    ///          <p>To get a list of all your datasets, use the <a>ListDatasets</a>
    ///       operation.</p>
    ///          <p>For example Forecast datasets, see the <a href="https://github.com/aws-samples/amazon-forecast-samples">Amazon Forecast Sample GitHub
    ///         repository</a>.</p>
    ///          <note>
    ///             <p>The <code>Status</code> of a dataset must be <code>ACTIVE</code> before you can import
    ///         training data. Use the <a>DescribeDataset</a> operation to get the status.</p>
    ///          </note>
    func createDataset(input: CreateDatasetInput) async throws -> CreateDatasetOutputResponse
    {
        typealias createDatasetContinuation = CheckedContinuation<CreateDatasetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDatasetContinuation) in
            createDataset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a dataset group, which holds a collection of related datasets. You can add
    ///       datasets to the dataset group when you create the dataset group, or later by using the <a>UpdateDatasetGroup</a> operation.</p>
    ///          <p>After creating a dataset group and adding datasets, you use the dataset group when you
    ///       create a predictor. For more information, see <a>howitworks-datasets-groups</a>.</p>
    ///          <p>To get a list of all your datasets groups, use the <a>ListDatasetGroups</a>
    ///       operation.</p>
    ///          <note>
    ///             <p>The <code>Status</code> of a dataset group must be <code>ACTIVE</code> before you can
    ///         use the dataset group to create a predictor. To get the status, use the <a>DescribeDatasetGroup</a> operation.</p>
    ///          </note>
    func createDatasetGroup(input: CreateDatasetGroupInput) async throws -> CreateDatasetGroupOutputResponse
    {
        typealias createDatasetGroupContinuation = CheckedContinuation<CreateDatasetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDatasetGroupContinuation) in
            createDatasetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Imports your training data to an Amazon Forecast dataset. You provide the location of your
    ///       training data in an Amazon Simple Storage Service (Amazon S3) bucket and the Amazon Resource Name (ARN) of the dataset
    ///       that you want to import the data to.</p>
    ///          <p>You must specify a <a>DataSource</a> object that includes an AWS Identity and Access Management (IAM)
    ///       role that Amazon Forecast can assume to access the data, as Amazon Forecast makes a copy of your data and
    ///       processes it in an internal AWS system. For more information, see <a>aws-forecast-iam-roles</a>.</p>
    ///          <p>The training data must be in CSV format. The delimiter must be a comma (,).</p>
    ///          <p>You can specify the path to a specific CSV file, the S3 bucket, or to a folder in the S3
    ///       bucket. For the latter two cases, Amazon Forecast imports all files up to the limit of 10,000
    ///       files.</p>
    ///
    ///
    ///          <p>Because dataset imports are not aggregated, your most recent dataset import is the one
    ///       that is used when training a predictor or generating a forecast. Make sure that your most
    ///       recent dataset import contains all of the data you want to model off of, and not just the new
    ///       data collected since the previous import.</p>
    ///
    ///
    ///          <p>To get a list of all your dataset import jobs, filtered by specified criteria, use the
    ///         <a>ListDatasetImportJobs</a> operation.</p>
    func createDatasetImportJob(input: CreateDatasetImportJobInput) async throws -> CreateDatasetImportJobOutputResponse
    {
        typealias createDatasetImportJobContinuation = CheckedContinuation<CreateDatasetImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDatasetImportJobContinuation) in
            createDatasetImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a forecast for each item in the <code>TARGET_TIME_SERIES</code> dataset that was
    ///       used to train the predictor. This is known as inference. To retrieve the forecast for a single
    ///       item at low latency, use the  operation. To
    ///       export the complete forecast into your Amazon Simple Storage Service (Amazon S3) bucket, use the <a>CreateForecastExportJob</a> operation.</p>
    ///          <p>The range of the forecast is determined by the <code>ForecastHorizon</code> value, which
    ///       you specify in the <a>CreatePredictor</a> request. When you query a forecast, you
    ///       can request a specific date range within the forecast.</p>
    ///          <p>To get a list of all your forecasts, use the <a>ListForecasts</a>
    ///       operation.</p>
    ///          <note>
    ///             <p>The forecasts generated by Amazon Forecast are in the same time zone as the dataset that was
    ///         used to create the predictor.</p>
    ///          </note>
    ///          <p>For more information, see <a>howitworks-forecast</a>.</p>
    ///          <note>
    ///             <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query
    ///         or export the forecast. Use the <a>DescribeForecast</a> operation to get the
    ///         status.</p>
    ///          </note>
    func createForecast(input: CreateForecastInput) async throws -> CreateForecastOutputResponse
    {
        typealias createForecastContinuation = CheckedContinuation<CreateForecastOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createForecastContinuation) in
            createForecast(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Exports a forecast created by the <a>CreateForecast</a> operation to your
    ///       Amazon Simple Storage Service (Amazon S3) bucket. The forecast file name will match the following conventions:</p>
    ///          <p><ForecastExportJobName>_<ExportTimestamp>_<PartNumber></p>
    ///          <p>where the <ExportTimestamp> component is in Java SimpleDateFormat
    ///       (yyyy-MM-ddTHH-mm-ssZ).</p>
    ///          <p>You must specify a <a>DataDestination</a> object that includes an AWS Identity and Access Management
    ///       (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see
    ///         <a>aws-forecast-iam-roles</a>.</p>
    ///          <p>For more information, see <a>howitworks-forecast</a>.</p>
    ///          <p>To get a list of all your forecast export jobs, use the <a>ListForecastExportJobs</a> operation.</p>
    ///          <note>
    ///             <p>The <code>Status</code> of the forecast export job must be <code>ACTIVE</code> before
    ///         you can access the forecast in your Amazon S3 bucket. To get the status, use the <a>DescribeForecastExportJob</a> operation.</p>
    ///          </note>
    func createForecastExportJob(input: CreateForecastExportJobInput) async throws -> CreateForecastExportJobOutputResponse
    {
        typealias createForecastExportJobContinuation = CheckedContinuation<CreateForecastExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createForecastExportJobContinuation) in
            createForecastExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an Amazon Forecast predictor.</p>
    ///          <p>In the request, provide a dataset group and either specify an algorithm or let
    ///       Amazon Forecast choose an algorithm for you using AutoML. If you specify an algorithm, you also can
    ///       override algorithm-specific hyperparameters.</p>
    ///          <p>Amazon Forecast uses the algorithm to train a predictor using the latest version of the
    ///       datasets in the specified dataset group. You can then generate a
    ///       forecast using the <a>CreateForecast</a> operation.</p>
    ///          <p>
    ///       To see the evaluation metrics, use the <a>GetAccuracyMetrics</a> operation.
    ///     </p>
    ///          <p>You can specify a featurization configuration to fill and aggregate the data
    ///       fields in the <code>TARGET_TIME_SERIES</code> dataset to improve model training. For more
    ///       information, see <a>FeaturizationConfig</a>.</p>
    ///          <p>For RELATED_TIME_SERIES datasets, <code>CreatePredictor</code> verifies that the
    ///         <code>DataFrequency</code> specified when the dataset was created matches the
    ///         <code>ForecastFrequency</code>. TARGET_TIME_SERIES datasets don't have this restriction.
    ///       Amazon Forecast also verifies the delimiter and timestamp format. For more information, see <a>howitworks-datasets-groups</a>.</p>
    ///          <p>By default, predictors are trained and evaluated at the 0.1 (P10), 0.5 (P50), and 0.9
    ///       (P90) quantiles. You can choose custom forecast types to train and evaluate your predictor
    ///       by setting the <code>ForecastTypes</code>.
    ///     </p>
    ///          <p>
    ///             <b>AutoML</b>
    ///          </p>
    ///          <p>If you want Amazon Forecast to evaluate each algorithm and choose the one that minimizes the
    ///         <code>objective function</code>, set <code>PerformAutoML</code> to <code>true</code>. The
    ///         <code>objective function</code> is defined as the mean of the weighted losses over the
    ///       forecast types. By default, these are the p10, p50, and p90
    ///       quantile losses. For more information, see <a>EvaluationResult</a>.</p>
    ///          <p>When AutoML is enabled, the following properties are disallowed:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AlgorithmArn</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>HPOConfig</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PerformHPO</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TrainingParameters</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///
    ///
    ///
    ///          <p>To get a list of all of your predictors, use the <a>ListPredictors</a>
    ///       operation.</p>
    ///          <note>
    ///             <p>Before you can use the predictor to create a forecast, the <code>Status</code> of the
    ///         predictor must be <code>ACTIVE</code>, signifying that training has completed. To get the
    ///         status, use the <a>DescribePredictor</a> operation.</p>
    ///          </note>
    func createPredictor(input: CreatePredictorInput) async throws -> CreatePredictorOutputResponse
    {
        typealias createPredictorContinuation = CheckedContinuation<CreatePredictorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPredictorContinuation) in
            createPredictor(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Exports backtest forecasts and accuracy metrics generated by the <a>CreatePredictor</a> operation. Two folders containing CSV files are exported
    ///             to your specified S3 bucket.</p>
    ///         <p> The export file names will match the following conventions:</p>
    ///         <p>
    ///             <code><ExportJobName>_<ExportTimestamp>_<PartNumber>.csv</code>
    ///          </p>
    ///         <p>The <ExportTimestamp> component is in Java SimpleDate format
    ///             (yyyy-MM-ddTHH-mm-ssZ).</p>
    ///         <p>You must specify a <a>DataDestination</a> object that includes an Amazon S3
    ///             bucket and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3
    ///             bucket. For more information, see <a>aws-forecast-iam-roles</a>.</p>
    ///         <note>
    ///             <p>The <code>Status</code> of the export job must be <code>ACTIVE</code> before
    ///                 you can access the export in your Amazon S3 bucket. To get the status, use the <a>DescribePredictorBacktestExportJob</a> operation.</p>
    ///         </note>
    func createPredictorBacktestExportJob(input: CreatePredictorBacktestExportJobInput) async throws -> CreatePredictorBacktestExportJobOutputResponse
    {
        typealias createPredictorBacktestExportJobContinuation = CheckedContinuation<CreatePredictorBacktestExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPredictorBacktestExportJobContinuation) in
            createPredictorBacktestExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an Amazon Forecast dataset that was created using the <a>CreateDataset</a>
    ///       operation. You can only delete datasets that have a status of <code>ACTIVE</code> or
    ///         <code>CREATE_FAILED</code>. To get the status use the <a>DescribeDataset</a>
    ///       operation.</p>
    ///          <note>
    ///             <p>Forecast does not automatically update any dataset groups that contain the deleted dataset.
    ///         In order to update the dataset group, use the
    ///         operation, omitting the deleted dataset's ARN.</p>
    ///          </note>
    func deleteDataset(input: DeleteDatasetInput) async throws -> DeleteDatasetOutputResponse
    {
        typealias deleteDatasetContinuation = CheckedContinuation<DeleteDatasetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDatasetContinuation) in
            deleteDataset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a dataset group created using the <a>CreateDatasetGroup</a> operation.
    ///       You can only delete dataset groups that have a status of <code>ACTIVE</code>,
    ///         <code>CREATE_FAILED</code>, or <code>UPDATE_FAILED</code>. To get the status, use the <a>DescribeDatasetGroup</a> operation.</p>
    ///          <p>This operation deletes only the dataset group, not the datasets in the group.</p>
    func deleteDatasetGroup(input: DeleteDatasetGroupInput) async throws -> DeleteDatasetGroupOutputResponse
    {
        typealias deleteDatasetGroupContinuation = CheckedContinuation<DeleteDatasetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDatasetGroupContinuation) in
            deleteDatasetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a dataset import job created using the <a>CreateDatasetImportJob</a>
    ///       operation. You can delete only dataset import jobs that have a status of <code>ACTIVE</code>
    ///       or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeDatasetImportJob</a> operation.</p>
    func deleteDatasetImportJob(input: DeleteDatasetImportJobInput) async throws -> DeleteDatasetImportJobOutputResponse
    {
        typealias deleteDatasetImportJobContinuation = CheckedContinuation<DeleteDatasetImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDatasetImportJobContinuation) in
            deleteDatasetImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a forecast created using the <a>CreateForecast</a> operation. You can
    ///       delete only forecasts that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>.
    ///       To get the status, use the <a>DescribeForecast</a> operation.</p>
    ///          <p>You can't delete a forecast while it is being exported. After a forecast is deleted, you
    ///       can no longer query the forecast.</p>
    func deleteForecast(input: DeleteForecastInput) async throws -> DeleteForecastOutputResponse
    {
        typealias deleteForecastContinuation = CheckedContinuation<DeleteForecastOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteForecastContinuation) in
            deleteForecast(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a forecast export job created using the <a>CreateForecastExportJob</a>
    ///       operation. You can delete only export jobs that have a status of <code>ACTIVE</code> or
    ///         <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeForecastExportJob</a> operation.</p>
    func deleteForecastExportJob(input: DeleteForecastExportJobInput) async throws -> DeleteForecastExportJobOutputResponse
    {
        typealias deleteForecastExportJobContinuation = CheckedContinuation<DeleteForecastExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteForecastExportJobContinuation) in
            deleteForecastExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a predictor created using the <a>CreatePredictor</a> operation. You can
    ///       delete only predictor that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>.
    ///       To get the status, use the <a>DescribePredictor</a> operation.</p>
    func deletePredictor(input: DeletePredictorInput) async throws -> DeletePredictorOutputResponse
    {
        typealias deletePredictorContinuation = CheckedContinuation<DeletePredictorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePredictorContinuation) in
            deletePredictor(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a predictor backtest export job.</p>
    func deletePredictorBacktestExportJob(input: DeletePredictorBacktestExportJobInput) async throws -> DeletePredictorBacktestExportJobOutputResponse
    {
        typealias deletePredictorBacktestExportJobContinuation = CheckedContinuation<DeletePredictorBacktestExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePredictorBacktestExportJobContinuation) in
            deletePredictorBacktestExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an entire resource tree. This operation will delete the parent resource and
    ///             its child resources.</p>
    ///         <p>Child resources are resources that were created from another resource. For example,
    ///             when a forecast is generated from a predictor, the forecast is the child resource and
    ///             the predictor is the parent resource.</p>
    ///         <p>Amazon Forecast resources possess the following parent-child resource hierarchies:</p>
    ///
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>Dataset</b>: dataset import jobs</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Dataset Group</b>: predictors, predictor backtest
    ///                     export jobs, forecasts, forecast export jobs</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Predictor</b>: predictor backtest export jobs,
    ///                     forecasts, forecast export jobs</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Forecast</b>: forecast export jobs</p>
    ///             </li>
    ///          </ul>
    ///         <note>
    ///             <p>
    ///                <code>DeleteResourceTree</code> will only delete Amazon Forecast resources, and will not
    ///                 delete datasets or exported files stored in Amazon S3. </p>
    ///         </note>
    func deleteResourceTree(input: DeleteResourceTreeInput) async throws -> DeleteResourceTreeOutputResponse
    {
        typealias deleteResourceTreeContinuation = CheckedContinuation<DeleteResourceTreeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteResourceTreeContinuation) in
            deleteResourceTree(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes an Amazon Forecast dataset created using the <a>CreateDataset</a>
    ///       operation.</p>
    ///          <p>In addition to listing the parameters specified in the <code>CreateDataset</code> request,
    ///       this operation includes the following dataset properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    func describeDataset(input: DescribeDatasetInput) async throws -> DescribeDatasetOutputResponse
    {
        typealias describeDatasetContinuation = CheckedContinuation<DescribeDatasetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDatasetContinuation) in
            describeDataset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a dataset group created using the <a>CreateDatasetGroup</a>
    ///       operation.</p>
    ///          <p>In addition to listing the parameters provided in the <code>CreateDatasetGroup</code>
    ///       request, this operation includes the following properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DatasetArns</code> - The datasets belonging to the group.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    func describeDatasetGroup(input: DescribeDatasetGroupInput) async throws -> DescribeDatasetGroupOutputResponse
    {
        typealias describeDatasetGroupContinuation = CheckedContinuation<DescribeDatasetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDatasetGroupContinuation) in
            describeDatasetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a dataset import job created using the <a>CreateDatasetImportJob</a>
    ///       operation.</p>
    ///          <p>In addition to listing the parameters provided in the <code>CreateDatasetImportJob</code>
    ///       request, this operation includes the following properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataSize</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FieldStatistics</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Message</code> - If an error occurred, information about the error.</p>
    ///             </li>
    ///          </ul>
    func describeDatasetImportJob(input: DescribeDatasetImportJobInput) async throws -> DescribeDatasetImportJobOutputResponse
    {
        typealias describeDatasetImportJobContinuation = CheckedContinuation<DescribeDatasetImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDatasetImportJobContinuation) in
            describeDatasetImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a forecast created using the <a>CreateForecast</a> operation.</p>
    ///          <p>In addition to listing the properties provided in the <code>CreateForecast</code> request,
    ///       this operation lists the following properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DatasetGroupArn</code> - The dataset group that provided the training
    ///           data.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Message</code> - If an error occurred, information about the error.</p>
    ///             </li>
    ///          </ul>
    func describeForecast(input: DescribeForecastInput) async throws -> DescribeForecastOutputResponse
    {
        typealias describeForecastContinuation = CheckedContinuation<DescribeForecastOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeForecastContinuation) in
            describeForecast(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a forecast export job created using the <a>CreateForecastExportJob</a> operation.</p>
    ///          <p>In addition to listing the properties provided by the user in the
    ///         <code>CreateForecastExportJob</code> request, this operation lists the following
    ///       properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Message</code> - If an error occurred, information about the error.</p>
    ///             </li>
    ///          </ul>
    func describeForecastExportJob(input: DescribeForecastExportJobInput) async throws -> DescribeForecastExportJobOutputResponse
    {
        typealias describeForecastExportJobContinuation = CheckedContinuation<DescribeForecastExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeForecastExportJobContinuation) in
            describeForecastExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a predictor created using the <a>CreatePredictor</a>
    ///       operation.</p>
    ///          <p>In addition to listing the properties provided in the <code>CreatePredictor</code>
    ///       request, this operation lists the following properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DatasetImportJobArns</code> - The dataset import jobs used to import training
    ///           data.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AutoMLAlgorithmArns</code> - If AutoML is performed, the algorithms that were
    ///           evaluated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Message</code> - If an error occurred, information about the error.</p>
    ///             </li>
    ///          </ul>
    func describePredictor(input: DescribePredictorInput) async throws -> DescribePredictorOutputResponse
    {
        typealias describePredictorContinuation = CheckedContinuation<DescribePredictorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePredictorContinuation) in
            describePredictor(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a predictor backtest export job created using the <a>CreatePredictorBacktestExportJob</a> operation.</p>
    ///         <p>In addition to listing the properties provided by the user in the
    ///             <code>CreatePredictorBacktestExportJob</code> request, this operation lists the
    ///             following properties:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>CreationTime</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>LastModificationTime</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>Status</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Message</code> (if an error occurred)</p>
    ///             </li>
    ///          </ul>
    func describePredictorBacktestExportJob(input: DescribePredictorBacktestExportJobInput) async throws -> DescribePredictorBacktestExportJobOutputResponse
    {
        typealias describePredictorBacktestExportJobContinuation = CheckedContinuation<DescribePredictorBacktestExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePredictorBacktestExportJobContinuation) in
            describePredictorBacktestExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides metrics on the accuracy of the models that were trained by the <a>CreatePredictor</a> operation. Use metrics to see how well the model performed and
    ///       to decide whether to use the predictor to generate a forecast. For more information, see
    ///         <a href="https://docs.aws.amazon.com/forecast/latest/dg/metrics.html">Predictor
    ///         Metrics</a>.</p>
    ///          <p>This operation generates metrics for each backtest window that was evaluated. The number of backtest windows
    ///       (<code>NumberOfBacktestWindows</code>) is specified using the
    ///       <a>EvaluationParameters</a> object, which is optionally
    ///       included in the <code>CreatePredictor</code> request. If
    ///       <code>NumberOfBacktestWindows</code> isn't specified, the number defaults to one.</p>
    ///          <p>The parameters of the <code>filling</code> method determine which items contribute to
    ///       the metrics. If you want all items to contribute, specify <code>zero</code>.
    ///       If you want only those items that have complete data in the range being evaluated to
    ///       contribute, specify <code>nan</code>.
    ///       For more information, see <a>FeaturizationMethod</a>.</p>
    ///
    ///          <note>
    ///             <p>Before you can get accuracy metrics, the <code>Status</code> of the predictor must be
    ///         <code>ACTIVE</code>, signifying that training has completed.
    ///         To get the status, use the <a>DescribePredictor</a> operation.</p>
    ///          </note>
    func getAccuracyMetrics(input: GetAccuracyMetricsInput) async throws -> GetAccuracyMetricsOutputResponse
    {
        typealias getAccuracyMetricsContinuation = CheckedContinuation<GetAccuracyMetricsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAccuracyMetricsContinuation) in
            getAccuracyMetrics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of dataset groups created using the <a>CreateDatasetGroup</a>
    ///       operation. For each dataset group, this operation returns a summary of its properties,
    ///       including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by
    ///       using the dataset group ARN with the <a>DescribeDatasetGroup</a> operation.</p>
    func listDatasetGroups(input: ListDatasetGroupsInput) async throws -> ListDatasetGroupsOutputResponse
    {
        typealias listDatasetGroupsContinuation = CheckedContinuation<ListDatasetGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDatasetGroupsContinuation) in
            listDatasetGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of dataset import jobs created using the <a>CreateDatasetImportJob</a> operation. For each import job, this operation returns a
    ///       summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the
    ///       complete set of properties by using the ARN with the <a>DescribeDatasetImportJob</a> operation. You can filter the list by providing an array of <a>Filter</a>
    ///       objects.</p>
    func listDatasetImportJobs(input: ListDatasetImportJobsInput) async throws -> ListDatasetImportJobsOutputResponse
    {
        typealias listDatasetImportJobsContinuation = CheckedContinuation<ListDatasetImportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDatasetImportJobsContinuation) in
            listDatasetImportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of datasets created using the <a>CreateDataset</a> operation.
    ///       For each dataset, a summary of its properties, including its Amazon Resource Name (ARN), is
    ///       returned. To retrieve the complete set of properties, use the ARN with the <a>DescribeDataset</a> operation.</p>
    func listDatasets(input: ListDatasetsInput) async throws -> ListDatasetsOutputResponse
    {
        typealias listDatasetsContinuation = CheckedContinuation<ListDatasetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDatasetsContinuation) in
            listDatasets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of forecast export jobs created using the <a>CreateForecastExportJob</a> operation. For each forecast export job, this operation
    ///       returns a summary of its properties, including its Amazon Resource Name (ARN). To retrieve the
    ///       complete set of properties, use the ARN with the <a>DescribeForecastExportJob</a>
    ///       operation. You can filter the list using an array of <a>Filter</a> objects.</p>
    func listForecastExportJobs(input: ListForecastExportJobsInput) async throws -> ListForecastExportJobsOutputResponse
    {
        typealias listForecastExportJobsContinuation = CheckedContinuation<ListForecastExportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listForecastExportJobsContinuation) in
            listForecastExportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of forecasts created using the <a>CreateForecast</a> operation.
    ///       For each forecast, this operation returns a summary of its properties, including its Amazon
    ///       Resource Name (ARN). To retrieve the complete set of properties, specify the ARN with the
    ///         <a>DescribeForecast</a> operation. You can filter the list using an array of
    ///         <a>Filter</a> objects.</p>
    func listForecasts(input: ListForecastsInput) async throws -> ListForecastsOutputResponse
    {
        typealias listForecastsContinuation = CheckedContinuation<ListForecastsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listForecastsContinuation) in
            listForecasts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of predictor backtest export jobs created using the <a>CreatePredictorBacktestExportJob</a> operation. This operation returns a summary
    ///             for each backtest export job. You can filter the list using an array of <a>Filter</a> objects.</p>
    ///         <p>To retrieve the complete set of properties for a particular backtest export job, use the
    ///             ARN with the <a>DescribePredictorBacktestExportJob</a> operation.</p>
    func listPredictorBacktestExportJobs(input: ListPredictorBacktestExportJobsInput) async throws -> ListPredictorBacktestExportJobsOutputResponse
    {
        typealias listPredictorBacktestExportJobsContinuation = CheckedContinuation<ListPredictorBacktestExportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPredictorBacktestExportJobsContinuation) in
            listPredictorBacktestExportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of predictors created using the <a>CreatePredictor</a>
    ///       operation. For each predictor, this operation returns a summary of its properties, including
    ///       its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the
    ///       ARN with the <a>DescribePredictor</a> operation. You can filter the list using an
    ///       array of <a>Filter</a> objects.</p>
    func listPredictors(input: ListPredictorsInput) async throws -> ListPredictorsOutputResponse
    {
        typealias listPredictorsContinuation = CheckedContinuation<ListPredictorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPredictorsContinuation) in
            listPredictors(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the tags for an Amazon Forecast resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Stops a resource.</p>
    ///          <p>The resource undergoes the following states:
    ///          <code>CREATE_STOPPING</code> and <code>CREATE_STOPPED</code>. You cannot resume
    ///          a resource once it has been stopped.</p>
    ///          <p>This operation can be applied to the following resources (and their corresponding child
    ///          resources):</p>
    ///          <ul>
    ///             <li>
    ///                <p>Dataset Import Job</p>
    ///             </li>
    ///             <li>
    ///                <p>Predictor Job</p>
    ///             </li>
    ///             <li>
    ///                <p>Forecast Job</p>
    ///             </li>
    ///             <li>
    ///                <p>Forecast Export Job</p>
    ///             </li>
    ///             <li>
    ///                <p>Predictor Backtest Export Job</p>
    ///             </li>
    ///          </ul>
    func stopResource(input: StopResourceInput) async throws -> StopResourceOutputResponse
    {
        typealias stopResourceContinuation = CheckedContinuation<StopResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopResourceContinuation) in
            stopResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are also deleted.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified tags from a resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Replaces the datasets in a dataset group with the specified datasets.</p>
    ///          <note>
    ///             <p>The <code>Status</code> of the dataset group must be <code>ACTIVE</code> before you can
    ///         use the dataset group to create a predictor. Use the <a>DescribeDatasetGroup</a>
    ///         operation to get the status.</p>
    ///          </note>
    func updateDatasetGroup(input: UpdateDatasetGroupInput) async throws -> UpdateDatasetGroupOutputResponse
    {
        typealias updateDatasetGroupContinuation = CheckedContinuation<UpdateDatasetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDatasetGroupContinuation) in
            updateDatasetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
