// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct QueryForecastInputHeadersMiddleware: Middleware {
    public let id: String = "QueryForecastInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<QueryForecastInput>,
                  next: H) -> Swift.Result<OperationOutput<QueryForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<QueryForecastInput>
    public typealias MOutput = OperationOutput<QueryForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<QueryForecastOutputError>
}

public struct QueryForecastInputQueryItemMiddleware: Middleware {
    public let id: String = "QueryForecastInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<QueryForecastInput>,
                  next: H) -> Swift.Result<OperationOutput<QueryForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<QueryForecastInput>
    public typealias MOutput = OperationOutput<QueryForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<QueryForecastOutputError>
}

public struct QueryForecastInputBodyMiddleware: Middleware {
    public let id: String = "QueryForecastInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<QueryForecastInput>,
                  next: H) -> Swift.Result<OperationOutput<QueryForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<QueryForecastInput>
    public typealias MOutput = OperationOutput<QueryForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<QueryForecastOutputError>
}

extension QueryForecastInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endDate = "EndDate"
        case filters = "Filters"
        case forecastArn = "ForecastArn"
        case nextToken = "NextToken"
        case startDate = "StartDate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endDate = endDate {
            try encodeContainer.encode(endDate, forKey: .endDate)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .filters)
            for (dictKey0, filters0) in filters {
                try filtersContainer.encode(filters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let forecastArn = forecastArn {
            try encodeContainer.encode(forecastArn, forKey: .forecastArn)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startDate = startDate {
            try encodeContainer.encode(startDate, forKey: .startDate)
        }
    }
}
