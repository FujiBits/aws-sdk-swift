// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UploadMultipartPartInputHeadersMiddleware: Middleware {
    public let id: String = "UploadMultipartPartInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UploadMultipartPartInput>,
                  next: H) -> Swift.Result<OperationOutput<UploadMultipartPartOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let checksum = input.operationInput.checksum {
            input.builder.withHeader(name: "x-amz-sha256-tree-hash", value: String(checksum))
        }
        if let range = input.operationInput.range {
            input.builder.withHeader(name: "Content-Range", value: String(range))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UploadMultipartPartInput>
    public typealias MOutput = OperationOutput<UploadMultipartPartOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UploadMultipartPartOutputError>
}

public struct UploadMultipartPartInputQueryItemMiddleware: Middleware {
    public let id: String = "UploadMultipartPartInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UploadMultipartPartInput>,
                  next: H) -> Swift.Result<OperationOutput<UploadMultipartPartOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UploadMultipartPartInput>
    public typealias MOutput = OperationOutput<UploadMultipartPartOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UploadMultipartPartOutputError>
}

public struct UploadMultipartPartInputBodyMiddleware: Middleware {
    public let id: String = "UploadMultipartPartInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UploadMultipartPartInput>,
                  next: H) -> Swift.Result<OperationOutput<UploadMultipartPartOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let body = input.operationInput.body {
            let data = body
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UploadMultipartPartInput>
    public typealias MOutput = OperationOutput<UploadMultipartPartOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UploadMultipartPartOutputError>
}

extension UploadMultipartPartInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case body
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = body {
            try encodeContainer.encode(body.base64EncodedString(), forKey: .body)
        }
    }
}
