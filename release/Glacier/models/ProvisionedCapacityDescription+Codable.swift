// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProvisionedCapacityDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case capacityId = "CapacityId"
        case expirationDate = "ExpirationDate"
        case startDate = "StartDate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityId = capacityId {
            try encodeContainer.encode(capacityId, forKey: .capacityId)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate, forKey: .expirationDate)
        }
        if let startDate = startDate {
            try encodeContainer.encode(startDate, forKey: .startDate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .capacityId)
        capacityId = capacityIdDecoded
        let startDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startDate)
        startDate = startDateDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
    }
}
