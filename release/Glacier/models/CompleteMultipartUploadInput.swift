// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides options to complete a multipart upload operation. This informs Amazon
///          Glacier that all the archive parts have been uploaded and Amazon S3 Glacier (Glacier) can now assemble
///          the archive from the uploaded parts. After assembling and saving the archive to the vault,
///          Glacier returns the URI path of the newly created archive resource.</p>
public struct CompleteMultipartUploadInput: Equatable {
    /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
    ///          vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
    ///          (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
    ///          credentials used to sign the request. If you use an account ID, do not include any hyphens
    ///          ('-') in the ID.</p>
    public let accountId: String?
    /// <p>The total size, in bytes, of the entire archive. This value should be the sum of all
    ///          the sizes of the individual parts that you uploaded.</p>
    public let archiveSize: String?
    /// <p>The SHA256 tree hash of the entire archive. It is the tree hash of SHA256 tree hash
    ///          of the individual parts. If the value you specify in the request does not match the SHA256
    ///          tree hash of the final assembled archive as computed by Amazon S3 Glacier (Glacier),
    ///          Glacier returns an error and the request fails.</p>
    public let checksum: String?
    /// <p>The upload ID of the multipart upload.</p>
    public let uploadId: String?
    /// <p>The name of the vault.</p>
    public let vaultName: String?

    public init (
        accountId: String? = nil,
        archiveSize: String? = nil,
        checksum: String? = nil,
        uploadId: String? = nil,
        vaultName: String? = nil
    )
    {
        self.accountId = accountId
        self.archiveSize = archiveSize
        self.checksum = checksum
        self.uploadId = uploadId
        self.vaultName = vaultName
    }
}

extension CompleteMultipartUploadInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CompleteMultipartUploadInput(accountId: \(String(describing: accountId)), archiveSize: \(String(describing: archiveSize)), checksum: \(String(describing: checksum)), uploadId: \(String(describing: uploadId)), vaultName: \(String(describing: vaultName)))"}
}
