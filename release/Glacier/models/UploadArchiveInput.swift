// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Provides options to add an archive to a vault.</p>
public struct UploadArchiveInput: Equatable {
    /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
    ///          vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
    ///          (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
    ///          credentials used to sign the request. If you use an account ID, do not include any hyphens
    ///          ('-') in the ID. </p>
    public let accountId: String?
    /// <p>The optional description of the archive you are uploading.</p>
    public let archiveDescription: String?
    /// <p>The data to upload.</p>
    public let body: Data?
    /// <p>The SHA256 tree hash of the data being uploaded.</p>
    public let checksum: String?
    /// <p>The name of the vault.</p>
    public let vaultName: String?

    public init (
        accountId: String? = nil,
        archiveDescription: String? = nil,
        body: Data? = nil,
        checksum: String? = nil,
        vaultName: String? = nil
    )
    {
        self.accountId = accountId
        self.archiveDescription = archiveDescription
        self.body = body
        self.checksum = checksum
        self.vaultName = vaultName
    }
}

extension UploadArchiveInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UploadArchiveInput(accountId: \(String(describing: accountId)), archiveDescription: \(String(describing: archiveDescription)), body: \(String(describing: body)), checksum: \(String(describing: checksum)), vaultName: \(String(describing: vaultName)))"}
}
