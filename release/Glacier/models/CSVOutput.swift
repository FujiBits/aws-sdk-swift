// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains information about the comma-separated value (CSV) file that the job results
///             are stored in.</p>
public struct CSVOutput: Equatable {
    /// <p>A value used to separate individual fields from each other within a record.</p>
    public let fieldDelimiter: String?
    /// <p>A value used as an escape character where the field delimiter is part of the
    ///             value.</p>
    public let quoteCharacter: String?
    /// <p>A single character used for escaping the quotation-mark character inside an already
    ///             escaped value.</p>
    public let quoteEscapeCharacter: String?
    /// <p>A value that indicates whether all output fields should be contained within quotation
    ///             marks.</p>
    public let quoteFields: QuoteFields?
    /// <p>A value used to separate individual records from each other.</p>
    public let recordDelimiter: String?

    public init (
        fieldDelimiter: String? = nil,
        quoteCharacter: String? = nil,
        quoteEscapeCharacter: String? = nil,
        quoteFields: QuoteFields? = nil,
        recordDelimiter: String? = nil
    )
    {
        self.fieldDelimiter = fieldDelimiter
        self.quoteCharacter = quoteCharacter
        self.quoteEscapeCharacter = quoteEscapeCharacter
        self.quoteFields = quoteFields
        self.recordDelimiter = recordDelimiter
    }
}

extension CSVOutput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CSVOutput(fieldDelimiter: \(String(describing: fieldDelimiter)), quoteCharacter: \(String(describing: quoteCharacter)), quoteEscapeCharacter: \(String(describing: quoteEscapeCharacter)), quoteFields: \(String(describing: quoteFields)), recordDelimiter: \(String(describing: recordDelimiter)))"}
}
