// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UploadArchiveInputHeadersMiddleware: Middleware {
    public let id: String = "UploadArchiveInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UploadArchiveInput>,
                  next: H) -> Swift.Result<OperationOutput<UploadArchiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let archiveDescription = input.operationInput.archiveDescription {
            input.builder.withHeader(name: "x-amz-archive-description", value: String(archiveDescription))
        }
        if let checksum = input.operationInput.checksum {
            input.builder.withHeader(name: "x-amz-sha256-tree-hash", value: String(checksum))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UploadArchiveInput>
    public typealias MOutput = OperationOutput<UploadArchiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UploadArchiveOutputError>
}

public struct UploadArchiveInputQueryItemMiddleware: Middleware {
    public let id: String = "UploadArchiveInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UploadArchiveInput>,
                  next: H) -> Swift.Result<OperationOutput<UploadArchiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UploadArchiveInput>
    public typealias MOutput = OperationOutput<UploadArchiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UploadArchiveOutputError>
}

public struct UploadArchiveInputBodyMiddleware: Middleware {
    public let id: String = "UploadArchiveInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UploadArchiveInput>,
                  next: H) -> Swift.Result<OperationOutput<UploadArchiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let body = input.operationInput.body {
            let data = body
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UploadArchiveInput>
    public typealias MOutput = OperationOutput<UploadArchiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UploadArchiveOutputError>
}

extension UploadArchiveInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case body
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = body {
            try encodeContainer.encode(body.base64EncodedString(), forKey: .body)
        }
    }
}
