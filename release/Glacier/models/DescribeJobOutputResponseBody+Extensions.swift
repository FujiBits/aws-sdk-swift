// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeJobOutputResponseBody: Equatable {
    public let jobId: String?
    public let jobDescription: String?
    public let action: ActionCode?
    public let archiveId: String?
    public let vaultARN: String?
    public let creationDate: String?
    public let completed: Bool
    public let statusCode: StatusCode?
    public let statusMessage: String?
    public let archiveSizeInBytes: Int?
    public let inventorySizeInBytes: Int?
    public let sNSTopic: String?
    public let completionDate: String?
    public let sHA256TreeHash: String?
    public let archiveSHA256TreeHash: String?
    public let retrievalByteRange: String?
    public let tier: String?
    public let inventoryRetrievalParameters: InventoryRetrievalJobDescription?
    public let jobOutputPath: String?
    public let selectParameters: SelectParameters?
    public let outputLocation: OutputLocation?
}

extension DescribeJobOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case archiveId = "ArchiveId"
        case archiveSHA256TreeHash = "ArchiveSHA256TreeHash"
        case archiveSizeInBytes = "ArchiveSizeInBytes"
        case completed = "Completed"
        case completionDate = "CompletionDate"
        case creationDate = "CreationDate"
        case inventoryRetrievalParameters = "InventoryRetrievalParameters"
        case inventorySizeInBytes = "InventorySizeInBytes"
        case jobDescription = "JobDescription"
        case jobId = "JobId"
        case jobOutputPath = "JobOutputPath"
        case outputLocation = "OutputLocation"
        case retrievalByteRange = "RetrievalByteRange"
        case sHA256TreeHash = "SHA256TreeHash"
        case sNSTopic = "SNSTopic"
        case selectParameters = "SelectParameters"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
        case tier = "Tier"
        case vaultARN = "VaultARN"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobDescription)
        jobDescription = jobDescriptionDecoded
        let actionDecoded = try containerValues.decodeIfPresent(ActionCode.self, forKey: .action)
        action = actionDecoded
        let archiveIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .archiveId)
        archiveId = archiveIdDecoded
        let vaultARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vaultARN)
        vaultARN = vaultARNDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let completedDecoded = try containerValues.decode(Bool.self, forKey: .completed)
        completed = completedDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(StatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let archiveSizeInBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .archiveSizeInBytes)
        archiveSizeInBytes = archiveSizeInBytesDecoded
        let inventorySizeInBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .inventorySizeInBytes)
        inventorySizeInBytes = inventorySizeInBytesDecoded
        let sNSTopicDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sNSTopic)
        sNSTopic = sNSTopicDecoded
        let completionDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .completionDate)
        completionDate = completionDateDecoded
        let sHA256TreeHashDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sHA256TreeHash)
        sHA256TreeHash = sHA256TreeHashDecoded
        let archiveSHA256TreeHashDecoded = try containerValues.decodeIfPresent(String.self, forKey: .archiveSHA256TreeHash)
        archiveSHA256TreeHash = archiveSHA256TreeHashDecoded
        let retrievalByteRangeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .retrievalByteRange)
        retrievalByteRange = retrievalByteRangeDecoded
        let tierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tier)
        tier = tierDecoded
        let inventoryRetrievalParametersDecoded = try containerValues.decodeIfPresent(InventoryRetrievalJobDescription.self, forKey: .inventoryRetrievalParameters)
        inventoryRetrievalParameters = inventoryRetrievalParametersDecoded
        let jobOutputPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobOutputPath)
        jobOutputPath = jobOutputPathDecoded
        let selectParametersDecoded = try containerValues.decodeIfPresent(SelectParameters.self, forKey: .selectParameters)
        selectParameters = selectParametersDecoded
        let outputLocationDecoded = try containerValues.decodeIfPresent(OutputLocation.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
    }
}
