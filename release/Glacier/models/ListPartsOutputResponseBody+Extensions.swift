// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPartsOutputResponseBody: Equatable {
    public let multipartUploadId: String?
    public let vaultARN: String?
    public let archiveDescription: String?
    public let partSizeInBytes: Int
    public let creationDate: String?
    public let parts: [PartListElement]?
    public let marker: String?
}

extension ListPartsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case archiveDescription = "ArchiveDescription"
        case creationDate = "CreationDate"
        case marker = "Marker"
        case multipartUploadId = "MultipartUploadId"
        case partSizeInBytes = "PartSizeInBytes"
        case parts = "Parts"
        case vaultARN = "VaultARN"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multipartUploadIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .multipartUploadId)
        multipartUploadId = multipartUploadIdDecoded
        let vaultARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vaultARN)
        vaultARN = vaultARNDecoded
        let archiveDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .archiveDescription)
        archiveDescription = archiveDescriptionDecoded
        let partSizeInBytesDecoded = try containerValues.decode(Int.self, forKey: .partSizeInBytes)
        partSizeInBytes = partSizeInBytesDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let partsContainer = try containerValues.decodeIfPresent([PartListElement?].self, forKey: .parts)
        var partsDecoded0:[PartListElement]? = nil
        if let partsContainer = partsContainer {
            partsDecoded0 = [PartListElement]()
            for structure0 in partsContainer {
                if let structure0 = structure0 {
                    partsDecoded0?.append(structure0)
                }
            }
        }
        parts = partsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
