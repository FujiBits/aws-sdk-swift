// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CompleteMultipartUploadInputHeadersMiddleware: Middleware {
    public let id: String = "CompleteMultipartUploadInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CompleteMultipartUploadInput>,
                  next: H) -> Swift.Result<OperationOutput<CompleteMultipartUploadOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let archiveSize = input.operationInput.archiveSize {
            input.builder.withHeader(name: "x-amz-archive-size", value: String(archiveSize))
        }
        if let checksum = input.operationInput.checksum {
            input.builder.withHeader(name: "x-amz-sha256-tree-hash", value: String(checksum))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CompleteMultipartUploadInput>
    public typealias MOutput = OperationOutput<CompleteMultipartUploadOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CompleteMultipartUploadOutputError>
}

public struct CompleteMultipartUploadInputQueryItemMiddleware: Middleware {
    public let id: String = "CompleteMultipartUploadInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CompleteMultipartUploadInput>,
                  next: H) -> Swift.Result<OperationOutput<CompleteMultipartUploadOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CompleteMultipartUploadInput>
    public typealias MOutput = OperationOutput<CompleteMultipartUploadOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CompleteMultipartUploadOutputError>
}

extension CompleteMultipartUploadInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
