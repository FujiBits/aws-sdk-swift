// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension MediaPackageVodClient {
    /// Changes the packaging group's properities to configure log subscription
    func configureLogs(input: ConfigureLogsInput) async throws -> ConfigureLogsOutputResponse
    {
        typealias configureLogsContinuation = CheckedContinuation<ConfigureLogsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: configureLogsContinuation) in
            configureLogs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new MediaPackage VOD Asset resource.
    func createAsset(input: CreateAssetInput) async throws -> CreateAssetOutputResponse
    {
        typealias createAssetContinuation = CheckedContinuation<CreateAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAssetContinuation) in
            createAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new MediaPackage VOD PackagingConfiguration resource.
    func createPackagingConfiguration(input: CreatePackagingConfigurationInput) async throws -> CreatePackagingConfigurationOutputResponse
    {
        typealias createPackagingConfigurationContinuation = CheckedContinuation<CreatePackagingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPackagingConfigurationContinuation) in
            createPackagingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new MediaPackage VOD PackagingGroup resource.
    func createPackagingGroup(input: CreatePackagingGroupInput) async throws -> CreatePackagingGroupOutputResponse
    {
        typealias createPackagingGroupContinuation = CheckedContinuation<CreatePackagingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPackagingGroupContinuation) in
            createPackagingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing MediaPackage VOD Asset resource.
    func deleteAsset(input: DeleteAssetInput) async throws -> DeleteAssetOutputResponse
    {
        typealias deleteAssetContinuation = CheckedContinuation<DeleteAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAssetContinuation) in
            deleteAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a MediaPackage VOD PackagingConfiguration resource.
    func deletePackagingConfiguration(input: DeletePackagingConfigurationInput) async throws -> DeletePackagingConfigurationOutputResponse
    {
        typealias deletePackagingConfigurationContinuation = CheckedContinuation<DeletePackagingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePackagingConfigurationContinuation) in
            deletePackagingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a MediaPackage VOD PackagingGroup resource.
    func deletePackagingGroup(input: DeletePackagingGroupInput) async throws -> DeletePackagingGroupOutputResponse
    {
        typealias deletePackagingGroupContinuation = CheckedContinuation<DeletePackagingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePackagingGroupContinuation) in
            deletePackagingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a description of a MediaPackage VOD Asset resource.
    func describeAsset(input: DescribeAssetInput) async throws -> DescribeAssetOutputResponse
    {
        typealias describeAssetContinuation = CheckedContinuation<DescribeAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAssetContinuation) in
            describeAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a description of a MediaPackage VOD PackagingConfiguration resource.
    func describePackagingConfiguration(input: DescribePackagingConfigurationInput) async throws -> DescribePackagingConfigurationOutputResponse
    {
        typealias describePackagingConfigurationContinuation = CheckedContinuation<DescribePackagingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePackagingConfigurationContinuation) in
            describePackagingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a description of a MediaPackage VOD PackagingGroup resource.
    func describePackagingGroup(input: DescribePackagingGroupInput) async throws -> DescribePackagingGroupOutputResponse
    {
        typealias describePackagingGroupContinuation = CheckedContinuation<DescribePackagingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePackagingGroupContinuation) in
            describePackagingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a collection of MediaPackage VOD Asset resources.
    func listAssets(input: ListAssetsInput) async throws -> ListAssetsOutputResponse
    {
        typealias listAssetsContinuation = CheckedContinuation<ListAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssetsContinuation) in
            listAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a collection of MediaPackage VOD PackagingConfiguration resources.
    func listPackagingConfigurations(input: ListPackagingConfigurationsInput) async throws -> ListPackagingConfigurationsOutputResponse
    {
        typealias listPackagingConfigurationsContinuation = CheckedContinuation<ListPackagingConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPackagingConfigurationsContinuation) in
            listPackagingConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a collection of MediaPackage VOD PackagingGroup resources.
    func listPackagingGroups(input: ListPackagingGroupsInput) async throws -> ListPackagingGroupsOutputResponse
    {
        typealias listPackagingGroupsContinuation = CheckedContinuation<ListPackagingGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPackagingGroupsContinuation) in
            listPackagingGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the tags assigned to the specified resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds tags to the specified resource. You can specify one or more tags to add.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags from the specified resource. You can specify one or more tags to remove.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a specific packaging group. You can't change the id attribute or any other system-generated attributes.
    func updatePackagingGroup(input: UpdatePackagingGroupInput) async throws -> UpdatePackagingGroupOutputResponse
    {
        typealias updatePackagingGroupContinuation = CheckedContinuation<UpdatePackagingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePackagingGroupContinuation) in
            updatePackagingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
