// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension QldbClient {
    /// <p>Ends a given Amazon QLDB journal stream. Before a stream can be canceled, its current
    ///          status must be <code>ACTIVE</code>.</p>
    ///          <p>You can't restart a stream after you cancel it. Canceled QLDB stream resources are
    ///          subject to a 7-day retention period, so they are automatically deleted after this limit
    ///          expires.</p>
    func cancelJournalKinesisStream(input: CancelJournalKinesisStreamInput) async throws -> CancelJournalKinesisStreamOutputResponse
    {
        typealias cancelJournalKinesisStreamContinuation = CheckedContinuation<CancelJournalKinesisStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelJournalKinesisStreamContinuation) in
            cancelJournalKinesisStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new ledger in your AWS account in the current Region.</p>
    func createLedger(input: CreateLedgerInput) async throws -> CreateLedgerOutputResponse
    {
        typealias createLedgerContinuation = CheckedContinuation<CreateLedgerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createLedgerContinuation) in
            createLedger(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a ledger and all of its contents. This action is irreversible.</p>
    ///          <p>If deletion protection is enabled, you must first disable it before you can delete the
    ///       ledger. You can disable it by calling the <code>UpdateLedger</code> operation to set the flag to <code>false</code>.</p>
    func deleteLedger(input: DeleteLedgerInput) async throws -> DeleteLedgerOutputResponse
    {
        typealias deleteLedgerContinuation = CheckedContinuation<DeleteLedgerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLedgerContinuation) in
            deleteLedger(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns detailed information about a given Amazon QLDB journal stream. The output
    ///          includes the Amazon Resource Name (ARN), stream name, current status, creation time, and
    ///          the parameters of the original stream creation request.</p>
    ///          <p>This action does not return any expired journal streams. For more information, see
    ///             <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/streams.create.html#streams.create.states.expiration">Expiration for terminal streams</a> in the <i>Amazon QLDB Developer
    ///             Guide</i>.</p>
    func describeJournalKinesisStream(input: DescribeJournalKinesisStreamInput) async throws -> DescribeJournalKinesisStreamOutputResponse
    {
        typealias describeJournalKinesisStreamContinuation = CheckedContinuation<DescribeJournalKinesisStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeJournalKinesisStreamContinuation) in
            describeJournalKinesisStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a journal export job, including the ledger name, export ID,
    ///          creation time, current status, and the parameters of the original export creation
    ///          request.</p>
    ///          <p>This action does not return any expired export jobs. For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/export-journal.request.html#export-journal.request.expiration">Export job expiration</a> in the <i>Amazon QLDB Developer
    ///          Guide</i>.</p>
    ///          <p>If the export job with the given <code>ExportId</code> doesn't exist, then throws
    ///             <code>ResourceNotFoundException</code>.</p>
    ///          <p>If the ledger with the given <code>Name</code> doesn't exist, then throws
    ///             <code>ResourceNotFoundException</code>.</p>
    func describeJournalS3Export(input: DescribeJournalS3ExportInput) async throws -> DescribeJournalS3ExportOutputResponse
    {
        typealias describeJournalS3ExportContinuation = CheckedContinuation<DescribeJournalS3ExportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeJournalS3ExportContinuation) in
            describeJournalS3Export(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a ledger, including its state and when it was created.</p>
    func describeLedger(input: DescribeLedgerInput) async throws -> DescribeLedgerOutputResponse
    {
        typealias describeLedgerContinuation = CheckedContinuation<DescribeLedgerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeLedgerContinuation) in
            describeLedger(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Exports journal contents within a date and time range from a ledger into a specified
    ///          Amazon Simple Storage Service (Amazon S3) bucket. The data is written as files in Amazon Ion format.</p>
    ///          <p>If the ledger with the given <code>Name</code> doesn't exist, then throws
    ///             <code>ResourceNotFoundException</code>.</p>
    ///          <p>If the ledger with the given <code>Name</code> is in <code>CREATING</code> status, then
    ///          throws <code>ResourcePreconditionNotMetException</code>.</p>
    ///          <p>You can initiate up to two concurrent journal export requests for each ledger. Beyond
    ///          this limit, journal export requests throw <code>LimitExceededException</code>.</p>
    func exportJournalToS3(input: ExportJournalToS3Input) async throws -> ExportJournalToS3OutputResponse
    {
        typealias exportJournalToS3Continuation = CheckedContinuation<ExportJournalToS3OutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportJournalToS3Continuation) in
            exportJournalToS3(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a block object at a specified address in a journal. Also returns a proof of the
    ///          specified block for verification if <code>DigestTipAddress</code> is provided.</p>
    ///          <p>For information about the data contents in a block, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/journal-contents.html">Journal contents</a> in the
    ///             <i>Amazon QLDB Developer Guide</i>.</p>
    ///          <p>If the specified ledger doesn't exist or is in <code>DELETING</code> status, then throws
    ///             <code>ResourceNotFoundException</code>.</p>
    ///          <p>If the specified ledger is in <code>CREATING</code> status, then throws
    ///             <code>ResourcePreconditionNotMetException</code>.</p>
    ///          <p>If no block exists with the specified address, then throws
    ///             <code>InvalidParameterException</code>.</p>
    func getBlock(input: GetBlockInput) async throws -> GetBlockOutputResponse
    {
        typealias getBlockContinuation = CheckedContinuation<GetBlockOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBlockContinuation) in
            getBlock(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the digest of a ledger at the latest committed block in the journal. The
    ///          response includes a 256-bit hash value and a block address.</p>
    func getDigest(input: GetDigestInput) async throws -> GetDigestOutputResponse
    {
        typealias getDigestContinuation = CheckedContinuation<GetDigestOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDigestContinuation) in
            getDigest(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a revision data object for a specified document ID and block address. Also
    ///          returns a proof of the specified revision for verification if <code>DigestTipAddress</code>
    ///          is provided.</p>
    func getRevision(input: GetRevisionInput) async throws -> GetRevisionOutputResponse
    {
        typealias getRevisionContinuation = CheckedContinuation<GetRevisionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRevisionContinuation) in
            getRevision(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns an array of all Amazon QLDB journal stream descriptors for a given ledger. The
    ///          output of each stream descriptor includes the same details that are returned by
    ///             <code>DescribeJournalKinesisStream</code>.</p>
    ///          <p>This action does not return any expired journal streams. For more information, see
    ///             <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/streams.create.html#streams.create.states.expiration">Expiration for terminal streams</a> in the <i>Amazon QLDB Developer
    ///             Guide</i>.</p>
    ///          <p>This action returns a maximum of <code>MaxResults</code> items. It is paginated so that
    ///          you can retrieve all the items by calling <code>ListJournalKinesisStreamsForLedger</code>
    ///          multiple times.</p>
    func listJournalKinesisStreamsForLedger(input: ListJournalKinesisStreamsForLedgerInput) async throws -> ListJournalKinesisStreamsForLedgerOutputResponse
    {
        typealias listJournalKinesisStreamsForLedgerContinuation = CheckedContinuation<ListJournalKinesisStreamsForLedgerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJournalKinesisStreamsForLedgerContinuation) in
            listJournalKinesisStreamsForLedger(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns an array of journal export job descriptions for all ledgers that are associated
    ///          with the current AWS account and Region.</p>
    ///          <p>This action returns a maximum of <code>MaxResults</code> items, and is paginated so that
    ///          you can retrieve all the items by calling <code>ListJournalS3Exports</code> multiple
    ///          times.</p>
    ///          <p>This action does not return any expired export jobs. For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/export-journal.request.html#export-journal.request.expiration">Export job expiration</a> in the <i>Amazon QLDB Developer
    ///          Guide</i>.</p>
    func listJournalS3Exports(input: ListJournalS3ExportsInput) async throws -> ListJournalS3ExportsOutputResponse
    {
        typealias listJournalS3ExportsContinuation = CheckedContinuation<ListJournalS3ExportsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJournalS3ExportsContinuation) in
            listJournalS3Exports(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns an array of journal export job descriptions for a specified ledger.</p>
    ///          <p>This action returns a maximum of <code>MaxResults</code> items, and is paginated so that
    ///          you can retrieve all the items by calling <code>ListJournalS3ExportsForLedger</code>
    ///          multiple times.</p>
    ///          <p>This action does not return any expired export jobs. For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/export-journal.request.html#export-journal.request.expiration">Export job expiration</a> in the <i>Amazon QLDB Developer
    ///          Guide</i>.</p>
    func listJournalS3ExportsForLedger(input: ListJournalS3ExportsForLedgerInput) async throws -> ListJournalS3ExportsForLedgerOutputResponse
    {
        typealias listJournalS3ExportsForLedgerContinuation = CheckedContinuation<ListJournalS3ExportsForLedgerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJournalS3ExportsForLedgerContinuation) in
            listJournalS3ExportsForLedger(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns an array of ledger summaries that are associated with the current AWS account
    ///          and Region.</p>
    ///          <p>This action returns a maximum of 100 items and is paginated so that you can
    ///          retrieve all the items by calling <code>ListLedgers</code> multiple times.</p>
    func listLedgers(input: ListLedgersInput) async throws -> ListLedgersOutputResponse
    {
        typealias listLedgersContinuation = CheckedContinuation<ListLedgersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLedgersContinuation) in
            listLedgers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns all tags for a specified Amazon QLDB resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a journal stream for a given Amazon QLDB ledger. The stream captures every
    ///          document revision that is committed to the ledger's journal and delivers the data to a
    ///          specified Amazon Kinesis Data Streams resource.</p>
    func streamJournalToKinesis(input: StreamJournalToKinesisInput) async throws -> StreamJournalToKinesisOutputResponse
    {
        typealias streamJournalToKinesisContinuation = CheckedContinuation<StreamJournalToKinesisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: streamJournalToKinesisContinuation) in
            streamJournalToKinesis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds one or more tags to a specified Amazon QLDB resource.</p>
    ///          <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a
    ///          resource, your request fails and returns an error.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes one or more tags from a specified Amazon QLDB resource. You can specify up to 50
    ///          tag keys to remove.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates properties on a ledger.</p>
    func updateLedger(input: UpdateLedgerInput) async throws -> UpdateLedgerOutputResponse
    {
        typealias updateLedgerContinuation = CheckedContinuation<UpdateLedgerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLedgerContinuation) in
            updateLedger(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the permissions mode of a ledger.</p>
    ///          <important>
    ///             <p>Before you switch to the <code>STANDARD</code> permissions mode, you must first
    ///             create all required IAM policies and table tags to avoid disruption to your users. To
    ///             learn more, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/ledger-management.basics.html#ledger-mgmt.basics.update-permissions.migrating">Migrating to the standard permissions mode</a> in the <i>Amazon QLDB
    ///                Developer Guide</i>.</p>
    ///          </important>
    func updateLedgerPermissionsMode(input: UpdateLedgerPermissionsModeInput) async throws -> UpdateLedgerPermissionsModeOutputResponse
    {
        typealias updateLedgerPermissionsModeContinuation = CheckedContinuation<UpdateLedgerPermissionsModeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLedgerPermissionsModeContinuation) in
            updateLedgerPermissionsMode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
