// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutSnapshotBlockInputHeadersMiddleware: Middleware {
    public let id: String = "PutSnapshotBlockInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSnapshotBlockInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSnapshotBlockOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let checksum = input.operationInput.checksum {
            input.builder.withHeader(name: "x-amz-Checksum", value: String(checksum))
        }
        if let checksumAlgorithm = input.operationInput.checksumAlgorithm {
            input.builder.withHeader(name: "x-amz-Checksum-Algorithm", value: String(checksumAlgorithm.rawValue))
        }
        if let dataLength = input.operationInput.dataLength {
            input.builder.withHeader(name: "x-amz-Data-Length", value: String(dataLength))
        }
        if let progress = input.operationInput.progress {
            input.builder.withHeader(name: "x-amz-Progress", value: String(progress))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSnapshotBlockInput>
    public typealias MOutput = OperationOutput<PutSnapshotBlockOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSnapshotBlockOutputError>
}

public struct PutSnapshotBlockInputQueryItemMiddleware: Middleware {
    public let id: String = "PutSnapshotBlockInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSnapshotBlockInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSnapshotBlockOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSnapshotBlockInput>
    public typealias MOutput = OperationOutput<PutSnapshotBlockOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSnapshotBlockOutputError>
}

public struct PutSnapshotBlockInputBodyMiddleware: Middleware {
    public let id: String = "PutSnapshotBlockInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSnapshotBlockInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSnapshotBlockOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let blockData = input.operationInput.blockData {
            let data = blockData
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSnapshotBlockInput>
    public typealias MOutput = OperationOutput<PutSnapshotBlockOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSnapshotBlockOutputError>
}

extension PutSnapshotBlockInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blockData = "BlockData"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockData = blockData {
            try encodeContainer.encode(blockData.base64EncodedString(), forKey: .blockData)
        }
    }
}
