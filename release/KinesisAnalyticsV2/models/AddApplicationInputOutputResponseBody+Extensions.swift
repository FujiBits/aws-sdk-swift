// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AddApplicationInputOutputResponseBody: Equatable {
    public let applicationARN: String?
    public let applicationVersionId: Int?
    public let inputDescriptions: [InputDescription]?
}

extension AddApplicationInputOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationARN = "ApplicationARN"
        case applicationVersionId = "ApplicationVersionId"
        case inputDescriptions = "InputDescriptions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationARN)
        applicationARN = applicationARNDecoded
        let applicationVersionIdDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .applicationVersionId)
        applicationVersionId = applicationVersionIdDecoded
        let inputDescriptionsContainer = try containerValues.decodeIfPresent([InputDescription?].self, forKey: .inputDescriptions)
        var inputDescriptionsDecoded0:[InputDescription]? = nil
        if let inputDescriptionsContainer = inputDescriptionsContainer {
            inputDescriptionsDecoded0 = [InputDescription]()
            for structure0 in inputDescriptionsContainer {
                if let structure0 = structure0 {
                    inputDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        inputDescriptions = inputDescriptionsDecoded0
    }
}
