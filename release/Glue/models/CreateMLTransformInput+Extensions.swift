// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateMLTransformInputHeadersMiddleware: Middleware {
    public let id: String = "CreateMLTransformInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMLTransformInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMLTransformOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMLTransformInput>
    public typealias MOutput = OperationOutput<CreateMLTransformOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMLTransformOutputError>
}

public struct CreateMLTransformInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateMLTransformInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMLTransformInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMLTransformOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMLTransformInput>
    public typealias MOutput = OperationOutput<CreateMLTransformOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMLTransformOutputError>
}

public struct CreateMLTransformInputBodyMiddleware: Middleware {
    public let id: String = "CreateMLTransformInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMLTransformInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMLTransformOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMLTransformInput>
    public typealias MOutput = OperationOutput<CreateMLTransformOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMLTransformOutputError>
}

extension CreateMLTransformInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case glueVersion = "GlueVersion"
        case inputRecordTables = "InputRecordTables"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case numberOfWorkers = "NumberOfWorkers"
        case parameters = "Parameters"
        case role = "Role"
        case tags = "Tags"
        case timeout = "Timeout"
        case transformEncryption = "TransformEncryption"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let inputRecordTables = inputRecordTables {
            var inputRecordTablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputRecordTables)
            for gluetables0 in inputRecordTables {
                try inputRecordTablesContainer.encode(gluetables0)
            }
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let maxRetries = maxRetries {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let parameters = parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let transformEncryption = transformEncryption {
            try encodeContainer.encode(transformEncryption, forKey: .transformEncryption)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }
}
