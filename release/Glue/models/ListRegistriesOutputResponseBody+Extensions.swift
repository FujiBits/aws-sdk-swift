// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRegistriesOutputResponseBody: Equatable {
    public let registries: [RegistryListItem]?
    public let nextToken: String?
}

extension ListRegistriesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case registries = "Registries"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registriesContainer = try containerValues.decodeIfPresent([RegistryListItem?].self, forKey: .registries)
        var registriesDecoded0:[RegistryListItem]? = nil
        if let registriesContainer = registriesContainer {
            registriesDecoded0 = [RegistryListItem]()
            for structure0 in registriesContainer {
                if let structure0 = structure0 {
                    registriesDecoded0?.append(structure0)
                }
            }
        }
        registries = registriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
