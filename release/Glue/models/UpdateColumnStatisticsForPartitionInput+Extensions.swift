// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateColumnStatisticsForPartitionInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateColumnStatisticsForPartitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateColumnStatisticsForPartitionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateColumnStatisticsForPartitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateColumnStatisticsForPartitionInput>
    public typealias MOutput = OperationOutput<UpdateColumnStatisticsForPartitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateColumnStatisticsForPartitionOutputError>
}

public struct UpdateColumnStatisticsForPartitionInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateColumnStatisticsForPartitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateColumnStatisticsForPartitionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateColumnStatisticsForPartitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateColumnStatisticsForPartitionInput>
    public typealias MOutput = OperationOutput<UpdateColumnStatisticsForPartitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateColumnStatisticsForPartitionOutputError>
}

public struct UpdateColumnStatisticsForPartitionInputBodyMiddleware: Middleware {
    public let id: String = "UpdateColumnStatisticsForPartitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateColumnStatisticsForPartitionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateColumnStatisticsForPartitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateColumnStatisticsForPartitionInput>
    public typealias MOutput = OperationOutput<UpdateColumnStatisticsForPartitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateColumnStatisticsForPartitionOutputError>
}

extension UpdateColumnStatisticsForPartitionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case catalogId = "CatalogId"
        case columnStatisticsList = "ColumnStatisticsList"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let columnStatisticsList = columnStatisticsList {
            var columnStatisticsListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnStatisticsList)
            for updatecolumnstatisticslist0 in columnStatisticsList {
                try columnStatisticsListContainer.encode(updatecolumnstatisticslist0)
            }
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionValues = partitionValues {
            var partitionValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValues)
            for valuestringlist0 in partitionValues {
                try partitionValuesContainer.encode(valuestringlist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}
