// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateDevEndpointInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateDevEndpointInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDevEndpointInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDevEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDevEndpointInput>
    public typealias MOutput = OperationOutput<UpdateDevEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDevEndpointOutputError>
}

public struct UpdateDevEndpointInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateDevEndpointInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDevEndpointInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDevEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDevEndpointInput>
    public typealias MOutput = OperationOutput<UpdateDevEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDevEndpointOutputError>
}

public struct UpdateDevEndpointInputBodyMiddleware: Middleware {
    public let id: String = "UpdateDevEndpointInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDevEndpointInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDevEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDevEndpointInput>
    public typealias MOutput = OperationOutput<UpdateDevEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDevEndpointOutputError>
}

extension UpdateDevEndpointInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addArguments = "AddArguments"
        case addPublicKeys = "AddPublicKeys"
        case customLibraries = "CustomLibraries"
        case deleteArguments = "DeleteArguments"
        case deletePublicKeys = "DeletePublicKeys"
        case endpointName = "EndpointName"
        case publicKey = "PublicKey"
        case updateEtlLibraries = "UpdateEtlLibraries"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addArguments = addArguments {
            var addArgumentsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .addArguments)
            for (dictKey0, mapvalue0) in addArguments {
                try addArgumentsContainer.encode(mapvalue0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let addPublicKeys = addPublicKeys {
            var addPublicKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addPublicKeys)
            for publickeyslist0 in addPublicKeys {
                try addPublicKeysContainer.encode(publickeyslist0)
            }
        }
        if let customLibraries = customLibraries {
            try encodeContainer.encode(customLibraries, forKey: .customLibraries)
        }
        if let deleteArguments = deleteArguments {
            var deleteArgumentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deleteArguments)
            for stringlist0 in deleteArguments {
                try deleteArgumentsContainer.encode(stringlist0)
            }
        }
        if let deletePublicKeys = deletePublicKeys {
            var deletePublicKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deletePublicKeys)
            for publickeyslist0 in deletePublicKeys {
                try deletePublicKeysContainer.encode(publickeyslist0)
            }
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let publicKey = publicKey {
            try encodeContainer.encode(publicKey, forKey: .publicKey)
        }
        if updateEtlLibraries != false {
            try encodeContainer.encode(updateEtlLibraries, forKey: .updateEtlLibraries)
        }
    }
}
