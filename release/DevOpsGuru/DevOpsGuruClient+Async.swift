// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension DevOpsGuruClient {
    /// <p>
    /// 			Adds a notification channel to DevOps Guru. A notification channel is used to notify you about important DevOps Guru events, such as when an insight is generated.
    /// 		</p>
    /// 		
    /// 		       <p>If you use an Amazon SNS topic in another account, you must attach a policy to it that grants DevOps Guru permission
    /// 				to it notifications. DevOps Guru adds the required policy on your behalf to send notifications using Amazon SNS in your account.
    /// 				For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-required-permissions.html">Permissions
    /// 				for cross account Amazon SNS topics</a>.</p>
    /// 				     <p>If you use an Amazon SNS topic that is encrypted by an AWS Key Management Service customer-managed key (CMK), then you must add permissions
    /// 				to the CMK. For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-kms-permissions.html">Permissions for
    /// 				AWS KMSâ€“encrypted Amazon SNS topics</a>.</p>
    func addNotificationChannel(input: AddNotificationChannelInput) async throws -> AddNotificationChannelOutputResponse
    {
        typealias addNotificationChannelContinuation = CheckedContinuation<AddNotificationChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addNotificationChannelContinuation) in
            addNotificationChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Returns the number of open reactive insights, the number of open proactive insights, and the number of metrics analyzed in your AWS account.
    ///    		Use these numbers to gauge the health of operations in your AWS account.
    ///    	</p>
    func describeAccountHealth(input: DescribeAccountHealthInput) async throws -> DescribeAccountHealthOutputResponse
    {
        typealias describeAccountHealthContinuation = CheckedContinuation<DescribeAccountHealthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountHealthContinuation) in
            describeAccountHealth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		For the time range passed in, returns the number of open reactive insight that were created, the number of open proactive insights
    ///    		that were created, and the Mean Time to Recover (MTTR) for all closed reactive insights.
    ///    	</p>
    func describeAccountOverview(input: DescribeAccountOverviewInput) async throws -> DescribeAccountOverviewOutputResponse
    {
        typealias describeAccountOverviewContinuation = CheckedContinuation<DescribeAccountOverviewOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountOverviewContinuation) in
            describeAccountOverview(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Returns details about an anomaly that you specify using its ID.
    ///    	</p>
    func describeAnomaly(input: DescribeAnomalyInput) async throws -> DescribeAnomalyOutputResponse
    {
        typealias describeAnomalyContinuation = CheckedContinuation<DescribeAnomalyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAnomalyContinuation) in
            describeAnomaly(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    /// 			Returns the most recent feedback submitted in the current AWS account and Region.
    /// 		</p>
    func describeFeedback(input: DescribeFeedbackInput) async throws -> DescribeFeedbackOutputResponse
    {
        typealias describeFeedbackContinuation = CheckedContinuation<DescribeFeedbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeFeedbackContinuation) in
            describeFeedback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Returns details about an insight that you specify using its ID.
    ///    	</p>
    func describeInsight(input: DescribeInsightInput) async throws -> DescribeInsightOutputResponse
    {
        typealias describeInsightContinuation = CheckedContinuation<DescribeInsightOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInsightContinuation) in
            describeInsight(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Returns the number of open proactive insights, open reactive insights, and the Mean Time to Recover (MTTR) for all closed insights in
    ///    		resource collections in your account. You specify the type of AWS resources collection. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
    ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
    ///    	</p>
    func describeResourceCollectionHealth(input: DescribeResourceCollectionHealthInput) async throws -> DescribeResourceCollectionHealthOutputResponse
    {
        typealias describeResourceCollectionHealthContinuation = CheckedContinuation<DescribeResourceCollectionHealthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeResourceCollectionHealthContinuation) in
            describeResourceCollectionHealth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    /// 			Returns the integration status of services that are integrated with DevOps Guru.
    /// 			The one service that can be integrated with DevOps Guru
    ///       	is AWS Systems Manager, which can be used to create an OpsItem for each generated insight.
    /// 		</p>
    func describeServiceIntegration(input: DescribeServiceIntegrationInput) async throws -> DescribeServiceIntegrationOutputResponse
    {
        typealias describeServiceIntegrationContinuation = CheckedContinuation<DescribeServiceIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeServiceIntegrationContinuation) in
            describeServiceIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns an estimate of the monthly cost for DevOps Guru to analyze your AWS resources.
    /// 			For more information,
    /// 			see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html">Estimate your
    /// 			Amazon DevOps Guru costs</a> and
    /// 			<a href="http://aws.amazon.com/devops-guru/pricing/">Amazon DevOps Guru pricing</a>.</p>
    func getCostEstimation(input: GetCostEstimationInput) async throws -> GetCostEstimationOutputResponse
    {
        typealias getCostEstimationContinuation = CheckedContinuation<GetCostEstimationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCostEstimationContinuation) in
            getCostEstimation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Returns lists AWS resources that are of the specified resource collection type. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
    ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
    ///    	</p>
    func getResourceCollection(input: GetResourceCollectionInput) async throws -> GetResourceCollectionOutputResponse
    {
        typealias getResourceCollectionContinuation = CheckedContinuation<GetResourceCollectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourceCollectionContinuation) in
            getResourceCollection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Returns a list of the anomalies that belong to an insight that you specify using its ID.
    ///    	</p>
    func listAnomaliesForInsight(input: ListAnomaliesForInsightInput) async throws -> ListAnomaliesForInsightOutputResponse
    {
        typealias listAnomaliesForInsightContinuation = CheckedContinuation<ListAnomaliesForInsightOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAnomaliesForInsightContinuation) in
            listAnomaliesForInsight(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Returns a list of the events emitted by the resources that are evaluated by DevOps Guru. You can use filters to specify which events are returned.
    ///    	</p>
    func listEvents(input: ListEventsInput) async throws -> ListEventsOutputResponse
    {
        typealias listEventsContinuation = CheckedContinuation<ListEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEventsContinuation) in
            listEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Returns a list of insights in your AWS account. You can specify which insights are returned by their start time and
    ///    		status (<code>ONGOING</code>, <code>CLOSED</code>, or <code>ANY</code>).
    ///    	</p>
    func listInsights(input: ListInsightsInput) async throws -> ListInsightsOutputResponse
    {
        typealias listInsightsContinuation = CheckedContinuation<ListInsightsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInsightsContinuation) in
            listInsights(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Returns a list of notification channels configured for DevOps Guru. Each notification channel is used to notify you when
    ///    		DevOps Guru generates an insight that contains information about how to improve your operations. The one
    ///       	supported notification channel is Amazon Simple Notification Service (Amazon SNS).
    ///    	</p>
    func listNotificationChannels(input: ListNotificationChannelsInput) async throws -> ListNotificationChannelsOutputResponse
    {
        typealias listNotificationChannelsContinuation = CheckedContinuation<ListNotificationChannelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNotificationChannelsContinuation) in
            listNotificationChannels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Returns a list of a specified insight's recommendations. Each recommendation includes a list of related metrics and a list of related events.
    ///    	</p>
    func listRecommendations(input: ListRecommendationsInput) async throws -> ListRecommendationsOutputResponse
    {
        typealias listRecommendationsContinuation = CheckedContinuation<ListRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRecommendationsContinuation) in
            listRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Collects customer feedback about the specified insight.
    ///    	</p>
    func putFeedback(input: PutFeedbackInput) async throws -> PutFeedbackOutputResponse
    {
        typealias putFeedbackContinuation = CheckedContinuation<PutFeedbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putFeedbackContinuation) in
            putFeedback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Removes a notification channel from DevOps Guru. A notification channel is used to notify you when DevOps Guru generates an insight
    ///    		that contains information about how to improve your operations.
    ///    	</p>
    func removeNotificationChannel(input: RemoveNotificationChannelInput) async throws -> RemoveNotificationChannelOutputResponse
    {
        typealias removeNotificationChannelContinuation = CheckedContinuation<RemoveNotificationChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeNotificationChannelContinuation) in
            removeNotificationChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///    		Returns a list of insights in your AWS account. You can specify which insights are returned by their start time, one or more statuses
    ///    		(<code>ONGOING</code>, <code>CLOSED</code>, and <code>CLOSED</code>), one or more severities (<code>LOW</code>, <code>MEDIUM</code>,
    ///    		and <code>HIGH</code>), and type (<code>REACTIVE</code> or <code>PROACTIVE</code>).
    ///    	</p>
    ///    	     <p>
    ///    		Use the <code>Filters</code> parameter to specify status and severity
    ///    		search parameters. Use the <code>Type</code> parameter to specify <code>REACTIVE</code> or <code>PROACTIVE</code> in your search.
    ///    	</p>
    func searchInsights(input: SearchInsightsInput) async throws -> SearchInsightsOutputResponse
    {
        typealias searchInsightsContinuation = CheckedContinuation<SearchInsightsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchInsightsContinuation) in
            searchInsights(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts the creation of an estimate of the monthly cost to analyze your AWS resources.</p>
    func startCostEstimation(input: StartCostEstimationInput) async throws -> StartCostEstimationOutputResponse
    {
        typealias startCostEstimationContinuation = CheckedContinuation<StartCostEstimationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startCostEstimationContinuation) in
            startCostEstimation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Updates the collection of resources that DevOps Guru analyzes.
    /// 			The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
    ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks. This method also creates the IAM role required for you
    /// 			to use DevOps Guru. </p>
    func updateResourceCollection(input: UpdateResourceCollectionInput) async throws -> UpdateResourceCollectionOutputResponse
    {
        typealias updateResourceCollectionContinuation = CheckedContinuation<UpdateResourceCollectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateResourceCollectionContinuation) in
            updateResourceCollection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    /// 			Enables or disables integration with a service that can be integrated with DevOps Guru. The one service that can be integrated with
    /// 			DevOps Guru is AWS Systems Manager, which can be used to create an OpsItem for each generated insight.
    /// 		</p>
    func updateServiceIntegration(input: UpdateServiceIntegrationInput) async throws -> UpdateServiceIntegrationOutputResponse
    {
        typealias updateServiceIntegrationContinuation = CheckedContinuation<UpdateServiceIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateServiceIntegrationContinuation) in
            updateServiceIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
