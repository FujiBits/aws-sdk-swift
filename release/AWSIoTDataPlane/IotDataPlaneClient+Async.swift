// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension IotDataPlaneClient {
    /// Deletes the shadow for the specified thing.
    ///          For more information, see <a href="http://docs.aws.amazon.com/iot/latest/developerguide/API_DeleteThingShadow.html">DeleteThingShadow in the AWS IoT Developer Guide.
    func deleteThingShadow(input: DeleteThingShadowInput) async throws -> DeleteThingShadowOutputResponse
    {
        typealias deleteThingShadowContinuation = CheckedContinuation<DeleteThingShadowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteThingShadowContinuation) in
            deleteThingShadow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the shadow for the specified thing.
    ///          For more information, see <a href="http://docs.aws.amazon.com/iot/latest/developerguide/API_GetThingShadow.html">GetThingShadow in the
    ///         AWS IoT Developer Guide.
    func getThingShadow(input: GetThingShadowInput) async throws -> GetThingShadowOutputResponse
    {
        typealias getThingShadowContinuation = CheckedContinuation<GetThingShadowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getThingShadowContinuation) in
            getThingShadow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the shadows for the specified thing.
    func listNamedShadowsForThing(input: ListNamedShadowsForThingInput) async throws -> ListNamedShadowsForThingOutputResponse
    {
        typealias listNamedShadowsForThingContinuation = CheckedContinuation<ListNamedShadowsForThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNamedShadowsForThingContinuation) in
            listNamedShadowsForThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Publishes state information.
    ///          For more information, see <a href="http://docs.aws.amazon.com/iot/latest/developerguide/protocols.html#http">HTTP Protocol in the
    ///        AWS IoT Developer Guide.
    func publish(input: PublishInput) async throws -> PublishOutputResponse
    {
        typealias publishContinuation = CheckedContinuation<PublishOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: publishContinuation) in
            publish(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the shadow for the specified thing.
    ///          For more information, see <a href="http://docs.aws.amazon.com/iot/latest/developerguide/API_UpdateThingShadow.html">UpdateThingShadow in the
    ///         AWS IoT Developer Guide.
    func updateThingShadow(input: UpdateThingShadowInput) async throws -> UpdateThingShadowOutputResponse
    {
        typealias updateThingShadowContinuation = CheckedContinuation<UpdateThingShadowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThingShadowContinuation) in
            updateThingShadow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
