// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateCanaryInputHeadersMiddleware: Middleware {
    public let id: String = "CreateCanaryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCanaryInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCanaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCanaryInput>
    public typealias MOutput = OperationOutput<CreateCanaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCanaryOutputError>
}

public struct CreateCanaryInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateCanaryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCanaryInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCanaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCanaryInput>
    public typealias MOutput = OperationOutput<CreateCanaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCanaryOutputError>
}

public struct CreateCanaryInputBodyMiddleware: Middleware {
    public let id: String = "CreateCanaryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCanaryInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCanaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCanaryInput>
    public typealias MOutput = OperationOutput<CreateCanaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCanaryOutputError>
}

extension CreateCanaryInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case artifactS3Location = "ArtifactS3Location"
        case code = "Code"
        case executionRoleArn = "ExecutionRoleArn"
        case failureRetentionPeriodInDays = "FailureRetentionPeriodInDays"
        case name = "Name"
        case runConfig = "RunConfig"
        case runtimeVersion = "RuntimeVersion"
        case schedule = "Schedule"
        case successRetentionPeriodInDays = "SuccessRetentionPeriodInDays"
        case tags = "Tags"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactS3Location = artifactS3Location {
            try encodeContainer.encode(artifactS3Location, forKey: .artifactS3Location)
        }
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let executionRoleArn = executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let failureRetentionPeriodInDays = failureRetentionPeriodInDays {
            try encodeContainer.encode(failureRetentionPeriodInDays, forKey: .failureRetentionPeriodInDays)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let runConfig = runConfig {
            try encodeContainer.encode(runConfig, forKey: .runConfig)
        }
        if let runtimeVersion = runtimeVersion {
            try encodeContainer.encode(runtimeVersion, forKey: .runtimeVersion)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let successRetentionPeriodInDays = successRetentionPeriodInDays {
            try encodeContainer.encode(successRetentionPeriodInDays, forKey: .successRetentionPeriodInDays)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}
