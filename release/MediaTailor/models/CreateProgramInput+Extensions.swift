// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateProgramInputHeadersMiddleware: Middleware {
    public let id: String = "CreateProgramInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateProgramInput>
    public typealias MOutput = OperationOutput<CreateProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateProgramOutputError>
}

public struct CreateProgramInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateProgramInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateProgramInput>
    public typealias MOutput = OperationOutput<CreateProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateProgramOutputError>
}

public struct CreateProgramInputBodyMiddleware: Middleware {
    public let id: String = "CreateProgramInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateProgramInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateProgramOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateProgramInput>
    public typealias MOutput = OperationOutput<CreateProgramOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateProgramOutputError>
}

extension CreateProgramInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adBreaks = "AdBreaks"
        case scheduleConfiguration = "ScheduleConfiguration"
        case sourceLocationName = "SourceLocationName"
        case vodSourceName = "VodSourceName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adBreaks = adBreaks {
            var adBreaksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adBreaks)
            for __listofadbreak0 in adBreaks {
                try adBreaksContainer.encode(__listofadbreak0)
            }
        }
        if let scheduleConfiguration = scheduleConfiguration {
            try encodeContainer.encode(scheduleConfiguration, forKey: .scheduleConfiguration)
        }
        if let sourceLocationName = sourceLocationName {
            try encodeContainer.encode(sourceLocationName, forKey: .sourceLocationName)
        }
        if let vodSourceName = vodSourceName {
            try encodeContainer.encode(vodSourceName, forKey: .vodSourceName)
        }
    }
}
