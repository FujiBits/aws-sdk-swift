// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutPlaybackConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "PutPlaybackConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutPlaybackConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutPlaybackConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutPlaybackConfigurationInput>
    public typealias MOutput = OperationOutput<PutPlaybackConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutPlaybackConfigurationOutputError>
}

public struct PutPlaybackConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "PutPlaybackConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutPlaybackConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutPlaybackConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutPlaybackConfigurationInput>
    public typealias MOutput = OperationOutput<PutPlaybackConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutPlaybackConfigurationOutputError>
}

public struct PutPlaybackConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "PutPlaybackConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutPlaybackConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutPlaybackConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutPlaybackConfigurationInput>
    public typealias MOutput = OperationOutput<PutPlaybackConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutPlaybackConfigurationOutputError>
}

extension PutPlaybackConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adDecisionServerUrl = "AdDecisionServerUrl"
        case availSuppression = "AvailSuppression"
        case bumper = "Bumper"
        case cdnConfiguration = "CdnConfiguration"
        case configurationAliases = "ConfigurationAliases"
        case dashConfiguration = "DashConfiguration"
        case livePreRollConfiguration = "LivePreRollConfiguration"
        case manifestProcessingRules = "ManifestProcessingRules"
        case name = "Name"
        case personalizationThresholdSeconds = "PersonalizationThresholdSeconds"
        case slateAdUrl = "SlateAdUrl"
        case tags = "tags"
        case transcodeProfileName = "TranscodeProfileName"
        case videoContentSourceUrl = "VideoContentSourceUrl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adDecisionServerUrl = adDecisionServerUrl {
            try encodeContainer.encode(adDecisionServerUrl, forKey: .adDecisionServerUrl)
        }
        if let availSuppression = availSuppression {
            try encodeContainer.encode(availSuppression, forKey: .availSuppression)
        }
        if let bumper = bumper {
            try encodeContainer.encode(bumper, forKey: .bumper)
        }
        if let cdnConfiguration = cdnConfiguration {
            try encodeContainer.encode(cdnConfiguration, forKey: .cdnConfiguration)
        }
        if let configurationAliases = configurationAliases {
            var configurationAliasesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .configurationAliases)
            for (dictKey0, configurationaliasesrequest0) in configurationAliases {
                try configurationAliasesContainer.encode(configurationaliasesrequest0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let dashConfiguration = dashConfiguration {
            try encodeContainer.encode(dashConfiguration, forKey: .dashConfiguration)
        }
        if let livePreRollConfiguration = livePreRollConfiguration {
            try encodeContainer.encode(livePreRollConfiguration, forKey: .livePreRollConfiguration)
        }
        if let manifestProcessingRules = manifestProcessingRules {
            try encodeContainer.encode(manifestProcessingRules, forKey: .manifestProcessingRules)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if personalizationThresholdSeconds != 0 {
            try encodeContainer.encode(personalizationThresholdSeconds, forKey: .personalizationThresholdSeconds)
        }
        if let slateAdUrl = slateAdUrl {
            try encodeContainer.encode(slateAdUrl, forKey: .slateAdUrl)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let transcodeProfileName = transcodeProfileName {
            try encodeContainer.encode(transcodeProfileName, forKey: .transcodeProfileName)
        }
        if let videoContentSourceUrl = videoContentSourceUrl {
            try encodeContainer.encode(videoContentSourceUrl, forKey: .videoContentSourceUrl)
        }
    }
}
