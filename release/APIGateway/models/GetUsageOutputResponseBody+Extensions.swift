// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetUsageOutputResponseBody: Equatable {
    public let usagePlanId: String?
    public let startDate: String?
    public let endDate: String?
    public let items: [String:[[Int]]]?
}

extension GetUsageOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endDate
        case items = "values"
        case startDate
        case usagePlanId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usagePlanIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .usagePlanId)
        usagePlanId = usagePlanIdDecoded
        let startDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startDate)
        startDate = startDateDecoded
        let endDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endDate)
        endDate = endDateDecoded
        let itemsContainer = try containerValues.decodeIfPresent([String: [[Int?]?]?].self, forKey: .items)
        var itemsDecoded0: [String:[[Int]]]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [String:[[Int]]]()
            for (key0, listofusage0) in itemsContainer {
                var listofusage0Decoded0: [[Int]]? = nil
                if let listofusage0 = listofusage0 {
                    listofusage0Decoded0 = [[Int]]()
                    for list1 in listofusage0 {
                        var list1Decoded1: [Int]? = nil
                        if let list1 = list1 {
                            list1Decoded1 = [Int]()
                            for long2 in list1 {
                                if let long2 = long2 {
                                    list1Decoded1?.append(long2)
                                }
                            }
                        }
                        if let list1Decoded1 = list1Decoded1 {
                            listofusage0Decoded0?.append(list1Decoded1)
                        }
                    }
                }
                itemsDecoded0?[key0] = listofusage0Decoded0
            }
        }
        items = itemsDecoded0
    }
}
