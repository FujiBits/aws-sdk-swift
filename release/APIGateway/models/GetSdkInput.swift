// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Request a new generated client SDK for a <a>RestApi</a> and <a>Stage</a>.</p>
public struct GetSdkInput: Equatable {
    /// <p>A string-to-string key-value map of query parameters <code>sdkType</code>-dependent properties of the SDK. For <code>sdkType</code> of <code>objectivec</code> or <code>swift</code>,  a parameter named <code>classPrefix</code> is required. For <code>sdkType</code> of <code>android</code>, parameters named <code>groupId</code>, <code>artifactId</code>, <code>artifactVersion</code>, and <code>invokerPackage</code> are required. For <code>sdkType</code> of <code>java</code>, parameters named <code>serviceName</code> and <code>javaPackageName</code> are required. </p>
    public let parameters: [String:String]?
    /// <p>[Required] The string identifier of the associated <a>RestApi</a>.</p>
    public let restApiId: String?
    /// <p>[Required] The language for the generated SDK. Currently <code>java</code>, <code>javascript</code>, <code>android</code>, <code>objectivec</code> (for iOS), <code>swift</code> (for iOS), and <code>ruby</code>  are supported.</p>
    public let sdkType: String?
    /// <p>[Required] The name of the <a>Stage</a> that the SDK will use.</p>
    public let stageName: String?

    public init (
        parameters: [String:String]? = nil,
        restApiId: String? = nil,
        sdkType: String? = nil,
        stageName: String? = nil
    )
    {
        self.parameters = parameters
        self.restApiId = restApiId
        self.sdkType = sdkType
        self.stageName = stageName
    }
}

extension GetSdkInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetSdkInput(parameters: \(String(describing: parameters)), restApiId: \(String(describing: restApiId)), sdkType: \(String(describing: sdkType)), stageName: \(String(describing: stageName)))"}
}
