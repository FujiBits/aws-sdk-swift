// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents a put integration response request.</p>
public struct PutIntegrationResponseInput: Equatable {
    /// <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>
    ///     <ul>
    ///       <li><p><code>CONVERT_TO_BINARY</code>: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p></li>
    ///       <li><p><code>CONVERT_TO_TEXT</code>: Converts a response payload from a binary blob to a Base64-encoded string.</p></li>
    ///     </ul>
    ///     <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
    public let contentHandling: ContentHandlingStrategy?
    /// <p>[Required] Specifies a put integration response request's HTTP method.</p>
    public let httpMethod: String?
    /// <p>[Required] Specifies a put integration response request's resource identifier.</p>
    public let resourceId: String?
    /// <p>A key-value map specifying response parameters that are passed to the method response from the back end.
    ///             The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.</p>
    public let responseParameters: [String:String]?
    /// <p>Specifies a put integration response's templates.</p>
    public let responseTemplates: [String:String]?
    /// <p>[Required] The string identifier of the associated <a>RestApi</a>.</p>
    public let restApiId: String?
    /// <p>Specifies the selection pattern of a put integration response.</p>
    public let selectionPattern: String?
    /// <p>[Required] Specifies the status code that is used to map the integration response to an existing <a>MethodResponse</a>.</p>
    public let statusCode: String?

    public init (
        contentHandling: ContentHandlingStrategy? = nil,
        httpMethod: String? = nil,
        resourceId: String? = nil,
        responseParameters: [String:String]? = nil,
        responseTemplates: [String:String]? = nil,
        restApiId: String? = nil,
        selectionPattern: String? = nil,
        statusCode: String? = nil
    )
    {
        self.contentHandling = contentHandling
        self.httpMethod = httpMethod
        self.resourceId = resourceId
        self.responseParameters = responseParameters
        self.responseTemplates = responseTemplates
        self.restApiId = restApiId
        self.selectionPattern = selectionPattern
        self.statusCode = statusCode
    }
}

extension PutIntegrationResponseInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutIntegrationResponseInput(contentHandling: \(String(describing: contentHandling)), httpMethod: \(String(describing: httpMethod)), resourceId: \(String(describing: resourceId)), responseParameters: \(String(describing: responseParameters)), responseTemplates: \(String(describing: responseTemplates)), restApiId: \(String(describing: restApiId)), selectionPattern: \(String(describing: selectionPattern)), statusCode: \(String(describing: statusCode)))"}
}
