// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TestInvokeMethodOutputResponseBody: Equatable {
    public let status: Int
    public let body: String?
    public let headers: [String:String]?
    public let multiValueHeaders: [String:[String]]?
    public let log: String?
    public let latency: Int
}

extension TestInvokeMethodOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case body
        case headers
        case latency
        case log
        case multiValueHeaders
        case status
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decode(Int.self, forKey: .status)
        status = statusDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .body)
        body = bodyDecoded
        let headersContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .headers)
        var headersDecoded0: [String:String]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [String:String]()
            for (key0, string0) in headersContainer {
                if let string0 = string0 {
                    headersDecoded0?[key0] = string0
                }
            }
        }
        headers = headersDecoded0
        let multiValueHeadersContainer = try containerValues.decodeIfPresent([String: [String?]?].self, forKey: .multiValueHeaders)
        var multiValueHeadersDecoded0: [String:[String]]? = nil
        if let multiValueHeadersContainer = multiValueHeadersContainer {
            multiValueHeadersDecoded0 = [String:[String]]()
            for (key0, listofstring0) in multiValueHeadersContainer {
                var listofstring0Decoded0: [String]? = nil
                if let listofstring0 = listofstring0 {
                    listofstring0Decoded0 = [String]()
                    for string1 in listofstring0 {
                        if let string1 = string1 {
                            listofstring0Decoded0?.append(string1)
                        }
                    }
                }
                multiValueHeadersDecoded0?[key0] = listofstring0Decoded0
            }
        }
        multiValueHeaders = multiValueHeadersDecoded0
        let logDecoded = try containerValues.decodeIfPresent(String.self, forKey: .log)
        log = logDecoded
        let latencyDecoded = try containerValues.decode(Int.self, forKey: .latency)
        latency = latencyDecoded
    }
}
