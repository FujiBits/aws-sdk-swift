// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutRestApiOutputResponseBody: Equatable {
    public let id: String?
    public let name: String?
    public let description: String?
    public let createdDate: Date?
    public let version: String?
    public let warnings: [String]?
    public let binaryMediaTypes: [String]?
    public let minimumCompressionSize: Int?
    public let apiKeySource: ApiKeySourceType?
    public let endpointConfiguration: EndpointConfiguration?
    public let policy: String?
    public let tags: [String:String]?
    public let disableExecuteApiEndpoint: Bool
}

extension PutRestApiOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case apiKeySource
        case binaryMediaTypes
        case createdDate
        case description
        case disableExecuteApiEndpoint
        case endpointConfiguration
        case id
        case minimumCompressionSize
        case name
        case policy
        case tags
        case version
        case warnings
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let warningsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .warnings)
        var warningsDecoded0:[String]? = nil
        if let warningsContainer = warningsContainer {
            warningsDecoded0 = [String]()
            for string0 in warningsContainer {
                if let string0 = string0 {
                    warningsDecoded0?.append(string0)
                }
            }
        }
        warnings = warningsDecoded0
        let binaryMediaTypesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .binaryMediaTypes)
        var binaryMediaTypesDecoded0:[String]? = nil
        if let binaryMediaTypesContainer = binaryMediaTypesContainer {
            binaryMediaTypesDecoded0 = [String]()
            for string0 in binaryMediaTypesContainer {
                if let string0 = string0 {
                    binaryMediaTypesDecoded0?.append(string0)
                }
            }
        }
        binaryMediaTypes = binaryMediaTypesDecoded0
        let minimumCompressionSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minimumCompressionSize)
        minimumCompressionSize = minimumCompressionSizeDecoded
        let apiKeySourceDecoded = try containerValues.decodeIfPresent(ApiKeySourceType.self, forKey: .apiKeySource)
        apiKeySource = apiKeySourceDecoded
        let endpointConfigurationDecoded = try containerValues.decodeIfPresent(EndpointConfiguration.self, forKey: .endpointConfiguration)
        endpointConfiguration = endpointConfigurationDecoded
        let policyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policy)
        policy = policyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
        let disableExecuteApiEndpointDecoded = try containerValues.decode(Bool.self, forKey: .disableExecuteApiEndpoint)
        disableExecuteApiEndpoint = disableExecuteApiEndpointDecoded
    }
}
