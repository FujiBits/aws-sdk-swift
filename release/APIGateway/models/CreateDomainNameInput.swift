// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A request to create a new domain name.</p>
public struct CreateDomainNameInput: Equatable {
    /// <p>The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.</p>
    public let certificateArn: String?
    /// <p>[Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.</p>
    public let certificateBody: String?
    /// <p>[Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.</p>
    public let certificateChain: String?
    /// <p>The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.</p>
    public let certificateName: String?
    /// <p>[Deprecated] Your edge-optimized endpoint's domain name certificate's private key.</p>
    public let certificatePrivateKey: String?
    /// <p>[Required] The name of the <a>DomainName</a> resource.</p>
    public let domainName: String?
    /// <p>The endpoint configuration of this <a>DomainName</a> showing the endpoint types of the domain name.</p>
    public let endpointConfiguration: EndpointConfiguration?
    /// <p>If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your custom domain name.</p>
    public let mutualTlsAuthentication: MutualTlsAuthenticationInput?
    /// <p>The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.</p>
    public let regionalCertificateArn: String?
    /// <p>The user-friendly name of the certificate that will be used by regional endpoint for this domain name.</p>
    public let regionalCertificateName: String?
    /// <p>The Transport Layer Security (TLS) version + cipher suite for this <a>DomainName</a>. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.</p>
    public let securityPolicy: SecurityPolicy?
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    public let tags: [String:String]?

    public init (
        certificateArn: String? = nil,
        certificateBody: String? = nil,
        certificateChain: String? = nil,
        certificateName: String? = nil,
        certificatePrivateKey: String? = nil,
        domainName: String? = nil,
        endpointConfiguration: EndpointConfiguration? = nil,
        mutualTlsAuthentication: MutualTlsAuthenticationInput? = nil,
        regionalCertificateArn: String? = nil,
        regionalCertificateName: String? = nil,
        securityPolicy: SecurityPolicy? = nil,
        tags: [String:String]? = nil
    )
    {
        self.certificateArn = certificateArn
        self.certificateBody = certificateBody
        self.certificateChain = certificateChain
        self.certificateName = certificateName
        self.certificatePrivateKey = certificatePrivateKey
        self.domainName = domainName
        self.endpointConfiguration = endpointConfiguration
        self.mutualTlsAuthentication = mutualTlsAuthentication
        self.regionalCertificateArn = regionalCertificateArn
        self.regionalCertificateName = regionalCertificateName
        self.securityPolicy = securityPolicy
        self.tags = tags
    }
}

extension CreateDomainNameInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateDomainNameInput(certificateArn: \(String(describing: certificateArn)), certificateBody: \(String(describing: certificateBody)), certificateChain: \(String(describing: certificateChain)), certificateName: \(String(describing: certificateName)), certificatePrivateKey: \(String(describing: certificatePrivateKey)), domainName: \(String(describing: domainName)), endpointConfiguration: \(String(describing: endpointConfiguration)), mutualTlsAuthentication: \(String(describing: mutualTlsAuthentication)), regionalCertificateArn: \(String(describing: regionalCertificateArn)), regionalCertificateName: \(String(describing: regionalCertificateName)), securityPolicy: \(String(describing: securityPolicy)), tags: \(String(describing: tags)))"}
}
