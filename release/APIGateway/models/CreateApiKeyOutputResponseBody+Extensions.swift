// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApiKeyOutputResponseBody: Equatable {
    public let id: String?
    public let value: String?
    public let name: String?
    public let customerId: String?
    public let description: String?
    public let enabled: Bool
    public let createdDate: Date?
    public let lastUpdatedDate: Date?
    public let stageKeys: [String]?
    public let tags: [String:String]?
}

extension CreateApiKeyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createdDate
        case customerId
        case description
        case enabled
        case id
        case lastUpdatedDate
        case name
        case stageKeys
        case tags
        case value
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let customerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerId)
        customerId = customerIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let enabledDecoded = try containerValues.decode(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let stageKeysContainer = try containerValues.decodeIfPresent([String?].self, forKey: .stageKeys)
        var stageKeysDecoded0:[String]? = nil
        if let stageKeysContainer = stageKeysContainer {
            stageKeysDecoded0 = [String]()
            for string0 in stageKeysContainer {
                if let string0 = string0 {
                    stageKeysDecoded0?.append(string0)
                }
            }
        }
        stageKeys = stageKeysDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
