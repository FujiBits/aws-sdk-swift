// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StageKey: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case restApiId
        case stageName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let restApiId = restApiId {
            try encodeContainer.encode(restApiId, forKey: .restApiId)
        }
        if let stageName = stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let restApiIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .restApiId)
        restApiId = restApiIdDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stageName)
        stageName = stageNameDecoded
    }
}
