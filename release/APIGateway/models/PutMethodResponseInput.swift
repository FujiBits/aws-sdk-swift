// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Request to add a <a>MethodResponse</a> to an existing <a>Method</a> resource.</p>
public struct PutMethodResponseInput: Equatable {
    /// <p>[Required] The HTTP verb of the <a>Method</a> resource.</p>
    public let httpMethod: String?
    /// <p>[Required] The <a>Resource</a> identifier for the <a>Method</a> resource.</p>
    public let resourceId: String?
    /// <p>Specifies the <a>Model</a> resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a <a>Model</a> name as the value.</p>
    public let responseModels: [String:String]?
    /// <p>A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)</p>
    public let responseParameters: [String:Bool]?
    /// <p>[Required] The string identifier of the associated <a>RestApi</a>.</p>
    public let restApiId: String?
    /// <p>[Required] The method response's status code.</p>
    public let statusCode: String?

    public init (
        httpMethod: String? = nil,
        resourceId: String? = nil,
        responseModels: [String:String]? = nil,
        responseParameters: [String:Bool]? = nil,
        restApiId: String? = nil,
        statusCode: String? = nil
    )
    {
        self.httpMethod = httpMethod
        self.resourceId = resourceId
        self.responseModels = responseModels
        self.responseParameters = responseParameters
        self.restApiId = restApiId
        self.statusCode = statusCode
    }
}

extension PutMethodResponseInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutMethodResponseInput(httpMethod: \(String(describing: httpMethod)), resourceId: \(String(describing: resourceId)), responseModels: \(String(describing: responseModels)), responseParameters: \(String(describing: responseParameters)), restApiId: \(String(describing: restApiId)), statusCode: \(String(describing: statusCode)))"}
}
