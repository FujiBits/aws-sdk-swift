// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAuthorizerInputBody: Equatable {
    public let name: String?
    public let type: AuthorizerType?
    public let providerARNs: [String]?
    public let authType: String?
    public let authorizerUri: String?
    public let authorizerCredentials: String?
    public let identitySource: String?
    public let identityValidationExpression: String?
    public let authorizerResultTtlInSeconds: Int?
}

extension CreateAuthorizerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authType
        case authorizerCredentials
        case authorizerResultTtlInSeconds
        case authorizerUri
        case identitySource
        case identityValidationExpression
        case name
        case providerARNs
        case type
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(AuthorizerType.self, forKey: .type)
        type = typeDecoded
        let providerARNsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .providerARNs)
        var providerARNsDecoded0:[String]? = nil
        if let providerARNsContainer = providerARNsContainer {
            providerARNsDecoded0 = [String]()
            for string0 in providerARNsContainer {
                if let string0 = string0 {
                    providerARNsDecoded0?.append(string0)
                }
            }
        }
        providerARNs = providerARNsDecoded0
        let authTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authType)
        authType = authTypeDecoded
        let authorizerUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizerUri)
        authorizerUri = authorizerUriDecoded
        let authorizerCredentialsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizerCredentials)
        authorizerCredentials = authorizerCredentialsDecoded
        let identitySourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identitySource)
        identitySource = identitySourceDecoded
        let identityValidationExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityValidationExpression)
        identityValidationExpression = identityValidationExpressionDecoded
        let authorizerResultTtlInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .authorizerResultTtlInSeconds)
        authorizerResultTtlInSeconds = authorizerResultTtlInSecondsDecoded
    }
}
