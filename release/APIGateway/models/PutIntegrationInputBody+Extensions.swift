// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutIntegrationInputBody: Equatable {
    public let type: IntegrationType?
    public let integrationHttpMethod: String?
    public let uri: String?
    public let connectionType: ConnectionType?
    public let connectionId: String?
    public let credentials: String?
    public let requestParameters: [String:String]?
    public let requestTemplates: [String:String]?
    public let passthroughBehavior: String?
    public let cacheNamespace: String?
    public let cacheKeyParameters: [String]?
    public let contentHandling: ContentHandlingStrategy?
    public let timeoutInMillis: Int?
    public let tlsConfig: TlsConfig?
}

extension PutIntegrationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheKeyParameters
        case cacheNamespace
        case connectionId
        case connectionType
        case contentHandling
        case credentials
        case integrationHttpMethod = "httpMethod"
        case passthroughBehavior
        case requestParameters
        case requestTemplates
        case timeoutInMillis
        case tlsConfig
        case type
        case uri
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(IntegrationType.self, forKey: .type)
        type = typeDecoded
        let integrationHttpMethodDecoded = try containerValues.decodeIfPresent(String.self, forKey: .integrationHttpMethod)
        integrationHttpMethod = integrationHttpMethodDecoded
        let uriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uri)
        uri = uriDecoded
        let connectionTypeDecoded = try containerValues.decodeIfPresent(ConnectionType.self, forKey: .connectionType)
        connectionType = connectionTypeDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .credentials)
        credentials = credentialsDecoded
        let requestParametersContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .requestParameters)
        var requestParametersDecoded0: [String:String]? = nil
        if let requestParametersContainer = requestParametersContainer {
            requestParametersDecoded0 = [String:String]()
            for (key0, string0) in requestParametersContainer {
                if let string0 = string0 {
                    requestParametersDecoded0?[key0] = string0
                }
            }
        }
        requestParameters = requestParametersDecoded0
        let requestTemplatesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .requestTemplates)
        var requestTemplatesDecoded0: [String:String]? = nil
        if let requestTemplatesContainer = requestTemplatesContainer {
            requestTemplatesDecoded0 = [String:String]()
            for (key0, string0) in requestTemplatesContainer {
                if let string0 = string0 {
                    requestTemplatesDecoded0?[key0] = string0
                }
            }
        }
        requestTemplates = requestTemplatesDecoded0
        let passthroughBehaviorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .passthroughBehavior)
        passthroughBehavior = passthroughBehaviorDecoded
        let cacheNamespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNamespace)
        cacheNamespace = cacheNamespaceDecoded
        let cacheKeyParametersContainer = try containerValues.decodeIfPresent([String?].self, forKey: .cacheKeyParameters)
        var cacheKeyParametersDecoded0:[String]? = nil
        if let cacheKeyParametersContainer = cacheKeyParametersContainer {
            cacheKeyParametersDecoded0 = [String]()
            for string0 in cacheKeyParametersContainer {
                if let string0 = string0 {
                    cacheKeyParametersDecoded0?.append(string0)
                }
            }
        }
        cacheKeyParameters = cacheKeyParametersDecoded0
        let contentHandlingDecoded = try containerValues.decodeIfPresent(ContentHandlingStrategy.self, forKey: .contentHandling)
        contentHandling = contentHandlingDecoded
        let timeoutInMillisDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutInMillis)
        timeoutInMillis = timeoutInMillisDecoded
        let tlsConfigDecoded = try containerValues.decodeIfPresent(TlsConfig.self, forKey: .tlsConfig)
        tlsConfig = tlsConfigDecoded
    }
}
