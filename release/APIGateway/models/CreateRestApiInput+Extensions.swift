// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateRestApiInputHeadersMiddleware: Middleware {
    public let id: String = "CreateRestApiInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRestApiInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRestApiOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRestApiInput>
    public typealias MOutput = OperationOutput<CreateRestApiOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRestApiOutputError>
}

public struct CreateRestApiInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateRestApiInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRestApiInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRestApiOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRestApiInput>
    public typealias MOutput = OperationOutput<CreateRestApiOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRestApiOutputError>
}

public struct CreateRestApiInputBodyMiddleware: Middleware {
    public let id: String = "CreateRestApiInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRestApiInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRestApiOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRestApiInput>
    public typealias MOutput = OperationOutput<CreateRestApiOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRestApiOutputError>
}

extension CreateRestApiInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case apiKeySource
        case binaryMediaTypes
        case cloneFrom
        case description
        case disableExecuteApiEndpoint
        case endpointConfiguration
        case minimumCompressionSize
        case name
        case policy
        case tags
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiKeySource = apiKeySource {
            try encodeContainer.encode(apiKeySource.rawValue, forKey: .apiKeySource)
        }
        if let binaryMediaTypes = binaryMediaTypes {
            var binaryMediaTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .binaryMediaTypes)
            for listofstring0 in binaryMediaTypes {
                try binaryMediaTypesContainer.encode(listofstring0)
            }
        }
        if let cloneFrom = cloneFrom {
            try encodeContainer.encode(cloneFrom, forKey: .cloneFrom)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if disableExecuteApiEndpoint != false {
            try encodeContainer.encode(disableExecuteApiEndpoint, forKey: .disableExecuteApiEndpoint)
        }
        if let endpointConfiguration = endpointConfiguration {
            try encodeContainer.encode(endpointConfiguration, forKey: .endpointConfiguration)
        }
        if let minimumCompressionSize = minimumCompressionSize {
            try encodeContainer.encode(minimumCompressionSize, forKey: .minimumCompressionSize)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policy = policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, mapofstringtostring0) in tags {
                try tagsContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}
