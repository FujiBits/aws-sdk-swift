// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateGatewayResponseOutputResponseBody: Equatable {
    public let responseType: GatewayResponseType?
    public let statusCode: String?
    public let responseParameters: [String:String]?
    public let responseTemplates: [String:String]?
    public let defaultResponse: Bool
}

extension UpdateGatewayResponseOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case defaultResponse
        case responseParameters
        case responseTemplates
        case responseType
        case statusCode
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responseTypeDecoded = try containerValues.decodeIfPresent(GatewayResponseType.self, forKey: .responseType)
        responseType = responseTypeDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let responseParametersContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .responseParameters)
        var responseParametersDecoded0: [String:String]? = nil
        if let responseParametersContainer = responseParametersContainer {
            responseParametersDecoded0 = [String:String]()
            for (key0, string0) in responseParametersContainer {
                if let string0 = string0 {
                    responseParametersDecoded0?[key0] = string0
                }
            }
        }
        responseParameters = responseParametersDecoded0
        let responseTemplatesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .responseTemplates)
        var responseTemplatesDecoded0: [String:String]? = nil
        if let responseTemplatesContainer = responseTemplatesContainer {
            responseTemplatesDecoded0 = [String:String]()
            for (key0, string0) in responseTemplatesContainer {
                if let string0 = string0 {
                    responseTemplatesDecoded0?[key0] = string0
                }
            }
        }
        responseTemplates = responseTemplatesDecoded0
        let defaultResponseDecoded = try containerValues.decode(Bool.self, forKey: .defaultResponse)
        defaultResponse = defaultResponseDecoded
    }
}
