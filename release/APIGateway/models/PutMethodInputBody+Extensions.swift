// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutMethodInputBody: Equatable {
    public let authorizationType: String?
    public let authorizerId: String?
    public let apiKeyRequired: Bool
    public let operationName: String?
    public let requestParameters: [String:Bool]?
    public let requestModels: [String:String]?
    public let requestValidatorId: String?
    public let authorizationScopes: [String]?
}

extension PutMethodInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case apiKeyRequired
        case authorizationScopes
        case authorizationType
        case authorizerId
        case operationName
        case requestModels
        case requestParameters
        case requestValidatorId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizationTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizationType)
        authorizationType = authorizationTypeDecoded
        let authorizerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizerId)
        authorizerId = authorizerIdDecoded
        let apiKeyRequiredDecoded = try containerValues.decode(Bool.self, forKey: .apiKeyRequired)
        apiKeyRequired = apiKeyRequiredDecoded
        let operationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationName)
        operationName = operationNameDecoded
        let requestParametersContainer = try containerValues.decodeIfPresent([String: Bool?].self, forKey: .requestParameters)
        var requestParametersDecoded0: [String:Bool]? = nil
        if let requestParametersContainer = requestParametersContainer {
            requestParametersDecoded0 = [String:Bool]()
            for (key0, nullableboolean0) in requestParametersContainer {
                if let nullableboolean0 = nullableboolean0 {
                    requestParametersDecoded0?[key0] = nullableboolean0
                }
            }
        }
        requestParameters = requestParametersDecoded0
        let requestModelsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .requestModels)
        var requestModelsDecoded0: [String:String]? = nil
        if let requestModelsContainer = requestModelsContainer {
            requestModelsDecoded0 = [String:String]()
            for (key0, string0) in requestModelsContainer {
                if let string0 = string0 {
                    requestModelsDecoded0?[key0] = string0
                }
            }
        }
        requestModels = requestModelsDecoded0
        let requestValidatorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestValidatorId)
        requestValidatorId = requestValidatorIdDecoded
        let authorizationScopesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .authorizationScopes)
        var authorizationScopesDecoded0:[String]? = nil
        if let authorizationScopesContainer = authorizationScopesContainer {
            authorizationScopesDecoded0 = [String]()
            for string0 in authorizationScopesContainer {
                if let string0 = string0 {
                    authorizationScopesDecoded0?.append(string0)
                }
            }
        }
        authorizationScopes = authorizationScopesDecoded0
    }
}
