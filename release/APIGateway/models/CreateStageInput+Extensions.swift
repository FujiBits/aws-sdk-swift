// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateStageInputHeadersMiddleware: Middleware {
    public let id: String = "CreateStageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStageInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStageInput>
    public typealias MOutput = OperationOutput<CreateStageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStageOutputError>
}

public struct CreateStageInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateStageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStageInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStageInput>
    public typealias MOutput = OperationOutput<CreateStageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStageOutputError>
}

public struct CreateStageInputBodyMiddleware: Middleware {
    public let id: String = "CreateStageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStageInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStageInput>
    public typealias MOutput = OperationOutput<CreateStageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStageOutputError>
}

extension CreateStageInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheClusterEnabled
        case cacheClusterSize
        case canarySettings
        case deploymentId
        case description
        case documentationVersion
        case stageName
        case tags
        case tracingEnabled
        case variables
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cacheClusterEnabled != false {
            try encodeContainer.encode(cacheClusterEnabled, forKey: .cacheClusterEnabled)
        }
        if let cacheClusterSize = cacheClusterSize {
            try encodeContainer.encode(cacheClusterSize.rawValue, forKey: .cacheClusterSize)
        }
        if let canarySettings = canarySettings {
            try encodeContainer.encode(canarySettings, forKey: .canarySettings)
        }
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let documentationVersion = documentationVersion {
            try encodeContainer.encode(documentationVersion, forKey: .documentationVersion)
        }
        if let stageName = stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, mapofstringtostring0) in tags {
                try tagsContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
        if tracingEnabled != false {
            try encodeContainer.encode(tracingEnabled, forKey: .tracingEnabled)
        }
        if let variables = variables {
            var variablesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .variables)
            for (dictKey0, mapofstringtostring0) in variables {
                try variablesContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
