// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct TestInvokeAuthorizerInputHeadersMiddleware: Middleware {
    public let id: String = "TestInvokeAuthorizerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestInvokeAuthorizerInput>,
                  next: H) -> Swift.Result<OperationOutput<TestInvokeAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestInvokeAuthorizerInput>
    public typealias MOutput = OperationOutput<TestInvokeAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestInvokeAuthorizerOutputError>
}

public struct TestInvokeAuthorizerInputQueryItemMiddleware: Middleware {
    public let id: String = "TestInvokeAuthorizerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestInvokeAuthorizerInput>,
                  next: H) -> Swift.Result<OperationOutput<TestInvokeAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestInvokeAuthorizerInput>
    public typealias MOutput = OperationOutput<TestInvokeAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestInvokeAuthorizerOutputError>
}

public struct TestInvokeAuthorizerInputBodyMiddleware: Middleware {
    public let id: String = "TestInvokeAuthorizerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestInvokeAuthorizerInput>,
                  next: H) -> Swift.Result<OperationOutput<TestInvokeAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestInvokeAuthorizerInput>
    public typealias MOutput = OperationOutput<TestInvokeAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestInvokeAuthorizerOutputError>
}

extension TestInvokeAuthorizerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalContext
        case body
        case headers
        case multiValueHeaders
        case pathWithQueryString
        case stageVariables
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalContext = additionalContext {
            var additionalContextContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .additionalContext)
            for (dictKey0, mapofstringtostring0) in additionalContext {
                try additionalContextContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let body = body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let headers = headers {
            var headersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .headers)
            for (dictKey0, mapofstringtostring0) in headers {
                try headersContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let multiValueHeaders = multiValueHeaders {
            var multiValueHeadersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .multiValueHeaders)
            for (dictKey0, mapofstringtolist0) in multiValueHeaders {
                try multiValueHeadersContainer.encode(mapofstringtolist0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let pathWithQueryString = pathWithQueryString {
            try encodeContainer.encode(pathWithQueryString, forKey: .pathWithQueryString)
        }
        if let stageVariables = stageVariables {
            var stageVariablesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .stageVariables)
            for (dictKey0, mapofstringtostring0) in stageVariables {
                try stageVariablesContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
