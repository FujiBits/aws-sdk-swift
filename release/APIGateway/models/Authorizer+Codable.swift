// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Authorizer: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authType
        case authorizerCredentials
        case authorizerResultTtlInSeconds
        case authorizerUri
        case id
        case identitySource
        case identityValidationExpression
        case name
        case providerARNs
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authType = authType {
            try encodeContainer.encode(authType, forKey: .authType)
        }
        if let authorizerCredentials = authorizerCredentials {
            try encodeContainer.encode(authorizerCredentials, forKey: .authorizerCredentials)
        }
        if let authorizerResultTtlInSeconds = authorizerResultTtlInSeconds {
            try encodeContainer.encode(authorizerResultTtlInSeconds, forKey: .authorizerResultTtlInSeconds)
        }
        if let authorizerUri = authorizerUri {
            try encodeContainer.encode(authorizerUri, forKey: .authorizerUri)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let identitySource = identitySource {
            try encodeContainer.encode(identitySource, forKey: .identitySource)
        }
        if let identityValidationExpression = identityValidationExpression {
            try encodeContainer.encode(identityValidationExpression, forKey: .identityValidationExpression)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let providerARNs = providerARNs {
            var providerARNsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .providerARNs)
            for listofarns0 in providerARNs {
                try providerARNsContainer.encode(listofarns0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(AuthorizerType.self, forKey: .type)
        type = typeDecoded
        let providerARNsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .providerARNs)
        var providerARNsDecoded0:[String]? = nil
        if let providerARNsContainer = providerARNsContainer {
            providerARNsDecoded0 = [String]()
            for string0 in providerARNsContainer {
                if let string0 = string0 {
                    providerARNsDecoded0?.append(string0)
                }
            }
        }
        providerARNs = providerARNsDecoded0
        let authTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authType)
        authType = authTypeDecoded
        let authorizerUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizerUri)
        authorizerUri = authorizerUriDecoded
        let authorizerCredentialsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizerCredentials)
        authorizerCredentials = authorizerCredentialsDecoded
        let identitySourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identitySource)
        identitySource = identitySourceDecoded
        let identityValidationExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityValidationExpression)
        identityValidationExpression = identityValidationExpressionDecoded
        let authorizerResultTtlInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .authorizerResultTtlInSeconds)
        authorizerResultTtlInSeconds = authorizerResultTtlInSecondsDecoded
    }
}
