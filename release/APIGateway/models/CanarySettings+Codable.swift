// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CanarySettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case percentTraffic
        case stageVariableOverrides
        case useStageCache
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if percentTraffic != 0.0 {
            try encodeContainer.encode(percentTraffic, forKey: .percentTraffic)
        }
        if let stageVariableOverrides = stageVariableOverrides {
            var stageVariableOverridesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .stageVariableOverrides)
            for (dictKey0, mapofstringtostring0) in stageVariableOverrides {
                try stageVariableOverridesContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
        if useStageCache != false {
            try encodeContainer.encode(useStageCache, forKey: .useStageCache)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let percentTrafficDecoded = try containerValues.decode(Double.self, forKey: .percentTraffic)
        percentTraffic = percentTrafficDecoded
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let stageVariableOverridesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .stageVariableOverrides)
        var stageVariableOverridesDecoded0: [String:String]? = nil
        if let stageVariableOverridesContainer = stageVariableOverridesContainer {
            stageVariableOverridesDecoded0 = [String:String]()
            for (key0, string0) in stageVariableOverridesContainer {
                if let string0 = string0 {
                    stageVariableOverridesDecoded0?[key0] = string0
                }
            }
        }
        stageVariableOverrides = stageVariableOverridesDecoded0
        let useStageCacheDecoded = try containerValues.decode(Bool.self, forKey: .useStageCache)
        useStageCache = useStageCacheDecoded
    }
}
