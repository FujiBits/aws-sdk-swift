// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVpcLinkOutputResponseBody: Equatable {
    public let id: String?
    public let name: String?
    public let description: String?
    public let targetArns: [String]?
    public let status: VpcLinkStatus?
    public let statusMessage: String?
    public let tags: [String:String]?
}

extension CreateVpcLinkOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description
        case id
        case name
        case status
        case statusMessage
        case tags
        case targetArns
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let targetArnsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .targetArns)
        var targetArnsDecoded0:[String]? = nil
        if let targetArnsContainer = targetArnsContainer {
            targetArnsDecoded0 = [String]()
            for string0 in targetArnsContainer {
                if let string0 = string0 {
                    targetArnsDecoded0?.append(string0)
                }
            }
        }
        targetArns = targetArnsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(VpcLinkStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
