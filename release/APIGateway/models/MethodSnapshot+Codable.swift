// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MethodSnapshot: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case apiKeyRequired
        case authorizationType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if apiKeyRequired != false {
            try encodeContainer.encode(apiKeyRequired, forKey: .apiKeyRequired)
        }
        if let authorizationType = authorizationType {
            try encodeContainer.encode(authorizationType, forKey: .authorizationType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizationTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizationType)
        authorizationType = authorizationTypeDecoded
        let apiKeyRequiredDecoded = try containerValues.decode(Bool.self, forKey: .apiKeyRequired)
        apiKeyRequired = apiKeyRequiredDecoded
    }
}
