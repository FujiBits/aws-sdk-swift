// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutMethodResponseInputHeadersMiddleware: Middleware {
    public let id: String = "PutMethodResponseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutMethodResponseInput>,
                  next: H) -> Swift.Result<OperationOutput<PutMethodResponseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutMethodResponseInput>
    public typealias MOutput = OperationOutput<PutMethodResponseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutMethodResponseOutputError>
}

public struct PutMethodResponseInputQueryItemMiddleware: Middleware {
    public let id: String = "PutMethodResponseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutMethodResponseInput>,
                  next: H) -> Swift.Result<OperationOutput<PutMethodResponseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutMethodResponseInput>
    public typealias MOutput = OperationOutput<PutMethodResponseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutMethodResponseOutputError>
}

public struct PutMethodResponseInputBodyMiddleware: Middleware {
    public let id: String = "PutMethodResponseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutMethodResponseInput>,
                  next: H) -> Swift.Result<OperationOutput<PutMethodResponseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutMethodResponseInput>
    public typealias MOutput = OperationOutput<PutMethodResponseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutMethodResponseOutputError>
}

extension PutMethodResponseInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case responseModels
        case responseParameters
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let responseModels = responseModels {
            var responseModelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .responseModels)
            for (dictKey0, mapofstringtostring0) in responseModels {
                try responseModelsContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let responseParameters = responseParameters {
            var responseParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .responseParameters)
            for (dictKey0, mapofstringtoboolean0) in responseParameters {
                try responseParametersContainer.encode(mapofstringtoboolean0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
