// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateUsagePlanInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let apiStages: [ApiStage]?
    public let throttle: ThrottleSettings?
    public let quota: QuotaSettings?
    public let tags: [String:String]?
}

extension CreateUsagePlanInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case apiStages
        case description
        case name
        case quota
        case tags
        case throttle
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let apiStagesContainer = try containerValues.decodeIfPresent([ApiStage?].self, forKey: .apiStages)
        var apiStagesDecoded0:[ApiStage]? = nil
        if let apiStagesContainer = apiStagesContainer {
            apiStagesDecoded0 = [ApiStage]()
            for structure0 in apiStagesContainer {
                if let structure0 = structure0 {
                    apiStagesDecoded0?.append(structure0)
                }
            }
        }
        apiStages = apiStagesDecoded0
        let throttleDecoded = try containerValues.decodeIfPresent(ThrottleSettings.self, forKey: .throttle)
        throttle = throttleDecoded
        let quotaDecoded = try containerValues.decodeIfPresent(QuotaSettings.self, forKey: .quota)
        quota = quotaDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
