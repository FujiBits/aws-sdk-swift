// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutGatewayResponseInputHeadersMiddleware: Middleware {
    public let id: String = "PutGatewayResponseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutGatewayResponseInput>,
                  next: H) -> Swift.Result<OperationOutput<PutGatewayResponseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutGatewayResponseInput>
    public typealias MOutput = OperationOutput<PutGatewayResponseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutGatewayResponseOutputError>
}

public struct PutGatewayResponseInputQueryItemMiddleware: Middleware {
    public let id: String = "PutGatewayResponseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutGatewayResponseInput>,
                  next: H) -> Swift.Result<OperationOutput<PutGatewayResponseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutGatewayResponseInput>
    public typealias MOutput = OperationOutput<PutGatewayResponseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutGatewayResponseOutputError>
}

public struct PutGatewayResponseInputBodyMiddleware: Middleware {
    public let id: String = "PutGatewayResponseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutGatewayResponseInput>,
                  next: H) -> Swift.Result<OperationOutput<PutGatewayResponseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutGatewayResponseInput>
    public typealias MOutput = OperationOutput<PutGatewayResponseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutGatewayResponseOutputError>
}

extension PutGatewayResponseInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case responseParameters
        case responseTemplates
        case statusCode
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let responseParameters = responseParameters {
            var responseParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .responseParameters)
            for (dictKey0, mapofstringtostring0) in responseParameters {
                try responseParametersContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let responseTemplates = responseTemplates {
            var responseTemplatesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .responseTemplates)
            for (dictKey0, mapofstringtostring0) in responseTemplates {
                try responseTemplatesContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode, forKey: .statusCode)
        }
    }
}
