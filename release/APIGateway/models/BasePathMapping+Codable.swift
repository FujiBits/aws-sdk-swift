// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BasePathMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case basePath
        case restApiId
        case stage
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let basePath = basePath {
            try encodeContainer.encode(basePath, forKey: .basePath)
        }
        if let restApiId = restApiId {
            try encodeContainer.encode(restApiId, forKey: .restApiId)
        }
        if let stage = stage {
            try encodeContainer.encode(stage, forKey: .stage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let basePathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .basePath)
        basePath = basePathDecoded
        let restApiIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .restApiId)
        restApiId = restApiIdDecoded
        let stageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stage)
        stage = stageDecoded
    }
}
