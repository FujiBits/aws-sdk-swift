// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Resource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id
        case parentId
        case path
        case pathPart
        case resourceMethods
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let parentId = parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let pathPart = pathPart {
            try encodeContainer.encode(pathPart, forKey: .pathPart)
        }
        if let resourceMethods = resourceMethods {
            var resourceMethodsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .resourceMethods)
            for (dictKey0, mapofmethod0) in resourceMethods {
                try resourceMethodsContainer.encode(mapofmethod0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let parentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let pathPartDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pathPart)
        pathPart = pathPartDecoded
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let resourceMethodsContainer = try containerValues.decodeIfPresent([String: Method?].self, forKey: .resourceMethods)
        var resourceMethodsDecoded0: [String:Method]? = nil
        if let resourceMethodsContainer = resourceMethodsContainer {
            resourceMethodsDecoded0 = [String:Method]()
            for (key0, method0) in resourceMethodsContainer {
                if let method0 = method0 {
                    resourceMethodsDecoded0?[key0] = method0
                }
            }
        }
        resourceMethods = resourceMethodsDecoded0
    }
}
