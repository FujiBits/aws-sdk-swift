// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutMethodInputHeadersMiddleware: Middleware {
    public let id: String = "PutMethodInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutMethodInput>,
                  next: H) -> Swift.Result<OperationOutput<PutMethodOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutMethodInput>
    public typealias MOutput = OperationOutput<PutMethodOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutMethodOutputError>
}

public struct PutMethodInputQueryItemMiddleware: Middleware {
    public let id: String = "PutMethodInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutMethodInput>,
                  next: H) -> Swift.Result<OperationOutput<PutMethodOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutMethodInput>
    public typealias MOutput = OperationOutput<PutMethodOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutMethodOutputError>
}

public struct PutMethodInputBodyMiddleware: Middleware {
    public let id: String = "PutMethodInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutMethodInput>,
                  next: H) -> Swift.Result<OperationOutput<PutMethodOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutMethodInput>
    public typealias MOutput = OperationOutput<PutMethodOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutMethodOutputError>
}

extension PutMethodInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case apiKeyRequired
        case authorizationScopes
        case authorizationType
        case authorizerId
        case operationName
        case requestModels
        case requestParameters
        case requestValidatorId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if apiKeyRequired != false {
            try encodeContainer.encode(apiKeyRequired, forKey: .apiKeyRequired)
        }
        if let authorizationScopes = authorizationScopes {
            var authorizationScopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .authorizationScopes)
            for listofstring0 in authorizationScopes {
                try authorizationScopesContainer.encode(listofstring0)
            }
        }
        if let authorizationType = authorizationType {
            try encodeContainer.encode(authorizationType, forKey: .authorizationType)
        }
        if let authorizerId = authorizerId {
            try encodeContainer.encode(authorizerId, forKey: .authorizerId)
        }
        if let operationName = operationName {
            try encodeContainer.encode(operationName, forKey: .operationName)
        }
        if let requestModels = requestModels {
            var requestModelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestModels)
            for (dictKey0, mapofstringtostring0) in requestModels {
                try requestModelsContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let requestParameters = requestParameters {
            var requestParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestParameters)
            for (dictKey0, mapofstringtoboolean0) in requestParameters {
                try requestParametersContainer.encode(mapofstringtoboolean0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let requestValidatorId = requestValidatorId {
            try encodeContainer.encode(requestValidatorId, forKey: .requestValidatorId)
        }
    }
}
