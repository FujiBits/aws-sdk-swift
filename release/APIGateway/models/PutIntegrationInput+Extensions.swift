// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutIntegrationInputHeadersMiddleware: Middleware {
    public let id: String = "PutIntegrationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutIntegrationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutIntegrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutIntegrationInput>
    public typealias MOutput = OperationOutput<PutIntegrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutIntegrationOutputError>
}

public struct PutIntegrationInputQueryItemMiddleware: Middleware {
    public let id: String = "PutIntegrationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutIntegrationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutIntegrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutIntegrationInput>
    public typealias MOutput = OperationOutput<PutIntegrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutIntegrationOutputError>
}

public struct PutIntegrationInputBodyMiddleware: Middleware {
    public let id: String = "PutIntegrationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutIntegrationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutIntegrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutIntegrationInput>
    public typealias MOutput = OperationOutput<PutIntegrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutIntegrationOutputError>
}

extension PutIntegrationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheKeyParameters
        case cacheNamespace
        case connectionId
        case connectionType
        case contentHandling
        case credentials
        case integrationHttpMethod = "httpMethod"
        case passthroughBehavior
        case requestParameters
        case requestTemplates
        case timeoutInMillis
        case tlsConfig
        case type
        case uri
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cacheKeyParameters = cacheKeyParameters {
            var cacheKeyParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cacheKeyParameters)
            for listofstring0 in cacheKeyParameters {
                try cacheKeyParametersContainer.encode(listofstring0)
            }
        }
        if let cacheNamespace = cacheNamespace {
            try encodeContainer.encode(cacheNamespace, forKey: .cacheNamespace)
        }
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let connectionType = connectionType {
            try encodeContainer.encode(connectionType.rawValue, forKey: .connectionType)
        }
        if let contentHandling = contentHandling {
            try encodeContainer.encode(contentHandling.rawValue, forKey: .contentHandling)
        }
        if let credentials = credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let integrationHttpMethod = integrationHttpMethod {
            try encodeContainer.encode(integrationHttpMethod, forKey: .integrationHttpMethod)
        }
        if let passthroughBehavior = passthroughBehavior {
            try encodeContainer.encode(passthroughBehavior, forKey: .passthroughBehavior)
        }
        if let requestParameters = requestParameters {
            var requestParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestParameters)
            for (dictKey0, mapofstringtostring0) in requestParameters {
                try requestParametersContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let requestTemplates = requestTemplates {
            var requestTemplatesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestTemplates)
            for (dictKey0, mapofstringtostring0) in requestTemplates {
                try requestTemplatesContainer.encode(mapofstringtostring0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let timeoutInMillis = timeoutInMillis {
            try encodeContainer.encode(timeoutInMillis, forKey: .timeoutInMillis)
        }
        if let tlsConfig = tlsConfig {
            try encodeContainer.encode(tlsConfig, forKey: .tlsConfig)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let uri = uri {
            try encodeContainer.encode(uri, forKey: .uri)
        }
    }
}
