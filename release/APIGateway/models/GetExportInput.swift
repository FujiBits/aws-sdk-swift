// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Request a new export of a <a>RestApi</a> for a particular <a>Stage</a>.</p>
public struct GetExportInput: Equatable {
    /// <p>The content-type of the export, for example <code>application/json</code>. Currently <code>application/json</code> and <code>application/yaml</code> are supported for <code>exportType</code> of<code>oas30</code> and <code>swagger</code>. This should be specified in the <code>Accept</code> header for direct API requests.</p>
    public let accepts: String?
    /// <p>[Required] The type of export. Acceptable values are 'oas30' for OpenAPI 3.0.x and 'swagger' for Swagger/OpenAPI 2.0.</p>
    public let exportType: String?
    /// <p>A key-value map of query string parameters that specify properties of the export, depending on the requested <code>exportType</code>. For <code>exportType</code> <code>oas30</code> and <code>swagger</code>, any combination of the following parameters are supported: <code>extensions='integrations'</code> or <code>extensions='apigateway'</code> will export the API with x-amazon-apigateway-integration extensions. <code>extensions='authorizers'</code> will export the API with  x-amazon-apigateway-authorizer extensions. <code>postman</code> will export the API with Postman extensions, allowing for import to the Postman tool</p>
    public let parameters: [String:String]?
    /// <p>[Required] The string identifier of the associated <a>RestApi</a>.</p>
    public let restApiId: String?
    /// <p>[Required] The name of the <a>Stage</a> that will be exported.</p>
    public let stageName: String?

    public init (
        accepts: String? = nil,
        exportType: String? = nil,
        parameters: [String:String]? = nil,
        restApiId: String? = nil,
        stageName: String? = nil
    )
    {
        self.accepts = accepts
        self.exportType = exportType
        self.parameters = parameters
        self.restApiId = restApiId
        self.stageName = stageName
    }
}

extension GetExportInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetExportInput(accepts: \(String(describing: accepts)), exportType: \(String(describing: exportType)), parameters: \(String(describing: parameters)), restApiId: \(String(describing: restApiId)), stageName: \(String(describing: stageName)))"}
}
