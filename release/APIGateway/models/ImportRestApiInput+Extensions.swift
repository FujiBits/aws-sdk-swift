// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ImportRestApiInputHeadersMiddleware: Middleware {
    public let id: String = "ImportRestApiInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportRestApiInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportRestApiOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportRestApiInput>
    public typealias MOutput = OperationOutput<ImportRestApiOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportRestApiOutputError>
}

public struct ImportRestApiInputQueryItemMiddleware: Middleware {
    public let id: String = "ImportRestApiInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportRestApiInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportRestApiOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(URLQueryItem(name: "mode", value: "import"))
        let failOnWarningsQueryItem = URLQueryItem(name: "failonwarnings".urlPercentEncoding(), value: String(input.operationInput.failOnWarnings).urlPercentEncoding())
        input.builder.withQueryItem(failOnWarningsQueryItem)
        if let parameters = input.operationInput.parameters {
            let currentQueryItemNames = input.builder.currentQueryItems.map({$0.name})
            parameters.forEach { key0, value0 in
                if !currentQueryItemNames.contains(key0) {
                    let queryItem = URLQueryItem(name: key0.urlPercentEncoding(), value: value0.urlPercentEncoding())
                    input.builder.withQueryItem(queryItem)
                }
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportRestApiInput>
    public typealias MOutput = OperationOutput<ImportRestApiOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportRestApiOutputError>
}

public struct ImportRestApiInputBodyMiddleware: Middleware {
    public let id: String = "ImportRestApiInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportRestApiInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportRestApiOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let body = input.operationInput.body {
            let data = body
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportRestApiInput>
    public typealias MOutput = OperationOutput<ImportRestApiOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportRestApiOutputError>
}

extension ImportRestApiInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case body
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = body {
            try encodeContainer.encode(body.base64EncodedString(), forKey: .body)
        }
    }
}
