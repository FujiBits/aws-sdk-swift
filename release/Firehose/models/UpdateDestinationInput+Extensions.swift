// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateDestinationInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDestinationInput>
    public typealias MOutput = OperationOutput<UpdateDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDestinationOutputError>
}

public struct UpdateDestinationInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDestinationInput>
    public typealias MOutput = OperationOutput<UpdateDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDestinationOutputError>
}

public struct UpdateDestinationInputBodyMiddleware: Middleware {
    public let id: String = "UpdateDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDestinationInput>
    public typealias MOutput = OperationOutput<UpdateDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDestinationOutputError>
}

extension UpdateDestinationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currentDeliveryStreamVersionId = "CurrentDeliveryStreamVersionId"
        case deliveryStreamName = "DeliveryStreamName"
        case destinationId = "DestinationId"
        case elasticsearchDestinationUpdate = "ElasticsearchDestinationUpdate"
        case extendedS3DestinationUpdate = "ExtendedS3DestinationUpdate"
        case httpEndpointDestinationUpdate = "HttpEndpointDestinationUpdate"
        case redshiftDestinationUpdate = "RedshiftDestinationUpdate"
        case s3DestinationUpdate = "S3DestinationUpdate"
        case splunkDestinationUpdate = "SplunkDestinationUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentDeliveryStreamVersionId = currentDeliveryStreamVersionId {
            try encodeContainer.encode(currentDeliveryStreamVersionId, forKey: .currentDeliveryStreamVersionId)
        }
        if let deliveryStreamName = deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let destinationId = destinationId {
            try encodeContainer.encode(destinationId, forKey: .destinationId)
        }
        if let elasticsearchDestinationUpdate = elasticsearchDestinationUpdate {
            try encodeContainer.encode(elasticsearchDestinationUpdate, forKey: .elasticsearchDestinationUpdate)
        }
        if let extendedS3DestinationUpdate = extendedS3DestinationUpdate {
            try encodeContainer.encode(extendedS3DestinationUpdate, forKey: .extendedS3DestinationUpdate)
        }
        if let httpEndpointDestinationUpdate = httpEndpointDestinationUpdate {
            try encodeContainer.encode(httpEndpointDestinationUpdate, forKey: .httpEndpointDestinationUpdate)
        }
        if let redshiftDestinationUpdate = redshiftDestinationUpdate {
            try encodeContainer.encode(redshiftDestinationUpdate, forKey: .redshiftDestinationUpdate)
        }
        if let s3DestinationUpdate = s3DestinationUpdate {
            try encodeContainer.encode(s3DestinationUpdate, forKey: .s3DestinationUpdate)
        }
        if let splunkDestinationUpdate = splunkDestinationUpdate {
            try encodeContainer.encode(splunkDestinationUpdate, forKey: .splunkDestinationUpdate)
        }
    }
}
