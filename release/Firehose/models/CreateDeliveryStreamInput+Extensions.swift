// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateDeliveryStreamInputHeadersMiddleware: Middleware {
    public let id: String = "CreateDeliveryStreamInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeliveryStreamInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeliveryStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeliveryStreamInput>
    public typealias MOutput = OperationOutput<CreateDeliveryStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeliveryStreamOutputError>
}

public struct CreateDeliveryStreamInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateDeliveryStreamInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeliveryStreamInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeliveryStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeliveryStreamInput>
    public typealias MOutput = OperationOutput<CreateDeliveryStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeliveryStreamOutputError>
}

public struct CreateDeliveryStreamInputBodyMiddleware: Middleware {
    public let id: String = "CreateDeliveryStreamInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeliveryStreamInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeliveryStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeliveryStreamInput>
    public typealias MOutput = OperationOutput<CreateDeliveryStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeliveryStreamOutputError>
}

extension CreateDeliveryStreamInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deliveryStreamEncryptionConfigurationInput = "DeliveryStreamEncryptionConfigurationInput"
        case deliveryStreamName = "DeliveryStreamName"
        case deliveryStreamType = "DeliveryStreamType"
        case elasticsearchDestinationConfiguration = "ElasticsearchDestinationConfiguration"
        case extendedS3DestinationConfiguration = "ExtendedS3DestinationConfiguration"
        case httpEndpointDestinationConfiguration = "HttpEndpointDestinationConfiguration"
        case kinesisStreamSourceConfiguration = "KinesisStreamSourceConfiguration"
        case redshiftDestinationConfiguration = "RedshiftDestinationConfiguration"
        case s3DestinationConfiguration = "S3DestinationConfiguration"
        case splunkDestinationConfiguration = "SplunkDestinationConfiguration"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamEncryptionConfigurationInput = deliveryStreamEncryptionConfigurationInput {
            try encodeContainer.encode(deliveryStreamEncryptionConfigurationInput, forKey: .deliveryStreamEncryptionConfigurationInput)
        }
        if let deliveryStreamName = deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let deliveryStreamType = deliveryStreamType {
            try encodeContainer.encode(deliveryStreamType.rawValue, forKey: .deliveryStreamType)
        }
        if let elasticsearchDestinationConfiguration = elasticsearchDestinationConfiguration {
            try encodeContainer.encode(elasticsearchDestinationConfiguration, forKey: .elasticsearchDestinationConfiguration)
        }
        if let extendedS3DestinationConfiguration = extendedS3DestinationConfiguration {
            try encodeContainer.encode(extendedS3DestinationConfiguration, forKey: .extendedS3DestinationConfiguration)
        }
        if let httpEndpointDestinationConfiguration = httpEndpointDestinationConfiguration {
            try encodeContainer.encode(httpEndpointDestinationConfiguration, forKey: .httpEndpointDestinationConfiguration)
        }
        if let kinesisStreamSourceConfiguration = kinesisStreamSourceConfiguration {
            try encodeContainer.encode(kinesisStreamSourceConfiguration, forKey: .kinesisStreamSourceConfiguration)
        }
        if let redshiftDestinationConfiguration = redshiftDestinationConfiguration {
            try encodeContainer.encode(redshiftDestinationConfiguration, forKey: .redshiftDestinationConfiguration)
        }
        if let s3DestinationConfiguration = s3DestinationConfiguration {
            try encodeContainer.encode(s3DestinationConfiguration, forKey: .s3DestinationConfiguration)
        }
        if let splunkDestinationConfiguration = splunkDestinationConfiguration {
            try encodeContainer.encode(splunkDestinationConfiguration, forKey: .splunkDestinationConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tagdeliverystreaminputtaglist0 in tags {
                try tagsContainer.encode(tagdeliverystreaminputtaglist0)
            }
        }
    }
}
