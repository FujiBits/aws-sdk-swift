// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetIdentityPoliciesInputHeadersMiddleware: Middleware {
    public let id: String = "GetIdentityPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetIdentityPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetIdentityPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetIdentityPoliciesInput>
    public typealias MOutput = OperationOutput<GetIdentityPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetIdentityPoliciesOutputError>
}

public struct GetIdentityPoliciesInputQueryItemMiddleware: Middleware {
    public let id: String = "GetIdentityPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetIdentityPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetIdentityPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetIdentityPoliciesInput>
    public typealias MOutput = OperationOutput<GetIdentityPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetIdentityPoliciesOutputError>
}

public struct GetIdentityPoliciesInputBodyMiddleware: Middleware {
    public let id: String = "GetIdentityPoliciesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetIdentityPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetIdentityPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetIdentityPoliciesInput>
    public typealias MOutput = OperationOutput<GetIdentityPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetIdentityPoliciesOutputError>
}

extension GetIdentityPoliciesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: Key("Identity"))
        }
        if let policyNames = policyNames {
            var policyNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PolicyNames"))
            for (index0, policyname0) in policyNames.enumerated() {
                try policyNamesContainer.encode(policyname0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("GetIdentityPolicies", forKey:Key("Action"))
        try container.encode("2010-12-01", forKey:Key("Version"))
    }
}
