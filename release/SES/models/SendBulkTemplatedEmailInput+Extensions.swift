// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SendBulkTemplatedEmailInputHeadersMiddleware: Middleware {
    public let id: String = "SendBulkTemplatedEmailInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendBulkTemplatedEmailInput>,
                  next: H) -> Swift.Result<OperationOutput<SendBulkTemplatedEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendBulkTemplatedEmailInput>
    public typealias MOutput = OperationOutput<SendBulkTemplatedEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendBulkTemplatedEmailOutputError>
}

public struct SendBulkTemplatedEmailInputQueryItemMiddleware: Middleware {
    public let id: String = "SendBulkTemplatedEmailInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendBulkTemplatedEmailInput>,
                  next: H) -> Swift.Result<OperationOutput<SendBulkTemplatedEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendBulkTemplatedEmailInput>
    public typealias MOutput = OperationOutput<SendBulkTemplatedEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendBulkTemplatedEmailOutputError>
}

public struct SendBulkTemplatedEmailInputBodyMiddleware: Middleware {
    public let id: String = "SendBulkTemplatedEmailInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendBulkTemplatedEmailInput>,
                  next: H) -> Swift.Result<OperationOutput<SendBulkTemplatedEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendBulkTemplatedEmailInput>
    public typealias MOutput = OperationOutput<SendBulkTemplatedEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendBulkTemplatedEmailOutputError>
}

extension SendBulkTemplatedEmailInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: Key("ConfigurationSetName"))
        }
        if let defaultTags = defaultTags {
            var defaultTagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("DefaultTags"))
            for (index0, messagetag0) in defaultTags.enumerated() {
                try defaultTagsContainer.encode(messagetag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let defaultTemplateData = defaultTemplateData {
            try container.encode(defaultTemplateData, forKey: Key("DefaultTemplateData"))
        }
        if let destinations = destinations {
            var destinationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Destinations"))
            for (index0, bulkemaildestination0) in destinations.enumerated() {
                try destinationsContainer.encode(bulkemaildestination0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReplyToAddresses"))
            for (index0, address0) in replyToAddresses.enumerated() {
                try replyToAddressesContainer.encode(address0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let returnPath = returnPath {
            try container.encode(returnPath, forKey: Key("ReturnPath"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: Key("SourceArn"))
        }
        if let template = template {
            try container.encode(template, forKey: Key("Template"))
        }
        if let templateArn = templateArn {
            try container.encode(templateArn, forKey: Key("TemplateArn"))
        }
        try container.encode("SendBulkTemplatedEmail", forKey:Key("Action"))
        try container.encode("2010-12-01", forKey:Key("Version"))
    }
}
