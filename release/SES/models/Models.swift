// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccountSendingPausedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountSendingPausedException(message: \(Swift.String(describing: message)))"}
}

extension AccountSendingPausedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<AccountSendingPausedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that email sending is disabled for your entire Amazon SES account.</p>
///         <p>You can enable or disable email sending for your Amazon SES account using <a>UpdateAccountSendingEnabled</a>.</p>
public struct AccountSendingPausedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccountSendingPausedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AccountSendingPausedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes.AddHeaderAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headerName = "HeaderName"
        case headerValue = "HeaderValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let headerName = headerName {
            try container.encode(headerName, forKey: ClientRuntime.Key("HeaderName"))
        }
        if let headerValue = headerValue {
            try container.encode(headerValue, forKey: ClientRuntime.Key("HeaderValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let headerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .headerName)
        headerName = headerNameDecoded
        let headerValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .headerValue)
        headerValue = headerValueDecoded
    }
}

extension SesClientTypes.AddHeaderAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddHeaderAction(headerName: \(Swift.String(describing: headerName)), headerValue: \(Swift.String(describing: headerValue)))"}
}

extension SesClientTypes {
    /// <p>When included in a receipt rule, this action adds a header to the received
    ///             email.</p>
    ///         <p>For information about adding a header using a receipt rule, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-add-header.html">Amazon SES
    ///                 Developer Guide</a>.</p>
    public struct AddHeaderAction: Swift.Equatable {
        /// <p>The name of the header to add. Must be between 1 and 50 characters, inclusive, and
        ///             consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.</p>
        public let headerName: Swift.String?
        /// <p>Must be less than 2048 characters, and must not contain newline characters ("\r" or
        ///             "\n").</p>
        public let headerValue: Swift.String?

        public init (
            headerName: Swift.String? = nil,
            headerValue: Swift.String? = nil
        )
        {
            self.headerName = headerName
            self.headerValue = headerValue
        }
    }

}

extension AlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AlreadyExistsException(name: \(Swift.String(describing: name)), message: \(Swift.String(describing: message)))"}
}

extension AlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<AlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.name = output.error.name
        } else {
            self.name = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that a resource could not be created because of a naming conflict.</p>
public struct AlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// <p>Indicates that a resource could not be created because the resource name already
    ///             exists.</p>
    public var name: Swift.String?

    public init (
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.message = message
        self.name = name
    }
}

struct AlreadyExistsExceptionBody: Swift.Equatable {
    public let name: Swift.String?
    public let message: Swift.String?
}

extension AlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes {
    public enum BehaviorOnMXFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rejectmessage
        case usedefaultvalue
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorOnMXFailure] {
            return [
                .rejectmessage,
                .usedefaultvalue,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rejectmessage: return "RejectMessage"
            case .usedefaultvalue: return "UseDefaultValue"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BehaviorOnMXFailure(rawValue: rawValue) ?? BehaviorOnMXFailure.sdkUnknown(rawValue)
        }
    }
}

extension SesClientTypes.Body: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case html = "Html"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let html = html {
            try container.encode(html, forKey: ClientRuntime.Key("Html"))
        }
        if let text = text {
            try container.encode(text, forKey: ClientRuntime.Key("Text"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(SesClientTypes.Content.self, forKey: .text)
        text = textDecoded
        let htmlDecoded = try containerValues.decodeIfPresent(SesClientTypes.Content.self, forKey: .html)
        html = htmlDecoded
    }
}

extension SesClientTypes.Body: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Body(html: \(Swift.String(describing: html)), text: \(Swift.String(describing: text)))"}
}

extension SesClientTypes {
    /// <p>Represents the body of the message. You can specify text, HTML, or both. If you use
    ///             both, then the message should display correctly in the widest variety of email
    ///             clients.</p>
    public struct Body: Swift.Equatable {
        /// <p>The content of the message, in HTML format. Use this for email clients that can
        ///             process HTML. You can include clickable links, formatted text, and much more in an HTML
        ///             message.</p>
        public let html: SesClientTypes.Content?
        /// <p>The content of the message, in text format. Use this for text-based email clients, or
        ///             clients on high-latency networks (such as mobile devices).</p>
        public let text: SesClientTypes.Content?

        public init (
            html: SesClientTypes.Content? = nil,
            text: SesClientTypes.Content? = nil
        )
        {
            self.html = html
            self.text = text
        }
    }

}

extension SesClientTypes.BounceAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case sender = "Sender"
        case smtpReplyCode = "SmtpReplyCode"
        case statusCode = "StatusCode"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let sender = sender {
            try container.encode(sender, forKey: ClientRuntime.Key("Sender"))
        }
        if let smtpReplyCode = smtpReplyCode {
            try container.encode(smtpReplyCode, forKey: ClientRuntime.Key("SmtpReplyCode"))
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: ClientRuntime.Key("StatusCode"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let smtpReplyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smtpReplyCode)
        smtpReplyCode = smtpReplyCodeDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let senderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sender)
        sender = senderDecoded
    }
}

extension SesClientTypes.BounceAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BounceAction(message: \(Swift.String(describing: message)), sender: \(Swift.String(describing: sender)), smtpReplyCode: \(Swift.String(describing: smtpReplyCode)), statusCode: \(Swift.String(describing: statusCode)), topicArn: \(Swift.String(describing: topicArn)))"}
}

extension SesClientTypes {
    /// <p>When included in a receipt rule, this action rejects the received email by returning a
    ///             bounce response to the sender and, optionally, publishes a notification to Amazon Simple Notification Service
    ///             (Amazon SNS).</p>
    ///         <p>For information about sending a bounce message in response to a received email, see
    ///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-bounce.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public struct BounceAction: Swift.Equatable {
        /// <p>Human-readable text to include in the bounce message.</p>
        public let message: Swift.String?
        /// <p>The email address of the sender of the bounced email. This is the address from which
        ///             the bounce message will be sent.</p>
        public let sender: Swift.String?
        /// <p>The SMTP reply code, as defined by <a href="https://tools.ietf.org/html/rfc5321">RFC 5321</a>.</p>
        public let smtpReplyCode: Swift.String?
        /// <p>The SMTP enhanced status code, as defined by <a href="https://tools.ietf.org/html/rfc3463">RFC 3463</a>.</p>
        public let statusCode: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the bounce action is
        ///             taken. An example of an Amazon SNS topic ARN is
        ///                 <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more information about
        ///             Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
        public let topicArn: Swift.String?

        public init (
            message: Swift.String? = nil,
            sender: Swift.String? = nil,
            smtpReplyCode: Swift.String? = nil,
            statusCode: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.message = message
            self.sender = sender
            self.smtpReplyCode = smtpReplyCode
            self.statusCode = statusCode
            self.topicArn = topicArn
        }
    }

}

extension SesClientTypes {
    public enum BounceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case contentrejected
        case doesnotexist
        case exceededquota
        case messagetoolarge
        case temporaryfailure
        case undefined
        case sdkUnknown(Swift.String)

        public static var allCases: [BounceType] {
            return [
                .contentrejected,
                .doesnotexist,
                .exceededquota,
                .messagetoolarge,
                .temporaryfailure,
                .undefined,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .contentrejected: return "ContentRejected"
            case .doesnotexist: return "DoesNotExist"
            case .exceededquota: return "ExceededQuota"
            case .messagetoolarge: return "MessageTooLarge"
            case .temporaryfailure: return "TemporaryFailure"
            case .undefined: return "Undefined"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BounceType(rawValue: rawValue) ?? BounceType.sdkUnknown(rawValue)
        }
    }
}

extension SesClientTypes.BouncedRecipientInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounceType = "BounceType"
        case recipient = "Recipient"
        case recipientArn = "RecipientArn"
        case recipientDsnFields = "RecipientDsnFields"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bounceType = bounceType {
            try container.encode(bounceType, forKey: ClientRuntime.Key("BounceType"))
        }
        if let recipient = recipient {
            try container.encode(recipient, forKey: ClientRuntime.Key("Recipient"))
        }
        if let recipientArn = recipientArn {
            try container.encode(recipientArn, forKey: ClientRuntime.Key("RecipientArn"))
        }
        if let recipientDsnFields = recipientDsnFields {
            try container.encode(recipientDsnFields, forKey: ClientRuntime.Key("RecipientDsnFields"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recipientDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipient)
        recipient = recipientDecoded
        let recipientArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipientArn)
        recipientArn = recipientArnDecoded
        let bounceTypeDecoded = try containerValues.decodeIfPresent(SesClientTypes.BounceType.self, forKey: .bounceType)
        bounceType = bounceTypeDecoded
        let recipientDsnFieldsDecoded = try containerValues.decodeIfPresent(SesClientTypes.RecipientDsnFields.self, forKey: .recipientDsnFields)
        recipientDsnFields = recipientDsnFieldsDecoded
    }
}

extension SesClientTypes.BouncedRecipientInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BouncedRecipientInfo(bounceType: \(Swift.String(describing: bounceType)), recipient: \(Swift.String(describing: recipient)), recipientArn: \(Swift.String(describing: recipientArn)), recipientDsnFields: \(Swift.String(describing: recipientDsnFields)))"}
}

extension SesClientTypes {
    /// <p>Recipient-related information to include in the Delivery Status Notification (DSN)
    ///             when an email that Amazon SES receives on your behalf bounces.</p>
    ///         <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES
    ///                 Developer Guide</a>.</p>
    public struct BouncedRecipientInfo: Swift.Equatable {
        /// <p>The reason for the bounce. You must provide either this parameter or
        ///                 <code>RecipientDsnFields</code>.</p>
        public let bounceType: SesClientTypes.BounceType?
        /// <p>The email address of the recipient of the bounced email.</p>
        public let recipient: Swift.String?
        /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
        ///             that is associated with the sending authorization policy that permits you to receive
        ///             email for the recipient of the bounced email. For more information about sending
        ///             authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
        ///                 Guide</a>.</p>
        public let recipientArn: Swift.String?
        /// <p>Recipient-related DSN fields, most of which would normally be filled in automatically
        ///             when provided with a <code>BounceType</code>. You must provide either this parameter or
        ///                 <code>BounceType</code>.</p>
        public let recipientDsnFields: SesClientTypes.RecipientDsnFields?

        public init (
            bounceType: SesClientTypes.BounceType? = nil,
            recipient: Swift.String? = nil,
            recipientArn: Swift.String? = nil,
            recipientDsnFields: SesClientTypes.RecipientDsnFields? = nil
        )
        {
            self.bounceType = bounceType
            self.recipient = recipient
            self.recipientArn = recipientArn
            self.recipientDsnFields = recipientDsnFields
        }
    }

}

extension SesClientTypes.BulkEmailDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case replacementTags = "ReplacementTags"
        case replacementTemplateData = "ReplacementTemplateData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let replacementTags = replacementTags {
            var replacementTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplacementTags"))
            for (index0, messagetag0) in replacementTags.enumerated() {
                try replacementTagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replacementTemplateData = replacementTemplateData {
            try container.encode(replacementTemplateData, forKey: ClientRuntime.Key("ReplacementTemplateData"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(SesClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        if containerValues.contains(.replacementTags) {
            struct KeyVal0{struct member{}}
            let replacementTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replacementTags)
            if let replacementTagsWrappedContainer = replacementTagsWrappedContainer {
                let replacementTagsContainer = try replacementTagsWrappedContainer.decodeIfPresent([SesClientTypes.MessageTag].self, forKey: .member)
                var replacementTagsBuffer:[SesClientTypes.MessageTag]? = nil
                if let replacementTagsContainer = replacementTagsContainer {
                    replacementTagsBuffer = [SesClientTypes.MessageTag]()
                    for structureContainer0 in replacementTagsContainer {
                        replacementTagsBuffer?.append(structureContainer0)
                    }
                }
                replacementTags = replacementTagsBuffer
            } else {
                replacementTags = []
            }
        } else {
            replacementTags = nil
        }
        let replacementTemplateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replacementTemplateData)
        replacementTemplateData = replacementTemplateDataDecoded
    }
}

extension SesClientTypes.BulkEmailDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BulkEmailDestination(destination: \(Swift.String(describing: destination)), replacementTags: \(Swift.String(describing: replacementTags)), replacementTemplateData: \(Swift.String(describing: replacementTemplateData)))"}
}

extension SesClientTypes {
    /// <p>An array that contains one or more Destinations, as well as the tags and replacement
    ///             data associated with each of those Destinations.</p>
    public struct BulkEmailDestination: Swift.Equatable {
        /// <p>Represents the destination of the message, consisting of To:, CC:, and BCC:
        ///             fields.</p>
        ///         <note>
        ///             <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
        ///                     <i>local part</i> of a destination email address (the part of the
        ///                 email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
        ///                     characters</a>. If the <i>domain part</i> of an address (the
        ///                 part after the @ sign) contains non-ASCII characters, they must be encoded using
        ///                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p>
        ///         </note>
        public let destination: SesClientTypes.Destination?
        /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
        ///             using <code>SendBulkTemplatedEmail</code>. Tags correspond to characteristics of the
        ///             email that you define, so that you can publish email sending events.</p>
        public let replacementTags: [SesClientTypes.MessageTag]?
        /// <p>A list of replacement values to apply to the template. This parameter is a JSON
        ///             object, typically consisting of key-value pairs in which the keys correspond to
        ///             replacement tags in the email template.</p>
        public let replacementTemplateData: Swift.String?

        public init (
            destination: SesClientTypes.Destination? = nil,
            replacementTags: [SesClientTypes.MessageTag]? = nil,
            replacementTemplateData: Swift.String? = nil
        )
        {
            self.destination = destination
            self.replacementTags = replacementTags
            self.replacementTemplateData = replacementTemplateData
        }
    }

}

extension SesClientTypes.BulkEmailDestinationStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case error = "Error"
        case messageId = "MessageId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let error = error {
            try container.encode(error, forKey: ClientRuntime.Key("Error"))
        }
        if let messageId = messageId {
            try container.encode(messageId, forKey: ClientRuntime.Key("MessageId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SesClientTypes.BulkEmailStatus.self, forKey: .status)
        status = statusDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SesClientTypes.BulkEmailDestinationStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BulkEmailDestinationStatus(error: \(Swift.String(describing: error)), messageId: \(Swift.String(describing: messageId)), status: \(Swift.String(describing: status)))"}
}

extension SesClientTypes {
    /// <p>An object that contains the response from the <code>SendBulkTemplatedEmail</code>
    ///             operation.</p>
    public struct BulkEmailDestinationStatus: Swift.Equatable {
        /// <p>A description of an error that prevented a message being sent using the
        ///                 <code>SendBulkTemplatedEmail</code> operation.</p>
        public let error: Swift.String?
        /// <p>The unique message identifier returned from the <code>SendBulkTemplatedEmail</code>
        ///             operation.</p>
        public let messageId: Swift.String?
        /// <p>The status of a message sent using the <code>SendBulkTemplatedEmail</code>
        ///             operation.</p>
        ///         <p>Possible values for this parameter include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>Success</code>: Amazon SES accepted the message, and will attempt to deliver
        ///                     it to the recipients.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>MessageRejected</code>: The message was rejected because it contained a
        ///                     virus.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>MailFromDomainNotVerified</code>: The sender's email address or domain
        ///                     was not verified.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>ConfigurationSetDoesNotExist</code>: The configuration set you specified
        ///                     does not exist.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>TemplateDoesNotExist</code>: The template you specified does not
        ///                     exist.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>AccountSuspended</code>: Your account has been shut down because of
        ///                     issues related to your email sending practices.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>AccountThrottled</code>: The number of emails you can send has been
        ///                     reduced because your account has exceeded its allocated sending limit.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>AccountDailyQuotaExceeded</code>: You have reached or exceeded the
        ///                     maximum number of emails you can send from your account in a 24-hour
        ///                     period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>InvalidSendingPoolName</code>: The configuration set you specified
        ///                     refers to an IP pool that does not exist.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>AccountSendingPaused</code>: Email sending for the Amazon SES account was
        ///                     disabled using the <a>UpdateAccountSendingEnabled</a>
        ///                     operation.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>ConfigurationSetSendingPaused</code>: Email sending for this
        ///                     configuration set was disabled using the <a>UpdateConfigurationSetSendingEnabled</a> operation.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>InvalidParameterValue</code>: One or more of the parameters you
        ///                     specified when calling this operation was invalid. See the error message for
        ///                     additional information.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>TransientFailure</code>: Amazon SES was unable to process your request
        ///                     because of a temporary issue.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>Failed</code>: Amazon SES was unable to process your request. See the error
        ///                     message for additional information.</p>
        ///             </li>
        ///          </ul>
        public let status: SesClientTypes.BulkEmailStatus?

        public init (
            error: Swift.String? = nil,
            messageId: Swift.String? = nil,
            status: SesClientTypes.BulkEmailStatus? = nil
        )
        {
            self.error = error
            self.messageId = messageId
            self.status = status
        }
    }

}

extension SesClientTypes {
    public enum BulkEmailStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountdailyquotaexceeded
        case accountsendingpaused
        case accountsuspended
        case accountthrottled
        case configurationsetdoesnotexist
        case configurationsetsendingpaused
        case failed
        case invalidparametervalue
        case invalidsendingpoolname
        case mailfromdomainnotverified
        case messagerejected
        case success
        case templatedoesnotexist
        case transientfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [BulkEmailStatus] {
            return [
                .accountdailyquotaexceeded,
                .accountsendingpaused,
                .accountsuspended,
                .accountthrottled,
                .configurationsetdoesnotexist,
                .configurationsetsendingpaused,
                .failed,
                .invalidparametervalue,
                .invalidsendingpoolname,
                .mailfromdomainnotverified,
                .messagerejected,
                .success,
                .templatedoesnotexist,
                .transientfailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountdailyquotaexceeded: return "AccountDailyQuotaExceeded"
            case .accountsendingpaused: return "AccountSendingPaused"
            case .accountsuspended: return "AccountSuspended"
            case .accountthrottled: return "AccountThrottled"
            case .configurationsetdoesnotexist: return "ConfigurationSetDoesNotExist"
            case .configurationsetsendingpaused: return "ConfigurationSetSendingPaused"
            case .failed: return "Failed"
            case .invalidparametervalue: return "InvalidParameterValue"
            case .invalidsendingpoolname: return "InvalidSendingPoolName"
            case .mailfromdomainnotverified: return "MailFromDomainNotVerified"
            case .messagerejected: return "MessageRejected"
            case .success: return "Success"
            case .templatedoesnotexist: return "TemplateDoesNotExist"
            case .transientfailure: return "TransientFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BulkEmailStatus(rawValue: rawValue) ?? BulkEmailStatus.sdkUnknown(rawValue)
        }
    }
}

extension CannotDeleteException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CannotDeleteException(name: \(Swift.String(describing: name)), message: \(Swift.String(describing: message)))"}
}

extension CannotDeleteException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<CannotDeleteExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.name = output.error.name
        } else {
            self.name = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the delete operation could not be completed.</p>
public struct CannotDeleteException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// <p>Indicates that a resource could not be deleted because no resource with the specified
    ///             name exists.</p>
    public var name: Swift.String?

    public init (
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.message = message
        self.name = name
    }
}

struct CannotDeleteExceptionBody: Swift.Equatable {
    public let name: Swift.String?
    public let message: Swift.String?
}

extension CannotDeleteExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CloneReceiptRuleSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CloneReceiptRuleSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CloneReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CloneReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CloneReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CloneReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CloneReceiptRuleSetOutputError>
}

extension CloneReceiptRuleSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloneReceiptRuleSetInput(originalRuleSetName: \(Swift.String(describing: originalRuleSetName)), ruleSetName: \(Swift.String(describing: ruleSetName)))"}
}

extension CloneReceiptRuleSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let originalRuleSetName = originalRuleSetName {
            try container.encode(originalRuleSetName, forKey: ClientRuntime.Key("OriginalRuleSetName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("CloneReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CloneReceiptRuleSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CloneReceiptRuleSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CloneReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CloneReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CloneReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CloneReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CloneReceiptRuleSetOutputError>
}

public struct CloneReceiptRuleSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CloneReceiptRuleSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CloneReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CloneReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CloneReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CloneReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CloneReceiptRuleSetOutputError>
}

/// <p>Represents a request to create a receipt rule set by cloning an existing one. You use
///             receipt rule sets to receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
public struct CloneReceiptRuleSetInput: Swift.Equatable {
    /// <p>The name of the rule set to clone.</p>
    public let originalRuleSetName: Swift.String?
    /// <p>The name of the rule set to create. The name must:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
    ///                     underscores (_), or dashes (-).</p>
    ///             </li>
    ///             <li>
    ///                 <p>Start and end with a letter or number.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Contain less than 64 characters.</p>
    ///             </li>
    ///          </ul>
    public let ruleSetName: Swift.String?

    public init (
        originalRuleSetName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.originalRuleSetName = originalRuleSetName
        self.ruleSetName = ruleSetName
    }
}

extension CloneReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CloneReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExistException" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CloneReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CloneReceiptRuleSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloneReceiptRuleSetOutputResponse()"}
}

extension CloneReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct CloneReceiptRuleSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct CloneReceiptRuleSetOutputResponseBody: Swift.Equatable {
}

extension CloneReceiptRuleSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesClientTypes.CloudWatchDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionConfigurations = "DimensionConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensionConfigurations = dimensionConfigurations {
            var dimensionConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DimensionConfigurations"))
            for (index0, cloudwatchdimensionconfiguration0) in dimensionConfigurations.enumerated() {
                try dimensionConfigurationsContainer.encode(cloudwatchdimensionconfiguration0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.dimensionConfigurations) {
            struct KeyVal0{struct member{}}
            let dimensionConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensionConfigurations)
            if let dimensionConfigurationsWrappedContainer = dimensionConfigurationsWrappedContainer {
                let dimensionConfigurationsContainer = try dimensionConfigurationsWrappedContainer.decodeIfPresent([SesClientTypes.CloudWatchDimensionConfiguration].self, forKey: .member)
                var dimensionConfigurationsBuffer:[SesClientTypes.CloudWatchDimensionConfiguration]? = nil
                if let dimensionConfigurationsContainer = dimensionConfigurationsContainer {
                    dimensionConfigurationsBuffer = [SesClientTypes.CloudWatchDimensionConfiguration]()
                    for structureContainer0 in dimensionConfigurationsContainer {
                        dimensionConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                dimensionConfigurations = dimensionConfigurationsBuffer
            } else {
                dimensionConfigurations = []
            }
        } else {
            dimensionConfigurations = nil
        }
    }
}

extension SesClientTypes.CloudWatchDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudWatchDestination(dimensionConfigurations: \(Swift.String(describing: dimensionConfigurations)))"}
}

extension SesClientTypes {
    /// <p>Contains information associated with an Amazon CloudWatch event destination to which email
    ///             sending events are published.</p>
    ///         <p>Event destinations, such as Amazon CloudWatch, are associated with configuration sets, which
    ///             enable you to publish email sending events. For information about using configuration
    ///             sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public struct CloudWatchDestination: Swift.Equatable {
        /// <p>A list of dimensions upon which to categorize your emails when you publish email
        ///             sending events to Amazon CloudWatch.</p>
        public let dimensionConfigurations: [SesClientTypes.CloudWatchDimensionConfiguration]?

        public init (
            dimensionConfigurations: [SesClientTypes.CloudWatchDimensionConfiguration]? = nil
        )
        {
            self.dimensionConfigurations = dimensionConfigurations
        }
    }

}

extension SesClientTypes.CloudWatchDimensionConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultDimensionValue = "DefaultDimensionValue"
        case dimensionName = "DimensionName"
        case dimensionValueSource = "DimensionValueSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultDimensionValue = defaultDimensionValue {
            try container.encode(defaultDimensionValue, forKey: ClientRuntime.Key("DefaultDimensionValue"))
        }
        if let dimensionName = dimensionName {
            try container.encode(dimensionName, forKey: ClientRuntime.Key("DimensionName"))
        }
        if let dimensionValueSource = dimensionValueSource {
            try container.encode(dimensionValueSource, forKey: ClientRuntime.Key("DimensionValueSource"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dimensionName)
        dimensionName = dimensionNameDecoded
        let dimensionValueSourceDecoded = try containerValues.decodeIfPresent(SesClientTypes.DimensionValueSource.self, forKey: .dimensionValueSource)
        dimensionValueSource = dimensionValueSourceDecoded
        let defaultDimensionValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultDimensionValue)
        defaultDimensionValue = defaultDimensionValueDecoded
    }
}

extension SesClientTypes.CloudWatchDimensionConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudWatchDimensionConfiguration(defaultDimensionValue: \(Swift.String(describing: defaultDimensionValue)), dimensionName: \(Swift.String(describing: dimensionName)), dimensionValueSource: \(Swift.String(describing: dimensionValueSource)))"}
}

extension SesClientTypes {
    /// <p>Contains the dimension configuration to use when you publish email sending events to
    ///             Amazon CloudWatch.</p>
    ///         <p>For information about publishing email sending events to Amazon CloudWatch, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
    public struct CloudWatchDimensionConfiguration: Swift.Equatable {
        /// <p>The default value of the dimension that is published to Amazon CloudWatch if you do not provide
        ///             the value of the dimension when you send an email. The default value must:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
        ///                     underscores (_), or dashes (-).</p>
        ///             </li>
        ///             <li>
        ///                 <p>Contain less than 256 characters.</p>
        ///             </li>
        ///          </ul>
        public let defaultDimensionValue: Swift.String?
        /// <p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name
        ///             must:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
        ///                     underscores (_), or dashes (-).</p>
        ///             </li>
        ///             <li>
        ///                 <p>Contain less than 256 characters.</p>
        ///             </li>
        ///          </ul>
        public let dimensionName: Swift.String?
        /// <p>The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. If you
        ///             want Amazon SES to use the message tags that you specify using an
        ///                 <code>X-SES-MESSAGE-TAGS</code> header or a parameter to the
        ///                 <code>SendEmail</code>/<code>SendRawEmail</code> API, choose
        ///             <code>messageTag</code>. If you want Amazon SES to use your own email headers, choose
        ///                 <code>emailHeader</code>.</p>
        public let dimensionValueSource: SesClientTypes.DimensionValueSource?

        public init (
            defaultDimensionValue: Swift.String? = nil,
            dimensionName: Swift.String? = nil,
            dimensionValueSource: SesClientTypes.DimensionValueSource? = nil
        )
        {
            self.defaultDimensionValue = defaultDimensionValue
            self.dimensionName = dimensionName
            self.dimensionValueSource = dimensionValueSource
        }
    }

}

extension SesClientTypes.ConfigurationSet: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension SesClientTypes.ConfigurationSet: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigurationSet(name: \(Swift.String(describing: name)))"}
}

extension SesClientTypes {
    /// <p>The name of the configuration set.</p>
    ///         <p>Configuration sets let you create groups of rules that you can apply to the emails you
    ///             send using Amazon SES. For more information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
    public struct ConfigurationSet: Swift.Equatable {
        /// <p>The name of the configuration set. The name must meet the following
        ///             requirements:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes
        ///                     (-).</p>
        ///             </li>
        ///             <li>
        ///                 <p>Contain 64 characters or fewer.</p>
        ///             </li>
        ///          </ul>
        public let name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension ConfigurationSetAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigurationSetAlreadyExistsException(configurationSetName: \(Swift.String(describing: configurationSetName)), message: \(Swift.String(describing: message)))"}
}

extension ConfigurationSetAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ConfigurationSetAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the configuration set could not be created because of a naming
///             conflict.</p>
public struct ConfigurationSetAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that the configuration set does not exist.</p>
    public var configurationSetName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.message = message
    }
}

struct ConfigurationSetAlreadyExistsExceptionBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let message: Swift.String?
}

extension ConfigurationSetAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes {
    public enum ConfigurationSetAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deliveryOptions
        case eventDestinations
        case reputationOptions
        case trackingOptions
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigurationSetAttribute] {
            return [
                .deliveryOptions,
                .eventDestinations,
                .reputationOptions,
                .trackingOptions,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deliveryOptions: return "deliveryOptions"
            case .eventDestinations: return "eventDestinations"
            case .reputationOptions: return "reputationOptions"
            case .trackingOptions: return "trackingOptions"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfigurationSetAttribute(rawValue: rawValue) ?? ConfigurationSetAttribute.sdkUnknown(rawValue)
        }
    }
}

extension ConfigurationSetDoesNotExistException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigurationSetDoesNotExistException(configurationSetName: \(Swift.String(describing: configurationSetName)), message: \(Swift.String(describing: message)))"}
}

extension ConfigurationSetDoesNotExistException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ConfigurationSetDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the configuration set does not exist.</p>
public struct ConfigurationSetDoesNotExistException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that the configuration set does not exist.</p>
    public var configurationSetName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.message = message
    }
}

struct ConfigurationSetDoesNotExistExceptionBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let message: Swift.String?
}

extension ConfigurationSetDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfigurationSetSendingPausedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigurationSetSendingPausedException(configurationSetName: \(Swift.String(describing: configurationSetName)), message: \(Swift.String(describing: message)))"}
}

extension ConfigurationSetSendingPausedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ConfigurationSetSendingPausedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that email sending is disabled for the configuration set.</p>
///         <p>You can enable or disable email sending for a configuration set using <a>UpdateConfigurationSetSendingEnabled</a>.</p>
public struct ConfigurationSetSendingPausedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The name of the configuration set for which email sending is disabled.</p>
    public var configurationSetName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.message = message
    }
}

struct ConfigurationSetSendingPausedExceptionBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let message: Swift.String?
}

extension ConfigurationSetSendingPausedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes.Content: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case charset = "Charset"
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let charset = charset {
            try container.encode(charset, forKey: ClientRuntime.Key("Charset"))
        }
        if let data = data {
            try container.encode(data, forKey: ClientRuntime.Key("Data"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
        let charsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .charset)
        charset = charsetDecoded
    }
}

extension SesClientTypes.Content: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Content(charset: \(Swift.String(describing: charset)), data: \(Swift.String(describing: data)))"}
}

extension SesClientTypes {
    /// <p>Represents textual data, plus an optional character set specification.</p>
    ///         <p>By default, the text must be 7-bit ASCII, due to the constraints of the SMTP protocol.
    ///             If the text must contain any other characters, then you must also specify a character
    ///             set. Examples include UTF-8, ISO-8859-1, and Shift_JIS.</p>
    public struct Content: Swift.Equatable {
        /// <p>The character set of the content.</p>
        public let charset: Swift.String?
        /// <p>The textual data of the content.</p>
        public let data: Swift.String?

        public init (
            charset: Swift.String? = nil,
            data: Swift.String? = nil
        )
        {
            self.charset = charset
            self.data = data
        }
    }

}

public struct CreateConfigurationSetEventDestinationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetEventDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetEventDestinationOutputError>
}

extension CreateConfigurationSetEventDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConfigurationSetEventDestinationInput(configurationSetName: \(Swift.String(describing: configurationSetName)), eventDestination: \(Swift.String(describing: eventDestination)))"}
}

extension CreateConfigurationSetEventDestinationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let eventDestination = eventDestination {
            try container.encode(eventDestination, forKey: ClientRuntime.Key("EventDestination"))
        }
        try container.encode("CreateConfigurationSetEventDestination", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateConfigurationSetEventDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetEventDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetEventDestinationOutputError>
}

public struct CreateConfigurationSetEventDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetEventDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetEventDestinationOutputError>
}

/// <p>Represents a request to create a configuration set event destination. A configuration
///             set event destination, which can be either Amazon CloudWatch or Amazon Kinesis Firehose, describes an AWS service
///             in which Amazon SES publishes the email sending events associated with a configuration set.
///             For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct CreateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// <p>The name of the configuration set that the event destination should be associated
    ///             with.</p>
    public let configurationSetName: Swift.String?
    /// <p>An object that describes the AWS service that email sending event information will
    ///             be published to.</p>
    public let eventDestination: SesClientTypes.EventDestination?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestination: SesClientTypes.EventDestination? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
    }
}

extension CreateConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EventDestinationAlreadyExistsException" : self = .eventDestinationAlreadyExistsException(try EventDestinationAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCloudWatchDestinationException" : self = .invalidCloudWatchDestinationException(try InvalidCloudWatchDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFirehoseDestinationException" : self = .invalidFirehoseDestinationException(try InvalidFirehoseDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSNSDestinationException" : self = .invalidSNSDestinationException(try InvalidSNSDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case eventDestinationAlreadyExistsException(EventDestinationAlreadyExistsException)
    case invalidCloudWatchDestinationException(InvalidCloudWatchDestinationException)
    case invalidFirehoseDestinationException(InvalidFirehoseDestinationException)
    case invalidSNSDestinationException(InvalidSNSDestinationException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetEventDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConfigurationSetEventDestinationOutputResponse()"}
}

extension CreateConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct CreateConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateConfigurationSetEventDestinationOutputResponseBody: Swift.Equatable {
}

extension CreateConfigurationSetEventDestinationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateConfigurationSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetOutputError>
}

extension CreateConfigurationSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConfigurationSetInput(configurationSet: \(Swift.String(describing: configurationSet)))"}
}

extension CreateConfigurationSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSet = configurationSet {
            try container.encode(configurationSet, forKey: ClientRuntime.Key("ConfigurationSet"))
        }
        try container.encode("CreateConfigurationSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateConfigurationSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetOutputError>
}

public struct CreateConfigurationSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetOutputError>
}

/// <p>Represents a request to create a configuration set. Configuration sets enable you to
///             publish email sending events. For information about using configuration sets, see the
///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct CreateConfigurationSetInput: Swift.Equatable {
    /// <p>A data structure that contains the name of the configuration set.</p>
    public let configurationSet: SesClientTypes.ConfigurationSet?

    public init (
        configurationSet: SesClientTypes.ConfigurationSet? = nil
    )
    {
        self.configurationSet = configurationSet
    }
}

extension CreateConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetAlreadyExistsException" : self = .configurationSetAlreadyExistsException(try ConfigurationSetAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidConfigurationSetException" : self = .invalidConfigurationSetException(try InvalidConfigurationSetException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case configurationSetAlreadyExistsException(ConfigurationSetAlreadyExistsException)
    case invalidConfigurationSetException(InvalidConfigurationSetException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConfigurationSetOutputResponse()"}
}

extension CreateConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct CreateConfigurationSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateConfigurationSetOutputResponseBody: Swift.Equatable {
}

extension CreateConfigurationSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateConfigurationSetTrackingOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetTrackingOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetTrackingOptionsOutputError>
}

extension CreateConfigurationSetTrackingOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConfigurationSetTrackingOptionsInput(configurationSetName: \(Swift.String(describing: configurationSetName)), trackingOptions: \(Swift.String(describing: trackingOptions)))"}
}

extension CreateConfigurationSetTrackingOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let trackingOptions = trackingOptions {
            try container.encode(trackingOptions, forKey: ClientRuntime.Key("TrackingOptions"))
        }
        try container.encode("CreateConfigurationSetTrackingOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateConfigurationSetTrackingOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetTrackingOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetTrackingOptionsOutputError>
}

public struct CreateConfigurationSetTrackingOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetTrackingOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetTrackingOptionsOutputError>
}

/// <p>Represents a request to create an open and click tracking option object in a
///             configuration set. </p>
public struct CreateConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// <p>The name of the configuration set that the tracking options should be associated
    ///             with.</p>
    public let configurationSetName: Swift.String?
    /// <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This
    ///             domain captures open and click events generated by Amazon SES emails.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring
    ///                 Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES
    ///                 Developer Guide</i>.</p>
    public let trackingOptions: SesClientTypes.TrackingOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        trackingOptions: SesClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.trackingOptions = trackingOptions
    }
}

extension CreateConfigurationSetTrackingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateConfigurationSetTrackingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrackingOptionsException" : self = .invalidTrackingOptionsException(try InvalidTrackingOptionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TrackingOptionsAlreadyExistsException" : self = .trackingOptionsAlreadyExistsException(try TrackingOptionsAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateConfigurationSetTrackingOptionsOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case invalidTrackingOptionsException(InvalidTrackingOptionsException)
    case trackingOptionsAlreadyExistsException(TrackingOptionsAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetTrackingOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConfigurationSetTrackingOptionsOutputResponse()"}
}

extension CreateConfigurationSetTrackingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct CreateConfigurationSetTrackingOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateConfigurationSetTrackingOptionsOutputResponseBody: Swift.Equatable {
}

extension CreateConfigurationSetTrackingOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateCustomVerificationEmailTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCustomVerificationEmailTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCustomVerificationEmailTemplateOutputError>
}

extension CreateCustomVerificationEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCustomVerificationEmailTemplateInput(failureRedirectionURL: \(Swift.String(describing: failureRedirectionURL)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), successRedirectionURL: \(Swift.String(describing: successRedirectionURL)), templateContent: \(Swift.String(describing: templateContent)), templateName: \(Swift.String(describing: templateName)), templateSubject: \(Swift.String(describing: templateSubject)))"}
}

extension CreateCustomVerificationEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try container.encode(failureRedirectionURL, forKey: ClientRuntime.Key("FailureRedirectionURL"))
        }
        if let fromEmailAddress = fromEmailAddress {
            try container.encode(fromEmailAddress, forKey: ClientRuntime.Key("FromEmailAddress"))
        }
        if let successRedirectionURL = successRedirectionURL {
            try container.encode(successRedirectionURL, forKey: ClientRuntime.Key("SuccessRedirectionURL"))
        }
        if let templateContent = templateContent {
            try container.encode(templateContent, forKey: ClientRuntime.Key("TemplateContent"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let templateSubject = templateSubject {
            try container.encode(templateSubject, forKey: ClientRuntime.Key("TemplateSubject"))
        }
        try container.encode("CreateCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateCustomVerificationEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCustomVerificationEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCustomVerificationEmailTemplateOutputError>
}

public struct CreateCustomVerificationEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCustomVerificationEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCustomVerificationEmailTemplateOutputError>
}

/// <p>Represents a request to create a custom verification email template.</p>
public struct CreateCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// <p>The URL that the recipient of the verification email is sent to if his or her address
    ///             is not successfully verified.</p>
    public let failureRedirectionURL: Swift.String?
    /// <p>The email address that the custom verification email is sent from.</p>
    public let fromEmailAddress: Swift.String?
    /// <p>The URL that the recipient of the verification email is sent to if his or her address
    ///             is successfully verified.</p>
    public let successRedirectionURL: Swift.String?
    /// <p>The content of the custom verification email. The total size of the email must be less
    ///             than 10 MB. The message body may contain HTML, with some limitations. For more
    ///             information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES
    ///                 Developer Guide</i>.</p>
    public let templateContent: Swift.String?
    /// <p>The name of the custom verification email template.</p>
    public let templateName: Swift.String?
    /// <p>The subject line of the custom verification email.</p>
    public let templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

extension CreateCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CustomVerificationEmailInvalidContentException" : self = .customVerificationEmailInvalidContentException(try CustomVerificationEmailInvalidContentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomVerificationEmailTemplateAlreadyExistsException" : self = .customVerificationEmailTemplateAlreadyExistsException(try CustomVerificationEmailTemplateAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FromEmailAddressNotVerifiedException" : self = .fromEmailAddressNotVerifiedException(try FromEmailAddressNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case customVerificationEmailInvalidContentException(CustomVerificationEmailInvalidContentException)
    case customVerificationEmailTemplateAlreadyExistsException(CustomVerificationEmailTemplateAlreadyExistsException)
    case fromEmailAddressNotVerifiedException(FromEmailAddressNotVerifiedException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCustomVerificationEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCustomVerificationEmailTemplateOutputResponse()"}
}

extension CreateCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateCustomVerificationEmailTemplateOutputResponseBody: Swift.Equatable {
}

extension CreateCustomVerificationEmailTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateReceiptFilterInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReceiptFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReceiptFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReceiptFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReceiptFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReceiptFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReceiptFilterOutputError>
}

extension CreateReceiptFilterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateReceiptFilterInput(filter: \(Swift.String(describing: filter)))"}
}

extension CreateReceiptFilterInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        try container.encode("CreateReceiptFilter", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateReceiptFilterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReceiptFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReceiptFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReceiptFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReceiptFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReceiptFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReceiptFilterOutputError>
}

public struct CreateReceiptFilterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReceiptFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReceiptFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReceiptFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReceiptFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReceiptFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReceiptFilterOutputError>
}

/// <p>Represents a request to create a new IP address filter. You use IP address filters
///             when you receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
public struct CreateReceiptFilterInput: Swift.Equatable {
    /// <p>A data structure that describes the IP address filter to create, which consists of a
    ///             name, an IP address range, and whether to allow or block mail from it.</p>
    public let filter: SesClientTypes.ReceiptFilter?

    public init (
        filter: SesClientTypes.ReceiptFilter? = nil
    )
    {
        self.filter = filter
    }
}

extension CreateReceiptFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateReceiptFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateReceiptFilterOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateReceiptFilterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateReceiptFilterOutputResponse()"}
}

extension CreateReceiptFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct CreateReceiptFilterOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateReceiptFilterOutputResponseBody: Swift.Equatable {
}

extension CreateReceiptFilterOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateReceiptRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReceiptRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReceiptRuleOutputError>
}

extension CreateReceiptRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateReceiptRuleInput(after: \(Swift.String(describing: after)), rule: \(Swift.String(describing: rule)), ruleSetName: \(Swift.String(describing: ruleSetName)))"}
}

extension CreateReceiptRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let after = after {
            try container.encode(after, forKey: ClientRuntime.Key("After"))
        }
        if let rule = rule {
            try container.encode(rule, forKey: ClientRuntime.Key("Rule"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("CreateReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateReceiptRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReceiptRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReceiptRuleOutputError>
}

public struct CreateReceiptRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReceiptRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReceiptRuleOutputError>
}

/// <p>Represents a request to create a receipt rule. You use receipt rules to receive email
///             with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct CreateReceiptRuleInput: Swift.Equatable {
    /// <p>The name of an existing rule after which the new rule will be placed. If this
    ///             parameter is null, the new rule will be inserted at the beginning of the rule
    ///             list.</p>
    public let after: Swift.String?
    /// <p>A data structure that contains the specified rule's name, actions, recipients,
    ///             domains, enabled status, scan status, and TLS policy.</p>
    public let rule: SesClientTypes.ReceiptRule?
    /// <p>The name of the rule set that the receipt rule will be added to.</p>
    public let ruleSetName: Swift.String?

    public init (
        after: Swift.String? = nil,
        rule: SesClientTypes.ReceiptRule? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.after = after
        self.rule = rule
        self.ruleSetName = ruleSetName
    }
}

extension CreateReceiptRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateReceiptRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaFunctionException" : self = .invalidLambdaFunctionException(try InvalidLambdaFunctionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ConfigurationException" : self = .invalidS3ConfigurationException(try InvalidS3ConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSnsTopicException" : self = .invalidSnsTopicException(try InvalidSnsTopicException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleDoesNotExistException" : self = .ruleDoesNotExistException(try RuleDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExistException" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateReceiptRuleOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case invalidLambdaFunctionException(InvalidLambdaFunctionException)
    case invalidS3ConfigurationException(InvalidS3ConfigurationException)
    case invalidSnsTopicException(InvalidSnsTopicException)
    case limitExceededException(LimitExceededException)
    case ruleDoesNotExistException(RuleDoesNotExistException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateReceiptRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateReceiptRuleOutputResponse()"}
}

extension CreateReceiptRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct CreateReceiptRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateReceiptRuleOutputResponseBody: Swift.Equatable {
}

extension CreateReceiptRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateReceiptRuleSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReceiptRuleSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReceiptRuleSetOutputError>
}

extension CreateReceiptRuleSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateReceiptRuleSetInput(ruleSetName: \(Swift.String(describing: ruleSetName)))"}
}

extension CreateReceiptRuleSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("CreateReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateReceiptRuleSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReceiptRuleSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReceiptRuleSetOutputError>
}

public struct CreateReceiptRuleSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReceiptRuleSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReceiptRuleSetOutputError>
}

/// <p>Represents a request to create an empty receipt rule set. You use receipt rule sets to
///             receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct CreateReceiptRuleSetInput: Swift.Equatable {
    /// <p>The name of the rule set to create. The name must:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
    ///                     underscores (_), or dashes (-).</p>
    ///             </li>
    ///             <li>
    ///                 <p>Start and end with a letter or number.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Contain less than 64 characters.</p>
    ///             </li>
    ///          </ul>
    public let ruleSetName: Swift.String?

    public init (
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

extension CreateReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateReceiptRuleSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateReceiptRuleSetOutputResponse()"}
}

extension CreateReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct CreateReceiptRuleSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateReceiptRuleSetOutputResponseBody: Swift.Equatable {
}

extension CreateReceiptRuleSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTemplateOutputError>
}

extension CreateTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTemplateInput(template: \(Swift.String(describing: template)))"}
}

extension CreateTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        try container.encode("CreateTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTemplateOutputError>
}

public struct CreateTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTemplateOutputError>
}

/// <p>Represents a request to create an email template. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct CreateTemplateInput: Swift.Equatable {
    /// <p>The content of the email, composed of a subject line, an HTML part, and a text-only
    ///             part.</p>
    public let template: SesClientTypes.Template?

    public init (
        template: SesClientTypes.Template? = nil
    )
    {
        self.template = template
    }
}

extension CreateTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTemplateException" : self = .invalidTemplateException(try InvalidTemplateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTemplateOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case invalidTemplateException(InvalidTemplateException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTemplateOutputResponse()"}
}

extension CreateTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateTemplateOutputResponseBody: Swift.Equatable {
}

extension CreateTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesClientTypes {
    public enum CustomMailFromStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case success
        case temporaryfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomMailFromStatus] {
            return [
                .failed,
                .pending,
                .success,
                .temporaryfailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .pending: return "Pending"
            case .success: return "Success"
            case .temporaryfailure: return "TemporaryFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CustomMailFromStatus(rawValue: rawValue) ?? CustomMailFromStatus.sdkUnknown(rawValue)
        }
    }
}

extension CustomVerificationEmailInvalidContentException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomVerificationEmailInvalidContentException(message: \(Swift.String(describing: message)))"}
}

extension CustomVerificationEmailInvalidContentException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<CustomVerificationEmailInvalidContentExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that custom verification email template provided content is invalid.</p>
public struct CustomVerificationEmailInvalidContentException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CustomVerificationEmailInvalidContentExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension CustomVerificationEmailInvalidContentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes.CustomVerificationEmailTemplate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try container.encode(failureRedirectionURL, forKey: ClientRuntime.Key("FailureRedirectionURL"))
        }
        if let fromEmailAddress = fromEmailAddress {
            try container.encode(fromEmailAddress, forKey: ClientRuntime.Key("FromEmailAddress"))
        }
        if let successRedirectionURL = successRedirectionURL {
            try container.encode(successRedirectionURL, forKey: ClientRuntime.Key("SuccessRedirectionURL"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let templateSubject = templateSubject {
            try container.encode(templateSubject, forKey: ClientRuntime.Key("TemplateSubject"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension SesClientTypes.CustomVerificationEmailTemplate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomVerificationEmailTemplate(failureRedirectionURL: \(Swift.String(describing: failureRedirectionURL)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), successRedirectionURL: \(Swift.String(describing: successRedirectionURL)), templateName: \(Swift.String(describing: templateName)), templateSubject: \(Swift.String(describing: templateSubject)))"}
}

extension SesClientTypes {
    /// <p>Contains information about a custom verification email template.</p>
    public struct CustomVerificationEmailTemplate: Swift.Equatable {
        /// <p>The URL that the recipient of the verification email is sent to if his or her address
        ///             is not successfully verified.</p>
        public let failureRedirectionURL: Swift.String?
        /// <p>The email address that the custom verification email is sent from.</p>
        public let fromEmailAddress: Swift.String?
        /// <p>The URL that the recipient of the verification email is sent to if his or her address
        ///             is successfully verified.</p>
        public let successRedirectionURL: Swift.String?
        /// <p>The name of the custom verification email template.</p>
        public let templateName: Swift.String?
        /// <p>The subject line of the custom verification email.</p>
        public let templateSubject: Swift.String?

        public init (
            failureRedirectionURL: Swift.String? = nil,
            fromEmailAddress: Swift.String? = nil,
            successRedirectionURL: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateSubject: Swift.String? = nil
        )
        {
            self.failureRedirectionURL = failureRedirectionURL
            self.fromEmailAddress = fromEmailAddress
            self.successRedirectionURL = successRedirectionURL
            self.templateName = templateName
            self.templateSubject = templateSubject
        }
    }

}

extension CustomVerificationEmailTemplateAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomVerificationEmailTemplateAlreadyExistsException(customVerificationEmailTemplateName: \(Swift.String(describing: customVerificationEmailTemplateName)), message: \(Swift.String(describing: message)))"}
}

extension CustomVerificationEmailTemplateAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<CustomVerificationEmailTemplateAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.customVerificationEmailTemplateName = output.error.customVerificationEmailTemplateName
            self.message = output.error.message
        } else {
            self.customVerificationEmailTemplateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that a custom verification email template with the name you specified
///             already exists.</p>
public struct CustomVerificationEmailTemplateAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that the provided custom verification email template with the specified
    ///             template name already exists.</p>
    public var customVerificationEmailTemplateName: Swift.String?
    public var message: Swift.String?

    public init (
        customVerificationEmailTemplateName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.customVerificationEmailTemplateName = customVerificationEmailTemplateName
        self.message = message
    }
}

struct CustomVerificationEmailTemplateAlreadyExistsExceptionBody: Swift.Equatable {
    public let customVerificationEmailTemplateName: Swift.String?
    public let message: Swift.String?
}

extension CustomVerificationEmailTemplateAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customVerificationEmailTemplateName = "CustomVerificationEmailTemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customVerificationEmailTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customVerificationEmailTemplateName)
        customVerificationEmailTemplateName = customVerificationEmailTemplateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CustomVerificationEmailTemplateDoesNotExistException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomVerificationEmailTemplateDoesNotExistException(customVerificationEmailTemplateName: \(Swift.String(describing: customVerificationEmailTemplateName)), message: \(Swift.String(describing: message)))"}
}

extension CustomVerificationEmailTemplateDoesNotExistException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<CustomVerificationEmailTemplateDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.customVerificationEmailTemplateName = output.error.customVerificationEmailTemplateName
            self.message = output.error.message
        } else {
            self.customVerificationEmailTemplateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that a custom verification email template with the name you specified does
///             not exist.</p>
public struct CustomVerificationEmailTemplateDoesNotExistException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that the provided custom verification email template does not exist.</p>
    public var customVerificationEmailTemplateName: Swift.String?
    public var message: Swift.String?

    public init (
        customVerificationEmailTemplateName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.customVerificationEmailTemplateName = customVerificationEmailTemplateName
        self.message = message
    }
}

struct CustomVerificationEmailTemplateDoesNotExistExceptionBody: Swift.Equatable {
    public let customVerificationEmailTemplateName: Swift.String?
    public let message: Swift.String?
}

extension CustomVerificationEmailTemplateDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customVerificationEmailTemplateName = "CustomVerificationEmailTemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customVerificationEmailTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customVerificationEmailTemplateName)
        customVerificationEmailTemplateName = customVerificationEmailTemplateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct DeleteConfigurationSetEventDestinationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetEventDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetEventDestinationOutputError>
}

extension DeleteConfigurationSetEventDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationSetEventDestinationInput(configurationSetName: \(Swift.String(describing: configurationSetName)), eventDestinationName: \(Swift.String(describing: eventDestinationName)))"}
}

extension DeleteConfigurationSetEventDestinationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let eventDestinationName = eventDestinationName {
            try container.encode(eventDestinationName, forKey: ClientRuntime.Key("EventDestinationName"))
        }
        try container.encode("DeleteConfigurationSetEventDestination", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteConfigurationSetEventDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetEventDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetEventDestinationOutputError>
}

public struct DeleteConfigurationSetEventDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetEventDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetEventDestinationOutputError>
}

/// <p>Represents a request to delete a configuration set event destination. Configuration
///             set event destinations are associated with configuration sets, which enable you to
///             publish email sending events. For information about using configuration sets, see the
///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct DeleteConfigurationSetEventDestinationInput: Swift.Equatable {
    /// <p>The name of the configuration set from which to delete the event destination.</p>
    public let configurationSetName: Swift.String?
    /// <p>The name of the event destination to delete.</p>
    public let eventDestinationName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
    }
}

extension DeleteConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EventDestinationDoesNotExistException" : self = .eventDestinationDoesNotExistException(try EventDestinationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case eventDestinationDoesNotExistException(EventDestinationDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetEventDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationSetEventDestinationOutputResponse()"}
}

extension DeleteConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct DeleteConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteConfigurationSetEventDestinationOutputResponseBody: Swift.Equatable {
}

extension DeleteConfigurationSetEventDestinationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteConfigurationSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetOutputError>
}

extension DeleteConfigurationSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationSetInput(configurationSetName: \(Swift.String(describing: configurationSetName)))"}
}

extension DeleteConfigurationSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        try container.encode("DeleteConfigurationSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteConfigurationSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetOutputError>
}

public struct DeleteConfigurationSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetOutputError>
}

/// <p>Represents a request to delete a configuration set. Configuration sets enable you to
///             publish email sending events. For information about using configuration sets, see the
///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct DeleteConfigurationSetInput: Swift.Equatable {
    /// <p>The name of the configuration set to delete.</p>
    public let configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

extension DeleteConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationSetOutputResponse()"}
}

extension DeleteConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct DeleteConfigurationSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteConfigurationSetOutputResponseBody: Swift.Equatable {
}

extension DeleteConfigurationSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteConfigurationSetTrackingOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetTrackingOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetTrackingOptionsOutputError>
}

extension DeleteConfigurationSetTrackingOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationSetTrackingOptionsInput(configurationSetName: \(Swift.String(describing: configurationSetName)))"}
}

extension DeleteConfigurationSetTrackingOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        try container.encode("DeleteConfigurationSetTrackingOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteConfigurationSetTrackingOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetTrackingOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetTrackingOptionsOutputError>
}

public struct DeleteConfigurationSetTrackingOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetTrackingOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetTrackingOptionsOutputError>
}

/// <p>Represents a request to delete open and click tracking options in a configuration set.
///         </p>
public struct DeleteConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// <p>The name of the configuration set from which you want to delete the tracking
    ///             options.</p>
    public let configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

extension DeleteConfigurationSetTrackingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteConfigurationSetTrackingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TrackingOptionsDoesNotExistException" : self = .trackingOptionsDoesNotExistException(try TrackingOptionsDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConfigurationSetTrackingOptionsOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case trackingOptionsDoesNotExistException(TrackingOptionsDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetTrackingOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationSetTrackingOptionsOutputResponse()"}
}

extension DeleteConfigurationSetTrackingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct DeleteConfigurationSetTrackingOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteConfigurationSetTrackingOptionsOutputResponseBody: Swift.Equatable {
}

extension DeleteConfigurationSetTrackingOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteCustomVerificationEmailTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCustomVerificationEmailTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCustomVerificationEmailTemplateOutputError>
}

extension DeleteCustomVerificationEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCustomVerificationEmailTemplateInput(templateName: \(Swift.String(describing: templateName)))"}
}

extension DeleteCustomVerificationEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("DeleteCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteCustomVerificationEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCustomVerificationEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCustomVerificationEmailTemplateOutputError>
}

public struct DeleteCustomVerificationEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCustomVerificationEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCustomVerificationEmailTemplateOutputError>
}

/// <p>Represents a request to delete an existing custom verification email template.</p>
public struct DeleteCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// <p>The name of the custom verification email template that you want to delete.</p>
    public let templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

extension DeleteCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCustomVerificationEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCustomVerificationEmailTemplateOutputResponse()"}
}

extension DeleteCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteCustomVerificationEmailTemplateOutputResponseBody: Swift.Equatable {
}

extension DeleteCustomVerificationEmailTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteIdentityInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIdentityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIdentityOutputError>
}

extension DeleteIdentityInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIdentityInput(identity: \(Swift.String(describing: identity)))"}
}

extension DeleteIdentityInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("DeleteIdentity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteIdentityInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIdentityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIdentityOutputError>
}

public struct DeleteIdentityInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIdentityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIdentityOutputError>
}

/// <p>Represents a request to delete one of your Amazon SES identities (an email address or
///             domain).</p>
public struct DeleteIdentityInput: Swift.Equatable {
    /// <p>The identity to be removed from the list of identities for the AWS Account.</p>
    public let identity: Swift.String?

    public init (
        identity: Swift.String? = nil
    )
    {
        self.identity = identity
    }
}

extension DeleteIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteIdentityOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIdentityOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIdentityOutputResponse()"}
}

extension DeleteIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct DeleteIdentityOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteIdentityOutputResponseBody: Swift.Equatable {
}

extension DeleteIdentityOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteIdentityPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIdentityPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIdentityPolicyOutputError>
}

extension DeleteIdentityPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIdentityPolicyInput(identity: \(Swift.String(describing: identity)), policyName: \(Swift.String(describing: policyName)))"}
}

extension DeleteIdentityPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("DeleteIdentityPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteIdentityPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIdentityPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIdentityPolicyOutputError>
}

public struct DeleteIdentityPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIdentityPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIdentityPolicyOutputError>
}

/// <p>Represents a request to delete a sending authorization policy for an identity. Sending
///             authorization is an Amazon SES feature that enables you to authorize other senders to use
///             your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct DeleteIdentityPolicyInput: Swift.Equatable {
    /// <p>The identity that is associated with the policy that you want to delete. You can
    ///             specify the identity by using its name or by using its Amazon Resource Name (ARN).
    ///             Examples: <code>user@example.com</code>, <code>example.com</code>,
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
    ///         <p>To successfully call this API, you must own the identity.</p>
    public let identity: Swift.String?
    /// <p>The name of the policy to be deleted.</p>
    public let policyName: Swift.String?

    public init (
        identity: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.identity = identity
        self.policyName = policyName
    }
}

extension DeleteIdentityPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteIdentityPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteIdentityPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIdentityPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIdentityPolicyOutputResponse()"}
}

extension DeleteIdentityPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct DeleteIdentityPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteIdentityPolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteIdentityPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteReceiptFilterInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReceiptFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReceiptFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReceiptFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReceiptFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReceiptFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReceiptFilterOutputError>
}

extension DeleteReceiptFilterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReceiptFilterInput(filterName: \(Swift.String(describing: filterName)))"}
}

extension DeleteReceiptFilterInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filterName = filterName {
            try container.encode(filterName, forKey: ClientRuntime.Key("FilterName"))
        }
        try container.encode("DeleteReceiptFilter", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteReceiptFilterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReceiptFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReceiptFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReceiptFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReceiptFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReceiptFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReceiptFilterOutputError>
}

public struct DeleteReceiptFilterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReceiptFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReceiptFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReceiptFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReceiptFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReceiptFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReceiptFilterOutputError>
}

/// <p>Represents a request to delete an IP address filter. You use IP address filters when
///             you receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct DeleteReceiptFilterInput: Swift.Equatable {
    /// <p>The name of the IP address filter to delete.</p>
    public let filterName: Swift.String?

    public init (
        filterName: Swift.String? = nil
    )
    {
        self.filterName = filterName
    }
}

extension DeleteReceiptFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteReceiptFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteReceiptFilterOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReceiptFilterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReceiptFilterOutputResponse()"}
}

extension DeleteReceiptFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct DeleteReceiptFilterOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteReceiptFilterOutputResponseBody: Swift.Equatable {
}

extension DeleteReceiptFilterOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteReceiptRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReceiptRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReceiptRuleOutputError>
}

extension DeleteReceiptRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReceiptRuleInput(ruleName: \(Swift.String(describing: ruleName)), ruleSetName: \(Swift.String(describing: ruleSetName)))"}
}

extension DeleteReceiptRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DeleteReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteReceiptRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReceiptRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReceiptRuleOutputError>
}

public struct DeleteReceiptRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReceiptRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReceiptRuleOutputError>
}

/// <p>Represents a request to delete a receipt rule. You use receipt rules to receive email
///             with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct DeleteReceiptRuleInput: Swift.Equatable {
    /// <p>The name of the receipt rule to delete.</p>
    public let ruleName: Swift.String?
    /// <p>The name of the receipt rule set that contains the receipt rule to delete.</p>
    public let ruleSetName: Swift.String?

    public init (
        ruleName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleName = ruleName
        self.ruleSetName = ruleSetName
    }
}

extension DeleteReceiptRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteReceiptRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleSetDoesNotExistException" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteReceiptRuleOutputError: Swift.Error, Swift.Equatable {
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReceiptRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReceiptRuleOutputResponse()"}
}

extension DeleteReceiptRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct DeleteReceiptRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteReceiptRuleOutputResponseBody: Swift.Equatable {
}

extension DeleteReceiptRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteReceiptRuleSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReceiptRuleSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReceiptRuleSetOutputError>
}

extension DeleteReceiptRuleSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReceiptRuleSetInput(ruleSetName: \(Swift.String(describing: ruleSetName)))"}
}

extension DeleteReceiptRuleSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DeleteReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteReceiptRuleSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReceiptRuleSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReceiptRuleSetOutputError>
}

public struct DeleteReceiptRuleSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReceiptRuleSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReceiptRuleSetOutputError>
}

/// <p>Represents a request to delete a receipt rule set and all of the receipt rules it
///             contains. You use receipt rule sets to receive email with Amazon SES. For more information,
///             see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct DeleteReceiptRuleSetInput: Swift.Equatable {
    /// <p>The name of the receipt rule set to delete.</p>
    public let ruleSetName: Swift.String?

    public init (
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

extension DeleteReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CannotDeleteException" : self = .cannotDeleteException(try CannotDeleteException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case cannotDeleteException(CannotDeleteException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReceiptRuleSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReceiptRuleSetOutputResponse()"}
}

extension DeleteReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct DeleteReceiptRuleSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteReceiptRuleSetOutputResponseBody: Swift.Equatable {
}

extension DeleteReceiptRuleSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTemplateOutputError>
}

extension DeleteTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTemplateInput(templateName: \(Swift.String(describing: templateName)))"}
}

extension DeleteTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("DeleteTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTemplateOutputError>
}

public struct DeleteTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTemplateOutputError>
}

/// <p>Represents a request to delete an email template. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct DeleteTemplateInput: Swift.Equatable {
    /// <p>The name of the template to be deleted.</p>
    public let templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

extension DeleteTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTemplateOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTemplateOutputResponse()"}
}

extension DeleteTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteTemplateOutputResponseBody: Swift.Equatable {
}

extension DeleteTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteVerifiedEmailAddressInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVerifiedEmailAddressInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVerifiedEmailAddressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVerifiedEmailAddressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVerifiedEmailAddressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVerifiedEmailAddressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVerifiedEmailAddressOutputError>
}

extension DeleteVerifiedEmailAddressInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVerifiedEmailAddressInput(emailAddress: \(Swift.String(describing: emailAddress)))"}
}

extension DeleteVerifiedEmailAddressInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        try container.encode("DeleteVerifiedEmailAddress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteVerifiedEmailAddressInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVerifiedEmailAddressInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVerifiedEmailAddressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVerifiedEmailAddressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVerifiedEmailAddressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVerifiedEmailAddressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVerifiedEmailAddressOutputError>
}

public struct DeleteVerifiedEmailAddressInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVerifiedEmailAddressInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVerifiedEmailAddressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVerifiedEmailAddressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVerifiedEmailAddressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVerifiedEmailAddressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVerifiedEmailAddressOutputError>
}

/// <p>Represents a request to delete an email address from the list of email addresses you
///             have attempted to verify under your AWS account.</p>
public struct DeleteVerifiedEmailAddressInput: Swift.Equatable {
    /// <p>An email address to be removed from the list of verified addresses.</p>
    public let emailAddress: Swift.String?

    public init (
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

extension DeleteVerifiedEmailAddressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteVerifiedEmailAddressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVerifiedEmailAddressOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVerifiedEmailAddressOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVerifiedEmailAddressOutputResponse()"}
}

extension DeleteVerifiedEmailAddressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteVerifiedEmailAddressOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteVerifiedEmailAddressOutputResponseBody: Swift.Equatable {
}

extension DeleteVerifiedEmailAddressOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesClientTypes.DeliveryOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let tlsPolicy = tlsPolicy {
            try container.encode(tlsPolicy, forKey: ClientRuntime.Key("TlsPolicy"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsPolicyDecoded = try containerValues.decodeIfPresent(SesClientTypes.TlsPolicy.self, forKey: .tlsPolicy)
        tlsPolicy = tlsPolicyDecoded
    }
}

extension SesClientTypes.DeliveryOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeliveryOptions(tlsPolicy: \(Swift.String(describing: tlsPolicy)))"}
}

extension SesClientTypes {
    /// <p>Specifies whether messages that use the configuration set are required to use
    ///             Transport Layer Security (TLS).</p>
    public struct DeliveryOptions: Swift.Equatable {
        /// <p>Specifies whether messages that use the configuration set are required to use
        ///             Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only
        ///             delivered if a TLS connection can be established. If the value is <code>Optional</code>,
        ///             messages can be delivered in plain text if a TLS connection can't be established.</p>
        public let tlsPolicy: SesClientTypes.TlsPolicy?

        public init (
            tlsPolicy: SesClientTypes.TlsPolicy? = nil
        )
        {
            self.tlsPolicy = tlsPolicy
        }
    }

}

public struct DescribeActiveReceiptRuleSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeActiveReceiptRuleSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeActiveReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeActiveReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeActiveReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeActiveReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeActiveReceiptRuleSetOutputError>
}

extension DescribeActiveReceiptRuleSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeActiveReceiptRuleSetInput()"}
}

extension DescribeActiveReceiptRuleSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeActiveReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeActiveReceiptRuleSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeActiveReceiptRuleSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeActiveReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeActiveReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeActiveReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeActiveReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeActiveReceiptRuleSetOutputError>
}

public struct DescribeActiveReceiptRuleSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeActiveReceiptRuleSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeActiveReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeActiveReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeActiveReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeActiveReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeActiveReceiptRuleSetOutputError>
}

/// <p>Represents a request to return the metadata and receipt rules for the receipt rule set
///             that is currently active. You use receipt rule sets to receive email with Amazon SES. For
///             more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct DescribeActiveReceiptRuleSetInput: Swift.Equatable {

    public init() {}
}

extension DescribeActiveReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeActiveReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeActiveReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeActiveReceiptRuleSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeActiveReceiptRuleSetOutputResponse(metadata: \(Swift.String(describing: metadata)), rules: \(Swift.String(describing: rules)))"}
}

extension DescribeActiveReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeActiveReceiptRuleSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metadata = output.metadata
            self.rules = output.rules
        } else {
            self.metadata = nil
            self.rules = nil
        }
    }
}

/// <p>Represents the metadata and receipt rules for the receipt rule set that is currently
///             active.</p>
public struct DescribeActiveReceiptRuleSetOutputResponse: Swift.Equatable {
    /// <p>The metadata for the currently active receipt rule set. The metadata consists of the
    ///             rule set name and a timestamp of when the rule set was created.</p>
    public let metadata: SesClientTypes.ReceiptRuleSetMetadata?
    /// <p>The receipt rules that belong to the active rule set.</p>
    public let rules: [SesClientTypes.ReceiptRule]?

    public init (
        metadata: SesClientTypes.ReceiptRuleSetMetadata? = nil,
        rules: [SesClientTypes.ReceiptRule]? = nil
    )
    {
        self.metadata = metadata
        self.rules = rules
    }
}

struct DescribeActiveReceiptRuleSetOutputResponseBody: Swift.Equatable {
    public let metadata: SesClientTypes.ReceiptRuleSetMetadata?
    public let rules: [SesClientTypes.ReceiptRule]?
}

extension DescribeActiveReceiptRuleSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadata = "Metadata"
        case rules = "Rules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeActiveReceiptRuleSetResult"))
        let metadataDecoded = try containerValues.decodeIfPresent(SesClientTypes.ReceiptRuleSetMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        if containerValues.contains(.rules) {
            struct KeyVal0{struct member{}}
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .rules)
            if let rulesWrappedContainer = rulesWrappedContainer {
                let rulesContainer = try rulesWrappedContainer.decodeIfPresent([SesClientTypes.ReceiptRule].self, forKey: .member)
                var rulesBuffer:[SesClientTypes.ReceiptRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [SesClientTypes.ReceiptRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

public struct DescribeConfigurationSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationSetOutputError>
}

extension DescribeConfigurationSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigurationSetInput(configurationSetAttributeNames: \(Swift.String(describing: configurationSetAttributeNames)), configurationSetName: \(Swift.String(describing: configurationSetName)))"}
}

extension DescribeConfigurationSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetAttributeNames = configurationSetAttributeNames {
            var configurationSetAttributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ConfigurationSetAttributeNames"))
            for (index0, configurationsetattribute0) in configurationSetAttributeNames.enumerated() {
                try configurationSetAttributeNamesContainer.encode(configurationsetattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        try container.encode("DescribeConfigurationSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeConfigurationSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationSetOutputError>
}

public struct DescribeConfigurationSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationSetOutputError>
}

/// <p>Represents a request to return the details of a configuration set. Configuration sets
///             enable you to publish email sending events. For information about using configuration
///             sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct DescribeConfigurationSetInput: Swift.Equatable {
    /// <p>A list of configuration set attributes to return.</p>
    public let configurationSetAttributeNames: [SesClientTypes.ConfigurationSetAttribute]?
    /// <p>The name of the configuration set to describe.</p>
    public let configurationSetName: Swift.String?

    public init (
        configurationSetAttributeNames: [SesClientTypes.ConfigurationSetAttribute]? = nil,
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetAttributeNames = configurationSetAttributeNames
        self.configurationSetName = configurationSetName
    }
}

extension DescribeConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConfigurationSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigurationSetOutputResponse(configurationSet: \(Swift.String(describing: configurationSet)), deliveryOptions: \(Swift.String(describing: deliveryOptions)), eventDestinations: \(Swift.String(describing: eventDestinations)), reputationOptions: \(Swift.String(describing: reputationOptions)), trackingOptions: \(Swift.String(describing: trackingOptions)))"}
}

extension DescribeConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConfigurationSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSet = output.configurationSet
            self.deliveryOptions = output.deliveryOptions
            self.eventDestinations = output.eventDestinations
            self.reputationOptions = output.reputationOptions
            self.trackingOptions = output.trackingOptions
        } else {
            self.configurationSet = nil
            self.deliveryOptions = nil
            self.eventDestinations = nil
            self.reputationOptions = nil
            self.trackingOptions = nil
        }
    }
}

/// <p>Represents the details of a configuration set. Configuration sets enable you to
///             publish email sending events. For information about using configuration sets, see the
///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct DescribeConfigurationSetOutputResponse: Swift.Equatable {
    /// <p>The configuration set object associated with the specified configuration set.</p>
    public let configurationSet: SesClientTypes.ConfigurationSet?
    /// <p>Specifies whether messages that use the configuration set are required to use
    ///             Transport Layer Security (TLS).</p>
    public let deliveryOptions: SesClientTypes.DeliveryOptions?
    /// <p>A list of event destinations associated with the configuration set. </p>
    public let eventDestinations: [SesClientTypes.EventDestination]?
    /// <p>An object that represents the reputation settings for the configuration set. </p>
    public let reputationOptions: SesClientTypes.ReputationOptions?
    /// <p>The name of the custom open and click tracking domain associated with the
    ///             configuration set.</p>
    public let trackingOptions: SesClientTypes.TrackingOptions?

    public init (
        configurationSet: SesClientTypes.ConfigurationSet? = nil,
        deliveryOptions: SesClientTypes.DeliveryOptions? = nil,
        eventDestinations: [SesClientTypes.EventDestination]? = nil,
        reputationOptions: SesClientTypes.ReputationOptions? = nil,
        trackingOptions: SesClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSet = configurationSet
        self.deliveryOptions = deliveryOptions
        self.eventDestinations = eventDestinations
        self.reputationOptions = reputationOptions
        self.trackingOptions = trackingOptions
    }
}

struct DescribeConfigurationSetOutputResponseBody: Swift.Equatable {
    public let configurationSet: SesClientTypes.ConfigurationSet?
    public let eventDestinations: [SesClientTypes.EventDestination]?
    public let trackingOptions: SesClientTypes.TrackingOptions?
    public let deliveryOptions: SesClientTypes.DeliveryOptions?
    public let reputationOptions: SesClientTypes.ReputationOptions?
}

extension DescribeConfigurationSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSet = "ConfigurationSet"
        case deliveryOptions = "DeliveryOptions"
        case eventDestinations = "EventDestinations"
        case reputationOptions = "ReputationOptions"
        case trackingOptions = "TrackingOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeConfigurationSetResult"))
        let configurationSetDecoded = try containerValues.decodeIfPresent(SesClientTypes.ConfigurationSet.self, forKey: .configurationSet)
        configurationSet = configurationSetDecoded
        if containerValues.contains(.eventDestinations) {
            struct KeyVal0{struct member{}}
            let eventDestinationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .eventDestinations)
            if let eventDestinationsWrappedContainer = eventDestinationsWrappedContainer {
                let eventDestinationsContainer = try eventDestinationsWrappedContainer.decodeIfPresent([SesClientTypes.EventDestination].self, forKey: .member)
                var eventDestinationsBuffer:[SesClientTypes.EventDestination]? = nil
                if let eventDestinationsContainer = eventDestinationsContainer {
                    eventDestinationsBuffer = [SesClientTypes.EventDestination]()
                    for structureContainer0 in eventDestinationsContainer {
                        eventDestinationsBuffer?.append(structureContainer0)
                    }
                }
                eventDestinations = eventDestinationsBuffer
            } else {
                eventDestinations = []
            }
        } else {
            eventDestinations = nil
        }
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(SesClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(SesClientTypes.DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
        let reputationOptionsDecoded = try containerValues.decodeIfPresent(SesClientTypes.ReputationOptions.self, forKey: .reputationOptions)
        reputationOptions = reputationOptionsDecoded
    }
}

public struct DescribeReceiptRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeReceiptRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeReceiptRuleOutputError>
}

extension DescribeReceiptRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeReceiptRuleInput(ruleName: \(Swift.String(describing: ruleName)), ruleSetName: \(Swift.String(describing: ruleSetName)))"}
}

extension DescribeReceiptRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DescribeReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeReceiptRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeReceiptRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeReceiptRuleOutputError>
}

public struct DescribeReceiptRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeReceiptRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeReceiptRuleOutputError>
}

/// <p>Represents a request to return the details of a receipt rule. You use receipt rules to
///             receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct DescribeReceiptRuleInput: Swift.Equatable {
    /// <p>The name of the receipt rule.</p>
    public let ruleName: Swift.String?
    /// <p>The name of the receipt rule set that the receipt rule belongs to.</p>
    public let ruleSetName: Swift.String?

    public init (
        ruleName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleName = ruleName
        self.ruleSetName = ruleSetName
    }
}

extension DescribeReceiptRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeReceiptRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleDoesNotExistException" : self = .ruleDoesNotExistException(try RuleDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExistException" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeReceiptRuleOutputError: Swift.Error, Swift.Equatable {
    case ruleDoesNotExistException(RuleDoesNotExistException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReceiptRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeReceiptRuleOutputResponse(rule: \(Swift.String(describing: rule)))"}
}

extension DescribeReceiptRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeReceiptRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.rule = output.rule
        } else {
            self.rule = nil
        }
    }
}

/// <p>Represents the details of a receipt rule.</p>
public struct DescribeReceiptRuleOutputResponse: Swift.Equatable {
    /// <p>A data structure that contains the specified receipt rule's name, actions, recipients,
    ///             domains, enabled status, scan status, and Transport Layer Security (TLS) policy.</p>
    public let rule: SesClientTypes.ReceiptRule?

    public init (
        rule: SesClientTypes.ReceiptRule? = nil
    )
    {
        self.rule = rule
    }
}

struct DescribeReceiptRuleOutputResponseBody: Swift.Equatable {
    public let rule: SesClientTypes.ReceiptRule?
}

extension DescribeReceiptRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rule = "Rule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReceiptRuleResult"))
        let ruleDecoded = try containerValues.decodeIfPresent(SesClientTypes.ReceiptRule.self, forKey: .rule)
        rule = ruleDecoded
    }
}

public struct DescribeReceiptRuleSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeReceiptRuleSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeReceiptRuleSetOutputError>
}

extension DescribeReceiptRuleSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeReceiptRuleSetInput(ruleSetName: \(Swift.String(describing: ruleSetName)))"}
}

extension DescribeReceiptRuleSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DescribeReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeReceiptRuleSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeReceiptRuleSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeReceiptRuleSetOutputError>
}

public struct DescribeReceiptRuleSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeReceiptRuleSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeReceiptRuleSetOutputError>
}

/// <p>Represents a request to return the details of a receipt rule set. You use receipt rule
///             sets to receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
public struct DescribeReceiptRuleSetInput: Swift.Equatable {
    /// <p>The name of the receipt rule set to describe.</p>
    public let ruleSetName: Swift.String?

    public init (
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

extension DescribeReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleSetDoesNotExistException" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReceiptRuleSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeReceiptRuleSetOutputResponse(metadata: \(Swift.String(describing: metadata)), rules: \(Swift.String(describing: rules)))"}
}

extension DescribeReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeReceiptRuleSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metadata = output.metadata
            self.rules = output.rules
        } else {
            self.metadata = nil
            self.rules = nil
        }
    }
}

/// <p>Represents the details of the specified receipt rule set.</p>
public struct DescribeReceiptRuleSetOutputResponse: Swift.Equatable {
    /// <p>The metadata for the receipt rule set, which consists of the rule set name and the
    ///             timestamp of when the rule set was created.</p>
    public let metadata: SesClientTypes.ReceiptRuleSetMetadata?
    /// <p>A list of the receipt rules that belong to the specified receipt rule set.</p>
    public let rules: [SesClientTypes.ReceiptRule]?

    public init (
        metadata: SesClientTypes.ReceiptRuleSetMetadata? = nil,
        rules: [SesClientTypes.ReceiptRule]? = nil
    )
    {
        self.metadata = metadata
        self.rules = rules
    }
}

struct DescribeReceiptRuleSetOutputResponseBody: Swift.Equatable {
    public let metadata: SesClientTypes.ReceiptRuleSetMetadata?
    public let rules: [SesClientTypes.ReceiptRule]?
}

extension DescribeReceiptRuleSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadata = "Metadata"
        case rules = "Rules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReceiptRuleSetResult"))
        let metadataDecoded = try containerValues.decodeIfPresent(SesClientTypes.ReceiptRuleSetMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        if containerValues.contains(.rules) {
            struct KeyVal0{struct member{}}
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .rules)
            if let rulesWrappedContainer = rulesWrappedContainer {
                let rulesContainer = try rulesWrappedContainer.decodeIfPresent([SesClientTypes.ReceiptRule].self, forKey: .member)
                var rulesBuffer:[SesClientTypes.ReceiptRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [SesClientTypes.ReceiptRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension SesClientTypes.Destination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bccAddresses = "BccAddresses"
        case ccAddresses = "CcAddresses"
        case toAddresses = "ToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bccAddresses = bccAddresses {
            var bccAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BccAddresses"))
            for (index0, address0) in bccAddresses.enumerated() {
                try bccAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let ccAddresses = ccAddresses {
            var ccAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CcAddresses"))
            for (index0, address0) in ccAddresses.enumerated() {
                try ccAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let toAddresses = toAddresses {
            var toAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ToAddresses"))
            for (index0, address0) in toAddresses.enumerated() {
                try toAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.toAddresses) {
            struct KeyVal0{struct member{}}
            let toAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .toAddresses)
            if let toAddressesWrappedContainer = toAddressesWrappedContainer {
                let toAddressesContainer = try toAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var toAddressesBuffer:[Swift.String]? = nil
                if let toAddressesContainer = toAddressesContainer {
                    toAddressesBuffer = [Swift.String]()
                    for stringContainer0 in toAddressesContainer {
                        toAddressesBuffer?.append(stringContainer0)
                    }
                }
                toAddresses = toAddressesBuffer
            } else {
                toAddresses = []
            }
        } else {
            toAddresses = nil
        }
        if containerValues.contains(.ccAddresses) {
            struct KeyVal0{struct member{}}
            let ccAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .ccAddresses)
            if let ccAddressesWrappedContainer = ccAddressesWrappedContainer {
                let ccAddressesContainer = try ccAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ccAddressesBuffer:[Swift.String]? = nil
                if let ccAddressesContainer = ccAddressesContainer {
                    ccAddressesBuffer = [Swift.String]()
                    for stringContainer0 in ccAddressesContainer {
                        ccAddressesBuffer?.append(stringContainer0)
                    }
                }
                ccAddresses = ccAddressesBuffer
            } else {
                ccAddresses = []
            }
        } else {
            ccAddresses = nil
        }
        if containerValues.contains(.bccAddresses) {
            struct KeyVal0{struct member{}}
            let bccAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .bccAddresses)
            if let bccAddressesWrappedContainer = bccAddressesWrappedContainer {
                let bccAddressesContainer = try bccAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var bccAddressesBuffer:[Swift.String]? = nil
                if let bccAddressesContainer = bccAddressesContainer {
                    bccAddressesBuffer = [Swift.String]()
                    for stringContainer0 in bccAddressesContainer {
                        bccAddressesBuffer?.append(stringContainer0)
                    }
                }
                bccAddresses = bccAddressesBuffer
            } else {
                bccAddresses = []
            }
        } else {
            bccAddresses = nil
        }
    }
}

extension SesClientTypes.Destination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Destination(bccAddresses: \(Swift.String(describing: bccAddresses)), ccAddresses: \(Swift.String(describing: ccAddresses)), toAddresses: \(Swift.String(describing: toAddresses)))"}
}

extension SesClientTypes {
    /// <p>Represents the destination of the message, consisting of To:, CC:, and BCC:
    ///             fields.</p>
    ///         <note>
    ///             <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
    ///                     <i>local part</i> of a destination email address (the part of the
    ///                 email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
    ///                     characters</a>. If the <i>domain part</i> of an address (the
    ///                 part after the @ sign) contains non-ASCII characters, they must be encoded using
    ///                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p>
    ///         </note>
    public struct Destination: Swift.Equatable {
        /// <p>The recipients to place on the BCC: line of the message.</p>
        public let bccAddresses: [Swift.String]?
        /// <p>The recipients to place on the CC: line of the message.</p>
        public let ccAddresses: [Swift.String]?
        /// <p>The recipients to place on the To: line of the message.</p>
        public let toAddresses: [Swift.String]?

        public init (
            bccAddresses: [Swift.String]? = nil,
            ccAddresses: [Swift.String]? = nil,
            toAddresses: [Swift.String]? = nil
        )
        {
            self.bccAddresses = bccAddresses
            self.ccAddresses = ccAddresses
            self.toAddresses = toAddresses
        }
    }

}

extension SesClientTypes {
    public enum DimensionValueSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case emailHeader
        case linkTag
        case messageTag
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionValueSource] {
            return [
                .emailHeader,
                .linkTag,
                .messageTag,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .emailHeader: return "emailHeader"
            case .linkTag: return "linkTag"
            case .messageTag: return "messageTag"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DimensionValueSource(rawValue: rawValue) ?? DimensionValueSource.sdkUnknown(rawValue)
        }
    }
}

extension SesClientTypes {
    public enum DsnAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delayed
        case delivered
        case expanded
        case failed
        case relayed
        case sdkUnknown(Swift.String)

        public static var allCases: [DsnAction] {
            return [
                .delayed,
                .delivered,
                .expanded,
                .failed,
                .relayed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delayed: return "delayed"
            case .delivered: return "delivered"
            case .expanded: return "expanded"
            case .failed: return "failed"
            case .relayed: return "relayed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DsnAction(rawValue: rawValue) ?? DsnAction.sdkUnknown(rawValue)
        }
    }
}

extension SesClientTypes.EventDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchDestination = "CloudWatchDestination"
        case enabled = "Enabled"
        case kinesisFirehoseDestination = "KinesisFirehoseDestination"
        case matchingEventTypes = "MatchingEventTypes"
        case name = "Name"
        case sNSDestination = "SNSDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cloudWatchDestination = cloudWatchDestination {
            try container.encode(cloudWatchDestination, forKey: ClientRuntime.Key("CloudWatchDestination"))
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let kinesisFirehoseDestination = kinesisFirehoseDestination {
            try container.encode(kinesisFirehoseDestination, forKey: ClientRuntime.Key("KinesisFirehoseDestination"))
        }
        if let matchingEventTypes = matchingEventTypes {
            var matchingEventTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MatchingEventTypes"))
            for (index0, eventtype0) in matchingEventTypes.enumerated() {
                try matchingEventTypesContainer.encode(eventtype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let sNSDestination = sNSDestination {
            try container.encode(sNSDestination, forKey: ClientRuntime.Key("SNSDestination"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        if containerValues.contains(.matchingEventTypes) {
            struct KeyVal0{struct member{}}
            let matchingEventTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .matchingEventTypes)
            if let matchingEventTypesWrappedContainer = matchingEventTypesWrappedContainer {
                let matchingEventTypesContainer = try matchingEventTypesWrappedContainer.decodeIfPresent([SesClientTypes.EventType].self, forKey: .member)
                var matchingEventTypesBuffer:[SesClientTypes.EventType]? = nil
                if let matchingEventTypesContainer = matchingEventTypesContainer {
                    matchingEventTypesBuffer = [SesClientTypes.EventType]()
                    for stringContainer0 in matchingEventTypesContainer {
                        matchingEventTypesBuffer?.append(stringContainer0)
                    }
                }
                matchingEventTypes = matchingEventTypesBuffer
            } else {
                matchingEventTypes = []
            }
        } else {
            matchingEventTypes = nil
        }
        let kinesisFirehoseDestinationDecoded = try containerValues.decodeIfPresent(SesClientTypes.KinesisFirehoseDestination.self, forKey: .kinesisFirehoseDestination)
        kinesisFirehoseDestination = kinesisFirehoseDestinationDecoded
        let cloudWatchDestinationDecoded = try containerValues.decodeIfPresent(SesClientTypes.CloudWatchDestination.self, forKey: .cloudWatchDestination)
        cloudWatchDestination = cloudWatchDestinationDecoded
        let sNSDestinationDecoded = try containerValues.decodeIfPresent(SesClientTypes.SNSDestination.self, forKey: .sNSDestination)
        sNSDestination = sNSDestinationDecoded
    }
}

extension SesClientTypes.EventDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EventDestination(cloudWatchDestination: \(Swift.String(describing: cloudWatchDestination)), enabled: \(Swift.String(describing: enabled)), kinesisFirehoseDestination: \(Swift.String(describing: kinesisFirehoseDestination)), matchingEventTypes: \(Swift.String(describing: matchingEventTypes)), name: \(Swift.String(describing: name)), sNSDestination: \(Swift.String(describing: sNSDestination)))"}
}

extension SesClientTypes {
    /// <p>Contains information about the event destination that the specified email sending
    ///             events will be published to.</p>
    ///         <note>
    ///             <p>When you create or update an event destination, you must provide one, and only
    ///                 one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p>
    ///         </note>
    ///         <p>Event destinations are associated with configuration sets, which enable you to publish
    ///             email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about
    ///             using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public struct EventDestination: Swift.Equatable {
        /// <p>An object that contains the names, default values, and sources of the dimensions
        ///             associated with an Amazon CloudWatch event destination.</p>
        public let cloudWatchDestination: SesClientTypes.CloudWatchDestination?
        /// <p>Sets whether Amazon SES publishes events to this destination when you send an email with
        ///             the associated configuration set. Set to <code>true</code> to enable publishing to this
        ///             destination; set to <code>false</code> to prevent publishing to this destination. The
        ///             default value is <code>false</code>.</p>
        public let enabled: Swift.Bool
        /// <p>An object that contains the delivery stream ARN and the IAM role ARN associated with
        ///             an Amazon Kinesis Firehose event destination.</p>
        public let kinesisFirehoseDestination: SesClientTypes.KinesisFirehoseDestination?
        /// <p>The type of email sending events to publish to the event destination.</p>
        public let matchingEventTypes: [SesClientTypes.EventType]?
        /// <p>The name of the event destination. The name must:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
        ///                     underscores (_), or dashes (-).</p>
        ///             </li>
        ///             <li>
        ///                 <p>Contain less than 64 characters.</p>
        ///             </li>
        ///          </ul>
        public let name: Swift.String?
        /// <p>An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event
        ///             destination.</p>
        public let sNSDestination: SesClientTypes.SNSDestination?

        public init (
            cloudWatchDestination: SesClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            kinesisFirehoseDestination: SesClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [SesClientTypes.EventType]? = nil,
            name: Swift.String? = nil,
            sNSDestination: SesClientTypes.SNSDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.name = name
            self.sNSDestination = sNSDestination
        }
    }

}

extension EventDestinationAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EventDestinationAlreadyExistsException(configurationSetName: \(Swift.String(describing: configurationSetName)), eventDestinationName: \(Swift.String(describing: eventDestinationName)), message: \(Swift.String(describing: message)))"}
}

extension EventDestinationAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<EventDestinationAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.eventDestinationName = output.error.eventDestinationName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.eventDestinationName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the event destination could not be created because of a naming
///             conflict.</p>
public struct EventDestinationAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that the configuration set does not exist.</p>
    public var configurationSetName: Swift.String?
    /// <p>Indicates that the event destination does not exist.</p>
    public var eventDestinationName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
        self.message = message
    }
}

struct EventDestinationAlreadyExistsExceptionBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let eventDestinationName: Swift.String?
    public let message: Swift.String?
}

extension EventDestinationAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EventDestinationDoesNotExistException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EventDestinationDoesNotExistException(configurationSetName: \(Swift.String(describing: configurationSetName)), eventDestinationName: \(Swift.String(describing: eventDestinationName)), message: \(Swift.String(describing: message)))"}
}

extension EventDestinationDoesNotExistException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<EventDestinationDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.eventDestinationName = output.error.eventDestinationName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.eventDestinationName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the event destination does not exist.</p>
public struct EventDestinationDoesNotExistException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that the configuration set does not exist.</p>
    public var configurationSetName: Swift.String?
    /// <p>Indicates that the event destination does not exist.</p>
    public var eventDestinationName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
        self.message = message
    }
}

struct EventDestinationDoesNotExistExceptionBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let eventDestinationName: Swift.String?
    public let message: Swift.String?
}

extension EventDestinationDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes {
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bounce
        case click
        case complaint
        case delivery
        case `open`
        case reject
        case renderingFailure
        case send
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .bounce,
                .click,
                .complaint,
                .delivery,
                .open,
                .reject,
                .renderingFailure,
                .send,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "bounce"
            case .click: return "click"
            case .complaint: return "complaint"
            case .delivery: return "delivery"
            case .open: return "open"
            case .reject: return "reject"
            case .renderingFailure: return "renderingFailure"
            case .send: return "send"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension SesClientTypes.ExtensionField: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SesClientTypes.ExtensionField: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExtensionField(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension SesClientTypes {
    /// <p>Additional X-headers to include in the Delivery Status Notification (DSN) when an
    ///             email that Amazon SES receives on your behalf bounces.</p>
    ///         <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES
    ///                 Developer Guide</a>.</p>
    public struct ExtensionField: Swift.Equatable {
        /// <p>The name of the header to add. Must be between 1 and 50 characters, inclusive, and
        ///             consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.</p>
        public let name: Swift.String?
        /// <p>The value of the header to add. Must be less than 2048 characters, and must not
        ///             contain newline characters ("\r" or "\n").</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension FromEmailAddressNotVerifiedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FromEmailAddressNotVerifiedException(fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), message: \(Swift.String(describing: message)))"}
}

extension FromEmailAddressNotVerifiedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<FromEmailAddressNotVerifiedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.fromEmailAddress = output.error.fromEmailAddress
            self.message = output.error.message
        } else {
            self.fromEmailAddress = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the sender address specified for a custom verification email is not
///             verified, and is therefore not eligible to send the custom verification email. </p>
public struct FromEmailAddressNotVerifiedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that the from email address associated with the custom verification email
    ///             template is not verified.</p>
    public var fromEmailAddress: Swift.String?
    public var message: Swift.String?

    public init (
        fromEmailAddress: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.fromEmailAddress = fromEmailAddress
        self.message = message
    }
}

struct FromEmailAddressNotVerifiedExceptionBody: Swift.Equatable {
    public let fromEmailAddress: Swift.String?
    public let message: Swift.String?
}

extension FromEmailAddressNotVerifiedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromEmailAddress = "FromEmailAddress"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct GetAccountSendingEnabledInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAccountSendingEnabledInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAccountSendingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAccountSendingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAccountSendingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAccountSendingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAccountSendingEnabledOutputError>
}

extension GetAccountSendingEnabledInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountSendingEnabledInput()"}
}

extension GetAccountSendingEnabledInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetAccountSendingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetAccountSendingEnabledInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAccountSendingEnabledInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAccountSendingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAccountSendingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAccountSendingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAccountSendingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAccountSendingEnabledOutputError>
}

public struct GetAccountSendingEnabledInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAccountSendingEnabledInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAccountSendingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAccountSendingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAccountSendingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAccountSendingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAccountSendingEnabledOutputError>
}

public struct GetAccountSendingEnabledInput: Swift.Equatable {

    public init() {}
}

extension GetAccountSendingEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetAccountSendingEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAccountSendingEnabledOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccountSendingEnabledOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountSendingEnabledOutputResponse(enabled: \(Swift.String(describing: enabled)))"}
}

extension GetAccountSendingEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAccountSendingEnabledOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.enabled = output.enabled
        } else {
            self.enabled = false
        }
    }
}

/// <p>Represents a request to return the email sending status for your Amazon SES account in the
///             current AWS Region.</p>
public struct GetAccountSendingEnabledOutputResponse: Swift.Equatable {
    /// <p>Describes whether email sending is enabled or disabled for your Amazon SES account in the
    ///             current AWS Region.</p>
    public let enabled: Swift.Bool

    public init (
        enabled: Swift.Bool = false
    )
    {
        self.enabled = enabled
    }
}

struct GetAccountSendingEnabledOutputResponseBody: Swift.Equatable {
    public let enabled: Swift.Bool
}

extension GetAccountSendingEnabledOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetAccountSendingEnabledResult"))
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

public struct GetCustomVerificationEmailTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCustomVerificationEmailTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCustomVerificationEmailTemplateOutputError>
}

extension GetCustomVerificationEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCustomVerificationEmailTemplateInput(templateName: \(Swift.String(describing: templateName)))"}
}

extension GetCustomVerificationEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("GetCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetCustomVerificationEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCustomVerificationEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCustomVerificationEmailTemplateOutputError>
}

public struct GetCustomVerificationEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCustomVerificationEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCustomVerificationEmailTemplateOutputError>
}

/// <p>Represents a request to retrieve an existing custom verification email
///             template.</p>
public struct GetCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// <p>The name of the custom verification email template that you want to retrieve.</p>
    public let templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

extension GetCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CustomVerificationEmailTemplateDoesNotExistException" : self = .customVerificationEmailTemplateDoesNotExistException(try CustomVerificationEmailTemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case customVerificationEmailTemplateDoesNotExistException(CustomVerificationEmailTemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCustomVerificationEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCustomVerificationEmailTemplateOutputResponse(failureRedirectionURL: \(Swift.String(describing: failureRedirectionURL)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), successRedirectionURL: \(Swift.String(describing: successRedirectionURL)), templateContent: \(Swift.String(describing: templateContent)), templateName: \(Swift.String(describing: templateName)), templateSubject: \(Swift.String(describing: templateSubject)))"}
}

extension GetCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCustomVerificationEmailTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failureRedirectionURL = output.failureRedirectionURL
            self.fromEmailAddress = output.fromEmailAddress
            self.successRedirectionURL = output.successRedirectionURL
            self.templateContent = output.templateContent
            self.templateName = output.templateName
            self.templateSubject = output.templateSubject
        } else {
            self.failureRedirectionURL = nil
            self.fromEmailAddress = nil
            self.successRedirectionURL = nil
            self.templateContent = nil
            self.templateName = nil
            self.templateSubject = nil
        }
    }
}

/// <p>The content of the custom verification email template.</p>
public struct GetCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {
    /// <p>The URL that the recipient of the verification email is sent to if his or her address
    ///             is not successfully verified.</p>
    public let failureRedirectionURL: Swift.String?
    /// <p>The email address that the custom verification email is sent from.</p>
    public let fromEmailAddress: Swift.String?
    /// <p>The URL that the recipient of the verification email is sent to if his or her address
    ///             is successfully verified.</p>
    public let successRedirectionURL: Swift.String?
    /// <p>The content of the custom verification email.</p>
    public let templateContent: Swift.String?
    /// <p>The name of the custom verification email template.</p>
    public let templateName: Swift.String?
    /// <p>The subject line of the custom verification email.</p>
    public let templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

struct GetCustomVerificationEmailTemplateOutputResponseBody: Swift.Equatable {
    public let templateName: Swift.String?
    public let fromEmailAddress: Swift.String?
    public let templateSubject: Swift.String?
    public let templateContent: Swift.String?
    public let successRedirectionURL: Swift.String?
    public let failureRedirectionURL: Swift.String?
}

extension GetCustomVerificationEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetCustomVerificationEmailTemplateResult"))
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateContent)
        templateContent = templateContentDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

public struct GetIdentityDkimAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityDkimAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityDkimAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityDkimAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityDkimAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityDkimAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityDkimAttributesOutputError>
}

extension GetIdentityDkimAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIdentityDkimAttributesInput(identities: \(Swift.String(describing: identities)))"}
}

extension GetIdentityDkimAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
            for (index0, identity0) in identities.enumerated() {
                try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("GetIdentityDkimAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetIdentityDkimAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityDkimAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityDkimAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityDkimAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityDkimAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityDkimAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityDkimAttributesOutputError>
}

public struct GetIdentityDkimAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityDkimAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityDkimAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityDkimAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityDkimAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityDkimAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityDkimAttributesOutputError>
}

/// <p>Represents a request for the status of Amazon SES Easy DKIM signing for an identity. For
///             domain identities, this request also returns the DKIM tokens that are required for Easy
///             DKIM signing, and whether Amazon SES successfully verified that these tokens were published.
///             For more information about Easy DKIM, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
public struct GetIdentityDkimAttributesInput: Swift.Equatable {
    /// <p>A list of one or more verified identities - email addresses, domains, or both.</p>
    public let identities: [Swift.String]?

    public init (
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

extension GetIdentityDkimAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetIdentityDkimAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetIdentityDkimAttributesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIdentityDkimAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIdentityDkimAttributesOutputResponse(dkimAttributes: \(Swift.String(describing: dkimAttributes)))"}
}

extension GetIdentityDkimAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetIdentityDkimAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dkimAttributes = output.dkimAttributes
        } else {
            self.dkimAttributes = nil
        }
    }
}

/// <p>Represents the status of Amazon SES Easy DKIM signing for an identity. For domain
///             identities, this response also contains the DKIM tokens that are required for Easy DKIM
///             signing, and whether Amazon SES successfully verified that these tokens were
///             published.</p>
public struct GetIdentityDkimAttributesOutputResponse: Swift.Equatable {
    /// <p>The DKIM attributes for an email address or a domain.</p>
    public let dkimAttributes: [Swift.String:SesClientTypes.IdentityDkimAttributes]?

    public init (
        dkimAttributes: [Swift.String:SesClientTypes.IdentityDkimAttributes]? = nil
    )
    {
        self.dkimAttributes = dkimAttributes
    }
}

struct GetIdentityDkimAttributesOutputResponseBody: Swift.Equatable {
    public let dkimAttributes: [Swift.String:SesClientTypes.IdentityDkimAttributes]?
}

extension GetIdentityDkimAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimAttributes = "DkimAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetIdentityDkimAttributesResult"))
        if containerValues.contains(.dkimAttributes) {
            struct KeyVal0{struct key{}; struct value{}}
            let dkimAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SesClientTypes.IdentityDkimAttributes, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .dkimAttributes)
            if let dkimAttributesWrappedContainer = dkimAttributesWrappedContainer {
                let dkimAttributesContainer = try dkimAttributesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SesClientTypes.IdentityDkimAttributes, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var dkimAttributesBuffer: [Swift.String:SesClientTypes.IdentityDkimAttributes]? = nil
                if let dkimAttributesContainer = dkimAttributesContainer {
                    dkimAttributesBuffer = [Swift.String:SesClientTypes.IdentityDkimAttributes]()
                    for structureContainer0 in dkimAttributesContainer {
                        dkimAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                dkimAttributes = dkimAttributesBuffer
            } else {
                dkimAttributes = [:]
            }
        } else {
            dkimAttributes = nil
        }
    }
}

public struct GetIdentityMailFromDomainAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityMailFromDomainAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityMailFromDomainAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityMailFromDomainAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityMailFromDomainAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityMailFromDomainAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityMailFromDomainAttributesOutputError>
}

extension GetIdentityMailFromDomainAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIdentityMailFromDomainAttributesInput(identities: \(Swift.String(describing: identities)))"}
}

extension GetIdentityMailFromDomainAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
            for (index0, identity0) in identities.enumerated() {
                try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("GetIdentityMailFromDomainAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetIdentityMailFromDomainAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityMailFromDomainAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityMailFromDomainAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityMailFromDomainAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityMailFromDomainAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityMailFromDomainAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityMailFromDomainAttributesOutputError>
}

public struct GetIdentityMailFromDomainAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityMailFromDomainAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityMailFromDomainAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityMailFromDomainAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityMailFromDomainAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityMailFromDomainAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityMailFromDomainAttributesOutputError>
}

/// <p>Represents a request to return the Amazon SES custom MAIL FROM attributes for a list of
///             identities. For information about using a custom MAIL FROM domain, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct GetIdentityMailFromDomainAttributesInput: Swift.Equatable {
    /// <p>A list of one or more identities.</p>
    public let identities: [Swift.String]?

    public init (
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

extension GetIdentityMailFromDomainAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetIdentityMailFromDomainAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetIdentityMailFromDomainAttributesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIdentityMailFromDomainAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIdentityMailFromDomainAttributesOutputResponse(mailFromDomainAttributes: \(Swift.String(describing: mailFromDomainAttributes)))"}
}

extension GetIdentityMailFromDomainAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetIdentityMailFromDomainAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mailFromDomainAttributes = output.mailFromDomainAttributes
        } else {
            self.mailFromDomainAttributes = nil
        }
    }
}

/// <p>Represents the custom MAIL FROM attributes for a list of identities.</p>
public struct GetIdentityMailFromDomainAttributesOutputResponse: Swift.Equatable {
    /// <p>A map of identities to custom MAIL FROM attributes.</p>
    public let mailFromDomainAttributes: [Swift.String:SesClientTypes.IdentityMailFromDomainAttributes]?

    public init (
        mailFromDomainAttributes: [Swift.String:SesClientTypes.IdentityMailFromDomainAttributes]? = nil
    )
    {
        self.mailFromDomainAttributes = mailFromDomainAttributes
    }
}

struct GetIdentityMailFromDomainAttributesOutputResponseBody: Swift.Equatable {
    public let mailFromDomainAttributes: [Swift.String:SesClientTypes.IdentityMailFromDomainAttributes]?
}

extension GetIdentityMailFromDomainAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mailFromDomainAttributes = "MailFromDomainAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetIdentityMailFromDomainAttributesResult"))
        if containerValues.contains(.mailFromDomainAttributes) {
            struct KeyVal0{struct key{}; struct value{}}
            let mailFromDomainAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SesClientTypes.IdentityMailFromDomainAttributes, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .mailFromDomainAttributes)
            if let mailFromDomainAttributesWrappedContainer = mailFromDomainAttributesWrappedContainer {
                let mailFromDomainAttributesContainer = try mailFromDomainAttributesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SesClientTypes.IdentityMailFromDomainAttributes, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var mailFromDomainAttributesBuffer: [Swift.String:SesClientTypes.IdentityMailFromDomainAttributes]? = nil
                if let mailFromDomainAttributesContainer = mailFromDomainAttributesContainer {
                    mailFromDomainAttributesBuffer = [Swift.String:SesClientTypes.IdentityMailFromDomainAttributes]()
                    for structureContainer0 in mailFromDomainAttributesContainer {
                        mailFromDomainAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                mailFromDomainAttributes = mailFromDomainAttributesBuffer
            } else {
                mailFromDomainAttributes = [:]
            }
        } else {
            mailFromDomainAttributes = nil
        }
    }
}

public struct GetIdentityNotificationAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityNotificationAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityNotificationAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityNotificationAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityNotificationAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityNotificationAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityNotificationAttributesOutputError>
}

extension GetIdentityNotificationAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIdentityNotificationAttributesInput(identities: \(Swift.String(describing: identities)))"}
}

extension GetIdentityNotificationAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
            for (index0, identity0) in identities.enumerated() {
                try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("GetIdentityNotificationAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetIdentityNotificationAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityNotificationAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityNotificationAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityNotificationAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityNotificationAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityNotificationAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityNotificationAttributesOutputError>
}

public struct GetIdentityNotificationAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityNotificationAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityNotificationAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityNotificationAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityNotificationAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityNotificationAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityNotificationAttributesOutputError>
}

/// <p>Represents a request to return the notification attributes for a list of identities
///             you verified with Amazon SES. For information about Amazon SES notifications, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES
///                 Developer Guide</a>.</p>
public struct GetIdentityNotificationAttributesInput: Swift.Equatable {
    /// <p>A list of one or more identities. You can specify an identity by using its name or by
    ///             using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>,
    ///                 <code>example.com</code>,
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
    public let identities: [Swift.String]?

    public init (
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

extension GetIdentityNotificationAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetIdentityNotificationAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetIdentityNotificationAttributesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIdentityNotificationAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIdentityNotificationAttributesOutputResponse(notificationAttributes: \(Swift.String(describing: notificationAttributes)))"}
}

extension GetIdentityNotificationAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetIdentityNotificationAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.notificationAttributes = output.notificationAttributes
        } else {
            self.notificationAttributes = nil
        }
    }
}

/// <p>Represents the notification attributes for a list of identities.</p>
public struct GetIdentityNotificationAttributesOutputResponse: Swift.Equatable {
    /// <p>A map of Identity to IdentityNotificationAttributes.</p>
    public let notificationAttributes: [Swift.String:SesClientTypes.IdentityNotificationAttributes]?

    public init (
        notificationAttributes: [Swift.String:SesClientTypes.IdentityNotificationAttributes]? = nil
    )
    {
        self.notificationAttributes = notificationAttributes
    }
}

struct GetIdentityNotificationAttributesOutputResponseBody: Swift.Equatable {
    public let notificationAttributes: [Swift.String:SesClientTypes.IdentityNotificationAttributes]?
}

extension GetIdentityNotificationAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notificationAttributes = "NotificationAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetIdentityNotificationAttributesResult"))
        if containerValues.contains(.notificationAttributes) {
            struct KeyVal0{struct key{}; struct value{}}
            let notificationAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SesClientTypes.IdentityNotificationAttributes, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .notificationAttributes)
            if let notificationAttributesWrappedContainer = notificationAttributesWrappedContainer {
                let notificationAttributesContainer = try notificationAttributesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SesClientTypes.IdentityNotificationAttributes, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var notificationAttributesBuffer: [Swift.String:SesClientTypes.IdentityNotificationAttributes]? = nil
                if let notificationAttributesContainer = notificationAttributesContainer {
                    notificationAttributesBuffer = [Swift.String:SesClientTypes.IdentityNotificationAttributes]()
                    for structureContainer0 in notificationAttributesContainer {
                        notificationAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                notificationAttributes = notificationAttributesBuffer
            } else {
                notificationAttributes = [:]
            }
        } else {
            notificationAttributes = nil
        }
    }
}

public struct GetIdentityPoliciesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityPoliciesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityPoliciesOutputError>
}

extension GetIdentityPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIdentityPoliciesInput(identity: \(Swift.String(describing: identity)), policyNames: \(Swift.String(describing: policyNames)))"}
}

extension GetIdentityPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let policyNames = policyNames {
            var policyNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyNames"))
            for (index0, policyname0) in policyNames.enumerated() {
                try policyNamesContainer.encode(policyname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("GetIdentityPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetIdentityPoliciesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityPoliciesOutputError>
}

public struct GetIdentityPoliciesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityPoliciesOutputError>
}

/// <p>Represents a request to return the requested sending authorization policies for an
///             identity. Sending authorization is an Amazon SES feature that enables you to authorize other
///             senders to use your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct GetIdentityPoliciesInput: Swift.Equatable {
    /// <p>The identity for which the policies will be retrieved. You can specify an identity by
    ///             using its name or by using its Amazon Resource Name (ARN). Examples:
    ///                 <code>user@example.com</code>, <code>example.com</code>,
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
    ///         <p>To successfully call this API, you must own the identity.</p>
    public let identity: Swift.String?
    /// <p>A list of the names of policies to be retrieved. You can retrieve a maximum of 20
    ///             policies at a time. If you do not know the names of the policies that are attached to
    ///             the identity, you can use <code>ListIdentityPolicies</code>.</p>
    public let policyNames: [Swift.String]?

    public init (
        identity: Swift.String? = nil,
        policyNames: [Swift.String]? = nil
    )
    {
        self.identity = identity
        self.policyNames = policyNames
    }
}

extension GetIdentityPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetIdentityPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetIdentityPoliciesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIdentityPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIdentityPoliciesOutputResponse(policies: \(Swift.String(describing: policies)))"}
}

extension GetIdentityPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetIdentityPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policies = output.policies
        } else {
            self.policies = nil
        }
    }
}

/// <p>Represents the requested sending authorization policies.</p>
public struct GetIdentityPoliciesOutputResponse: Swift.Equatable {
    /// <p>A map of policy names to policies.</p>
    public let policies: [Swift.String:Swift.String]?

    public init (
        policies: [Swift.String:Swift.String]? = nil
    )
    {
        self.policies = policies
    }
}

struct GetIdentityPoliciesOutputResponseBody: Swift.Equatable {
    public let policies: [Swift.String:Swift.String]?
}

extension GetIdentityPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policies = "Policies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetIdentityPoliciesResult"))
        if containerValues.contains(.policies) {
            struct KeyVal0{struct key{}; struct value{}}
            let policiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .policies)
            if let policiesWrappedContainer = policiesWrappedContainer {
                let policiesContainer = try policiesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var policiesBuffer: [Swift.String:Swift.String]? = nil
                if let policiesContainer = policiesContainer {
                    policiesBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in policiesContainer {
                        policiesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                policies = policiesBuffer
            } else {
                policies = [:]
            }
        } else {
            policies = nil
        }
    }
}

public struct GetIdentityVerificationAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityVerificationAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityVerificationAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityVerificationAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityVerificationAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityVerificationAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityVerificationAttributesOutputError>
}

extension GetIdentityVerificationAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIdentityVerificationAttributesInput(identities: \(Swift.String(describing: identities)))"}
}

extension GetIdentityVerificationAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
            for (index0, identity0) in identities.enumerated() {
                try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("GetIdentityVerificationAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetIdentityVerificationAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityVerificationAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityVerificationAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityVerificationAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityVerificationAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityVerificationAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityVerificationAttributesOutputError>
}

public struct GetIdentityVerificationAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIdentityVerificationAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIdentityVerificationAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIdentityVerificationAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIdentityVerificationAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIdentityVerificationAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIdentityVerificationAttributesOutputError>
}

/// <p>Represents a request to return the Amazon SES verification status of a list of identities.
///             For domain identities, this request also returns the verification token. For information
///             about verifying identities with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct GetIdentityVerificationAttributesInput: Swift.Equatable {
    /// <p>A list of identities.</p>
    public let identities: [Swift.String]?

    public init (
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

extension GetIdentityVerificationAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetIdentityVerificationAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetIdentityVerificationAttributesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIdentityVerificationAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIdentityVerificationAttributesOutputResponse(verificationAttributes: \(Swift.String(describing: verificationAttributes)))"}
}

extension GetIdentityVerificationAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetIdentityVerificationAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.verificationAttributes = output.verificationAttributes
        } else {
            self.verificationAttributes = nil
        }
    }
}

/// <p>The Amazon SES verification status of a list of identities. For domain identities, this
///             response also contains the verification token.</p>
public struct GetIdentityVerificationAttributesOutputResponse: Swift.Equatable {
    /// <p>A map of Identities to IdentityVerificationAttributes objects.</p>
    public let verificationAttributes: [Swift.String:SesClientTypes.IdentityVerificationAttributes]?

    public init (
        verificationAttributes: [Swift.String:SesClientTypes.IdentityVerificationAttributes]? = nil
    )
    {
        self.verificationAttributes = verificationAttributes
    }
}

struct GetIdentityVerificationAttributesOutputResponseBody: Swift.Equatable {
    public let verificationAttributes: [Swift.String:SesClientTypes.IdentityVerificationAttributes]?
}

extension GetIdentityVerificationAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verificationAttributes = "VerificationAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetIdentityVerificationAttributesResult"))
        if containerValues.contains(.verificationAttributes) {
            struct KeyVal0{struct key{}; struct value{}}
            let verificationAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SesClientTypes.IdentityVerificationAttributes, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .verificationAttributes)
            if let verificationAttributesWrappedContainer = verificationAttributesWrappedContainer {
                let verificationAttributesContainer = try verificationAttributesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SesClientTypes.IdentityVerificationAttributes, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var verificationAttributesBuffer: [Swift.String:SesClientTypes.IdentityVerificationAttributes]? = nil
                if let verificationAttributesContainer = verificationAttributesContainer {
                    verificationAttributesBuffer = [Swift.String:SesClientTypes.IdentityVerificationAttributes]()
                    for structureContainer0 in verificationAttributesContainer {
                        verificationAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                verificationAttributes = verificationAttributesBuffer
            } else {
                verificationAttributes = [:]
            }
        } else {
            verificationAttributes = nil
        }
    }
}

public struct GetSendQuotaInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSendQuotaInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSendQuotaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSendQuotaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSendQuotaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSendQuotaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSendQuotaOutputError>
}

extension GetSendQuotaInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSendQuotaInput()"}
}

extension GetSendQuotaInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetSendQuota", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetSendQuotaInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSendQuotaInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSendQuotaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSendQuotaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSendQuotaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSendQuotaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSendQuotaOutputError>
}

public struct GetSendQuotaInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSendQuotaInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSendQuotaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSendQuotaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSendQuotaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSendQuotaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSendQuotaOutputError>
}

public struct GetSendQuotaInput: Swift.Equatable {

    public init() {}
}

extension GetSendQuotaOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetSendQuotaOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSendQuotaOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSendQuotaOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSendQuotaOutputResponse(max24HourSend: \(Swift.String(describing: max24HourSend)), maxSendRate: \(Swift.String(describing: maxSendRate)), sentLast24Hours: \(Swift.String(describing: sentLast24Hours)))"}
}

extension GetSendQuotaOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSendQuotaOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.max24HourSend = output.max24HourSend
            self.maxSendRate = output.maxSendRate
            self.sentLast24Hours = output.sentLast24Hours
        } else {
            self.max24HourSend = 0.0
            self.maxSendRate = 0.0
            self.sentLast24Hours = 0.0
        }
    }
}

/// <p>Represents your Amazon SES daily sending quota, maximum send rate, and the number of emails
///             you have sent in the last 24 hours.</p>
public struct GetSendQuotaOutputResponse: Swift.Equatable {
    /// <p>The maximum number of emails the user is allowed to send in a 24-hour interval. A
    ///             value of -1 signifies an unlimited quota.</p>
    public let max24HourSend: Swift.Double
    /// <p>The maximum number of emails that Amazon SES can accept from the user's account per
    ///             second.</p>
    ///         <note>
    ///             <p>The rate at which Amazon SES accepts the user's messages might be less than the maximum
    ///                 send rate.</p>
    ///         </note>
    public let maxSendRate: Swift.Double
    /// <p>The number of emails sent during the previous 24 hours.</p>
    public let sentLast24Hours: Swift.Double

    public init (
        max24HourSend: Swift.Double = 0.0,
        maxSendRate: Swift.Double = 0.0,
        sentLast24Hours: Swift.Double = 0.0
    )
    {
        self.max24HourSend = max24HourSend
        self.maxSendRate = maxSendRate
        self.sentLast24Hours = sentLast24Hours
    }
}

struct GetSendQuotaOutputResponseBody: Swift.Equatable {
    public let max24HourSend: Swift.Double
    public let maxSendRate: Swift.Double
    public let sentLast24Hours: Swift.Double
}

extension GetSendQuotaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max24HourSend = "Max24HourSend"
        case maxSendRate = "MaxSendRate"
        case sentLast24Hours = "SentLast24Hours"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetSendQuotaResult"))
        let max24HourSendDecoded = try containerValues.decode(Swift.Double.self, forKey: .max24HourSend)
        max24HourSend = max24HourSendDecoded
        let maxSendRateDecoded = try containerValues.decode(Swift.Double.self, forKey: .maxSendRate)
        maxSendRate = maxSendRateDecoded
        let sentLast24HoursDecoded = try containerValues.decode(Swift.Double.self, forKey: .sentLast24Hours)
        sentLast24Hours = sentLast24HoursDecoded
    }
}

public struct GetSendStatisticsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSendStatisticsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSendStatisticsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSendStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSendStatisticsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSendStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSendStatisticsOutputError>
}

extension GetSendStatisticsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSendStatisticsInput()"}
}

extension GetSendStatisticsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetSendStatistics", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetSendStatisticsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSendStatisticsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSendStatisticsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSendStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSendStatisticsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSendStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSendStatisticsOutputError>
}

public struct GetSendStatisticsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSendStatisticsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSendStatisticsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSendStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSendStatisticsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSendStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSendStatisticsOutputError>
}

public struct GetSendStatisticsInput: Swift.Equatable {

    public init() {}
}

extension GetSendStatisticsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetSendStatisticsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSendStatisticsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSendStatisticsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSendStatisticsOutputResponse(sendDataPoints: \(Swift.String(describing: sendDataPoints)))"}
}

extension GetSendStatisticsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSendStatisticsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sendDataPoints = output.sendDataPoints
        } else {
            self.sendDataPoints = nil
        }
    }
}

/// <p>Represents a list of data points. This list contains aggregated data from the previous
///             two weeks of your sending activity with Amazon SES.</p>
public struct GetSendStatisticsOutputResponse: Swift.Equatable {
    /// <p>A list of data points, each of which represents 15 minutes of activity.</p>
    public let sendDataPoints: [SesClientTypes.SendDataPoint]?

    public init (
        sendDataPoints: [SesClientTypes.SendDataPoint]? = nil
    )
    {
        self.sendDataPoints = sendDataPoints
    }
}

struct GetSendStatisticsOutputResponseBody: Swift.Equatable {
    public let sendDataPoints: [SesClientTypes.SendDataPoint]?
}

extension GetSendStatisticsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendDataPoints = "SendDataPoints"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetSendStatisticsResult"))
        if containerValues.contains(.sendDataPoints) {
            struct KeyVal0{struct member{}}
            let sendDataPointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .sendDataPoints)
            if let sendDataPointsWrappedContainer = sendDataPointsWrappedContainer {
                let sendDataPointsContainer = try sendDataPointsWrappedContainer.decodeIfPresent([SesClientTypes.SendDataPoint].self, forKey: .member)
                var sendDataPointsBuffer:[SesClientTypes.SendDataPoint]? = nil
                if let sendDataPointsContainer = sendDataPointsContainer {
                    sendDataPointsBuffer = [SesClientTypes.SendDataPoint]()
                    for structureContainer0 in sendDataPointsContainer {
                        sendDataPointsBuffer?.append(structureContainer0)
                    }
                }
                sendDataPoints = sendDataPointsBuffer
            } else {
                sendDataPoints = []
            }
        } else {
            sendDataPoints = nil
        }
    }
}

public struct GetTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTemplateOutputError>
}

extension GetTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTemplateInput(templateName: \(Swift.String(describing: templateName)))"}
}

extension GetTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("GetTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTemplateOutputError>
}

public struct GetTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTemplateOutputError>
}

public struct GetTemplateInput: Swift.Equatable {
    /// <p>The name of the template you want to retrieve.</p>
    public let templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

extension GetTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TemplateDoesNotExistException" : self = .templateDoesNotExistException(try TemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTemplateOutputError: Swift.Error, Swift.Equatable {
    case templateDoesNotExistException(TemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTemplateOutputResponse(template: \(Swift.String(describing: template)))"}
}

extension GetTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.template = output.template
        } else {
            self.template = nil
        }
    }
}

public struct GetTemplateOutputResponse: Swift.Equatable {
    /// <p>The content of the email, composed of a subject line, an HTML part, and a text-only
    ///             part.</p>
    public let template: SesClientTypes.Template?

    public init (
        template: SesClientTypes.Template? = nil
    )
    {
        self.template = template
    }
}

struct GetTemplateOutputResponseBody: Swift.Equatable {
    public let template: SesClientTypes.Template?
}

extension GetTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case template = "Template"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetTemplateResult"))
        let templateDecoded = try containerValues.decodeIfPresent(SesClientTypes.Template.self, forKey: .template)
        template = templateDecoded
    }
}

extension SesClientTypes.IdentityDkimAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimEnabled = "DkimEnabled"
        case dkimTokens = "DkimTokens"
        case dkimVerificationStatus = "DkimVerificationStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if dkimEnabled != false {
            try container.encode(dkimEnabled, forKey: ClientRuntime.Key("DkimEnabled"))
        }
        if let dkimTokens = dkimTokens {
            var dkimTokensContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DkimTokens"))
            for (index0, verificationtoken0) in dkimTokens.enumerated() {
                try dkimTokensContainer.encode(verificationtoken0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let dkimVerificationStatus = dkimVerificationStatus {
            try container.encode(dkimVerificationStatus, forKey: ClientRuntime.Key("DkimVerificationStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dkimEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .dkimEnabled)
        dkimEnabled = dkimEnabledDecoded
        let dkimVerificationStatusDecoded = try containerValues.decodeIfPresent(SesClientTypes.VerificationStatus.self, forKey: .dkimVerificationStatus)
        dkimVerificationStatus = dkimVerificationStatusDecoded
        if containerValues.contains(.dkimTokens) {
            struct KeyVal0{struct member{}}
            let dkimTokensWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dkimTokens)
            if let dkimTokensWrappedContainer = dkimTokensWrappedContainer {
                let dkimTokensContainer = try dkimTokensWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var dkimTokensBuffer:[Swift.String]? = nil
                if let dkimTokensContainer = dkimTokensContainer {
                    dkimTokensBuffer = [Swift.String]()
                    for stringContainer0 in dkimTokensContainer {
                        dkimTokensBuffer?.append(stringContainer0)
                    }
                }
                dkimTokens = dkimTokensBuffer
            } else {
                dkimTokens = []
            }
        } else {
            dkimTokens = nil
        }
    }
}

extension SesClientTypes.IdentityDkimAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IdentityDkimAttributes(dkimEnabled: \(Swift.String(describing: dkimEnabled)), dkimTokens: \(Swift.String(describing: dkimTokens)), dkimVerificationStatus: \(Swift.String(describing: dkimVerificationStatus)))"}
}

extension SesClientTypes {
    /// <p>Represents the DKIM attributes of a verified email address or a domain.</p>
    public struct IdentityDkimAttributes: Swift.Equatable {
        /// <p>Is true if DKIM signing is enabled for email sent from the identity. It's false
        ///             otherwise. The default value is true.</p>
        public let dkimEnabled: Swift.Bool
        /// <p>A set of character strings that represent the domain's identity. Using these tokens,
        ///             you need to create DNS CNAME records that point to DKIM public keys that are hosted by
        ///             Amazon SES. Amazon Web Services eventually detects that you've updated your DNS records. This detection
        ///             process might take up to 72 hours. After successful detection, Amazon SES is able to
        ///             DKIM-sign email originating from that domain. (This only applies to domain identities,
        ///             not email address identities.)</p>
        ///         <p>For more information about creating DNS records using DKIM tokens, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer
        ///                 Guide</a>.</p>
        public let dkimTokens: [Swift.String]?
        /// <p>Describes whether Amazon SES has successfully verified the DKIM DNS records (tokens)
        ///             published in the domain name's DNS. (This only applies to domain identities, not email
        ///             address identities.)</p>
        public let dkimVerificationStatus: SesClientTypes.VerificationStatus?

        public init (
            dkimEnabled: Swift.Bool = false,
            dkimTokens: [Swift.String]? = nil,
            dkimVerificationStatus: SesClientTypes.VerificationStatus? = nil
        )
        {
            self.dkimEnabled = dkimEnabled
            self.dkimTokens = dkimTokens
            self.dkimVerificationStatus = dkimVerificationStatus
        }
    }

}

extension SesClientTypes.IdentityMailFromDomainAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMXFailure = "BehaviorOnMXFailure"
        case mailFromDomain = "MailFromDomain"
        case mailFromDomainStatus = "MailFromDomainStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let behaviorOnMXFailure = behaviorOnMXFailure {
            try container.encode(behaviorOnMXFailure, forKey: ClientRuntime.Key("BehaviorOnMXFailure"))
        }
        if let mailFromDomain = mailFromDomain {
            try container.encode(mailFromDomain, forKey: ClientRuntime.Key("MailFromDomain"))
        }
        if let mailFromDomainStatus = mailFromDomainStatus {
            try container.encode(mailFromDomainStatus, forKey: ClientRuntime.Key("MailFromDomainStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailFromDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mailFromDomain)
        mailFromDomain = mailFromDomainDecoded
        let mailFromDomainStatusDecoded = try containerValues.decodeIfPresent(SesClientTypes.CustomMailFromStatus.self, forKey: .mailFromDomainStatus)
        mailFromDomainStatus = mailFromDomainStatusDecoded
        let behaviorOnMXFailureDecoded = try containerValues.decodeIfPresent(SesClientTypes.BehaviorOnMXFailure.self, forKey: .behaviorOnMXFailure)
        behaviorOnMXFailure = behaviorOnMXFailureDecoded
    }
}

extension SesClientTypes.IdentityMailFromDomainAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IdentityMailFromDomainAttributes(behaviorOnMXFailure: \(Swift.String(describing: behaviorOnMXFailure)), mailFromDomain: \(Swift.String(describing: mailFromDomain)), mailFromDomainStatus: \(Swift.String(describing: mailFromDomainStatus)))"}
}

extension SesClientTypes {
    /// <p>Represents the custom MAIL FROM domain attributes of a verified identity (email
    ///             address or domain).</p>
    public struct IdentityMailFromDomainAttributes: Swift.Equatable {
        /// <p>The action that Amazon SES takes if it cannot successfully read the required MX record when
        ///             you send an email. A value of <code>UseDefaultValue</code> indicates that if Amazon SES
        ///             cannot read the required MX record, it uses amazonses.com (or a subdomain of that) as
        ///             the MAIL FROM domain. A value of <code>RejectMessage</code> indicates that if Amazon SES
        ///             cannot read the required MX record, Amazon SES returns a
        ///                 <code>MailFromDomainNotVerified</code> error and does not send the email.</p>
        ///         <p>The custom MAIL FROM setup states that result in this behavior are
        ///                 <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code>.</p>
        public let behaviorOnMXFailure: SesClientTypes.BehaviorOnMXFailure?
        /// <p>The custom MAIL FROM domain that the identity is configured to use.</p>
        public let mailFromDomain: Swift.String?
        /// <p>The state that indicates whether Amazon SES has successfully read the MX record required
        ///             for custom MAIL FROM domain setup. If the state is <code>Success</code>, Amazon SES uses the
        ///             specified custom MAIL FROM domain when the verified identity sends an email. All other
        ///             states indicate that Amazon SES takes the action described by
        ///                 <code>BehaviorOnMXFailure</code>.</p>
        public let mailFromDomainStatus: SesClientTypes.CustomMailFromStatus?

        public init (
            behaviorOnMXFailure: SesClientTypes.BehaviorOnMXFailure? = nil,
            mailFromDomain: Swift.String? = nil,
            mailFromDomainStatus: SesClientTypes.CustomMailFromStatus? = nil
        )
        {
            self.behaviorOnMXFailure = behaviorOnMXFailure
            self.mailFromDomain = mailFromDomain
            self.mailFromDomainStatus = mailFromDomainStatus
        }
    }

}

extension SesClientTypes.IdentityNotificationAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounceTopic = "BounceTopic"
        case complaintTopic = "ComplaintTopic"
        case deliveryTopic = "DeliveryTopic"
        case forwardingEnabled = "ForwardingEnabled"
        case headersInBounceNotificationsEnabled = "HeadersInBounceNotificationsEnabled"
        case headersInComplaintNotificationsEnabled = "HeadersInComplaintNotificationsEnabled"
        case headersInDeliveryNotificationsEnabled = "HeadersInDeliveryNotificationsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bounceTopic = bounceTopic {
            try container.encode(bounceTopic, forKey: ClientRuntime.Key("BounceTopic"))
        }
        if let complaintTopic = complaintTopic {
            try container.encode(complaintTopic, forKey: ClientRuntime.Key("ComplaintTopic"))
        }
        if let deliveryTopic = deliveryTopic {
            try container.encode(deliveryTopic, forKey: ClientRuntime.Key("DeliveryTopic"))
        }
        if forwardingEnabled != false {
            try container.encode(forwardingEnabled, forKey: ClientRuntime.Key("ForwardingEnabled"))
        }
        if headersInBounceNotificationsEnabled != false {
            try container.encode(headersInBounceNotificationsEnabled, forKey: ClientRuntime.Key("HeadersInBounceNotificationsEnabled"))
        }
        if headersInComplaintNotificationsEnabled != false {
            try container.encode(headersInComplaintNotificationsEnabled, forKey: ClientRuntime.Key("HeadersInComplaintNotificationsEnabled"))
        }
        if headersInDeliveryNotificationsEnabled != false {
            try container.encode(headersInDeliveryNotificationsEnabled, forKey: ClientRuntime.Key("HeadersInDeliveryNotificationsEnabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bounceTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bounceTopic)
        bounceTopic = bounceTopicDecoded
        let complaintTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complaintTopic)
        complaintTopic = complaintTopicDecoded
        let deliveryTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryTopic)
        deliveryTopic = deliveryTopicDecoded
        let forwardingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .forwardingEnabled)
        forwardingEnabled = forwardingEnabledDecoded
        let headersInBounceNotificationsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .headersInBounceNotificationsEnabled)
        headersInBounceNotificationsEnabled = headersInBounceNotificationsEnabledDecoded
        let headersInComplaintNotificationsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .headersInComplaintNotificationsEnabled)
        headersInComplaintNotificationsEnabled = headersInComplaintNotificationsEnabledDecoded
        let headersInDeliveryNotificationsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .headersInDeliveryNotificationsEnabled)
        headersInDeliveryNotificationsEnabled = headersInDeliveryNotificationsEnabledDecoded
    }
}

extension SesClientTypes.IdentityNotificationAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IdentityNotificationAttributes(bounceTopic: \(Swift.String(describing: bounceTopic)), complaintTopic: \(Swift.String(describing: complaintTopic)), deliveryTopic: \(Swift.String(describing: deliveryTopic)), forwardingEnabled: \(Swift.String(describing: forwardingEnabled)), headersInBounceNotificationsEnabled: \(Swift.String(describing: headersInBounceNotificationsEnabled)), headersInComplaintNotificationsEnabled: \(Swift.String(describing: headersInComplaintNotificationsEnabled)), headersInDeliveryNotificationsEnabled: \(Swift.String(describing: headersInDeliveryNotificationsEnabled)))"}
}

extension SesClientTypes {
    /// <p>Represents the notification attributes of an identity, including whether an identity
    ///             has Amazon Simple Notification Service (Amazon SNS) topics set for bounce, complaint, and/or delivery notifications,
    ///             and whether feedback forwarding is enabled for bounce and complaint
    ///             notifications.</p>
    public struct IdentityNotificationAttributes: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish bounce
        ///             notifications.</p>
        public let bounceTopic: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish complaint
        ///             notifications.</p>
        public let complaintTopic: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish delivery
        ///             notifications.</p>
        public let deliveryTopic: Swift.String?
        /// <p>Describes whether Amazon SES will forward bounce and complaint notifications as email.
        ///                 <code>true</code> indicates that Amazon SES will forward bounce and complaint
        ///             notifications as email, while <code>false</code> indicates that bounce and complaint
        ///             notifications will be published only to the specified bounce and complaint Amazon SNS
        ///             topics.</p>
        public let forwardingEnabled: Swift.Bool
        /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of
        ///             type <code>Bounce</code>. A value of <code>true</code> specifies that Amazon SES will include
        ///             headers in bounce notifications, and a value of <code>false</code> specifies that Amazon SES
        ///             will not include headers in bounce notifications.</p>
        public let headersInBounceNotificationsEnabled: Swift.Bool
        /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of
        ///             type <code>Complaint</code>. A value of <code>true</code> specifies that Amazon SES will
        ///             include headers in complaint notifications, and a value of <code>false</code> specifies
        ///             that Amazon SES will not include headers in complaint notifications.</p>
        public let headersInComplaintNotificationsEnabled: Swift.Bool
        /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of
        ///             type <code>Delivery</code>. A value of <code>true</code> specifies that Amazon SES will
        ///             include headers in delivery notifications, and a value of <code>false</code> specifies
        ///             that Amazon SES will not include headers in delivery notifications.</p>
        public let headersInDeliveryNotificationsEnabled: Swift.Bool

        public init (
            bounceTopic: Swift.String? = nil,
            complaintTopic: Swift.String? = nil,
            deliveryTopic: Swift.String? = nil,
            forwardingEnabled: Swift.Bool = false,
            headersInBounceNotificationsEnabled: Swift.Bool = false,
            headersInComplaintNotificationsEnabled: Swift.Bool = false,
            headersInDeliveryNotificationsEnabled: Swift.Bool = false
        )
        {
            self.bounceTopic = bounceTopic
            self.complaintTopic = complaintTopic
            self.deliveryTopic = deliveryTopic
            self.forwardingEnabled = forwardingEnabled
            self.headersInBounceNotificationsEnabled = headersInBounceNotificationsEnabled
            self.headersInComplaintNotificationsEnabled = headersInComplaintNotificationsEnabled
            self.headersInDeliveryNotificationsEnabled = headersInDeliveryNotificationsEnabled
        }
    }

}

extension SesClientTypes {
    public enum IdentityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case domain
        case emailaddress
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityType] {
            return [
                .domain,
                .emailaddress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .domain: return "Domain"
            case .emailaddress: return "EmailAddress"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IdentityType(rawValue: rawValue) ?? IdentityType.sdkUnknown(rawValue)
        }
    }
}

extension SesClientTypes.IdentityVerificationAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verificationStatus = "VerificationStatus"
        case verificationToken = "VerificationToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let verificationStatus = verificationStatus {
            try container.encode(verificationStatus, forKey: ClientRuntime.Key("VerificationStatus"))
        }
        if let verificationToken = verificationToken {
            try container.encode(verificationToken, forKey: ClientRuntime.Key("VerificationToken"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verificationStatusDecoded = try containerValues.decodeIfPresent(SesClientTypes.VerificationStatus.self, forKey: .verificationStatus)
        verificationStatus = verificationStatusDecoded
        let verificationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verificationToken)
        verificationToken = verificationTokenDecoded
    }
}

extension SesClientTypes.IdentityVerificationAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IdentityVerificationAttributes(verificationStatus: \(Swift.String(describing: verificationStatus)), verificationToken: \(Swift.String(describing: verificationToken)))"}
}

extension SesClientTypes {
    /// <p>Represents the verification attributes of a single identity.</p>
    public struct IdentityVerificationAttributes: Swift.Equatable {
        /// <p>The verification status of the identity: "Pending", "Success", "Failed", or
        ///             "TemporaryFailure".</p>
        public let verificationStatus: SesClientTypes.VerificationStatus?
        /// <p>The verification token for a domain identity. Null for email address
        ///             identities.</p>
        public let verificationToken: Swift.String?

        public init (
            verificationStatus: SesClientTypes.VerificationStatus? = nil,
            verificationToken: Swift.String? = nil
        )
        {
            self.verificationStatus = verificationStatus
            self.verificationToken = verificationToken
        }
    }

}

extension InvalidCloudWatchDestinationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidCloudWatchDestinationException(configurationSetName: \(Swift.String(describing: configurationSetName)), eventDestinationName: \(Swift.String(describing: eventDestinationName)), message: \(Swift.String(describing: message)))"}
}

extension InvalidCloudWatchDestinationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidCloudWatchDestinationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.eventDestinationName = output.error.eventDestinationName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.eventDestinationName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the Amazon CloudWatch destination is invalid. See the error message for
///             details.</p>
public struct InvalidCloudWatchDestinationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that the configuration set does not exist.</p>
    public var configurationSetName: Swift.String?
    /// <p>Indicates that the event destination does not exist.</p>
    public var eventDestinationName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
        self.message = message
    }
}

struct InvalidCloudWatchDestinationExceptionBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let eventDestinationName: Swift.String?
    public let message: Swift.String?
}

extension InvalidCloudWatchDestinationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidConfigurationSetException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidConfigurationSetException(message: \(Swift.String(describing: message)))"}
}

extension InvalidConfigurationSetException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidConfigurationSetExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the configuration set is invalid. See the error message for
///             details.</p>
public struct InvalidConfigurationSetException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidConfigurationSetExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidConfigurationSetExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeliveryOptionsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidDeliveryOptionsException(message: \(Swift.String(describing: message)))"}
}

extension InvalidDeliveryOptionsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidDeliveryOptionsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that provided delivery option is invalid.</p>
public struct InvalidDeliveryOptionsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeliveryOptionsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidDeliveryOptionsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidFirehoseDestinationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidFirehoseDestinationException(configurationSetName: \(Swift.String(describing: configurationSetName)), eventDestinationName: \(Swift.String(describing: eventDestinationName)), message: \(Swift.String(describing: message)))"}
}

extension InvalidFirehoseDestinationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidFirehoseDestinationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.eventDestinationName = output.error.eventDestinationName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.eventDestinationName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the Amazon Kinesis Firehose destination is invalid. See the error
///             message for details.</p>
public struct InvalidFirehoseDestinationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that the configuration set does not exist.</p>
    public var configurationSetName: Swift.String?
    /// <p>Indicates that the event destination does not exist.</p>
    public var eventDestinationName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
        self.message = message
    }
}

struct InvalidFirehoseDestinationExceptionBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let eventDestinationName: Swift.String?
    public let message: Swift.String?
}

extension InvalidFirehoseDestinationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidLambdaFunctionException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidLambdaFunctionException(functionArn: \(Swift.String(describing: functionArn)), message: \(Swift.String(describing: message)))"}
}

extension InvalidLambdaFunctionException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidLambdaFunctionExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.functionArn = output.error.functionArn
            self.message = output.error.message
        } else {
            self.functionArn = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the provided AWS Lambda function is invalid, or that Amazon SES could
///             not execute the provided function, possibly due to permissions issues. For information
///             about giving permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES
///                 Developer Guide</a>.</p>
public struct InvalidLambdaFunctionException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that the ARN of the function was not found.</p>
    public var functionArn: Swift.String?
    public var message: Swift.String?

    public init (
        functionArn: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.functionArn = functionArn
        self.message = message
    }
}

struct InvalidLambdaFunctionExceptionBody: Swift.Equatable {
    public let functionArn: Swift.String?
    public let message: Swift.String?
}

extension InvalidLambdaFunctionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case functionArn = "FunctionArn"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidPolicyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidPolicyException(message: \(Swift.String(describing: message)))"}
}

extension InvalidPolicyException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidPolicyExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the provided policy is invalid. Check the error stack for more
///             information about what caused the error.</p>
public struct InvalidPolicyException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidPolicyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidPolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRenderingParameterException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidRenderingParameterException(templateName: \(Swift.String(describing: templateName)), message: \(Swift.String(describing: message)))"}
}

extension InvalidRenderingParameterException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidRenderingParameterExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.templateName = output.error.templateName
        } else {
            self.templateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that one or more of the replacement values you provided is invalid. This
///             error may occur when the TemplateData object contains invalid JSON.</p>
public struct InvalidRenderingParameterException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var templateName: Swift.String?

    public init (
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.message = message
        self.templateName = templateName
    }
}

struct InvalidRenderingParameterExceptionBody: Swift.Equatable {
    public let templateName: Swift.String?
    public let message: Swift.String?
}

extension InvalidRenderingParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidS3ConfigurationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidS3ConfigurationException(bucket: \(Swift.String(describing: bucket)), message: \(Swift.String(describing: message)))"}
}

extension InvalidS3ConfigurationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidS3ConfigurationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.bucket = output.error.bucket
            self.message = output.error.message
        } else {
            self.bucket = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the provided Amazon S3 bucket or AWS KMS encryption key is invalid, or
///             that Amazon SES could not publish to the bucket, possibly due to permissions issues. For
///             information about giving permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES
///                 Developer Guide</a>.</p>
public struct InvalidS3ConfigurationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicated that the S3 Bucket was not found.</p>
    public var bucket: Swift.String?
    public var message: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.message = message
    }
}

struct InvalidS3ConfigurationExceptionBody: Swift.Equatable {
    public let bucket: Swift.String?
    public let message: Swift.String?
}

extension InvalidS3ConfigurationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSNSDestinationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidSNSDestinationException(configurationSetName: \(Swift.String(describing: configurationSetName)), eventDestinationName: \(Swift.String(describing: eventDestinationName)), message: \(Swift.String(describing: message)))"}
}

extension InvalidSNSDestinationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidSNSDestinationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.eventDestinationName = output.error.eventDestinationName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.eventDestinationName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the Amazon Simple Notification Service (Amazon SNS) destination is
///             invalid. See the error message for details.</p>
public struct InvalidSNSDestinationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that the configuration set does not exist.</p>
    public var configurationSetName: Swift.String?
    /// <p>Indicates that the event destination does not exist.</p>
    public var eventDestinationName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
        self.message = message
    }
}

struct InvalidSNSDestinationExceptionBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let eventDestinationName: Swift.String?
    public let message: Swift.String?
}

extension InvalidSNSDestinationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSnsTopicException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidSnsTopicException(topic: \(Swift.String(describing: topic)), message: \(Swift.String(describing: message)))"}
}

extension InvalidSnsTopicException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidSnsTopicExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.topic = output.error.topic
        } else {
            self.topic = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the provided Amazon SNS topic is invalid, or that Amazon SES could not
///             publish to the topic, possibly due to permissions issues. For information about giving
///             permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES
///                 Developer Guide</a>.</p>
public struct InvalidSnsTopicException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// <p>Indicates that the topic does not exist.</p>
    public var topic: Swift.String?

    public init (
        message: Swift.String? = nil,
        topic: Swift.String? = nil
    )
    {
        self.message = message
        self.topic = topic
    }
}

struct InvalidSnsTopicExceptionBody: Swift.Equatable {
    public let topic: Swift.String?
    public let message: Swift.String?
}

extension InvalidSnsTopicExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topic = "Topic"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topic)
        topic = topicDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTemplateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidTemplateException(templateName: \(Swift.String(describing: templateName)), message: \(Swift.String(describing: message)))"}
}

extension InvalidTemplateException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidTemplateExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.templateName = output.error.templateName
        } else {
            self.templateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the template that you specified could not be rendered. This issue may
///             occur when a template refers to a partial that does not exist.</p>
public struct InvalidTemplateException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var templateName: Swift.String?

    public init (
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.message = message
        self.templateName = templateName
    }
}

struct InvalidTemplateExceptionBody: Swift.Equatable {
    public let templateName: Swift.String?
    public let message: Swift.String?
}

extension InvalidTemplateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTrackingOptionsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidTrackingOptionsException(message: \(Swift.String(describing: message)))"}
}

extension InvalidTrackingOptionsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidTrackingOptionsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the custom domain to be used for open and click tracking redirects is
///             invalid. This error appears most often in the following situations:</p>
///         <ul>
///             <li>
///                 <p>When the tracking domain you specified is not verified in Amazon SES.</p>
///             </li>
///             <li>
///                 <p>When the tracking domain you specified is not a valid domain or
///                     subdomain.</p>
///             </li>
///          </ul>
public struct InvalidTrackingOptionsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTrackingOptionsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidTrackingOptionsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes {
    public enum InvocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case event
        case requestresponse
        case sdkUnknown(Swift.String)

        public static var allCases: [InvocationType] {
            return [
                .event,
                .requestresponse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .event: return "Event"
            case .requestresponse: return "RequestResponse"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InvocationType(rawValue: rawValue) ?? InvocationType.sdkUnknown(rawValue)
        }
    }
}

extension SesClientTypes.KinesisFirehoseDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamARN = "DeliveryStreamARN"
        case iAMRoleARN = "IAMRoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deliveryStreamARN = deliveryStreamARN {
            try container.encode(deliveryStreamARN, forKey: ClientRuntime.Key("DeliveryStreamARN"))
        }
        if let iAMRoleARN = iAMRoleARN {
            try container.encode(iAMRoleARN, forKey: ClientRuntime.Key("IAMRoleARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iAMRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iAMRoleARN)
        iAMRoleARN = iAMRoleARNDecoded
        let deliveryStreamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamARN)
        deliveryStreamARN = deliveryStreamARNDecoded
    }
}

extension SesClientTypes.KinesisFirehoseDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KinesisFirehoseDestination(deliveryStreamARN: \(Swift.String(describing: deliveryStreamARN)), iAMRoleARN: \(Swift.String(describing: iAMRoleARN)))"}
}

extension SesClientTypes {
    /// <p>Contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event
    ///             destination.</p>
    ///         <p>Event destinations, such as Amazon Kinesis Firehose, are associated with configuration sets, which enable
    ///             you to publish email sending events. For information about using configuration sets, see
    ///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public struct KinesisFirehoseDestination: Swift.Equatable {
        /// <p>The ARN of the Amazon Kinesis Firehose stream that email sending events should be published to.</p>
        public let deliveryStreamARN: Swift.String?
        /// <p>The ARN of the IAM role under which Amazon SES publishes email sending events to the Amazon Kinesis Firehose
        ///             stream.</p>
        public let iAMRoleARN: Swift.String?

        public init (
            deliveryStreamARN: Swift.String? = nil,
            iAMRoleARN: Swift.String? = nil
        )
        {
            self.deliveryStreamARN = deliveryStreamARN
            self.iAMRoleARN = iAMRoleARN
        }
    }

}

extension SesClientTypes.LambdaAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case functionArn = "FunctionArn"
        case invocationType = "InvocationType"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let functionArn = functionArn {
            try container.encode(functionArn, forKey: ClientRuntime.Key("FunctionArn"))
        }
        if let invocationType = invocationType {
            try container.encode(invocationType, forKey: ClientRuntime.Key("InvocationType"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
        let invocationTypeDecoded = try containerValues.decodeIfPresent(SesClientTypes.InvocationType.self, forKey: .invocationType)
        invocationType = invocationTypeDecoded
    }
}

extension SesClientTypes.LambdaAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaAction(functionArn: \(Swift.String(describing: functionArn)), invocationType: \(Swift.String(describing: invocationType)), topicArn: \(Swift.String(describing: topicArn)))"}
}

extension SesClientTypes {
    /// <p>When included in a receipt rule, this action calls an AWS Lambda function and,
    ///             optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).</p>
    ///         <p>To enable Amazon SES to call your AWS Lambda function or to publish to an Amazon SNS topic of
    ///             another account, Amazon SES must have permission to access those resources. For information
    ///             about giving permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    ///         <p>For information about using AWS Lambda actions in receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-lambda.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public struct LambdaAction: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the AWS Lambda function. An example of an AWS Lambda
        ///             function ARN is <code>arn:aws:lambda:us-west-2:account-id:function:MyFunction</code>.
        ///             For more information about AWS Lambda, see the <a href="https://docs.aws.amazon.com/lambda/latest/dg/welcome.html">AWS Lambda Developer Guide</a>.</p>
        public let functionArn: Swift.String?
        /// <p>The invocation type of the AWS Lambda function. An invocation type of
        ///                 <code>RequestResponse</code> means that the execution of the function will
        ///             immediately result in a response, and a value of <code>Event</code> means that the
        ///             function will be invoked asynchronously. The default value is <code>Event</code>. For
        ///             information about AWS Lambda invocation types, see the <a href="https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html">AWS Lambda Developer Guide</a>.</p>
        ///         <important>
        ///             <p>There is a 30-second timeout on <code>RequestResponse</code> invocations. You
        ///                 should use <code>Event</code> invocation in most cases. Use
        ///                     <code>RequestResponse</code> only when you want to make a mail flow decision,
        ///                 such as whether to stop the receipt rule or the receipt rule set.</p>
        ///         </important>
        public let invocationType: SesClientTypes.InvocationType?
        /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the Lambda action is
        ///             taken. An example of an Amazon SNS topic ARN is
        ///                 <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more information about
        ///             Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
        public let topicArn: Swift.String?

        public init (
            functionArn: Swift.String? = nil,
            invocationType: SesClientTypes.InvocationType? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.functionArn = functionArn
            self.invocationType = invocationType
            self.topicArn = topicArn
        }
    }

}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<LimitExceededExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that a resource could not be created because of service limits. For a list
///             of Amazon SES limits, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/limits.html">Amazon SES Developer
///             Guide</a>.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListConfigurationSetsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListConfigurationSetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListConfigurationSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListConfigurationSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListConfigurationSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListConfigurationSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListConfigurationSetsOutputError>
}

extension ListConfigurationSetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListConfigurationSetsInput(maxItems: \(Swift.String(describing: maxItems)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListConfigurationSetsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListConfigurationSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListConfigurationSetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListConfigurationSetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListConfigurationSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListConfigurationSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListConfigurationSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListConfigurationSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListConfigurationSetsOutputError>
}

public struct ListConfigurationSetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListConfigurationSetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListConfigurationSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListConfigurationSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListConfigurationSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListConfigurationSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListConfigurationSetsOutputError>
}

/// <p>Represents a request to list the configuration sets associated with your AWS account.
///             Configuration sets enable you to publish email sending events. For information about
///             using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct ListConfigurationSetsInput: Swift.Equatable {
    /// <p>The number of configuration sets to return.</p>
    public let maxItems: Swift.Int?
    /// <p>A token returned from a previous call to <code>ListConfigurationSets</code> to
    ///             indicate the position of the configuration set in the configuration set list.</p>
    public let nextToken: Swift.String?

    public init (
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

extension ListConfigurationSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListConfigurationSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListConfigurationSetsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListConfigurationSetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListConfigurationSetsOutputResponse(configurationSets: \(Swift.String(describing: configurationSets)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListConfigurationSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListConfigurationSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSets = output.configurationSets
            self.nextToken = output.nextToken
        } else {
            self.configurationSets = nil
            self.nextToken = nil
        }
    }
}

/// <p>A list of configuration sets associated with your AWS account. Configuration sets
///             enable you to publish email sending events. For information about using configuration
///             sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct ListConfigurationSetsOutputResponse: Swift.Equatable {
    /// <p>A list of configuration sets.</p>
    public let configurationSets: [SesClientTypes.ConfigurationSet]?
    /// <p>A token indicating that there are additional configuration sets available to be
    ///             listed. Pass this token to successive calls of <code>ListConfigurationSets</code>.
    ///         </p>
    public let nextToken: Swift.String?

    public init (
        configurationSets: [SesClientTypes.ConfigurationSet]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationSets = configurationSets
        self.nextToken = nextToken
    }
}

struct ListConfigurationSetsOutputResponseBody: Swift.Equatable {
    public let configurationSets: [SesClientTypes.ConfigurationSet]?
    public let nextToken: Swift.String?
}

extension ListConfigurationSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSets = "ConfigurationSets"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListConfigurationSetsResult"))
        if containerValues.contains(.configurationSets) {
            struct KeyVal0{struct member{}}
            let configurationSetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .configurationSets)
            if let configurationSetsWrappedContainer = configurationSetsWrappedContainer {
                let configurationSetsContainer = try configurationSetsWrappedContainer.decodeIfPresent([SesClientTypes.ConfigurationSet].self, forKey: .member)
                var configurationSetsBuffer:[SesClientTypes.ConfigurationSet]? = nil
                if let configurationSetsContainer = configurationSetsContainer {
                    configurationSetsBuffer = [SesClientTypes.ConfigurationSet]()
                    for structureContainer0 in configurationSetsContainer {
                        configurationSetsBuffer?.append(structureContainer0)
                    }
                }
                configurationSets = configurationSetsBuffer
            } else {
                configurationSets = []
            }
        } else {
            configurationSets = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListCustomVerificationEmailTemplatesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCustomVerificationEmailTemplatesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCustomVerificationEmailTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCustomVerificationEmailTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCustomVerificationEmailTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCustomVerificationEmailTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCustomVerificationEmailTemplatesOutputError>
}

extension ListCustomVerificationEmailTemplatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCustomVerificationEmailTemplatesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListCustomVerificationEmailTemplatesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListCustomVerificationEmailTemplates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListCustomVerificationEmailTemplatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCustomVerificationEmailTemplatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCustomVerificationEmailTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCustomVerificationEmailTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCustomVerificationEmailTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCustomVerificationEmailTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCustomVerificationEmailTemplatesOutputError>
}

public struct ListCustomVerificationEmailTemplatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCustomVerificationEmailTemplatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCustomVerificationEmailTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCustomVerificationEmailTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCustomVerificationEmailTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCustomVerificationEmailTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCustomVerificationEmailTemplatesOutputError>
}

/// <p>Represents a request to list the existing custom verification email templates for your
///             account.</p>
///         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom
///                 Verification Email Templates</a> in the <i>Amazon SES Developer
///                 Guide</i>.</p>
public struct ListCustomVerificationEmailTemplatesInput: Swift.Equatable {
    /// <p>The maximum number of custom verification email templates to return. This value must
    ///             be at least 1 and less than or equal to 50. If you do not specify a value, or if you
    ///             specify a value less than 1 or greater than 50, the operation will return up to 50
    ///             results.</p>
    public let maxResults: Swift.Int?
    /// <p>An array the contains the name and creation time stamp for each template in your Amazon SES
    ///             account.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListCustomVerificationEmailTemplatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListCustomVerificationEmailTemplatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCustomVerificationEmailTemplatesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCustomVerificationEmailTemplatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCustomVerificationEmailTemplatesOutputResponse(customVerificationEmailTemplates: \(Swift.String(describing: customVerificationEmailTemplates)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListCustomVerificationEmailTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCustomVerificationEmailTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.customVerificationEmailTemplates = output.customVerificationEmailTemplates
            self.nextToken = output.nextToken
        } else {
            self.customVerificationEmailTemplates = nil
            self.nextToken = nil
        }
    }
}

/// <p>A paginated list of custom verification email templates.</p>
public struct ListCustomVerificationEmailTemplatesOutputResponse: Swift.Equatable {
    /// <p>A list of the custom verification email templates that exist in your account.</p>
    public let customVerificationEmailTemplates: [SesClientTypes.CustomVerificationEmailTemplate]?
    /// <p>A token indicating that there are additional custom verification email templates
    ///             available to be listed. Pass this token to a subsequent call to
    ///                 <code>ListTemplates</code> to retrieve the next 50 custom verification email
    ///             templates.</p>
    public let nextToken: Swift.String?

    public init (
        customVerificationEmailTemplates: [SesClientTypes.CustomVerificationEmailTemplate]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.customVerificationEmailTemplates = customVerificationEmailTemplates
        self.nextToken = nextToken
    }
}

struct ListCustomVerificationEmailTemplatesOutputResponseBody: Swift.Equatable {
    public let customVerificationEmailTemplates: [SesClientTypes.CustomVerificationEmailTemplate]?
    public let nextToken: Swift.String?
}

extension ListCustomVerificationEmailTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customVerificationEmailTemplates = "CustomVerificationEmailTemplates"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListCustomVerificationEmailTemplatesResult"))
        if containerValues.contains(.customVerificationEmailTemplates) {
            struct KeyVal0{struct member{}}
            let customVerificationEmailTemplatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .customVerificationEmailTemplates)
            if let customVerificationEmailTemplatesWrappedContainer = customVerificationEmailTemplatesWrappedContainer {
                let customVerificationEmailTemplatesContainer = try customVerificationEmailTemplatesWrappedContainer.decodeIfPresent([SesClientTypes.CustomVerificationEmailTemplate].self, forKey: .member)
                var customVerificationEmailTemplatesBuffer:[SesClientTypes.CustomVerificationEmailTemplate]? = nil
                if let customVerificationEmailTemplatesContainer = customVerificationEmailTemplatesContainer {
                    customVerificationEmailTemplatesBuffer = [SesClientTypes.CustomVerificationEmailTemplate]()
                    for structureContainer0 in customVerificationEmailTemplatesContainer {
                        customVerificationEmailTemplatesBuffer?.append(structureContainer0)
                    }
                }
                customVerificationEmailTemplates = customVerificationEmailTemplatesBuffer
            } else {
                customVerificationEmailTemplates = []
            }
        } else {
            customVerificationEmailTemplates = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListIdentitiesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIdentitiesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIdentitiesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIdentitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIdentitiesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIdentitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIdentitiesOutputError>
}

extension ListIdentitiesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIdentitiesInput(identityType: \(Swift.String(describing: identityType)), maxItems: \(Swift.String(describing: maxItems)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListIdentitiesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identityType = identityType {
            try container.encode(identityType, forKey: ClientRuntime.Key("IdentityType"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListIdentities", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListIdentitiesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIdentitiesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIdentitiesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIdentitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIdentitiesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIdentitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIdentitiesOutputError>
}

public struct ListIdentitiesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIdentitiesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIdentitiesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIdentitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIdentitiesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIdentitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIdentitiesOutputError>
}

/// <p>Represents a request to return a list of all identities (email addresses and domains)
///             that you have attempted to verify under your AWS account, regardless of verification
///             status.</p>
public struct ListIdentitiesInput: Swift.Equatable {
    /// <p>The type of the identities to list. Possible values are "EmailAddress" and "Domain".
    ///             If this parameter is omitted, then all identities will be listed.</p>
    public let identityType: SesClientTypes.IdentityType?
    /// <p>The maximum number of identities per page. Possible values are 1-1000
    ///             inclusive.</p>
    public let maxItems: Swift.Int?
    /// <p>The token to use for pagination.</p>
    public let nextToken: Swift.String?

    public init (
        identityType: SesClientTypes.IdentityType? = nil,
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.identityType = identityType
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

extension ListIdentitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListIdentitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListIdentitiesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIdentitiesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIdentitiesOutputResponse(identities: \(Swift.String(describing: identities)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListIdentitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListIdentitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.identities = output.identities
            self.nextToken = output.nextToken
        } else {
            self.identities = nil
            self.nextToken = nil
        }
    }
}

/// <p>A list of all identities that you have attempted to verify under your AWS account,
///             regardless of verification status.</p>
public struct ListIdentitiesOutputResponse: Swift.Equatable {
    /// <p>A list of identities.</p>
    public let identities: [Swift.String]?
    /// <p>The token used for pagination.</p>
    public let nextToken: Swift.String?

    public init (
        identities: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.identities = identities
        self.nextToken = nextToken
    }
}

struct ListIdentitiesOutputResponseBody: Swift.Equatable {
    public let identities: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListIdentitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identities = "Identities"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListIdentitiesResult"))
        if containerValues.contains(.identities) {
            struct KeyVal0{struct member{}}
            let identitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .identities)
            if let identitiesWrappedContainer = identitiesWrappedContainer {
                let identitiesContainer = try identitiesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var identitiesBuffer:[Swift.String]? = nil
                if let identitiesContainer = identitiesContainer {
                    identitiesBuffer = [Swift.String]()
                    for stringContainer0 in identitiesContainer {
                        identitiesBuffer?.append(stringContainer0)
                    }
                }
                identities = identitiesBuffer
            } else {
                identities = []
            }
        } else {
            identities = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListIdentityPoliciesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIdentityPoliciesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIdentityPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIdentityPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIdentityPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIdentityPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIdentityPoliciesOutputError>
}

extension ListIdentityPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIdentityPoliciesInput(identity: \(Swift.String(describing: identity)))"}
}

extension ListIdentityPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("ListIdentityPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListIdentityPoliciesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIdentityPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIdentityPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIdentityPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIdentityPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIdentityPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIdentityPoliciesOutputError>
}

public struct ListIdentityPoliciesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIdentityPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIdentityPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIdentityPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIdentityPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIdentityPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIdentityPoliciesOutputError>
}

/// <p>Represents a request to return a list of sending authorization policies that are
///             attached to an identity. Sending authorization is an Amazon SES feature that enables you to
///             authorize other senders to use your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
public struct ListIdentityPoliciesInput: Swift.Equatable {
    /// <p>The identity that is associated with the policy for which the policies will be listed.
    ///             You can specify an identity by using its name or by using its Amazon Resource Name
    ///             (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>,
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
    ///         <p>To successfully call this API, you must own the identity.</p>
    public let identity: Swift.String?

    public init (
        identity: Swift.String? = nil
    )
    {
        self.identity = identity
    }
}

extension ListIdentityPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListIdentityPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListIdentityPoliciesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIdentityPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIdentityPoliciesOutputResponse(policyNames: \(Swift.String(describing: policyNames)))"}
}

extension ListIdentityPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListIdentityPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policyNames = output.policyNames
        } else {
            self.policyNames = nil
        }
    }
}

/// <p>A list of names of sending authorization policies that apply to an identity.</p>
public struct ListIdentityPoliciesOutputResponse: Swift.Equatable {
    /// <p>A list of names of policies that apply to the specified identity.</p>
    public let policyNames: [Swift.String]?

    public init (
        policyNames: [Swift.String]? = nil
    )
    {
        self.policyNames = policyNames
    }
}

struct ListIdentityPoliciesOutputResponseBody: Swift.Equatable {
    public let policyNames: [Swift.String]?
}

extension ListIdentityPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyNames = "PolicyNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListIdentityPoliciesResult"))
        if containerValues.contains(.policyNames) {
            struct KeyVal0{struct member{}}
            let policyNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyNames)
            if let policyNamesWrappedContainer = policyNamesWrappedContainer {
                let policyNamesContainer = try policyNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyNamesBuffer:[Swift.String]? = nil
                if let policyNamesContainer = policyNamesContainer {
                    policyNamesBuffer = [Swift.String]()
                    for stringContainer0 in policyNamesContainer {
                        policyNamesBuffer?.append(stringContainer0)
                    }
                }
                policyNames = policyNamesBuffer
            } else {
                policyNames = []
            }
        } else {
            policyNames = nil
        }
    }
}

public struct ListReceiptFiltersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReceiptFiltersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReceiptFiltersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReceiptFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReceiptFiltersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReceiptFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReceiptFiltersOutputError>
}

extension ListReceiptFiltersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReceiptFiltersInput()"}
}

extension ListReceiptFiltersInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("ListReceiptFilters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListReceiptFiltersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReceiptFiltersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReceiptFiltersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReceiptFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReceiptFiltersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReceiptFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReceiptFiltersOutputError>
}

public struct ListReceiptFiltersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReceiptFiltersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReceiptFiltersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReceiptFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReceiptFiltersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReceiptFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReceiptFiltersOutputError>
}

/// <p>Represents a request to list the IP address filters that exist under your AWS account.
///             You use IP address filters when you receive email with Amazon SES. For more information, see
///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct ListReceiptFiltersInput: Swift.Equatable {

    public init() {}
}

extension ListReceiptFiltersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListReceiptFiltersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListReceiptFiltersOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReceiptFiltersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReceiptFiltersOutputResponse(filters: \(Swift.String(describing: filters)))"}
}

extension ListReceiptFiltersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListReceiptFiltersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.filters = output.filters
        } else {
            self.filters = nil
        }
    }
}

/// <p>A list of IP address filters that exist under your AWS account.</p>
public struct ListReceiptFiltersOutputResponse: Swift.Equatable {
    /// <p>A list of IP address filter data structures, which each consist of a name, an IP
    ///             address range, and whether to allow or block mail from it.</p>
    public let filters: [SesClientTypes.ReceiptFilter]?

    public init (
        filters: [SesClientTypes.ReceiptFilter]? = nil
    )
    {
        self.filters = filters
    }
}

struct ListReceiptFiltersOutputResponseBody: Swift.Equatable {
    public let filters: [SesClientTypes.ReceiptFilter]?
}

extension ListReceiptFiltersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListReceiptFiltersResult"))
        if containerValues.contains(.filters) {
            struct KeyVal0{struct member{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([SesClientTypes.ReceiptFilter].self, forKey: .member)
                var filtersBuffer:[SesClientTypes.ReceiptFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [SesClientTypes.ReceiptFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
    }
}

public struct ListReceiptRuleSetsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReceiptRuleSetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReceiptRuleSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReceiptRuleSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReceiptRuleSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReceiptRuleSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReceiptRuleSetsOutputError>
}

extension ListReceiptRuleSetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReceiptRuleSetsInput(nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListReceiptRuleSetsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListReceiptRuleSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListReceiptRuleSetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReceiptRuleSetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReceiptRuleSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReceiptRuleSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReceiptRuleSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReceiptRuleSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReceiptRuleSetsOutputError>
}

public struct ListReceiptRuleSetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReceiptRuleSetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReceiptRuleSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReceiptRuleSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReceiptRuleSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReceiptRuleSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReceiptRuleSetsOutputError>
}

/// <p>Represents a request to list the receipt rule sets that exist under your AWS account.
///             You use receipt rule sets to receive email with Amazon SES. For more information, see the
///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct ListReceiptRuleSetsInput: Swift.Equatable {
    /// <p>A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate
    ///             the position in the receipt rule set list.</p>
    public let nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

extension ListReceiptRuleSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListReceiptRuleSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListReceiptRuleSetsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReceiptRuleSetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReceiptRuleSetsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), ruleSets: \(Swift.String(describing: ruleSets)))"}
}

extension ListReceiptRuleSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListReceiptRuleSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.ruleSets = output.ruleSets
        } else {
            self.nextToken = nil
            self.ruleSets = nil
        }
    }
}

/// <p>A list of receipt rule sets that exist under your AWS account.</p>
public struct ListReceiptRuleSetsOutputResponse: Swift.Equatable {
    /// <p>A token indicating that there are additional receipt rule sets available to be listed.
    ///             Pass this token to successive calls of <code>ListReceiptRuleSets</code> to retrieve up
    ///             to 100 receipt rule sets at a time.</p>
    public let nextToken: Swift.String?
    /// <p>The metadata for the currently active receipt rule set. The metadata consists of the
    ///             rule set name and the timestamp of when the rule set was created.</p>
    public let ruleSets: [SesClientTypes.ReceiptRuleSetMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        ruleSets: [SesClientTypes.ReceiptRuleSetMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.ruleSets = ruleSets
    }
}

struct ListReceiptRuleSetsOutputResponseBody: Swift.Equatable {
    public let ruleSets: [SesClientTypes.ReceiptRuleSetMetadata]?
    public let nextToken: Swift.String?
}

extension ListReceiptRuleSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case ruleSets = "RuleSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListReceiptRuleSetsResult"))
        if containerValues.contains(.ruleSets) {
            struct KeyVal0{struct member{}}
            let ruleSetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .ruleSets)
            if let ruleSetsWrappedContainer = ruleSetsWrappedContainer {
                let ruleSetsContainer = try ruleSetsWrappedContainer.decodeIfPresent([SesClientTypes.ReceiptRuleSetMetadata].self, forKey: .member)
                var ruleSetsBuffer:[SesClientTypes.ReceiptRuleSetMetadata]? = nil
                if let ruleSetsContainer = ruleSetsContainer {
                    ruleSetsBuffer = [SesClientTypes.ReceiptRuleSetMetadata]()
                    for structureContainer0 in ruleSetsContainer {
                        ruleSetsBuffer?.append(structureContainer0)
                    }
                }
                ruleSets = ruleSetsBuffer
            } else {
                ruleSets = []
            }
        } else {
            ruleSets = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTemplatesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTemplatesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTemplatesOutputError>
}

extension ListTemplatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTemplatesInput(maxItems: \(Swift.String(describing: maxItems)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListTemplatesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListTemplates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListTemplatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTemplatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTemplatesOutputError>
}

public struct ListTemplatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTemplatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTemplatesOutputError>
}

public struct ListTemplatesInput: Swift.Equatable {
    /// <p>The maximum number of templates to return. This value must be at least 1 and less than
    ///             or equal to 10. If you do not specify a value, or if you specify a value less than 1 or
    ///             greater than 10, the operation will return up to 10 results.</p>
    public let maxItems: Swift.Int?
    /// <p>A token returned from a previous call to <code>ListTemplates</code> to indicate the
    ///             position in the list of email templates.</p>
    public let nextToken: Swift.String?

    public init (
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

extension ListTemplatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTemplatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTemplatesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTemplatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTemplatesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), templatesMetadata: \(Swift.String(describing: templatesMetadata)))"}
}

extension ListTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.templatesMetadata = output.templatesMetadata
        } else {
            self.nextToken = nil
            self.templatesMetadata = nil
        }
    }
}

public struct ListTemplatesOutputResponse: Swift.Equatable {
    /// <p>A token indicating that there are additional email templates available to be listed.
    ///             Pass this token to a subsequent call to <code>ListTemplates</code> to retrieve the next
    ///             50 email templates.</p>
    public let nextToken: Swift.String?
    /// <p>An array the contains the name and creation time stamp for each template in your Amazon SES
    ///             account.</p>
    public let templatesMetadata: [SesClientTypes.TemplateMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        templatesMetadata: [SesClientTypes.TemplateMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.templatesMetadata = templatesMetadata
    }
}

struct ListTemplatesOutputResponseBody: Swift.Equatable {
    public let templatesMetadata: [SesClientTypes.TemplateMetadata]?
    public let nextToken: Swift.String?
}

extension ListTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case templatesMetadata = "TemplatesMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTemplatesResult"))
        if containerValues.contains(.templatesMetadata) {
            struct KeyVal0{struct member{}}
            let templatesMetadataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .templatesMetadata)
            if let templatesMetadataWrappedContainer = templatesMetadataWrappedContainer {
                let templatesMetadataContainer = try templatesMetadataWrappedContainer.decodeIfPresent([SesClientTypes.TemplateMetadata].self, forKey: .member)
                var templatesMetadataBuffer:[SesClientTypes.TemplateMetadata]? = nil
                if let templatesMetadataContainer = templatesMetadataContainer {
                    templatesMetadataBuffer = [SesClientTypes.TemplateMetadata]()
                    for structureContainer0 in templatesMetadataContainer {
                        templatesMetadataBuffer?.append(structureContainer0)
                    }
                }
                templatesMetadata = templatesMetadataBuffer
            } else {
                templatesMetadata = []
            }
        } else {
            templatesMetadata = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListVerifiedEmailAddressesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVerifiedEmailAddressesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVerifiedEmailAddressesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVerifiedEmailAddressesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVerifiedEmailAddressesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVerifiedEmailAddressesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVerifiedEmailAddressesOutputError>
}

extension ListVerifiedEmailAddressesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVerifiedEmailAddressesInput()"}
}

extension ListVerifiedEmailAddressesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("ListVerifiedEmailAddresses", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListVerifiedEmailAddressesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVerifiedEmailAddressesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVerifiedEmailAddressesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVerifiedEmailAddressesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVerifiedEmailAddressesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVerifiedEmailAddressesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVerifiedEmailAddressesOutputError>
}

public struct ListVerifiedEmailAddressesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVerifiedEmailAddressesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVerifiedEmailAddressesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVerifiedEmailAddressesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVerifiedEmailAddressesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVerifiedEmailAddressesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVerifiedEmailAddressesOutputError>
}

public struct ListVerifiedEmailAddressesInput: Swift.Equatable {

    public init() {}
}

extension ListVerifiedEmailAddressesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListVerifiedEmailAddressesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVerifiedEmailAddressesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVerifiedEmailAddressesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVerifiedEmailAddressesOutputResponse(verifiedEmailAddresses: \(Swift.String(describing: verifiedEmailAddresses)))"}
}

extension ListVerifiedEmailAddressesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListVerifiedEmailAddressesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.verifiedEmailAddresses = output.verifiedEmailAddresses
        } else {
            self.verifiedEmailAddresses = nil
        }
    }
}

/// <p>A list of email addresses that you have verified with Amazon SES under your AWS
///             account.</p>
public struct ListVerifiedEmailAddressesOutputResponse: Swift.Equatable {
    /// <p>A list of email addresses that have been verified.</p>
    public let verifiedEmailAddresses: [Swift.String]?

    public init (
        verifiedEmailAddresses: [Swift.String]? = nil
    )
    {
        self.verifiedEmailAddresses = verifiedEmailAddresses
    }
}

struct ListVerifiedEmailAddressesOutputResponseBody: Swift.Equatable {
    public let verifiedEmailAddresses: [Swift.String]?
}

extension ListVerifiedEmailAddressesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verifiedEmailAddresses = "VerifiedEmailAddresses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListVerifiedEmailAddressesResult"))
        if containerValues.contains(.verifiedEmailAddresses) {
            struct KeyVal0{struct member{}}
            let verifiedEmailAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .verifiedEmailAddresses)
            if let verifiedEmailAddressesWrappedContainer = verifiedEmailAddressesWrappedContainer {
                let verifiedEmailAddressesContainer = try verifiedEmailAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var verifiedEmailAddressesBuffer:[Swift.String]? = nil
                if let verifiedEmailAddressesContainer = verifiedEmailAddressesContainer {
                    verifiedEmailAddressesBuffer = [Swift.String]()
                    for stringContainer0 in verifiedEmailAddressesContainer {
                        verifiedEmailAddressesBuffer?.append(stringContainer0)
                    }
                }
                verifiedEmailAddresses = verifiedEmailAddressesBuffer
            } else {
                verifiedEmailAddresses = []
            }
        } else {
            verifiedEmailAddresses = nil
        }
    }
}

extension MailFromDomainNotVerifiedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MailFromDomainNotVerifiedException(message: \(Swift.String(describing: message)))"}
}

extension MailFromDomainNotVerifiedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<MailFromDomainNotVerifiedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> Indicates that the message could not be sent because Amazon SES could not read the MX
///             record required to use the specified MAIL FROM domain. For information about editing the
///             custom MAIL FROM domain settings for an identity, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-edit.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct MailFromDomainNotVerifiedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MailFromDomainNotVerifiedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MailFromDomainNotVerifiedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes.Message: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let body = body {
            try container.encode(body, forKey: ClientRuntime.Key("Body"))
        }
        if let subject = subject {
            try container.encode(subject, forKey: ClientRuntime.Key("Subject"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectDecoded = try containerValues.decodeIfPresent(SesClientTypes.Content.self, forKey: .subject)
        subject = subjectDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(SesClientTypes.Body.self, forKey: .body)
        body = bodyDecoded
    }
}

extension SesClientTypes.Message: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Message(body: \(Swift.String(describing: body)), subject: \(Swift.String(describing: subject)))"}
}

extension SesClientTypes {
    /// <p>Represents the message to be sent, composed of a subject and a body.</p>
    public struct Message: Swift.Equatable {
        /// <p>The message body.</p>
        public let body: SesClientTypes.Body?
        /// <p>The subject of the message: A short summary of the content, which will appear in the
        ///             recipient's inbox.</p>
        public let subject: SesClientTypes.Content?

        public init (
            body: SesClientTypes.Body? = nil,
            subject: SesClientTypes.Content? = nil
        )
        {
            self.body = body
            self.subject = subject
        }
    }

}

extension SesClientTypes.MessageDsn: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrivalDate = "ArrivalDate"
        case extensionFields = "ExtensionFields"
        case reportingMta = "ReportingMta"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arrivalDate = arrivalDate {
            try container.encode(ClientRuntime.TimestampWrapper(arrivalDate, format: .dateTime), forKey: ClientRuntime.Key("arrivalDate"))
        }
        if let extensionFields = extensionFields {
            var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
            for (index0, extensionfield0) in extensionFields.enumerated() {
                try extensionFieldsContainer.encode(extensionfield0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let reportingMta = reportingMta {
            try container.encode(reportingMta, forKey: ClientRuntime.Key("ReportingMta"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportingMtaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportingMta)
        reportingMta = reportingMtaDecoded
        let arrivalDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arrivalDate)
        var arrivalDateBuffer:ClientRuntime.Date? = nil
        if let arrivalDateDecoded = arrivalDateDecoded {
            arrivalDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(arrivalDateDecoded, format: .dateTime)
        }
        arrivalDate = arrivalDateBuffer
        if containerValues.contains(.extensionFields) {
            struct KeyVal0{struct member{}}
            let extensionFieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .extensionFields)
            if let extensionFieldsWrappedContainer = extensionFieldsWrappedContainer {
                let extensionFieldsContainer = try extensionFieldsWrappedContainer.decodeIfPresent([SesClientTypes.ExtensionField].self, forKey: .member)
                var extensionFieldsBuffer:[SesClientTypes.ExtensionField]? = nil
                if let extensionFieldsContainer = extensionFieldsContainer {
                    extensionFieldsBuffer = [SesClientTypes.ExtensionField]()
                    for structureContainer0 in extensionFieldsContainer {
                        extensionFieldsBuffer?.append(structureContainer0)
                    }
                }
                extensionFields = extensionFieldsBuffer
            } else {
                extensionFields = []
            }
        } else {
            extensionFields = nil
        }
    }
}

extension SesClientTypes.MessageDsn: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MessageDsn(arrivalDate: \(Swift.String(describing: arrivalDate)), extensionFields: \(Swift.String(describing: extensionFields)), reportingMta: \(Swift.String(describing: reportingMta)))"}
}

extension SesClientTypes {
    /// <p>Message-related information to include in the Delivery Status Notification (DSN) when
    ///             an email that Amazon SES receives on your behalf bounces.</p>
    ///         <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES
    ///                 Developer Guide</a>.</p>
    public struct MessageDsn: Swift.Equatable {
        /// <p>When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.</p>
        public let arrivalDate: ClientRuntime.Date?
        /// <p>Additional X-headers to include in the DSN.</p>
        public let extensionFields: [SesClientTypes.ExtensionField]?
        /// <p>The reporting MTA that attempted to deliver the message, formatted as specified in
        ///                 <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>
        ///                 (<code>mta-name-type; mta-name</code>). The default value is <code>dns;
        ///                 inbound-smtp.[region].amazonaws.com</code>.</p>
        public let reportingMta: Swift.String?

        public init (
            arrivalDate: ClientRuntime.Date? = nil,
            extensionFields: [SesClientTypes.ExtensionField]? = nil,
            reportingMta: Swift.String? = nil
        )
        {
            self.arrivalDate = arrivalDate
            self.extensionFields = extensionFields
            self.reportingMta = reportingMta
        }
    }

}

extension MessageRejected: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MessageRejected(message: \(Swift.String(describing: message)))"}
}

extension MessageRejected: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<MessageRejectedBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the action failed, and the message could not be sent. Check the error
///             stack for more information about what caused the error.</p>
public struct MessageRejected: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MessageRejectedBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MessageRejectedBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes.MessageTag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SesClientTypes.MessageTag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MessageTag(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension SesClientTypes {
    /// <p>Contains the name and value of a tag that you can provide to <code>SendEmail</code> or
    ///                 <code>SendRawEmail</code> to apply to an email.</p>
    ///         <p>Message tags, which you use with configuration sets, enable you to publish email
    ///             sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
    public struct MessageTag: Swift.Equatable {
        /// <p>The name of the tag. The name must:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
        ///                     underscores (_), or dashes (-).</p>
        ///             </li>
        ///             <li>
        ///                 <p>Contain less than 256 characters.</p>
        ///             </li>
        ///          </ul>
        public let name: Swift.String?
        /// <p>The value of the tag. The value must:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
        ///                     underscores (_), or dashes (-).</p>
        ///             </li>
        ///             <li>
        ///                 <p>Contain less than 256 characters.</p>
        ///             </li>
        ///          </ul>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension MissingRenderingAttributeException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MissingRenderingAttributeException(templateName: \(Swift.String(describing: templateName)), message: \(Swift.String(describing: message)))"}
}

extension MissingRenderingAttributeException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<MissingRenderingAttributeExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.templateName = output.error.templateName
        } else {
            self.templateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that one or more of the replacement values for the specified template was
///             not specified. Ensure that the TemplateData object contains references to all of the
///             replacement tags in the specified template.</p>
public struct MissingRenderingAttributeException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var templateName: Swift.String?

    public init (
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.message = message
        self.templateName = templateName
    }
}

struct MissingRenderingAttributeExceptionBody: Swift.Equatable {
    public let templateName: Swift.String?
    public let message: Swift.String?
}

extension MissingRenderingAttributeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes {
    public enum NotificationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bounce
        case complaint
        case delivery
        case sdkUnknown(Swift.String)

        public static var allCases: [NotificationType] {
            return [
                .bounce,
                .complaint,
                .delivery,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "Bounce"
            case .complaint: return "Complaint"
            case .delivery: return "Delivery"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotificationType(rawValue: rawValue) ?? NotificationType.sdkUnknown(rawValue)
        }
    }
}

extension ProductionAccessNotGrantedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProductionAccessNotGrantedException(message: \(Swift.String(describing: message)))"}
}

extension ProductionAccessNotGrantedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ProductionAccessNotGrantedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the account has not been granted production access.</p>
public struct ProductionAccessNotGrantedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ProductionAccessNotGrantedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ProductionAccessNotGrantedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct PutConfigurationSetDeliveryOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetDeliveryOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetDeliveryOptionsOutputError>
}

extension PutConfigurationSetDeliveryOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetDeliveryOptionsInput(configurationSetName: \(Swift.String(describing: configurationSetName)), deliveryOptions: \(Swift.String(describing: deliveryOptions)))"}
}

extension PutConfigurationSetDeliveryOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let deliveryOptions = deliveryOptions {
            try container.encode(deliveryOptions, forKey: ClientRuntime.Key("DeliveryOptions"))
        }
        try container.encode("PutConfigurationSetDeliveryOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutConfigurationSetDeliveryOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetDeliveryOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetDeliveryOptionsOutputError>
}

public struct PutConfigurationSetDeliveryOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetDeliveryOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetDeliveryOptionsOutputError>
}

/// <p>A request to modify the delivery options for a configuration set.</p>
public struct PutConfigurationSetDeliveryOptionsInput: Swift.Equatable {
    /// <p>The name of the configuration set that you want to specify the delivery options
    ///             for.</p>
    public let configurationSetName: Swift.String?
    /// <p>Specifies whether messages that use the configuration set are required to use
    ///             Transport Layer Security (TLS).</p>
    public let deliveryOptions: SesClientTypes.DeliveryOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        deliveryOptions: SesClientTypes.DeliveryOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
    }
}

extension PutConfigurationSetDeliveryOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutConfigurationSetDeliveryOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeliveryOptionsException" : self = .invalidDeliveryOptionsException(try InvalidDeliveryOptionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutConfigurationSetDeliveryOptionsOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case invalidDeliveryOptionsException(InvalidDeliveryOptionsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetDeliveryOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetDeliveryOptionsOutputResponse()"}
}

extension PutConfigurationSetDeliveryOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.</p>
public struct PutConfigurationSetDeliveryOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutConfigurationSetDeliveryOptionsOutputResponseBody: Swift.Equatable {
}

extension PutConfigurationSetDeliveryOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutIdentityPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutIdentityPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutIdentityPolicyOutputError>
}

extension PutIdentityPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutIdentityPolicyInput(identity: \(Swift.String(describing: identity)), policy: \(Swift.String(describing: policy)), policyName: \(Swift.String(describing: policyName)))"}
}

extension PutIdentityPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let policy = policy {
            try container.encode(policy, forKey: ClientRuntime.Key("Policy"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("PutIdentityPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutIdentityPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutIdentityPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutIdentityPolicyOutputError>
}

public struct PutIdentityPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutIdentityPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutIdentityPolicyOutputError>
}

/// <p>Represents a request to add or update a sending authorization policy for an identity.
///             Sending authorization is an Amazon SES feature that enables you to authorize other senders to
///             use your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct PutIdentityPolicyInput: Swift.Equatable {
    /// <p>The identity that the policy will apply to. You can specify an identity by using its
    ///             name or by using its Amazon Resource Name (ARN). Examples:
    ///             <code>user@example.com</code>, <code>example.com</code>,
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
    ///         <p>To successfully call this API, you must own the identity.</p>
    public let identity: Swift.String?
    /// <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p>
    ///         <p>For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer
    ///                 Guide</a>. </p>
    public let policy: Swift.String?
    /// <p>The name of the policy.</p>
    ///         <p>The policy name cannot exceed 64 characters and can only include alphanumeric
    ///             characters, dashes, and underscores.</p>
    public let policyName: Swift.String?

    public init (
        identity: Swift.String? = nil,
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.identity = identity
        self.policy = policy
        self.policyName = policyName
    }
}

extension PutIdentityPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutIdentityPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidPolicyException" : self = .invalidPolicyException(try InvalidPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutIdentityPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidPolicyException(InvalidPolicyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutIdentityPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutIdentityPolicyOutputResponse()"}
}

extension PutIdentityPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct PutIdentityPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutIdentityPolicyOutputResponseBody: Swift.Equatable {
}

extension PutIdentityPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesClientTypes.RawMessage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let data = data {
            try container.encode(data.base64EncodedString(), forKey: ClientRuntime.Key("Data"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.data) {
            do {
                let dataDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .data)
                data = dataDecoded
            } catch {
                data = "".data(using: .utf8)
            }
        } else {
            data = nil
        }
    }
}

extension SesClientTypes.RawMessage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RawMessage(data: \(Swift.String(describing: data)))"}
}

extension SesClientTypes {
    /// <p>Represents the raw data of the message.</p>
    public struct RawMessage: Swift.Equatable {
        /// <p>The raw data of the message. This data needs to base64-encoded if you are accessing
        ///             Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS
        ///             SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must
        ///             ensure that the message format complies with Internet email standards regarding email
        ///             header fields, MIME types, and MIME encoding.</p>
        ///         <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p>
        ///         <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include
        ///             X-headers in the raw message to specify the "Source," "From," and "Return-Path"
        ///             addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p>
        ///         <important>
        ///             <p>Do not include these X-headers in the DKIM signature, because they are removed by
        ///                 Amazon SES before sending the email.</p>
        ///         </important>
        ///         <p>For more information, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer
        ///             Guide</a>.</p>
        public let data: ClientRuntime.Data?

        public init (
            data: ClientRuntime.Data? = nil
        )
        {
            self.data = data
        }
    }

}

extension SesClientTypes.ReceiptAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addHeaderAction = "AddHeaderAction"
        case bounceAction = "BounceAction"
        case lambdaAction = "LambdaAction"
        case s3Action = "S3Action"
        case sNSAction = "SNSAction"
        case stopAction = "StopAction"
        case workmailAction = "WorkmailAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addHeaderAction = addHeaderAction {
            try container.encode(addHeaderAction, forKey: ClientRuntime.Key("AddHeaderAction"))
        }
        if let bounceAction = bounceAction {
            try container.encode(bounceAction, forKey: ClientRuntime.Key("BounceAction"))
        }
        if let lambdaAction = lambdaAction {
            try container.encode(lambdaAction, forKey: ClientRuntime.Key("LambdaAction"))
        }
        if let s3Action = s3Action {
            try container.encode(s3Action, forKey: ClientRuntime.Key("S3Action"))
        }
        if let sNSAction = sNSAction {
            try container.encode(sNSAction, forKey: ClientRuntime.Key("SNSAction"))
        }
        if let stopAction = stopAction {
            try container.encode(stopAction, forKey: ClientRuntime.Key("StopAction"))
        }
        if let workmailAction = workmailAction {
            try container.encode(workmailAction, forKey: ClientRuntime.Key("WorkmailAction"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3ActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.S3Action.self, forKey: .s3Action)
        s3Action = s3ActionDecoded
        let bounceActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.BounceAction.self, forKey: .bounceAction)
        bounceAction = bounceActionDecoded
        let workmailActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.WorkmailAction.self, forKey: .workmailAction)
        workmailAction = workmailActionDecoded
        let lambdaActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.LambdaAction.self, forKey: .lambdaAction)
        lambdaAction = lambdaActionDecoded
        let stopActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.StopAction.self, forKey: .stopAction)
        stopAction = stopActionDecoded
        let addHeaderActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.AddHeaderAction.self, forKey: .addHeaderAction)
        addHeaderAction = addHeaderActionDecoded
        let sNSActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.SNSAction.self, forKey: .sNSAction)
        sNSAction = sNSActionDecoded
    }
}

extension SesClientTypes.ReceiptAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReceiptAction(addHeaderAction: \(Swift.String(describing: addHeaderAction)), bounceAction: \(Swift.String(describing: bounceAction)), lambdaAction: \(Swift.String(describing: lambdaAction)), s3Action: \(Swift.String(describing: s3Action)), sNSAction: \(Swift.String(describing: sNSAction)), stopAction: \(Swift.String(describing: stopAction)), workmailAction: \(Swift.String(describing: workmailAction)))"}
}

extension SesClientTypes {
    /// <p>An action that Amazon SES can take when it receives an email on behalf of one or more email
    ///             addresses or domains that you own. An instance of this data type can represent only one
    ///             action.</p>
    ///         <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public struct ReceiptAction: Swift.Equatable {
        /// <p>Adds a header to the received email.</p>
        public let addHeaderAction: SesClientTypes.AddHeaderAction?
        /// <p>Rejects the received email by returning a bounce response to the sender and,
        ///             optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).</p>
        public let bounceAction: SesClientTypes.BounceAction?
        /// <p>Calls an AWS Lambda function, and optionally, publishes a notification to Amazon SNS.</p>
        public let lambdaAction: SesClientTypes.LambdaAction?
        /// <p>Saves the received message to an Amazon Simple Storage Service (Amazon S3) bucket and, optionally, publishes a
        ///             notification to Amazon SNS.</p>
        public let s3Action: SesClientTypes.S3Action?
        /// <p>Publishes the email content within a notification to Amazon SNS.</p>
        public let sNSAction: SesClientTypes.SNSAction?
        /// <p>Terminates the evaluation of the receipt rule set and optionally publishes a
        ///             notification to Amazon SNS.</p>
        public let stopAction: SesClientTypes.StopAction?
        /// <p>Calls Amazon WorkMail and, optionally, publishes a notification to Amazon
        ///             Amazon SNS.</p>
        public let workmailAction: SesClientTypes.WorkmailAction?

        public init (
            addHeaderAction: SesClientTypes.AddHeaderAction? = nil,
            bounceAction: SesClientTypes.BounceAction? = nil,
            lambdaAction: SesClientTypes.LambdaAction? = nil,
            s3Action: SesClientTypes.S3Action? = nil,
            sNSAction: SesClientTypes.SNSAction? = nil,
            stopAction: SesClientTypes.StopAction? = nil,
            workmailAction: SesClientTypes.WorkmailAction? = nil
        )
        {
            self.addHeaderAction = addHeaderAction
            self.bounceAction = bounceAction
            self.lambdaAction = lambdaAction
            self.s3Action = s3Action
            self.sNSAction = sNSAction
            self.stopAction = stopAction
            self.workmailAction = workmailAction
        }
    }

}

extension SesClientTypes.ReceiptFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipFilter = "IpFilter"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ipFilter = ipFilter {
            try container.encode(ipFilter, forKey: ClientRuntime.Key("IpFilter"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ipFilterDecoded = try containerValues.decodeIfPresent(SesClientTypes.ReceiptIpFilter.self, forKey: .ipFilter)
        ipFilter = ipFilterDecoded
    }
}

extension SesClientTypes.ReceiptFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReceiptFilter(ipFilter: \(Swift.String(describing: ipFilter)), name: \(Swift.String(describing: name)))"}
}

extension SesClientTypes {
    /// <p>A receipt IP address filter enables you to specify whether to accept or reject mail
    ///             originating from an IP address or range of IP addresses.</p>
    ///         <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
    public struct ReceiptFilter: Swift.Equatable {
        /// <p>A structure that provides the IP addresses to block or allow, and whether to block or
        ///             allow incoming mail from them.</p>
        public let ipFilter: SesClientTypes.ReceiptIpFilter?
        /// <p>The name of the IP address filter. The name must:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
        ///                     underscores (_), or dashes (-).</p>
        ///             </li>
        ///             <li>
        ///                 <p>Start and end with a letter or number.</p>
        ///             </li>
        ///             <li>
        ///                 <p>Contain less than 64 characters.</p>
        ///             </li>
        ///          </ul>
        public let name: Swift.String?

        public init (
            ipFilter: SesClientTypes.ReceiptIpFilter? = nil,
            name: Swift.String? = nil
        )
        {
            self.ipFilter = ipFilter
            self.name = name
        }
    }

}

extension SesClientTypes {
    public enum ReceiptFilterPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case block
        case sdkUnknown(Swift.String)

        public static var allCases: [ReceiptFilterPolicy] {
            return [
                .allow,
                .block,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "Allow"
            case .block: return "Block"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReceiptFilterPolicy(rawValue: rawValue) ?? ReceiptFilterPolicy.sdkUnknown(rawValue)
        }
    }
}

extension SesClientTypes.ReceiptIpFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidr = "Cidr"
        case policy = "Policy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidr = cidr {
            try container.encode(cidr, forKey: ClientRuntime.Key("Cidr"))
        }
        if let policy = policy {
            try container.encode(policy, forKey: ClientRuntime.Key("Policy"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(SesClientTypes.ReceiptFilterPolicy.self, forKey: .policy)
        policy = policyDecoded
        let cidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidr)
        cidr = cidrDecoded
    }
}

extension SesClientTypes.ReceiptIpFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReceiptIpFilter(cidr: \(Swift.String(describing: cidr)), policy: \(Swift.String(describing: policy)))"}
}

extension SesClientTypes {
    /// <p>A receipt IP address filter enables you to specify whether to accept or reject mail
    ///             originating from an IP address or range of IP addresses.</p>
    ///         <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
    public struct ReceiptIpFilter: Swift.Equatable {
        /// <p>A single IP address or a range of IP addresses that you want to block or allow,
        ///             specified in Classless Inter-Domain Routing (CIDR) notation. An example of a single
        ///             email address is 10.0.0.1. An example of a range of IP addresses is 10.0.0.1/24. For
        ///             more information about CIDR notation, see <a href="https://tools.ietf.org/html/rfc2317">RFC 2317</a>.</p>
        public let cidr: Swift.String?
        /// <p>Indicates whether to block or allow incoming mail from the specified IP
        ///             addresses.</p>
        public let policy: SesClientTypes.ReceiptFilterPolicy?

        public init (
            cidr: Swift.String? = nil,
            policy: SesClientTypes.ReceiptFilterPolicy? = nil
        )
        {
            self.cidr = cidr
            self.policy = policy
        }
    }

}

extension SesClientTypes.ReceiptRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case enabled = "Enabled"
        case name = "Name"
        case recipients = "Recipients"
        case scanEnabled = "ScanEnabled"
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actions = actions {
            var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
            for (index0, receiptaction0) in actions.enumerated() {
                try actionsContainer.encode(receiptaction0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let recipients = recipients {
            var recipientsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Recipients"))
            for (index0, recipient0) in recipients.enumerated() {
                try recipientsContainer.encode(recipient0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if scanEnabled != false {
            try container.encode(scanEnabled, forKey: ClientRuntime.Key("ScanEnabled"))
        }
        if let tlsPolicy = tlsPolicy {
            try container.encode(tlsPolicy, forKey: ClientRuntime.Key("TlsPolicy"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let tlsPolicyDecoded = try containerValues.decodeIfPresent(SesClientTypes.TlsPolicy.self, forKey: .tlsPolicy)
        tlsPolicy = tlsPolicyDecoded
        if containerValues.contains(.recipients) {
            struct KeyVal0{struct member{}}
            let recipientsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .recipients)
            if let recipientsWrappedContainer = recipientsWrappedContainer {
                let recipientsContainer = try recipientsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var recipientsBuffer:[Swift.String]? = nil
                if let recipientsContainer = recipientsContainer {
                    recipientsBuffer = [Swift.String]()
                    for stringContainer0 in recipientsContainer {
                        recipientsBuffer?.append(stringContainer0)
                    }
                }
                recipients = recipientsBuffer
            } else {
                recipients = []
            }
        } else {
            recipients = nil
        }
        if containerValues.contains(.actions) {
            struct KeyVal0{struct member{}}
            let actionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .actions)
            if let actionsWrappedContainer = actionsWrappedContainer {
                let actionsContainer = try actionsWrappedContainer.decodeIfPresent([SesClientTypes.ReceiptAction].self, forKey: .member)
                var actionsBuffer:[SesClientTypes.ReceiptAction]? = nil
                if let actionsContainer = actionsContainer {
                    actionsBuffer = [SesClientTypes.ReceiptAction]()
                    for structureContainer0 in actionsContainer {
                        actionsBuffer?.append(structureContainer0)
                    }
                }
                actions = actionsBuffer
            } else {
                actions = []
            }
        } else {
            actions = nil
        }
        let scanEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .scanEnabled)
        scanEnabled = scanEnabledDecoded
    }
}

extension SesClientTypes.ReceiptRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReceiptRule(actions: \(Swift.String(describing: actions)), enabled: \(Swift.String(describing: enabled)), name: \(Swift.String(describing: name)), recipients: \(Swift.String(describing: recipients)), scanEnabled: \(Swift.String(describing: scanEnabled)), tlsPolicy: \(Swift.String(describing: tlsPolicy)))"}
}

extension SesClientTypes {
    /// <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives
    ///             mail on behalf of one or more email addresses or domains that you own.</p>
    ///         <p>Each receipt rule defines a set of email addresses or domains that it applies to. If
    ///             the email addresses or domains match at least one recipient address of the message,
    ///             Amazon SES executes all of the receipt rule's actions on the message.</p>
    ///         <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public struct ReceiptRule: Swift.Equatable {
        /// <p>An ordered list of actions to perform on messages that match at least one of the
        ///             recipient email addresses or domains specified in the receipt rule.</p>
        public let actions: [SesClientTypes.ReceiptAction]?
        /// <p>If <code>true</code>, the receipt rule is active. The default value is
        ///                 <code>false</code>.</p>
        public let enabled: Swift.Bool
        /// <p>The name of the receipt rule. The name must:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
        ///                     underscores (_), or dashes (-).</p>
        ///             </li>
        ///             <li>
        ///                 <p>Start and end with a letter or number.</p>
        ///             </li>
        ///             <li>
        ///                 <p>Contain less than 64 characters.</p>
        ///             </li>
        ///          </ul>
        public let name: Swift.String?
        /// <p>The recipient domains and email addresses that the receipt rule applies to. If this
        ///             field is not specified, this rule will match all recipients under all verified
        ///             domains.</p>
        public let recipients: [Swift.String]?
        /// <p>If <code>true</code>, then messages that this receipt rule applies to are scanned for
        ///             spam and viruses. The default value is <code>false</code>.</p>
        public let scanEnabled: Swift.Bool
        /// <p>Specifies whether Amazon SES should require that incoming email is delivered over a
        ///             connection encrypted with Transport Layer Security (TLS). If this parameter is set to
        ///                 <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The
        ///             default is <code>Optional</code>.</p>
        public let tlsPolicy: SesClientTypes.TlsPolicy?

        public init (
            actions: [SesClientTypes.ReceiptAction]? = nil,
            enabled: Swift.Bool = false,
            name: Swift.String? = nil,
            recipients: [Swift.String]? = nil,
            scanEnabled: Swift.Bool = false,
            tlsPolicy: SesClientTypes.TlsPolicy? = nil
        )
        {
            self.actions = actions
            self.enabled = enabled
            self.name = name
            self.recipients = recipients
            self.scanEnabled = scanEnabled
            self.tlsPolicy = tlsPolicy
        }
    }

}

extension SesClientTypes.ReceiptRuleSetMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createdTimestamp = createdTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(createdTimestamp, format: .dateTime), forKey: ClientRuntime.Key("createdTimestamp"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTimestamp)
        var createdTimestampBuffer:ClientRuntime.Date? = nil
        if let createdTimestampDecoded = createdTimestampDecoded {
            createdTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createdTimestampDecoded, format: .dateTime)
        }
        createdTimestamp = createdTimestampBuffer
    }
}

extension SesClientTypes.ReceiptRuleSetMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReceiptRuleSetMetadata(createdTimestamp: \(Swift.String(describing: createdTimestamp)), name: \(Swift.String(describing: name)))"}
}

extension SesClientTypes {
    /// <p>Information about a receipt rule set.</p>
    ///         <p>A receipt rule set is a collection of rules that specify what Amazon SES should do with
    ///             mail it receives on behalf of your account's verified domains.</p>
    ///         <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES
    ///                 Developer Guide</a>.</p>
    public struct ReceiptRuleSetMetadata: Swift.Equatable {
        /// <p>The date and time the receipt rule set was created.</p>
        public let createdTimestamp: ClientRuntime.Date?
        /// <p>The name of the receipt rule set. The name must:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
        ///                     underscores (_), or dashes (-).</p>
        ///             </li>
        ///             <li>
        ///                 <p>Start and end with a letter or number.</p>
        ///             </li>
        ///             <li>
        ///                 <p>Contain less than 64 characters.</p>
        ///             </li>
        ///          </ul>
        public let name: Swift.String?

        public init (
            createdTimestamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.name = name
        }
    }

}

extension SesClientTypes.RecipientDsnFields: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case diagnosticCode = "DiagnosticCode"
        case extensionFields = "ExtensionFields"
        case finalRecipient = "FinalRecipient"
        case lastAttemptDate = "LastAttemptDate"
        case remoteMta = "RemoteMta"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let diagnosticCode = diagnosticCode {
            try container.encode(diagnosticCode, forKey: ClientRuntime.Key("DiagnosticCode"))
        }
        if let extensionFields = extensionFields {
            var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
            for (index0, extensionfield0) in extensionFields.enumerated() {
                try extensionFieldsContainer.encode(extensionfield0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let finalRecipient = finalRecipient {
            try container.encode(finalRecipient, forKey: ClientRuntime.Key("FinalRecipient"))
        }
        if let lastAttemptDate = lastAttemptDate {
            try container.encode(ClientRuntime.TimestampWrapper(lastAttemptDate, format: .dateTime), forKey: ClientRuntime.Key("lastAttemptDate"))
        }
        if let remoteMta = remoteMta {
            try container.encode(remoteMta, forKey: ClientRuntime.Key("RemoteMta"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let finalRecipientDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .finalRecipient)
        finalRecipient = finalRecipientDecoded
        let actionDecoded = try containerValues.decodeIfPresent(SesClientTypes.DsnAction.self, forKey: .action)
        action = actionDecoded
        let remoteMtaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteMta)
        remoteMta = remoteMtaDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let diagnosticCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diagnosticCode)
        diagnosticCode = diagnosticCodeDecoded
        let lastAttemptDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAttemptDate)
        var lastAttemptDateBuffer:ClientRuntime.Date? = nil
        if let lastAttemptDateDecoded = lastAttemptDateDecoded {
            lastAttemptDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastAttemptDateDecoded, format: .dateTime)
        }
        lastAttemptDate = lastAttemptDateBuffer
        if containerValues.contains(.extensionFields) {
            struct KeyVal0{struct member{}}
            let extensionFieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .extensionFields)
            if let extensionFieldsWrappedContainer = extensionFieldsWrappedContainer {
                let extensionFieldsContainer = try extensionFieldsWrappedContainer.decodeIfPresent([SesClientTypes.ExtensionField].self, forKey: .member)
                var extensionFieldsBuffer:[SesClientTypes.ExtensionField]? = nil
                if let extensionFieldsContainer = extensionFieldsContainer {
                    extensionFieldsBuffer = [SesClientTypes.ExtensionField]()
                    for structureContainer0 in extensionFieldsContainer {
                        extensionFieldsBuffer?.append(structureContainer0)
                    }
                }
                extensionFields = extensionFieldsBuffer
            } else {
                extensionFields = []
            }
        } else {
            extensionFields = nil
        }
    }
}

extension SesClientTypes.RecipientDsnFields: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecipientDsnFields(action: \(Swift.String(describing: action)), diagnosticCode: \(Swift.String(describing: diagnosticCode)), extensionFields: \(Swift.String(describing: extensionFields)), finalRecipient: \(Swift.String(describing: finalRecipient)), lastAttemptDate: \(Swift.String(describing: lastAttemptDate)), remoteMta: \(Swift.String(describing: remoteMta)), status: \(Swift.String(describing: status)))"}
}

extension SesClientTypes {
    /// <p>Recipient-related information to include in the Delivery Status Notification (DSN)
    ///             when an email that Amazon SES receives on your behalf bounces.</p>
    ///         <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES
    ///                 Developer Guide</a>.</p>
    public struct RecipientDsnFields: Swift.Equatable {
        /// <p>The action performed by the reporting mail transfer agent (MTA) as a result of its
        ///             attempt to deliver the message to the recipient address. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
        public let action: SesClientTypes.DsnAction?
        /// <p>An extended explanation of what went wrong; this is usually an SMTP response. See
        ///                 <a href="https://tools.ietf.org/html/rfc3463">RFC 3463</a> for the correct
        ///             formatting of this parameter.</p>
        public let diagnosticCode: Swift.String?
        /// <p>Additional X-headers to include in the DSN.</p>
        public let extensionFields: [SesClientTypes.ExtensionField]?
        /// <p>The email address that the message was ultimately delivered to. This corresponds to
        ///             the <code>Final-Recipient</code> in the DSN. If not specified,
        ///                 <code>FinalRecipient</code> will be set to the <code>Recipient</code> specified in
        ///             the <code>BouncedRecipientInfo</code> structure. Either <code>FinalRecipient</code> or
        ///             the recipient in <code>BouncedRecipientInfo</code> must be a recipient of the original
        ///             bounced message.</p>
        ///         <note>
        ///             <p>Do not prepend the <code>FinalRecipient</code> email address with <code>rfc
        ///                     822;</code>, as described in <a href="https://tools.ietf.org/html/rfc3798">RFC 3798</a>.</p>
        ///         </note>
        public let finalRecipient: Swift.String?
        /// <p>The time the final delivery attempt was made, in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.</p>
        public let lastAttemptDate: ClientRuntime.Date?
        /// <p>The MTA to which the remote MTA attempted to deliver the message, formatted as
        ///             specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>
        ///                 (<code>mta-name-type; mta-name</code>). This parameter typically applies only to
        ///             propagating synchronous bounces.</p>
        public let remoteMta: Swift.String?
        /// <p>The status code that indicates what went wrong. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
        public let status: Swift.String?

        public init (
            action: SesClientTypes.DsnAction? = nil,
            diagnosticCode: Swift.String? = nil,
            extensionFields: [SesClientTypes.ExtensionField]? = nil,
            finalRecipient: Swift.String? = nil,
            lastAttemptDate: ClientRuntime.Date? = nil,
            remoteMta: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.action = action
            self.diagnosticCode = diagnosticCode
            self.extensionFields = extensionFields
            self.finalRecipient = finalRecipient
            self.lastAttemptDate = lastAttemptDate
            self.remoteMta = remoteMta
            self.status = status
        }
    }

}

public struct ReorderReceiptRuleSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReorderReceiptRuleSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReorderReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReorderReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReorderReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReorderReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReorderReceiptRuleSetOutputError>
}

extension ReorderReceiptRuleSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReorderReceiptRuleSetInput(ruleNames: \(Swift.String(describing: ruleNames)), ruleSetName: \(Swift.String(describing: ruleSetName)))"}
}

extension ReorderReceiptRuleSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleNames = ruleNames {
            var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
            for (index0, receiptrulename0) in ruleNames.enumerated() {
                try ruleNamesContainer.encode(receiptrulename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("ReorderReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ReorderReceiptRuleSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReorderReceiptRuleSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReorderReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReorderReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReorderReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReorderReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReorderReceiptRuleSetOutputError>
}

public struct ReorderReceiptRuleSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReorderReceiptRuleSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReorderReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReorderReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReorderReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReorderReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReorderReceiptRuleSetOutputError>
}

/// <p>Represents a request to reorder the receipt rules within a receipt rule set. You use
///             receipt rule sets to receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
public struct ReorderReceiptRuleSetInput: Swift.Equatable {
    /// <p>A list of the specified receipt rule set's receipt rules in the order that you want to
    ///             put them.</p>
    public let ruleNames: [Swift.String]?
    /// <p>The name of the receipt rule set to reorder.</p>
    public let ruleSetName: Swift.String?

    public init (
        ruleNames: [Swift.String]? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleNames = ruleNames
        self.ruleSetName = ruleSetName
    }
}

extension ReorderReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ReorderReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleDoesNotExistException" : self = .ruleDoesNotExistException(try RuleDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExistException" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ReorderReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case ruleDoesNotExistException(RuleDoesNotExistException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ReorderReceiptRuleSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReorderReceiptRuleSetOutputResponse()"}
}

extension ReorderReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct ReorderReceiptRuleSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct ReorderReceiptRuleSetOutputResponseBody: Swift.Equatable {
}

extension ReorderReceiptRuleSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesClientTypes.ReputationOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastFreshStart = "LastFreshStart"
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastFreshStart = lastFreshStart {
            try container.encode(ClientRuntime.TimestampWrapper(lastFreshStart, format: .dateTime), forKey: ClientRuntime.Key("lastFreshStart"))
        }
        if reputationMetricsEnabled != false {
            try container.encode(reputationMetricsEnabled, forKey: ClientRuntime.Key("ReputationMetricsEnabled"))
        }
        if sendingEnabled != false {
            try container.encode(sendingEnabled, forKey: ClientRuntime.Key("SendingEnabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .sendingEnabled)
        sendingEnabled = sendingEnabledDecoded
        let reputationMetricsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .reputationMetricsEnabled)
        reputationMetricsEnabled = reputationMetricsEnabledDecoded
        let lastFreshStartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastFreshStart)
        var lastFreshStartBuffer:ClientRuntime.Date? = nil
        if let lastFreshStartDecoded = lastFreshStartDecoded {
            lastFreshStartBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastFreshStartDecoded, format: .dateTime)
        }
        lastFreshStart = lastFreshStartBuffer
    }
}

extension SesClientTypes.ReputationOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReputationOptions(lastFreshStart: \(Swift.String(describing: lastFreshStart)), reputationMetricsEnabled: \(Swift.String(describing: reputationMetricsEnabled)), sendingEnabled: \(Swift.String(describing: sendingEnabled)))"}
}

extension SesClientTypes {
    /// <p>Contains information about the reputation settings for a configuration set.</p>
    public struct ReputationOptions: Swift.Equatable {
        /// <p>The date and time at which the reputation metrics for the configuration set were last
        ///             reset. Resetting these metrics is known as a <i>fresh start</i>.</p>
        ///         <p>When you disable email sending for a configuration set using <a>UpdateConfigurationSetSendingEnabled</a> and later re-enable it, the
        ///             reputation metrics for the configuration set (but not for the entire Amazon SES account) are
        ///             reset.</p>
        ///         <p>If email sending for the configuration set has never been disabled and later
        ///             re-enabled, the value of this attribute is <code>null</code>.</p>
        public let lastFreshStart: ClientRuntime.Date?
        /// <p>Describes whether or not Amazon SES publishes reputation metrics for the configuration set,
        ///             such as bounce and complaint rates, to Amazon CloudWatch.</p>
        ///         <p>If the value is <code>true</code>, reputation metrics are published. If the value is
        ///                 <code>false</code>, reputation metrics are not published. The default value is
        ///                 <code>false</code>.</p>
        public let reputationMetricsEnabled: Swift.Bool
        /// <p>Describes whether email sending is enabled or disabled for the configuration set. If
        ///             the value is <code>true</code>, then Amazon SES will send emails that use the configuration
        ///             set. If the value is <code>false</code>, Amazon SES will not send emails that use the
        ///             configuration set. The default value is <code>true</code>. You can change this setting
        ///             using <a>UpdateConfigurationSetSendingEnabled</a>.</p>
        public let sendingEnabled: Swift.Bool

        public init (
            lastFreshStart: ClientRuntime.Date? = nil,
            reputationMetricsEnabled: Swift.Bool = false,
            sendingEnabled: Swift.Bool = false
        )
        {
            self.lastFreshStart = lastFreshStart
            self.reputationMetricsEnabled = reputationMetricsEnabled
            self.sendingEnabled = sendingEnabled
        }
    }

}

extension RuleDoesNotExistException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RuleDoesNotExistException(name: \(Swift.String(describing: name)), message: \(Swift.String(describing: message)))"}
}

extension RuleDoesNotExistException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<RuleDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.name = output.error.name
        } else {
            self.name = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the provided receipt rule does not exist.</p>
public struct RuleDoesNotExistException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// <p>Indicates that the named receipt rule does not exist.</p>
    public var name: Swift.String?

    public init (
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.message = message
        self.name = name
    }
}

struct RuleDoesNotExistExceptionBody: Swift.Equatable {
    public let name: Swift.String?
    public let message: Swift.String?
}

extension RuleDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RuleSetDoesNotExistException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RuleSetDoesNotExistException(name: \(Swift.String(describing: name)), message: \(Swift.String(describing: message)))"}
}

extension RuleSetDoesNotExistException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<RuleSetDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.name = output.error.name
        } else {
            self.name = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the provided receipt rule set does not exist.</p>
public struct RuleSetDoesNotExistException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// <p>Indicates that the named receipt rule set does not exist.</p>
    public var name: Swift.String?

    public init (
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.message = message
        self.name = name
    }
}

struct RuleSetDoesNotExistExceptionBody: Swift.Equatable {
    public let name: Swift.String?
    public let message: Swift.String?
}

extension RuleSetDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes.S3Action: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case kmsKeyArn = "KmsKeyArn"
        case objectKeyPrefix = "ObjectKeyPrefix"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bucketName = bucketName {
            try container.encode(bucketName, forKey: ClientRuntime.Key("BucketName"))
        }
        if let kmsKeyArn = kmsKeyArn {
            try container.encode(kmsKeyArn, forKey: ClientRuntime.Key("KmsKeyArn"))
        }
        if let objectKeyPrefix = objectKeyPrefix {
            try container.encode(objectKeyPrefix, forKey: ClientRuntime.Key("ObjectKeyPrefix"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let objectKeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectKeyPrefix)
        objectKeyPrefix = objectKeyPrefixDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
    }
}

extension SesClientTypes.S3Action: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3Action(bucketName: \(Swift.String(describing: bucketName)), kmsKeyArn: \(Swift.String(describing: kmsKeyArn)), objectKeyPrefix: \(Swift.String(describing: objectKeyPrefix)), topicArn: \(Swift.String(describing: topicArn)))"}
}

extension SesClientTypes {
    /// <p>When included in a receipt rule, this action saves the received message to an Amazon Simple Storage Service
    ///             (Amazon S3) bucket and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).</p>
    ///         <p>To enable Amazon SES to write emails to your Amazon S3 bucket, use an AWS KMS key to encrypt
    ///             your emails, or publish to an Amazon SNS topic of another account, Amazon SES must have permission
    ///             to access those resources. For information about giving permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    ///         <note>
    ///             <p>When you save your emails to an Amazon S3 bucket, the maximum email size (including
    ///                 headers) is 30 MB. Emails larger than that will bounce.</p>
    ///         </note>
    ///         <p>For information about specifying Amazon S3 actions in receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-s3.html">Amazon SES Developer Guide</a>.</p>
    public struct S3Action: Swift.Equatable {
        /// <p>The name of the Amazon S3 bucket that incoming email will be saved to.</p>
        public let bucketName: Swift.String?
        /// <p>The customer master key that Amazon SES should use to encrypt your emails before saving
        ///             them to the Amazon S3 bucket. You can use the default master key or a custom master key you
        ///             created in AWS KMS as follows:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>To use the default master key, provide an ARN in the form of
        ///                         <code>arn:aws:kms:REGION:ACCOUNT-ID-WITHOUT-HYPHENS:alias/aws/ses</code>.
        ///                     For example, if your AWS account ID is 123456789012 and you want to use the
        ///                     default master key in the US West (Oregon) region, the ARN of the default master
        ///                     key would be <code>arn:aws:kms:us-west-2:123456789012:alias/aws/ses</code>. If
        ///                     you use the default master key, you don't need to perform any extra steps to
        ///                     give Amazon SES permission to use the key.</p>
        ///             </li>
        ///             <li>
        ///                 <p>To use a custom master key you created in AWS KMS, provide the ARN of the
        ///                     master key and ensure that you add a statement to your key's policy to give
        ///                     Amazon SES permission to use it. For more information about giving permissions, see
        ///                     the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES
        ///                         Developer Guide</a>.</p>
        ///             </li>
        ///          </ul>
        ///         <p>For more information about key policies, see the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html">AWS KMS Developer Guide</a>. If
        ///             you do not specify a master key, Amazon SES will not encrypt your emails.</p>
        ///         <important>
        ///             <p>Your mail is encrypted by Amazon SES using the Amazon S3 encryption client before the mail
        ///                 is submitted to Amazon S3 for storage. It is not encrypted using Amazon S3 server-side
        ///                 encryption. This means that you must use the Amazon S3 encryption client to decrypt the
        ///                 email after retrieving it from Amazon S3, as the service has no access to use your AWS
        ///                 KMS keys for decryption. This encryption client is currently available with the
        ///                     <a href="http://aws.amazon.com/sdk-for-java/">AWS SDK for Java</a> and <a href="http://aws.amazon.com/sdk-for-ruby/">AWS SDK for Ruby</a> only. For more
        ///                 information about client-side encryption using AWS KMS master keys, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Amazon S3 Developer Guide</a>.</p>
        ///         </important>
        public let kmsKeyArn: Swift.String?
        /// <p>The key prefix of the Amazon S3 bucket. The key prefix is similar to a directory name that
        ///             enables you to store similar data under the same directory in a bucket.</p>
        public let objectKeyPrefix: Swift.String?
        /// <p>The ARN of the Amazon SNS topic to notify when the message is saved to the Amazon S3 bucket. An
        ///             example of an Amazon SNS topic ARN is
        ///             <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more information about
        ///             Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
        public let topicArn: Swift.String?

        public init (
            bucketName: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil,
            objectKeyPrefix: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.bucketName = bucketName
            self.kmsKeyArn = kmsKeyArn
            self.objectKeyPrefix = objectKeyPrefix
            self.topicArn = topicArn
        }
    }

}

extension SesClientTypes.SNSAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encoding = "Encoding"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let encoding = encoding {
            try container.encode(encoding, forKey: ClientRuntime.Key("Encoding"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let encodingDecoded = try containerValues.decodeIfPresent(SesClientTypes.SNSActionEncoding.self, forKey: .encoding)
        encoding = encodingDecoded
    }
}

extension SesClientTypes.SNSAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SNSAction(encoding: \(Swift.String(describing: encoding)), topicArn: \(Swift.String(describing: topicArn)))"}
}

extension SesClientTypes {
    /// <p>When included in a receipt rule, this action publishes a notification to Amazon Simple Notification Service
    ///             (Amazon SNS). This action includes a complete copy of the email content in the Amazon SNS
    ///             notifications. Amazon SNS notifications for all other actions simply provide information
    ///             about the email. They do not include the email content itself.</p>
    ///         <p>If you own the Amazon SNS topic, you don't need to do anything to give Amazon SES permission to
    ///             publish emails to it. However, if you don't own the Amazon SNS topic, you need to attach a
    ///             policy to the topic to give Amazon SES permissions to access it. For information about giving
    ///             permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    ///         <important>
    ///             <p>You can only publish emails that are 150 KB or less (including the header) to
    ///                 Amazon SNS. Larger emails will bounce. If you anticipate emails larger than 150 KB, use
    ///                 the S3 action instead.</p>
    ///         </important>
    ///         <p>For information about using a receipt rule to publish an Amazon SNS notification, see the
    ///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-sns.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public struct SNSAction: Swift.Equatable {
        /// <p>The encoding to use for the email within the Amazon SNS notification. UTF-8 is easier to
        ///             use, but may not preserve all special characters when a message was encoded with a
        ///             different encoding format. Base64 preserves all special characters. The default value is
        ///             UTF-8.</p>
        public let encoding: SesClientTypes.SNSActionEncoding?
        /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to notify. An example of an Amazon SNS
        ///             topic ARN is <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more
        ///             information about Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
        public let topicArn: Swift.String?

        public init (
            encoding: SesClientTypes.SNSActionEncoding? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.encoding = encoding
            self.topicArn = topicArn
        }
    }

}

extension SesClientTypes {
    public enum SNSActionEncoding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case base64
        case utf8
        case sdkUnknown(Swift.String)

        public static var allCases: [SNSActionEncoding] {
            return [
                .base64,
                .utf8,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .base64: return "Base64"
            case .utf8: return "UTF-8"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SNSActionEncoding(rawValue: rawValue) ?? SNSActionEncoding.sdkUnknown(rawValue)
        }
    }
}

extension SesClientTypes.SNSDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicARN = "TopicARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: ClientRuntime.Key("TopicARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicARN)
        topicARN = topicARNDecoded
    }
}

extension SesClientTypes.SNSDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SNSDestination(topicARN: \(Swift.String(describing: topicARN)))"}
}

extension SesClientTypes {
    /// <p>Contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.</p>
    ///         <p>Event destinations, such as Amazon SNS, are associated with configuration sets, which
    ///             enable you to publish email sending events. For information about using configuration
    ///             sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public struct SNSDestination: Swift.Equatable {
        /// <p>The ARN of the Amazon SNS topic that email sending events will be published to. An example
        ///             of an Amazon SNS topic ARN is <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For
        ///             more information about Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
        public let topicARN: Swift.String?

        public init (
            topicARN: Swift.String? = nil
        )
        {
            self.topicARN = topicARN
        }
    }

}

public struct SendBounceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendBounceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendBounceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendBounceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendBounceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendBounceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendBounceOutputError>
}

extension SendBounceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendBounceInput(bounceSender: \(Swift.String(describing: bounceSender)), bounceSenderArn: \(Swift.String(describing: bounceSenderArn)), bouncedRecipientInfoList: \(Swift.String(describing: bouncedRecipientInfoList)), explanation: \(Swift.String(describing: explanation)), messageDsn: \(Swift.String(describing: messageDsn)), originalMessageId: \(Swift.String(describing: originalMessageId)))"}
}

extension SendBounceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bounceSender = bounceSender {
            try container.encode(bounceSender, forKey: ClientRuntime.Key("BounceSender"))
        }
        if let bounceSenderArn = bounceSenderArn {
            try container.encode(bounceSenderArn, forKey: ClientRuntime.Key("BounceSenderArn"))
        }
        if let bouncedRecipientInfoList = bouncedRecipientInfoList {
            var bouncedRecipientInfoListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BouncedRecipientInfoList"))
            for (index0, bouncedrecipientinfo0) in bouncedRecipientInfoList.enumerated() {
                try bouncedRecipientInfoListContainer.encode(bouncedrecipientinfo0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let explanation = explanation {
            try container.encode(explanation, forKey: ClientRuntime.Key("Explanation"))
        }
        if let messageDsn = messageDsn {
            try container.encode(messageDsn, forKey: ClientRuntime.Key("MessageDsn"))
        }
        if let originalMessageId = originalMessageId {
            try container.encode(originalMessageId, forKey: ClientRuntime.Key("OriginalMessageId"))
        }
        try container.encode("SendBounce", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SendBounceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendBounceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendBounceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendBounceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendBounceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendBounceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendBounceOutputError>
}

public struct SendBounceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendBounceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendBounceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendBounceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendBounceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendBounceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendBounceOutputError>
}

/// <p>Represents a request to send a bounce message to the sender of an email you received
///             through Amazon SES.</p>
public struct SendBounceInput: Swift.Equatable {
    /// <p>The address to use in the "From" header of the bounce message. This must be an
    ///             identity that you have verified with Amazon SES.</p>
    public let bounceSender: Swift.String?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to use the
    ///             address in the "From" header of the bounce. For more information about sending
    ///             authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public let bounceSenderArn: Swift.String?
    /// <p>A list of recipients of the bounced message, including the information required to
    ///             create the Delivery Status Notifications (DSNs) for the recipients. You must specify at
    ///             least one <code>BouncedRecipientInfo</code> in the list.</p>
    public let bouncedRecipientInfoList: [SesClientTypes.BouncedRecipientInfo]?
    /// <p>Human-readable text for the bounce message to explain the failure. If not specified,
    ///             the text will be auto-generated based on the bounced recipient information.</p>
    public let explanation: Swift.String?
    /// <p>Message-related DSN fields. If not specified, Amazon SES will choose the values.</p>
    public let messageDsn: SesClientTypes.MessageDsn?
    /// <p>The message ID of the message to be bounced.</p>
    public let originalMessageId: Swift.String?

    public init (
        bounceSender: Swift.String? = nil,
        bounceSenderArn: Swift.String? = nil,
        bouncedRecipientInfoList: [SesClientTypes.BouncedRecipientInfo]? = nil,
        explanation: Swift.String? = nil,
        messageDsn: SesClientTypes.MessageDsn? = nil,
        originalMessageId: Swift.String? = nil
    )
    {
        self.bounceSender = bounceSender
        self.bounceSenderArn = bounceSenderArn
        self.bouncedRecipientInfoList = bouncedRecipientInfoList
        self.explanation = explanation
        self.messageDsn = messageDsn
        self.originalMessageId = originalMessageId
    }
}

extension SendBounceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendBounceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendBounceOutputError: Swift.Error, Swift.Equatable {
    case messageRejected(MessageRejected)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendBounceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendBounceOutputResponse(messageId: \(Swift.String(describing: messageId)))"}
}

extension SendBounceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendBounceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// <p>Represents a unique message ID.</p>
public struct SendBounceOutputResponse: Swift.Equatable {
    /// <p>The message ID of the bounce message.</p>
    public let messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendBounceOutputResponseBody: Swift.Equatable {
    public let messageId: Swift.String?
}

extension SendBounceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendBounceResult"))
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

public struct SendBulkTemplatedEmailInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendBulkTemplatedEmailInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendBulkTemplatedEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendBulkTemplatedEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendBulkTemplatedEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendBulkTemplatedEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendBulkTemplatedEmailOutputError>
}

extension SendBulkTemplatedEmailInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendBulkTemplatedEmailInput(configurationSetName: \(Swift.String(describing: configurationSetName)), defaultTags: \(Swift.String(describing: defaultTags)), defaultTemplateData: \(Swift.String(describing: defaultTemplateData)), destinations: \(Swift.String(describing: destinations)), replyToAddresses: \(Swift.String(describing: replyToAddresses)), returnPath: \(Swift.String(describing: returnPath)), returnPathArn: \(Swift.String(describing: returnPathArn)), source: \(Swift.String(describing: source)), sourceArn: \(Swift.String(describing: sourceArn)), template: \(Swift.String(describing: template)), templateArn: \(Swift.String(describing: templateArn)))"}
}

extension SendBulkTemplatedEmailInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let defaultTags = defaultTags {
            var defaultTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultTags"))
            for (index0, messagetag0) in defaultTags.enumerated() {
                try defaultTagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let defaultTemplateData = defaultTemplateData {
            try container.encode(defaultTemplateData, forKey: ClientRuntime.Key("DefaultTemplateData"))
        }
        if let destinations = destinations {
            var destinationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Destinations"))
            for (index0, bulkemaildestination0) in destinations.enumerated() {
                try destinationsContainer.encode(bulkemaildestination0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
            for (index0, address0) in replyToAddresses.enumerated() {
                try replyToAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let returnPath = returnPath {
            try container.encode(returnPath, forKey: ClientRuntime.Key("ReturnPath"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        if let templateArn = templateArn {
            try container.encode(templateArn, forKey: ClientRuntime.Key("TemplateArn"))
        }
        try container.encode("SendBulkTemplatedEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SendBulkTemplatedEmailInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendBulkTemplatedEmailInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendBulkTemplatedEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendBulkTemplatedEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendBulkTemplatedEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendBulkTemplatedEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendBulkTemplatedEmailOutputError>
}

public struct SendBulkTemplatedEmailInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendBulkTemplatedEmailInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendBulkTemplatedEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendBulkTemplatedEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendBulkTemplatedEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendBulkTemplatedEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendBulkTemplatedEmailOutputError>
}

/// <p>Represents a request to send a templated email to multiple destinations using Amazon SES.
///             For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct SendBulkTemplatedEmailInput: Swift.Equatable {
    /// <p>The name of the configuration set to use when you send an email using
    ///                 <code>SendBulkTemplatedEmail</code>.</p>
    public let configurationSetName: Swift.String?
    /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send to
    ///             a destination using <code>SendBulkTemplatedEmail</code>.</p>
    public let defaultTags: [SesClientTypes.MessageTag]?
    /// <p>A list of replacement values to apply to the template when replacement data is not
    ///             specified in a Destination object. These values act as a default or fallback option when
    ///             no other data is available.</p>
    ///         <p>The template data is a JSON object, typically consisting of key-value pairs in which
    ///             the keys correspond to replacement tags in the email template.</p>
    public let defaultTemplateData: Swift.String?
    /// <p>One or more <code>Destination</code> objects. All of the recipients in a
    ///                 <code>Destination</code> will receive the same version of the email. You can specify
    ///             up to 50 <code>Destination</code> objects within a <code>Destinations</code>
    ///             array.</p>
    public let destinations: [SesClientTypes.BulkEmailDestination]?
    /// <p>The reply-to email address(es) for the message. If the recipient replies to the
    ///             message, each reply-to address will receive the reply.</p>
    public let replyToAddresses: [Swift.String]?
    /// <p>The email address that bounces and complaints will be forwarded to when feedback
    ///             forwarding is enabled. If the message cannot be delivered to the recipient, then an
    ///             error message will be returned from the recipient's ISP; this message will then be
    ///             forwarded to the email address specified by the <code>ReturnPath</code> parameter. The
    ///                 <code>ReturnPath</code> parameter is never overwritten. This email address must be
    ///             either individually verified with Amazon SES, or from a domain that has been verified with
    ///             Amazon SES. </p>
    public let returnPath: Swift.String?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to use the
    ///             email address specified in the <code>ReturnPath</code> parameter.</p>
    ///         <p>For example, if the owner of <code>example.com</code> (which has ARN
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
    ///             policy to it that authorizes you to use <code>feedback@example.com</code>, then you
    ///             would specify the <code>ReturnPathArn</code> to be
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
    ///                 <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p>
    ///         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public let returnPathArn: Swift.String?
    /// <p>The email address that is sending the email. This email address must be either
    ///             individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    ///             For information about verifying identities, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    ///         <p>If you are sending on behalf of another user and have been permitted to do so by a
    ///             sending authorization policy, then you must also specify the <code>SourceArn</code>
    ///             parameter. For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
    ///         <note>
    ///             <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
    ///                     <i>local part</i> of a source email address (the part of the email
    ///                 address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
    ///                     characters</a>. If the <i>domain part</i> of an address (the
    ///                 part after the @ sign) contains non-ASCII characters, they must be encoded using
    ///                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly
    ///                     name</i>) may contain non-ASCII characters. These characters must be
    ///                 encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word
    ///                 syntax uses the following form:
    ///                 <code>=?charset?encoding?encoded-text?=</code>.</p>
    ///         </note>
    public let source: Swift.String?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to send for
    ///             the email address specified in the <code>Source</code> parameter.</p>
    ///         <p>For example, if the owner of <code>example.com</code> (which has ARN
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
    ///             policy to it that authorizes you to send from <code>user@example.com</code>, then you
    ///             would specify the <code>SourceArn</code> to be
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
    ///                 <code>Source</code> to be <code>user@example.com</code>.</p>
    ///         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public let sourceArn: Swift.String?
    /// <p>The template to use when sending this email.</p>
    public let template: Swift.String?
    /// <p>The ARN of the template to use when sending this email.</p>
    public let templateArn: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        defaultTags: [SesClientTypes.MessageTag]? = nil,
        defaultTemplateData: Swift.String? = nil,
        destinations: [SesClientTypes.BulkEmailDestination]? = nil,
        replyToAddresses: [Swift.String]? = nil,
        returnPath: Swift.String? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        template: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.defaultTags = defaultTags
        self.defaultTemplateData = defaultTemplateData
        self.destinations = destinations
        self.replyToAddresses = replyToAddresses
        self.returnPath = returnPath
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.template = template
        self.templateArn = templateArn
    }
}

extension SendBulkTemplatedEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendBulkTemplatedEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSendingPausedException" : self = .accountSendingPausedException(try AccountSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetSendingPausedException" : self = .configurationSetSendingPausedException(try ConfigurationSetSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TemplateDoesNotExistException" : self = .templateDoesNotExistException(try TemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendBulkTemplatedEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSendingPausedException(AccountSendingPausedException)
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case configurationSetSendingPausedException(ConfigurationSetSendingPausedException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case templateDoesNotExistException(TemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendBulkTemplatedEmailOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendBulkTemplatedEmailOutputResponse(status: \(Swift.String(describing: status)))"}
}

extension SendBulkTemplatedEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendBulkTemplatedEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
        } else {
            self.status = nil
        }
    }
}

public struct SendBulkTemplatedEmailOutputResponse: Swift.Equatable {
    /// <p>The unique message identifier returned from the <code>SendBulkTemplatedEmail</code>
    ///             action.</p>
    public let status: [SesClientTypes.BulkEmailDestinationStatus]?

    public init (
        status: [SesClientTypes.BulkEmailDestinationStatus]? = nil
    )
    {
        self.status = status
    }
}

struct SendBulkTemplatedEmailOutputResponseBody: Swift.Equatable {
    public let status: [SesClientTypes.BulkEmailDestinationStatus]?
}

extension SendBulkTemplatedEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendBulkTemplatedEmailResult"))
        if containerValues.contains(.status) {
            struct KeyVal0{struct member{}}
            let statusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .status)
            if let statusWrappedContainer = statusWrappedContainer {
                let statusContainer = try statusWrappedContainer.decodeIfPresent([SesClientTypes.BulkEmailDestinationStatus].self, forKey: .member)
                var statusBuffer:[SesClientTypes.BulkEmailDestinationStatus]? = nil
                if let statusContainer = statusContainer {
                    statusBuffer = [SesClientTypes.BulkEmailDestinationStatus]()
                    for structureContainer0 in statusContainer {
                        statusBuffer?.append(structureContainer0)
                    }
                }
                status = statusBuffer
            } else {
                status = []
            }
        } else {
            status = nil
        }
    }
}

public struct SendCustomVerificationEmailInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendCustomVerificationEmailInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendCustomVerificationEmailOutputError>
}

extension SendCustomVerificationEmailInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendCustomVerificationEmailInput(configurationSetName: \(Swift.String(describing: configurationSetName)), emailAddress: \(Swift.String(describing: emailAddress)), templateName: \(Swift.String(describing: templateName)))"}
}

extension SendCustomVerificationEmailInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("SendCustomVerificationEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SendCustomVerificationEmailInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendCustomVerificationEmailInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendCustomVerificationEmailOutputError>
}

public struct SendCustomVerificationEmailInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendCustomVerificationEmailInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendCustomVerificationEmailOutputError>
}

/// <p>Represents a request to send a custom verification email to a specified
///             recipient.</p>
public struct SendCustomVerificationEmailInput: Swift.Equatable {
    /// <p>Name of a configuration set to use when sending the verification email.</p>
    public let configurationSetName: Swift.String?
    /// <p>The email address to verify.</p>
    public let emailAddress: Swift.String?
    /// <p>The name of the custom verification email template to use when sending the
    ///             verification email.</p>
    public let templateName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.emailAddress = emailAddress
        self.templateName = templateName
    }
}

extension SendCustomVerificationEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendCustomVerificationEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomVerificationEmailTemplateDoesNotExistException" : self = .customVerificationEmailTemplateDoesNotExistException(try CustomVerificationEmailTemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FromEmailAddressNotVerifiedException" : self = .fromEmailAddressNotVerifiedException(try FromEmailAddressNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProductionAccessNotGrantedException" : self = .productionAccessNotGrantedException(try ProductionAccessNotGrantedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendCustomVerificationEmailOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case customVerificationEmailTemplateDoesNotExistException(CustomVerificationEmailTemplateDoesNotExistException)
    case fromEmailAddressNotVerifiedException(FromEmailAddressNotVerifiedException)
    case messageRejected(MessageRejected)
    case productionAccessNotGrantedException(ProductionAccessNotGrantedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendCustomVerificationEmailOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendCustomVerificationEmailOutputResponse(messageId: \(Swift.String(describing: messageId)))"}
}

extension SendCustomVerificationEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendCustomVerificationEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// <p>The response received when attempting to send the custom verification email.</p>
public struct SendCustomVerificationEmailOutputResponse: Swift.Equatable {
    /// <p>The unique message identifier returned from the
    ///                 <code>SendCustomVerificationEmail</code> operation.</p>
    public let messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendCustomVerificationEmailOutputResponseBody: Swift.Equatable {
    public let messageId: Swift.String?
}

extension SendCustomVerificationEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendCustomVerificationEmailResult"))
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SesClientTypes.SendDataPoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounces = "Bounces"
        case complaints = "Complaints"
        case deliveryAttempts = "DeliveryAttempts"
        case rejects = "Rejects"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if bounces != 0 {
            try container.encode(bounces, forKey: ClientRuntime.Key("Bounces"))
        }
        if complaints != 0 {
            try container.encode(complaints, forKey: ClientRuntime.Key("Complaints"))
        }
        if deliveryAttempts != 0 {
            try container.encode(deliveryAttempts, forKey: ClientRuntime.Key("DeliveryAttempts"))
        }
        if rejects != 0 {
            try container.encode(rejects, forKey: ClientRuntime.Key("Rejects"))
        }
        if let timestamp = timestamp {
            try container.encode(ClientRuntime.TimestampWrapper(timestamp, format: .dateTime), forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let deliveryAttemptsDecoded = try containerValues.decode(Swift.Int.self, forKey: .deliveryAttempts)
        deliveryAttempts = deliveryAttemptsDecoded
        let bouncesDecoded = try containerValues.decode(Swift.Int.self, forKey: .bounces)
        bounces = bouncesDecoded
        let complaintsDecoded = try containerValues.decode(Swift.Int.self, forKey: .complaints)
        complaints = complaintsDecoded
        let rejectsDecoded = try containerValues.decode(Swift.Int.self, forKey: .rejects)
        rejects = rejectsDecoded
    }
}

extension SesClientTypes.SendDataPoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendDataPoint(bounces: \(Swift.String(describing: bounces)), complaints: \(Swift.String(describing: complaints)), deliveryAttempts: \(Swift.String(describing: deliveryAttempts)), rejects: \(Swift.String(describing: rejects)), timestamp: \(Swift.String(describing: timestamp)))"}
}

extension SesClientTypes {
    /// <p>Represents sending statistics data. Each <code>SendDataPoint</code> contains
    ///             statistics for a 15-minute period of sending activity. </p>
    public struct SendDataPoint: Swift.Equatable {
        /// <p>Number of emails that have bounced.</p>
        public let bounces: Swift.Int
        /// <p>Number of unwanted emails that were rejected by recipients.</p>
        public let complaints: Swift.Int
        /// <p>Number of emails that have been sent.</p>
        public let deliveryAttempts: Swift.Int
        /// <p>Number of emails rejected by Amazon SES.</p>
        public let rejects: Swift.Int
        /// <p>Time of the data point.</p>
        public let timestamp: ClientRuntime.Date?

        public init (
            bounces: Swift.Int = 0,
            complaints: Swift.Int = 0,
            deliveryAttempts: Swift.Int = 0,
            rejects: Swift.Int = 0,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.bounces = bounces
            self.complaints = complaints
            self.deliveryAttempts = deliveryAttempts
            self.rejects = rejects
            self.timestamp = timestamp
        }
    }

}

public struct SendEmailInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendEmailInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendEmailOutputError>
}

extension SendEmailInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendEmailInput(configurationSetName: \(Swift.String(describing: configurationSetName)), destination: \(Swift.String(describing: destination)), message: \(Swift.String(describing: message)), replyToAddresses: \(Swift.String(describing: replyToAddresses)), returnPath: \(Swift.String(describing: returnPath)), returnPathArn: \(Swift.String(describing: returnPathArn)), source: \(Swift.String(describing: source)), sourceArn: \(Swift.String(describing: sourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension SendEmailInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
            for (index0, address0) in replyToAddresses.enumerated() {
                try replyToAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let returnPath = returnPath {
            try container.encode(returnPath, forKey: ClientRuntime.Key("ReturnPath"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, messagetag0) in tags.enumerated() {
                try tagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("SendEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SendEmailInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendEmailInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendEmailOutputError>
}

public struct SendEmailInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendEmailInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendEmailOutputError>
}

/// <p>Represents a request to send a single formatted email using Amazon SES. For more
///             information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-formatted.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct SendEmailInput: Swift.Equatable {
    /// <p>The name of the configuration set to use when you send an email using
    ///                 <code>SendEmail</code>.</p>
    public let configurationSetName: Swift.String?
    /// <p>The destination for this email, composed of To:, CC:, and BCC: fields.</p>
    public let destination: SesClientTypes.Destination?
    /// <p>The message to be sent.</p>
    public let message: SesClientTypes.Message?
    /// <p>The reply-to email address(es) for the message. If the recipient replies to the
    ///             message, each reply-to address will receive the reply.</p>
    public let replyToAddresses: [Swift.String]?
    /// <p>The email address that bounces and complaints will be forwarded to when feedback
    ///             forwarding is enabled. If the message cannot be delivered to the recipient, then an
    ///             error message will be returned from the recipient's ISP; this message will then be
    ///             forwarded to the email address specified by the <code>ReturnPath</code> parameter. The
    ///                 <code>ReturnPath</code> parameter is never overwritten. This email address must be
    ///             either individually verified with Amazon SES, or from a domain that has been verified with
    ///             Amazon SES. </p>
    public let returnPath: Swift.String?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to use the
    ///             email address specified in the <code>ReturnPath</code> parameter.</p>
    ///         <p>For example, if the owner of <code>example.com</code> (which has ARN
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
    ///             policy to it that authorizes you to use <code>feedback@example.com</code>, then you
    ///             would specify the <code>ReturnPathArn</code> to be
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
    ///                 <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p>
    ///         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public let returnPathArn: Swift.String?
    /// <p>The email address that is sending the email. This email address must be either
    ///             individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    ///             For information about verifying identities, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    ///         <p>If you are sending on behalf of another user and have been permitted to do so by a
    ///             sending authorization policy, then you must also specify the <code>SourceArn</code>
    ///             parameter. For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
    ///         <note>
    ///             <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
    ///                     <i>local part</i> of a source email address (the part of the email
    ///                 address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
    ///                     characters</a>. If the <i>domain part</i> of an address (the
    ///                 part after the @ sign) contains non-ASCII characters, they must be encoded using
    ///                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly
    ///                     name</i>) may contain non-ASCII characters. These characters must be
    ///                 encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word
    ///                 syntax uses the following form:
    ///                 <code>=?charset?encoding?encoded-text?=</code>.</p>
    ///         </note>
    public let source: Swift.String?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to send for
    ///             the email address specified in the <code>Source</code> parameter.</p>
    ///         <p>For example, if the owner of <code>example.com</code> (which has ARN
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
    ///             policy to it that authorizes you to send from <code>user@example.com</code>, then you
    ///             would specify the <code>SourceArn</code> to be
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
    ///                 <code>Source</code> to be <code>user@example.com</code>.</p>
    ///         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public let sourceArn: Swift.String?
    /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
    ///             using <code>SendEmail</code>. Tags correspond to characteristics of the email that you
    ///             define, so that you can publish email sending events.</p>
    public let tags: [SesClientTypes.MessageTag]?

    public init (
        configurationSetName: Swift.String? = nil,
        destination: SesClientTypes.Destination? = nil,
        message: SesClientTypes.Message? = nil,
        replyToAddresses: [Swift.String]? = nil,
        returnPath: Swift.String? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        tags: [SesClientTypes.MessageTag]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.destination = destination
        self.message = message
        self.replyToAddresses = replyToAddresses
        self.returnPath = returnPath
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.tags = tags
    }
}

extension SendEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSendingPausedException" : self = .accountSendingPausedException(try AccountSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetSendingPausedException" : self = .configurationSetSendingPausedException(try ConfigurationSetSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSendingPausedException(AccountSendingPausedException)
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case configurationSetSendingPausedException(ConfigurationSetSendingPausedException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendEmailOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendEmailOutputResponse(messageId: \(Swift.String(describing: messageId)))"}
}

extension SendEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// <p>Represents a unique message ID.</p>
public struct SendEmailOutputResponse: Swift.Equatable {
    /// <p>The unique message identifier returned from the <code>SendEmail</code> action. </p>
    public let messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendEmailOutputResponseBody: Swift.Equatable {
    public let messageId: Swift.String?
}

extension SendEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendEmailResult"))
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

public struct SendRawEmailInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendRawEmailInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendRawEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendRawEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendRawEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendRawEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendRawEmailOutputError>
}

extension SendRawEmailInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendRawEmailInput(configurationSetName: \(Swift.String(describing: configurationSetName)), destinations: \(Swift.String(describing: destinations)), fromArn: \(Swift.String(describing: fromArn)), rawMessage: \(Swift.String(describing: rawMessage)), returnPathArn: \(Swift.String(describing: returnPathArn)), source: \(Swift.String(describing: source)), sourceArn: \(Swift.String(describing: sourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension SendRawEmailInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let destinations = destinations {
            var destinationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Destinations"))
            for (index0, address0) in destinations.enumerated() {
                try destinationsContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let fromArn = fromArn {
            try container.encode(fromArn, forKey: ClientRuntime.Key("FromArn"))
        }
        if let rawMessage = rawMessage {
            try container.encode(rawMessage, forKey: ClientRuntime.Key("RawMessage"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, messagetag0) in tags.enumerated() {
                try tagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("SendRawEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SendRawEmailInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendRawEmailInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendRawEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendRawEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendRawEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendRawEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendRawEmailOutputError>
}

public struct SendRawEmailInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendRawEmailInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendRawEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendRawEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendRawEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendRawEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendRawEmailOutputError>
}

/// <p>Represents a request to send a single raw email using Amazon SES. For more information, see
///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
public struct SendRawEmailInput: Swift.Equatable {
    /// <p>The name of the configuration set to use when you send an email using
    ///                 <code>SendRawEmail</code>.</p>
    public let configurationSetName: Swift.String?
    /// <p>A list of destinations for the message, consisting of To:, CC:, and BCC:
    ///             addresses.</p>
    public let destinations: [Swift.String]?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to specify a
    ///             particular "From" address in the header of the raw email.</p>
    ///         <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code>
    ///             in the raw message of the email. If you use both the <code>FromArn</code> parameter and
    ///             the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code>
    ///             parameter.</p>
    ///         <note>
    ///             <p>For information about when to use this parameter, see the description of
    ///                     <code>SendRawEmail</code> in this guide, or see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p>
    ///         </note>
    public let fromArn: Swift.String?
    /// <p>The raw email message itself. The message has to meet the following criteria:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>The message has to contain a header and a body, separated by a blank
    ///                     line.</p>
    ///             </li>
    ///             <li>
    ///                 <p>All of the required header fields must be present in the message.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Each part of a multipart MIME message must be formatted properly.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Attachments must be of a content type that Amazon SES supports. For a list on
    ///                     unsupported content types, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mime-types.html">Unsupported Attachment
    ///                         Types</a> in the <i>Amazon SES Developer Guide</i>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The entire message must be base64-encoded.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If any of the MIME parts in your message contain content that is outside of
    ///                     the 7-bit ASCII character range, we highly recommend that you encode that
    ///                     content. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Sending Raw Email</a> in the <i>Amazon SES Developer
    ///                     Guide</i>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Per <a href="https://tools.ietf.org/html/rfc5321#section-4.5.3.1.6">RFC
    ///                         5321</a>, the maximum length of each line of text, including the
    ///                     <CRLF>, must not exceed 1,000 characters.</p>
    ///             </li>
    ///          </ul>
    public let rawMessage: SesClientTypes.RawMessage?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to use the
    ///             email address specified in the <code>ReturnPath</code> parameter.</p>
    ///         <p>For example, if the owner of <code>example.com</code> (which has ARN
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
    ///             policy to it that authorizes you to use <code>feedback@example.com</code>, then you
    ///             would specify the <code>ReturnPathArn</code> to be
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
    ///                 <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p>
    ///         <p>Instead of using this parameter, you can use the X-header
    ///                 <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both
    ///             the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the
    ///             value of the <code>ReturnPathArn</code> parameter.</p>
    ///         <note>
    ///             <p>For information about when to use this parameter, see the description of
    ///                     <code>SendRawEmail</code> in this guide, or see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p>
    ///         </note>
    public let returnPathArn: Swift.String?
    /// <p>The identity's email address. If you do not provide a value for this parameter, you
    ///             must specify a "From" address in the raw text of the message. (You can also specify
    ///             both.)</p>
    ///         <note>
    ///             <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
    ///                     <i>local part</i> of a source email address (the part of the email
    ///                 address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
    ///                     characters</a>. If the <i>domain part</i> of an address (the
    ///                 part after the @ sign) contains non-ASCII characters, they must be encoded using
    ///                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly
    ///                     name</i>) may contain non-ASCII characters. These characters must be
    ///                 encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word
    ///                 syntax uses the following form:
    ///                 <code>=?charset?encoding?encoded-text?=</code>.</p>
    ///         </note>
    ///
    ///         <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled,
    ///             then bounces and complaints will be sent to this email address. This takes precedence
    ///             over any Return-Path header that you might include in the raw text of the
    ///             message.</p>
    public let source: Swift.String?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to send for
    ///             the email address specified in the <code>Source</code> parameter.</p>
    ///         <p>For example, if the owner of <code>example.com</code> (which has ARN
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
    ///             policy to it that authorizes you to send from <code>user@example.com</code>, then you
    ///             would specify the <code>SourceArn</code> to be
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
    ///                 <code>Source</code> to be <code>user@example.com</code>.</p>
    ///         <p>Instead of using this parameter, you can use the X-header
    ///                 <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the
    ///                 <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the
    ///             value of the <code>SourceArn</code> parameter.</p>
    ///         <note>
    ///             <p>For information about when to use this parameter, see the description of
    ///                     <code>SendRawEmail</code> in this guide, or see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p>
    ///         </note>
    public let sourceArn: Swift.String?
    /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
    ///             using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that
    ///             you define, so that you can publish email sending events.</p>
    public let tags: [SesClientTypes.MessageTag]?

    public init (
        configurationSetName: Swift.String? = nil,
        destinations: [Swift.String]? = nil,
        fromArn: Swift.String? = nil,
        rawMessage: SesClientTypes.RawMessage? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        tags: [SesClientTypes.MessageTag]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.destinations = destinations
        self.fromArn = fromArn
        self.rawMessage = rawMessage
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.tags = tags
    }
}

extension SendRawEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendRawEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSendingPausedException" : self = .accountSendingPausedException(try AccountSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetSendingPausedException" : self = .configurationSetSendingPausedException(try ConfigurationSetSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendRawEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSendingPausedException(AccountSendingPausedException)
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case configurationSetSendingPausedException(ConfigurationSetSendingPausedException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendRawEmailOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendRawEmailOutputResponse(messageId: \(Swift.String(describing: messageId)))"}
}

extension SendRawEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendRawEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// <p>Represents a unique message ID.</p>
public struct SendRawEmailOutputResponse: Swift.Equatable {
    /// <p>The unique message identifier returned from the <code>SendRawEmail</code> action.
    ///         </p>
    public let messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendRawEmailOutputResponseBody: Swift.Equatable {
    public let messageId: Swift.String?
}

extension SendRawEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendRawEmailResult"))
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

public struct SendTemplatedEmailInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendTemplatedEmailInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendTemplatedEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendTemplatedEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendTemplatedEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendTemplatedEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendTemplatedEmailOutputError>
}

extension SendTemplatedEmailInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendTemplatedEmailInput(configurationSetName: \(Swift.String(describing: configurationSetName)), destination: \(Swift.String(describing: destination)), replyToAddresses: \(Swift.String(describing: replyToAddresses)), returnPath: \(Swift.String(describing: returnPath)), returnPathArn: \(Swift.String(describing: returnPathArn)), source: \(Swift.String(describing: source)), sourceArn: \(Swift.String(describing: sourceArn)), tags: \(Swift.String(describing: tags)), template: \(Swift.String(describing: template)), templateArn: \(Swift.String(describing: templateArn)), templateData: \(Swift.String(describing: templateData)))"}
}

extension SendTemplatedEmailInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
            for (index0, address0) in replyToAddresses.enumerated() {
                try replyToAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let returnPath = returnPath {
            try container.encode(returnPath, forKey: ClientRuntime.Key("ReturnPath"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, messagetag0) in tags.enumerated() {
                try tagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        if let templateArn = templateArn {
            try container.encode(templateArn, forKey: ClientRuntime.Key("TemplateArn"))
        }
        if let templateData = templateData {
            try container.encode(templateData, forKey: ClientRuntime.Key("TemplateData"))
        }
        try container.encode("SendTemplatedEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SendTemplatedEmailInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendTemplatedEmailInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendTemplatedEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendTemplatedEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendTemplatedEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendTemplatedEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendTemplatedEmailOutputError>
}

public struct SendTemplatedEmailInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendTemplatedEmailInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendTemplatedEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendTemplatedEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendTemplatedEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendTemplatedEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendTemplatedEmailOutputError>
}

/// <p>Represents a request to send a templated email using Amazon SES. For more information, see
///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct SendTemplatedEmailInput: Swift.Equatable {
    /// <p>The name of the configuration set to use when you send an email using
    ///                 <code>SendTemplatedEmail</code>.</p>
    public let configurationSetName: Swift.String?
    /// <p>The destination for this email, composed of To:, CC:, and BCC: fields. A Destination
    ///             can include up to 50 recipients across these three fields.</p>
    public let destination: SesClientTypes.Destination?
    /// <p>The reply-to email address(es) for the message. If the recipient replies to the
    ///             message, each reply-to address will receive the reply.</p>
    public let replyToAddresses: [Swift.String]?
    /// <p>The email address that bounces and complaints will be forwarded to when feedback
    ///             forwarding is enabled. If the message cannot be delivered to the recipient, then an
    ///             error message will be returned from the recipient's ISP; this message will then be
    ///             forwarded to the email address specified by the <code>ReturnPath</code> parameter. The
    ///                 <code>ReturnPath</code> parameter is never overwritten. This email address must be
    ///             either individually verified with Amazon SES, or from a domain that has been verified with
    ///             Amazon SES. </p>
    public let returnPath: Swift.String?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to use the
    ///             email address specified in the <code>ReturnPath</code> parameter.</p>
    ///         <p>For example, if the owner of <code>example.com</code> (which has ARN
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
    ///             policy to it that authorizes you to use <code>feedback@example.com</code>, then you
    ///             would specify the <code>ReturnPathArn</code> to be
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
    ///                 <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p>
    ///         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public let returnPathArn: Swift.String?
    /// <p>The email address that is sending the email. This email address must be either
    ///             individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    ///             For information about verifying identities, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    ///         <p>If you are sending on behalf of another user and have been permitted to do so by a
    ///             sending authorization policy, then you must also specify the <code>SourceArn</code>
    ///             parameter. For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
    ///         <note>
    ///             <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
    ///                     <i>local part</i> of a source email address (the part of the email
    ///                 address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
    ///                     characters</a>. If the <i>domain part</i> of an address (the
    ///                 part after the @ sign) contains non-ASCII characters, they must be encoded using
    ///                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly
    ///                     name</i>) may contain non-ASCII characters. These characters must be
    ///                 encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word
    ///                 syntax uses the following form:
    ///                 <code>=?charset?encoding?encoded-text?=</code>.</p>
    ///         </note>
    public let source: Swift.String?
    /// <p>This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to send for
    ///             the email address specified in the <code>Source</code> parameter.</p>
    ///         <p>For example, if the owner of <code>example.com</code> (which has ARN
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
    ///             policy to it that authorizes you to send from <code>user@example.com</code>, then you
    ///             would specify the <code>SourceArn</code> to be
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
    ///                 <code>Source</code> to be <code>user@example.com</code>.</p>
    ///         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public let sourceArn: Swift.String?
    /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
    ///             using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email
    ///             that you define, so that you can publish email sending events.</p>
    public let tags: [SesClientTypes.MessageTag]?
    /// <p>The template to use when sending this email.</p>
    public let template: Swift.String?
    /// <p>The ARN of the template to use when sending this email.</p>
    public let templateArn: Swift.String?
    /// <p>A list of replacement values to apply to the template. This parameter is a JSON
    ///             object, typically consisting of key-value pairs in which the keys correspond to
    ///             replacement tags in the email template.</p>
    public let templateData: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        destination: SesClientTypes.Destination? = nil,
        replyToAddresses: [Swift.String]? = nil,
        returnPath: Swift.String? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        tags: [SesClientTypes.MessageTag]? = nil,
        template: Swift.String? = nil,
        templateArn: Swift.String? = nil,
        templateData: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.destination = destination
        self.replyToAddresses = replyToAddresses
        self.returnPath = returnPath
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.tags = tags
        self.template = template
        self.templateArn = templateArn
        self.templateData = templateData
    }
}

extension SendTemplatedEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendTemplatedEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSendingPausedException" : self = .accountSendingPausedException(try AccountSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetSendingPausedException" : self = .configurationSetSendingPausedException(try ConfigurationSetSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TemplateDoesNotExistException" : self = .templateDoesNotExistException(try TemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendTemplatedEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSendingPausedException(AccountSendingPausedException)
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case configurationSetSendingPausedException(ConfigurationSetSendingPausedException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case templateDoesNotExistException(TemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendTemplatedEmailOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendTemplatedEmailOutputResponse(messageId: \(Swift.String(describing: messageId)))"}
}

extension SendTemplatedEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendTemplatedEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

public struct SendTemplatedEmailOutputResponse: Swift.Equatable {
    /// <p>The unique message identifier returned from the <code>SendTemplatedEmail</code>
    ///             action. </p>
    public let messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendTemplatedEmailOutputResponseBody: Swift.Equatable {
    public let messageId: Swift.String?
}

extension SendTemplatedEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendTemplatedEmailResult"))
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

public struct SetActiveReceiptRuleSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetActiveReceiptRuleSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetActiveReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetActiveReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetActiveReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetActiveReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetActiveReceiptRuleSetOutputError>
}

extension SetActiveReceiptRuleSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetActiveReceiptRuleSetInput(ruleSetName: \(Swift.String(describing: ruleSetName)))"}
}

extension SetActiveReceiptRuleSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("SetActiveReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetActiveReceiptRuleSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetActiveReceiptRuleSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetActiveReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetActiveReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetActiveReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetActiveReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetActiveReceiptRuleSetOutputError>
}

public struct SetActiveReceiptRuleSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetActiveReceiptRuleSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetActiveReceiptRuleSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetActiveReceiptRuleSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetActiveReceiptRuleSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetActiveReceiptRuleSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetActiveReceiptRuleSetOutputError>
}

/// <p>Represents a request to set a receipt rule set as the active receipt rule set. You use
///             receipt rule sets to receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
public struct SetActiveReceiptRuleSetInput: Swift.Equatable {
    /// <p>The name of the receipt rule set to make active. Setting this value to null disables
    ///             all email receiving.</p>
    public let ruleSetName: Swift.String?

    public init (
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

extension SetActiveReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetActiveReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleSetDoesNotExistException" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetActiveReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetActiveReceiptRuleSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetActiveReceiptRuleSetOutputResponse()"}
}

extension SetActiveReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct SetActiveReceiptRuleSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetActiveReceiptRuleSetOutputResponseBody: Swift.Equatable {
}

extension SetActiveReceiptRuleSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetIdentityDkimEnabledInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityDkimEnabledInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityDkimEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityDkimEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityDkimEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityDkimEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityDkimEnabledOutputError>
}

extension SetIdentityDkimEnabledInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIdentityDkimEnabledInput(dkimEnabled: \(Swift.String(describing: dkimEnabled)), identity: \(Swift.String(describing: identity)))"}
}

extension SetIdentityDkimEnabledInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if dkimEnabled != false {
            try container.encode(dkimEnabled, forKey: ClientRuntime.Key("DkimEnabled"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("SetIdentityDkimEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetIdentityDkimEnabledInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityDkimEnabledInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityDkimEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityDkimEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityDkimEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityDkimEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityDkimEnabledOutputError>
}

public struct SetIdentityDkimEnabledInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityDkimEnabledInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityDkimEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityDkimEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityDkimEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityDkimEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityDkimEnabledOutputError>
}

/// <p>Represents a request to enable or disable Amazon SES Easy DKIM signing for an identity. For
///             more information about setting up Easy DKIM, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
public struct SetIdentityDkimEnabledInput: Swift.Equatable {
    /// <p>Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to
    ///             enable DKIM signing for this identity; <code>false</code> to disable it. </p>
    public let dkimEnabled: Swift.Bool
    /// <p>The identity for which DKIM signing should be enabled or disabled.</p>
    public let identity: Swift.String?

    public init (
        dkimEnabled: Swift.Bool = false,
        identity: Swift.String? = nil
    )
    {
        self.dkimEnabled = dkimEnabled
        self.identity = identity
    }
}

extension SetIdentityDkimEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetIdentityDkimEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetIdentityDkimEnabledOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIdentityDkimEnabledOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIdentityDkimEnabledOutputResponse()"}
}

extension SetIdentityDkimEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct SetIdentityDkimEnabledOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetIdentityDkimEnabledOutputResponseBody: Swift.Equatable {
}

extension SetIdentityDkimEnabledOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetIdentityFeedbackForwardingEnabledInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityFeedbackForwardingEnabledInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityFeedbackForwardingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityFeedbackForwardingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityFeedbackForwardingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityFeedbackForwardingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityFeedbackForwardingEnabledOutputError>
}

extension SetIdentityFeedbackForwardingEnabledInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIdentityFeedbackForwardingEnabledInput(forwardingEnabled: \(Swift.String(describing: forwardingEnabled)), identity: \(Swift.String(describing: identity)))"}
}

extension SetIdentityFeedbackForwardingEnabledInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if forwardingEnabled != false {
            try container.encode(forwardingEnabled, forKey: ClientRuntime.Key("ForwardingEnabled"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("SetIdentityFeedbackForwardingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetIdentityFeedbackForwardingEnabledInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityFeedbackForwardingEnabledInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityFeedbackForwardingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityFeedbackForwardingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityFeedbackForwardingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityFeedbackForwardingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityFeedbackForwardingEnabledOutputError>
}

public struct SetIdentityFeedbackForwardingEnabledInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityFeedbackForwardingEnabledInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityFeedbackForwardingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityFeedbackForwardingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityFeedbackForwardingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityFeedbackForwardingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityFeedbackForwardingEnabledOutputError>
}

/// <p>Represents a request to enable or disable whether Amazon SES forwards you bounce and
///             complaint notifications through email. For information about email feedback forwarding,
///             see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications-via-email.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct SetIdentityFeedbackForwardingEnabledInput: Swift.Equatable {
    /// <p>Sets whether Amazon SES will forward bounce and complaint notifications as email.
    ///                 <code>true</code> specifies that Amazon SES will forward bounce and complaint
    ///             notifications as email, in addition to any Amazon SNS topic publishing otherwise specified.
    ///                 <code>false</code> specifies that Amazon SES will publish bounce and complaint
    ///             notifications only through Amazon SNS. This value can only be set to <code>false</code> when
    ///             Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code>
    ///             notification types.</p>
    public let forwardingEnabled: Swift.Bool
    /// <p>The identity for which to set bounce and complaint notification forwarding. Examples:
    ///                 <code>user@example.com</code>, <code>example.com</code>.</p>
    public let identity: Swift.String?

    public init (
        forwardingEnabled: Swift.Bool = false,
        identity: Swift.String? = nil
    )
    {
        self.forwardingEnabled = forwardingEnabled
        self.identity = identity
    }
}

extension SetIdentityFeedbackForwardingEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetIdentityFeedbackForwardingEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetIdentityFeedbackForwardingEnabledOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIdentityFeedbackForwardingEnabledOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIdentityFeedbackForwardingEnabledOutputResponse()"}
}

extension SetIdentityFeedbackForwardingEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct SetIdentityFeedbackForwardingEnabledOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetIdentityFeedbackForwardingEnabledOutputResponseBody: Swift.Equatable {
}

extension SetIdentityFeedbackForwardingEnabledOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetIdentityHeadersInNotificationsEnabledInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityHeadersInNotificationsEnabledInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityHeadersInNotificationsEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityHeadersInNotificationsEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityHeadersInNotificationsEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityHeadersInNotificationsEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityHeadersInNotificationsEnabledOutputError>
}

extension SetIdentityHeadersInNotificationsEnabledInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIdentityHeadersInNotificationsEnabledInput(enabled: \(Swift.String(describing: enabled)), identity: \(Swift.String(describing: identity)), notificationType: \(Swift.String(describing: notificationType)))"}
}

extension SetIdentityHeadersInNotificationsEnabledInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let notificationType = notificationType {
            try container.encode(notificationType, forKey: ClientRuntime.Key("NotificationType"))
        }
        try container.encode("SetIdentityHeadersInNotificationsEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetIdentityHeadersInNotificationsEnabledInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityHeadersInNotificationsEnabledInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityHeadersInNotificationsEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityHeadersInNotificationsEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityHeadersInNotificationsEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityHeadersInNotificationsEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityHeadersInNotificationsEnabledOutputError>
}

public struct SetIdentityHeadersInNotificationsEnabledInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityHeadersInNotificationsEnabledInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityHeadersInNotificationsEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityHeadersInNotificationsEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityHeadersInNotificationsEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityHeadersInNotificationsEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityHeadersInNotificationsEnabledOutputError>
}

/// <p>Represents a request to set whether Amazon SES includes the original email headers in the
///             Amazon SNS notifications of a specified type. For information about notifications, see the
///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications-via-sns.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct SetIdentityHeadersInNotificationsEnabledInput: Swift.Equatable {
    /// <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the
    ///             specified notification type. A value of <code>true</code> specifies that Amazon SES will
    ///             include headers in notifications, and a value of <code>false</code> specifies that Amazon SES
    ///             will not include headers in notifications.</p>
    ///         <p>This value can only be set when <code>NotificationType</code> is already set to use a
    ///             particular Amazon SNS topic.</p>
    public let enabled: Swift.Bool
    /// <p>The identity for which to enable or disable headers in notifications. Examples:
    ///                 <code>user@example.com</code>, <code>example.com</code>.</p>
    public let identity: Swift.String?
    /// <p>The notification type for which to enable or disable headers in notifications. </p>
    public let notificationType: SesClientTypes.NotificationType?

    public init (
        enabled: Swift.Bool = false,
        identity: Swift.String? = nil,
        notificationType: SesClientTypes.NotificationType? = nil
    )
    {
        self.enabled = enabled
        self.identity = identity
        self.notificationType = notificationType
    }
}

extension SetIdentityHeadersInNotificationsEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetIdentityHeadersInNotificationsEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetIdentityHeadersInNotificationsEnabledOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIdentityHeadersInNotificationsEnabledOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIdentityHeadersInNotificationsEnabledOutputResponse()"}
}

extension SetIdentityHeadersInNotificationsEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct SetIdentityHeadersInNotificationsEnabledOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetIdentityHeadersInNotificationsEnabledOutputResponseBody: Swift.Equatable {
}

extension SetIdentityHeadersInNotificationsEnabledOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetIdentityMailFromDomainInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityMailFromDomainInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityMailFromDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityMailFromDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityMailFromDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityMailFromDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityMailFromDomainOutputError>
}

extension SetIdentityMailFromDomainInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIdentityMailFromDomainInput(behaviorOnMXFailure: \(Swift.String(describing: behaviorOnMXFailure)), identity: \(Swift.String(describing: identity)), mailFromDomain: \(Swift.String(describing: mailFromDomain)))"}
}

extension SetIdentityMailFromDomainInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let behaviorOnMXFailure = behaviorOnMXFailure {
            try container.encode(behaviorOnMXFailure, forKey: ClientRuntime.Key("BehaviorOnMXFailure"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let mailFromDomain = mailFromDomain {
            try container.encode(mailFromDomain, forKey: ClientRuntime.Key("MailFromDomain"))
        }
        try container.encode("SetIdentityMailFromDomain", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetIdentityMailFromDomainInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityMailFromDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityMailFromDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityMailFromDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityMailFromDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityMailFromDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityMailFromDomainOutputError>
}

public struct SetIdentityMailFromDomainInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityMailFromDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityMailFromDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityMailFromDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityMailFromDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityMailFromDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityMailFromDomainOutputError>
}

/// <p>Represents a request to enable or disable the Amazon SES custom MAIL FROM domain setup for
///             a verified identity. For information about using a custom MAIL FROM domain, see the
///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES
///                 Developer Guide</a>.</p>
public struct SetIdentityMailFromDomainInput: Swift.Equatable {
    /// <p>The action that you want Amazon SES to take if it cannot successfully read the required MX
    ///             record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will
    ///             use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose
    ///                 <code>RejectMessage</code>, Amazon SES will return a
    ///                 <code>MailFromDomainNotVerified</code> error and not send the email.</p>
    ///         <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL
    ///             FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and
    ///                 <code>TemporaryFailure</code> states.</p>
    public let behaviorOnMXFailure: SesClientTypes.BehaviorOnMXFailure?
    /// <p>The verified identity for which you want to enable or disable the specified custom
    ///             MAIL FROM domain.</p>
    public let identity: Swift.String?
    /// <p>The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM
    ///             domain must 1) be a subdomain of the verified identity, 2) not be used in a "From"
    ///             address if the MAIL FROM domain is the destination of email feedback forwarding (for
    ///             more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and
    ///             3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL
    ///             FROM setting for the identity.</p>
    public let mailFromDomain: Swift.String?

    public init (
        behaviorOnMXFailure: SesClientTypes.BehaviorOnMXFailure? = nil,
        identity: Swift.String? = nil,
        mailFromDomain: Swift.String? = nil
    )
    {
        self.behaviorOnMXFailure = behaviorOnMXFailure
        self.identity = identity
        self.mailFromDomain = mailFromDomain
    }
}

extension SetIdentityMailFromDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetIdentityMailFromDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetIdentityMailFromDomainOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIdentityMailFromDomainOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIdentityMailFromDomainOutputResponse()"}
}

extension SetIdentityMailFromDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct SetIdentityMailFromDomainOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetIdentityMailFromDomainOutputResponseBody: Swift.Equatable {
}

extension SetIdentityMailFromDomainOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetIdentityNotificationTopicInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityNotificationTopicInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityNotificationTopicInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityNotificationTopicOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityNotificationTopicInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityNotificationTopicOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityNotificationTopicOutputError>
}

extension SetIdentityNotificationTopicInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIdentityNotificationTopicInput(identity: \(Swift.String(describing: identity)), notificationType: \(Swift.String(describing: notificationType)), snsTopic: \(Swift.String(describing: snsTopic)))"}
}

extension SetIdentityNotificationTopicInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let notificationType = notificationType {
            try container.encode(notificationType, forKey: ClientRuntime.Key("NotificationType"))
        }
        if let snsTopic = snsTopic {
            try container.encode(snsTopic, forKey: ClientRuntime.Key("SnsTopic"))
        }
        try container.encode("SetIdentityNotificationTopic", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetIdentityNotificationTopicInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityNotificationTopicInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityNotificationTopicInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityNotificationTopicOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityNotificationTopicInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityNotificationTopicOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityNotificationTopicOutputError>
}

public struct SetIdentityNotificationTopicInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIdentityNotificationTopicInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIdentityNotificationTopicInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIdentityNotificationTopicOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIdentityNotificationTopicInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIdentityNotificationTopicOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIdentityNotificationTopicOutputError>
}

/// <p>Represents a request to specify the Amazon SNS topic to which Amazon SES will publish bounce,
///             complaint, or delivery notifications for emails sent with that identity as the Source.
///             For information about Amazon SES notifications, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications-via-sns.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct SetIdentityNotificationTopicInput: Swift.Equatable {
    /// <p>The identity (email address or domain) that you want to set the Amazon SNS topic
    ///             for.</p>
    ///         <important>
    ///             <p>You can only specify a verified identity for this parameter.</p>
    ///         </important>
    ///         <p>You can specify an identity by using its name or by using its Amazon Resource Name
    ///             (ARN). The following examples are all valid identities: <code>sender@example.com</code>,
    ///                 <code>example.com</code>,
    ///                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
    public let identity: Swift.String?
    /// <p>The type of notifications that will be published to the specified Amazon SNS topic.</p>
    public let notificationType: SesClientTypes.NotificationType?
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from
    ///             the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing
    ///             is disabled.</p>
    public let snsTopic: Swift.String?

    public init (
        identity: Swift.String? = nil,
        notificationType: SesClientTypes.NotificationType? = nil,
        snsTopic: Swift.String? = nil
    )
    {
        self.identity = identity
        self.notificationType = notificationType
        self.snsTopic = snsTopic
    }
}

extension SetIdentityNotificationTopicOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetIdentityNotificationTopicOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetIdentityNotificationTopicOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIdentityNotificationTopicOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIdentityNotificationTopicOutputResponse()"}
}

extension SetIdentityNotificationTopicOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct SetIdentityNotificationTopicOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetIdentityNotificationTopicOutputResponseBody: Swift.Equatable {
}

extension SetIdentityNotificationTopicOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetReceiptRulePositionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetReceiptRulePositionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetReceiptRulePositionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetReceiptRulePositionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetReceiptRulePositionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetReceiptRulePositionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetReceiptRulePositionOutputError>
}

extension SetReceiptRulePositionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetReceiptRulePositionInput(after: \(Swift.String(describing: after)), ruleName: \(Swift.String(describing: ruleName)), ruleSetName: \(Swift.String(describing: ruleSetName)))"}
}

extension SetReceiptRulePositionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let after = after {
            try container.encode(after, forKey: ClientRuntime.Key("After"))
        }
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("SetReceiptRulePosition", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetReceiptRulePositionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetReceiptRulePositionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetReceiptRulePositionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetReceiptRulePositionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetReceiptRulePositionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetReceiptRulePositionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetReceiptRulePositionOutputError>
}

public struct SetReceiptRulePositionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetReceiptRulePositionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetReceiptRulePositionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetReceiptRulePositionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetReceiptRulePositionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetReceiptRulePositionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetReceiptRulePositionOutputError>
}

/// <p>Represents a request to set the position of a receipt rule in a receipt rule set. You
///             use receipt rule sets to receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
public struct SetReceiptRulePositionInput: Swift.Equatable {
    /// <p>The name of the receipt rule after which to place the specified receipt rule.</p>
    public let after: Swift.String?
    /// <p>The name of the receipt rule to reposition.</p>
    public let ruleName: Swift.String?
    /// <p>The name of the receipt rule set that contains the receipt rule to reposition.</p>
    public let ruleSetName: Swift.String?

    public init (
        after: Swift.String? = nil,
        ruleName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.after = after
        self.ruleName = ruleName
        self.ruleSetName = ruleSetName
    }
}

extension SetReceiptRulePositionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetReceiptRulePositionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleDoesNotExistException" : self = .ruleDoesNotExistException(try RuleDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExistException" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetReceiptRulePositionOutputError: Swift.Error, Swift.Equatable {
    case ruleDoesNotExistException(RuleDoesNotExistException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetReceiptRulePositionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetReceiptRulePositionOutputResponse()"}
}

extension SetReceiptRulePositionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct SetReceiptRulePositionOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetReceiptRulePositionOutputResponseBody: Swift.Equatable {
}

extension SetReceiptRulePositionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesClientTypes.StopAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scope = "Scope"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let scope = scope {
            try container.encode(scope, forKey: ClientRuntime.Key("Scope"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(SesClientTypes.StopScope.self, forKey: .scope)
        scope = scopeDecoded
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
    }
}

extension SesClientTypes.StopAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopAction(scope: \(Swift.String(describing: scope)), topicArn: \(Swift.String(describing: topicArn)))"}
}

extension SesClientTypes {
    /// <p>When included in a receipt rule, this action terminates the evaluation of the receipt
    ///             rule set and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).</p>
    ///         <p>For information about setting a stop action in a receipt rule, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-stop.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public struct StopAction: Swift.Equatable {
        /// <p>The scope of the StopAction. The only acceptable value is <code>RuleSet</code>.</p>
        public let scope: SesClientTypes.StopScope?
        /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the stop action is
        ///             taken. An example of an Amazon SNS topic ARN is
        ///                 <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more information about
        ///             Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
        public let topicArn: Swift.String?

        public init (
            scope: SesClientTypes.StopScope? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.scope = scope
            self.topicArn = topicArn
        }
    }

}

extension SesClientTypes {
    public enum StopScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ruleSet
        case sdkUnknown(Swift.String)

        public static var allCases: [StopScope] {
            return [
                .ruleSet,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ruleSet: return "RuleSet"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StopScope(rawValue: rawValue) ?? StopScope.sdkUnknown(rawValue)
        }
    }
}

extension SesClientTypes.Template: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case htmlPart = "HtmlPart"
        case subjectPart = "SubjectPart"
        case templateName = "TemplateName"
        case textPart = "TextPart"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let htmlPart = htmlPart {
            try container.encode(htmlPart, forKey: ClientRuntime.Key("HtmlPart"))
        }
        if let subjectPart = subjectPart {
            try container.encode(subjectPart, forKey: ClientRuntime.Key("SubjectPart"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let textPart = textPart {
            try container.encode(textPart, forKey: ClientRuntime.Key("TextPart"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let subjectPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectPart)
        subjectPart = subjectPartDecoded
        let textPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textPart)
        textPart = textPartDecoded
        let htmlPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .htmlPart)
        htmlPart = htmlPartDecoded
    }
}

extension SesClientTypes.Template: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Template(htmlPart: \(Swift.String(describing: htmlPart)), subjectPart: \(Swift.String(describing: subjectPart)), templateName: \(Swift.String(describing: templateName)), textPart: \(Swift.String(describing: textPart)))"}
}

extension SesClientTypes {
    /// <p>The content of the email, composed of a subject line, an HTML part, and a text-only
    ///             part.</p>
    public struct Template: Swift.Equatable {
        /// <p>The HTML body of the email.</p>
        public let htmlPart: Swift.String?
        /// <p>The subject line of the email.</p>
        public let subjectPart: Swift.String?
        /// <p>The name of the template. You will refer to this name when you send email using the
        ///                 <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code>
        ///             operations.</p>
        public let templateName: Swift.String?
        /// <p>The email body that will be visible to recipients whose email clients do not display
        ///             HTML.</p>
        public let textPart: Swift.String?

        public init (
            htmlPart: Swift.String? = nil,
            subjectPart: Swift.String? = nil,
            templateName: Swift.String? = nil,
            textPart: Swift.String? = nil
        )
        {
            self.htmlPart = htmlPart
            self.subjectPart = subjectPart
            self.templateName = templateName
            self.textPart = textPart
        }
    }

}

extension TemplateDoesNotExistException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TemplateDoesNotExistException(templateName: \(Swift.String(describing: templateName)), message: \(Swift.String(describing: message)))"}
}

extension TemplateDoesNotExistException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TemplateDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.templateName = output.error.templateName
        } else {
            self.templateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the Template object you specified does not exist in your Amazon SES
///             account.</p>
public struct TemplateDoesNotExistException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var templateName: Swift.String?

    public init (
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.message = message
        self.templateName = templateName
    }
}

struct TemplateDoesNotExistExceptionBody: Swift.Equatable {
    public let templateName: Swift.String?
    public let message: Swift.String?
}

extension TemplateDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesClientTypes.TemplateMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createdTimestamp = createdTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(createdTimestamp, format: .dateTime), forKey: ClientRuntime.Key("createdTimestamp"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTimestamp)
        var createdTimestampBuffer:ClientRuntime.Date? = nil
        if let createdTimestampDecoded = createdTimestampDecoded {
            createdTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createdTimestampDecoded, format: .dateTime)
        }
        createdTimestamp = createdTimestampBuffer
    }
}

extension SesClientTypes.TemplateMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TemplateMetadata(createdTimestamp: \(Swift.String(describing: createdTimestamp)), name: \(Swift.String(describing: name)))"}
}

extension SesClientTypes {
    /// <p>Contains information about an email template.</p>
    public struct TemplateMetadata: Swift.Equatable {
        /// <p>The time and date the template was created.</p>
        public let createdTimestamp: ClientRuntime.Date?
        /// <p>The name of the template.</p>
        public let name: Swift.String?

        public init (
            createdTimestamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.name = name
        }
    }

}

public struct TestRenderTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestRenderTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestRenderTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestRenderTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestRenderTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestRenderTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestRenderTemplateOutputError>
}

extension TestRenderTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestRenderTemplateInput(templateData: \(Swift.String(describing: templateData)), templateName: \(Swift.String(describing: templateName)))"}
}

extension TestRenderTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateData = templateData {
            try container.encode(templateData, forKey: ClientRuntime.Key("TemplateData"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("TestRenderTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct TestRenderTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestRenderTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestRenderTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestRenderTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestRenderTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestRenderTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestRenderTemplateOutputError>
}

public struct TestRenderTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestRenderTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestRenderTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestRenderTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestRenderTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestRenderTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestRenderTemplateOutputError>
}

public struct TestRenderTemplateInput: Swift.Equatable {
    /// <p>A list of replacement values to apply to the template. This parameter is a JSON
    ///             object, typically consisting of key-value pairs in which the keys correspond to
    ///             replacement tags in the email template.</p>
    public let templateData: Swift.String?
    /// <p>The name of the template that you want to render.</p>
    public let templateName: Swift.String?

    public init (
        templateData: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateData = templateData
        self.templateName = templateName
    }
}

extension TestRenderTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TestRenderTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRenderingParameterException" : self = .invalidRenderingParameterException(try InvalidRenderingParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRenderingAttributeException" : self = .missingRenderingAttributeException(try MissingRenderingAttributeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TemplateDoesNotExistException" : self = .templateDoesNotExistException(try TemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TestRenderTemplateOutputError: Swift.Error, Swift.Equatable {
    case invalidRenderingParameterException(InvalidRenderingParameterException)
    case missingRenderingAttributeException(MissingRenderingAttributeException)
    case templateDoesNotExistException(TemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestRenderTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestRenderTemplateOutputResponse(renderedTemplate: \(Swift.String(describing: renderedTemplate)))"}
}

extension TestRenderTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TestRenderTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.renderedTemplate = output.renderedTemplate
        } else {
            self.renderedTemplate = nil
        }
    }
}

public struct TestRenderTemplateOutputResponse: Swift.Equatable {
    /// <p>The complete MIME message rendered by applying the data in the TemplateData parameter
    ///             to the template specified in the TemplateName parameter.</p>
    public let renderedTemplate: Swift.String?

    public init (
        renderedTemplate: Swift.String? = nil
    )
    {
        self.renderedTemplate = renderedTemplate
    }
}

struct TestRenderTemplateOutputResponseBody: Swift.Equatable {
    public let renderedTemplate: Swift.String?
}

extension TestRenderTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case renderedTemplate = "RenderedTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("TestRenderTemplateResult"))
        let renderedTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .renderedTemplate)
        renderedTemplate = renderedTemplateDecoded
    }
}

extension SesClientTypes {
    public enum TlsPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `optional`
        case require
        case sdkUnknown(Swift.String)

        public static var allCases: [TlsPolicy] {
            return [
                .optional,
                .require,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optional: return "Optional"
            case .require: return "Require"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TlsPolicy(rawValue: rawValue) ?? TlsPolicy.sdkUnknown(rawValue)
        }
    }
}

extension SesClientTypes.TrackingOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customRedirectDomain = customRedirectDomain {
            try container.encode(customRedirectDomain, forKey: ClientRuntime.Key("CustomRedirectDomain"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRedirectDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customRedirectDomain)
        customRedirectDomain = customRedirectDomainDecoded
    }
}

extension SesClientTypes.TrackingOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrackingOptions(customRedirectDomain: \(Swift.String(describing: customRedirectDomain)))"}
}

extension SesClientTypes {
    /// <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This
    ///             domain captures open and click events generated by Amazon SES emails.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring
    ///                 Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES
    ///                 Developer Guide</i>.</p>
    public struct TrackingOptions: Swift.Equatable {
        /// <p>The custom subdomain that will be used to redirect email recipients to the Amazon SES
        ///             event tracking domain.</p>
        public let customRedirectDomain: Swift.String?

        public init (
            customRedirectDomain: Swift.String? = nil
        )
        {
            self.customRedirectDomain = customRedirectDomain
        }
    }

}

extension TrackingOptionsAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrackingOptionsAlreadyExistsException(configurationSetName: \(Swift.String(describing: configurationSetName)), message: \(Swift.String(describing: message)))"}
}

extension TrackingOptionsAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TrackingOptionsAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the configuration set you specified already contains a TrackingOptions
///             object.</p>
public struct TrackingOptionsAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that a TrackingOptions object already exists in the specified configuration
    ///             set.</p>
    public var configurationSetName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.message = message
    }
}

struct TrackingOptionsAlreadyExistsExceptionBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let message: Swift.String?
}

extension TrackingOptionsAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TrackingOptionsDoesNotExistException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrackingOptionsDoesNotExistException(configurationSetName: \(Swift.String(describing: configurationSetName)), message: \(Swift.String(describing: message)))"}
}

extension TrackingOptionsDoesNotExistException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TrackingOptionsDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that the TrackingOptions object you specified does not exist.</p>
public struct TrackingOptionsDoesNotExistException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Indicates that a TrackingOptions object does not exist in the specified configuration
    ///             set.</p>
    public var configurationSetName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.message = message
    }
}

struct TrackingOptionsDoesNotExistExceptionBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let message: Swift.String?
}

extension TrackingOptionsDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UpdateAccountSendingEnabledInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAccountSendingEnabledInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAccountSendingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAccountSendingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAccountSendingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAccountSendingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAccountSendingEnabledOutputError>
}

extension UpdateAccountSendingEnabledInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAccountSendingEnabledInput(enabled: \(Swift.String(describing: enabled)))"}
}

extension UpdateAccountSendingEnabledInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        try container.encode("UpdateAccountSendingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateAccountSendingEnabledInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAccountSendingEnabledInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAccountSendingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAccountSendingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAccountSendingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAccountSendingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAccountSendingEnabledOutputError>
}

public struct UpdateAccountSendingEnabledInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAccountSendingEnabledInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAccountSendingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAccountSendingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAccountSendingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAccountSendingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAccountSendingEnabledOutputError>
}

/// <p>Represents a request to enable or disable the email sending capabilities for your
///             entire Amazon SES account.</p>
public struct UpdateAccountSendingEnabledInput: Swift.Equatable {
    /// <p>Describes whether email sending is enabled or disabled for your Amazon SES account in the
    ///             current AWS Region.</p>
    public let enabled: Swift.Bool

    public init (
        enabled: Swift.Bool = false
    )
    {
        self.enabled = enabled
    }
}

extension UpdateAccountSendingEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateAccountSendingEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAccountSendingEnabledOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAccountSendingEnabledOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAccountSendingEnabledOutputResponse()"}
}

extension UpdateAccountSendingEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAccountSendingEnabledOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateAccountSendingEnabledOutputResponseBody: Swift.Equatable {
}

extension UpdateAccountSendingEnabledOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateConfigurationSetEventDestinationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetEventDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetEventDestinationOutputError>
}

extension UpdateConfigurationSetEventDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConfigurationSetEventDestinationInput(configurationSetName: \(Swift.String(describing: configurationSetName)), eventDestination: \(Swift.String(describing: eventDestination)))"}
}

extension UpdateConfigurationSetEventDestinationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let eventDestination = eventDestination {
            try container.encode(eventDestination, forKey: ClientRuntime.Key("EventDestination"))
        }
        try container.encode("UpdateConfigurationSetEventDestination", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateConfigurationSetEventDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetEventDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetEventDestinationOutputError>
}

public struct UpdateConfigurationSetEventDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetEventDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetEventDestinationOutputError>
}

/// <p>Represents a request to update the event destination of a configuration set.
///             Configuration sets enable you to publish email sending events. For information about
///             using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct UpdateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// <p>The name of the configuration set that contains the event destination that you want to
    ///             update.</p>
    public let configurationSetName: Swift.String?
    /// <p>The event destination object that you want to apply to the specified configuration
    ///             set.</p>
    public let eventDestination: SesClientTypes.EventDestination?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestination: SesClientTypes.EventDestination? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
    }
}

extension UpdateConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EventDestinationDoesNotExistException" : self = .eventDestinationDoesNotExistException(try EventDestinationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCloudWatchDestinationException" : self = .invalidCloudWatchDestinationException(try InvalidCloudWatchDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFirehoseDestinationException" : self = .invalidFirehoseDestinationException(try InvalidFirehoseDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSNSDestinationException" : self = .invalidSNSDestinationException(try InvalidSNSDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case eventDestinationDoesNotExistException(EventDestinationDoesNotExistException)
    case invalidCloudWatchDestinationException(InvalidCloudWatchDestinationException)
    case invalidFirehoseDestinationException(InvalidFirehoseDestinationException)
    case invalidSNSDestinationException(InvalidSNSDestinationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationSetEventDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConfigurationSetEventDestinationOutputResponse()"}
}

extension UpdateConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct UpdateConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateConfigurationSetEventDestinationOutputResponseBody: Swift.Equatable {
}

extension UpdateConfigurationSetEventDestinationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateConfigurationSetReputationMetricsEnabledInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetReputationMetricsEnabledInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetReputationMetricsEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetReputationMetricsEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetReputationMetricsEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetReputationMetricsEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetReputationMetricsEnabledOutputError>
}

extension UpdateConfigurationSetReputationMetricsEnabledInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConfigurationSetReputationMetricsEnabledInput(configurationSetName: \(Swift.String(describing: configurationSetName)), enabled: \(Swift.String(describing: enabled)))"}
}

extension UpdateConfigurationSetReputationMetricsEnabledInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        try container.encode("UpdateConfigurationSetReputationMetricsEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateConfigurationSetReputationMetricsEnabledInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetReputationMetricsEnabledInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetReputationMetricsEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetReputationMetricsEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetReputationMetricsEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetReputationMetricsEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetReputationMetricsEnabledOutputError>
}

public struct UpdateConfigurationSetReputationMetricsEnabledInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetReputationMetricsEnabledInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetReputationMetricsEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetReputationMetricsEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetReputationMetricsEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetReputationMetricsEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetReputationMetricsEnabledOutputError>
}

/// <p>Represents a request to modify the reputation metric publishing settings for a
///             configuration set.</p>
public struct UpdateConfigurationSetReputationMetricsEnabledInput: Swift.Equatable {
    /// <p>The name of the configuration set that you want to update.</p>
    public let configurationSetName: Swift.String?
    /// <p>Describes whether or not Amazon SES will publish reputation metrics for the configuration
    ///             set, such as bounce and complaint rates, to Amazon CloudWatch.</p>
    public let enabled: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        enabled: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.enabled = enabled
    }
}

extension UpdateConfigurationSetReputationMetricsEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateConfigurationSetReputationMetricsEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateConfigurationSetReputationMetricsEnabledOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationSetReputationMetricsEnabledOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConfigurationSetReputationMetricsEnabledOutputResponse()"}
}

extension UpdateConfigurationSetReputationMetricsEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateConfigurationSetReputationMetricsEnabledOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateConfigurationSetReputationMetricsEnabledOutputResponseBody: Swift.Equatable {
}

extension UpdateConfigurationSetReputationMetricsEnabledOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateConfigurationSetSendingEnabledInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetSendingEnabledInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetSendingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetSendingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetSendingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetSendingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetSendingEnabledOutputError>
}

extension UpdateConfigurationSetSendingEnabledInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConfigurationSetSendingEnabledInput(configurationSetName: \(Swift.String(describing: configurationSetName)), enabled: \(Swift.String(describing: enabled)))"}
}

extension UpdateConfigurationSetSendingEnabledInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        try container.encode("UpdateConfigurationSetSendingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateConfigurationSetSendingEnabledInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetSendingEnabledInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetSendingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetSendingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetSendingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetSendingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetSendingEnabledOutputError>
}

public struct UpdateConfigurationSetSendingEnabledInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetSendingEnabledInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetSendingEnabledInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetSendingEnabledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetSendingEnabledInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetSendingEnabledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetSendingEnabledOutputError>
}

/// <p>Represents a request to enable or disable the email sending capabilities for a
///             specific configuration set.</p>
public struct UpdateConfigurationSetSendingEnabledInput: Swift.Equatable {
    /// <p>The name of the configuration set that you want to update.</p>
    public let configurationSetName: Swift.String?
    /// <p>Describes whether email sending is enabled or disabled for the configuration set.
    ///         </p>
    public let enabled: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        enabled: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.enabled = enabled
    }
}

extension UpdateConfigurationSetSendingEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateConfigurationSetSendingEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateConfigurationSetSendingEnabledOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationSetSendingEnabledOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConfigurationSetSendingEnabledOutputResponse()"}
}

extension UpdateConfigurationSetSendingEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateConfigurationSetSendingEnabledOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateConfigurationSetSendingEnabledOutputResponseBody: Swift.Equatable {
}

extension UpdateConfigurationSetSendingEnabledOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateConfigurationSetTrackingOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetTrackingOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetTrackingOptionsOutputError>
}

extension UpdateConfigurationSetTrackingOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConfigurationSetTrackingOptionsInput(configurationSetName: \(Swift.String(describing: configurationSetName)), trackingOptions: \(Swift.String(describing: trackingOptions)))"}
}

extension UpdateConfigurationSetTrackingOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let trackingOptions = trackingOptions {
            try container.encode(trackingOptions, forKey: ClientRuntime.Key("TrackingOptions"))
        }
        try container.encode("UpdateConfigurationSetTrackingOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateConfigurationSetTrackingOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetTrackingOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetTrackingOptionsOutputError>
}

public struct UpdateConfigurationSetTrackingOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetTrackingOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetTrackingOptionsOutputError>
}

/// <p>Represents a request to update the tracking options for a configuration set. </p>
public struct UpdateConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// <p>The name of the configuration set for which you want to update the custom tracking
    ///             domain.</p>
    public let configurationSetName: Swift.String?
    /// <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This
    ///             domain captures open and click events generated by Amazon SES emails.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring
    ///                 Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES
    ///                 Developer Guide</i>.</p>
    public let trackingOptions: SesClientTypes.TrackingOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        trackingOptions: SesClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.trackingOptions = trackingOptions
    }
}

extension UpdateConfigurationSetTrackingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateConfigurationSetTrackingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExistException" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrackingOptionsException" : self = .invalidTrackingOptionsException(try InvalidTrackingOptionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TrackingOptionsDoesNotExistException" : self = .trackingOptionsDoesNotExistException(try TrackingOptionsDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateConfigurationSetTrackingOptionsOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case invalidTrackingOptionsException(InvalidTrackingOptionsException)
    case trackingOptionsDoesNotExistException(TrackingOptionsDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationSetTrackingOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConfigurationSetTrackingOptionsOutputResponse()"}
}

extension UpdateConfigurationSetTrackingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct UpdateConfigurationSetTrackingOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateConfigurationSetTrackingOptionsOutputResponseBody: Swift.Equatable {
}

extension UpdateConfigurationSetTrackingOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateCustomVerificationEmailTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCustomVerificationEmailTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCustomVerificationEmailTemplateOutputError>
}

extension UpdateCustomVerificationEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCustomVerificationEmailTemplateInput(failureRedirectionURL: \(Swift.String(describing: failureRedirectionURL)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), successRedirectionURL: \(Swift.String(describing: successRedirectionURL)), templateContent: \(Swift.String(describing: templateContent)), templateName: \(Swift.String(describing: templateName)), templateSubject: \(Swift.String(describing: templateSubject)))"}
}

extension UpdateCustomVerificationEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try container.encode(failureRedirectionURL, forKey: ClientRuntime.Key("FailureRedirectionURL"))
        }
        if let fromEmailAddress = fromEmailAddress {
            try container.encode(fromEmailAddress, forKey: ClientRuntime.Key("FromEmailAddress"))
        }
        if let successRedirectionURL = successRedirectionURL {
            try container.encode(successRedirectionURL, forKey: ClientRuntime.Key("SuccessRedirectionURL"))
        }
        if let templateContent = templateContent {
            try container.encode(templateContent, forKey: ClientRuntime.Key("TemplateContent"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let templateSubject = templateSubject {
            try container.encode(templateSubject, forKey: ClientRuntime.Key("TemplateSubject"))
        }
        try container.encode("UpdateCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateCustomVerificationEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCustomVerificationEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCustomVerificationEmailTemplateOutputError>
}

public struct UpdateCustomVerificationEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCustomVerificationEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCustomVerificationEmailTemplateOutputError>
}

/// <p>Represents a request to update an existing custom verification email template.</p>
public struct UpdateCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// <p>The URL that the recipient of the verification email is sent to if his or her address
    ///             is not successfully verified.</p>
    public let failureRedirectionURL: Swift.String?
    /// <p>The email address that the custom verification email is sent from.</p>
    public let fromEmailAddress: Swift.String?
    /// <p>The URL that the recipient of the verification email is sent to if his or her address
    ///             is successfully verified.</p>
    public let successRedirectionURL: Swift.String?
    /// <p>The content of the custom verification email. The total size of the email must be less
    ///             than 10 MB. The message body may contain HTML, with some limitations. For more
    ///             information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES
    ///                 Developer Guide</i>.</p>
    public let templateContent: Swift.String?
    /// <p>The name of the custom verification email template that you want to update.</p>
    public let templateName: Swift.String?
    /// <p>The subject line of the custom verification email.</p>
    public let templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

extension UpdateCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CustomVerificationEmailInvalidContentException" : self = .customVerificationEmailInvalidContentException(try CustomVerificationEmailInvalidContentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomVerificationEmailTemplateDoesNotExistException" : self = .customVerificationEmailTemplateDoesNotExistException(try CustomVerificationEmailTemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FromEmailAddressNotVerifiedException" : self = .fromEmailAddressNotVerifiedException(try FromEmailAddressNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case customVerificationEmailInvalidContentException(CustomVerificationEmailInvalidContentException)
    case customVerificationEmailTemplateDoesNotExistException(CustomVerificationEmailTemplateDoesNotExistException)
    case fromEmailAddressNotVerifiedException(FromEmailAddressNotVerifiedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCustomVerificationEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCustomVerificationEmailTemplateOutputResponse()"}
}

extension UpdateCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateCustomVerificationEmailTemplateOutputResponseBody: Swift.Equatable {
}

extension UpdateCustomVerificationEmailTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateReceiptRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateReceiptRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateReceiptRuleOutputError>
}

extension UpdateReceiptRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateReceiptRuleInput(rule: \(Swift.String(describing: rule)), ruleSetName: \(Swift.String(describing: ruleSetName)))"}
}

extension UpdateReceiptRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let rule = rule {
            try container.encode(rule, forKey: ClientRuntime.Key("Rule"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("UpdateReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateReceiptRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateReceiptRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateReceiptRuleOutputError>
}

public struct UpdateReceiptRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateReceiptRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateReceiptRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateReceiptRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateReceiptRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateReceiptRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateReceiptRuleOutputError>
}

/// <p>Represents a request to update a receipt rule. You use receipt rules to receive email
///             with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct UpdateReceiptRuleInput: Swift.Equatable {
    /// <p>A data structure that contains the updated receipt rule information.</p>
    public let rule: SesClientTypes.ReceiptRule?
    /// <p>The name of the receipt rule set that the receipt rule belongs to.</p>
    public let ruleSetName: Swift.String?

    public init (
        rule: SesClientTypes.ReceiptRule? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.rule = rule
        self.ruleSetName = ruleSetName
    }
}

extension UpdateReceiptRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateReceiptRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLambdaFunctionException" : self = .invalidLambdaFunctionException(try InvalidLambdaFunctionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3ConfigurationException" : self = .invalidS3ConfigurationException(try InvalidS3ConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSnsTopicException" : self = .invalidSnsTopicException(try InvalidSnsTopicException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleDoesNotExistException" : self = .ruleDoesNotExistException(try RuleDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExistException" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateReceiptRuleOutputError: Swift.Error, Swift.Equatable {
    case invalidLambdaFunctionException(InvalidLambdaFunctionException)
    case invalidS3ConfigurationException(InvalidS3ConfigurationException)
    case invalidSnsTopicException(InvalidSnsTopicException)
    case limitExceededException(LimitExceededException)
    case ruleDoesNotExistException(RuleDoesNotExistException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateReceiptRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateReceiptRuleOutputResponse()"}
}

extension UpdateReceiptRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct UpdateReceiptRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateReceiptRuleOutputResponseBody: Swift.Equatable {
}

extension UpdateReceiptRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTemplateOutputError>
}

extension UpdateTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTemplateInput(template: \(Swift.String(describing: template)))"}
}

extension UpdateTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        try container.encode("UpdateTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTemplateOutputError>
}

public struct UpdateTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTemplateOutputError>
}

public struct UpdateTemplateInput: Swift.Equatable {
    /// <p>The content of the email, composed of a subject line, an HTML part, and a text-only
    ///             part.</p>
    public let template: SesClientTypes.Template?

    public init (
        template: SesClientTypes.Template? = nil
    )
    {
        self.template = template
    }
}

extension UpdateTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidTemplateException" : self = .invalidTemplateException(try InvalidTemplateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TemplateDoesNotExistException" : self = .templateDoesNotExistException(try TemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTemplateOutputError: Swift.Error, Swift.Equatable {
    case invalidTemplateException(InvalidTemplateException)
    case templateDoesNotExistException(TemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTemplateOutputResponse()"}
}

extension UpdateTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateTemplateOutputResponseBody: Swift.Equatable {
}

extension UpdateTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesClientTypes {
    public enum VerificationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case notstarted
        case pending
        case success
        case temporaryfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [VerificationStatus] {
            return [
                .failed,
                .notstarted,
                .pending,
                .success,
                .temporaryfailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .notstarted: return "NotStarted"
            case .pending: return "Pending"
            case .success: return "Success"
            case .temporaryfailure: return "TemporaryFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VerificationStatus(rawValue: rawValue) ?? VerificationStatus.sdkUnknown(rawValue)
        }
    }
}

public struct VerifyDomainDkimInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyDomainDkimInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyDomainDkimInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyDomainDkimOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyDomainDkimInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyDomainDkimOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyDomainDkimOutputError>
}

extension VerifyDomainDkimInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyDomainDkimInput(domain: \(Swift.String(describing: domain)))"}
}

extension VerifyDomainDkimInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        try container.encode("VerifyDomainDkim", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct VerifyDomainDkimInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyDomainDkimInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyDomainDkimInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyDomainDkimOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyDomainDkimInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyDomainDkimOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyDomainDkimOutputError>
}

public struct VerifyDomainDkimInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyDomainDkimInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyDomainDkimInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyDomainDkimOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyDomainDkimInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyDomainDkimOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyDomainDkimOutputError>
}

/// <p>Represents a request to generate the CNAME records needed to set up Easy DKIM with
///             Amazon SES. For more information about setting up Easy DKIM, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct VerifyDomainDkimInput: Swift.Equatable {
    /// <p>The name of the domain to be verified for Easy DKIM signing.</p>
    public let domain: Swift.String?

    public init (
        domain: Swift.String? = nil
    )
    {
        self.domain = domain
    }
}

extension VerifyDomainDkimOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension VerifyDomainDkimOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum VerifyDomainDkimOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyDomainDkimOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyDomainDkimOutputResponse(dkimTokens: \(Swift.String(describing: dkimTokens)))"}
}

extension VerifyDomainDkimOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: VerifyDomainDkimOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dkimTokens = output.dkimTokens
        } else {
            self.dkimTokens = nil
        }
    }
}

/// <p>Returns CNAME records that you must publish to the DNS server of your domain to set up
///             Easy DKIM with Amazon SES.</p>
public struct VerifyDomainDkimOutputResponse: Swift.Equatable {
    /// <p>A set of character strings that represent the domain's identity. If the identity is an
    ///             email address, the tokens represent the domain of that address.</p>
    ///         <p>Using these tokens, you need to create DNS CNAME records that point to DKIM public
    ///             keys that are hosted by Amazon SES. Amazon Web Services eventually detects that you've updated your DNS
    ///             records. This detection process might take up to 72 hours. After successful detection,
    ///             Amazon SES is able to DKIM-sign email originating from that domain. (This only applies to
    ///             domain identities, not email address identities.)</p>
    ///         <p>For more information about creating DNS records using DKIM tokens, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public let dkimTokens: [Swift.String]?

    public init (
        dkimTokens: [Swift.String]? = nil
    )
    {
        self.dkimTokens = dkimTokens
    }
}

struct VerifyDomainDkimOutputResponseBody: Swift.Equatable {
    public let dkimTokens: [Swift.String]?
}

extension VerifyDomainDkimOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimTokens = "DkimTokens"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("VerifyDomainDkimResult"))
        if containerValues.contains(.dkimTokens) {
            struct KeyVal0{struct member{}}
            let dkimTokensWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dkimTokens)
            if let dkimTokensWrappedContainer = dkimTokensWrappedContainer {
                let dkimTokensContainer = try dkimTokensWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var dkimTokensBuffer:[Swift.String]? = nil
                if let dkimTokensContainer = dkimTokensContainer {
                    dkimTokensBuffer = [Swift.String]()
                    for stringContainer0 in dkimTokensContainer {
                        dkimTokensBuffer?.append(stringContainer0)
                    }
                }
                dkimTokens = dkimTokensBuffer
            } else {
                dkimTokens = []
            }
        } else {
            dkimTokens = nil
        }
    }
}

public struct VerifyDomainIdentityInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyDomainIdentityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyDomainIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyDomainIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyDomainIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyDomainIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyDomainIdentityOutputError>
}

extension VerifyDomainIdentityInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyDomainIdentityInput(domain: \(Swift.String(describing: domain)))"}
}

extension VerifyDomainIdentityInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        try container.encode("VerifyDomainIdentity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct VerifyDomainIdentityInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyDomainIdentityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyDomainIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyDomainIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyDomainIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyDomainIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyDomainIdentityOutputError>
}

public struct VerifyDomainIdentityInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyDomainIdentityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyDomainIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyDomainIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyDomainIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyDomainIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyDomainIdentityOutputError>
}

/// <p>Represents a request to begin Amazon SES domain verification and to generate the TXT
///             records that you must publish to the DNS server of your domain to complete the
///             verification. For information about domain verification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">Amazon SES
///                 Developer Guide</a>.</p>
public struct VerifyDomainIdentityInput: Swift.Equatable {
    /// <p>The domain to be verified.</p>
    public let domain: Swift.String?

    public init (
        domain: Swift.String? = nil
    )
    {
        self.domain = domain
    }
}

extension VerifyDomainIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension VerifyDomainIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum VerifyDomainIdentityOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyDomainIdentityOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyDomainIdentityOutputResponse(verificationToken: \(Swift.String(describing: verificationToken)))"}
}

extension VerifyDomainIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: VerifyDomainIdentityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.verificationToken = output.verificationToken
        } else {
            self.verificationToken = nil
        }
    }
}

/// <p>Returns a TXT record that you must publish to the DNS server of your domain to
///             complete domain verification with Amazon SES.</p>
public struct VerifyDomainIdentityOutputResponse: Swift.Equatable {
    /// <p>A TXT record that you must place in the DNS settings of the domain to complete domain
    ///             verification with Amazon SES.</p>
    ///         <p>As Amazon SES searches for the TXT record, the domain's verification status is "Pending".
    ///             When Amazon SES detects the record, the domain's verification status changes to "Success". If
    ///             Amazon SES is unable to detect the record within 72 hours, the domain's verification status
    ///             changes to "Failed." In that case, if you still want to verify the domain, you must
    ///             restart the verification process from the beginning.</p>
    public let verificationToken: Swift.String?

    public init (
        verificationToken: Swift.String? = nil
    )
    {
        self.verificationToken = verificationToken
    }
}

struct VerifyDomainIdentityOutputResponseBody: Swift.Equatable {
    public let verificationToken: Swift.String?
}

extension VerifyDomainIdentityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verificationToken = "VerificationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("VerifyDomainIdentityResult"))
        let verificationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verificationToken)
        verificationToken = verificationTokenDecoded
    }
}

public struct VerifyEmailAddressInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyEmailAddressInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyEmailAddressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyEmailAddressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyEmailAddressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyEmailAddressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyEmailAddressOutputError>
}

extension VerifyEmailAddressInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyEmailAddressInput(emailAddress: \(Swift.String(describing: emailAddress)))"}
}

extension VerifyEmailAddressInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        try container.encode("VerifyEmailAddress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct VerifyEmailAddressInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyEmailAddressInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyEmailAddressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyEmailAddressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyEmailAddressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyEmailAddressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyEmailAddressOutputError>
}

public struct VerifyEmailAddressInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyEmailAddressInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyEmailAddressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyEmailAddressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyEmailAddressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyEmailAddressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyEmailAddressOutputError>
}

/// <p>Represents a request to begin email address verification with Amazon SES. For information
///             about email address verification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct VerifyEmailAddressInput: Swift.Equatable {
    /// <p>The email address to be verified.</p>
    public let emailAddress: Swift.String?

    public init (
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

extension VerifyEmailAddressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension VerifyEmailAddressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum VerifyEmailAddressOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyEmailAddressOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyEmailAddressOutputResponse()"}
}

extension VerifyEmailAddressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct VerifyEmailAddressOutputResponse: Swift.Equatable {

    public init() {}
}

struct VerifyEmailAddressOutputResponseBody: Swift.Equatable {
}

extension VerifyEmailAddressOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct VerifyEmailIdentityInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyEmailIdentityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyEmailIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyEmailIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyEmailIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyEmailIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyEmailIdentityOutputError>
}

extension VerifyEmailIdentityInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyEmailIdentityInput(emailAddress: \(Swift.String(describing: emailAddress)))"}
}

extension VerifyEmailIdentityInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        try container.encode("VerifyEmailIdentity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct VerifyEmailIdentityInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyEmailIdentityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyEmailIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyEmailIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyEmailIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyEmailIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyEmailIdentityOutputError>
}

public struct VerifyEmailIdentityInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyEmailIdentityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyEmailIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyEmailIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyEmailIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyEmailIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyEmailIdentityOutputError>
}

/// <p>Represents a request to begin email address verification with Amazon SES. For information
///             about email address verification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html">Amazon SES Developer
///                 Guide</a>.</p>
public struct VerifyEmailIdentityInput: Swift.Equatable {
    /// <p>The email address to be verified.</p>
    public let emailAddress: Swift.String?

    public init (
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

extension VerifyEmailIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension VerifyEmailIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum VerifyEmailIdentityOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyEmailIdentityOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyEmailIdentityOutputResponse()"}
}

extension VerifyEmailIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element returned on a successful request.</p>
public struct VerifyEmailIdentityOutputResponse: Swift.Equatable {

    public init() {}
}

struct VerifyEmailIdentityOutputResponseBody: Swift.Equatable {
}

extension VerifyEmailIdentityOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesClientTypes.WorkmailAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationArn = "OrganizationArn"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let organizationArn = organizationArn {
            try container.encode(organizationArn, forKey: ClientRuntime.Key("OrganizationArn"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let organizationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationArn)
        organizationArn = organizationArnDecoded
    }
}

extension SesClientTypes.WorkmailAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WorkmailAction(organizationArn: \(Swift.String(describing: organizationArn)), topicArn: \(Swift.String(describing: topicArn)))"}
}

extension SesClientTypes {
    /// <p>When included in a receipt rule, this action calls Amazon WorkMail and, optionally,
    ///             publishes a notification to Amazon Simple Notification Service (Amazon SNS). You will typically not use this action
    ///             directly because Amazon WorkMail adds the rule automatically during its setup
    ///             procedure.</p>
    ///         <p>For information using a receipt rule to call Amazon WorkMail, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-workmail.html">Amazon SES Developer
    ///                 Guide</a>.</p>
    public struct WorkmailAction: Swift.Equatable {
        /// <p>The ARN of the Amazon WorkMail organization. An example of an Amazon WorkMail
        ///             organization ARN is
        ///                 <code>arn:aws:workmail:us-west-2:123456789012:organization/m-68755160c4cb4e29a2b2f8fb58f359d7</code>.
        ///             For information about Amazon WorkMail organizations, see the <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/organizations_overview.html">Amazon WorkMail
        ///                 Administrator Guide</a>.</p>
        public let organizationArn: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the WorkMail action
        ///             is called. An example of an Amazon SNS topic ARN is
        ///                 <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more information about
        ///             Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
        public let topicArn: Swift.String?

        public init (
            organizationArn: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.organizationArn = organizationArn
            self.topicArn = topicArn
        }
    }

}
