// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SendBounceInputHeadersMiddleware: Middleware {
    public let id: String = "SendBounceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendBounceInput>,
                  next: H) -> Swift.Result<OperationOutput<SendBounceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendBounceInput>
    public typealias MOutput = OperationOutput<SendBounceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendBounceOutputError>
}

public struct SendBounceInputQueryItemMiddleware: Middleware {
    public let id: String = "SendBounceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendBounceInput>,
                  next: H) -> Swift.Result<OperationOutput<SendBounceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendBounceInput>
    public typealias MOutput = OperationOutput<SendBounceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendBounceOutputError>
}

public struct SendBounceInputBodyMiddleware: Middleware {
    public let id: String = "SendBounceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendBounceInput>,
                  next: H) -> Swift.Result<OperationOutput<SendBounceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendBounceInput>
    public typealias MOutput = OperationOutput<SendBounceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendBounceOutputError>
}

extension SendBounceInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let bounceSender = bounceSender {
            try container.encode(bounceSender, forKey: Key("BounceSender"))
        }
        if let bounceSenderArn = bounceSenderArn {
            try container.encode(bounceSenderArn, forKey: Key("BounceSenderArn"))
        }
        if let bouncedRecipientInfoList = bouncedRecipientInfoList {
            var bouncedRecipientInfoListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("BouncedRecipientInfoList"))
            for (index0, bouncedrecipientinfo0) in bouncedRecipientInfoList.enumerated() {
                try bouncedRecipientInfoListContainer.encode(bouncedrecipientinfo0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let explanation = explanation {
            try container.encode(explanation, forKey: Key("Explanation"))
        }
        if let messageDsn = messageDsn {
            try container.encode(messageDsn, forKey: Key("MessageDsn"))
        }
        if let originalMessageId = originalMessageId {
            try container.encode(originalMessageId, forKey: Key("OriginalMessageId"))
        }
        try container.encode("SendBounce", forKey:Key("Action"))
        try container.encode("2010-12-01", forKey:Key("Version"))
    }
}
