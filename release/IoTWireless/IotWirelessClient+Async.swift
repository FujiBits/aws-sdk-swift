// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension IotWirelessClient {
    /// <p>Associates a partner account with your AWS account.</p>
    func associateAwsAccountWithPartnerAccount(input: AssociateAwsAccountWithPartnerAccountInput) async throws -> AssociateAwsAccountWithPartnerAccountOutputResponse
    {
        typealias associateAwsAccountWithPartnerAccountContinuation = CheckedContinuation<AssociateAwsAccountWithPartnerAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateAwsAccountWithPartnerAccountContinuation) in
            associateAwsAccountWithPartnerAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates a wireless device with a thing.</p>
    func associateWirelessDeviceWithThing(input: AssociateWirelessDeviceWithThingInput) async throws -> AssociateWirelessDeviceWithThingOutputResponse
    {
        typealias associateWirelessDeviceWithThingContinuation = CheckedContinuation<AssociateWirelessDeviceWithThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWirelessDeviceWithThingContinuation) in
            associateWirelessDeviceWithThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates a wireless gateway with a certificate.</p>
    func associateWirelessGatewayWithCertificate(input: AssociateWirelessGatewayWithCertificateInput) async throws -> AssociateWirelessGatewayWithCertificateOutputResponse
    {
        typealias associateWirelessGatewayWithCertificateContinuation = CheckedContinuation<AssociateWirelessGatewayWithCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWirelessGatewayWithCertificateContinuation) in
            associateWirelessGatewayWithCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates a wireless gateway with a thing.</p>
    func associateWirelessGatewayWithThing(input: AssociateWirelessGatewayWithThingInput) async throws -> AssociateWirelessGatewayWithThingOutputResponse
    {
        typealias associateWirelessGatewayWithThingContinuation = CheckedContinuation<AssociateWirelessGatewayWithThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWirelessGatewayWithThingContinuation) in
            associateWirelessGatewayWithThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new destination that maps a device message to an AWS IoT rule.</p>
    func createDestination(input: CreateDestinationInput) async throws -> CreateDestinationOutputResponse
    {
        typealias createDestinationContinuation = CheckedContinuation<CreateDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDestinationContinuation) in
            createDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new device profile.</p>
    func createDeviceProfile(input: CreateDeviceProfileInput) async throws -> CreateDeviceProfileOutputResponse
    {
        typealias createDeviceProfileContinuation = CheckedContinuation<CreateDeviceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDeviceProfileContinuation) in
            createDeviceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new service profile.</p>
    func createServiceProfile(input: CreateServiceProfileInput) async throws -> CreateServiceProfileOutputResponse
    {
        typealias createServiceProfileContinuation = CheckedContinuation<CreateServiceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createServiceProfileContinuation) in
            createServiceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provisions a wireless device.</p>
    func createWirelessDevice(input: CreateWirelessDeviceInput) async throws -> CreateWirelessDeviceOutputResponse
    {
        typealias createWirelessDeviceContinuation = CheckedContinuation<CreateWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWirelessDeviceContinuation) in
            createWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provisions a wireless gateway.</p>
    func createWirelessGateway(input: CreateWirelessGatewayInput) async throws -> CreateWirelessGatewayOutputResponse
    {
        typealias createWirelessGatewayContinuation = CheckedContinuation<CreateWirelessGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWirelessGatewayContinuation) in
            createWirelessGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a task for a wireless gateway.</p>
    func createWirelessGatewayTask(input: CreateWirelessGatewayTaskInput) async throws -> CreateWirelessGatewayTaskOutputResponse
    {
        typealias createWirelessGatewayTaskContinuation = CheckedContinuation<CreateWirelessGatewayTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWirelessGatewayTaskContinuation) in
            createWirelessGatewayTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a gateway task definition.</p>
    func createWirelessGatewayTaskDefinition(input: CreateWirelessGatewayTaskDefinitionInput) async throws -> CreateWirelessGatewayTaskDefinitionOutputResponse
    {
        typealias createWirelessGatewayTaskDefinitionContinuation = CheckedContinuation<CreateWirelessGatewayTaskDefinitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWirelessGatewayTaskDefinitionContinuation) in
            createWirelessGatewayTaskDefinition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a destination.</p>
    func deleteDestination(input: DeleteDestinationInput) async throws -> DeleteDestinationOutputResponse
    {
        typealias deleteDestinationContinuation = CheckedContinuation<DeleteDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDestinationContinuation) in
            deleteDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a device profile.</p>
    func deleteDeviceProfile(input: DeleteDeviceProfileInput) async throws -> DeleteDeviceProfileOutputResponse
    {
        typealias deleteDeviceProfileContinuation = CheckedContinuation<DeleteDeviceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDeviceProfileContinuation) in
            deleteDeviceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a service profile.</p>
    func deleteServiceProfile(input: DeleteServiceProfileInput) async throws -> DeleteServiceProfileOutputResponse
    {
        typealias deleteServiceProfileContinuation = CheckedContinuation<DeleteServiceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteServiceProfileContinuation) in
            deleteServiceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a wireless device.</p>
    func deleteWirelessDevice(input: DeleteWirelessDeviceInput) async throws -> DeleteWirelessDeviceOutputResponse
    {
        typealias deleteWirelessDeviceContinuation = CheckedContinuation<DeleteWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWirelessDeviceContinuation) in
            deleteWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a wireless gateway.</p>
    func deleteWirelessGateway(input: DeleteWirelessGatewayInput) async throws -> DeleteWirelessGatewayOutputResponse
    {
        typealias deleteWirelessGatewayContinuation = CheckedContinuation<DeleteWirelessGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWirelessGatewayContinuation) in
            deleteWirelessGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a wireless gateway task.</p>
    func deleteWirelessGatewayTask(input: DeleteWirelessGatewayTaskInput) async throws -> DeleteWirelessGatewayTaskOutputResponse
    {
        typealias deleteWirelessGatewayTaskContinuation = CheckedContinuation<DeleteWirelessGatewayTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWirelessGatewayTaskContinuation) in
            deleteWirelessGatewayTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a wireless gateway task definition. Deleting this task definition does not affect tasks that are currently in progress.</p>
    func deleteWirelessGatewayTaskDefinition(input: DeleteWirelessGatewayTaskDefinitionInput) async throws -> DeleteWirelessGatewayTaskDefinitionOutputResponse
    {
        typealias deleteWirelessGatewayTaskDefinitionContinuation = CheckedContinuation<DeleteWirelessGatewayTaskDefinitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWirelessGatewayTaskDefinitionContinuation) in
            deleteWirelessGatewayTaskDefinition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates your AWS account from a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, disassociates your AWS account from all partner accounts.</p>
    func disassociateAwsAccountFromPartnerAccount(input: DisassociateAwsAccountFromPartnerAccountInput) async throws -> DisassociateAwsAccountFromPartnerAccountOutputResponse
    {
        typealias disassociateAwsAccountFromPartnerAccountContinuation = CheckedContinuation<DisassociateAwsAccountFromPartnerAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateAwsAccountFromPartnerAccountContinuation) in
            disassociateAwsAccountFromPartnerAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates a wireless device from its currently associated thing.</p>
    func disassociateWirelessDeviceFromThing(input: DisassociateWirelessDeviceFromThingInput) async throws -> DisassociateWirelessDeviceFromThingOutputResponse
    {
        typealias disassociateWirelessDeviceFromThingContinuation = CheckedContinuation<DisassociateWirelessDeviceFromThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWirelessDeviceFromThingContinuation) in
            disassociateWirelessDeviceFromThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates a wireless gateway from its currently associated certificate.</p>
    func disassociateWirelessGatewayFromCertificate(input: DisassociateWirelessGatewayFromCertificateInput) async throws -> DisassociateWirelessGatewayFromCertificateOutputResponse
    {
        typealias disassociateWirelessGatewayFromCertificateContinuation = CheckedContinuation<DisassociateWirelessGatewayFromCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWirelessGatewayFromCertificateContinuation) in
            disassociateWirelessGatewayFromCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates a wireless gateway from its currently associated thing.</p>
    func disassociateWirelessGatewayFromThing(input: DisassociateWirelessGatewayFromThingInput) async throws -> DisassociateWirelessGatewayFromThingOutputResponse
    {
        typealias disassociateWirelessGatewayFromThingContinuation = CheckedContinuation<DisassociateWirelessGatewayFromThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWirelessGatewayFromThingContinuation) in
            disassociateWirelessGatewayFromThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a destination.</p>
    func getDestination(input: GetDestinationInput) async throws -> GetDestinationOutputResponse
    {
        typealias getDestinationContinuation = CheckedContinuation<GetDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDestinationContinuation) in
            getDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a device profile.</p>
    func getDeviceProfile(input: GetDeviceProfileInput) async throws -> GetDeviceProfileOutputResponse
    {
        typealias getDeviceProfileContinuation = CheckedContinuation<GetDeviceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeviceProfileContinuation) in
            getDeviceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns current default log-levels, or log levels by resource types, could be for wireless device log options or wireless gateway log options.</p>
    func getLogLevelsByResourceTypes(input: GetLogLevelsByResourceTypesInput) async throws -> GetLogLevelsByResourceTypesOutputResponse
    {
        typealias getLogLevelsByResourceTypesContinuation = CheckedContinuation<GetLogLevelsByResourceTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLogLevelsByResourceTypesContinuation) in
            getLogLevelsByResourceTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, returns all partner accounts.</p>
    func getPartnerAccount(input: GetPartnerAccountInput) async throws -> GetPartnerAccountOutputResponse
    {
        typealias getPartnerAccountContinuation = CheckedContinuation<GetPartnerAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPartnerAccountContinuation) in
            getPartnerAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Fetches the log-level override if any for a given resource-ID and resource-type, coulde be a wireless device or a wireless gateway.</p>
    func getResourceLogLevel(input: GetResourceLogLevelInput) async throws -> GetResourceLogLevelOutputResponse
    {
        typealias getResourceLogLevelContinuation = CheckedContinuation<GetResourceLogLevelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourceLogLevelContinuation) in
            getResourceLogLevel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the account-specific endpoint for Configuration and Update Server (CUPS) protocol or LoRaWAN Network Server (LNS) connections.</p>
    func getServiceEndpoint(input: GetServiceEndpointInput) async throws -> GetServiceEndpointOutputResponse
    {
        typealias getServiceEndpointContinuation = CheckedContinuation<GetServiceEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getServiceEndpointContinuation) in
            getServiceEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a service profile.</p>
    func getServiceProfile(input: GetServiceProfileInput) async throws -> GetServiceProfileOutputResponse
    {
        typealias getServiceProfileContinuation = CheckedContinuation<GetServiceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getServiceProfileContinuation) in
            getServiceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a wireless device.</p>
    func getWirelessDevice(input: GetWirelessDeviceInput) async throws -> GetWirelessDeviceOutputResponse
    {
        typealias getWirelessDeviceContinuation = CheckedContinuation<GetWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessDeviceContinuation) in
            getWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets operating information about a wireless device.</p>
    func getWirelessDeviceStatistics(input: GetWirelessDeviceStatisticsInput) async throws -> GetWirelessDeviceStatisticsOutputResponse
    {
        typealias getWirelessDeviceStatisticsContinuation = CheckedContinuation<GetWirelessDeviceStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessDeviceStatisticsContinuation) in
            getWirelessDeviceStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a wireless gateway.</p>
    func getWirelessGateway(input: GetWirelessGatewayInput) async throws -> GetWirelessGatewayOutputResponse
    {
        typealias getWirelessGatewayContinuation = CheckedContinuation<GetWirelessGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayContinuation) in
            getWirelessGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the ID of the certificate that is currently associated with a wireless gateway.</p>
    func getWirelessGatewayCertificate(input: GetWirelessGatewayCertificateInput) async throws -> GetWirelessGatewayCertificateOutputResponse
    {
        typealias getWirelessGatewayCertificateContinuation = CheckedContinuation<GetWirelessGatewayCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayCertificateContinuation) in
            getWirelessGatewayCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the firmware version and other information about a wireless gateway.</p>
    func getWirelessGatewayFirmwareInformation(input: GetWirelessGatewayFirmwareInformationInput) async throws -> GetWirelessGatewayFirmwareInformationOutputResponse
    {
        typealias getWirelessGatewayFirmwareInformationContinuation = CheckedContinuation<GetWirelessGatewayFirmwareInformationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayFirmwareInformationContinuation) in
            getWirelessGatewayFirmwareInformation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets operating information about a wireless gateway.</p>
    func getWirelessGatewayStatistics(input: GetWirelessGatewayStatisticsInput) async throws -> GetWirelessGatewayStatisticsOutputResponse
    {
        typealias getWirelessGatewayStatisticsContinuation = CheckedContinuation<GetWirelessGatewayStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayStatisticsContinuation) in
            getWirelessGatewayStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a wireless gateway task.</p>
    func getWirelessGatewayTask(input: GetWirelessGatewayTaskInput) async throws -> GetWirelessGatewayTaskOutputResponse
    {
        typealias getWirelessGatewayTaskContinuation = CheckedContinuation<GetWirelessGatewayTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayTaskContinuation) in
            getWirelessGatewayTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a wireless gateway task definition.</p>
    func getWirelessGatewayTaskDefinition(input: GetWirelessGatewayTaskDefinitionInput) async throws -> GetWirelessGatewayTaskDefinitionOutputResponse
    {
        typealias getWirelessGatewayTaskDefinitionContinuation = CheckedContinuation<GetWirelessGatewayTaskDefinitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayTaskDefinitionContinuation) in
            getWirelessGatewayTaskDefinition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the destinations registered to your AWS account.</p>
    func listDestinations(input: ListDestinationsInput) async throws -> ListDestinationsOutputResponse
    {
        typealias listDestinationsContinuation = CheckedContinuation<ListDestinationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDestinationsContinuation) in
            listDestinations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the device profiles registered to your AWS account.</p>
    func listDeviceProfiles(input: ListDeviceProfilesInput) async throws -> ListDeviceProfilesOutputResponse
    {
        typealias listDeviceProfilesContinuation = CheckedContinuation<ListDeviceProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDeviceProfilesContinuation) in
            listDeviceProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the partner accounts associated with your AWS account.</p>
    func listPartnerAccounts(input: ListPartnerAccountsInput) async throws -> ListPartnerAccountsOutputResponse
    {
        typealias listPartnerAccountsContinuation = CheckedContinuation<ListPartnerAccountsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPartnerAccountsContinuation) in
            listPartnerAccounts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the service profiles registered to your AWS account.</p>
    func listServiceProfiles(input: ListServiceProfilesInput) async throws -> ListServiceProfilesOutputResponse
    {
        typealias listServiceProfilesContinuation = CheckedContinuation<ListServiceProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listServiceProfilesContinuation) in
            listServiceProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the tags (metadata) you have assigned to the resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the wireless devices registered to your AWS account.</p>
    func listWirelessDevices(input: ListWirelessDevicesInput) async throws -> ListWirelessDevicesOutputResponse
    {
        typealias listWirelessDevicesContinuation = CheckedContinuation<ListWirelessDevicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWirelessDevicesContinuation) in
            listWirelessDevices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the wireless gateway tasks definitions registered to your AWS account.</p>
    func listWirelessGatewayTaskDefinitions(input: ListWirelessGatewayTaskDefinitionsInput) async throws -> ListWirelessGatewayTaskDefinitionsOutputResponse
    {
        typealias listWirelessGatewayTaskDefinitionsContinuation = CheckedContinuation<ListWirelessGatewayTaskDefinitionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWirelessGatewayTaskDefinitionsContinuation) in
            listWirelessGatewayTaskDefinitions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the wireless gateways registered to your AWS account.</p>
    func listWirelessGateways(input: ListWirelessGatewaysInput) async throws -> ListWirelessGatewaysOutputResponse
    {
        typealias listWirelessGatewaysContinuation = CheckedContinuation<ListWirelessGatewaysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWirelessGatewaysContinuation) in
            listWirelessGateways(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets the log-level override for a resource-ID and resource-type, could be a wireless gateway or a wireless device.</p>
    func putResourceLogLevel(input: PutResourceLogLevelInput) async throws -> PutResourceLogLevelOutputResponse
    {
        typealias putResourceLogLevelContinuation = CheckedContinuation<PutResourceLogLevelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putResourceLogLevelContinuation) in
            putResourceLogLevel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Remove log-level overrides if any for all resources (both wireless devices and wireless gateways).</p>
    func resetAllResourceLogLevels(input: ResetAllResourceLogLevelsInput) async throws -> ResetAllResourceLogLevelsOutputResponse
    {
        typealias resetAllResourceLogLevelsContinuation = CheckedContinuation<ResetAllResourceLogLevelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetAllResourceLogLevelsContinuation) in
            resetAllResourceLogLevels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Remove log-level override if any for a specific resource-ID and resource-type, could be a wireless device or a wireless gateway.</p>
    func resetResourceLogLevel(input: ResetResourceLogLevelInput) async throws -> ResetResourceLogLevelOutputResponse
    {
        typealias resetResourceLogLevelContinuation = CheckedContinuation<ResetResourceLogLevelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetResourceLogLevelContinuation) in
            resetResourceLogLevel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sends a decrypted application data frame to a device.</p>
    func sendDataToWirelessDevice(input: SendDataToWirelessDeviceInput) async throws -> SendDataToWirelessDeviceOutputResponse
    {
        typealias sendDataToWirelessDeviceContinuation = CheckedContinuation<SendDataToWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendDataToWirelessDeviceContinuation) in
            sendDataToWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds a tag to a resource.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Simulates a provisioned device by sending an uplink data payload of <code>Hello</code>.</p>
    func testWirelessDevice(input: TestWirelessDeviceInput) async throws -> TestWirelessDeviceOutputResponse
    {
        typealias testWirelessDeviceContinuation = CheckedContinuation<TestWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testWirelessDeviceContinuation) in
            testWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes one or more tags from a resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates properties of a destination.</p>
    func updateDestination(input: UpdateDestinationInput) async throws -> UpdateDestinationOutputResponse
    {
        typealias updateDestinationContinuation = CheckedContinuation<UpdateDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDestinationContinuation) in
            updateDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Set default log level, or log levels by resource types, could be for wireless device log options or wireless gateways log options. This is to control the log messages that will be displayed in CloudWatch.</p>
    func updateLogLevelsByResourceTypes(input: UpdateLogLevelsByResourceTypesInput) async throws -> UpdateLogLevelsByResourceTypesOutputResponse
    {
        typealias updateLogLevelsByResourceTypesContinuation = CheckedContinuation<UpdateLogLevelsByResourceTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLogLevelsByResourceTypesContinuation) in
            updateLogLevelsByResourceTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates properties of a partner account.</p>
    func updatePartnerAccount(input: UpdatePartnerAccountInput) async throws -> UpdatePartnerAccountOutputResponse
    {
        typealias updatePartnerAccountContinuation = CheckedContinuation<UpdatePartnerAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePartnerAccountContinuation) in
            updatePartnerAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates properties of a wireless device.</p>
    func updateWirelessDevice(input: UpdateWirelessDeviceInput) async throws -> UpdateWirelessDeviceOutputResponse
    {
        typealias updateWirelessDeviceContinuation = CheckedContinuation<UpdateWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWirelessDeviceContinuation) in
            updateWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates properties of a wireless gateway.</p>
    func updateWirelessGateway(input: UpdateWirelessGatewayInput) async throws -> UpdateWirelessGatewayOutputResponse
    {
        typealias updateWirelessGatewayContinuation = CheckedContinuation<UpdateWirelessGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWirelessGatewayContinuation) in
            updateWirelessGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
