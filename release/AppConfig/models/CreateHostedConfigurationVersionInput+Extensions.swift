// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateHostedConfigurationVersionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateHostedConfigurationVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHostedConfigurationVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHostedConfigurationVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentType = input.operationInput.contentType {
            input.builder.withHeader(name: "Content-Type", value: String(contentType))
        }
        if let description = input.operationInput.description {
            input.builder.withHeader(name: "Description", value: String(description))
        }
        input.builder.withHeader(name: "Latest-Version-Number", value: String(input.operationInput.latestVersionNumber))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHostedConfigurationVersionInput>
    public typealias MOutput = OperationOutput<CreateHostedConfigurationVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHostedConfigurationVersionOutputError>
}

public struct CreateHostedConfigurationVersionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateHostedConfigurationVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHostedConfigurationVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHostedConfigurationVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHostedConfigurationVersionInput>
    public typealias MOutput = OperationOutput<CreateHostedConfigurationVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHostedConfigurationVersionOutputError>
}

public struct CreateHostedConfigurationVersionInputBodyMiddleware: Middleware {
    public let id: String = "CreateHostedConfigurationVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHostedConfigurationVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHostedConfigurationVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let content = input.operationInput.content {
            let data = content
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHostedConfigurationVersionInput>
    public typealias MOutput = OperationOutput<CreateHostedConfigurationVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHostedConfigurationVersionOutputError>
}

extension CreateHostedConfigurationVersionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case content = "Content"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content.base64EncodedString(), forKey: .content)
        }
    }
}
