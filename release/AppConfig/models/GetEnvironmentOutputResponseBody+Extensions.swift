// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEnvironmentOutputResponseBody: Equatable {
    public let applicationId: String?
    public let id: String?
    public let name: String?
    public let description: String?
    public let state: EnvironmentState?
    public let monitors: [Monitor]?
}

extension GetEnvironmentOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationId = "ApplicationId"
        case description = "Description"
        case id = "Id"
        case monitors = "Monitors"
        case name = "Name"
        case state = "State"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EnvironmentState.self, forKey: .state)
        state = stateDecoded
        let monitorsContainer = try containerValues.decodeIfPresent([Monitor?].self, forKey: .monitors)
        var monitorsDecoded0:[Monitor]? = nil
        if let monitorsContainer = monitorsContainer {
            monitorsDecoded0 = [Monitor]()
            for structure0 in monitorsContainer {
                if let structure0 = structure0 {
                    monitorsDecoded0?.append(structure0)
                }
            }
        }
        monitors = monitorsDecoded0
    }
}
