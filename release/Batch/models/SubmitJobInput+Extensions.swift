// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SubmitJobInputHeadersMiddleware: Middleware {
    public let id: String = "SubmitJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SubmitJobInput>,
                  next: H) -> Swift.Result<OperationOutput<SubmitJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SubmitJobInput>
    public typealias MOutput = OperationOutput<SubmitJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SubmitJobOutputError>
}

public struct SubmitJobInputQueryItemMiddleware: Middleware {
    public let id: String = "SubmitJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SubmitJobInput>,
                  next: H) -> Swift.Result<OperationOutput<SubmitJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SubmitJobInput>
    public typealias MOutput = OperationOutput<SubmitJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SubmitJobOutputError>
}

public struct SubmitJobInputBodyMiddleware: Middleware {
    public let id: String = "SubmitJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SubmitJobInput>,
                  next: H) -> Swift.Result<OperationOutput<SubmitJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SubmitJobInput>
    public typealias MOutput = OperationOutput<SubmitJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SubmitJobOutputError>
}

extension SubmitJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arrayProperties
        case containerOverrides
        case dependsOn
        case jobDefinition
        case jobName
        case jobQueue
        case nodeOverrides
        case parameters
        case propagateTags
        case retryStrategy
        case tags
        case timeout
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayProperties = arrayProperties {
            try encodeContainer.encode(arrayProperties, forKey: .arrayProperties)
        }
        if let containerOverrides = containerOverrides {
            try encodeContainer.encode(containerOverrides, forKey: .containerOverrides)
        }
        if let dependsOn = dependsOn {
            var dependsOnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOn)
            for jobdependencylist0 in dependsOn {
                try dependsOnContainer.encode(jobdependencylist0)
            }
        }
        if let jobDefinition = jobDefinition {
            try encodeContainer.encode(jobDefinition, forKey: .jobDefinition)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobQueue = jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
        if let nodeOverrides = nodeOverrides {
            try encodeContainer.encode(nodeOverrides, forKey: .nodeOverrides)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if propagateTags != false {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }
}
