// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension BatchClientTypes {
    public enum ArrayJobDependency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case nToN
        case sequential
        case sdkUnknown(Swift.String)

        public static var allCases: [ArrayJobDependency] {
            return [
                .nToN,
                .sequential,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .nToN: return "N_TO_N"
            case .sequential: return "SEQUENTIAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ArrayJobDependency(rawValue: rawValue) ?? ArrayJobDependency.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.ArrayProperties: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case size
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
    }
}

extension BatchClientTypes.ArrayProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ArrayProperties(size: \(Swift.String(describing: size)))"}
}

extension BatchClientTypes {
    /// <p>An object representing an AWS Batch array job.</p>
    public struct ArrayProperties: Swift.Equatable {
        /// <p>The size of the array job.</p>
        public let size: Swift.Int

        public init (
            size: Swift.Int = 0
        )
        {
            self.size = size
        }
    }

}

extension BatchClientTypes.ArrayPropertiesDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case index
        case size
        case statusSummary
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if index != 0 {
            try encodeContainer.encode(index, forKey: .index)
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
        if let statusSummary = statusSummary {
            var statusSummaryContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .statusSummary)
            for (dictKey0, arrayjobstatussummary0) in statusSummary {
                try statusSummaryContainer.encode(arrayjobstatussummary0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusSummaryContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .statusSummary)
        var statusSummaryDecoded0: [Swift.String:Swift.Int]? = nil
        if let statusSummaryContainer = statusSummaryContainer {
            statusSummaryDecoded0 = [Swift.String:Swift.Int]()
            for (key0, integer0) in statusSummaryContainer {
                if let integer0 = integer0 {
                    statusSummaryDecoded0?[key0] = integer0
                }
            }
        }
        statusSummary = statusSummaryDecoded0
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let indexDecoded = try containerValues.decode(Swift.Int.self, forKey: .index)
        index = indexDecoded
    }
}

extension BatchClientTypes.ArrayPropertiesDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ArrayPropertiesDetail(index: \(Swift.String(describing: index)), size: \(Swift.String(describing: size)), statusSummary: \(Swift.String(describing: statusSummary)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the array properties of a job.</p>
    public struct ArrayPropertiesDetail: Swift.Equatable {
        /// <p>The job index within the array that's associated with this job. This parameter is returned for array job
        ///    children.</p>
        public let index: Swift.Int
        /// <p>The size of the array job. This parameter is returned for parent array jobs.</p>
        public let size: Swift.Int
        /// <p>A summary of the number of array job children in each available job status. This parameter is returned for
        ///    parent array jobs.</p>
        public let statusSummary: [Swift.String:Swift.Int]?

        public init (
            index: Swift.Int = 0,
            size: Swift.Int = 0,
            statusSummary: [Swift.String:Swift.Int]? = nil
        )
        {
            self.index = index
            self.size = size
            self.statusSummary = statusSummary
        }
    }

}

extension BatchClientTypes.ArrayPropertiesSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case index
        case size
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if index != 0 {
            try encodeContainer.encode(index, forKey: .index)
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let indexDecoded = try containerValues.decode(Swift.Int.self, forKey: .index)
        index = indexDecoded
    }
}

extension BatchClientTypes.ArrayPropertiesSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ArrayPropertiesSummary(index: \(Swift.String(describing: index)), size: \(Swift.String(describing: size)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the array properties of a job.</p>
    public struct ArrayPropertiesSummary: Swift.Equatable {
        /// <p>The job index within the array that's associated with this job. This parameter is returned for children of array
        ///    jobs.</p>
        public let index: Swift.Int
        /// <p>The size of the array job. This parameter is returned for parent array jobs.</p>
        public let size: Swift.Int

        public init (
            index: Swift.Int = 0,
            size: Swift.Int = 0
        )
        {
            self.index = index
            self.size = size
        }
    }

}

extension BatchClientTypes {
    public enum AssignPublicIp: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AssignPublicIp] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AssignPublicIp(rawValue: rawValue) ?? AssignPublicIp.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.AttemptContainerDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerInstanceArn
        case exitCode
        case logStreamName
        case networkInterfaces
        case reason
        case taskArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerInstanceArn = containerInstanceArn {
            try encodeContainer.encode(containerInstanceArn, forKey: .containerInstanceArn)
        }
        if exitCode != 0 {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let networkInterfaces = networkInterfaces {
            var networkInterfacesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaces)
            for networkinterfacelist0 in networkInterfaces {
                try networkInterfacesContainer.encode(networkinterfacelist0)
            }
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let taskArn = taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerInstanceArn)
        containerInstanceArn = containerInstanceArnDecoded
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let exitCodeDecoded = try containerValues.decode(Swift.Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let networkInterfacesContainer = try containerValues.decodeIfPresent([BatchClientTypes.NetworkInterface?].self, forKey: .networkInterfaces)
        var networkInterfacesDecoded0:[BatchClientTypes.NetworkInterface]? = nil
        if let networkInterfacesContainer = networkInterfacesContainer {
            networkInterfacesDecoded0 = [BatchClientTypes.NetworkInterface]()
            for structure0 in networkInterfacesContainer {
                if let structure0 = structure0 {
                    networkInterfacesDecoded0?.append(structure0)
                }
            }
        }
        networkInterfaces = networkInterfacesDecoded0
    }
}

extension BatchClientTypes.AttemptContainerDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttemptContainerDetail(containerInstanceArn: \(Swift.String(describing: containerInstanceArn)), exitCode: \(Swift.String(describing: exitCode)), logStreamName: \(Swift.String(describing: logStreamName)), networkInterfaces: \(Swift.String(describing: networkInterfaces)), reason: \(Swift.String(describing: reason)), taskArn: \(Swift.String(describing: taskArn)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the details of a container that's part of a job attempt.</p>
    public struct AttemptContainerDetail: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the Amazon ECS container instance that hosts the job attempt.</p>
        public let containerInstanceArn: Swift.String?
        /// <p>The exit code for the job attempt. A non-zero exit code is considered a failure.</p>
        public let exitCode: Swift.Int
        /// <p>The name of the CloudWatch Logs log stream associated with the container. The log group for AWS Batch jobs is
        ///     <code>/aws/batch/job</code>. Each container attempt receives a log stream name when they reach the
        ///     <code>RUNNING</code> status.</p>
        public let logStreamName: Swift.String?
        /// <p>The network interfaces associated with the job attempt.</p>
        public let networkInterfaces: [BatchClientTypes.NetworkInterface]?
        /// <p>A short (255 max characters) human-readable string to provide additional details about a running or stopped
        ///    container.</p>
        public let reason: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the Amazon ECS task that's associated with the job attempt. Each container attempt receives a task
        ///    ARN when they reach the <code>STARTING</code> status.</p>
        public let taskArn: Swift.String?

        public init (
            containerInstanceArn: Swift.String? = nil,
            exitCode: Swift.Int = 0,
            logStreamName: Swift.String? = nil,
            networkInterfaces: [BatchClientTypes.NetworkInterface]? = nil,
            reason: Swift.String? = nil,
            taskArn: Swift.String? = nil
        )
        {
            self.containerInstanceArn = containerInstanceArn
            self.exitCode = exitCode
            self.logStreamName = logStreamName
            self.networkInterfaces = networkInterfaces
            self.reason = reason
            self.taskArn = taskArn
        }
    }

}

extension BatchClientTypes.AttemptDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case container
        case startedAt
        case statusReason
        case stoppedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let container = container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if startedAt != 0 {
            try encodeContainer.encode(startedAt, forKey: .startedAt)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if stoppedAt != 0 {
            try encodeContainer.encode(stoppedAt, forKey: .stoppedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerDecoded = try containerValues.decodeIfPresent(BatchClientTypes.AttemptContainerDetail.self, forKey: .container)
        container = containerDecoded
        let startedAtDecoded = try containerValues.decode(Swift.Int.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let stoppedAtDecoded = try containerValues.decode(Swift.Int.self, forKey: .stoppedAt)
        stoppedAt = stoppedAtDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}

extension BatchClientTypes.AttemptDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttemptDetail(container: \(Swift.String(describing: container)), startedAt: \(Swift.String(describing: startedAt)), statusReason: \(Swift.String(describing: statusReason)), stoppedAt: \(Swift.String(describing: stoppedAt)))"}
}

extension BatchClientTypes {
    /// <p>An object representing a job attempt.</p>
    public struct AttemptDetail: Swift.Equatable {
        /// <p>Details about the container in this job attempt.</p>
        public let container: BatchClientTypes.AttemptContainerDetail?
        /// <p>The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the
        ///     <code>STARTING</code> state to the <code>RUNNING</code> state).</p>
        public let startedAt: Swift.Int
        /// <p>A short, human-readable string to provide additional details about the current status of the job attempt.</p>
        public let statusReason: Swift.String?
        /// <p>The Unix timestamp (in milliseconds) for when the attempt was stopped (when the attempt transitioned from the
        ///     <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).</p>
        public let stoppedAt: Swift.Int

        public init (
            container: BatchClientTypes.AttemptContainerDetail? = nil,
            startedAt: Swift.Int = 0,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int = 0
        )
        {
            self.container = container
            self.startedAt = startedAt
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }
    }

}

extension BatchClientTypes {
    public enum CEState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CEState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CEState(rawValue: rawValue) ?? CEState.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum CEStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creating
        case deleted
        case deleting
        case invalid
        case updating
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [CEStatus] {
            return [
                .creating,
                .deleted,
                .deleting,
                .invalid,
                .updating,
                .valid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .invalid: return "INVALID"
            case .updating: return "UPDATING"
            case .valid: return "VALID"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CEStatus(rawValue: rawValue) ?? CEStatus.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum CEType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case managed
        case unmanaged
        case sdkUnknown(Swift.String)

        public static var allCases: [CEType] {
            return [
                .managed,
                .unmanaged,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .managed: return "MANAGED"
            case .unmanaged: return "UNMANAGED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CEType(rawValue: rawValue) ?? CEType.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum CRAllocationStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bestFit
        case bestFitProgressive
        case spotCapacityOptimized
        case sdkUnknown(Swift.String)

        public static var allCases: [CRAllocationStrategy] {
            return [
                .bestFit,
                .bestFitProgressive,
                .spotCapacityOptimized,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bestFit: return "BEST_FIT"
            case .bestFitProgressive: return "BEST_FIT_PROGRESSIVE"
            case .spotCapacityOptimized: return "SPOT_CAPACITY_OPTIMIZED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CRAllocationStrategy(rawValue: rawValue) ?? CRAllocationStrategy.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum CRType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ec2
        case fargate
        case fargateSpot
        case spot
        case sdkUnknown(Swift.String)

        public static var allCases: [CRType] {
            return [
                .ec2,
                .fargate,
                .fargateSpot,
                .spot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .fargate: return "FARGATE"
            case .fargateSpot: return "FARGATE_SPOT"
            case .spot: return "SPOT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CRType(rawValue: rawValue) ?? CRType.sdkUnknown(rawValue)
        }
    }
}

public struct CancelJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelJobOutputError>
}

extension CancelJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelJobInput(jobId: \(Swift.String(describing: jobId)), reason: \(Swift.String(describing: reason)))"}
}

extension CancelJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }
}

public struct CancelJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelJobOutputError>
}

public struct CancelJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelJobOutputError>
}

/// <p>Contains the parameters for <code>CancelJob</code>.</p>
public struct CancelJobInput: Swift.Equatable {
    /// <p>The AWS Batch job ID of the job to cancel.</p>
    public let jobId: Swift.String?
    /// <p>A message to attach to the job that explains the reason for canceling it. This message is returned by future
    ///     <a>DescribeJobs</a> operations on the job. This message is also recorded in the AWS Batch activity
    ///    logs.</p>
    public let reason: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.reason = reason
    }
}

struct CancelJobInputBody: Swift.Equatable {
    public let jobId: Swift.String?
    public let reason: Swift.String?
}

extension CancelJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case reason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension CancelJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelJobOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelJobOutputResponse()"}
}

extension CancelJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelJobOutputResponse: Swift.Equatable {

    public init() {}
}

struct CancelJobOutputResponseBody: Swift.Equatable {
}

extension CancelJobOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ClientException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClientException(message: \(Swift.String(describing: message)))"}
}

extension ClientException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ClientExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>These errors are usually caused by a client action, such as using an action or resource on behalf of a user that
///    doesn't have permissions to use the action or resource, or specifying an identifier that's not valid.</p>
public struct ClientException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ClientExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ClientExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BatchClientTypes.ComputeEnvironmentDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentArn
        case computeEnvironmentName
        case computeResources
        case ecsClusterArn
        case serviceRole
        case state
        case status
        case statusReason
        case tags
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentArn = computeEnvironmentArn {
            try encodeContainer.encode(computeEnvironmentArn, forKey: .computeEnvironmentArn)
        }
        if let computeEnvironmentName = computeEnvironmentName {
            try encodeContainer.encode(computeEnvironmentName, forKey: .computeEnvironmentName)
        }
        if let computeResources = computeResources {
            try encodeContainer.encode(computeResources, forKey: .computeResources)
        }
        if let ecsClusterArn = ecsClusterArn {
            try encodeContainer.encode(ecsClusterArn, forKey: .ecsClusterArn)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let computeEnvironmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentArn)
        computeEnvironmentArn = computeEnvironmentArnDecoded
        let ecsClusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ecsClusterArn)
        ecsClusterArn = ecsClusterArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEType.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEState.self, forKey: .state)
        state = stateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let computeResourcesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ComputeResource.self, forKey: .computeResources)
        computeResources = computeResourcesDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
    }
}

extension BatchClientTypes.ComputeEnvironmentDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ComputeEnvironmentDetail(computeEnvironmentArn: \(Swift.String(describing: computeEnvironmentArn)), computeEnvironmentName: \(Swift.String(describing: computeEnvironmentName)), computeResources: \(Swift.String(describing: computeResources)), ecsClusterArn: \(Swift.String(describing: ecsClusterArn)), serviceRole: \(Swift.String(describing: serviceRole)), state: \(Swift.String(describing: state)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)), tags: \(Swift.String(describing: tags)), type: \(Swift.String(describing: type)))"}
}

extension BatchClientTypes {
    /// <p>An object representing an AWS Batch compute environment.</p>
    public struct ComputeEnvironmentDetail: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
        public let computeEnvironmentArn: Swift.String?
        /// <p>The name of the compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and
        ///  underscores are allowed.</p>
        public let computeEnvironmentName: Swift.String?
        /// <p>The compute resources defined for the compute environment. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the
        ///    <i>AWS Batch User Guide</i>.</p>
        public let computeResources: BatchClientTypes.ComputeResource?
        /// <p>The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.</p>
        public let ecsClusterArn: Swift.String?
        /// <p>The service role associated with the compute environment that allows AWS Batch to make calls to AWS API
        ///    operations on your behalf. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html">AWS Batch service IAM role</a> in the
        ///    <i>AWS Batch User Guide</i>.</p>
        public let serviceRole: Swift.String?
        /// <p>The state of the compute environment. The valid values are <code>ENABLED</code> or <code>DISABLED</code>.</p>
        ///          <p>If the state is <code>ENABLED</code>, then the AWS Batch scheduler can attempt to place jobs from an associated
        ///    job queue on the compute resources within the environment. If the compute environment is managed, then it can scale
        ///    its instances out or in automatically, based on the job queue demand.</p>
        ///          <p>If the state is <code>DISABLED</code>, then the AWS Batch scheduler doesn't attempt to place jobs within the
        ///    environment. Jobs in a <code>STARTING</code> or <code>RUNNING</code> state continue to progress normally. Managed
        ///    compute environments in the <code>DISABLED</code> state don't scale out. However, they scale in to
        ///     <code>minvCpus</code> value after instances become idle.</p>
        public let state: BatchClientTypes.CEState?
        /// <p>The current status of the compute environment (for example, <code>CREATING</code> or <code>VALID</code>).</p>
        public let status: BatchClientTypes.CEStatus?
        /// <p>A short, human-readable string to provide additional details about the current status of the compute
        ///    environment.</p>
        public let statusReason: Swift.String?
        /// <p>The tags applied to the compute environment.</p>
        public let tags: [Swift.String:Swift.String]?
        /// <p>The type of the compute environment: <code>MANAGED</code> or <code>UNMANAGED</code>. For more information, see
        ///     <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the
        ///     <i>AWS Batch User Guide</i>.</p>
        public let type: BatchClientTypes.CEType?

        public init (
            computeEnvironmentArn: Swift.String? = nil,
            computeEnvironmentName: Swift.String? = nil,
            computeResources: BatchClientTypes.ComputeResource? = nil,
            ecsClusterArn: Swift.String? = nil,
            serviceRole: Swift.String? = nil,
            state: BatchClientTypes.CEState? = nil,
            status: BatchClientTypes.CEStatus? = nil,
            statusReason: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: BatchClientTypes.CEType? = nil
        )
        {
            self.computeEnvironmentArn = computeEnvironmentArn
            self.computeEnvironmentName = computeEnvironmentName
            self.computeResources = computeResources
            self.ecsClusterArn = ecsClusterArn
            self.serviceRole = serviceRole
            self.state = state
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
            self.type = type
        }
    }

}

extension BatchClientTypes.ComputeEnvironmentOrder: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironment
        case order
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironment = computeEnvironment {
            try encodeContainer.encode(computeEnvironment, forKey: .computeEnvironment)
        }
        if order != 0 {
            try encodeContainer.encode(order, forKey: .order)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orderDecoded = try containerValues.decode(Swift.Int.self, forKey: .order)
        order = orderDecoded
        let computeEnvironmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironment)
        computeEnvironment = computeEnvironmentDecoded
    }
}

extension BatchClientTypes.ComputeEnvironmentOrder: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ComputeEnvironmentOrder(computeEnvironment: \(Swift.String(describing: computeEnvironment)), order: \(Swift.String(describing: order)))"}
}

extension BatchClientTypes {
    /// <p>The order in which compute environments are tried for job placement within a queue. Compute environments are
    ///    tried in ascending order. For example, if two compute environments are associated with a job queue, the compute
    ///    environment with a lower order integer value is tried for job placement first. Compute environments must be in the
    ///     <code>VALID</code> state before you can associate them with a job queue. All of the compute environments must be
    ///    either EC2 (<code>EC2</code> or <code>SPOT</code>) or Fargate (<code>FARGATE</code> or <code>FARGATE_SPOT</code>);
    ///    EC2 and Fargate compute environments can't be mixed.</p>
    ///          <note>
    ///             <p>All compute environments that are associated with a job queue must share the same architecture. AWS Batch doesn't
    ///     support mixing compute environment architecture types in a single job queue.</p>
    ///          </note>
    public struct ComputeEnvironmentOrder: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
        public let computeEnvironment: Swift.String?
        /// <p>The order of the compute environment. Compute environments are tried in ascending order. For example, if two
        ///    compute environments are associated with a job queue, the compute environment with a lower <code>order</code> integer
        ///    value is tried for job placement first.</p>
        public let order: Swift.Int

        public init (
            computeEnvironment: Swift.String? = nil,
            order: Swift.Int = 0
        )
        {
            self.computeEnvironment = computeEnvironment
            self.order = order
        }
    }

}

extension BatchClientTypes.ComputeResource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationStrategy
        case bidPercentage
        case desiredvCpus
        case ec2Configuration
        case ec2KeyPair
        case imageId
        case instanceRole
        case instanceTypes
        case launchTemplate
        case maxvCpus
        case minvCpus
        case placementGroup
        case securityGroupIds
        case spotIamFleetRole
        case subnets
        case tags
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocationStrategy = allocationStrategy {
            try encodeContainer.encode(allocationStrategy.rawValue, forKey: .allocationStrategy)
        }
        if bidPercentage != 0 {
            try encodeContainer.encode(bidPercentage, forKey: .bidPercentage)
        }
        if desiredvCpus != 0 {
            try encodeContainer.encode(desiredvCpus, forKey: .desiredvCpus)
        }
        if let ec2Configuration = ec2Configuration {
            var ec2ConfigurationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2Configuration)
            for ec2configurationlist0 in ec2Configuration {
                try ec2ConfigurationContainer.encode(ec2configurationlist0)
            }
        }
        if let ec2KeyPair = ec2KeyPair {
            try encodeContainer.encode(ec2KeyPair, forKey: .ec2KeyPair)
        }
        if let imageId = imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let instanceRole = instanceRole {
            try encodeContainer.encode(instanceRole, forKey: .instanceRole)
        }
        if let instanceTypes = instanceTypes {
            var instanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypes)
            for stringlist0 in instanceTypes {
                try instanceTypesContainer.encode(stringlist0)
            }
        }
        if let launchTemplate = launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if maxvCpus != 0 {
            try encodeContainer.encode(maxvCpus, forKey: .maxvCpus)
        }
        if minvCpus != 0 {
            try encodeContainer.encode(minvCpus, forKey: .minvCpus)
        }
        if let placementGroup = placementGroup {
            try encodeContainer.encode(placementGroup, forKey: .placementGroup)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let spotIamFleetRole = spotIamFleetRole {
            try encodeContainer.encode(spotIamFleetRole, forKey: .spotIamFleetRole)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CRType.self, forKey: .type)
        type = typeDecoded
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CRAllocationStrategy.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
        let minvCpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .minvCpus)
        minvCpus = minvCpusDecoded
        let maxvCpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxvCpus)
        maxvCpus = maxvCpusDecoded
        let desiredvCpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .desiredvCpus)
        desiredvCpus = desiredvCpusDecoded
        let instanceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceTypes)
        var instanceTypesDecoded0:[Swift.String]? = nil
        if let instanceTypesContainer = instanceTypesContainer {
            instanceTypesDecoded0 = [Swift.String]()
            for string0 in instanceTypesContainer {
                if let string0 = string0 {
                    instanceTypesDecoded0?.append(string0)
                }
            }
        }
        instanceTypes = instanceTypesDecoded0
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let ec2KeyPairDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2KeyPair)
        ec2KeyPair = ec2KeyPairDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
        let placementGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementGroup)
        placementGroup = placementGroupDecoded
        let bidPercentageDecoded = try containerValues.decode(Swift.Int.self, forKey: .bidPercentage)
        bidPercentage = bidPercentageDecoded
        let spotIamFleetRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotIamFleetRole)
        spotIamFleetRole = spotIamFleetRoleDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let ec2ConfigurationContainer = try containerValues.decodeIfPresent([BatchClientTypes.Ec2Configuration?].self, forKey: .ec2Configuration)
        var ec2ConfigurationDecoded0:[BatchClientTypes.Ec2Configuration]? = nil
        if let ec2ConfigurationContainer = ec2ConfigurationContainer {
            ec2ConfigurationDecoded0 = [BatchClientTypes.Ec2Configuration]()
            for structure0 in ec2ConfigurationContainer {
                if let structure0 = structure0 {
                    ec2ConfigurationDecoded0?.append(structure0)
                }
            }
        }
        ec2Configuration = ec2ConfigurationDecoded0
    }
}

extension BatchClientTypes.ComputeResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ComputeResource(allocationStrategy: \(Swift.String(describing: allocationStrategy)), bidPercentage: \(Swift.String(describing: bidPercentage)), desiredvCpus: \(Swift.String(describing: desiredvCpus)), ec2Configuration: \(Swift.String(describing: ec2Configuration)), ec2KeyPair: \(Swift.String(describing: ec2KeyPair)), imageId: \(Swift.String(describing: imageId)), instanceRole: \(Swift.String(describing: instanceRole)), instanceTypes: \(Swift.String(describing: instanceTypes)), launchTemplate: \(Swift.String(describing: launchTemplate)), maxvCpus: \(Swift.String(describing: maxvCpus)), minvCpus: \(Swift.String(describing: minvCpus)), placementGroup: \(Swift.String(describing: placementGroup)), securityGroupIds: \(Swift.String(describing: securityGroupIds)), spotIamFleetRole: \(Swift.String(describing: spotIamFleetRole)), subnets: \(Swift.String(describing: subnets)), tags: \(Swift.String(describing: tags)), type: \(Swift.String(describing: type)))"}
}

extension BatchClientTypes {
    /// <p>An object representing an AWS Batch compute resource. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the
    ///    <i>AWS Batch User Guide</i>.</p>
    public struct ComputeResource: Swift.Equatable {
        /// <p>The allocation strategy to use for the compute resource if not enough instances of the best fitting instance
        ///    type can be allocated. This might be because of availability of the instance type in the Region or <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 service limits</a>. For more
        ///    information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html">Allocation Strategies</a>
        ///    in the <i>AWS Batch User Guide</i>.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        ///          <dl>
        ///             <dt>BEST_FIT (default)</dt>
        ///             <dd>
        ///                <p>AWS Batch selects an instance type that best fits the needs of the jobs with a preference for the lowest-cost
        ///       instance type. If additional instances of the selected instance type aren't available, AWS Batch waits for the
        ///       additional instances to be available. If there aren't enough instances available, or if the user is hitting <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 service limits</a> then
        ///       additional jobs aren't run until the currently running jobs have completed. This allocation strategy keeps costs
        ///       lower but can limit scaling. If you are using Spot Fleets with <code>BEST_FIT</code> then the Spot Fleet IAM Role
        ///       must be specified.</p>
        ///             </dd>
        ///             <dt>BEST_FIT_PROGRESSIVE</dt>
        ///             <dd>
        ///                <p>AWS Batch will select additional instance types that are large enough to meet the requirements of the jobs in
        ///       the queue, with a preference for instance types with a lower cost per unit vCPU. If additional instances of the
        ///       previously selected instance types aren't available, AWS Batch will select new instance types.</p>
        ///             </dd>
        ///             <dt>SPOT_CAPACITY_OPTIMIZED</dt>
        ///             <dd>
        ///                <p>AWS Batch will select one or more instance types that are large enough to meet the requirements of the jobs in
        ///       the queue, with a preference for instance types that are less likely to be interrupted. This allocation strategy
        ///       is only available for Spot Instance compute resources.</p>
        ///             </dd>
        ///          </dl>
        ///          <p>With both <code>BEST_FIT_PROGRESSIVE</code> and <code>SPOT_CAPACITY_OPTIMIZED</code> strategies, AWS Batch might
        ///    need to go above <code>maxvCpus</code> to meet your capacity requirements. In this event, AWS Batch never exceeds
        ///     <code>maxvCpus</code> by more than a single instance.</p>
        public let allocationStrategy: BatchClientTypes.CRAllocationStrategy?
        /// <p>The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that
        ///    instance type before instances are launched. For example, if your maximum percentage is 20%, then the Spot price must
        ///    be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and
        ///    never more than your maximum percentage. If you leave this field empty, the default value is 100% of the On-Demand
        ///    price.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        public let bidPercentage: Swift.Int
        /// <p>The desired number of Amazon EC2 vCPUS in the compute environment. AWS Batch modifies this value between the minimum
        ///    and maximum values, based on job queue demand.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        public let desiredvCpus: Swift.Int
        /// <p>Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment.
        ///    If <code>Ec2Configuration</code> isn't specified, the default is <code>ECS_AL1</code>.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        public let ec2Configuration: [BatchClientTypes.Ec2Configuration]?
        /// <p>The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to
        ///    log in to your instances with SSH.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        public let ec2KeyPair: Swift.String?
        /// <p>The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is
        ///    overridden by the <code>imageIdOverride</code> member of the <code>Ec2Configuration</code> structure.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        ///          <note>
        ///             <p>The AMI that you choose for a compute environment must match the architecture of the instance types that
        ///     you intend to use for that compute environment. For example, if your compute environment uses A1 instance types,
        ///     the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the
        ///     Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html">Amazon ECS-optimized
        ///     Amazon Linux 2 AMI</a>
        ///     in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
        ///          </note>
        @available(*, deprecated, message: "This field is deprecated, use ec2Configuration[].imageIdOverride instead.")
        public let imageId: Swift.String?
        /// <p>The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. You can specify the short name
        ///    or full Amazon Resource Name (ARN) of an instance profile. For example,
        ///     <code>
        ///                <i>ecsInstanceRole</i>
        ///             </code> or
        ///      <code>arn:aws:iam::<i><aws_account_id></i>:instance-profile/<i>ecsInstanceRole</i>
        ///             </code>.
        ///    For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html">Amazon ECS Instance
        ///     Role</a> in the <i>AWS Batch User Guide</i>.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        public let instanceRole: Swift.String?
        /// <p>The instances types that can be launched. You can specify instance families to launch any instance type within
        ///    those families (for example, <code>c5</code> or <code>p3</code>), or you can specify specific sizes within a family
        ///    (such as <code>c5.8xlarge</code>). You can also choose <code>optimal</code> to select instance types (from the C4,
        ///    M4, and R4 instance families) that match the demand of your job queues.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        ///          <note>
        ///             <p>When you create a compute environment, the instance types that you select for the compute environment must
        ///     share the same architecture. For example, you can't mix x86 and ARM instances in the same compute
        ///     environment.</p>
        ///          </note>
        ///          <note>
        ///             <p>Currently, <code>optimal</code> uses instance types from the C4, M4, and R4 instance families. In Regions that
        ///     don't have instance types from those instance families, instance types from the C5, M5. and R5 instance families are
        ///     used.</p>
        ///          </note>
        public let instanceTypes: [Swift.String]?
        /// <p>The launch template to use for your compute resources. Any other compute resource parameters that you specify in
        ///    a <a>CreateComputeEnvironment</a> API operation override the same parameters in the launch template. You
        ///    must specify either the launch template ID or launch template name in the request, but not both. For more
        ///    information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html">Launch Template Support</a> in
        ///    the <i>AWS Batch User Guide</i>.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        public let launchTemplate: BatchClientTypes.LaunchTemplateSpecification?
        /// <p>The maximum number of Amazon EC2 vCPUs that a compute environment can reach.</p>
        ///          <note>
        ///             <p>With both <code>BEST_FIT_PROGRESSIVE</code> and <code>SPOT_CAPACITY_OPTIMIZED</code> allocation strategies,
        ///     AWS Batch might need to exceed <code>maxvCpus</code> to meet your capacity requirements. In this event, AWS Batch never
        ///     exceeds <code>maxvCpus</code> by more than a single instance. For example, no more than a single instance from among
        ///     those specified in your compute environment is allocated.</p>
        ///          </note>
        public let maxvCpus: Swift.Int
        /// <p>The minimum number of Amazon EC2 vCPUs that an environment should maintain (even if the compute environment is
        ///     <code>DISABLED</code>).</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        public let minvCpus: Swift.Int
        /// <p>The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel
        ///    jobs to your compute environment, you should consider creating a cluster placement group and associate it with your
        ///    compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single
        ///    Availability Zone with high network flow potential. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for
        ///     Linux Instances</i>.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        public let placementGroup: Swift.String?
        /// <p>The Amazon EC2 security groups associated with instances launched in the compute environment. One or more security
        ///    groups must be specified, either in <code>securityGroupIds</code> or using a launch template referenced in
        ///     <code>launchTemplate</code>. This parameter is required for jobs running on Fargate resources and must contain at
        ///    least one security group. Fargate doesn't support launch templates. If security groups are specified using both
        ///     <code>securityGroupIds</code> and <code>launchTemplate</code>, the values in <code>securityGroupIds</code> is
        ///    used.</p>
        public let securityGroupIds: [Swift.String]?
        /// <p>The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a <code>SPOT</code> compute environment. This role is
        ///    required if the allocation strategy set to <code>BEST_FIT</code> or if the allocation strategy isn't specified. For
        ///    more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html">Amazon EC2 Spot Fleet
        ///     Role</a> in the <i>AWS Batch User Guide</i>.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        ///          <important>
        ///             <p>To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer <b>AmazonEC2SpotFleetTaggingRole</b> managed policy. The previously recommended <b>AmazonEC2SpotFleetRole</b> managed policy doesn't have the required permissions to tag Spot
        ///     Instances. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#spot-instance-no-tag">Spot Instances not tagged on creation</a> in the
        ///      <i>AWS Batch User Guide</i>.</p>
        ///          </important>
        public let spotIamFleetRole: Swift.String?
        /// <p>The VPC subnets into which the compute resources are launched. These subnets must be within the same VPC.
        ///    Fargate compute resources can contain up to 16 subnets. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">VPCs and Subnets</a> in the <i>Amazon VPC User
        ///     Guide</i>.</p>
        public let subnets: [Swift.String]?
        /// <p>Key-value pair tags to be applied to EC2 resources that are launched in the compute environment. For AWS Batch,
        ///    these take the form of "String1": "String2", where String1 is the tag key and String2 is the tag value−for
        ///    example, { "Name": "AWS Batch Instance - C4OnDemand" }. This is helpful for recognizing your AWS Batch instances in the
        ///    Amazon EC2 console. These tags can't be updated or removed after the compute environment has been created; any changes
        ///    require creating a new compute environment and removing the old compute environment. These tags aren't seen when
        ///    using the AWS Batch <code>ListTagsForResource</code> API operation.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        public let tags: [Swift.String:Swift.String]?
        /// <p>The type of compute environment: <code>EC2</code>, <code>SPOT</code>, <code>FARGATE</code>, or
        ///     <code>FARGATE_SPOT</code>. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the
        ///    <i>AWS Batch User Guide</i>.</p>
        ///          <p> If you choose <code>SPOT</code>, you must also specify an Amazon EC2 Spot Fleet role with the
        ///     <code>spotIamFleetRole</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html">Amazon EC2 Spot Fleet role</a> in the
        ///     <i>AWS Batch User Guide</i>.</p>
        public let type: BatchClientTypes.CRType?

        public init (
            allocationStrategy: BatchClientTypes.CRAllocationStrategy? = nil,
            bidPercentage: Swift.Int = 0,
            desiredvCpus: Swift.Int = 0,
            ec2Configuration: [BatchClientTypes.Ec2Configuration]? = nil,
            ec2KeyPair: Swift.String? = nil,
            imageId: Swift.String? = nil,
            instanceRole: Swift.String? = nil,
            instanceTypes: [Swift.String]? = nil,
            launchTemplate: BatchClientTypes.LaunchTemplateSpecification? = nil,
            maxvCpus: Swift.Int = 0,
            minvCpus: Swift.Int = 0,
            placementGroup: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            spotIamFleetRole: Swift.String? = nil,
            subnets: [Swift.String]? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: BatchClientTypes.CRType? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.bidPercentage = bidPercentage
            self.desiredvCpus = desiredvCpus
            self.ec2Configuration = ec2Configuration
            self.ec2KeyPair = ec2KeyPair
            self.imageId = imageId
            self.instanceRole = instanceRole
            self.instanceTypes = instanceTypes
            self.launchTemplate = launchTemplate
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.placementGroup = placementGroup
            self.securityGroupIds = securityGroupIds
            self.spotIamFleetRole = spotIamFleetRole
            self.subnets = subnets
            self.tags = tags
            self.type = type
        }
    }

}

extension BatchClientTypes.ComputeResourceUpdate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredvCpus
        case maxvCpus
        case minvCpus
        case securityGroupIds
        case subnets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if desiredvCpus != 0 {
            try encodeContainer.encode(desiredvCpus, forKey: .desiredvCpus)
        }
        if maxvCpus != 0 {
            try encodeContainer.encode(maxvCpus, forKey: .maxvCpus)
        }
        if minvCpus != 0 {
            try encodeContainer.encode(minvCpus, forKey: .minvCpus)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minvCpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .minvCpus)
        minvCpus = minvCpusDecoded
        let maxvCpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxvCpus)
        maxvCpus = maxvCpusDecoded
        let desiredvCpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .desiredvCpus)
        desiredvCpus = desiredvCpusDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension BatchClientTypes.ComputeResourceUpdate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ComputeResourceUpdate(desiredvCpus: \(Swift.String(describing: desiredvCpus)), maxvCpus: \(Swift.String(describing: maxvCpus)), minvCpus: \(Swift.String(describing: minvCpus)), securityGroupIds: \(Swift.String(describing: securityGroupIds)), subnets: \(Swift.String(describing: subnets)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the attributes of a compute environment that can be updated. For more information, see
    ///     <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the
    ///     <i>AWS Batch User Guide</i>.</p>
    public struct ComputeResourceUpdate: Swift.Equatable {
        /// <p>The desired number of Amazon EC2 vCPUS in the compute environment.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        public let desiredvCpus: Swift.Int
        /// <p>The maximum number of Amazon EC2 vCPUs that an environment can reach.</p>
        ///          <note>
        ///             <p>With both <code>BEST_FIT_PROGRESSIVE</code> and <code>SPOT_CAPACITY_OPTIMIZED</code> allocation strategies,
        ///     AWS Batch might need to exceed <code>maxvCpus</code> to meet your capacity requirements. In this event, AWS Batch never
        ///     exceeds <code>maxvCpus</code> by more than a single instance. That is, no more than a single instance from among
        ///     those specified in your compute environment.</p>
        ///          </note>
        public let maxvCpus: Swift.Int
        /// <p>The minimum number of Amazon EC2 vCPUs that an environment should maintain.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
        ///          </note>
        public let minvCpus: Swift.Int
        /// <p>The Amazon EC2 security groups associated with instances launched in the compute environment. This parameter is
        ///    required for Fargate compute resources, where it can contain up to 5 security groups. This can't be specified for
        ///    EC2 compute resources. Providing an empty list is handled as if this parameter wasn't specified and no change is
        ///    made.</p>
        public let securityGroupIds: [Swift.String]?
        /// <p>The VPC subnets that the compute resources are launched into. Fargate compute resources can contain up to 16
        ///    subnets. Providing an empty list will be handled as if this parameter wasn't specified and no change is made. This
        ///    can't be specified for EC2 compute resources. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">VPCs and Subnets</a> in the <i>Amazon VPC User
        ///     Guide</i>.</p>
        public let subnets: [Swift.String]?

        public init (
            desiredvCpus: Swift.Int = 0,
            maxvCpus: Swift.Int = 0,
            minvCpus: Swift.Int = 0,
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.desiredvCpus = desiredvCpus
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
        }
    }

}

extension BatchClientTypes.ContainerDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case containerInstanceArn
        case environment
        case executionRoleArn
        case exitCode
        case fargatePlatformConfiguration
        case image
        case instanceType
        case jobRoleArn
        case linuxParameters
        case logConfiguration
        case logStreamName
        case memory
        case mountPoints
        case networkConfiguration
        case networkInterfaces
        case privileged
        case readonlyRootFilesystem
        case reason
        case resourceRequirements
        case secrets
        case taskArn
        case ulimits
        case user
        case vcpus
        case volumes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for stringlist0 in command {
                try commandContainer.encode(stringlist0)
            }
        }
        if let containerInstanceArn = containerInstanceArn {
            try encodeContainer.encode(containerInstanceArn, forKey: .containerInstanceArn)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for environmentvariables0 in environment {
                try environmentContainer.encode(environmentvariables0)
            }
        }
        if let executionRoleArn = executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if exitCode != 0 {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let fargatePlatformConfiguration = fargatePlatformConfiguration {
            try encodeContainer.encode(fargatePlatformConfiguration, forKey: .fargatePlatformConfiguration)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let jobRoleArn = jobRoleArn {
            try encodeContainer.encode(jobRoleArn, forKey: .jobRoleArn)
        }
        if let linuxParameters = linuxParameters {
            try encodeContainer.encode(linuxParameters, forKey: .linuxParameters)
        }
        if let logConfiguration = logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if memory != 0 {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let mountPoints = mountPoints {
            var mountPointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mountPoints)
            for mountpoints0 in mountPoints {
                try mountPointsContainer.encode(mountpoints0)
            }
        }
        if let networkConfiguration = networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if let networkInterfaces = networkInterfaces {
            var networkInterfacesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaces)
            for networkinterfacelist0 in networkInterfaces {
                try networkInterfacesContainer.encode(networkinterfacelist0)
            }
        }
        if privileged != false {
            try encodeContainer.encode(privileged, forKey: .privileged)
        }
        if readonlyRootFilesystem != false {
            try encodeContainer.encode(readonlyRootFilesystem, forKey: .readonlyRootFilesystem)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for resourcerequirements0 in resourceRequirements {
                try resourceRequirementsContainer.encode(resourcerequirements0)
            }
        }
        if let secrets = secrets {
            var secretsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secrets)
            for secretlist0 in secrets {
                try secretsContainer.encode(secretlist0)
            }
        }
        if let taskArn = taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
        if let ulimits = ulimits {
            var ulimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ulimits)
            for ulimits0 in ulimits {
                try ulimitsContainer.encode(ulimits0)
            }
        }
        if let user = user {
            try encodeContainer.encode(user, forKey: .user)
        }
        if vcpus != 0 {
            try encodeContainer.encode(vcpus, forKey: .vcpus)
        }
        if let volumes = volumes {
            var volumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumes)
            for volumes0 in volumes {
                try volumesContainer.encode(volumes0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let vcpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .vcpus)
        vcpus = vcpusDecoded
        let memoryDecoded = try containerValues.decode(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let jobRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobRoleArn)
        jobRoleArn = jobRoleArnDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let volumesContainer = try containerValues.decodeIfPresent([BatchClientTypes.Volume?].self, forKey: .volumes)
        var volumesDecoded0:[BatchClientTypes.Volume]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [BatchClientTypes.Volume]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([BatchClientTypes.KeyValuePair?].self, forKey: .environment)
        var environmentDecoded0:[BatchClientTypes.KeyValuePair]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [BatchClientTypes.KeyValuePair]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let mountPointsContainer = try containerValues.decodeIfPresent([BatchClientTypes.MountPoint?].self, forKey: .mountPoints)
        var mountPointsDecoded0:[BatchClientTypes.MountPoint]? = nil
        if let mountPointsContainer = mountPointsContainer {
            mountPointsDecoded0 = [BatchClientTypes.MountPoint]()
            for structure0 in mountPointsContainer {
                if let structure0 = structure0 {
                    mountPointsDecoded0?.append(structure0)
                }
            }
        }
        mountPoints = mountPointsDecoded0
        let readonlyRootFilesystemDecoded = try containerValues.decode(Swift.Bool.self, forKey: .readonlyRootFilesystem)
        readonlyRootFilesystem = readonlyRootFilesystemDecoded
        let ulimitsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Ulimit?].self, forKey: .ulimits)
        var ulimitsDecoded0:[BatchClientTypes.Ulimit]? = nil
        if let ulimitsContainer = ulimitsContainer {
            ulimitsDecoded0 = [BatchClientTypes.Ulimit]()
            for structure0 in ulimitsContainer {
                if let structure0 = structure0 {
                    ulimitsDecoded0?.append(structure0)
                }
            }
        }
        ulimits = ulimitsDecoded0
        let privilegedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .privileged)
        privileged = privilegedDecoded
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let exitCodeDecoded = try containerValues.decode(Swift.Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let containerInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerInstanceArn)
        containerInstanceArn = containerInstanceArnDecoded
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let networkInterfacesContainer = try containerValues.decodeIfPresent([BatchClientTypes.NetworkInterface?].self, forKey: .networkInterfaces)
        var networkInterfacesDecoded0:[BatchClientTypes.NetworkInterface]? = nil
        if let networkInterfacesContainer = networkInterfacesContainer {
            networkInterfacesDecoded0 = [BatchClientTypes.NetworkInterface]()
            for structure0 in networkInterfacesContainer {
                if let structure0 = structure0 {
                    networkInterfacesDecoded0?.append(structure0)
                }
            }
        }
        networkInterfaces = networkInterfacesDecoded0
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([BatchClientTypes.ResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[BatchClientTypes.ResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [BatchClientTypes.ResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
        let linuxParametersDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LinuxParameters.self, forKey: .linuxParameters)
        linuxParameters = linuxParametersDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LogConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let secretsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Secret?].self, forKey: .secrets)
        var secretsDecoded0:[BatchClientTypes.Secret]? = nil
        if let secretsContainer = secretsContainer {
            secretsDecoded0 = [BatchClientTypes.Secret]()
            for structure0 in secretsContainer {
                if let structure0 = structure0 {
                    secretsDecoded0?.append(structure0)
                }
            }
        }
        secrets = secretsDecoded0
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let fargatePlatformConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.FargatePlatformConfiguration.self, forKey: .fargatePlatformConfiguration)
        fargatePlatformConfiguration = fargatePlatformConfigurationDecoded
    }
}

extension BatchClientTypes.ContainerDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerDetail(command: \(Swift.String(describing: command)), containerInstanceArn: \(Swift.String(describing: containerInstanceArn)), environment: \(Swift.String(describing: environment)), executionRoleArn: \(Swift.String(describing: executionRoleArn)), exitCode: \(Swift.String(describing: exitCode)), fargatePlatformConfiguration: \(Swift.String(describing: fargatePlatformConfiguration)), image: \(Swift.String(describing: image)), instanceType: \(Swift.String(describing: instanceType)), jobRoleArn: \(Swift.String(describing: jobRoleArn)), linuxParameters: \(Swift.String(describing: linuxParameters)), logConfiguration: \(Swift.String(describing: logConfiguration)), logStreamName: \(Swift.String(describing: logStreamName)), memory: \(Swift.String(describing: memory)), mountPoints: \(Swift.String(describing: mountPoints)), networkConfiguration: \(Swift.String(describing: networkConfiguration)), networkInterfaces: \(Swift.String(describing: networkInterfaces)), privileged: \(Swift.String(describing: privileged)), readonlyRootFilesystem: \(Swift.String(describing: readonlyRootFilesystem)), reason: \(Swift.String(describing: reason)), resourceRequirements: \(Swift.String(describing: resourceRequirements)), secrets: \(Swift.String(describing: secrets)), taskArn: \(Swift.String(describing: taskArn)), ulimits: \(Swift.String(describing: ulimits)), user: \(Swift.String(describing: user)), vcpus: \(Swift.String(describing: vcpus)), volumes: \(Swift.String(describing: volumes)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the details of a container that's part of a job.</p>
    public struct ContainerDetail: Swift.Equatable {
        /// <p>The command that's passed to the container.</p>
        public let command: [Swift.String]?
        /// <p>The Amazon Resource Name (ARN) of the container instance that the container is running on.</p>
        public let containerInstanceArn: Swift.String?
        /// <p>The environment variables to pass to a container.</p>
        ///          <note>
        ///             <p>Environment variables must not start with <code>AWS_BATCH</code>; this naming
        ///  convention is reserved for variables that are set by the AWS Batch service.</p>
        ///          </note>
        public let environment: [BatchClientTypes.KeyValuePair]?
        /// <p>The Amazon Resource Name (ARN) of the
        ///    execution
        ///    role that AWS Batch can assume. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html">AWS Batch execution IAM role</a> in the
        ///     <i>AWS Batch User Guide</i>.</p>
        public let executionRoleArn: Swift.String?
        /// <p>The exit code to return upon completion.</p>
        public let exitCode: Swift.Int
        /// <p>The platform configuration for jobs running on Fargate resources. Jobs running on EC2 resources must not
        ///    specify this parameter.</p>
        public let fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration?
        /// <p>The image used to start the container.</p>
        public let image: Swift.String?
        /// <p>The instance type of the underlying host infrastructure of a multi-node parallel job.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources.</p>
        ///          </note>
        public let instanceType: Swift.String?
        /// <p>The Amazon Resource Name (ARN) associated with the job upon execution.</p>
        public let jobRoleArn: Swift.String?
        /// <p>Linux-specific modifications that are applied to the container, such as details for device mappings.</p>
        public let linuxParameters: BatchClientTypes.LinuxParameters?
        /// <p>The log configuration specification for the container.</p>
        ///          <p>This parameter maps to <code>LogConfig</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--log-driver</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.
        ///    By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a
        ///    different logging driver than the Docker daemon by specifying a log driver with this parameter in the container
        ///    definition. To use a different logging driver for a container, the log system must be configured properly on the
        ///    container instance. Or, alternatively, it must be configured on a different log server for remote logging options.
        ///    For more information on the options for different supported log drivers, see <a href="https://docs.docker.com/engine/admin/logging/overview/">Configure logging drivers</a> in the Docker
        ///    documentation.</p>
        ///          <note>
        ///             <p>AWS Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the <a>LogConfiguration</a> data type). Additional log drivers might be available in future releases of the Amazon ECS
        ///     container agent.</p>
        ///          </note>
        ///          <p>This parameter requires version 1.18 of the Docker Remote API or greater on your
        ///  container instance. To check the Docker Remote API version on your container instance, log into your
        ///  container instance and run the following command: <code>sudo docker version | grep "Server API version"</code>
        ///          </p>
        ///          <note>
        ///             <p>The Amazon ECS container agent running on a container instance must register the logging drivers available on that
        ///     instance with the <code>ECS_AVAILABLE_LOGGING_DRIVERS</code> environment variable before containers placed on that
        ///     instance can use these log configuration options. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html">Amazon ECS Container Agent Configuration</a> in the
        ///      <i>Amazon Elastic Container Service Developer Guide</i>.</p>
        ///          </note>
        public let logConfiguration: BatchClientTypes.LogConfiguration?
        /// <p>The name of the CloudWatch Logs log stream associated with the container. The log group for AWS Batch jobs is
        ///     <code>/aws/batch/job</code>. Each container attempt receives a log stream name when they reach the
        ///     <code>RUNNING</code> status.</p>
        public let logStreamName: Swift.String?
        /// <p>For jobs run on EC2 resources that didn't specify memory requirements using <code>ResourceRequirement</code>,
        ///    the number of MiB of memory reserved for the job. For other jobs, including all run on Fargate resources, see
        ///     <code>resourceRequirements</code>.</p>
        public let memory: Swift.Int
        /// <p>The mount points for data volumes in your container.</p>
        public let mountPoints: [BatchClientTypes.MountPoint]?
        /// <p>The network configuration for jobs running on Fargate resources. Jobs running on EC2 resources must not
        ///    specify this parameter.</p>
        public let networkConfiguration: BatchClientTypes.NetworkConfiguration?
        /// <p>The network interfaces associated with the job.</p>
        public let networkInterfaces: [BatchClientTypes.NetworkInterface]?
        /// <p>When this parameter is true, the container is given elevated permissions on the host container instance (similar
        ///    to the <code>root</code> user). The default value is false.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources and shouldn't be provided, or specified
        ///     as false.</p>
        ///          </note>
        public let privileged: Swift.Bool
        /// <p>When this parameter is true, the container is given read-only access to its root file system. This parameter
        ///    maps to <code>ReadonlyRootfs</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and
        ///    the <code>--read-only</code> option to <a href="https://docs.docker.com/engine/reference/commandline/run/">
        ///                <code>docker run</code>
        ///             </a>.</p>
        public let readonlyRootFilesystem: Swift.Bool
        /// <p>A short (255 max characters) human-readable string to provide additional details about a running or stopped
        ///    container.</p>
        public let reason: Swift.String?
        /// <p>The type and amount of resources to assign to a container. The supported resources include <code>GPU</code>,
        ///     <code>MEMORY</code>, and <code>VCPU</code>.</p>
        public let resourceRequirements: [BatchClientTypes.ResourceRequirement]?
        /// <p>The secrets to pass to the container. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html">Specifying sensitive data</a> in the
        ///     <i>AWS Batch User Guide</i>.</p>
        public let secrets: [BatchClientTypes.Secret]?
        /// <p>The Amazon Resource Name (ARN) of the Amazon ECS task that's associated with the container job. Each container attempt receives a task
        ///    ARN when they reach the <code>STARTING</code> status.</p>
        public let taskArn: Swift.String?
        /// <p>A list of <code>ulimit</code> values to set in the container. This parameter maps to <code>Ulimits</code> in the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--ulimit</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources.</p>
        ///          </note>
        public let ulimits: [BatchClientTypes.Ulimit]?
        /// <p>The user name to use inside the container. This parameter maps to <code>User</code> in the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--user</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        public let user: Swift.String?
        /// <p>The number of vCPUs reserved for the container. For jobs that run on EC2 resources, you can specify the vCPU
        ///    requirement for the job using <code>resourceRequirements</code>, but you can't specify the vCPU requirements in both
        ///    the <code>vcpus</code> and <code>resourceRequirement</code> object. This parameter maps to <code>CpuShares</code> in
        ///    the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--cpu-shares</code> option to
        ///     <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. Each vCPU is equivalent to 1,024 CPU shares. You must
        ///    specify at least one vCPU. This is required but can be specified in several places. It must be specified for each
        ///    node at least once.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs that run on Fargate resources. For jobs that run on Fargate
        ///     resources, you must specify the vCPU requirement for the job using <code>resourceRequirements</code>.</p>
        ///          </note>
        public let vcpus: Swift.Int
        /// <p>A list of volumes associated with the job.</p>
        public let volumes: [BatchClientTypes.Volume]?

        public init (
            command: [Swift.String]? = nil,
            containerInstanceArn: Swift.String? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            executionRoleArn: Swift.String? = nil,
            exitCode: Swift.Int = 0,
            fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration? = nil,
            image: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            jobRoleArn: Swift.String? = nil,
            linuxParameters: BatchClientTypes.LinuxParameters? = nil,
            logConfiguration: BatchClientTypes.LogConfiguration? = nil,
            logStreamName: Swift.String? = nil,
            memory: Swift.Int = 0,
            mountPoints: [BatchClientTypes.MountPoint]? = nil,
            networkConfiguration: BatchClientTypes.NetworkConfiguration? = nil,
            networkInterfaces: [BatchClientTypes.NetworkInterface]? = nil,
            privileged: Swift.Bool = false,
            readonlyRootFilesystem: Swift.Bool = false,
            reason: Swift.String? = nil,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil,
            secrets: [BatchClientTypes.Secret]? = nil,
            taskArn: Swift.String? = nil,
            ulimits: [BatchClientTypes.Ulimit]? = nil,
            user: Swift.String? = nil,
            vcpus: Swift.Int = 0,
            volumes: [BatchClientTypes.Volume]? = nil
        )
        {
            self.command = command
            self.containerInstanceArn = containerInstanceArn
            self.environment = environment
            self.executionRoleArn = executionRoleArn
            self.exitCode = exitCode
            self.fargatePlatformConfiguration = fargatePlatformConfiguration
            self.image = image
            self.instanceType = instanceType
            self.jobRoleArn = jobRoleArn
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.logStreamName = logStreamName
            self.memory = memory
            self.mountPoints = mountPoints
            self.networkConfiguration = networkConfiguration
            self.networkInterfaces = networkInterfaces
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.reason = reason
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.taskArn = taskArn
            self.ulimits = ulimits
            self.user = user
            self.vcpus = vcpus
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes.ContainerOverrides: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case environment
        case instanceType
        case memory
        case resourceRequirements
        case vcpus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for stringlist0 in command {
                try commandContainer.encode(stringlist0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for environmentvariables0 in environment {
                try environmentContainer.encode(environmentvariables0)
            }
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if memory != 0 {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for resourcerequirements0 in resourceRequirements {
                try resourceRequirementsContainer.encode(resourcerequirements0)
            }
        }
        if vcpus != 0 {
            try encodeContainer.encode(vcpus, forKey: .vcpus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vcpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .vcpus)
        vcpus = vcpusDecoded
        let memoryDecoded = try containerValues.decode(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let environmentContainer = try containerValues.decodeIfPresent([BatchClientTypes.KeyValuePair?].self, forKey: .environment)
        var environmentDecoded0:[BatchClientTypes.KeyValuePair]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [BatchClientTypes.KeyValuePair]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([BatchClientTypes.ResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[BatchClientTypes.ResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [BatchClientTypes.ResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
    }
}

extension BatchClientTypes.ContainerOverrides: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerOverrides(command: \(Swift.String(describing: command)), environment: \(Swift.String(describing: environment)), instanceType: \(Swift.String(describing: instanceType)), memory: \(Swift.String(describing: memory)), resourceRequirements: \(Swift.String(describing: resourceRequirements)), vcpus: \(Swift.String(describing: vcpus)))"}
}

extension BatchClientTypes {
    /// <p>The overrides that should be sent to a container.</p>
    public struct ContainerOverrides: Swift.Equatable {
        /// <p>The command to send to the container that overrides the default command from the Docker image or the job
        ///    definition.</p>
        public let command: [Swift.String]?
        /// <p>The environment variables to send to the container. You can add new environment variables, which are added to
        ///    the container at launch, or you can override the existing environment variables from the Docker image or the job
        ///    definition.</p>
        ///          <note>
        ///             <p>Environment variables must not start with <code>AWS_BATCH</code>; this naming
        ///  convention is reserved for variables that are set by the AWS Batch service.</p>
        ///          </note>
        public let environment: [BatchClientTypes.KeyValuePair]?
        /// <p>The instance type to use for a multi-node parallel job.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to single-node container jobs or for jobs running on Fargate resources and
        ///     shouldn't be provided.</p>
        ///          </note>
        public let instanceType: Swift.String?
        /// <p>This parameter indicates the amount of memory (in MiB) that's reserved for the job. It overrides the
        ///     <code>memory</code> parameter set in the job definition, but doesn't override any memory requirement specified in
        ///    the <code>ResourceRequirement</code> structure in the job definition.</p>
        ///          <p>This parameter is supported for jobs that run on EC2 resources, but isn't supported for jobs that run on Fargate
        ///    resources. For these resources, use <code>resourceRequirement</code> instead.</p>
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public let memory: Swift.Int
        /// <p>The type and amount of resources to assign to a container. This overrides the settings in the job definition.
        ///    The supported resources include <code>GPU</code>, <code>MEMORY</code>, and <code>VCPU</code>.</p>
        public let resourceRequirements: [BatchClientTypes.ResourceRequirement]?
        /// <p>This parameter indicates the number of vCPUs reserved for the container.It overrides the <code>vcpus</code>
        ///    parameter that's set in the job definition, but doesn't override any vCPU requirement specified in the
        ///     <code>resourceRequirement</code> structure in the job definition.</p>
        ///          <p>This parameter is supported for jobs that run on EC2 resources, but isn't supported for jobs that run on Fargate
        ///    resources. For Fargate resources, you can only use <code>resourceRequirement</code>. For EC2 resources, you can use
        ///    either this parameter or <code>resourceRequirement</code> but not both. </p>
        ///          <p>This parameter maps to <code>CpuShares</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--cpu-shares</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.
        ///    Each vCPU is equivalent to 1,024 CPU shares. You must specify at least one vCPU.</p>
        ///          <note>
        ///
        ///             <p>This parameter isn't applicable to jobs that run on Fargate resources and shouldn't be provided. For jobs
        ///     that run on Fargate resources, you must specify the vCPU requirement for the job using
        ///      <code>resourceRequirements</code>.</p>
        ///
        ///          </note>
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public let vcpus: Swift.Int

        public init (
            command: [Swift.String]? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            instanceType: Swift.String? = nil,
            memory: Swift.Int = 0,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil,
            vcpus: Swift.Int = 0
        )
        {
            self.command = command
            self.environment = environment
            self.instanceType = instanceType
            self.memory = memory
            self.resourceRequirements = resourceRequirements
            self.vcpus = vcpus
        }
    }

}

extension BatchClientTypes.ContainerProperties: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case environment
        case executionRoleArn
        case fargatePlatformConfiguration
        case image
        case instanceType
        case jobRoleArn
        case linuxParameters
        case logConfiguration
        case memory
        case mountPoints
        case networkConfiguration
        case privileged
        case readonlyRootFilesystem
        case resourceRequirements
        case secrets
        case ulimits
        case user
        case vcpus
        case volumes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for stringlist0 in command {
                try commandContainer.encode(stringlist0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for environmentvariables0 in environment {
                try environmentContainer.encode(environmentvariables0)
            }
        }
        if let executionRoleArn = executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let fargatePlatformConfiguration = fargatePlatformConfiguration {
            try encodeContainer.encode(fargatePlatformConfiguration, forKey: .fargatePlatformConfiguration)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let jobRoleArn = jobRoleArn {
            try encodeContainer.encode(jobRoleArn, forKey: .jobRoleArn)
        }
        if let linuxParameters = linuxParameters {
            try encodeContainer.encode(linuxParameters, forKey: .linuxParameters)
        }
        if let logConfiguration = logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if memory != 0 {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let mountPoints = mountPoints {
            var mountPointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mountPoints)
            for mountpoints0 in mountPoints {
                try mountPointsContainer.encode(mountpoints0)
            }
        }
        if let networkConfiguration = networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if privileged != false {
            try encodeContainer.encode(privileged, forKey: .privileged)
        }
        if readonlyRootFilesystem != false {
            try encodeContainer.encode(readonlyRootFilesystem, forKey: .readonlyRootFilesystem)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for resourcerequirements0 in resourceRequirements {
                try resourceRequirementsContainer.encode(resourcerequirements0)
            }
        }
        if let secrets = secrets {
            var secretsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secrets)
            for secretlist0 in secrets {
                try secretsContainer.encode(secretlist0)
            }
        }
        if let ulimits = ulimits {
            var ulimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ulimits)
            for ulimits0 in ulimits {
                try ulimitsContainer.encode(ulimits0)
            }
        }
        if let user = user {
            try encodeContainer.encode(user, forKey: .user)
        }
        if vcpus != 0 {
            try encodeContainer.encode(vcpus, forKey: .vcpus)
        }
        if let volumes = volumes {
            var volumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumes)
            for volumes0 in volumes {
                try volumesContainer.encode(volumes0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let vcpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .vcpus)
        vcpus = vcpusDecoded
        let memoryDecoded = try containerValues.decode(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let jobRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobRoleArn)
        jobRoleArn = jobRoleArnDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let volumesContainer = try containerValues.decodeIfPresent([BatchClientTypes.Volume?].self, forKey: .volumes)
        var volumesDecoded0:[BatchClientTypes.Volume]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [BatchClientTypes.Volume]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([BatchClientTypes.KeyValuePair?].self, forKey: .environment)
        var environmentDecoded0:[BatchClientTypes.KeyValuePair]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [BatchClientTypes.KeyValuePair]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let mountPointsContainer = try containerValues.decodeIfPresent([BatchClientTypes.MountPoint?].self, forKey: .mountPoints)
        var mountPointsDecoded0:[BatchClientTypes.MountPoint]? = nil
        if let mountPointsContainer = mountPointsContainer {
            mountPointsDecoded0 = [BatchClientTypes.MountPoint]()
            for structure0 in mountPointsContainer {
                if let structure0 = structure0 {
                    mountPointsDecoded0?.append(structure0)
                }
            }
        }
        mountPoints = mountPointsDecoded0
        let readonlyRootFilesystemDecoded = try containerValues.decode(Swift.Bool.self, forKey: .readonlyRootFilesystem)
        readonlyRootFilesystem = readonlyRootFilesystemDecoded
        let privilegedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .privileged)
        privileged = privilegedDecoded
        let ulimitsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Ulimit?].self, forKey: .ulimits)
        var ulimitsDecoded0:[BatchClientTypes.Ulimit]? = nil
        if let ulimitsContainer = ulimitsContainer {
            ulimitsDecoded0 = [BatchClientTypes.Ulimit]()
            for structure0 in ulimitsContainer {
                if let structure0 = structure0 {
                    ulimitsDecoded0?.append(structure0)
                }
            }
        }
        ulimits = ulimitsDecoded0
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([BatchClientTypes.ResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[BatchClientTypes.ResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [BatchClientTypes.ResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
        let linuxParametersDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LinuxParameters.self, forKey: .linuxParameters)
        linuxParameters = linuxParametersDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LogConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let secretsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Secret?].self, forKey: .secrets)
        var secretsDecoded0:[BatchClientTypes.Secret]? = nil
        if let secretsContainer = secretsContainer {
            secretsDecoded0 = [BatchClientTypes.Secret]()
            for structure0 in secretsContainer {
                if let structure0 = structure0 {
                    secretsDecoded0?.append(structure0)
                }
            }
        }
        secrets = secretsDecoded0
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let fargatePlatformConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.FargatePlatformConfiguration.self, forKey: .fargatePlatformConfiguration)
        fargatePlatformConfiguration = fargatePlatformConfigurationDecoded
    }
}

extension BatchClientTypes.ContainerProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerProperties(command: \(Swift.String(describing: command)), environment: \(Swift.String(describing: environment)), executionRoleArn: \(Swift.String(describing: executionRoleArn)), fargatePlatformConfiguration: \(Swift.String(describing: fargatePlatformConfiguration)), image: \(Swift.String(describing: image)), instanceType: \(Swift.String(describing: instanceType)), jobRoleArn: \(Swift.String(describing: jobRoleArn)), linuxParameters: \(Swift.String(describing: linuxParameters)), logConfiguration: \(Swift.String(describing: logConfiguration)), memory: \(Swift.String(describing: memory)), mountPoints: \(Swift.String(describing: mountPoints)), networkConfiguration: \(Swift.String(describing: networkConfiguration)), privileged: \(Swift.String(describing: privileged)), readonlyRootFilesystem: \(Swift.String(describing: readonlyRootFilesystem)), resourceRequirements: \(Swift.String(describing: resourceRequirements)), secrets: \(Swift.String(describing: secrets)), ulimits: \(Swift.String(describing: ulimits)), user: \(Swift.String(describing: user)), vcpus: \(Swift.String(describing: vcpus)), volumes: \(Swift.String(describing: volumes)))"}
}

extension BatchClientTypes {
    /// <p>Container properties are used in job definitions to describe the container that's launched as part of a
    ///    job.</p>
    public struct ContainerProperties: Swift.Equatable {
        /// <p>The command that's passed to the container. This parameter maps to <code>Cmd</code> in the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>COMMAND</code> parameter to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. For more information, see <a href="https://docs.docker.com/engine/reference/builder/#cmd">https://docs.docker.com/engine/reference/builder/#cmd</a>.</p>
        public let command: [Swift.String]?
        /// <p>The environment variables to pass to a container. This parameter maps to <code>Env</code> in the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--env</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        ///          <important>
        ///             <p>We don't recommend using plaintext environment variables for sensitive information, such as credential
        ///     data.</p>
        ///          </important>
        ///          <note>
        ///             <p>Environment variables must not start with <code>AWS_BATCH</code>; this naming
        ///  convention is reserved for variables that are set by the AWS Batch service.</p>
        ///          </note>
        public let environment: [BatchClientTypes.KeyValuePair]?
        /// <p>The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must
        ///    provide an execution role. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html">AWS Batch execution IAM role</a> in the
        ///     <i>AWS Batch User Guide</i>.</p>
        public let executionRoleArn: Swift.String?
        /// <p>The platform configuration for jobs running on Fargate resources. Jobs running on EC2 resources must not
        ///    specify this parameter.</p>
        public let fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration?
        /// <p>The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker
        ///    Hub registry are available by default. Other repositories are specified with
        ///      <code>
        ///                <i>repository-url</i>/<i>image</i>:<i>tag</i>
        ///             </code>.
        ///    Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons,
        ///  periods, forward slashes, and number signs are allowed. This parameter maps to <code>Image</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of
        ///    the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>IMAGE</code> parameter of <a href="https://docs.docker.com/engine/reference/run/">docker
        ///    run</a>.</p>
        ///          <note>
        ///             <p>Docker image architecture must match the processor architecture of the compute resources that they're scheduled
        ///     on. For example, ARM-based Docker images can only run on ARM-based compute resources.</p>
        ///          </note>
        ///          <ul>
        ///             <li>
        ///                <p>Images in Amazon ECR repositories use the full registry and repository URI (for example,
        ///       <code>012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name></code>).</p>
        ///             </li>
        ///             <li>
        ///                <p>Images in official repositories on Docker Hub use a single name (for example, <code>ubuntu</code> or
        ///       <code>mongo</code>).</p>
        ///             </li>
        ///             <li>
        ///                <p>Images in other repositories on Docker Hub are qualified with an organization name (for example,
        ///       <code>amazon/amazon-ecs-agent</code>).</p>
        ///             </li>
        ///             <li>
        ///                <p>Images in other online repositories are qualified further by a domain name (for example,
        ///       <code>quay.io/assemblyline/ubuntu</code>).</p>
        ///             </li>
        ///          </ul>
        public let image: Swift.String?
        /// <p>The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use
        ///    the same instance type.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to single-node container jobs or for jobs that run on Fargate resources and
        ///     shouldn't be provided.</p>
        ///          </note>
        public let instanceType: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions. For more information, see
        ///     <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM Roles for Tasks</a>
        ///    in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
        public let jobRoleArn: Swift.String?
        /// <p>Linux-specific modifications that are applied to the container, such as details for device mappings.</p>
        public let linuxParameters: BatchClientTypes.LinuxParameters?
        /// <p>The log configuration specification for the container.</p>
        ///          <p>This parameter maps to <code>LogConfig</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--log-driver</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.
        ///    By default, containers use the same logging driver that the Docker daemon uses. However the container might use a
        ///    different logging driver than the Docker daemon by specifying a log driver with this parameter in the container
        ///    definition. To use a different logging driver for a container, the log system must be configured properly on the
        ///    container instance (or on a different log server for remote logging options). For more information on the options for
        ///    different supported log drivers, see <a href="https://docs.docker.com/engine/admin/logging/overview/">Configure
        ///     logging drivers</a> in the Docker documentation.</p>
        ///          <note>
        ///             <p>AWS Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the <a>LogConfiguration</a> data type).</p>
        ///          </note>
        ///          <p>This parameter requires version 1.18 of the Docker Remote API or greater on your
        ///  container instance. To check the Docker Remote API version on your container instance, log into your
        ///  container instance and run the following command: <code>sudo docker version | grep "Server API version"</code>
        ///          </p>
        ///          <note>
        ///             <p>The Amazon ECS container agent running on a container instance must register the logging drivers available on that
        ///     instance with the <code>ECS_AVAILABLE_LOGGING_DRIVERS</code> environment variable before containers placed on that
        ///     instance can use these log configuration options. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html">Amazon ECS Container Agent Configuration</a> in the
        ///      <i>Amazon Elastic Container Service Developer Guide</i>.</p>
        ///          </note>
        public let logConfiguration: BatchClientTypes.LogConfiguration?
        /// <p>This parameter indicates the memory hard limit (in MiB) for a container. If your container attempts to exceed
        ///    the specified number, it is terminated. You must specify at least 4 MiB of memory for a job using this parameter. The
        ///    memory hard limit can be specified in several places. It must be specified for each node at least once.</p>
        ///          <p>This parameter maps to <code>Memory</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--memory</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker
        ///    run</a>.</p>
        ///          <p>This parameter is supported on EC2 resources but isn't supported on Fargate resources. For Fargate
        ///    resources, you should specify the memory requirement using <code>resourceRequirement</code>. You can do this for EC2
        ///    resources.</p>
        ///          <note>
        ///             <p>If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a
        ///     particular instance type, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html">Memory
        ///      Management</a> in the <i>AWS Batch User Guide</i>.</p>
        ///          </note>
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public let memory: Swift.Int
        /// <p>The mount points for data volumes in your container. This parameter maps to <code>Volumes</code> in the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--volume</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        public let mountPoints: [BatchClientTypes.MountPoint]?
        /// <p>The network configuration for jobs running on Fargate resources. Jobs running on EC2 resources must not
        ///    specify this parameter.</p>
        public let networkConfiguration: BatchClientTypes.NetworkConfiguration?
        /// <p>When this parameter is true, the container is given elevated permissions on the host container instance (similar
        ///    to the <code>root</code> user). This parameter maps to <code>Privileged</code> in the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--privileged</code> option to
        ///     <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. The default value is false.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources and shouldn't be provided, or specified
        ///     as false.</p>
        ///          </note>
        public let privileged: Swift.Bool
        /// <p>When this parameter is true, the container is given read-only access to its root file system. This parameter
        ///    maps to <code>ReadonlyRootfs</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and
        ///    the <code>--read-only</code> option to <code>docker run</code>.</p>
        public let readonlyRootFilesystem: Swift.Bool
        /// <p>The type and amount of resources to assign to a container. The supported resources include <code>GPU</code>,
        ///     <code>MEMORY</code>, and <code>VCPU</code>.</p>
        public let resourceRequirements: [BatchClientTypes.ResourceRequirement]?
        /// <p>The secrets for the container. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html">Specifying sensitive data</a> in the
        ///     <i>AWS Batch User Guide</i>.</p>
        public let secrets: [BatchClientTypes.Secret]?
        /// <p>A list of <code>ulimits</code> to set in the container. This parameter maps to <code>Ulimits</code> in the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--ulimit</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources and shouldn't be provided.</p>
        ///          </note>
        public let ulimits: [BatchClientTypes.Ulimit]?
        /// <p>The user name to use inside the container. This parameter maps to <code>User</code> in the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--user</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        public let user: Swift.String?
        /// <p>The number of vCPUs reserved for the job. Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to
        ///     <code>CpuShares</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the
        ///     <code>--cpu-shares</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. The number of vCPUs must
        ///    be specified but can be be specified in several places. You must specify it at least once for each node.</p>
        ///          <p>This parameter is supported on EC2 resources but isn't supported for jobs that run on Fargate resources. For
        ///    these resources, use <code>resourceRequirement</code> instead. You can use this parameter or
        ///     <code>resourceRequirements</code> structure but not both.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources and shouldn't be provided. For jobs that
        ///     run on Fargate resources, you must specify the vCPU requirement for the job using
        ///      <code>resourceRequirements</code>.</p>
        ///          </note>
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public let vcpus: Swift.Int
        /// <p>A list of data volumes used in a job.</p>
        public let volumes: [BatchClientTypes.Volume]?

        public init (
            command: [Swift.String]? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            executionRoleArn: Swift.String? = nil,
            fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration? = nil,
            image: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            jobRoleArn: Swift.String? = nil,
            linuxParameters: BatchClientTypes.LinuxParameters? = nil,
            logConfiguration: BatchClientTypes.LogConfiguration? = nil,
            memory: Swift.Int = 0,
            mountPoints: [BatchClientTypes.MountPoint]? = nil,
            networkConfiguration: BatchClientTypes.NetworkConfiguration? = nil,
            privileged: Swift.Bool = false,
            readonlyRootFilesystem: Swift.Bool = false,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil,
            secrets: [BatchClientTypes.Secret]? = nil,
            ulimits: [BatchClientTypes.Ulimit]? = nil,
            user: Swift.String? = nil,
            vcpus: Swift.Int = 0,
            volumes: [BatchClientTypes.Volume]? = nil
        )
        {
            self.command = command
            self.environment = environment
            self.executionRoleArn = executionRoleArn
            self.fargatePlatformConfiguration = fargatePlatformConfiguration
            self.image = image
            self.instanceType = instanceType
            self.jobRoleArn = jobRoleArn
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.memory = memory
            self.mountPoints = mountPoints
            self.networkConfiguration = networkConfiguration
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.ulimits = ulimits
            self.user = user
            self.vcpus = vcpus
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes.ContainerSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exitCode
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if exitCode != 0 {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exitCodeDecoded = try containerValues.decode(Swift.Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension BatchClientTypes.ContainerSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerSummary(exitCode: \(Swift.String(describing: exitCode)), reason: \(Swift.String(describing: reason)))"}
}

extension BatchClientTypes {
    /// <p>An object representing summary details of a container within a job.</p>
    public struct ContainerSummary: Swift.Equatable {
        /// <p>The exit code to return upon completion.</p>
        public let exitCode: Swift.Int
        /// <p>A short (255 max characters) human-readable string to provide additional details about a running or stopped
        ///    container.</p>
        public let reason: Swift.String?

        public init (
            exitCode: Swift.Int = 0,
            reason: Swift.String? = nil
        )
        {
            self.exitCode = exitCode
            self.reason = reason
        }
    }

}

public struct CreateComputeEnvironmentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateComputeEnvironmentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateComputeEnvironmentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateComputeEnvironmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateComputeEnvironmentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateComputeEnvironmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateComputeEnvironmentOutputError>
}

extension CreateComputeEnvironmentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateComputeEnvironmentInput(computeEnvironmentName: \(Swift.String(describing: computeEnvironmentName)), computeResources: \(Swift.String(describing: computeResources)), serviceRole: \(Swift.String(describing: serviceRole)), state: \(Swift.String(describing: state)), tags: \(Swift.String(describing: tags)), type: \(Swift.String(describing: type)))"}
}

extension CreateComputeEnvironmentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentName
        case computeResources
        case serviceRole
        case state
        case tags
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentName = computeEnvironmentName {
            try encodeContainer.encode(computeEnvironmentName, forKey: .computeEnvironmentName)
        }
        if let computeResources = computeResources {
            try encodeContainer.encode(computeResources, forKey: .computeResources)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct CreateComputeEnvironmentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateComputeEnvironmentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateComputeEnvironmentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateComputeEnvironmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateComputeEnvironmentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateComputeEnvironmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateComputeEnvironmentOutputError>
}

public struct CreateComputeEnvironmentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateComputeEnvironmentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateComputeEnvironmentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateComputeEnvironmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateComputeEnvironmentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateComputeEnvironmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateComputeEnvironmentOutputError>
}

/// <p>Contains the parameters for <code>CreateComputeEnvironment</code>.</p>
public struct CreateComputeEnvironmentInput: Swift.Equatable {
    /// <p>The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and
    ///  underscores are allowed.</p>
    public let computeEnvironmentName: Swift.String?
    /// <p>Details about the compute resources managed by the compute environment. This parameter is required for managed
    ///    compute environments. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the <i>AWS Batch User Guide</i>.</p>
    public let computeResources: BatchClientTypes.ComputeResource?
    /// <p>The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf. For
    ///    more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html">AWS Batch service IAM
    ///     role</a> in the <i>AWS Batch User Guide</i>.</p>
    ///          <important>
    ///             <p>If your account has already created the AWS Batch service-linked role, that role is used by default for your
    ///     compute environment unless you specify a role here. If the AWS Batch service-linked role does not exist in your
    ///     account, and no role is specified here, the service will try to create the AWS Batch service-linked role in your
    ///     account.</p>
    ///          </important>
    ///          <p>If your specified role has a path other than <code>/</code>, then you must specify either the full role ARN
    ///    (recommended) or prefix the role name with the path. For example, if a role with the name <code>bar</code> has a path
    ///    of <code>/foo/</code> then you would specify <code>/foo/bar</code> as the role name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names">Friendly names
    ///     and paths</a> in the <i>IAM User Guide</i>.</p>
    ///          <note>
    ///             <p>Depending on how you created your AWS Batch service role, its ARN might contain the <code>service-role</code>
    ///     path prefix. When you only specify the name of the service role, AWS Batch assumes that your ARN doesn't use the
    ///      <code>service-role</code> path prefix. Because of this, we recommend that you specify the full ARN of your service
    ///     role when you create compute environments.</p>
    ///          </note>
    public let serviceRole: Swift.String?
    /// <p>The state of the compute environment. If the state is <code>ENABLED</code>, then the compute environment accepts
    ///    jobs from a queue and can scale out automatically based on queues.</p>
    ///          <p>If the state is <code>ENABLED</code>, then the AWS Batch scheduler can attempt to place jobs from an associated
    ///    job queue on the compute resources within the environment. If the compute environment is managed, then it can scale
    ///    its instances out or in automatically, based on the job queue demand.</p>
    ///          <p>If the state is <code>DISABLED</code>, then the AWS Batch scheduler doesn't attempt to place jobs within the
    ///    environment. Jobs in a <code>STARTING</code> or <code>RUNNING</code> state continue to progress normally. Managed
    ///    compute environments in the <code>DISABLED</code> state don't scale out. However, they scale in to
    ///     <code>minvCpus</code> value after instances become idle.</p>
    public let state: BatchClientTypes.CEState?
    /// <p>The tags that you apply to the compute environment to help you categorize and organize your resources. Each tag
    ///    consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> in <i>AWS General
    ///    Reference</i>.</p>
    ///          <p>These tags can be updated or removed using the <a href="https://docs.aws.amazon.com/batch/latest/APIReference/API_TagResource.html">TagResource</a> and <a href="https://docs.aws.amazon.com/batch/latest/APIReference/API_UntagResource.html">UntagResource</a> API operations. These tags don't
    ///    propagate to the underlying compute resources.</p>
    public let tags: [Swift.String:Swift.String]?
    /// <p>The type of the compute environment: <code>MANAGED</code> or <code>UNMANAGED</code>. For more information, see
    ///     <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the
    ///     <i>AWS Batch User Guide</i>.</p>
    public let type: BatchClientTypes.CEType?

    public init (
        computeEnvironmentName: Swift.String? = nil,
        computeResources: BatchClientTypes.ComputeResource? = nil,
        serviceRole: Swift.String? = nil,
        state: BatchClientTypes.CEState? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        type: BatchClientTypes.CEType? = nil
    )
    {
        self.computeEnvironmentName = computeEnvironmentName
        self.computeResources = computeResources
        self.serviceRole = serviceRole
        self.state = state
        self.tags = tags
        self.type = type
    }
}

struct CreateComputeEnvironmentInputBody: Swift.Equatable {
    public let computeEnvironmentName: Swift.String?
    public let type: BatchClientTypes.CEType?
    public let state: BatchClientTypes.CEState?
    public let computeResources: BatchClientTypes.ComputeResource?
    public let serviceRole: Swift.String?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateComputeEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentName
        case computeResources
        case serviceRole
        case state
        case tags
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEType.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEState.self, forKey: .state)
        state = stateDecoded
        let computeResourcesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ComputeResource.self, forKey: .computeResources)
        computeResources = computeResourcesDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateComputeEnvironmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateComputeEnvironmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateComputeEnvironmentOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateComputeEnvironmentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateComputeEnvironmentOutputResponse(computeEnvironmentArn: \(Swift.String(describing: computeEnvironmentArn)), computeEnvironmentName: \(Swift.String(describing: computeEnvironmentName)))"}
}

extension CreateComputeEnvironmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateComputeEnvironmentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeEnvironmentArn = output.computeEnvironmentArn
            self.computeEnvironmentName = output.computeEnvironmentName
        } else {
            self.computeEnvironmentArn = nil
            self.computeEnvironmentName = nil
        }
    }
}

public struct CreateComputeEnvironmentOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
    public let computeEnvironmentArn: Swift.String?
    /// <p>The name of the compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and
    ///  underscores are allowed.</p>
    public let computeEnvironmentName: Swift.String?

    public init (
        computeEnvironmentArn: Swift.String? = nil,
        computeEnvironmentName: Swift.String? = nil
    )
    {
        self.computeEnvironmentArn = computeEnvironmentArn
        self.computeEnvironmentName = computeEnvironmentName
    }
}

struct CreateComputeEnvironmentOutputResponseBody: Swift.Equatable {
    public let computeEnvironmentName: Swift.String?
    public let computeEnvironmentArn: Swift.String?
}

extension CreateComputeEnvironmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentArn
        case computeEnvironmentName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let computeEnvironmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentArn)
        computeEnvironmentArn = computeEnvironmentArnDecoded
    }
}

public struct CreateJobQueueInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateJobQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateJobQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateJobQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateJobQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateJobQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateJobQueueOutputError>
}

extension CreateJobQueueInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateJobQueueInput(computeEnvironmentOrder: \(Swift.String(describing: computeEnvironmentOrder)), jobQueueName: \(Swift.String(describing: jobQueueName)), priority: \(Swift.String(describing: priority)), state: \(Swift.String(describing: state)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateJobQueueInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentOrder
        case jobQueueName
        case priority
        case state
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentOrder = computeEnvironmentOrder {
            var computeEnvironmentOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeEnvironmentOrder)
            for computeenvironmentorders0 in computeEnvironmentOrder {
                try computeEnvironmentOrderContainer.encode(computeenvironmentorders0)
            }
        }
        if let jobQueueName = jobQueueName {
            try encodeContainer.encode(jobQueueName, forKey: .jobQueueName)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateJobQueueInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateJobQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateJobQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateJobQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateJobQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateJobQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateJobQueueOutputError>
}

public struct CreateJobQueueInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateJobQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateJobQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateJobQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateJobQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateJobQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateJobQueueOutputError>
}

/// <p>Contains the parameters for <code>CreateJobQueue</code>.</p>
public struct CreateJobQueueInput: Swift.Equatable {
    /// <p>The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler
    ///    uses this parameter to determine which compute environment should run a specific job. Compute environments must be in
    ///    the <code>VALID</code> state before you can associate them with a job queue. You can associate up to three compute
    ///    environments with a job queue. All of the compute environments must be either EC2 (<code>EC2</code> or
    ///     <code>SPOT</code>) or Fargate (<code>FARGATE</code> or <code>FARGATE_SPOT</code>); EC2 and Fargate compute
    ///    environments can't be mixed.</p>
    ///          <note>
    ///             <p>All compute environments that are associated with a job queue must share the same architecture. AWS Batch doesn't
    ///     support mixing compute environment architecture types in a single job queue.</p>
    ///          </note>
    public let computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
    /// <p>The name of the job queue. Up to 128 letters (uppercase and lowercase), numbers, and underscores are
    ///    allowed.</p>
    public let jobQueueName: Swift.String?
    /// <p>The priority of the job queue. Job queues with a higher priority (or a higher integer value for the
    ///     <code>priority</code> parameter) are evaluated first when associated with the same compute environment. Priority is
    ///    determined in descending order. For example, a job queue with a priority value of <code>10</code> is given scheduling
    ///    preference over a job queue with a priority value of <code>1</code>. All of the compute environments must be either
    ///    EC2 (<code>EC2</code> or <code>SPOT</code>) or Fargate (<code>FARGATE</code> or <code>FARGATE_SPOT</code>); EC2 and
    ///    Fargate compute environments cannot be mixed.</p>
    public let priority: Swift.Int
    /// <p>The state of the job queue. If the job queue state is <code>ENABLED</code>, it is able to accept jobs. If the
    ///    job queue state is <code>DISABLED</code>, new jobs can't be added to the queue, but jobs already in the queue can
    ///    finish.</p>
    public let state: BatchClientTypes.JQState?
    /// <p>The tags that you apply to the job queue to help you categorize and organize your resources. Each tag consists
    ///    of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your AWS Batch resources</a> in <i>AWS Batch User Guide</i>.</p>
    public let tags: [Swift.String:Swift.String]?

    public init (
        computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]? = nil,
        jobQueueName: Swift.String? = nil,
        priority: Swift.Int = 0,
        state: BatchClientTypes.JQState? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.computeEnvironmentOrder = computeEnvironmentOrder
        self.jobQueueName = jobQueueName
        self.priority = priority
        self.state = state
        self.tags = tags
    }
}

struct CreateJobQueueInputBody: Swift.Equatable {
    public let jobQueueName: Swift.String?
    public let state: BatchClientTypes.JQState?
    public let priority: Swift.Int
    public let computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateJobQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentOrder
        case jobQueueName
        case priority
        case state
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueName)
        jobQueueName = jobQueueNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JQState.self, forKey: .state)
        state = stateDecoded
        let priorityDecoded = try containerValues.decode(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let computeEnvironmentOrderContainer = try containerValues.decodeIfPresent([BatchClientTypes.ComputeEnvironmentOrder?].self, forKey: .computeEnvironmentOrder)
        var computeEnvironmentOrderDecoded0:[BatchClientTypes.ComputeEnvironmentOrder]? = nil
        if let computeEnvironmentOrderContainer = computeEnvironmentOrderContainer {
            computeEnvironmentOrderDecoded0 = [BatchClientTypes.ComputeEnvironmentOrder]()
            for structure0 in computeEnvironmentOrderContainer {
                if let structure0 = structure0 {
                    computeEnvironmentOrderDecoded0?.append(structure0)
                }
            }
        }
        computeEnvironmentOrder = computeEnvironmentOrderDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateJobQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateJobQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateJobQueueOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateJobQueueOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateJobQueueOutputResponse(jobQueueArn: \(Swift.String(describing: jobQueueArn)), jobQueueName: \(Swift.String(describing: jobQueueName)))"}
}

extension CreateJobQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateJobQueueOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobQueueArn = output.jobQueueArn
            self.jobQueueName = output.jobQueueName
        } else {
            self.jobQueueArn = nil
            self.jobQueueName = nil
        }
    }
}

public struct CreateJobQueueOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
    public let jobQueueArn: Swift.String?
    /// <p>The name of the job queue.</p>
    public let jobQueueName: Swift.String?

    public init (
        jobQueueArn: Swift.String? = nil,
        jobQueueName: Swift.String? = nil
    )
    {
        self.jobQueueArn = jobQueueArn
        self.jobQueueName = jobQueueName
    }
}

struct CreateJobQueueOutputResponseBody: Swift.Equatable {
    public let jobQueueName: Swift.String?
    public let jobQueueArn: Swift.String?
}

extension CreateJobQueueOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueueArn
        case jobQueueName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueName)
        jobQueueName = jobQueueNameDecoded
        let jobQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueArn)
        jobQueueArn = jobQueueArnDecoded
    }
}

public struct DeleteComputeEnvironmentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteComputeEnvironmentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteComputeEnvironmentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteComputeEnvironmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteComputeEnvironmentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteComputeEnvironmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteComputeEnvironmentOutputError>
}

extension DeleteComputeEnvironmentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteComputeEnvironmentInput(computeEnvironment: \(Swift.String(describing: computeEnvironment)))"}
}

extension DeleteComputeEnvironmentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironment
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironment = computeEnvironment {
            try encodeContainer.encode(computeEnvironment, forKey: .computeEnvironment)
        }
    }
}

public struct DeleteComputeEnvironmentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteComputeEnvironmentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteComputeEnvironmentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteComputeEnvironmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteComputeEnvironmentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteComputeEnvironmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteComputeEnvironmentOutputError>
}

public struct DeleteComputeEnvironmentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteComputeEnvironmentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteComputeEnvironmentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteComputeEnvironmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteComputeEnvironmentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteComputeEnvironmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteComputeEnvironmentOutputError>
}

/// <p>Contains the parameters for <code>DeleteComputeEnvironment</code>.</p>
public struct DeleteComputeEnvironmentInput: Swift.Equatable {
    /// <p>The name or Amazon Resource Name (ARN) of the compute environment to delete.</p>
    public let computeEnvironment: Swift.String?

    public init (
        computeEnvironment: Swift.String? = nil
    )
    {
        self.computeEnvironment = computeEnvironment
    }
}

struct DeleteComputeEnvironmentInputBody: Swift.Equatable {
    public let computeEnvironment: Swift.String?
}

extension DeleteComputeEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironment
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironment)
        computeEnvironment = computeEnvironmentDecoded
    }
}

extension DeleteComputeEnvironmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteComputeEnvironmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteComputeEnvironmentOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteComputeEnvironmentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteComputeEnvironmentOutputResponse()"}
}

extension DeleteComputeEnvironmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteComputeEnvironmentOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteComputeEnvironmentOutputResponseBody: Swift.Equatable {
}

extension DeleteComputeEnvironmentOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteJobQueueInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteJobQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteJobQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteJobQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteJobQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteJobQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteJobQueueOutputError>
}

extension DeleteJobQueueInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteJobQueueInput(jobQueue: \(Swift.String(describing: jobQueue)))"}
}

extension DeleteJobQueueInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobQueue = jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
    }
}

public struct DeleteJobQueueInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteJobQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteJobQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteJobQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteJobQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteJobQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteJobQueueOutputError>
}

public struct DeleteJobQueueInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteJobQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteJobQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteJobQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteJobQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteJobQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteJobQueueOutputError>
}

/// <p>Contains the parameters for <code>DeleteJobQueue</code>.</p>
public struct DeleteJobQueueInput: Swift.Equatable {
    /// <p>The short name or full Amazon Resource Name (ARN) of the queue to delete.</p>
    public let jobQueue: Swift.String?

    public init (
        jobQueue: Swift.String? = nil
    )
    {
        self.jobQueue = jobQueue
    }
}

struct DeleteJobQueueInputBody: Swift.Equatable {
    public let jobQueue: Swift.String?
}

extension DeleteJobQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueue
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
    }
}

extension DeleteJobQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteJobQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteJobQueueOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteJobQueueOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteJobQueueOutputResponse()"}
}

extension DeleteJobQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteJobQueueOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteJobQueueOutputResponseBody: Swift.Equatable {
}

extension DeleteJobQueueOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeregisterJobDefinitionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterJobDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterJobDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterJobDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterJobDefinitionOutputError>
}

extension DeregisterJobDefinitionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeregisterJobDefinitionInput(jobDefinition: \(Swift.String(describing: jobDefinition)))"}
}

extension DeregisterJobDefinitionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinition
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinition = jobDefinition {
            try encodeContainer.encode(jobDefinition, forKey: .jobDefinition)
        }
    }
}

public struct DeregisterJobDefinitionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterJobDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterJobDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterJobDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterJobDefinitionOutputError>
}

public struct DeregisterJobDefinitionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterJobDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterJobDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterJobDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterJobDefinitionOutputError>
}

public struct DeregisterJobDefinitionInput: Swift.Equatable {
    /// <p>The name and revision (<code>name:revision</code>) or full Amazon Resource Name (ARN) of the job definition to deregister.</p>
    public let jobDefinition: Swift.String?

    public init (
        jobDefinition: Swift.String? = nil
    )
    {
        self.jobDefinition = jobDefinition
    }
}

struct DeregisterJobDefinitionInputBody: Swift.Equatable {
    public let jobDefinition: Swift.String?
}

extension DeregisterJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinition
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinition)
        jobDefinition = jobDefinitionDecoded
    }
}

extension DeregisterJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeregisterJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterJobDefinitionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeregisterJobDefinitionOutputResponse()"}
}

extension DeregisterJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterJobDefinitionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeregisterJobDefinitionOutputResponseBody: Swift.Equatable {
}

extension DeregisterJobDefinitionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeComputeEnvironmentsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeComputeEnvironmentsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeComputeEnvironmentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeComputeEnvironmentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeComputeEnvironmentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeComputeEnvironmentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeComputeEnvironmentsOutputError>
}

extension DescribeComputeEnvironmentsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeComputeEnvironmentsInput(computeEnvironments: \(Swift.String(describing: computeEnvironments)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeComputeEnvironmentsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironments
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironments = computeEnvironments {
            var computeEnvironmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeEnvironments)
            for stringlist0 in computeEnvironments {
                try computeEnvironmentsContainer.encode(stringlist0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeComputeEnvironmentsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeComputeEnvironmentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeComputeEnvironmentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeComputeEnvironmentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeComputeEnvironmentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeComputeEnvironmentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeComputeEnvironmentsOutputError>
}

public struct DescribeComputeEnvironmentsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeComputeEnvironmentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeComputeEnvironmentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeComputeEnvironmentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeComputeEnvironmentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeComputeEnvironmentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeComputeEnvironmentsOutputError>
}

/// <p>Contains the parameters for <code>DescribeComputeEnvironments</code>.</p>
public struct DescribeComputeEnvironmentsInput: Swift.Equatable {
    /// <p>A list of up to 100 compute environment names or full Amazon Resource Name (ARN) entries.</p>
    public let computeEnvironments: [Swift.String]?
    /// <p>The maximum number of cluster results returned by <code>DescribeComputeEnvironments</code> in paginated output.
    ///    When this parameter is used, <code>DescribeComputeEnvironments</code> only returns <code>maxResults</code> results in
    ///    a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can
    ///    be seen by sending another <code>DescribeComputeEnvironments</code> request with the returned <code>nextToken</code>
    ///    value. This value can be between 1 and 100. If this parameter isn't used, then
    ///     <code>DescribeComputeEnvironments</code> returns up to 100 results and a <code>nextToken</code>
    ///    value if applicable.</p>
    public let maxResults: Swift.Int
    /// <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeComputeEnvironments</code>
    ///    request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination
    ///    continues from the end of the previous results that returned the <code>nextToken</code> value. This value is
    ///     <code>null</code> when there are no more results to return.</p>
    ///          <note>
    ///             <p>This token should be treated as an opaque identifier that's only used to
    ///  retrieve the next items in a list and not for other programmatic purposes.</p>
    ///          </note>
    public let nextToken: Swift.String?

    public init (
        computeEnvironments: [Swift.String]? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.computeEnvironments = computeEnvironments
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeComputeEnvironmentsInputBody: Swift.Equatable {
    public let computeEnvironments: [Swift.String]?
    public let maxResults: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeComputeEnvironmentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironments
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .computeEnvironments)
        var computeEnvironmentsDecoded0:[Swift.String]? = nil
        if let computeEnvironmentsContainer = computeEnvironmentsContainer {
            computeEnvironmentsDecoded0 = [Swift.String]()
            for string0 in computeEnvironmentsContainer {
                if let string0 = string0 {
                    computeEnvironmentsDecoded0?.append(string0)
                }
            }
        }
        computeEnvironments = computeEnvironmentsDecoded0
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeComputeEnvironmentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeComputeEnvironmentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeComputeEnvironmentsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeComputeEnvironmentsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeComputeEnvironmentsOutputResponse(computeEnvironments: \(Swift.String(describing: computeEnvironments)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeComputeEnvironmentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeComputeEnvironmentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeEnvironments = output.computeEnvironments
            self.nextToken = output.nextToken
        } else {
            self.computeEnvironments = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeComputeEnvironmentsOutputResponse: Swift.Equatable {
    /// <p>The list of compute environments.</p>
    public let computeEnvironments: [BatchClientTypes.ComputeEnvironmentDetail]?
    /// <p>The <code>nextToken</code> value to include in a future <code>DescribeComputeEnvironments</code> request. When
    ///    the results of a <code>DescribeJobDefinitions</code> request exceed <code>maxResults</code>, this value can be used
    ///    to retrieve the next page of results. This value is <code>null</code> when there are no more results to
    ///    return.</p>
    public let nextToken: Swift.String?

    public init (
        computeEnvironments: [BatchClientTypes.ComputeEnvironmentDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.computeEnvironments = computeEnvironments
        self.nextToken = nextToken
    }
}

struct DescribeComputeEnvironmentsOutputResponseBody: Swift.Equatable {
    public let computeEnvironments: [BatchClientTypes.ComputeEnvironmentDetail]?
    public let nextToken: Swift.String?
}

extension DescribeComputeEnvironmentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironments
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentsContainer = try containerValues.decodeIfPresent([BatchClientTypes.ComputeEnvironmentDetail?].self, forKey: .computeEnvironments)
        var computeEnvironmentsDecoded0:[BatchClientTypes.ComputeEnvironmentDetail]? = nil
        if let computeEnvironmentsContainer = computeEnvironmentsContainer {
            computeEnvironmentsDecoded0 = [BatchClientTypes.ComputeEnvironmentDetail]()
            for structure0 in computeEnvironmentsContainer {
                if let structure0 = structure0 {
                    computeEnvironmentsDecoded0?.append(structure0)
                }
            }
        }
        computeEnvironments = computeEnvironmentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeJobDefinitionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobDefinitionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobDefinitionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobDefinitionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobDefinitionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobDefinitionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobDefinitionsOutputError>
}

extension DescribeJobDefinitionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobDefinitionsInput(jobDefinitionName: \(Swift.String(describing: jobDefinitionName)), jobDefinitions: \(Swift.String(describing: jobDefinitions)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension DescribeJobDefinitionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName
        case jobDefinitions
        case maxResults
        case nextToken
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let jobDefinitions = jobDefinitions {
            var jobDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobDefinitions)
            for stringlist0 in jobDefinitions {
                try jobDefinitionsContainer.encode(stringlist0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }
}

public struct DescribeJobDefinitionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobDefinitionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobDefinitionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobDefinitionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobDefinitionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobDefinitionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobDefinitionsOutputError>
}

public struct DescribeJobDefinitionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobDefinitionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobDefinitionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobDefinitionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobDefinitionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobDefinitionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobDefinitionsOutputError>
}

/// <p>Contains the parameters for <code>DescribeJobDefinitions</code>.</p>
public struct DescribeJobDefinitionsInput: Swift.Equatable {
    /// <p>The name of the job definition to describe.</p>
    public let jobDefinitionName: Swift.String?
    /// <p>A list of up to 100 job definition names or full Amazon Resource Name (ARN) entries.</p>
    public let jobDefinitions: [Swift.String]?
    /// <p>The maximum number of results returned by <code>DescribeJobDefinitions</code> in paginated output. When this
    ///    parameter is used, <code>DescribeJobDefinitions</code> only returns <code>maxResults</code> results in a single page
    ///    and a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending
    ///    another <code>DescribeJobDefinitions</code> request with the returned <code>nextToken</code> value. This value can be
    ///    between 1 and 100. If this parameter isn't used, then
    ///     <code>DescribeJobDefinitions</code> returns up to 100 results and a <code>nextToken</code> value
    ///    if applicable.</p>
    public let maxResults: Swift.Int
    /// <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeJobDefinitions</code> request
    ///    where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues
    ///    from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code>
    ///    when there are no more results to return.</p>
    ///          <note>
    ///             <p>This token should be treated as an opaque identifier that's only used to
    ///  retrieve the next items in a list and not for other programmatic purposes.</p>
    ///          </note>
    public let nextToken: Swift.String?
    /// <p>The status used to filter job definitions.</p>
    public let status: Swift.String?

    public init (
        jobDefinitionName: Swift.String? = nil,
        jobDefinitions: [Swift.String]? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
        self.jobDefinitions = jobDefinitions
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct DescribeJobDefinitionsInputBody: Swift.Equatable {
    public let jobDefinitions: [Swift.String]?
    public let maxResults: Swift.Int
    public let jobDefinitionName: Swift.String?
    public let status: Swift.String?
    public let nextToken: Swift.String?
}

extension DescribeJobDefinitionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName
        case jobDefinitions
        case maxResults
        case nextToken
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobDefinitions)
        var jobDefinitionsDecoded0:[Swift.String]? = nil
        if let jobDefinitionsContainer = jobDefinitionsContainer {
            jobDefinitionsDecoded0 = [Swift.String]()
            for string0 in jobDefinitionsContainer {
                if let string0 = string0 {
                    jobDefinitionsDecoded0?.append(string0)
                }
            }
        }
        jobDefinitions = jobDefinitionsDecoded0
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeJobDefinitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobDefinitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeJobDefinitionsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobDefinitionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobDefinitionsOutputResponse(jobDefinitions: \(Swift.String(describing: jobDefinitions)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeJobDefinitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeJobDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitions = output.jobDefinitions
            self.nextToken = output.nextToken
        } else {
            self.jobDefinitions = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeJobDefinitionsOutputResponse: Swift.Equatable {
    /// <p>The list of job definitions.</p>
    public let jobDefinitions: [BatchClientTypes.JobDefinition]?
    /// <p>The <code>nextToken</code> value to include in a future <code>DescribeJobDefinitions</code> request. When the
    ///    results of a <code>DescribeJobDefinitions</code> request exceed <code>maxResults</code>, this value can be used to
    ///    retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    public let nextToken: Swift.String?

    public init (
        jobDefinitions: [BatchClientTypes.JobDefinition]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobDefinitions = jobDefinitions
        self.nextToken = nextToken
    }
}

struct DescribeJobDefinitionsOutputResponseBody: Swift.Equatable {
    public let jobDefinitions: [BatchClientTypes.JobDefinition]?
    public let nextToken: Swift.String?
}

extension DescribeJobDefinitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitions
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionsContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobDefinition?].self, forKey: .jobDefinitions)
        var jobDefinitionsDecoded0:[BatchClientTypes.JobDefinition]? = nil
        if let jobDefinitionsContainer = jobDefinitionsContainer {
            jobDefinitionsDecoded0 = [BatchClientTypes.JobDefinition]()
            for structure0 in jobDefinitionsContainer {
                if let structure0 = structure0 {
                    jobDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        jobDefinitions = jobDefinitionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeJobQueuesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobQueuesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobQueuesOutputError>
}

extension DescribeJobQueuesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobQueuesInput(jobQueues: \(Swift.String(describing: jobQueues)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeJobQueuesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueues
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobQueues = jobQueues {
            var jobQueuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobQueues)
            for stringlist0 in jobQueues {
                try jobQueuesContainer.encode(stringlist0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeJobQueuesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobQueuesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobQueuesOutputError>
}

public struct DescribeJobQueuesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobQueuesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobQueuesOutputError>
}

/// <p>Contains the parameters for <code>DescribeJobQueues</code>.</p>
public struct DescribeJobQueuesInput: Swift.Equatable {
    /// <p>A list of up to 100 queue names or full queue Amazon Resource Name (ARN) entries.</p>
    public let jobQueues: [Swift.String]?
    /// <p>The maximum number of results returned by <code>DescribeJobQueues</code> in paginated output. When this
    ///    parameter is used, <code>DescribeJobQueues</code> only returns <code>maxResults</code> results in a single page and a
    ///     <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another
    ///     <code>DescribeJobQueues</code> request with the returned <code>nextToken</code> value. This value can be between
    ///    1 and 100. If this parameter isn't used, then <code>DescribeJobQueues</code> returns up
    ///    to 100 results and a <code>nextToken</code> value if applicable.</p>
    public let maxResults: Swift.Int
    /// <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeJobQueues</code> request where
    ///     <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the
    ///    end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when
    ///    there are no more results to return.</p>
    ///          <note>
    ///             <p>This token should be treated as an opaque identifier that's only used to
    ///  retrieve the next items in a list and not for other programmatic purposes.</p>
    ///          </note>
    public let nextToken: Swift.String?

    public init (
        jobQueues: [Swift.String]? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.jobQueues = jobQueues
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeJobQueuesInputBody: Swift.Equatable {
    public let jobQueues: [Swift.String]?
    public let maxResults: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeJobQueuesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueues
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobQueues)
        var jobQueuesDecoded0:[Swift.String]? = nil
        if let jobQueuesContainer = jobQueuesContainer {
            jobQueuesDecoded0 = [Swift.String]()
            for string0 in jobQueuesContainer {
                if let string0 = string0 {
                    jobQueuesDecoded0?.append(string0)
                }
            }
        }
        jobQueues = jobQueuesDecoded0
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeJobQueuesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobQueuesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeJobQueuesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobQueuesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobQueuesOutputResponse(jobQueues: \(Swift.String(describing: jobQueues)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeJobQueuesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeJobQueuesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobQueues = output.jobQueues
            self.nextToken = output.nextToken
        } else {
            self.jobQueues = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeJobQueuesOutputResponse: Swift.Equatable {
    /// <p>The list of job queues.</p>
    public let jobQueues: [BatchClientTypes.JobQueueDetail]?
    /// <p>The <code>nextToken</code> value to include in a future <code>DescribeJobQueues</code> request. When the results
    ///    of a <code>DescribeJobQueues</code> request exceed <code>maxResults</code>, this value can be used to retrieve the
    ///    next page of results. This value is <code>null</code> when there are no more results to return.</p>
    public let nextToken: Swift.String?

    public init (
        jobQueues: [BatchClientTypes.JobQueueDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobQueues = jobQueues
        self.nextToken = nextToken
    }
}

struct DescribeJobQueuesOutputResponseBody: Swift.Equatable {
    public let jobQueues: [BatchClientTypes.JobQueueDetail]?
    public let nextToken: Swift.String?
}

extension DescribeJobQueuesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueues
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueuesContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobQueueDetail?].self, forKey: .jobQueues)
        var jobQueuesDecoded0:[BatchClientTypes.JobQueueDetail]? = nil
        if let jobQueuesContainer = jobQueuesContainer {
            jobQueuesDecoded0 = [BatchClientTypes.JobQueueDetail]()
            for structure0 in jobQueuesContainer {
                if let structure0 = structure0 {
                    jobQueuesDecoded0?.append(structure0)
                }
            }
        }
        jobQueues = jobQueuesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeJobsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobsOutputError>
}

extension DescribeJobsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobsInput(jobs: \(Swift.String(describing: jobs)))"}
}

extension DescribeJobsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobs = jobs {
            var jobsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobs)
            for stringlist0 in jobs {
                try jobsContainer.encode(stringlist0)
            }
        }
    }
}

public struct DescribeJobsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobsOutputError>
}

public struct DescribeJobsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobsOutputError>
}

/// <p>Contains the parameters for <code>DescribeJobs</code>.</p>
public struct DescribeJobsInput: Swift.Equatable {
    /// <p>A list of up to 100 job IDs.</p>
    public let jobs: [Swift.String]?

    public init (
        jobs: [Swift.String]? = nil
    )
    {
        self.jobs = jobs
    }
}

struct DescribeJobsInputBody: Swift.Equatable {
    public let jobs: [Swift.String]?
}

extension DescribeJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobs)
        var jobsDecoded0:[Swift.String]? = nil
        if let jobsContainer = jobsContainer {
            jobsDecoded0 = [Swift.String]()
            for string0 in jobsContainer {
                if let string0 = string0 {
                    jobsDecoded0?.append(string0)
                }
            }
        }
        jobs = jobsDecoded0
    }
}

extension DescribeJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeJobsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobsOutputResponse(jobs: \(Swift.String(describing: jobs)))"}
}

extension DescribeJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobs = output.jobs
        } else {
            self.jobs = nil
        }
    }
}

public struct DescribeJobsOutputResponse: Swift.Equatable {
    /// <p>The list of jobs.</p>
    public let jobs: [BatchClientTypes.JobDetail]?

    public init (
        jobs: [BatchClientTypes.JobDetail]? = nil
    )
    {
        self.jobs = jobs
    }
}

struct DescribeJobsOutputResponseBody: Swift.Equatable {
    public let jobs: [BatchClientTypes.JobDetail]?
}

extension DescribeJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobsContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobDetail?].self, forKey: .jobs)
        var jobsDecoded0:[BatchClientTypes.JobDetail]? = nil
        if let jobsContainer = jobsContainer {
            jobsDecoded0 = [BatchClientTypes.JobDetail]()
            for structure0 in jobsContainer {
                if let structure0 = structure0 {
                    jobsDecoded0?.append(structure0)
                }
            }
        }
        jobs = jobsDecoded0
    }
}

extension BatchClientTypes.Device: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerPath
        case hostPath
        case permissions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerPath = containerPath {
            try encodeContainer.encode(containerPath, forKey: .containerPath)
        }
        if let hostPath = hostPath {
            try encodeContainer.encode(hostPath, forKey: .hostPath)
        }
        if let permissions = permissions {
            var permissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissions)
            for devicecgrouppermissions0 in permissions {
                try permissionsContainer.encode(devicecgrouppermissions0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostPath)
        hostPath = hostPathDecoded
        let containerPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerPath)
        containerPath = containerPathDecoded
        let permissionsContainer = try containerValues.decodeIfPresent([BatchClientTypes.DeviceCgroupPermission?].self, forKey: .permissions)
        var permissionsDecoded0:[BatchClientTypes.DeviceCgroupPermission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [BatchClientTypes.DeviceCgroupPermission]()
            for string0 in permissionsContainer {
                if let string0 = string0 {
                    permissionsDecoded0?.append(string0)
                }
            }
        }
        permissions = permissionsDecoded0
    }
}

extension BatchClientTypes.Device: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Device(containerPath: \(Swift.String(describing: containerPath)), hostPath: \(Swift.String(describing: hostPath)), permissions: \(Swift.String(describing: permissions)))"}
}

extension BatchClientTypes {
    /// <p>An object representing a container instance host device.</p>
    ///          <note>
    ///             <p>This object isn't applicable to jobs running on Fargate resources and shouldn't be provided.</p>
    ///          </note>
    public struct Device: Swift.Equatable {
        /// <p>The path inside the container used to expose the host device. By default, the <code>hostPath</code> value is
        ///    used.</p>
        public let containerPath: Swift.String?
        /// <p>The path for the device on the host container instance.</p>
        public let hostPath: Swift.String?
        /// <p>The explicit permissions to provide to the container for the device. By default, the container has permissions
        ///    for <code>read</code>, <code>write</code>, and <code>mknod</code> for the device.</p>
        public let permissions: [BatchClientTypes.DeviceCgroupPermission]?

        public init (
            containerPath: Swift.String? = nil,
            hostPath: Swift.String? = nil,
            permissions: [BatchClientTypes.DeviceCgroupPermission]? = nil
        )
        {
            self.containerPath = containerPath
            self.hostPath = hostPath
            self.permissions = permissions
        }
    }

}

extension BatchClientTypes {
    public enum DeviceCgroupPermission: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mknod
        case read
        case write
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceCgroupPermission] {
            return [
                .mknod,
                .read,
                .write,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mknod: return "MKNOD"
            case .read: return "READ"
            case .write: return "WRITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeviceCgroupPermission(rawValue: rawValue) ?? DeviceCgroupPermission.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.EFSAuthorizationConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPointId
        case iam
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPointId = accessPointId {
            try encodeContainer.encode(accessPointId, forKey: .accessPointId)
        }
        if let iam = iam {
            try encodeContainer.encode(iam.rawValue, forKey: .iam)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessPointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPointId)
        accessPointId = accessPointIdDecoded
        let iamDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EFSAuthorizationConfigIAM.self, forKey: .iam)
        iam = iamDecoded
    }
}

extension BatchClientTypes.EFSAuthorizationConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EFSAuthorizationConfig(accessPointId: \(Swift.String(describing: accessPointId)), iam: \(Swift.String(describing: iam)))"}
}

extension BatchClientTypes {
    /// <p>The authorization configuration details for the Amazon EFS file system.</p>
    public struct EFSAuthorizationConfig: Swift.Equatable {
        /// <p>The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the
        ///     <code>EFSVolumeConfiguration</code> must either be omitted or set to <code>/</code> which will enforce the path set
        ///    on the EFS access point. If an access point is used, transit encryption must be enabled in the
        ///     <code>EFSVolumeConfiguration</code>. For more information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html">Working with Amazon EFS Access Points</a> in the
        ///     <i>Amazon Elastic File System User Guide</i>.</p>
        public let accessPointId: Swift.String?
        /// <p>Whether or not to use the AWS Batch execution IAM role defined in a job definition when mounting the Amazon EFS file
        ///    system. If enabled, transit encryption must be enabled in the <code>EFSVolumeConfiguration</code>. If this parameter
        ///    is omitted, the default value of <code>DISABLED</code> is used. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/ug/efs-volumes.html#efs-volume-accesspoints">Using Amazon EFS Access Points</a> in the
        ///     <i>AWS Batch User Guide</i>. EFS IAM authorization requires that <code>TransitEncryption</code> be
        ///     <code>ENABLED</code> and that a <code>JobRoleArn</code> is specified.</p>
        public let iam: BatchClientTypes.EFSAuthorizationConfigIAM?

        public init (
            accessPointId: Swift.String? = nil,
            iam: BatchClientTypes.EFSAuthorizationConfigIAM? = nil
        )
        {
            self.accessPointId = accessPointId
            self.iam = iam
        }
    }

}

extension BatchClientTypes {
    public enum EFSAuthorizationConfigIAM: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [EFSAuthorizationConfigIAM] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EFSAuthorizationConfigIAM(rawValue: rawValue) ?? EFSAuthorizationConfigIAM.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum EFSTransitEncryption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [EFSTransitEncryption] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EFSTransitEncryption(rawValue: rawValue) ?? EFSTransitEncryption.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.EFSVolumeConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizationConfig
        case fileSystemId
        case rootDirectory
        case transitEncryption
        case transitEncryptionPort
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizationConfig = authorizationConfig {
            try encodeContainer.encode(authorizationConfig, forKey: .authorizationConfig)
        }
        if let fileSystemId = fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let rootDirectory = rootDirectory {
            try encodeContainer.encode(rootDirectory, forKey: .rootDirectory)
        }
        if let transitEncryption = transitEncryption {
            try encodeContainer.encode(transitEncryption.rawValue, forKey: .transitEncryption)
        }
        if transitEncryptionPort != 0 {
            try encodeContainer.encode(transitEncryptionPort, forKey: .transitEncryptionPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let rootDirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootDirectory)
        rootDirectory = rootDirectoryDecoded
        let transitEncryptionDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EFSTransitEncryption.self, forKey: .transitEncryption)
        transitEncryption = transitEncryptionDecoded
        let transitEncryptionPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .transitEncryptionPort)
        transitEncryptionPort = transitEncryptionPortDecoded
        let authorizationConfigDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EFSAuthorizationConfig.self, forKey: .authorizationConfig)
        authorizationConfig = authorizationConfigDecoded
    }
}

extension BatchClientTypes.EFSVolumeConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EFSVolumeConfiguration(authorizationConfig: \(Swift.String(describing: authorizationConfig)), fileSystemId: \(Swift.String(describing: fileSystemId)), rootDirectory: \(Swift.String(describing: rootDirectory)), transitEncryption: \(Swift.String(describing: transitEncryption)), transitEncryptionPort: \(Swift.String(describing: transitEncryptionPort)))"}
}

extension BatchClientTypes {
    /// <p>This parameter is specified when you are using an Amazon Elastic File System file system for task storage. For more information,
    ///    see <a href="https://docs.aws.amazon.com/batch/latest/ug/efs-volumes.html">Amazon EFS Volumes</a> in the
    ///     <i>AWS Batch User Guide</i>.</p>
    public struct EFSVolumeConfiguration: Swift.Equatable {
        /// <p>The authorization configuration details for the Amazon EFS file system.</p>
        public let authorizationConfig: BatchClientTypes.EFSAuthorizationConfig?
        /// <p>The Amazon EFS file system ID to use.</p>
        public let fileSystemId: Swift.String?
        /// <p>The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is
        ///    omitted, the root of the Amazon EFS volume will be used. Specifying <code>/</code> will have the same effect as omitting
        ///    this parameter.</p>
        ///          <important>
        ///             <p>If an EFS access point is specified in the <code>authorizationConfig</code>, the root directory parameter must
        ///     either be omitted or set to <code>/</code> which will enforce the path set on the Amazon EFS access point.</p>
        ///          </important>
        public let rootDirectory: Swift.String?
        /// <p>Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server.
        ///    Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default
        ///    value of <code>DISABLED</code> is used. For more information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html">Encrypting data in transit</a> in the
        ///     <i>Amazon Elastic File System User Guide</i>.</p>
        public let transitEncryption: BatchClientTypes.EFSTransitEncryption?
        /// <p>The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a
        ///    transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more
        ///    information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html">EFS Mount Helper</a> in
        ///    the <i>Amazon Elastic File System User Guide</i>.</p>
        public let transitEncryptionPort: Swift.Int

        public init (
            authorizationConfig: BatchClientTypes.EFSAuthorizationConfig? = nil,
            fileSystemId: Swift.String? = nil,
            rootDirectory: Swift.String? = nil,
            transitEncryption: BatchClientTypes.EFSTransitEncryption? = nil,
            transitEncryptionPort: Swift.Int = 0
        )
        {
            self.authorizationConfig = authorizationConfig
            self.fileSystemId = fileSystemId
            self.rootDirectory = rootDirectory
            self.transitEncryption = transitEncryption
            self.transitEncryptionPort = transitEncryptionPort
        }
    }

}

extension BatchClientTypes.Ec2Configuration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageIdOverride
        case imageType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let imageIdOverride = imageIdOverride {
            try encodeContainer.encode(imageIdOverride, forKey: .imageIdOverride)
        }
        if let imageType = imageType {
            try encodeContainer.encode(imageType, forKey: .imageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageType)
        imageType = imageTypeDecoded
        let imageIdOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageIdOverride)
        imageIdOverride = imageIdOverrideDecoded
    }
}

extension BatchClientTypes.Ec2Configuration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Ec2Configuration(imageIdOverride: \(Swift.String(describing: imageIdOverride)), imageType: \(Swift.String(describing: imageType)))"}
}

extension BatchClientTypes {
    /// <p>Provides information used to select Amazon Machine Images (AMIs) for instances in the compute environment. If
    ///     <code>Ec2Configuration</code> isn't specified, the default is currently <code>ECS_AL1</code> (<a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#alami">Amazon Linux</a>) for
    ///    non-GPU, non-Graviton instances. Starting on March 31, 2021, this default will be changing to <code>ECS_AL2</code>
    ///     (<a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami">Amazon Linux
    ///     2</a>).</p>
    ///          <note>
    ///             <p>This object isn't applicable to jobs running on Fargate resources.</p>
    ///          </note>
    public struct Ec2Configuration: Swift.Equatable {
        /// <p>The AMI ID used for instances launched in the compute environment that match the image type. This setting
        ///    overrides the <code>imageId</code> set in the <code>computeResource</code> object.</p>
        public let imageIdOverride: Swift.String?
        /// <p>The image type to match with the instance type to select an AMI. If the <code>imageIdOverride</code> parameter
        ///    isn't specified, then a recent <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html">Amazon ECS-optimized AMI</a> (<code>ECS_AL1</code>) is
        ///    used. Starting on March 31, 2021, this default will be changing to <code>ECS_AL2</code> (<a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami">Amazon Linux 2</a>).</p>
        ///          <dl>
        ///             <dt>ECS_AL2</dt>
        ///             <dd>
        ///                <p>
        ///                   <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami">Amazon Linux
        ///        2</a>− Default for all AWS Graviton-based instance families (for example, <code>C6g</code>,
        ///        <code>M6g</code>, <code>R6g</code>, and <code>T4g</code>) and can be used for all non-GPU instance types.</p>
        ///             </dd>
        ///             <dt>ECS_AL2_NVIDIA</dt>
        ///             <dd>
        ///                <p>
        ///                   <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#gpuami">Amazon Linux
        ///        2 (GPU)</a>−Default for all GPU instance families (for example <code>P4</code> and <code>G4</code>) and
        ///       can be used for all non-AWS Graviton-based instance types.</p>
        ///             </dd>
        ///             <dt>ECS_AL1</dt>
        ///             <dd>
        ///                <p>
        ///                   <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#alami">Amazon
        ///        Linux</a>−Default for all non-GPU, non-AWS Graviton instance families. Amazon Linux is reaching the
        ///       end-of-life of standard support. For more information, see <a href="http://aws.amazon.com/amazon-linux-ami/">Amazon
        ///        Linux AMI</a>.</p>
        ///             </dd>
        ///          </dl>
        public let imageType: Swift.String?

        public init (
            imageIdOverride: Swift.String? = nil,
            imageType: Swift.String? = nil
        )
        {
            self.imageIdOverride = imageIdOverride
            self.imageType = imageType
        }
    }

}

extension BatchClientTypes.EvaluateOnExit: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case onExitCode
        case onReason
        case onStatusReason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let onExitCode = onExitCode {
            try encodeContainer.encode(onExitCode, forKey: .onExitCode)
        }
        if let onReason = onReason {
            try encodeContainer.encode(onReason, forKey: .onReason)
        }
        if let onStatusReason = onStatusReason {
            try encodeContainer.encode(onStatusReason, forKey: .onStatusReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let onStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .onStatusReason)
        onStatusReason = onStatusReasonDecoded
        let onReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .onReason)
        onReason = onReasonDecoded
        let onExitCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .onExitCode)
        onExitCode = onExitCodeDecoded
        let actionDecoded = try containerValues.decodeIfPresent(BatchClientTypes.RetryAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension BatchClientTypes.EvaluateOnExit: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EvaluateOnExit(action: \(Swift.String(describing: action)), onExitCode: \(Swift.String(describing: onExitCode)), onReason: \(Swift.String(describing: onReason)), onStatusReason: \(Swift.String(describing: onStatusReason)))"}
}

extension BatchClientTypes {
    /// <p>Specifies a set of conditions to be met, and an action to take (<code>RETRY</code> or <code>EXIT</code>) if all
    ///    conditions are met.</p>
    public struct EvaluateOnExit: Swift.Equatable {
        /// <p>Specifies the action to take if all of the specified conditions (<code>onStatusReason</code>,
        ///     <code>onReason</code>, and <code>onExitCode</code>) are met. The values aren't case sensitive.</p>
        public let action: BatchClientTypes.RetryAction?
        /// <p>Contains a glob pattern to match against the decimal representation of the <code>ExitCode</code> returned for a
        ///    job. The pattern can be up to 512 characters long, can contain only numbers, and can optionally end with an asterisk
        ///    (*) so that only the start of the string needs to be an exact match.</p>
        public let onExitCode: Swift.String?
        /// <p>Contains a glob pattern to match against the <code>Reason</code> returned for a job. The pattern can be up to
        ///    512 characters long, and can contain letters, numbers, periods (.), colons (:), and white space (including spaces and
        ///    tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact
        ///    match.</p>
        public let onReason: Swift.String?
        /// <p>Contains a glob pattern to match against the <code>StatusReason</code> returned for a job. The pattern can be up
        ///    to 512 characters long, and can contain letters, numbers, periods (.), colons (:), and white space (including spaces
        ///    or tabs).
        ///    It can optionally end with an
        ///    asterisk (*) so that only the start of the string needs to be an exact match.</p>
        public let onStatusReason: Swift.String?

        public init (
            action: BatchClientTypes.RetryAction? = nil,
            onExitCode: Swift.String? = nil,
            onReason: Swift.String? = nil,
            onStatusReason: Swift.String? = nil
        )
        {
            self.action = action
            self.onExitCode = onExitCode
            self.onReason = onReason
            self.onStatusReason = onStatusReason
        }
    }

}

extension BatchClientTypes.FargatePlatformConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platformVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let platformVersion = platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
    }
}

extension BatchClientTypes.FargatePlatformConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FargatePlatformConfiguration(platformVersion: \(Swift.String(describing: platformVersion)))"}
}

extension BatchClientTypes {
    /// <p>The platform configuration for jobs running on Fargate resources. For jobs that run on EC2 resources, you
    ///    shouldn't specify this parameter.</p>
    public struct FargatePlatformConfiguration: Swift.Equatable {
        /// <p>The AWS Fargate platform version where the jobs are running. A platform version is specified only for jobs
        ///    running on Fargate resources. If one isn't specified, the <code>LATEST</code> platform version is used by default.
        ///    This uses a recent, approved version of the AWS Fargate platform for compute resources. For more information, see
        ///     <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">AWS Fargate platform
        ///     versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
        public let platformVersion: Swift.String?

        public init (
            platformVersion: Swift.String? = nil
        )
        {
            self.platformVersion = platformVersion
        }
    }

}

extension BatchClientTypes.Host: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourcePath
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourcePath = sourcePath {
            try encodeContainer.encode(sourcePath, forKey: .sourcePath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourcePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourcePath)
        sourcePath = sourcePathDecoded
    }
}

extension BatchClientTypes.Host: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Host(sourcePath: \(Swift.String(describing: sourcePath)))"}
}

extension BatchClientTypes {
    /// <p>Determine whether your data volume persists on the host container instance and where it is stored. If this
    ///    parameter is empty, then the Docker daemon assigns a host path for your data volume, but the data isn't guaranteed to
    ///    persist after the containers associated with it stop running.</p>
    public struct Host: Swift.Equatable {
        /// <p>The path on the host container instance that's presented to the container. If this parameter is empty, then the
        ///    Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume
        ///    persists at the specified location on the host container instance until you delete it manually. If the source path
        ///    location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the
        ///    contents of the source path folder are exported.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs that run on Fargate resources and shouldn't be provided.</p>
        ///          </note>
        public let sourcePath: Swift.String?

        public init (
            sourcePath: Swift.String? = nil
        )
        {
            self.sourcePath = sourcePath
        }
    }

}

extension BatchClientTypes {
    public enum JQState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [JQState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JQState(rawValue: rawValue) ?? JQState.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum JQStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creating
        case deleted
        case deleting
        case invalid
        case updating
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [JQStatus] {
            return [
                .creating,
                .deleted,
                .deleting,
                .invalid,
                .updating,
                .valid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .invalid: return "INVALID"
            case .updating: return "UPDATING"
            case .valid: return "VALID"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JQStatus(rawValue: rawValue) ?? JQStatus.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.JobDefinition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerProperties
        case jobDefinitionArn
        case jobDefinitionName
        case nodeProperties
        case parameters
        case platformCapabilities
        case propagateTags
        case retryStrategy
        case revision
        case status
        case tags
        case timeout
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerProperties = containerProperties {
            try encodeContainer.encode(containerProperties, forKey: .containerProperties)
        }
        if let jobDefinitionArn = jobDefinitionArn {
            try encodeContainer.encode(jobDefinitionArn, forKey: .jobDefinitionArn)
        }
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let nodeProperties = nodeProperties {
            try encodeContainer.encode(nodeProperties, forKey: .nodeProperties)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let platformCapabilities = platformCapabilities {
            var platformCapabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformCapabilities)
            for platformcapabilitylist0 in platformCapabilities {
                try platformCapabilitiesContainer.encode(platformcapabilitylist0.rawValue)
            }
        }
        if propagateTags != false {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if revision != 0 {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
        let revisionDecoded = try containerValues.decode(Swift.Int.self, forKey: .revision)
        revision = revisionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in parametersContainer {
                if let string0 = string0 {
                    parametersDecoded0?[key0] = string0
                }
            }
        }
        parameters = parametersDecoded0
        let retryStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let containerPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerProperties.self, forKey: .containerProperties)
        containerProperties = containerPropertiesDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let nodePropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodeProperties.self, forKey: .nodeProperties)
        nodeProperties = nodePropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let propagateTagsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let platformCapabilitiesContainer = try containerValues.decodeIfPresent([BatchClientTypes.PlatformCapability?].self, forKey: .platformCapabilities)
        var platformCapabilitiesDecoded0:[BatchClientTypes.PlatformCapability]? = nil
        if let platformCapabilitiesContainer = platformCapabilitiesContainer {
            platformCapabilitiesDecoded0 = [BatchClientTypes.PlatformCapability]()
            for string0 in platformCapabilitiesContainer {
                if let string0 = string0 {
                    platformCapabilitiesDecoded0?.append(string0)
                }
            }
        }
        platformCapabilities = platformCapabilitiesDecoded0
    }
}

extension BatchClientTypes.JobDefinition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobDefinition(containerProperties: \(Swift.String(describing: containerProperties)), jobDefinitionArn: \(Swift.String(describing: jobDefinitionArn)), jobDefinitionName: \(Swift.String(describing: jobDefinitionName)), nodeProperties: \(Swift.String(describing: nodeProperties)), parameters: \(Swift.String(describing: parameters)), platformCapabilities: \(Swift.String(describing: platformCapabilities)), propagateTags: \(Swift.String(describing: propagateTags)), retryStrategy: \(Swift.String(describing: retryStrategy)), revision: \(Swift.String(describing: revision)), status: \(Swift.String(describing: status)), tags: \(Swift.String(describing: tags)), timeout: \(Swift.String(describing: timeout)), type: \(Swift.String(describing: type)))"}
}

extension BatchClientTypes {
    /// <p>An object representing an AWS Batch job definition.</p>
    public struct JobDefinition: Swift.Equatable {
        /// <p>An object with various properties specific to container-based jobs.</p>
        public let containerProperties: BatchClientTypes.ContainerProperties?
        /// <p>The Amazon Resource Name (ARN) for the job definition.</p>
        public let jobDefinitionArn: Swift.String?
        /// <p>The name of the job definition.</p>
        public let jobDefinitionName: Swift.String?
        /// <p>An object with various properties specific to multi-node parallel jobs.</p>
        ///          <note>
        ///             <p>If the job runs on Fargate resources, then you must not specify <code>nodeProperties</code>; use
        ///      <code>containerProperties</code> instead.</p>
        ///          </note>
        public let nodeProperties: BatchClientTypes.NodeProperties?
        /// <p>Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are
        ///    specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding
        ///    parameter defaults from the job definition. For more information about specifying parameters, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html">Job Definition Parameters</a> in the
        ///     <i>AWS Batch User Guide</i>.</p>
        public let parameters: [Swift.String:Swift.String]?
        /// <p>The platform capabilities required by the job definition. If no value is specified, it defaults to
        ///     <code>EC2</code>. Jobs run on Fargate resources specify <code>FARGATE</code>.</p>
        public let platformCapabilities: [BatchClientTypes.PlatformCapability]?
        /// <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no
        ///    value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For
        ///    tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags
        ///    from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state.</p>
        public let propagateTags: Swift.Bool
        /// <p>The retry strategy to use for failed jobs that are submitted with this job definition.</p>
        public let retryStrategy: BatchClientTypes.RetryStrategy?
        /// <p>The revision of the job definition.</p>
        public let revision: Swift.Int
        /// <p>The status of the job definition.</p>
        public let status: Swift.String?
        /// <p>The tags applied to the job definition.</p>
        public let tags: [Swift.String:Swift.String]?
        /// <p>The timeout configuration for jobs that are submitted with this job definition. You can specify a timeout
        ///    duration after which AWS Batch terminates your jobs if they haven't finished.</p>
        public let timeout: BatchClientTypes.JobTimeout?
        /// <p>The type of job definition. If the job is run on Fargate resources, then <code>multinode</code> isn't
        ///    supported. For more information about multi-node parallel jobs, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html">Creating a multi-node parallel job definition</a> in the
        ///     <i>AWS Batch User Guide</i>.</p>
        public let type: Swift.String?

        public init (
            containerProperties: BatchClientTypes.ContainerProperties? = nil,
            jobDefinitionArn: Swift.String? = nil,
            jobDefinitionName: Swift.String? = nil,
            nodeProperties: BatchClientTypes.NodeProperties? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            platformCapabilities: [BatchClientTypes.PlatformCapability]? = nil,
            propagateTags: Swift.Bool = false,
            retryStrategy: BatchClientTypes.RetryStrategy? = nil,
            revision: Swift.Int = 0,
            status: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            timeout: BatchClientTypes.JobTimeout? = nil,
            type: Swift.String? = nil
        )
        {
            self.containerProperties = containerProperties
            self.jobDefinitionArn = jobDefinitionArn
            self.jobDefinitionName = jobDefinitionName
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.revision = revision
            self.status = status
            self.tags = tags
            self.timeout = timeout
            self.type = type
        }
    }

}

extension BatchClientTypes {
    public enum JobDefinitionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case container
        case multinode
        case sdkUnknown(Swift.String)

        public static var allCases: [JobDefinitionType] {
            return [
                .container,
                .multinode,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .container: return "container"
            case .multinode: return "multinode"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobDefinitionType(rawValue: rawValue) ?? JobDefinitionType.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.JobDependency: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ArrayJobDependency.self, forKey: .type)
        type = typeDecoded
    }
}

extension BatchClientTypes.JobDependency: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobDependency(jobId: \(Swift.String(describing: jobId)), type: \(Swift.String(describing: type)))"}
}

extension BatchClientTypes {
    /// <p>An object representing an AWS Batch job dependency.</p>
    public struct JobDependency: Swift.Equatable {
        /// <p>The job ID of the AWS Batch job associated with this dependency.</p>
        public let jobId: Swift.String?
        /// <p>The type of the job dependency.</p>
        public let type: BatchClientTypes.ArrayJobDependency?

        public init (
            jobId: Swift.String? = nil,
            type: BatchClientTypes.ArrayJobDependency? = nil
        )
        {
            self.jobId = jobId
            self.type = type
        }
    }

}

extension BatchClientTypes.JobDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties
        case attempts
        case container
        case createdAt
        case dependsOn
        case jobArn
        case jobDefinition
        case jobId
        case jobName
        case jobQueue
        case nodeDetails
        case nodeProperties
        case parameters
        case platformCapabilities
        case propagateTags
        case retryStrategy
        case startedAt
        case status
        case statusReason
        case stoppedAt
        case tags
        case timeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayProperties = arrayProperties {
            try encodeContainer.encode(arrayProperties, forKey: .arrayProperties)
        }
        if let attempts = attempts {
            var attemptsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attempts)
            for attemptdetails0 in attempts {
                try attemptsContainer.encode(attemptdetails0)
            }
        }
        if let container = container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if createdAt != 0 {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let dependsOn = dependsOn {
            var dependsOnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOn)
            for jobdependencylist0 in dependsOn {
                try dependsOnContainer.encode(jobdependencylist0)
            }
        }
        if let jobArn = jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobDefinition = jobDefinition {
            try encodeContainer.encode(jobDefinition, forKey: .jobDefinition)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobQueue = jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
        if let nodeDetails = nodeDetails {
            try encodeContainer.encode(nodeDetails, forKey: .nodeDetails)
        }
        if let nodeProperties = nodeProperties {
            try encodeContainer.encode(nodeProperties, forKey: .nodeProperties)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let platformCapabilities = platformCapabilities {
            var platformCapabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformCapabilities)
            for platformcapabilitylist0 in platformCapabilities {
                try platformCapabilitiesContainer.encode(platformcapabilitylist0.rawValue)
            }
        }
        if propagateTags != false {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if startedAt != 0 {
            try encodeContainer.encode(startedAt, forKey: .startedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if stoppedAt != 0 {
            try encodeContainer.encode(stoppedAt, forKey: .stoppedAt)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobQueueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
        let attemptsContainer = try containerValues.decodeIfPresent([BatchClientTypes.AttemptDetail?].self, forKey: .attempts)
        var attemptsDecoded0:[BatchClientTypes.AttemptDetail]? = nil
        if let attemptsContainer = attemptsContainer {
            attemptsDecoded0 = [BatchClientTypes.AttemptDetail]()
            for structure0 in attemptsContainer {
                if let structure0 = structure0 {
                    attemptsDecoded0?.append(structure0)
                }
            }
        }
        attempts = attemptsDecoded0
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let createdAtDecoded = try containerValues.decode(Swift.Int.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let startedAtDecoded = try containerValues.decode(Swift.Int.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let stoppedAtDecoded = try containerValues.decode(Swift.Int.self, forKey: .stoppedAt)
        stoppedAt = stoppedAtDecoded
        let dependsOnContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobDependency?].self, forKey: .dependsOn)
        var dependsOnDecoded0:[BatchClientTypes.JobDependency]? = nil
        if let dependsOnContainer = dependsOnContainer {
            dependsOnDecoded0 = [BatchClientTypes.JobDependency]()
            for structure0 in dependsOnContainer {
                if let structure0 = structure0 {
                    dependsOnDecoded0?.append(structure0)
                }
            }
        }
        dependsOn = dependsOnDecoded0
        let jobDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinition)
        jobDefinition = jobDefinitionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in parametersContainer {
                if let string0 = string0 {
                    parametersDecoded0?[key0] = string0
                }
            }
        }
        parameters = parametersDecoded0
        let containerDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerDetail.self, forKey: .container)
        container = containerDecoded
        let nodeDetailsDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodeDetails.self, forKey: .nodeDetails)
        nodeDetails = nodeDetailsDecoded
        let nodePropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodeProperties.self, forKey: .nodeProperties)
        nodeProperties = nodePropertiesDecoded
        let arrayPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ArrayPropertiesDetail.self, forKey: .arrayProperties)
        arrayProperties = arrayPropertiesDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let propagateTagsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let platformCapabilitiesContainer = try containerValues.decodeIfPresent([BatchClientTypes.PlatformCapability?].self, forKey: .platformCapabilities)
        var platformCapabilitiesDecoded0:[BatchClientTypes.PlatformCapability]? = nil
        if let platformCapabilitiesContainer = platformCapabilitiesContainer {
            platformCapabilitiesDecoded0 = [BatchClientTypes.PlatformCapability]()
            for string0 in platformCapabilitiesContainer {
                if let string0 = string0 {
                    platformCapabilitiesDecoded0?.append(string0)
                }
            }
        }
        platformCapabilities = platformCapabilitiesDecoded0
    }
}

extension BatchClientTypes.JobDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobDetail(arrayProperties: \(Swift.String(describing: arrayProperties)), attempts: \(Swift.String(describing: attempts)), container: \(Swift.String(describing: container)), createdAt: \(Swift.String(describing: createdAt)), dependsOn: \(Swift.String(describing: dependsOn)), jobArn: \(Swift.String(describing: jobArn)), jobDefinition: \(Swift.String(describing: jobDefinition)), jobId: \(Swift.String(describing: jobId)), jobName: \(Swift.String(describing: jobName)), jobQueue: \(Swift.String(describing: jobQueue)), nodeDetails: \(Swift.String(describing: nodeDetails)), nodeProperties: \(Swift.String(describing: nodeProperties)), parameters: \(Swift.String(describing: parameters)), platformCapabilities: \(Swift.String(describing: platformCapabilities)), propagateTags: \(Swift.String(describing: propagateTags)), retryStrategy: \(Swift.String(describing: retryStrategy)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)), stoppedAt: \(Swift.String(describing: stoppedAt)), tags: \(Swift.String(describing: tags)), timeout: \(Swift.String(describing: timeout)))"}
}

extension BatchClientTypes {
    /// <p>An object representing an AWS Batch job.</p>
    public struct JobDetail: Swift.Equatable {
        /// <p>The array properties of the job, if it is an array job.</p>
        public let arrayProperties: BatchClientTypes.ArrayPropertiesDetail?
        /// <p>A list of job attempts associated with this job.</p>
        public let attempts: [BatchClientTypes.AttemptDetail]?
        /// <p>An object representing the details of the container that's associated with the job.</p>
        public let container: BatchClientTypes.ContainerDetail?
        /// <p>The Unix timestamp (in milliseconds) for when the job was created. For non-array jobs and parent array jobs,
        ///    this is when the job entered the <code>SUBMITTED</code> state (at the time <a>SubmitJob</a> was called).
        ///    For array child jobs, this is when the child job was spawned by its parent and entered the <code>PENDING</code>
        ///    state.</p>
        public let createdAt: Swift.Int
        /// <p>A list of job IDs that this job depends on.</p>
        public let dependsOn: [BatchClientTypes.JobDependency]?
        /// <p>The Amazon Resource Name (ARN) of the job.</p>
        public let jobArn: Swift.String?
        /// <p>The job definition that's used by this job.</p>
        public let jobDefinition: Swift.String?
        /// <p>The ID for the job.</p>
        public let jobId: Swift.String?
        /// <p>The name of the job.</p>
        public let jobName: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the job queue that the job is associated with.</p>
        public let jobQueue: Swift.String?
        /// <p>An object representing the details of a node that's associated with a multi-node parallel job.</p>
        public let nodeDetails: BatchClientTypes.NodeDetails?
        /// <p>An object representing the node properties of a multi-node parallel job.</p>
        ///          <note>
        ///             <p>This isn't applicable to jobs running on Fargate resources.</p>
        ///          </note>
        public let nodeProperties: BatchClientTypes.NodeProperties?
        /// <p>Additional parameters passed to the job that replace parameter substitution placeholders or override any
        ///    corresponding parameter defaults from the job definition.</p>
        public let parameters: [Swift.String:Swift.String]?
        /// <p>The platform capabilities required by the job definition. If no value is specified, it defaults to
        ///     <code>EC2</code>. Jobs run on Fargate resources specify <code>FARGATE</code>.</p>
        public let platformCapabilities: [BatchClientTypes.PlatformCapability]?
        /// <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no
        ///    value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For
        ///    tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags
        ///    from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state.</p>
        public let propagateTags: Swift.Bool
        /// <p>The retry strategy to use for this job if an attempt fails.</p>
        public let retryStrategy: BatchClientTypes.RetryStrategy?
        /// <p>The Unix timestamp (in milliseconds) for when the job was started (when the job transitioned from the
        ///     <code>STARTING</code> state to the <code>RUNNING</code> state). This parameter isn't provided for child jobs of
        ///    array jobs or multi-node parallel jobs.</p>
        public let startedAt: Swift.Int
        /// <p>The current status for the job.</p>
        ///          <note>
        ///             <p>If your jobs don't progress to <code>STARTING</code>, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#job_stuck_in_runnable">Jobs Stuck in RUNNABLE Status</a> in the
        ///     troubleshooting section of the <i>AWS Batch User Guide</i>.</p>
        ///          </note>
        public let status: BatchClientTypes.JobStatus?
        /// <p>A short, human-readable string to provide additional details about the current status of the job.</p>
        public let statusReason: Swift.String?
        /// <p>The Unix timestamp (in milliseconds) for when the job was stopped (when the job transitioned from the
        ///     <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).</p>
        public let stoppedAt: Swift.Int
        /// <p>The tags applied to the job.</p>
        public let tags: [Swift.String:Swift.String]?
        /// <p>The timeout configuration for the job.</p>
        public let timeout: BatchClientTypes.JobTimeout?

        public init (
            arrayProperties: BatchClientTypes.ArrayPropertiesDetail? = nil,
            attempts: [BatchClientTypes.AttemptDetail]? = nil,
            container: BatchClientTypes.ContainerDetail? = nil,
            createdAt: Swift.Int = 0,
            dependsOn: [BatchClientTypes.JobDependency]? = nil,
            jobArn: Swift.String? = nil,
            jobDefinition: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobQueue: Swift.String? = nil,
            nodeDetails: BatchClientTypes.NodeDetails? = nil,
            nodeProperties: BatchClientTypes.NodeProperties? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            platformCapabilities: [BatchClientTypes.PlatformCapability]? = nil,
            propagateTags: Swift.Bool = false,
            retryStrategy: BatchClientTypes.RetryStrategy? = nil,
            startedAt: Swift.Int = 0,
            status: BatchClientTypes.JobStatus? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int = 0,
            tags: [Swift.String:Swift.String]? = nil,
            timeout: BatchClientTypes.JobTimeout? = nil
        )
        {
            self.arrayProperties = arrayProperties
            self.attempts = attempts
            self.container = container
            self.createdAt = createdAt
            self.dependsOn = dependsOn
            self.jobArn = jobArn
            self.jobDefinition = jobDefinition
            self.jobId = jobId
            self.jobName = jobName
            self.jobQueue = jobQueue
            self.nodeDetails = nodeDetails
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
            self.tags = tags
            self.timeout = timeout
        }
    }

}

extension BatchClientTypes.JobQueueDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentOrder
        case jobQueueArn
        case jobQueueName
        case priority
        case state
        case status
        case statusReason
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentOrder = computeEnvironmentOrder {
            var computeEnvironmentOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeEnvironmentOrder)
            for computeenvironmentorders0 in computeEnvironmentOrder {
                try computeEnvironmentOrderContainer.encode(computeenvironmentorders0)
            }
        }
        if let jobQueueArn = jobQueueArn {
            try encodeContainer.encode(jobQueueArn, forKey: .jobQueueArn)
        }
        if let jobQueueName = jobQueueName {
            try encodeContainer.encode(jobQueueName, forKey: .jobQueueName)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueName)
        jobQueueName = jobQueueNameDecoded
        let jobQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueArn)
        jobQueueArn = jobQueueArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JQState.self, forKey: .state)
        state = stateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JQStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let priorityDecoded = try containerValues.decode(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let computeEnvironmentOrderContainer = try containerValues.decodeIfPresent([BatchClientTypes.ComputeEnvironmentOrder?].self, forKey: .computeEnvironmentOrder)
        var computeEnvironmentOrderDecoded0:[BatchClientTypes.ComputeEnvironmentOrder]? = nil
        if let computeEnvironmentOrderContainer = computeEnvironmentOrderContainer {
            computeEnvironmentOrderDecoded0 = [BatchClientTypes.ComputeEnvironmentOrder]()
            for structure0 in computeEnvironmentOrderContainer {
                if let structure0 = structure0 {
                    computeEnvironmentOrderDecoded0?.append(structure0)
                }
            }
        }
        computeEnvironmentOrder = computeEnvironmentOrderDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension BatchClientTypes.JobQueueDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobQueueDetail(computeEnvironmentOrder: \(Swift.String(describing: computeEnvironmentOrder)), jobQueueArn: \(Swift.String(describing: jobQueueArn)), jobQueueName: \(Swift.String(describing: jobQueueName)), priority: \(Swift.String(describing: priority)), state: \(Swift.String(describing: state)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)), tags: \(Swift.String(describing: tags)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the details of an AWS Batch job queue.</p>
    public struct JobQueueDetail: Swift.Equatable {
        /// <p>The compute environments that are attached to the job queue and the order that job placement is preferred.
        ///    Compute environments are selected for job placement in ascending order.</p>
        public let computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
        /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
        public let jobQueueArn: Swift.String?
        /// <p>The name of the job queue.</p>
        public let jobQueueName: Swift.String?
        /// <p>The priority of the job queue. Job queues with a higher priority (or a higher integer value for the
        ///     <code>priority</code> parameter) are evaluated first when associated with the same compute environment. Priority is
        ///    determined in descending order, for example, a job queue with a priority value of <code>10</code> is given scheduling
        ///    preference over a job queue with a priority value of <code>1</code>. All of the compute environments must be either
        ///    EC2 (<code>EC2</code> or <code>SPOT</code>) or Fargate (<code>FARGATE</code> or <code>FARGATE_SPOT</code>); EC2 and
        ///    Fargate compute environments can't be mixed.</p>
        public let priority: Swift.Int
        /// <p>Describes the ability of the queue to accept new jobs. If the job queue state is <code>ENABLED</code>, it's able
        ///    to accept jobs. If the job queue state is <code>DISABLED</code>, new jobs can't be added to the queue, but jobs
        ///    already in the queue can finish.</p>
        public let state: BatchClientTypes.JQState?
        /// <p>The status of the job queue (for example, <code>CREATING</code> or <code>VALID</code>).</p>
        public let status: BatchClientTypes.JQStatus?
        /// <p>A short, human-readable string to provide additional details about the current status of the job queue.</p>
        public let statusReason: Swift.String?
        /// <p>The tags applied to the job queue. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your AWS Batch resources</a> in
        ///    <i>AWS Batch User Guide</i>.</p>
        public let tags: [Swift.String:Swift.String]?

        public init (
            computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]? = nil,
            jobQueueArn: Swift.String? = nil,
            jobQueueName: Swift.String? = nil,
            priority: Swift.Int = 0,
            state: BatchClientTypes.JQState? = nil,
            status: BatchClientTypes.JQStatus? = nil,
            statusReason: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.jobQueueArn = jobQueueArn
            self.jobQueueName = jobQueueName
            self.priority = priority
            self.state = state
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
        }
    }

}

extension BatchClientTypes {
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case runnable
        case running
        case starting
        case submitted
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .failed,
                .pending,
                .runnable,
                .running,
                .starting,
                .submitted,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .runnable: return "RUNNABLE"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .submitted: return "SUBMITTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.JobSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties
        case container
        case createdAt
        case jobArn
        case jobId
        case jobName
        case nodeProperties
        case startedAt
        case status
        case statusReason
        case stoppedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayProperties = arrayProperties {
            try encodeContainer.encode(arrayProperties, forKey: .arrayProperties)
        }
        if let container = container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if createdAt != 0 {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let jobArn = jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let nodeProperties = nodeProperties {
            try encodeContainer.encode(nodeProperties, forKey: .nodeProperties)
        }
        if startedAt != 0 {
            try encodeContainer.encode(startedAt, forKey: .startedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if stoppedAt != 0 {
            try encodeContainer.encode(stoppedAt, forKey: .stoppedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let createdAtDecoded = try containerValues.decode(Swift.Int.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let startedAtDecoded = try containerValues.decode(Swift.Int.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let stoppedAtDecoded = try containerValues.decode(Swift.Int.self, forKey: .stoppedAt)
        stoppedAt = stoppedAtDecoded
        let containerDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerSummary.self, forKey: .container)
        container = containerDecoded
        let arrayPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ArrayPropertiesSummary.self, forKey: .arrayProperties)
        arrayProperties = arrayPropertiesDecoded
        let nodePropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodePropertiesSummary.self, forKey: .nodeProperties)
        nodeProperties = nodePropertiesDecoded
    }
}

extension BatchClientTypes.JobSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobSummary(arrayProperties: \(Swift.String(describing: arrayProperties)), container: \(Swift.String(describing: container)), createdAt: \(Swift.String(describing: createdAt)), jobArn: \(Swift.String(describing: jobArn)), jobId: \(Swift.String(describing: jobId)), jobName: \(Swift.String(describing: jobName)), nodeProperties: \(Swift.String(describing: nodeProperties)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)), stoppedAt: \(Swift.String(describing: stoppedAt)))"}
}

extension BatchClientTypes {
    /// <p>An object representing summary details of a job.</p>
    public struct JobSummary: Swift.Equatable {
        /// <p>The array properties of the job, if it is an array job.</p>
        public let arrayProperties: BatchClientTypes.ArrayPropertiesSummary?
        /// <p>An object representing the details of the container that's associated with the job.</p>
        public let container: BatchClientTypes.ContainerSummary?
        /// <p>The Unix timestamp for when the job was created. For non-array jobs and parent array jobs, this is when the job
        ///    entered the <code>SUBMITTED</code> state (at the time <a>SubmitJob</a> was called). For array child jobs,
        ///    this is when the child job was spawned by its parent and entered the <code>PENDING</code> state.</p>
        public let createdAt: Swift.Int
        /// <p>The Amazon Resource Name (ARN) of the job.</p>
        public let jobArn: Swift.String?
        /// <p>The ID of the job.</p>
        public let jobId: Swift.String?
        /// <p>The name of the job.</p>
        public let jobName: Swift.String?
        /// <p>The node properties for a single node in a job summary list.</p>
        ///          <note>
        ///             <p>This isn't applicable to jobs running on Fargate resources.</p>
        ///          </note>
        public let nodeProperties: BatchClientTypes.NodePropertiesSummary?
        /// <p>The Unix timestamp for when the job was started (when the job transitioned from the <code>STARTING</code> state
        ///    to the <code>RUNNING</code> state).</p>
        public let startedAt: Swift.Int
        /// <p>The current status for the job.</p>
        public let status: BatchClientTypes.JobStatus?
        /// <p>A short, human-readable string to provide additional details about the current status of the job.</p>
        public let statusReason: Swift.String?
        /// <p>The Unix timestamp for when the job was stopped (when the job transitioned from the <code>RUNNING</code> state
        ///    to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).</p>
        public let stoppedAt: Swift.Int

        public init (
            arrayProperties: BatchClientTypes.ArrayPropertiesSummary? = nil,
            container: BatchClientTypes.ContainerSummary? = nil,
            createdAt: Swift.Int = 0,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            nodeProperties: BatchClientTypes.NodePropertiesSummary? = nil,
            startedAt: Swift.Int = 0,
            status: BatchClientTypes.JobStatus? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int = 0
        )
        {
            self.arrayProperties = arrayProperties
            self.container = container
            self.createdAt = createdAt
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.nodeProperties = nodeProperties
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }
    }

}

extension BatchClientTypes.JobTimeout: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attemptDurationSeconds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if attemptDurationSeconds != 0 {
            try encodeContainer.encode(attemptDurationSeconds, forKey: .attemptDurationSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attemptDurationSecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .attemptDurationSeconds)
        attemptDurationSeconds = attemptDurationSecondsDecoded
    }
}

extension BatchClientTypes.JobTimeout: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobTimeout(attemptDurationSeconds: \(Swift.String(describing: attemptDurationSeconds)))"}
}

extension BatchClientTypes {
    /// <p>An object representing a job timeout configuration.</p>
    public struct JobTimeout: Swift.Equatable {
        /// <p>The time duration in seconds (measured from the job attempt's <code>startedAt</code> timestamp) after which
        ///    AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is 60 seconds.</p>
        public let attemptDurationSeconds: Swift.Int

        public init (
            attemptDurationSeconds: Swift.Int = 0
        )
        {
            self.attemptDurationSeconds = attemptDurationSeconds
        }
    }

}

extension BatchClientTypes.KeyValuePair: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension BatchClientTypes.KeyValuePair: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeyValuePair(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension BatchClientTypes {
    /// <p>A key-value pair object.</p>
    public struct KeyValuePair: Swift.Equatable {
        /// <p>The name of the key-value pair. For environment variables, this is the name of the environment variable.</p>
        public let name: Swift.String?
        /// <p>The value of the key-value pair. For environment variables, this is the value of the environment
        ///    variable.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension BatchClientTypes.LaunchTemplateSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchTemplateId
        case launchTemplateName
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let launchTemplateId = launchTemplateId {
            try encodeContainer.encode(launchTemplateId, forKey: .launchTemplateId)
        }
        if let launchTemplateName = launchTemplateName {
            try encodeContainer.encode(launchTemplateName, forKey: .launchTemplateName)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateId)
        launchTemplateId = launchTemplateIdDecoded
        let launchTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateName)
        launchTemplateName = launchTemplateNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension BatchClientTypes.LaunchTemplateSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LaunchTemplateSpecification(launchTemplateId: \(Swift.String(describing: launchTemplateId)), launchTemplateName: \(Swift.String(describing: launchTemplateName)), version: \(Swift.String(describing: version)))"}
}

extension BatchClientTypes {
    /// <p>An object representing a launch template associated with a compute resource. You must specify either the launch
    ///    template ID or launch template name in the request, but not both.</p>
    ///          <p>If security groups are specified using both the <code>securityGroupIds</code> parameter of
    ///     <code>CreateComputeEnvironment</code> and the launch template, the values in the <code>securityGroupIds</code>
    ///    parameter of <code>CreateComputeEnvironment</code> will be used.</p>
    ///          <note>
    ///             <p>This object isn't applicable to jobs running on Fargate resources.</p>
    ///          </note>
    public struct LaunchTemplateSpecification: Swift.Equatable {
        /// <p>The ID of the launch template.</p>
        public let launchTemplateId: Swift.String?
        /// <p>The name of the launch template.</p>
        public let launchTemplateName: Swift.String?
        /// <p>The version number of the launch template, <code>$Latest</code>, or <code>$Default</code>.</p>
        ///          <p>If the value is <code>$Latest</code>, the latest version of the launch template is used. If the value is
        ///     <code>$Default</code>, the default version of the launch template is used.</p>
        ///          <important>
        ///             <p>After the compute environment is created, the launch template version used will not be changed, even if the
        ///      <code>$Default</code> or <code>$Latest</code> version for the launch template is updated. To use a new launch
        ///     template version, create a new compute environment, add the new compute environment to the existing job queue,
        ///     remove the old compute environment from the job queue, and delete the old compute environment.</p>
        ///          </important>
        ///          <p>Default: <code>$Default</code>.</p>
        public let version: Swift.String?

        public init (
            launchTemplateId: Swift.String? = nil,
            launchTemplateName: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }
    }

}

extension BatchClientTypes.LinuxParameters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case devices
        case initProcessEnabled
        case maxSwap
        case sharedMemorySize
        case swappiness
        case tmpfs
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let devices = devices {
            var devicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .devices)
            for deviceslist0 in devices {
                try devicesContainer.encode(deviceslist0)
            }
        }
        if initProcessEnabled != false {
            try encodeContainer.encode(initProcessEnabled, forKey: .initProcessEnabled)
        }
        if maxSwap != 0 {
            try encodeContainer.encode(maxSwap, forKey: .maxSwap)
        }
        if sharedMemorySize != 0 {
            try encodeContainer.encode(sharedMemorySize, forKey: .sharedMemorySize)
        }
        if swappiness != 0 {
            try encodeContainer.encode(swappiness, forKey: .swappiness)
        }
        if let tmpfs = tmpfs {
            var tmpfsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tmpfs)
            for tmpfslist0 in tmpfs {
                try tmpfsContainer.encode(tmpfslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let devicesContainer = try containerValues.decodeIfPresent([BatchClientTypes.Device?].self, forKey: .devices)
        var devicesDecoded0:[BatchClientTypes.Device]? = nil
        if let devicesContainer = devicesContainer {
            devicesDecoded0 = [BatchClientTypes.Device]()
            for structure0 in devicesContainer {
                if let structure0 = structure0 {
                    devicesDecoded0?.append(structure0)
                }
            }
        }
        devices = devicesDecoded0
        let initProcessEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .initProcessEnabled)
        initProcessEnabled = initProcessEnabledDecoded
        let sharedMemorySizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .sharedMemorySize)
        sharedMemorySize = sharedMemorySizeDecoded
        let tmpfsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Tmpfs?].self, forKey: .tmpfs)
        var tmpfsDecoded0:[BatchClientTypes.Tmpfs]? = nil
        if let tmpfsContainer = tmpfsContainer {
            tmpfsDecoded0 = [BatchClientTypes.Tmpfs]()
            for structure0 in tmpfsContainer {
                if let structure0 = structure0 {
                    tmpfsDecoded0?.append(structure0)
                }
            }
        }
        tmpfs = tmpfsDecoded0
        let maxSwapDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxSwap)
        maxSwap = maxSwapDecoded
        let swappinessDecoded = try containerValues.decode(Swift.Int.self, forKey: .swappiness)
        swappiness = swappinessDecoded
    }
}

extension BatchClientTypes.LinuxParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LinuxParameters(devices: \(Swift.String(describing: devices)), initProcessEnabled: \(Swift.String(describing: initProcessEnabled)), maxSwap: \(Swift.String(describing: maxSwap)), sharedMemorySize: \(Swift.String(describing: sharedMemorySize)), swappiness: \(Swift.String(describing: swappiness)), tmpfs: \(Swift.String(describing: tmpfs)))"}
}

extension BatchClientTypes {
    /// <p>Linux-specific modifications that are applied to the container, such as details for device mappings.</p>
    public struct LinuxParameters: Swift.Equatable {
        /// <p>Any host devices to expose to the container. This parameter maps to <code>Devices</code> in the
        ///    <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--device</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources and shouldn't be provided.</p>
        ///          </note>
        public let devices: [BatchClientTypes.Device]?
        /// <p>If true, run an <code>init</code> process inside the container that forwards signals and reaps processes. This
        ///    parameter maps to the <code>--init</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.
        ///    This parameter requires version 1.25 of the Docker Remote API or greater on your
        ///  container instance. To check the Docker Remote API version on your container instance, log into your
        ///  container instance and run the following command: <code>sudo docker version | grep "Server API version"</code>
        ///          </p>
        public let initProcessEnabled: Swift.Bool
        /// <p>The total amount of swap memory (in MiB) a container can use. This parameter is translated to the
        ///     <code>--memory-swap</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a> where the value is the
        ///    sum of the container memory plus the <code>maxSwap</code> value. For more information, see <a href="https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details">
        ///                <code>--memory-swap</code> details</a> in the Docker documentation.</p>
        ///          <p>If a <code>maxSwap</code> value of <code>0</code> is specified, the container doesn't use swap. Accepted values
        ///    are <code>0</code> or any positive integer. If the <code>maxSwap</code> parameter is omitted, the container doesn't
        ///    use the swap configuration for the container instance it is running on. A <code>maxSwap</code> value must be set for
        ///    the <code>swappiness</code> parameter to be used.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources and shouldn't be provided.</p>
        ///          </note>
        public let maxSwap: Swift.Int
        /// <p>The value for the size (in MiB) of the <code>/dev/shm</code> volume. This parameter maps to the
        ///     <code>--shm-size</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources and shouldn't be provided.</p>
        ///          </note>
        public let sharedMemorySize: Swift.Int
        /// <p>This allows you to tune a container's memory swappiness behavior. A <code>swappiness</code> value of
        ///     <code>0</code> causes swapping not to happen unless absolutely necessary. A <code>swappiness</code> value of
        ///     <code>100</code> causes pages to be swapped very aggressively. Accepted values are whole numbers between
        ///     <code>0</code> and <code>100</code>. If the <code>swappiness</code> parameter isn't specified, a default value of
        ///     <code>60</code> is used. If a value isn't specified for <code>maxSwap</code> then this parameter is ignored. If
        ///     <code>maxSwap</code> is set to 0, the container doesn't use swap. This parameter maps to the
        ///     <code>--memory-swappiness</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        ///          <p>Consider the following when you use a per-container swap configuration.</p>
        ///          <ul>
        ///             <li>
        ///                <p>Swap space must be enabled and allocated on the container instance for the containers to use.</p>
        ///                <note>
        ///                   <p>The Amazon ECS optimized AMIs don't have swap enabled by default. You must enable swap on the instance to use this
        ///       feature. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-store-swap-volumes.html">Instance Store Swap Volumes</a> in the
        ///        <i>Amazon EC2 User Guide for Linux Instances</i> or <a href="http://aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/">How do I allocate memory to work as swap space in an
        ///        Amazon EC2 instance by using a swap file?</a>
        ///                   </p>
        ///                </note>
        ///             </li>
        ///             <li>
        ///                <p>The swap space parameters are only supported for job definitions using EC2 resources.</p>
        ///             </li>
        ///             <li>
        ///                <p>If the <code>maxSwap</code> and <code>swappiness</code> parameters are omitted from a job definition, each
        ///      container will have a default <code>swappiness</code> value of 60, and the total swap usage will be limited to two
        ///      times the memory reservation of the container.</p>
        ///             </li>
        ///          </ul>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources and shouldn't be provided.</p>
        ///          </note>
        public let swappiness: Swift.Int
        /// <p>The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the
        ///     <code>--tmpfs</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources and shouldn't be provided.</p>
        ///          </note>
        public let tmpfs: [BatchClientTypes.Tmpfs]?

        public init (
            devices: [BatchClientTypes.Device]? = nil,
            initProcessEnabled: Swift.Bool = false,
            maxSwap: Swift.Int = 0,
            sharedMemorySize: Swift.Int = 0,
            swappiness: Swift.Int = 0,
            tmpfs: [BatchClientTypes.Tmpfs]? = nil
        )
        {
            self.devices = devices
            self.initProcessEnabled = initProcessEnabled
            self.maxSwap = maxSwap
            self.sharedMemorySize = sharedMemorySize
            self.swappiness = swappiness
            self.tmpfs = tmpfs
        }
    }

}

public struct ListJobsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListJobsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListJobsOutputError>
}

extension ListJobsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListJobsInput(arrayJobId: \(Swift.String(describing: arrayJobId)), jobQueue: \(Swift.String(describing: jobQueue)), jobStatus: \(Swift.String(describing: jobStatus)), maxResults: \(Swift.String(describing: maxResults)), multiNodeJobId: \(Swift.String(describing: multiNodeJobId)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListJobsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayJobId
        case jobQueue
        case jobStatus
        case maxResults
        case multiNodeJobId
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayJobId = arrayJobId {
            try encodeContainer.encode(arrayJobId, forKey: .arrayJobId)
        }
        if let jobQueue = jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
        if let jobStatus = jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let multiNodeJobId = multiNodeJobId {
            try encodeContainer.encode(multiNodeJobId, forKey: .multiNodeJobId)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListJobsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListJobsOutputError>
}

public struct ListJobsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListJobsOutputError>
}

/// <p>Contains the parameters for <code>ListJobs</code>.</p>
public struct ListJobsInput: Swift.Equatable {
    /// <p>The job ID for an array job. Specifying an array job ID with this parameter lists all child jobs from within the
    ///    specified array.</p>
    public let arrayJobId: Swift.String?
    /// <p>The name or full Amazon Resource Name (ARN) of the job queue used to list jobs.</p>
    public let jobQueue: Swift.String?
    /// <p>The job status used to filter jobs in the specified queue. If you don't specify a status, only
    ///     <code>RUNNING</code> jobs are returned.</p>
    public let jobStatus: BatchClientTypes.JobStatus?
    /// <p>The maximum number of results returned by <code>ListJobs</code> in paginated output. When this parameter is
    ///    used, <code>ListJobs</code> only returns <code>maxResults</code> results in a single page and a
    ///     <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another
    ///     <code>ListJobs</code> request with the returned <code>nextToken</code> value. This value can be between
    ///    1 and 100. If this parameter isn't used, then <code>ListJobs</code> returns up to
    ///    100 results and a <code>nextToken</code> value if applicable.</p>
    public let maxResults: Swift.Int
    /// <p>The job ID for a multi-node parallel job. Specifying a multi-node parallel job ID with this parameter lists all
    ///    nodes that are associated with the specified job.</p>
    public let multiNodeJobId: Swift.String?
    /// <p>The <code>nextToken</code> value returned from a previous paginated <code>ListJobs</code> request where
    ///     <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the
    ///    end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when
    ///    there are no more results to return.</p>
    ///          <note>
    ///             <p>This token should be treated as an opaque identifier that's only used to
    ///  retrieve the next items in a list and not for other programmatic purposes.</p>
    ///          </note>
    public let nextToken: Swift.String?

    public init (
        arrayJobId: Swift.String? = nil,
        jobQueue: Swift.String? = nil,
        jobStatus: BatchClientTypes.JobStatus? = nil,
        maxResults: Swift.Int = 0,
        multiNodeJobId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.arrayJobId = arrayJobId
        self.jobQueue = jobQueue
        self.jobStatus = jobStatus
        self.maxResults = maxResults
        self.multiNodeJobId = multiNodeJobId
        self.nextToken = nextToken
    }
}

struct ListJobsInputBody: Swift.Equatable {
    public let jobQueue: Swift.String?
    public let arrayJobId: Swift.String?
    public let multiNodeJobId: Swift.String?
    public let jobStatus: BatchClientTypes.JobStatus?
    public let maxResults: Swift.Int
    public let nextToken: Swift.String?
}

extension ListJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayJobId
        case jobQueue
        case jobStatus
        case maxResults
        case multiNodeJobId
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
        let arrayJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arrayJobId)
        arrayJobId = arrayJobIdDecoded
        let multiNodeJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .multiNodeJobId)
        multiNodeJobId = multiNodeJobIdDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListJobsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListJobsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListJobsOutputResponse(jobSummaryList: \(Swift.String(describing: jobSummaryList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobSummaryList = output.jobSummaryList
            self.nextToken = output.nextToken
        } else {
            self.jobSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListJobsOutputResponse: Swift.Equatable {
    /// <p>A list of job summaries that match the request.</p>
    public let jobSummaryList: [BatchClientTypes.JobSummary]?
    /// <p>The <code>nextToken</code> value to include in a future <code>ListJobs</code> request. When the results of a
    ///     <code>ListJobs</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of
    ///    results. This value is <code>null</code> when there are no more results to return.</p>
    public let nextToken: Swift.String?

    public init (
        jobSummaryList: [BatchClientTypes.JobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobSummaryList = jobSummaryList
        self.nextToken = nextToken
    }
}

struct ListJobsOutputResponseBody: Swift.Equatable {
    public let jobSummaryList: [BatchClientTypes.JobSummary]?
    public let nextToken: Swift.String?
}

extension ListJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobSummaryList
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobSummaryListContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobSummary?].self, forKey: .jobSummaryList)
        var jobSummaryListDecoded0:[BatchClientTypes.JobSummary]? = nil
        if let jobSummaryListContainer = jobSummaryListContainer {
            jobSummaryListDecoded0 = [BatchClientTypes.JobSummary]()
            for structure0 in jobSummaryListContainer {
                if let structure0 = structure0 {
                    jobSummaryListDecoded0?.append(structure0)
                }
            }
        }
        jobSummaryList = jobSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) that identifies the resource that tags are listed for. AWS Batch resources that support tags are compute environments, jobs, job definitions, and job
    ///  queues. ARNs for child jobs of array and multi-node parallel (MNP) jobs are not supported.</p>
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// <p>The tags for the resource.</p>
    public let tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension BatchClientTypes.LogConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logDriver
        case options
        case secretOptions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDriver = logDriver {
            try encodeContainer.encode(logDriver.rawValue, forKey: .logDriver)
        }
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .options)
            for (dictKey0, logconfigurationoptionsmap0) in options {
                try optionsContainer.encode(logconfigurationoptionsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let secretOptions = secretOptions {
            var secretOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secretOptions)
            for secretlist0 in secretOptions {
                try secretOptionsContainer.encode(secretlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logDriverDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LogDriver.self, forKey: .logDriver)
        logDriver = logDriverDecoded
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .options)
        var optionsDecoded0: [Swift.String:Swift.String]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in optionsContainer {
                if let string0 = string0 {
                    optionsDecoded0?[key0] = string0
                }
            }
        }
        options = optionsDecoded0
        let secretOptionsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Secret?].self, forKey: .secretOptions)
        var secretOptionsDecoded0:[BatchClientTypes.Secret]? = nil
        if let secretOptionsContainer = secretOptionsContainer {
            secretOptionsDecoded0 = [BatchClientTypes.Secret]()
            for structure0 in secretOptionsContainer {
                if let structure0 = structure0 {
                    secretOptionsDecoded0?.append(structure0)
                }
            }
        }
        secretOptions = secretOptionsDecoded0
    }
}

extension BatchClientTypes.LogConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogConfiguration(logDriver: \(Swift.String(describing: logDriver)), options: \(Swift.String(describing: options)), secretOptions: \(Swift.String(describing: secretOptions)))"}
}

extension BatchClientTypes {
    /// <p>Log configuration options to send to a custom log driver for the container.</p>
    public struct LogConfiguration: Swift.Equatable {
        /// <p>The log driver to use for the container. The valid values listed for this parameter are log drivers that the
        ///    Amazon ECS container agent can communicate with by default.</p>
        ///          <p>The supported log drivers are <code>awslogs</code>, <code>fluentd</code>, <code>gelf</code>,
        ///     <code>json-file</code>, <code>journald</code>, <code>logentries</code>, <code>syslog</code>, and
        ///    <code>splunk</code>.</p>
        ///          <note>
        ///             <p>Jobs running on Fargate resources are restricted to the <code>awslogs</code> and <code>splunk</code> log
        ///     drivers.</p>
        ///          </note>
        ///          <dl>
        ///             <dt>awslogs</dt>
        ///             <dd>
        ///                <p>Specifies the Amazon CloudWatch Logs logging driver. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html">Using the awslogs Log Driver</a> in the
        ///        <i>AWS Batch User Guide</i> and <a href="https://docs.docker.com/config/containers/logging/awslogs/">Amazon CloudWatch Logs logging driver</a> in the Docker documentation.</p>
        ///             </dd>
        ///             <dt>fluentd</dt>
        ///             <dd>
        ///                <p>Specifies the Fluentd logging driver. For more information, including usage and options, see <a href="https://docs.docker.com/config/containers/logging/fluentd/">Fluentd logging driver</a> in the Docker
        ///       documentation.</p>
        ///             </dd>
        ///             <dt>gelf</dt>
        ///             <dd>
        ///                <p>Specifies the Graylog Extended Format (GELF) logging driver. For more information, including usage and
        ///       options, see <a href="https://docs.docker.com/config/containers/logging/gelf/">Graylog Extended Format logging
        ///        driver</a> in the Docker documentation.</p>
        ///             </dd>
        ///             <dt>journald</dt>
        ///             <dd>
        ///                <p>Specifies the journald logging driver. For more information, including usage and options, see <a href="https://docs.docker.com/config/containers/logging/journald/">Journald logging driver</a> in the Docker
        ///       documentation.</p>
        ///             </dd>
        ///             <dt>json-file</dt>
        ///             <dd>
        ///                <p>Specifies the JSON file logging driver. For more information, including usage and options, see <a href="https://docs.docker.com/config/containers/logging/json-file/">JSON File logging driver</a> in the Docker
        ///       documentation.</p>
        ///             </dd>
        ///             <dt>splunk</dt>
        ///             <dd>
        ///                <p>Specifies the Splunk logging driver. For more information, including usage and options, see <a href="https://docs.docker.com/config/containers/logging/splunk/">Splunk logging driver</a> in the Docker
        ///       documentation.</p>
        ///             </dd>
        ///             <dt>syslog</dt>
        ///             <dd>
        ///                <p>Specifies the syslog logging driver. For more information, including usage and options, see <a href="https://docs.docker.com/config/containers/logging/syslog/">Syslog logging driver</a> in the Docker
        ///       documentation.</p>
        ///             </dd>
        ///          </dl>
        ///          <note>
        ///             <p>If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you
        ///     can fork the Amazon ECS container agent project that's <a href="https://github.com/aws/amazon-ecs-agent">available on
        ///      GitHub</a> and customize it to work with that driver. We encourage you to submit pull requests for changes that
        ///     you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this
        ///     software.</p>
        ///          </note>
        ///          <p>This parameter requires version 1.18 of the Docker Remote API or greater on your
        ///  container instance. To check the Docker Remote API version on your container instance, log into your
        ///  container instance and run the following command: <code>sudo docker version | grep "Server API version"</code>
        ///          </p>
        public let logDriver: BatchClientTypes.LogDriver?
        /// <p>The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your
        ///  container instance. To check the Docker Remote API version on your container instance, log into your
        ///  container instance and run the following command: <code>sudo docker version | grep "Server API version"</code>
        ///          </p>
        public let options: [Swift.String:Swift.String]?
        /// <p>The secrets to pass to the log configuration. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html">Specifying Sensitive Data</a> in the
        ///     <i>AWS Batch User Guide</i>.</p>
        public let secretOptions: [BatchClientTypes.Secret]?

        public init (
            logDriver: BatchClientTypes.LogDriver? = nil,
            options: [Swift.String:Swift.String]? = nil,
            secretOptions: [BatchClientTypes.Secret]? = nil
        )
        {
            self.logDriver = logDriver
            self.options = options
            self.secretOptions = secretOptions
        }
    }

}

extension BatchClientTypes {
    public enum LogDriver: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awslogs
        case fluentd
        case gelf
        case journald
        case jsonFile
        case splunk
        case syslog
        case sdkUnknown(Swift.String)

        public static var allCases: [LogDriver] {
            return [
                .awslogs,
                .fluentd,
                .gelf,
                .journald,
                .jsonFile,
                .splunk,
                .syslog,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awslogs: return "awslogs"
            case .fluentd: return "fluentd"
            case .gelf: return "gelf"
            case .journald: return "journald"
            case .jsonFile: return "json-file"
            case .splunk: return "splunk"
            case .syslog: return "syslog"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogDriver(rawValue: rawValue) ?? LogDriver.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.MountPoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerPath
        case readOnly
        case sourceVolume
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerPath = containerPath {
            try encodeContainer.encode(containerPath, forKey: .containerPath)
        }
        if readOnly != false {
            try encodeContainer.encode(readOnly, forKey: .readOnly)
        }
        if let sourceVolume = sourceVolume {
            try encodeContainer.encode(sourceVolume, forKey: .sourceVolume)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerPath)
        containerPath = containerPathDecoded
        let readOnlyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
        let sourceVolumeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVolume)
        sourceVolume = sourceVolumeDecoded
    }
}

extension BatchClientTypes.MountPoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MountPoint(containerPath: \(Swift.String(describing: containerPath)), readOnly: \(Swift.String(describing: readOnly)), sourceVolume: \(Swift.String(describing: sourceVolume)))"}
}

extension BatchClientTypes {
    /// <p>Details on a Docker volume mount point that's used in a job's container properties. This parameter maps to
    ///     <code>Volumes</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.19/#create-a-container">Create a
    ///     container</a> section of the Docker Remote API and the <code>--volume</code> option to docker run.</p>
    public struct MountPoint: Swift.Equatable {
        /// <p>The path on the container where the host volume is mounted.</p>
        public let containerPath: Swift.String?
        /// <p>If this value is <code>true</code>, the container has read-only access to the volume. Otherwise, the container
        ///    can write to the volume. The default value is <code>false</code>.</p>
        public let readOnly: Swift.Bool
        /// <p>The name of the volume to mount.</p>
        public let sourceVolume: Swift.String?

        public init (
            containerPath: Swift.String? = nil,
            readOnly: Swift.Bool = false,
            sourceVolume: Swift.String? = nil
        )
        {
            self.containerPath = containerPath
            self.readOnly = readOnly
            self.sourceVolume = sourceVolume
        }
    }

}

extension BatchClientTypes.NetworkConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignPublicIp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignPublicIp = assignPublicIp {
            try encodeContainer.encode(assignPublicIp.rawValue, forKey: .assignPublicIp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignPublicIpDecoded = try containerValues.decodeIfPresent(BatchClientTypes.AssignPublicIp.self, forKey: .assignPublicIp)
        assignPublicIp = assignPublicIpDecoded
    }
}

extension BatchClientTypes.NetworkConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkConfiguration(assignPublicIp: \(Swift.String(describing: assignPublicIp)))"}
}

extension BatchClientTypes {
    /// <p>The network configuration for jobs running on Fargate resources. Jobs running on EC2 resources must not
    ///    specify this parameter.</p>
    public struct NetworkConfiguration: Swift.Equatable {
        /// <p>Indicates whether the job should have a public IP address. For a job running on Fargate resources in a private
        ///    subnet to send outbound traffic to the internet (for example, in order to pull container images), the private subnet
        ///    requires a NAT gateway be attached to route requests to the internet. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html">Amazon ECS task networking</a>. The
        ///    default value is "DISABLED".</p>
        public let assignPublicIp: BatchClientTypes.AssignPublicIp?

        public init (
            assignPublicIp: BatchClientTypes.AssignPublicIp? = nil
        )
        {
            self.assignPublicIp = assignPublicIp
        }
    }

}

extension BatchClientTypes.NetworkInterface: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentId
        case ipv6Address
        case privateIpv4Address
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentId = attachmentId {
            try encodeContainer.encode(attachmentId, forKey: .attachmentId)
        }
        if let ipv6Address = ipv6Address {
            try encodeContainer.encode(ipv6Address, forKey: .ipv6Address)
        }
        if let privateIpv4Address = privateIpv4Address {
            try encodeContainer.encode(privateIpv4Address, forKey: .privateIpv4Address)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachmentId)
        attachmentId = attachmentIdDecoded
        let ipv6AddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipv6Address)
        ipv6Address = ipv6AddressDecoded
        let privateIpv4AddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpv4Address)
        privateIpv4Address = privateIpv4AddressDecoded
    }
}

extension BatchClientTypes.NetworkInterface: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkInterface(attachmentId: \(Swift.String(describing: attachmentId)), ipv6Address: \(Swift.String(describing: ipv6Address)), privateIpv4Address: \(Swift.String(describing: privateIpv4Address)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the elastic network interface for a multi-node parallel job node.</p>
    public struct NetworkInterface: Swift.Equatable {
        /// <p>The attachment ID for the network interface.</p>
        public let attachmentId: Swift.String?
        /// <p>The private IPv6 address for the network interface.</p>
        public let ipv6Address: Swift.String?
        /// <p>The private IPv4 address for the network interface.</p>
        public let privateIpv4Address: Swift.String?

        public init (
            attachmentId: Swift.String? = nil,
            ipv6Address: Swift.String? = nil,
            privateIpv4Address: Swift.String? = nil
        )
        {
            self.attachmentId = attachmentId
            self.ipv6Address = ipv6Address
            self.privateIpv4Address = privateIpv4Address
        }
    }

}

extension BatchClientTypes.NodeDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isMainNode
        case nodeIndex
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if isMainNode != false {
            try encodeContainer.encode(isMainNode, forKey: .isMainNode)
        }
        if nodeIndex != 0 {
            try encodeContainer.encode(nodeIndex, forKey: .nodeIndex)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeIndexDecoded = try containerValues.decode(Swift.Int.self, forKey: .nodeIndex)
        nodeIndex = nodeIndexDecoded
        let isMainNodeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isMainNode)
        isMainNode = isMainNodeDecoded
    }
}

extension BatchClientTypes.NodeDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeDetails(isMainNode: \(Swift.String(describing: isMainNode)), nodeIndex: \(Swift.String(describing: nodeIndex)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the details of a multi-node parallel job node.</p>
    public struct NodeDetails: Swift.Equatable {
        /// <p>Specifies whether the current node is the main node for a multi-node parallel job.</p>
        public let isMainNode: Swift.Bool
        /// <p>The node index for the node. Node index numbering begins at zero. This index is also available on the node with
        ///    the <code>AWS_BATCH_JOB_NODE_INDEX</code> environment variable.</p>
        public let nodeIndex: Swift.Int

        public init (
            isMainNode: Swift.Bool = false,
            nodeIndex: Swift.Int = 0
        )
        {
            self.isMainNode = isMainNode
            self.nodeIndex = nodeIndex
        }
    }

}

extension BatchClientTypes.NodeOverrides: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodePropertyOverrides
        case numNodes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nodePropertyOverrides = nodePropertyOverrides {
            var nodePropertyOverridesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nodePropertyOverrides)
            for nodepropertyoverrides0 in nodePropertyOverrides {
                try nodePropertyOverridesContainer.encode(nodepropertyoverrides0)
            }
        }
        if numNodes != 0 {
            try encodeContainer.encode(numNodes, forKey: .numNodes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numNodesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numNodes)
        numNodes = numNodesDecoded
        let nodePropertyOverridesContainer = try containerValues.decodeIfPresent([BatchClientTypes.NodePropertyOverride?].self, forKey: .nodePropertyOverrides)
        var nodePropertyOverridesDecoded0:[BatchClientTypes.NodePropertyOverride]? = nil
        if let nodePropertyOverridesContainer = nodePropertyOverridesContainer {
            nodePropertyOverridesDecoded0 = [BatchClientTypes.NodePropertyOverride]()
            for structure0 in nodePropertyOverridesContainer {
                if let structure0 = structure0 {
                    nodePropertyOverridesDecoded0?.append(structure0)
                }
            }
        }
        nodePropertyOverrides = nodePropertyOverridesDecoded0
    }
}

extension BatchClientTypes.NodeOverrides: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeOverrides(nodePropertyOverrides: \(Swift.String(describing: nodePropertyOverrides)), numNodes: \(Swift.String(describing: numNodes)))"}
}

extension BatchClientTypes {
    /// <p>Object representing any node overrides to a job definition that's used in a <a>SubmitJob</a> API
    ///    operation.</p>
    ///          <note>
    ///             <p>This isn't applicable to jobs running on Fargate resources and shouldn't be provided; use
    ///      <code>containerOverrides</code> instead.</p>
    ///          </note>
    public struct NodeOverrides: Swift.Equatable {
        /// <p>The node property overrides for the job.</p>
        public let nodePropertyOverrides: [BatchClientTypes.NodePropertyOverride]?
        /// <p>The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are
        ///    specified in the job definition. To use this override:</p>
        ///          <ul>
        ///             <li>
        ///                <p>There must be at least one node range in your job definition that has an open upper boundary (such as
        ///       <code>:</code> or <code>n:</code>).</p>
        ///             </li>
        ///             <li>
        ///                <p>The lower boundary of the node range specified in the job definition must be fewer than the number of nodes
        ///      specified in the override.</p>
        ///             </li>
        ///             <li>
        ///                <p>The main node index specified in the job definition must be fewer than the number of nodes specified in the
        ///      override.</p>
        ///             </li>
        ///          </ul>
        public let numNodes: Swift.Int

        public init (
            nodePropertyOverrides: [BatchClientTypes.NodePropertyOverride]? = nil,
            numNodes: Swift.Int = 0
        )
        {
            self.nodePropertyOverrides = nodePropertyOverrides
            self.numNodes = numNodes
        }
    }

}

extension BatchClientTypes.NodeProperties: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mainNode
        case nodeRangeProperties
        case numNodes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if mainNode != 0 {
            try encodeContainer.encode(mainNode, forKey: .mainNode)
        }
        if let nodeRangeProperties = nodeRangeProperties {
            var nodeRangePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nodeRangeProperties)
            for noderangeproperties0 in nodeRangeProperties {
                try nodeRangePropertiesContainer.encode(noderangeproperties0)
            }
        }
        if numNodes != 0 {
            try encodeContainer.encode(numNodes, forKey: .numNodes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numNodesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numNodes)
        numNodes = numNodesDecoded
        let mainNodeDecoded = try containerValues.decode(Swift.Int.self, forKey: .mainNode)
        mainNode = mainNodeDecoded
        let nodeRangePropertiesContainer = try containerValues.decodeIfPresent([BatchClientTypes.NodeRangeProperty?].self, forKey: .nodeRangeProperties)
        var nodeRangePropertiesDecoded0:[BatchClientTypes.NodeRangeProperty]? = nil
        if let nodeRangePropertiesContainer = nodeRangePropertiesContainer {
            nodeRangePropertiesDecoded0 = [BatchClientTypes.NodeRangeProperty]()
            for structure0 in nodeRangePropertiesContainer {
                if let structure0 = structure0 {
                    nodeRangePropertiesDecoded0?.append(structure0)
                }
            }
        }
        nodeRangeProperties = nodeRangePropertiesDecoded0
    }
}

extension BatchClientTypes.NodeProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeProperties(mainNode: \(Swift.String(describing: mainNode)), nodeRangeProperties: \(Swift.String(describing: nodeRangeProperties)), numNodes: \(Swift.String(describing: numNodes)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the node properties of a multi-node parallel job.</p>
    public struct NodeProperties: Swift.Equatable {
        /// <p>Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer
        ///    than the number of nodes.</p>
        public let mainNode: Swift.Int
        /// <p>A list of node ranges and their properties associated with a multi-node parallel job.</p>
        public let nodeRangeProperties: [BatchClientTypes.NodeRangeProperty]?
        /// <p>The number of nodes associated with a multi-node parallel job.</p>
        public let numNodes: Swift.Int

        public init (
            mainNode: Swift.Int = 0,
            nodeRangeProperties: [BatchClientTypes.NodeRangeProperty]? = nil,
            numNodes: Swift.Int = 0
        )
        {
            self.mainNode = mainNode
            self.nodeRangeProperties = nodeRangeProperties
            self.numNodes = numNodes
        }
    }

}

extension BatchClientTypes.NodePropertiesSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isMainNode
        case nodeIndex
        case numNodes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if isMainNode != false {
            try encodeContainer.encode(isMainNode, forKey: .isMainNode)
        }
        if nodeIndex != 0 {
            try encodeContainer.encode(nodeIndex, forKey: .nodeIndex)
        }
        if numNodes != 0 {
            try encodeContainer.encode(numNodes, forKey: .numNodes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isMainNodeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isMainNode)
        isMainNode = isMainNodeDecoded
        let numNodesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numNodes)
        numNodes = numNodesDecoded
        let nodeIndexDecoded = try containerValues.decode(Swift.Int.self, forKey: .nodeIndex)
        nodeIndex = nodeIndexDecoded
    }
}

extension BatchClientTypes.NodePropertiesSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodePropertiesSummary(isMainNode: \(Swift.String(describing: isMainNode)), nodeIndex: \(Swift.String(describing: nodeIndex)), numNodes: \(Swift.String(describing: numNodes)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the properties of a node that's associated with a multi-node parallel job.</p>
    public struct NodePropertiesSummary: Swift.Equatable {
        /// <p>Specifies whether the current node is the main node for a multi-node parallel job.</p>
        public let isMainNode: Swift.Bool
        /// <p>The node index for the node. Node index numbering begins at zero. This index is also available on the node with
        ///    the <code>AWS_BATCH_JOB_NODE_INDEX</code> environment variable.</p>
        public let nodeIndex: Swift.Int
        /// <p>The number of nodes associated with a multi-node parallel job.</p>
        public let numNodes: Swift.Int

        public init (
            isMainNode: Swift.Bool = false,
            nodeIndex: Swift.Int = 0,
            numNodes: Swift.Int = 0
        )
        {
            self.isMainNode = isMainNode
            self.nodeIndex = nodeIndex
            self.numNodes = numNodes
        }
    }

}

extension BatchClientTypes.NodePropertyOverride: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerOverrides
        case targetNodes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerOverrides = containerOverrides {
            try encodeContainer.encode(containerOverrides, forKey: .containerOverrides)
        }
        if let targetNodes = targetNodes {
            try encodeContainer.encode(targetNodes, forKey: .targetNodes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetNodesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetNodes)
        targetNodes = targetNodesDecoded
        let containerOverridesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerOverrides.self, forKey: .containerOverrides)
        containerOverrides = containerOverridesDecoded
    }
}

extension BatchClientTypes.NodePropertyOverride: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodePropertyOverride(containerOverrides: \(Swift.String(describing: containerOverrides)), targetNodes: \(Swift.String(describing: targetNodes)))"}
}

extension BatchClientTypes {
    /// <p>Object representing any node overrides to a job definition that's used in a <a>SubmitJob</a> API
    ///    operation.</p>
    public struct NodePropertyOverride: Swift.Equatable {
        /// <p>The overrides that should be sent to a node range.</p>
        public let containerOverrides: BatchClientTypes.ContainerOverrides?
        /// <p>The range of nodes, using node index values, that's used to override. A range of <code>0:3</code> indicates
        ///    nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted
        ///     (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted
        ///     (<code>n:</code>), then the highest possible node index is used to end the range.</p>
        public let targetNodes: Swift.String?

        public init (
            containerOverrides: BatchClientTypes.ContainerOverrides? = nil,
            targetNodes: Swift.String? = nil
        )
        {
            self.containerOverrides = containerOverrides
            self.targetNodes = targetNodes
        }
    }

}

extension BatchClientTypes.NodeRangeProperty: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case container
        case targetNodes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let container = container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if let targetNodes = targetNodes {
            try encodeContainer.encode(targetNodes, forKey: .targetNodes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetNodesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetNodes)
        targetNodes = targetNodesDecoded
        let containerDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerProperties.self, forKey: .container)
        container = containerDecoded
    }
}

extension BatchClientTypes.NodeRangeProperty: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeRangeProperty(container: \(Swift.String(describing: container)), targetNodes: \(Swift.String(describing: targetNodes)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the properties of the node range for a multi-node parallel job.</p>
    public struct NodeRangeProperty: Swift.Equatable {
        /// <p>The container details for the node range.</p>
        public let container: BatchClientTypes.ContainerProperties?
        /// <p>The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of
        ///     <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code>
        ///    is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node
        ///    index is used to end the range. Your accumulative node ranges must account for all nodes (<code>0:n</code>). You can
        ///    nest node ranges, for example <code>0:10</code> and <code>4:5</code>, in which case the <code>4:5</code> range
        ///    properties override the <code>0:10</code> properties.</p>
        public let targetNodes: Swift.String?

        public init (
            container: BatchClientTypes.ContainerProperties? = nil,
            targetNodes: Swift.String? = nil
        )
        {
            self.container = container
            self.targetNodes = targetNodes
        }
    }

}

extension BatchClientTypes {
    public enum PlatformCapability: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ec2
        case fargate
        case sdkUnknown(Swift.String)

        public static var allCases: [PlatformCapability] {
            return [
                .ec2,
                .fargate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .fargate: return "FARGATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PlatformCapability(rawValue: rawValue) ?? PlatformCapability.sdkUnknown(rawValue)
        }
    }
}

public struct RegisterJobDefinitionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterJobDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterJobDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterJobDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterJobDefinitionOutputError>
}

extension RegisterJobDefinitionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterJobDefinitionInput(containerProperties: \(Swift.String(describing: containerProperties)), jobDefinitionName: \(Swift.String(describing: jobDefinitionName)), nodeProperties: \(Swift.String(describing: nodeProperties)), parameters: \(Swift.String(describing: parameters)), platformCapabilities: \(Swift.String(describing: platformCapabilities)), propagateTags: \(Swift.String(describing: propagateTags)), retryStrategy: \(Swift.String(describing: retryStrategy)), tags: \(Swift.String(describing: tags)), timeout: \(Swift.String(describing: timeout)), type: \(Swift.String(describing: type)))"}
}

extension RegisterJobDefinitionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerProperties
        case jobDefinitionName
        case nodeProperties
        case parameters
        case platformCapabilities
        case propagateTags
        case retryStrategy
        case tags
        case timeout
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerProperties = containerProperties {
            try encodeContainer.encode(containerProperties, forKey: .containerProperties)
        }
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let nodeProperties = nodeProperties {
            try encodeContainer.encode(nodeProperties, forKey: .nodeProperties)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let platformCapabilities = platformCapabilities {
            var platformCapabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformCapabilities)
            for platformcapabilitylist0 in platformCapabilities {
                try platformCapabilitiesContainer.encode(platformcapabilitylist0.rawValue)
            }
        }
        if propagateTags != false {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct RegisterJobDefinitionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterJobDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterJobDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterJobDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterJobDefinitionOutputError>
}

public struct RegisterJobDefinitionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterJobDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterJobDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterJobDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterJobDefinitionOutputError>
}

/// <p>Contains the parameters for <code>RegisterJobDefinition</code>.</p>
public struct RegisterJobDefinitionInput: Swift.Equatable {
    /// <p>An object with various properties specific to single-node container-based jobs. If the job definition's
    ///     <code>type</code> parameter is <code>container</code>, then you must specify either <code>containerProperties</code>
    ///    or <code>nodeProperties</code>.</p>
    ///          <note>
    ///             <p>If the job runs on Fargate resources, then you must not specify <code>nodeProperties</code>; use only
    ///      <code>containerProperties</code>.</p>
    ///          </note>
    public let containerProperties: BatchClientTypes.ContainerProperties?
    /// <p>The name of the job definition to register. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and
    ///    underscores are allowed.</p>
    public let jobDefinitionName: Swift.String?
    /// <p>An object with various properties specific to multi-node parallel jobs. If you specify node properties for a
    ///    job, it becomes a multi-node parallel job. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/multi-node-parallel-jobs.html">Multi-node Parallel Jobs</a> in the
    ///     <i>AWS Batch User Guide</i>. If the job definition's <code>type</code> parameter is
    ///    <code>container</code>, then you must specify either <code>containerProperties</code> or
    ///    <code>nodeProperties</code>.</p>
    ///          <note>
    ///             <p>If the job runs on Fargate resources, then you must not specify <code>nodeProperties</code>; use
    ///      <code>containerProperties</code> instead.</p>
    ///          </note>
    public let nodeProperties: BatchClientTypes.NodeProperties?
    /// <p>Default parameter substitution placeholders to set in the job definition. Parameters are specified as a
    ///    key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults
    ///    from the job definition.</p>
    public let parameters: [Swift.String:Swift.String]?
    /// <p>The platform capabilities required by the job definition. If no value is specified, it defaults to
    ///     <code>EC2</code>. To run the job on Fargate resources, specify <code>FARGATE</code>.</p>
    public let platformCapabilities: [BatchClientTypes.PlatformCapability]?
    /// <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no
    ///    value is specified, the tags are not propagated. Tags can only be propagated to the tasks during task creation. For
    ///    tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags
    ///    from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state.</p>
    public let propagateTags: Swift.Bool
    /// <p>The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that's
    ///    specified during a <a>SubmitJob</a> operation overrides the retry strategy defined here. If a job is
    ///    terminated due to a timeout, it isn't retried.</p>
    public let retryStrategy: BatchClientTypes.RetryStrategy?
    /// <p>The tags that you apply to the job definition to help you categorize and organize your resources. Each tag
    ///    consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging AWS Resources</a> in <i>AWS Batch User Guide</i>.</p>
    public let tags: [Swift.String:Swift.String]?
    /// <p>The timeout configuration for jobs that are submitted with this job definition, after which AWS Batch terminates
    ///    your jobs if they have not finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for
    ///    the timeout is 60 seconds. Any timeout configuration that's specified during a <a>SubmitJob</a> operation
    ///    overrides the timeout configuration defined here. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_timeouts.html">Job Timeouts</a> in the <i>AWS Batch User Guide</i>.</p>
    public let timeout: BatchClientTypes.JobTimeout?
    /// <p>The type of job definition. For more information about multi-node parallel jobs, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html">Creating a multi-node parallel job definition</a> in the
    ///     <i>AWS Batch User Guide</i>.</p>
    ///          <note>
    ///             <p>If the job is run on Fargate resources, then <code>multinode</code> isn't supported.</p>
    ///          </note>
    public let type: BatchClientTypes.JobDefinitionType?

    public init (
        containerProperties: BatchClientTypes.ContainerProperties? = nil,
        jobDefinitionName: Swift.String? = nil,
        nodeProperties: BatchClientTypes.NodeProperties? = nil,
        parameters: [Swift.String:Swift.String]? = nil,
        platformCapabilities: [BatchClientTypes.PlatformCapability]? = nil,
        propagateTags: Swift.Bool = false,
        retryStrategy: BatchClientTypes.RetryStrategy? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        timeout: BatchClientTypes.JobTimeout? = nil,
        type: BatchClientTypes.JobDefinitionType? = nil
    )
    {
        self.containerProperties = containerProperties
        self.jobDefinitionName = jobDefinitionName
        self.nodeProperties = nodeProperties
        self.parameters = parameters
        self.platformCapabilities = platformCapabilities
        self.propagateTags = propagateTags
        self.retryStrategy = retryStrategy
        self.tags = tags
        self.timeout = timeout
        self.type = type
    }
}

struct RegisterJobDefinitionInputBody: Swift.Equatable {
    public let jobDefinitionName: Swift.String?
    public let type: BatchClientTypes.JobDefinitionType?
    public let parameters: [Swift.String:Swift.String]?
    public let containerProperties: BatchClientTypes.ContainerProperties?
    public let nodeProperties: BatchClientTypes.NodeProperties?
    public let retryStrategy: BatchClientTypes.RetryStrategy?
    public let propagateTags: Swift.Bool
    public let timeout: BatchClientTypes.JobTimeout?
    public let tags: [Swift.String:Swift.String]?
    public let platformCapabilities: [BatchClientTypes.PlatformCapability]?
}

extension RegisterJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerProperties
        case jobDefinitionName
        case nodeProperties
        case parameters
        case platformCapabilities
        case propagateTags
        case retryStrategy
        case tags
        case timeout
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobDefinitionType.self, forKey: .type)
        type = typeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in parametersContainer {
                if let string0 = string0 {
                    parametersDecoded0?[key0] = string0
                }
            }
        }
        parameters = parametersDecoded0
        let containerPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerProperties.self, forKey: .containerProperties)
        containerProperties = containerPropertiesDecoded
        let nodePropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodeProperties.self, forKey: .nodeProperties)
        nodeProperties = nodePropertiesDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let propagateTagsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let platformCapabilitiesContainer = try containerValues.decodeIfPresent([BatchClientTypes.PlatformCapability?].self, forKey: .platformCapabilities)
        var platformCapabilitiesDecoded0:[BatchClientTypes.PlatformCapability]? = nil
        if let platformCapabilitiesContainer = platformCapabilitiesContainer {
            platformCapabilitiesDecoded0 = [BatchClientTypes.PlatformCapability]()
            for string0 in platformCapabilitiesContainer {
                if let string0 = string0 {
                    platformCapabilitiesDecoded0?.append(string0)
                }
            }
        }
        platformCapabilities = platformCapabilitiesDecoded0
    }
}

extension RegisterJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterJobDefinitionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterJobDefinitionOutputResponse(jobDefinitionArn: \(Swift.String(describing: jobDefinitionArn)), jobDefinitionName: \(Swift.String(describing: jobDefinitionName)), revision: \(Swift.String(describing: revision)))"}
}

extension RegisterJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RegisterJobDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitionArn = output.jobDefinitionArn
            self.jobDefinitionName = output.jobDefinitionName
            self.revision = output.revision
        } else {
            self.jobDefinitionArn = nil
            self.jobDefinitionName = nil
            self.revision = 0
        }
    }
}

public struct RegisterJobDefinitionOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the job definition.</p>
    public let jobDefinitionArn: Swift.String?
    /// <p>The name of the job definition.</p>
    public let jobDefinitionName: Swift.String?
    /// <p>The revision of the job definition.</p>
    public let revision: Swift.Int

    public init (
        jobDefinitionArn: Swift.String? = nil,
        jobDefinitionName: Swift.String? = nil,
        revision: Swift.Int = 0
    )
    {
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.revision = revision
    }
}

struct RegisterJobDefinitionOutputResponseBody: Swift.Equatable {
    public let jobDefinitionName: Swift.String?
    public let jobDefinitionArn: Swift.String?
    public let revision: Swift.Int
}

extension RegisterJobDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionArn
        case jobDefinitionName
        case revision
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
        let revisionDecoded = try containerValues.decode(Swift.Int.self, forKey: .revision)
        revision = revisionDecoded
    }
}

extension BatchClientTypes.ResourceRequirement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ResourceType.self, forKey: .type)
        type = typeDecoded
    }
}

extension BatchClientTypes.ResourceRequirement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceRequirement(type: \(Swift.String(describing: type)), value: \(Swift.String(describing: value)))"}
}

extension BatchClientTypes {
    /// <p>The type and amount of a resource to assign to a container. The supported resources include <code>GPU</code>,
    ///     <code>MEMORY</code>, and <code>VCPU</code>.</p>
    public struct ResourceRequirement: Swift.Equatable {
        /// <p>The type of resource to assign to a container. The supported resources include <code>GPU</code>,
        ///     <code>MEMORY</code>, and <code>VCPU</code>.</p>
        public let type: BatchClientTypes.ResourceType?
        /// <p>The quantity of the specified resource to reserve for the container. The values vary based on the
        ///     <code>type</code> specified.</p>
        ///          <dl>
        ///             <dt>type="GPU"</dt>
        ///             <dd>
        ///                <p>The number of physical GPUs to reserve for the container. The number of GPUs reserved for all containers in a
        ///       job shouldn't exceed the number of available GPUs on the compute resource that the job is launched on.</p>
        ///                <note>
        ///                   <p>GPUs are not available for jobs running on Fargate resources.</p>
        ///                </note>
        ///             </dd>
        ///             <dt>type="MEMORY"</dt>
        ///             <dd>
        ///                <p>The memory hard limit (in MiB) present to the container. This parameter is supported for jobs running on EC2
        ///       resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter
        ///       maps to <code>Memory</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the
        ///        <code>--memory</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. You must specify at least
        ///       4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP)
        ///       jobs. It must be specified for each node at least once. This parameter maps to <code>Memory</code> in the
        ///       <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--memory</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        ///                <note>
        ///                   <p>If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for
        ///        a particular instance type, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html">Memory
        ///         Management</a> in the <i>AWS Batch User Guide</i>.</p>
        ///                </note>
        ///                <p>For jobs running on Fargate resources, then <code>value</code> is the hard limit (in MiB), and must match
        ///       one of the supported values and the <code>VCPU</code> values must be one of the values supported for that memory
        ///       value.</p>
        ///                <dl>
        ///                   <dt>value = 512</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>VCPU</code> = 0.25</p>
        ///                      </dd>
        ///                   <dt>value = 1024</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>VCPU</code> = 0.25 or 0.5</p>
        ///                      </dd>
        ///                   <dt>value = 2048</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>VCPU</code> = 0.25, 0.5, or 1</p>
        ///                      </dd>
        ///                   <dt>value = 3072</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>VCPU</code> = 0.5, or 1</p>
        ///                      </dd>
        ///                   <dt>value = 4096</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>VCPU</code> = 0.5, 1, or 2</p>
        ///                      </dd>
        ///                   <dt>value = 5120, 6144, or 7168</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>VCPU</code> = 1 or 2</p>
        ///                      </dd>
        ///                   <dt>value = 8192</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>VCPU</code> = 1, 2, or 4</p>
        ///                      </dd>
        ///                   <dt>value = 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>VCPU</code> = 2 or 4</p>
        ///                      </dd>
        ///                   <dt>value = 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>VCPU</code> = 4</p>
        ///                      </dd>
        ///                </dl>
        ///             </dd>
        ///             <dt>type="VCPU"</dt>
        ///             <dd>
        ///                <p>The number of vCPUs reserved for the container. This parameter maps to <code>CpuShares</code> in the
        ///       <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--cpu-shares</code> option to
        ///        <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. Each vCPU is equivalent to 1,024 CPU shares. For EC2
        ///       resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be
        ///       specified for each node at least once.</p>
        ///                <p>For jobs running on Fargate resources, then <code>value</code> must match one of the supported values and
        ///       the <code>MEMORY</code> values must be one of the values supported for that VCPU value. The supported values are
        ///       0.25, 0.5, 1, 2, and 4</p>
        ///                <dl>
        ///                   <dt>value = 0.25</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>MEMORY</code> = 512, 1024, or 2048</p>
        ///                      </dd>
        ///                   <dt>value = 0.5</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>MEMORY</code> = 1024, 2048, 3072, or 4096</p>
        ///                      </dd>
        ///                   <dt>value = 1</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>MEMORY</code> = 2048, 3072, 4096, 5120, 6144, 7168, or 8192</p>
        ///                      </dd>
        ///                   <dt>value = 2</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>MEMORY</code> = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384</p>
        ///                      </dd>
        ///                   <dt>value = 4</dt>
        ///                   <dd>
        ///                         <p>
        ///                            <code>MEMORY</code> = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456,
        ///      20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720</p>
        ///                      </dd>
        ///                </dl>
        ///             </dd>
        ///          </dl>
        public let value: Swift.String?

        public init (
            type: BatchClientTypes.ResourceType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension BatchClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gpu
        case memory
        case vcpu
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .gpu,
                .memory,
                .vcpu,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gpu: return "GPU"
            case .memory: return "MEMORY"
            case .vcpu: return "VCPU"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum RetryAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exit
        case retry
        case sdkUnknown(Swift.String)

        public static var allCases: [RetryAction] {
            return [
                .exit,
                .retry,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exit: return "EXIT"
            case .retry: return "RETRY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RetryAction(rawValue: rawValue) ?? RetryAction.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.RetryStrategy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attempts
        case evaluateOnExit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if attempts != 0 {
            try encodeContainer.encode(attempts, forKey: .attempts)
        }
        if let evaluateOnExit = evaluateOnExit {
            var evaluateOnExitContainer = encodeContainer.nestedUnkeyedContainer(forKey: .evaluateOnExit)
            for evaluateonexitlist0 in evaluateOnExit {
                try evaluateOnExitContainer.encode(evaluateonexitlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attemptsDecoded = try containerValues.decode(Swift.Int.self, forKey: .attempts)
        attempts = attemptsDecoded
        let evaluateOnExitContainer = try containerValues.decodeIfPresent([BatchClientTypes.EvaluateOnExit?].self, forKey: .evaluateOnExit)
        var evaluateOnExitDecoded0:[BatchClientTypes.EvaluateOnExit]? = nil
        if let evaluateOnExitContainer = evaluateOnExitContainer {
            evaluateOnExitDecoded0 = [BatchClientTypes.EvaluateOnExit]()
            for structure0 in evaluateOnExitContainer {
                if let structure0 = structure0 {
                    evaluateOnExitDecoded0?.append(structure0)
                }
            }
        }
        evaluateOnExit = evaluateOnExitDecoded0
    }
}

extension BatchClientTypes.RetryStrategy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RetryStrategy(attempts: \(Swift.String(describing: attempts)), evaluateOnExit: \(Swift.String(describing: evaluateOnExit)))"}
}

extension BatchClientTypes {
    /// <p>The retry strategy associated with a job. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_retries.html">Automated job retries</a> in the <i>AWS Batch User Guide</i>.</p>
    public struct RetryStrategy: Swift.Equatable {
        /// <p>The number of times to move a job to the <code>RUNNABLE</code> status. You can specify between 1 and 10
        ///    attempts. If the value of <code>attempts</code> is greater than one, the job is retried on failure the same number of
        ///    attempts as the value.</p>
        public let attempts: Swift.Int
        /// <p>Array of up to 5 objects that specify conditions under which the job should be retried or failed. If this
        ///    parameter is specified, then the <code>attempts</code> parameter must also be specified.</p>
        public let evaluateOnExit: [BatchClientTypes.EvaluateOnExit]?

        public init (
            attempts: Swift.Int = 0,
            evaluateOnExit: [BatchClientTypes.EvaluateOnExit]? = nil
        )
        {
            self.attempts = attempts
            self.evaluateOnExit = evaluateOnExit
        }
    }

}

extension BatchClientTypes.Secret: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case valueFrom
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let valueFrom = valueFrom {
            try encodeContainer.encode(valueFrom, forKey: .valueFrom)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueFromDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .valueFrom)
        valueFrom = valueFromDecoded
    }
}

extension BatchClientTypes.Secret: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Secret(name: \(Swift.String(describing: name)), valueFrom: \(Swift.String(describing: valueFrom)))"}
}

extension BatchClientTypes {
    /// <p>An object representing the secret to expose to your container. Secrets can be exposed to a container in the
    ///    following ways:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To inject sensitive data into your containers as environment variables, use the <code>secrets</code> container
    ///      definition parameter.</p>
    ///             </li>
    ///             <li>
    ///                <p>To reference sensitive information in the log configuration of a container, use the <code>secretOptions</code>
    ///      container definition parameter.</p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html">Specifying
    ///     sensitive data</a> in the <i>AWS Batch User Guide</i>.</p>
    public struct Secret: Swift.Equatable {
        /// <p>The name of the secret.</p>
        public let name: Swift.String?
        /// <p>The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the
        ///    full ARN of the parameter in the AWS Systems Manager Parameter Store.</p>
        ///          <note>
        ///             <p>If the AWS Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use
        ///     either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must
        ///     be specified.</p>
        ///          </note>
        public let valueFrom: Swift.String?

        public init (
            name: Swift.String? = nil,
            valueFrom: Swift.String? = nil
        )
        {
            self.name = name
            self.valueFrom = valueFrom
        }
    }

}

extension ServerException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServerException(message: \(Swift.String(describing: message)))"}
}

extension ServerException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>These errors are usually caused by a server issue.</p>
public struct ServerException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServerExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct SubmitJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SubmitJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SubmitJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SubmitJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SubmitJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SubmitJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SubmitJobOutputError>
}

extension SubmitJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SubmitJobInput(arrayProperties: \(Swift.String(describing: arrayProperties)), containerOverrides: \(Swift.String(describing: containerOverrides)), dependsOn: \(Swift.String(describing: dependsOn)), jobDefinition: \(Swift.String(describing: jobDefinition)), jobName: \(Swift.String(describing: jobName)), jobQueue: \(Swift.String(describing: jobQueue)), nodeOverrides: \(Swift.String(describing: nodeOverrides)), parameters: \(Swift.String(describing: parameters)), propagateTags: \(Swift.String(describing: propagateTags)), retryStrategy: \(Swift.String(describing: retryStrategy)), tags: \(Swift.String(describing: tags)), timeout: \(Swift.String(describing: timeout)))"}
}

extension SubmitJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties
        case containerOverrides
        case dependsOn
        case jobDefinition
        case jobName
        case jobQueue
        case nodeOverrides
        case parameters
        case propagateTags
        case retryStrategy
        case tags
        case timeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayProperties = arrayProperties {
            try encodeContainer.encode(arrayProperties, forKey: .arrayProperties)
        }
        if let containerOverrides = containerOverrides {
            try encodeContainer.encode(containerOverrides, forKey: .containerOverrides)
        }
        if let dependsOn = dependsOn {
            var dependsOnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOn)
            for jobdependencylist0 in dependsOn {
                try dependsOnContainer.encode(jobdependencylist0)
            }
        }
        if let jobDefinition = jobDefinition {
            try encodeContainer.encode(jobDefinition, forKey: .jobDefinition)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobQueue = jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
        if let nodeOverrides = nodeOverrides {
            try encodeContainer.encode(nodeOverrides, forKey: .nodeOverrides)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if propagateTags != false {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }
}

public struct SubmitJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SubmitJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SubmitJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SubmitJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SubmitJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SubmitJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SubmitJobOutputError>
}

public struct SubmitJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SubmitJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SubmitJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SubmitJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SubmitJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SubmitJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SubmitJobOutputError>
}

/// <p>Contains the parameters for <code>SubmitJob</code>.</p>
public struct SubmitJobInput: Swift.Equatable {
    /// <p>The array properties for the submitted job, such as the size of the array. The array size can be between 2 and
    ///    10,000. If you specify array properties for a job, it becomes an array job. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/array_jobs.html">Array Jobs</a> in the
    ///    <i>AWS Batch User Guide</i>.</p>
    public let arrayProperties: BatchClientTypes.ArrayProperties?
    /// <p>A list of container overrides in the JSON format that specify the name of a container in the specified job
    ///    definition and the overrides it should receive. You can override the default command for a container, which is
    ///    specified in the job definition or the Docker image, with a <code>command</code> override. You can also override
    ///    existing environment variables on a container or add new environment variables to it with an <code>environment</code>
    ///    override.</p>
    public let containerOverrides: BatchClientTypes.ContainerOverrides?
    /// <p>A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a
    ///     <code>SEQUENTIAL</code> type dependency without specifying a job ID for array jobs so that each child array job
    ///    completes sequentially, starting at index 0. You can also specify an <code>N_TO_N</code> type dependency with a job
    ///    ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each
    ///    dependency to complete before it can begin.</p>
    public let dependsOn: [BatchClientTypes.JobDependency]?
    /// <p>The job definition used by this job. This value can be one of <code>name</code>, <code>name:revision</code>, or
    ///    the Amazon Resource Name (ARN) for the job definition. If <code>name</code> is specified without a revision then the latest active
    ///    revision is used.</p>
    public let jobDefinition: Swift.String?
    /// <p>The name of the job. The first character must be alphanumeric, and up to 128 letters (uppercase and lowercase),
    ///    numbers, hyphens, and underscores are allowed.</p>
    public let jobName: Swift.String?
    /// <p>The job queue where the job is submitted. You can specify either the name or the Amazon Resource Name (ARN) of the queue.</p>
    public let jobQueue: Swift.String?
    /// <p>A list of node overrides in JSON format that specify the node range to target and the container overrides for
    ///    that node range.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources; use <code>containerOverrides</code>
    ///     instead.</p>
    ///          </note>
    public let nodeOverrides: BatchClientTypes.NodeOverrides?
    /// <p>Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job
    ///    definition. Parameters are specified as a key and value pair mapping. Parameters in a <code>SubmitJob</code> request
    ///    override any corresponding parameter defaults from the job definition.</p>
    public let parameters: [Swift.String:Swift.String]?
    /// <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no
    ///    value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For
    ///    tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags
    ///    from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state. When specified, this
    ///    overrides the tag propagation setting in the job definition.</p>
    public let propagateTags: Swift.Bool
    /// <p>The retry strategy to use for failed jobs from this <a>SubmitJob</a> operation. When a retry strategy
    ///    is specified here, it overrides the retry strategy defined in the job definition.</p>
    public let retryStrategy: BatchClientTypes.RetryStrategy?
    /// <p>The tags that you apply to the job request to help you categorize and organize your resources. Each tag consists
    ///    of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> in <i>AWS General
    ///    Reference</i>.</p>
    public let tags: [Swift.String:Swift.String]?
    /// <p>The timeout configuration for this <a>SubmitJob</a> operation. You can specify a timeout duration
    ///    after which AWS Batch terminates your jobs if they haven't finished. If a job is terminated due to a timeout, it isn't
    ///    retried. The minimum value for the timeout is 60 seconds. This configuration overrides any timeout configuration
    ///    specified in the job definition. For array jobs, child jobs have the same timeout configuration as the parent job.
    ///    For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/job_timeouts.html">Job
    ///     Timeouts</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let timeout: BatchClientTypes.JobTimeout?

    public init (
        arrayProperties: BatchClientTypes.ArrayProperties? = nil,
        containerOverrides: BatchClientTypes.ContainerOverrides? = nil,
        dependsOn: [BatchClientTypes.JobDependency]? = nil,
        jobDefinition: Swift.String? = nil,
        jobName: Swift.String? = nil,
        jobQueue: Swift.String? = nil,
        nodeOverrides: BatchClientTypes.NodeOverrides? = nil,
        parameters: [Swift.String:Swift.String]? = nil,
        propagateTags: Swift.Bool = false,
        retryStrategy: BatchClientTypes.RetryStrategy? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        timeout: BatchClientTypes.JobTimeout? = nil
    )
    {
        self.arrayProperties = arrayProperties
        self.containerOverrides = containerOverrides
        self.dependsOn = dependsOn
        self.jobDefinition = jobDefinition
        self.jobName = jobName
        self.jobQueue = jobQueue
        self.nodeOverrides = nodeOverrides
        self.parameters = parameters
        self.propagateTags = propagateTags
        self.retryStrategy = retryStrategy
        self.tags = tags
        self.timeout = timeout
    }
}

struct SubmitJobInputBody: Swift.Equatable {
    public let jobName: Swift.String?
    public let jobQueue: Swift.String?
    public let arrayProperties: BatchClientTypes.ArrayProperties?
    public let dependsOn: [BatchClientTypes.JobDependency]?
    public let jobDefinition: Swift.String?
    public let parameters: [Swift.String:Swift.String]?
    public let containerOverrides: BatchClientTypes.ContainerOverrides?
    public let nodeOverrides: BatchClientTypes.NodeOverrides?
    public let retryStrategy: BatchClientTypes.RetryStrategy?
    public let propagateTags: Swift.Bool
    public let timeout: BatchClientTypes.JobTimeout?
    public let tags: [Swift.String:Swift.String]?
}

extension SubmitJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties
        case containerOverrides
        case dependsOn
        case jobDefinition
        case jobName
        case jobQueue
        case nodeOverrides
        case parameters
        case propagateTags
        case retryStrategy
        case tags
        case timeout
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobQueueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
        let arrayPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ArrayProperties.self, forKey: .arrayProperties)
        arrayProperties = arrayPropertiesDecoded
        let dependsOnContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobDependency?].self, forKey: .dependsOn)
        var dependsOnDecoded0:[BatchClientTypes.JobDependency]? = nil
        if let dependsOnContainer = dependsOnContainer {
            dependsOnDecoded0 = [BatchClientTypes.JobDependency]()
            for structure0 in dependsOnContainer {
                if let structure0 = structure0 {
                    dependsOnDecoded0?.append(structure0)
                }
            }
        }
        dependsOn = dependsOnDecoded0
        let jobDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinition)
        jobDefinition = jobDefinitionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in parametersContainer {
                if let string0 = string0 {
                    parametersDecoded0?[key0] = string0
                }
            }
        }
        parameters = parametersDecoded0
        let containerOverridesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerOverrides.self, forKey: .containerOverrides)
        containerOverrides = containerOverridesDecoded
        let nodeOverridesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodeOverrides.self, forKey: .nodeOverrides)
        nodeOverrides = nodeOverridesDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let propagateTagsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SubmitJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SubmitJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SubmitJobOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SubmitJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SubmitJobOutputResponse(jobArn: \(Swift.String(describing: jobArn)), jobId: \(Swift.String(describing: jobId)), jobName: \(Swift.String(describing: jobName)))"}
}

extension SubmitJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SubmitJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
            self.jobId = output.jobId
            self.jobName = output.jobName
        } else {
            self.jobArn = nil
            self.jobId = nil
            self.jobName = nil
        }
    }
}

public struct SubmitJobOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) for the job.</p>
    public let jobArn: Swift.String?
    /// <p>The unique identifier for the job.</p>
    public let jobId: Swift.String?
    /// <p>The name of the job.</p>
    public let jobName: Swift.String?

    public init (
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobName: Swift.String? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobName = jobName
    }
}

struct SubmitJobOutputResponseBody: Swift.Equatable {
    public let jobArn: Swift.String?
    public let jobName: Swift.String?
    public let jobId: Swift.String?
}

extension SubmitJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn
        case jobId
        case jobName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource that tags are added to. AWS Batch resources that support tags are compute environments, jobs, job definitions, and job
    ///  queues. ARNs for child jobs of array and multi-node parallel (MNP) jobs are not supported.</p>
    public let resourceArn: Swift.String?
    /// <p>The tags that you apply to the resource to help you categorize and organize your resources. Each tag consists of
    ///    a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> in <i>AWS General
    ///    Reference</i>.</p>
    public let tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct TerminateJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TerminateJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TerminateJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TerminateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TerminateJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TerminateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TerminateJobOutputError>
}

extension TerminateJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TerminateJobInput(jobId: \(Swift.String(describing: jobId)), reason: \(Swift.String(describing: reason)))"}
}

extension TerminateJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }
}

public struct TerminateJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TerminateJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TerminateJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TerminateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TerminateJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TerminateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TerminateJobOutputError>
}

public struct TerminateJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TerminateJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TerminateJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TerminateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TerminateJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TerminateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TerminateJobOutputError>
}

/// <p>Contains the parameters for <code>TerminateJob</code>.</p>
public struct TerminateJobInput: Swift.Equatable {
    /// <p>The AWS Batch job ID of the job to terminate.</p>
    public let jobId: Swift.String?
    /// <p>A message to attach to the job that explains the reason for canceling it. This message is returned by future
    ///     <a>DescribeJobs</a> operations on the job. This message is also recorded in the AWS Batch activity
    ///    logs.</p>
    public let reason: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.reason = reason
    }
}

struct TerminateJobInputBody: Swift.Equatable {
    public let jobId: Swift.String?
    public let reason: Swift.String?
}

extension TerminateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case reason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension TerminateJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TerminateJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TerminateJobOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TerminateJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TerminateJobOutputResponse()"}
}

extension TerminateJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TerminateJobOutputResponse: Swift.Equatable {

    public init() {}
}

struct TerminateJobOutputResponseBody: Swift.Equatable {
}

extension TerminateJobOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension BatchClientTypes.Tmpfs: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerPath
        case mountOptions
        case size
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerPath = containerPath {
            try encodeContainer.encode(containerPath, forKey: .containerPath)
        }
        if let mountOptions = mountOptions {
            var mountOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mountOptions)
            for stringlist0 in mountOptions {
                try mountOptionsContainer.encode(stringlist0)
            }
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerPath)
        containerPath = containerPathDecoded
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let mountOptionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .mountOptions)
        var mountOptionsDecoded0:[Swift.String]? = nil
        if let mountOptionsContainer = mountOptionsContainer {
            mountOptionsDecoded0 = [Swift.String]()
            for string0 in mountOptionsContainer {
                if let string0 = string0 {
                    mountOptionsDecoded0?.append(string0)
                }
            }
        }
        mountOptions = mountOptionsDecoded0
    }
}

extension BatchClientTypes.Tmpfs: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tmpfs(containerPath: \(Swift.String(describing: containerPath)), mountOptions: \(Swift.String(describing: mountOptions)), size: \(Swift.String(describing: size)))"}
}

extension BatchClientTypes {
    /// <p>The container path, mount options, and size of the tmpfs mount.</p>
    ///          <note>
    ///             <p>This object isn't applicable to jobs running on Fargate resources.</p>
    ///          </note>
    public struct Tmpfs: Swift.Equatable {
        /// <p>The absolute file path in the container where the tmpfs volume is mounted.</p>
        public let containerPath: Swift.String?
        /// <p>The list of tmpfs volume mount options.</p>
        ///          <p>Valid values: "<code>defaults</code>" | "<code>ro</code>" | "<code>rw</code>" | "<code>suid</code>" |
        ///     "<code>nosuid</code>" | "<code>dev</code>" | "<code>nodev</code>" | "<code>exec</code>" | "<code>noexec</code>" |
        ///     "<code>sync</code>" | "<code>async</code>" | "<code>dirsync</code>" | "<code>remount</code>" | "<code>mand</code>" |
        ///     "<code>nomand</code>" | "<code>atime</code>" | "<code>noatime</code>" | "<code>diratime</code>" |
        ///     "<code>nodiratime</code>" | "<code>bind</code>" | "<code>rbind" | "unbindable" | "runbindable" | "private" |
        ///     "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime</code>" | "<code>norelatime</code>" |
        ///     "<code>strictatime</code>" | "<code>nostrictatime</code>" | "<code>mode</code>" | "<code>uid</code>" |
        ///     "<code>gid</code>" | "<code>nr_inodes</code>" | "<code>nr_blocks</code>" | "<code>mpol</code>"</p>
        public let mountOptions: [Swift.String]?
        /// <p>The size (in MiB) of the tmpfs volume.</p>
        public let size: Swift.Int

        public init (
            containerPath: Swift.String? = nil,
            mountOptions: [Swift.String]? = nil,
            size: Swift.Int = 0
        )
        {
            self.containerPath = containerPath
            self.mountOptions = mountOptions
            self.size = size
        }
    }

}

extension BatchClientTypes.Ulimit: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hardLimit
        case name
        case softLimit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if hardLimit != 0 {
            try encodeContainer.encode(hardLimit, forKey: .hardLimit)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if softLimit != 0 {
            try encodeContainer.encode(softLimit, forKey: .softLimit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hardLimitDecoded = try containerValues.decode(Swift.Int.self, forKey: .hardLimit)
        hardLimit = hardLimitDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let softLimitDecoded = try containerValues.decode(Swift.Int.self, forKey: .softLimit)
        softLimit = softLimitDecoded
    }
}

extension BatchClientTypes.Ulimit: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Ulimit(hardLimit: \(Swift.String(describing: hardLimit)), name: \(Swift.String(describing: name)), softLimit: \(Swift.String(describing: softLimit)))"}
}

extension BatchClientTypes {
    /// <p>The <code>ulimit</code> settings to pass to the container.</p>
    ///          <note>
    ///             <p>This object isn't applicable to jobs running on Fargate resources.</p>
    ///          </note>
    public struct Ulimit: Swift.Equatable {
        /// <p>The hard limit for the <code>ulimit</code> type.</p>
        public let hardLimit: Swift.Int
        /// <p>The <code>type</code> of the <code>ulimit</code>.</p>
        public let name: Swift.String?
        /// <p>The soft limit for the <code>ulimit</code> type.</p>
        public let softLimit: Swift.Int

        public init (
            hardLimit: Swift.Int = 0,
            name: Swift.String? = nil,
            softLimit: Swift.Int = 0
        )
        {
            self.hardLimit = hardLimit
            self.name = name
            self.softLimit = softLimit
        }
    }

}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let tagKeys = input.operationInput.tagKeys {
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource from which to delete tags. AWS Batch resources that support tags are compute environments, jobs, job definitions, and job
    ///  queues. ARNs for child jobs of array and multi-node parallel (MNP) jobs are not supported.</p>
    public let resourceArn: Swift.String?
    /// <p>The keys of the tags to be removed.</p>
    public let tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateComputeEnvironmentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateComputeEnvironmentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateComputeEnvironmentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateComputeEnvironmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateComputeEnvironmentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateComputeEnvironmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateComputeEnvironmentOutputError>
}

extension UpdateComputeEnvironmentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateComputeEnvironmentInput(computeEnvironment: \(Swift.String(describing: computeEnvironment)), computeResources: \(Swift.String(describing: computeResources)), serviceRole: \(Swift.String(describing: serviceRole)), state: \(Swift.String(describing: state)))"}
}

extension UpdateComputeEnvironmentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironment
        case computeResources
        case serviceRole
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironment = computeEnvironment {
            try encodeContainer.encode(computeEnvironment, forKey: .computeEnvironment)
        }
        if let computeResources = computeResources {
            try encodeContainer.encode(computeResources, forKey: .computeResources)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }
}

public struct UpdateComputeEnvironmentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateComputeEnvironmentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateComputeEnvironmentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateComputeEnvironmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateComputeEnvironmentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateComputeEnvironmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateComputeEnvironmentOutputError>
}

public struct UpdateComputeEnvironmentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateComputeEnvironmentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateComputeEnvironmentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateComputeEnvironmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateComputeEnvironmentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateComputeEnvironmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateComputeEnvironmentOutputError>
}

/// <p>Contains the parameters for <code>UpdateComputeEnvironment</code>.</p>
public struct UpdateComputeEnvironmentInput: Swift.Equatable {
    /// <p>The name or full Amazon Resource Name (ARN) of the compute environment to update.</p>
    public let computeEnvironment: Swift.String?
    /// <p>Details of the compute resources managed by the compute environment. Required for a managed compute environment.
    ///    For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute
    ///     Environments</a> in the <i>AWS Batch User Guide</i>.</p>
    public let computeResources: BatchClientTypes.ComputeResourceUpdate?
    /// <p>The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf. For
    ///    more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html">AWS Batch service IAM
    ///     role</a> in the <i>AWS Batch User Guide</i>.</p>
    ///          <important>
    ///             <p>If the compute environment has a service-linked role, it cannot be changed to use a regular IAM role. If the
    ///     compute environment has a regular IAM role, it cannot be changed to use a service-linked role.</p>
    ///          </important>
    ///
    ///          <p>If your specified role has a path other than <code>/</code>, then you must either specify the full role ARN
    ///    (this is recommended) or prefix the role name with the path.</p>
    ///          <note>
    ///             <p>Depending on how you created your AWS Batch service role, its ARN might contain the <code>service-role</code>
    ///     path prefix. When you only specify the name of the service role, AWS Batch assumes that your ARN doesn't use the
    ///      <code>service-role</code> path prefix. Because of this, we recommend that you specify the full ARN of your service
    ///     role when you create compute environments.</p>
    ///          </note>
    public let serviceRole: Swift.String?
    /// <p>The state of the compute environment. Compute environments in the <code>ENABLED</code> state can accept jobs
    ///    from a queue and scale in or out automatically based on the workload demand of its associated queues.</p>
    ///          <p>If the state is <code>ENABLED</code>, then the AWS Batch scheduler can attempt to place jobs from an associated
    ///    job queue on the compute resources within the environment. If the compute environment is managed, then it can scale
    ///    its instances out or in automatically, based on the job queue demand.</p>
    ///          <p>If the state is <code>DISABLED</code>, then the AWS Batch scheduler doesn't attempt to place jobs within the
    ///    environment. Jobs in a <code>STARTING</code> or <code>RUNNING</code> state continue to progress normally. Managed
    ///    compute environments in the <code>DISABLED</code> state don't scale out. However, they scale in to
    ///     <code>minvCpus</code> value after instances become idle.</p>
    public let state: BatchClientTypes.CEState?

    public init (
        computeEnvironment: Swift.String? = nil,
        computeResources: BatchClientTypes.ComputeResourceUpdate? = nil,
        serviceRole: Swift.String? = nil,
        state: BatchClientTypes.CEState? = nil
    )
    {
        self.computeEnvironment = computeEnvironment
        self.computeResources = computeResources
        self.serviceRole = serviceRole
        self.state = state
    }
}

struct UpdateComputeEnvironmentInputBody: Swift.Equatable {
    public let computeEnvironment: Swift.String?
    public let state: BatchClientTypes.CEState?
    public let computeResources: BatchClientTypes.ComputeResourceUpdate?
    public let serviceRole: Swift.String?
}

extension UpdateComputeEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironment
        case computeResources
        case serviceRole
        case state
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironment)
        computeEnvironment = computeEnvironmentDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEState.self, forKey: .state)
        state = stateDecoded
        let computeResourcesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ComputeResourceUpdate.self, forKey: .computeResources)
        computeResources = computeResourcesDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
    }
}

extension UpdateComputeEnvironmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateComputeEnvironmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateComputeEnvironmentOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateComputeEnvironmentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateComputeEnvironmentOutputResponse(computeEnvironmentArn: \(Swift.String(describing: computeEnvironmentArn)), computeEnvironmentName: \(Swift.String(describing: computeEnvironmentName)))"}
}

extension UpdateComputeEnvironmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateComputeEnvironmentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeEnvironmentArn = output.computeEnvironmentArn
            self.computeEnvironmentName = output.computeEnvironmentName
        } else {
            self.computeEnvironmentArn = nil
            self.computeEnvironmentName = nil
        }
    }
}

public struct UpdateComputeEnvironmentOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
    public let computeEnvironmentArn: Swift.String?
    /// <p>The name of the compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and
    ///  underscores are allowed.</p>
    public let computeEnvironmentName: Swift.String?

    public init (
        computeEnvironmentArn: Swift.String? = nil,
        computeEnvironmentName: Swift.String? = nil
    )
    {
        self.computeEnvironmentArn = computeEnvironmentArn
        self.computeEnvironmentName = computeEnvironmentName
    }
}

struct UpdateComputeEnvironmentOutputResponseBody: Swift.Equatable {
    public let computeEnvironmentName: Swift.String?
    public let computeEnvironmentArn: Swift.String?
}

extension UpdateComputeEnvironmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentArn
        case computeEnvironmentName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let computeEnvironmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentArn)
        computeEnvironmentArn = computeEnvironmentArnDecoded
    }
}

public struct UpdateJobQueueInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateJobQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateJobQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateJobQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateJobQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateJobQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateJobQueueOutputError>
}

extension UpdateJobQueueInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateJobQueueInput(computeEnvironmentOrder: \(Swift.String(describing: computeEnvironmentOrder)), jobQueue: \(Swift.String(describing: jobQueue)), priority: \(Swift.String(describing: priority)), state: \(Swift.String(describing: state)))"}
}

extension UpdateJobQueueInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentOrder
        case jobQueue
        case priority
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentOrder = computeEnvironmentOrder {
            var computeEnvironmentOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeEnvironmentOrder)
            for computeenvironmentorders0 in computeEnvironmentOrder {
                try computeEnvironmentOrderContainer.encode(computeenvironmentorders0)
            }
        }
        if let jobQueue = jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }
}

public struct UpdateJobQueueInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateJobQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateJobQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateJobQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateJobQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateJobQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateJobQueueOutputError>
}

public struct UpdateJobQueueInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateJobQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateJobQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateJobQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateJobQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateJobQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateJobQueueOutputError>
}

/// <p>Contains the parameters for <code>UpdateJobQueue</code>.</p>
public struct UpdateJobQueueInput: Swift.Equatable {
    /// <p>Details the set of compute environments mapped to a job queue and their order relative to each other. This is
    ///    one of the parameters used by the job scheduler to determine which compute environment should run a given job.
    ///    Compute environments must be in the <code>VALID</code> state before you can associate them with a job queue. All of
    ///    the compute environments must be either EC2 (<code>EC2</code> or <code>SPOT</code>) or Fargate
    ///     (<code>FARGATE</code> or <code>FARGATE_SPOT</code>). EC2 and Fargate compute environments can't be mixed.</p>
    ///          <note>
    ///             <p>All compute environments that are associated with a job queue must share the same architecture. AWS Batch doesn't
    ///     support mixing compute environment architecture types in a single job queue.</p>
    ///          </note>
    public let computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
    /// <p>The name or the Amazon Resource Name (ARN) of the job queue.</p>
    public let jobQueue: Swift.String?
    /// <p>The priority of the job queue. Job queues with a higher priority (or a higher integer value for the
    ///     <code>priority</code> parameter) are evaluated first when associated with the same compute environment. Priority is
    ///    determined in descending order, for example, a job queue with a priority value of <code>10</code> is given scheduling
    ///    preference over a job queue with a priority value of <code>1</code>. All of the compute environments must be either
    ///    EC2 (<code>EC2</code> or <code>SPOT</code>) or Fargate (<code>FARGATE</code> or <code>FARGATE_SPOT</code>). EC2 and
    ///    Fargate compute environments can't be mixed.</p>
    public let priority: Swift.Int
    /// <p>Describes the queue's ability to accept new jobs. If the job queue state is <code>ENABLED</code>, it can accept
    ///    jobs. If the job queue state is <code>DISABLED</code>, new jobs can't be added to the queue, but jobs already in the
    ///    queue can finish.</p>
    public let state: BatchClientTypes.JQState?

    public init (
        computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]? = nil,
        jobQueue: Swift.String? = nil,
        priority: Swift.Int = 0,
        state: BatchClientTypes.JQState? = nil
    )
    {
        self.computeEnvironmentOrder = computeEnvironmentOrder
        self.jobQueue = jobQueue
        self.priority = priority
        self.state = state
    }
}

struct UpdateJobQueueInputBody: Swift.Equatable {
    public let jobQueue: Swift.String?
    public let state: BatchClientTypes.JQState?
    public let priority: Swift.Int
    public let computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
}

extension UpdateJobQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentOrder
        case jobQueue
        case priority
        case state
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JQState.self, forKey: .state)
        state = stateDecoded
        let priorityDecoded = try containerValues.decode(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let computeEnvironmentOrderContainer = try containerValues.decodeIfPresent([BatchClientTypes.ComputeEnvironmentOrder?].self, forKey: .computeEnvironmentOrder)
        var computeEnvironmentOrderDecoded0:[BatchClientTypes.ComputeEnvironmentOrder]? = nil
        if let computeEnvironmentOrderContainer = computeEnvironmentOrderContainer {
            computeEnvironmentOrderDecoded0 = [BatchClientTypes.ComputeEnvironmentOrder]()
            for structure0 in computeEnvironmentOrderContainer {
                if let structure0 = structure0 {
                    computeEnvironmentOrderDecoded0?.append(structure0)
                }
            }
        }
        computeEnvironmentOrder = computeEnvironmentOrderDecoded0
    }
}

extension UpdateJobQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateJobQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateJobQueueOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateJobQueueOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateJobQueueOutputResponse(jobQueueArn: \(Swift.String(describing: jobQueueArn)), jobQueueName: \(Swift.String(describing: jobQueueName)))"}
}

extension UpdateJobQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateJobQueueOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobQueueArn = output.jobQueueArn
            self.jobQueueName = output.jobQueueName
        } else {
            self.jobQueueArn = nil
            self.jobQueueName = nil
        }
    }
}

public struct UpdateJobQueueOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
    public let jobQueueArn: Swift.String?
    /// <p>The name of the job queue.</p>
    public let jobQueueName: Swift.String?

    public init (
        jobQueueArn: Swift.String? = nil,
        jobQueueName: Swift.String? = nil
    )
    {
        self.jobQueueArn = jobQueueArn
        self.jobQueueName = jobQueueName
    }
}

struct UpdateJobQueueOutputResponseBody: Swift.Equatable {
    public let jobQueueName: Swift.String?
    public let jobQueueArn: Swift.String?
}

extension UpdateJobQueueOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueueArn
        case jobQueueName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueName)
        jobQueueName = jobQueueNameDecoded
        let jobQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueArn)
        jobQueueArn = jobQueueArnDecoded
    }
}

extension BatchClientTypes.Volume: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case efsVolumeConfiguration
        case host
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let efsVolumeConfiguration = efsVolumeConfiguration {
            try encodeContainer.encode(efsVolumeConfiguration, forKey: .efsVolumeConfiguration)
        }
        if let host = host {
            try encodeContainer.encode(host, forKey: .host)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostDecoded = try containerValues.decodeIfPresent(BatchClientTypes.Host.self, forKey: .host)
        host = hostDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let efsVolumeConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EFSVolumeConfiguration.self, forKey: .efsVolumeConfiguration)
        efsVolumeConfiguration = efsVolumeConfigurationDecoded
    }
}

extension BatchClientTypes.Volume: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Volume(efsVolumeConfiguration: \(Swift.String(describing: efsVolumeConfiguration)), host: \(Swift.String(describing: host)), name: \(Swift.String(describing: name)))"}
}

extension BatchClientTypes {
    /// <p>A data volume used in a job's container properties.</p>
    public struct Volume: Swift.Equatable {
        /// <p>This parameter is specified when you are using an Amazon Elastic File System file system for job storage. Jobs running on
        ///    Fargate resources must specify a <code>platformVersion</code> of at least <code>1.4.0</code>.</p>
        public let efsVolumeConfiguration: BatchClientTypes.EFSVolumeConfiguration?
        /// <p>The contents of the <code>host</code> parameter determine whether your data volume persists on the host
        ///    container instance and where it is stored. If the host parameter is empty, then the Docker daemon assigns a host path
        ///    for your data volume. However, the data isn't guaranteed to persist after the containers associated with it stop
        ///    running.</p>
        ///          <note>
        ///             <p>This parameter isn't applicable to jobs running on Fargate resources and shouldn't be provided.</p>
        ///          </note>
        public let host: BatchClientTypes.Host?
        /// <p>The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are
        ///  allowed. This name is referenced in the <code>sourceVolume</code>
        ///    parameter of container definition <code>mountPoints</code>.</p>
        public let name: Swift.String?

        public init (
            efsVolumeConfiguration: BatchClientTypes.EFSVolumeConfiguration? = nil,
            host: BatchClientTypes.Host? = nil,
            name: Swift.String? = nil
        )
        {
            self.efsVolumeConfiguration = efsVolumeConfiguration
            self.host = host
            self.name = name
        }
    }

}
