// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RegisterJobDefinitionInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterJobDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterJobDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterJobDefinitionInput>
    public typealias MOutput = OperationOutput<RegisterJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterJobDefinitionOutputError>
}

public struct RegisterJobDefinitionInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterJobDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterJobDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterJobDefinitionInput>
    public typealias MOutput = OperationOutput<RegisterJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterJobDefinitionOutputError>
}

public struct RegisterJobDefinitionInputBodyMiddleware: Middleware {
    public let id: String = "RegisterJobDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterJobDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterJobDefinitionInput>
    public typealias MOutput = OperationOutput<RegisterJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterJobDefinitionOutputError>
}

extension RegisterJobDefinitionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerProperties
        case jobDefinitionName
        case nodeProperties
        case parameters
        case platformCapabilities
        case propagateTags
        case retryStrategy
        case tags
        case timeout
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerProperties = containerProperties {
            try encodeContainer.encode(containerProperties, forKey: .containerProperties)
        }
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let nodeProperties = nodeProperties {
            try encodeContainer.encode(nodeProperties, forKey: .nodeProperties)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let platformCapabilities = platformCapabilities {
            var platformCapabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformCapabilities)
            for platformcapabilitylist0 in platformCapabilities {
                try platformCapabilitiesContainer.encode(platformcapabilitylist0.rawValue)
            }
        }
        if propagateTags != false {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}
