// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartIncidentInputHeadersMiddleware: Middleware {
    public let id: String = "StartIncidentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartIncidentInput>,
                  next: H) -> Swift.Result<OperationOutput<StartIncidentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartIncidentInput>
    public typealias MOutput = OperationOutput<StartIncidentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartIncidentOutputError>
}

public struct StartIncidentInputQueryItemMiddleware: Middleware {
    public let id: String = "StartIncidentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartIncidentInput>,
                  next: H) -> Swift.Result<OperationOutput<StartIncidentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartIncidentInput>
    public typealias MOutput = OperationOutput<StartIncidentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartIncidentOutputError>
}

public struct StartIncidentInputBodyMiddleware: Middleware {
    public let id: String = "StartIncidentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartIncidentInput>,
                  next: H) -> Swift.Result<OperationOutput<StartIncidentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartIncidentInput>
    public typealias MOutput = OperationOutput<StartIncidentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartIncidentOutputError>
}

extension StartIncidentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientToken
        case impact
        case relatedItems
        case responsePlanArn
        case title
        case triggerDetails
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let impact = impact {
            try encodeContainer.encode(impact, forKey: .impact)
        }
        if let relatedItems = relatedItems {
            var relatedItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedItems)
            for relateditemlist0 in relatedItems {
                try relatedItemsContainer.encode(relateditemlist0)
            }
        }
        if let responsePlanArn = responsePlanArn {
            try encodeContainer.encode(responsePlanArn, forKey: .responsePlanArn)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let triggerDetails = triggerDetails {
            try encodeContainer.encode(triggerDetails, forKey: .triggerDetails)
        }
    }
}
