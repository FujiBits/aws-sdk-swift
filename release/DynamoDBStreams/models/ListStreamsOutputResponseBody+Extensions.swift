// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListStreamsOutputResponseBody: Equatable {
    public let streams: [Stream]?
    public let lastEvaluatedStreamArn: String?
}

extension ListStreamsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case lastEvaluatedStreamArn = "LastEvaluatedStreamArn"
        case streams = "Streams"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamsContainer = try containerValues.decodeIfPresent([Stream?].self, forKey: .streams)
        var streamsDecoded0:[Stream]? = nil
        if let streamsContainer = streamsContainer {
            streamsDecoded0 = [Stream]()
            for structure0 in streamsContainer {
                if let structure0 = structure0 {
                    streamsDecoded0?.append(structure0)
                }
            }
        }
        streams = streamsDecoded0
        let lastEvaluatedStreamArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastEvaluatedStreamArn)
        lastEvaluatedStreamArn = lastEvaluatedStreamArnDecoded
    }
}
