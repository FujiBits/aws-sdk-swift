// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension DynamoDbStreamsClientTypes.AttributeValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case b = "B"
        case bool = "BOOL"
        case bs = "BS"
        case l = "L"
        case m = "M"
        case n = "N"
        case ns = "NS"
        case null = "NULL"
        case s = "S"
        case ss = "SS"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .b(b):
                try container.encode(b.base64EncodedString(), forKey: .b)
            case let .bool(bool):
                try container.encode(bool, forKey: .bool)
            case let .bs(bs):
                var bsContainer = container.nestedUnkeyedContainer(forKey: .bs)
                for binarysetattributevalue0 in bs {
                    try bsContainer.encode(binarysetattributevalue0.base64EncodedString())
                }
            case let .l(l):
                var lContainer = container.nestedUnkeyedContainer(forKey: .l)
                for listattributevalue0 in l {
                    try lContainer.encode(listattributevalue0)
                }
            case let .m(m):
                var mContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .m)
                for (dictKey0, mapattributevalue0) in m {
                    try mContainer.encode(mapattributevalue0, forKey: ClientRuntime.Key(stringValue: dictKey0))
                }
            case let .n(n):
                try container.encode(n, forKey: .n)
            case let .ns(ns):
                var nsContainer = container.nestedUnkeyedContainer(forKey: .ns)
                for numbersetattributevalue0 in ns {
                    try nsContainer.encode(numbersetattributevalue0)
                }
            case let .null(null):
                try container.encode(null, forKey: .null)
            case let .s(s):
                try container.encode(s, forKey: .s)
            case let .ss(ss):
                var ssContainer = container.nestedUnkeyedContainer(forKey: .ss)
                for stringsetattributevalue0 in ss {
                    try ssContainer.encode(stringsetattributevalue0)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let sDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .s)
        if let s = sDecoded {
            self = .s(s)
            return
        }
        let nDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .n)
        if let n = nDecoded {
            self = .n(n)
            return
        }
        let bDecoded = try values.decodeIfPresent(ClientRuntime.Data.self, forKey: .b)
        if let b = bDecoded {
            self = .b(b)
            return
        }
        let ssContainer = try values.decodeIfPresent([Swift.String?].self, forKey: .ss)
        var ssDecoded0:[Swift.String]? = nil
        if let ssContainer = ssContainer {
            ssDecoded0 = [Swift.String]()
            for string0 in ssContainer {
                if let string0 = string0 {
                    ssDecoded0?.append(string0)
                }
            }
        }
        if let ss = ssDecoded0 {
            self = .ss(ss)
            return
        }
        let nsContainer = try values.decodeIfPresent([Swift.String?].self, forKey: .ns)
        var nsDecoded0:[Swift.String]? = nil
        if let nsContainer = nsContainer {
            nsDecoded0 = [Swift.String]()
            for string0 in nsContainer {
                if let string0 = string0 {
                    nsDecoded0?.append(string0)
                }
            }
        }
        if let ns = nsDecoded0 {
            self = .ns(ns)
            return
        }
        let bsContainer = try values.decodeIfPresent([ClientRuntime.Data?].self, forKey: .bs)
        var bsDecoded0:[ClientRuntime.Data]? = nil
        if let bsContainer = bsContainer {
            bsDecoded0 = [ClientRuntime.Data]()
            for blob0 in bsContainer {
                if let blob0 = blob0 {
                    bsDecoded0?.append(blob0)
                }
            }
        }
        if let bs = bsDecoded0 {
            self = .bs(bs)
            return
        }
        let mContainer = try values.decodeIfPresent([Swift.String: DynamoDbStreamsClientTypes.AttributeValue?].self, forKey: .m)
        var mDecoded0: [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]? = nil
        if let mContainer = mContainer {
            mDecoded0 = [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]()
            for (key0, attributevalue0) in mContainer {
                if let attributevalue0 = attributevalue0 {
                    mDecoded0?[key0] = attributevalue0
                }
            }
        }
        if let m = mDecoded0 {
            self = .m(m)
            return
        }
        let lContainer = try values.decodeIfPresent([DynamoDbStreamsClientTypes.AttributeValue?].self, forKey: .l)
        var lDecoded0:[DynamoDbStreamsClientTypes.AttributeValue]? = nil
        if let lContainer = lContainer {
            lDecoded0 = [DynamoDbStreamsClientTypes.AttributeValue]()
            for union0 in lContainer {
                if let union0 = union0 {
                    lDecoded0?.append(union0)
                }
            }
        }
        if let l = lDecoded0 {
            self = .l(l)
            return
        }
        let nullDecoded = try values.decodeIfPresent(Swift.Bool.self, forKey: .null)
        if let null = nullDecoded {
            self = .null(null)
            return
        }
        let boolDecoded = try values.decodeIfPresent(Swift.Bool.self, forKey: .bool)
        if let bool = boolDecoded {
            self = .bool(bool)
            return
        }
        self = .sdkUnknown("")
    }
}

extension DynamoDbStreamsClientTypes {
    /// <p>Represents the data for an attribute.</p>
    ///          <p>Each attribute value is described as a name-value pair.  The name is the data type, and the value is the data itself.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data Types</a> in the
    ///                              <i>Amazon DynamoDB Developer Guide</i>.</p>
    public enum AttributeValue: Swift.Equatable {
        /// <p>An attribute of type  String. For example:</p>
        ///          <p>
        ///             <code>"S": "Hello"</code>
        ///          </p>
        case s(Swift.String)
        /// <p>An attribute of type Number. For example:</p>
        ///          <p>
        ///             <code>"N": "123.45"</code>
        ///          </p>
        ///          <p>Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.</p>
        case n(Swift.String)
        /// <p>An attribute of type Binary.  For example:</p>
        ///          <p>
        ///             <code>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</code>
        ///          </p>
        case b(ClientRuntime.Data)
        /// <p>An attribute of type String Set.  For example:</p>
        ///          <p>
        ///             <code>"SS": ["Giraffe", "Hippo" ,"Zebra"]</code>
        ///          </p>
        case ss([Swift.String])
        /// <p>An attribute of type Number Set.  For example:</p>
        ///          <p>
        ///             <code>"NS": ["42.2", "-19", "7.5", "3.14"]</code>
        ///          </p>
        ///          <p>Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.</p>
        case ns([Swift.String])
        /// <p>An attribute of type Binary Set.  For example:</p>
        ///          <p>
        ///             <code>"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]</code>
        ///          </p>
        case bs([ClientRuntime.Data])
        /// <p>An attribute of type Map.  For example:</p>
        ///          <p>
        ///             <code>"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}</code>
        ///          </p>
        case m([Swift.String:DynamoDbStreamsClientTypes.AttributeValue])
        /// <p>An attribute of type List.  For example:</p>
        ///          <p>
        ///             <code>"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]</code>
        ///          </p>
        case l([DynamoDbStreamsClientTypes.AttributeValue])
        /// <p>An attribute of type Null.  For example:</p>
        ///          <p>
        ///             <code>"NULL": true</code>
        ///          </p>
        case null(Swift.Bool)
        /// <p>An attribute of type Boolean.  For example:</p>
        ///          <p>
        ///             <code>"BOOL": true</code>
        ///          </p>
        case bool(Swift.Bool)
        case sdkUnknown(Swift.String)
    }

}

public struct DescribeStreamInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStreamInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStreamOutputError>
}

extension DescribeStreamInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStreamInput(exclusiveStartShardId: \(Swift.String(describing: exclusiveStartShardId)), limit: \(Swift.String(describing: limit)), streamArn: \(Swift.String(describing: streamArn)))"}
}

extension DescribeStreamInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartShardId = "ExclusiveStartShardId"
        case limit = "Limit"
        case streamArn = "StreamArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusiveStartShardId = exclusiveStartShardId {
            try encodeContainer.encode(exclusiveStartShardId, forKey: .exclusiveStartShardId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let streamArn = streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
    }
}

public struct DescribeStreamInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStreamInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStreamOutputError>
}

public struct DescribeStreamInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStreamInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStreamOutputError>
}

/// <p>Represents the input of a <code>DescribeStream</code> operation.</p>
public struct DescribeStreamInput: Swift.Equatable {
    /// <p>The shard ID of the first item that this operation will evaluate. Use the value that was
    ///       returned for <code>LastEvaluatedShardId</code> in the previous operation. </p>
    public let exclusiveStartShardId: Swift.String?
    /// <p>The maximum number of shard objects to return. The upper limit is 100.</p>
    public let limit: Swift.Int?
    /// <p>The Amazon Resource Name (ARN) for the stream.</p>
    public let streamArn: Swift.String?

    public init (
        exclusiveStartShardId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        streamArn: Swift.String? = nil
    )
    {
        self.exclusiveStartShardId = exclusiveStartShardId
        self.limit = limit
        self.streamArn = streamArn
    }
}

struct DescribeStreamInputBody: Swift.Equatable {
    public let streamArn: Swift.String?
    public let limit: Swift.Int?
    public let exclusiveStartShardId: Swift.String?
}

extension DescribeStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartShardId = "ExclusiveStartShardId"
        case limit = "Limit"
        case streamArn = "StreamArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let exclusiveStartShardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartShardId)
        exclusiveStartShardId = exclusiveStartShardIdDecoded
    }
}

extension DescribeStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStreamOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStreamOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStreamOutputResponse(streamDescription: \(Swift.String(describing: streamDescription)))"}
}

extension DescribeStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStreamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.streamDescription = output.streamDescription
        } else {
            self.streamDescription = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeStream</code> operation.</p>
public struct DescribeStreamOutputResponse: Swift.Equatable {
    /// <p>A complete description of the stream, including its creation date and time, the DynamoDB table associated with the stream, the shard IDs within the stream, and the beginning and ending sequence numbers of stream records within the shards.</p>
    public let streamDescription: DynamoDbStreamsClientTypes.StreamDescription?

    public init (
        streamDescription: DynamoDbStreamsClientTypes.StreamDescription? = nil
    )
    {
        self.streamDescription = streamDescription
    }
}

struct DescribeStreamOutputResponseBody: Swift.Equatable {
    public let streamDescription: DynamoDbStreamsClientTypes.StreamDescription?
}

extension DescribeStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamDescription = "StreamDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.StreamDescription.self, forKey: .streamDescription)
        streamDescription = streamDescriptionDecoded
    }
}

extension ExpiredIteratorException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExpiredIteratorException(message: \(Swift.String(describing: message)))"}
}

extension ExpiredIteratorException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ExpiredIteratorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The shard iterator has expired and can no longer be used to retrieve stream records. A shard
///       iterator expires 15 minutes after it is retrieved using the <code>GetShardIterator</code>
///       action.</p>
public struct ExpiredIteratorException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The provided iterator exceeds the maximum age allowed.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ExpiredIteratorExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ExpiredIteratorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct GetRecordsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRecordsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRecordsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRecordsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRecordsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRecordsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRecordsOutputError>
}

extension GetRecordsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRecordsInput(limit: \(Swift.String(describing: limit)), shardIterator: \(Swift.String(describing: shardIterator)))"}
}

extension GetRecordsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case shardIterator = "ShardIterator"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let shardIterator = shardIterator {
            try encodeContainer.encode(shardIterator, forKey: .shardIterator)
        }
    }
}

public struct GetRecordsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRecordsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRecordsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRecordsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRecordsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRecordsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRecordsOutputError>
}

public struct GetRecordsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRecordsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRecordsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRecordsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRecordsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRecordsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRecordsOutputError>
}

/// <p>Represents the input of a <code>GetRecords</code> operation.</p>
public struct GetRecordsInput: Swift.Equatable {
    /// <p>The maximum number of records to return from the shard. The upper limit is 1000.</p>
    public let limit: Swift.Int?
    /// <p>A shard iterator that was retrieved from a previous GetShardIterator operation. This iterator can be used to access the stream records in this shard.</p>
    public let shardIterator: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        shardIterator: Swift.String? = nil
    )
    {
        self.limit = limit
        self.shardIterator = shardIterator
    }
}

struct GetRecordsInputBody: Swift.Equatable {
    public let shardIterator: Swift.String?
    public let limit: Swift.Int?
}

extension GetRecordsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case shardIterator = "ShardIterator"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardIteratorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardIterator)
        shardIterator = shardIteratorDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension GetRecordsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRecordsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ExpiredIteratorException" : self = .expiredIteratorException(try ExpiredIteratorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TrimmedDataAccessException" : self = .trimmedDataAccessException(try TrimmedDataAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRecordsOutputError: Swift.Error, Swift.Equatable {
    case expiredIteratorException(ExpiredIteratorException)
    case internalServerError(InternalServerError)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case trimmedDataAccessException(TrimmedDataAccessException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRecordsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRecordsOutputResponse(nextShardIterator: \(Swift.String(describing: nextShardIterator)), records: \(Swift.String(describing: records)))"}
}

extension GetRecordsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRecordsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextShardIterator = output.nextShardIterator
            self.records = output.records
        } else {
            self.nextShardIterator = nil
            self.records = nil
        }
    }
}

/// <p>Represents the output of a <code>GetRecords</code> operation.</p>
public struct GetRecordsOutputResponse: Swift.Equatable {
    /// <p>The next position in the shard from which to start sequentially reading stream records. If
    ///       set to <code>null</code>, the shard has been closed and the requested iterator will not return
    ///       any more data.</p>
    public let nextShardIterator: Swift.String?
    /// <p>The stream records from the shard, which were retrieved using the shard iterator.</p>
    public let records: [DynamoDbStreamsClientTypes.Record]?

    public init (
        nextShardIterator: Swift.String? = nil,
        records: [DynamoDbStreamsClientTypes.Record]? = nil
    )
    {
        self.nextShardIterator = nextShardIterator
        self.records = records
    }
}

struct GetRecordsOutputResponseBody: Swift.Equatable {
    public let records: [DynamoDbStreamsClientTypes.Record]?
    public let nextShardIterator: Swift.String?
}

extension GetRecordsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextShardIterator = "NextShardIterator"
        case records = "Records"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsContainer = try containerValues.decodeIfPresent([DynamoDbStreamsClientTypes.Record?].self, forKey: .records)
        var recordsDecoded0:[DynamoDbStreamsClientTypes.Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [DynamoDbStreamsClientTypes.Record]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
        let nextShardIteratorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextShardIterator)
        nextShardIterator = nextShardIteratorDecoded
    }
}

public struct GetShardIteratorInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetShardIteratorInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetShardIteratorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetShardIteratorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetShardIteratorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetShardIteratorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetShardIteratorOutputError>
}

extension GetShardIteratorInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetShardIteratorInput(sequenceNumber: \(Swift.String(describing: sequenceNumber)), shardId: \(Swift.String(describing: shardId)), shardIteratorType: \(Swift.String(describing: shardIteratorType)), streamArn: \(Swift.String(describing: streamArn)))"}
}

extension GetShardIteratorInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sequenceNumber = "SequenceNumber"
        case shardId = "ShardId"
        case shardIteratorType = "ShardIteratorType"
        case streamArn = "StreamArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sequenceNumber = sequenceNumber {
            try encodeContainer.encode(sequenceNumber, forKey: .sequenceNumber)
        }
        if let shardId = shardId {
            try encodeContainer.encode(shardId, forKey: .shardId)
        }
        if let shardIteratorType = shardIteratorType {
            try encodeContainer.encode(shardIteratorType.rawValue, forKey: .shardIteratorType)
        }
        if let streamArn = streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
    }
}

public struct GetShardIteratorInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetShardIteratorInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetShardIteratorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetShardIteratorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetShardIteratorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetShardIteratorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetShardIteratorOutputError>
}

public struct GetShardIteratorInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetShardIteratorInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetShardIteratorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetShardIteratorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetShardIteratorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetShardIteratorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetShardIteratorOutputError>
}

/// <p>Represents the input of a <code>GetShardIterator</code> operation.</p>
public struct GetShardIteratorInput: Swift.Equatable {
    /// <p>The sequence number of a stream record in the shard from which to start reading.</p>
    public let sequenceNumber: Swift.String?
    /// <p>The identifier of the shard. The iterator will be returned for this shard ID.</p>
    public let shardId: Swift.String?
    /// <p>Determines how the shard iterator is used to start reading stream records from the shard:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AT_SEQUENCE_NUMBER</code> - Start reading exactly from the position denoted by a
    ///           specific sequence number.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AFTER_SEQUENCE_NUMBER</code> - Start reading right after the position denoted by a
    ///           specific sequence number.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TRIM_HORIZON</code> - Start reading at the last (untrimmed) stream record, which is
    ///           the oldest record in the shard. In DynamoDB Streams, there is a 24 hour limit on data retention.
    ///           Stream records whose age exceeds this limit are subject to removal (trimming) from the
    ///           stream.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LATEST</code> - Start reading just after the most recent stream record in the
    ///           shard, so that you always read the most recent data in the shard.</p>
    ///             </li>
    ///          </ul>
    public let shardIteratorType: DynamoDbStreamsClientTypes.ShardIteratorType?
    /// <p>The Amazon Resource Name (ARN) for the stream.</p>
    public let streamArn: Swift.String?

    public init (
        sequenceNumber: Swift.String? = nil,
        shardId: Swift.String? = nil,
        shardIteratorType: DynamoDbStreamsClientTypes.ShardIteratorType? = nil,
        streamArn: Swift.String? = nil
    )
    {
        self.sequenceNumber = sequenceNumber
        self.shardId = shardId
        self.shardIteratorType = shardIteratorType
        self.streamArn = streamArn
    }
}

struct GetShardIteratorInputBody: Swift.Equatable {
    public let streamArn: Swift.String?
    public let shardId: Swift.String?
    public let shardIteratorType: DynamoDbStreamsClientTypes.ShardIteratorType?
    public let sequenceNumber: Swift.String?
}

extension GetShardIteratorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sequenceNumber = "SequenceNumber"
        case shardId = "ShardId"
        case shardIteratorType = "ShardIteratorType"
        case streamArn = "StreamArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let shardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardId)
        shardId = shardIdDecoded
        let shardIteratorTypeDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.ShardIteratorType.self, forKey: .shardIteratorType)
        shardIteratorType = shardIteratorTypeDecoded
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
    }
}

extension GetShardIteratorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetShardIteratorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TrimmedDataAccessException" : self = .trimmedDataAccessException(try TrimmedDataAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetShardIteratorOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case resourceNotFoundException(ResourceNotFoundException)
    case trimmedDataAccessException(TrimmedDataAccessException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetShardIteratorOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetShardIteratorOutputResponse(shardIterator: \(Swift.String(describing: shardIterator)))"}
}

extension GetShardIteratorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetShardIteratorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.shardIterator = output.shardIterator
        } else {
            self.shardIterator = nil
        }
    }
}

/// <p>Represents the output of a <code>GetShardIterator</code> operation.</p>
public struct GetShardIteratorOutputResponse: Swift.Equatable {
    /// <p>The position in the shard from which to start reading stream records sequentially. A shard iterator specifies this position using the sequence number of a stream record in a shard.</p>
    public let shardIterator: Swift.String?

    public init (
        shardIterator: Swift.String? = nil
    )
    {
        self.shardIterator = shardIterator
    }
}

struct GetShardIteratorOutputResponseBody: Swift.Equatable {
    public let shardIterator: Swift.String?
}

extension GetShardIteratorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardIterator = "ShardIterator"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardIteratorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardIterator)
        shardIterator = shardIteratorDecoded
    }
}

extension DynamoDbStreamsClientTypes.Identity: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case principalId = "PrincipalId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let principalId = principalId {
            try encodeContainer.encode(principalId, forKey: .principalId)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalId)
        principalId = principalIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension DynamoDbStreamsClientTypes.Identity: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Identity(principalId: \(Swift.String(describing: principalId)), type: \(Swift.String(describing: type)))"}
}

extension DynamoDbStreamsClientTypes {
    /// <p>Contains details about the type of identity that made the request.</p>
    public struct Identity: Swift.Equatable {
        /// <p>A unique identifier for the entity that made the call. For Time To Live, the
        ///       principalId is "dynamodb.amazonaws.com".</p>
        public let principalId: Swift.String?
        /// <p>The type of the identity. For Time To Live, the type is "Service".</p>
        public let type: Swift.String?

        public init (
            principalId: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.principalId = principalId
            self.type = type
        }
    }

}

extension InternalServerError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServerError(message: \(Swift.String(describing: message)))"}
}

extension InternalServerError: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServerErrorBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An error occurred on the server side.</p>
public struct InternalServerError: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// <p>The server encountered an internal error trying to fulfill the request.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerErrorBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServerErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDbStreamsClientTypes.KeySchemaElement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case keyType = "KeyType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let keyType = keyType {
            try encodeContainer.encode(keyType.rawValue, forKey: .keyType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let keyTypeDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.KeyType.self, forKey: .keyType)
        keyType = keyTypeDecoded
    }
}

extension DynamoDbStreamsClientTypes.KeySchemaElement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeySchemaElement(attributeName: \(Swift.String(describing: attributeName)), keyType: \(Swift.String(describing: keyType)))"}
}

extension DynamoDbStreamsClientTypes {
    /// <p>Represents <i>a single element</i> of a key schema. A key schema specifies
    ///             the attributes that make up the primary key of a table, or the key attributes of an
    ///             index.</p>
    ///          <p>A <code>KeySchemaElement</code> represents exactly one attribute of the primary key. For
    ///             example, a simple primary key would be represented by one <code>KeySchemaElement</code>
    ///             (for the partition key). A composite primary key would require one
    ///                 <code>KeySchemaElement</code> for the partition key, and another
    ///                 <code>KeySchemaElement</code> for the sort key.</p>
    ///          <p>A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested
    ///             attribute). The data type must be one of String, Number, or Binary. The attribute cannot
    ///             be nested within a List or a Map.</p>
    public struct KeySchemaElement: Swift.Equatable {
        /// <p>The name of a key attribute.</p>
        public let attributeName: Swift.String?
        /// <p>The role that this key attribute will assume:</p>
        ///          <ul>
        ///             <li>
        ///               <p>
        ///                   <code>HASH</code> - partition key</p>
        ///             </li>
        ///             <li>
        ///               <p>
        ///                   <code>RANGE</code> - sort key</p>
        ///             </li>
        ///          </ul>
        ///          <note>
        ///             <p>The partition key of an item is also known as its <i>hash
        ///                     attribute</i>. The term "hash attribute" derives from DynamoDB's usage of
        ///                 an internal hash function to evenly distribute data items across partitions, based
        ///                 on their partition key values.</p>
        ///             <p>The sort key of an item is also known as its <i>range
        ///                 attribute</i>. The term "range attribute" derives from the way DynamoDB
        ///                 stores items with the same partition key physically close together, in sorted order
        ///                 by the sort key value.</p>
        ///          </note>
        public let keyType: DynamoDbStreamsClientTypes.KeyType?

        public init (
            attributeName: Swift.String? = nil,
            keyType: DynamoDbStreamsClientTypes.KeyType? = nil
        )
        {
            self.attributeName = attributeName
            self.keyType = keyType
        }
    }

}

extension DynamoDbStreamsClientTypes {
    public enum KeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hash
        case range
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyType] {
            return [
                .hash,
                .range,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hash: return "HASH"
            case .range: return "RANGE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyType(rawValue: rawValue) ?? KeyType.sdkUnknown(rawValue)
        }
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>There is no limit to the number of daily on-demand backups that can be
///             taken.</p>
///          <p>Up to 50 simultaneous table operations are allowed per account. These operations
///             include <code>CreateTable</code>, <code>UpdateTable</code>,
///                 <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
///                 <code>RestoreTableFromBackup</code>, and
///             <code>RestoreTableToPointInTime</code>.</p>
///          <p>The only exception is when you are creating a table with one or more secondary
///             indexes. You can have up to 25 such requests running at a time; however, if the table or
///             index specifications are complex, DynamoDB might temporarily reduce the number of
///             concurrent operations.</p>
///          <p>There is a soft account quota of 256 tables.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Too many operations for a given subscriber.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListStreamsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStreamsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStreamsOutputError>
}

extension ListStreamsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStreamsInput(exclusiveStartStreamArn: \(Swift.String(describing: exclusiveStartStreamArn)), limit: \(Swift.String(describing: limit)), tableName: \(Swift.String(describing: tableName)))"}
}

extension ListStreamsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartStreamArn = "ExclusiveStartStreamArn"
        case limit = "Limit"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusiveStartStreamArn = exclusiveStartStreamArn {
            try encodeContainer.encode(exclusiveStartStreamArn, forKey: .exclusiveStartStreamArn)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct ListStreamsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStreamsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStreamsOutputError>
}

public struct ListStreamsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStreamsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStreamsOutputError>
}

/// <p>Represents the input of a <code>ListStreams</code> operation.</p>
public struct ListStreamsInput: Swift.Equatable {
    /// <p>The ARN (Amazon Resource Name) of the first item that this operation will evaluate. Use the
    ///       value that was returned for <code>LastEvaluatedStreamArn</code> in the previous operation.
    ///     </p>
    public let exclusiveStartStreamArn: Swift.String?
    /// <p>The maximum number of streams to return. The upper limit is 100.</p>
    public let limit: Swift.Int?
    /// <p>If this parameter is provided, then only the streams associated with this table name are returned.</p>
    public let tableName: Swift.String?

    public init (
        exclusiveStartStreamArn: Swift.String? = nil,
        limit: Swift.Int? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.exclusiveStartStreamArn = exclusiveStartStreamArn
        self.limit = limit
        self.tableName = tableName
    }
}

struct ListStreamsInputBody: Swift.Equatable {
    public let tableName: Swift.String?
    public let limit: Swift.Int?
    public let exclusiveStartStreamArn: Swift.String?
}

extension ListStreamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartStreamArn = "ExclusiveStartStreamArn"
        case limit = "Limit"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let exclusiveStartStreamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartStreamArn)
        exclusiveStartStreamArn = exclusiveStartStreamArnDecoded
    }
}

extension ListStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStreamsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStreamsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStreamsOutputResponse(lastEvaluatedStreamArn: \(Swift.String(describing: lastEvaluatedStreamArn)), streams: \(Swift.String(describing: streams)))"}
}

extension ListStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListStreamsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lastEvaluatedStreamArn = output.lastEvaluatedStreamArn
            self.streams = output.streams
        } else {
            self.lastEvaluatedStreamArn = nil
            self.streams = nil
        }
    }
}

/// <p>Represents the output of a <code>ListStreams</code> operation.</p>
public struct ListStreamsOutputResponse: Swift.Equatable {
    /// <p>The stream ARN of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p>
    ///          <p>If <code>LastEvaluatedStreamArn</code> is empty, then the "last page" of results has been
    ///       processed and there is no more data to be retrieved.</p>
    ///          <p>If <code>LastEvaluatedStreamArn</code> is not empty, it does not necessarily mean that there
    ///       is more data in the result set. The only way to know when you have reached the end of the
    ///       result set is when <code>LastEvaluatedStreamArn</code> is empty.</p>
    public let lastEvaluatedStreamArn: Swift.String?
    /// <p>A list of stream descriptors associated with the current account and endpoint.</p>
    public let streams: [DynamoDbStreamsClientTypes.Stream]?

    public init (
        lastEvaluatedStreamArn: Swift.String? = nil,
        streams: [DynamoDbStreamsClientTypes.Stream]? = nil
    )
    {
        self.lastEvaluatedStreamArn = lastEvaluatedStreamArn
        self.streams = streams
    }
}

struct ListStreamsOutputResponseBody: Swift.Equatable {
    public let streams: [DynamoDbStreamsClientTypes.Stream]?
    public let lastEvaluatedStreamArn: Swift.String?
}

extension ListStreamsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastEvaluatedStreamArn = "LastEvaluatedStreamArn"
        case streams = "Streams"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamsContainer = try containerValues.decodeIfPresent([DynamoDbStreamsClientTypes.Stream?].self, forKey: .streams)
        var streamsDecoded0:[DynamoDbStreamsClientTypes.Stream]? = nil
        if let streamsContainer = streamsContainer {
            streamsDecoded0 = [DynamoDbStreamsClientTypes.Stream]()
            for structure0 in streamsContainer {
                if let structure0 = structure0 {
                    streamsDecoded0?.append(structure0)
                }
            }
        }
        streams = streamsDecoded0
        let lastEvaluatedStreamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastEvaluatedStreamArn)
        lastEvaluatedStreamArn = lastEvaluatedStreamArnDecoded
    }
}

extension DynamoDbStreamsClientTypes {
    public enum OperationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case insert
        case modify
        case remove
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationType] {
            return [
                .insert,
                .modify,
                .remove,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .modify: return "MODIFY"
            case .remove: return "REMOVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationType(rawValue: rawValue) ?? OperationType.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDbStreamsClientTypes.Record: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsRegion
        case dynamodb
        case eventID
        case eventName
        case eventSource
        case eventVersion
        case userIdentity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
        if let dynamodb = dynamodb {
            try encodeContainer.encode(dynamodb, forKey: .dynamodb)
        }
        if let eventID = eventID {
            try encodeContainer.encode(eventID, forKey: .eventID)
        }
        if let eventName = eventName {
            try encodeContainer.encode(eventName.rawValue, forKey: .eventName)
        }
        if let eventSource = eventSource {
            try encodeContainer.encode(eventSource, forKey: .eventSource)
        }
        if let eventVersion = eventVersion {
            try encodeContainer.encode(eventVersion, forKey: .eventVersion)
        }
        if let userIdentity = userIdentity {
            try encodeContainer.encode(userIdentity, forKey: .userIdentity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventID)
        eventID = eventIDDecoded
        let eventNameDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.OperationType.self, forKey: .eventName)
        eventName = eventNameDecoded
        let eventVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventVersion)
        eventVersion = eventVersionDecoded
        let eventSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventSource)
        eventSource = eventSourceDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
        let dynamodbDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.StreamRecord.self, forKey: .dynamodb)
        dynamodb = dynamodbDecoded
        let userIdentityDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.Identity.self, forKey: .userIdentity)
        userIdentity = userIdentityDecoded
    }
}

extension DynamoDbStreamsClientTypes.Record: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Record(awsRegion: \(Swift.String(describing: awsRegion)), dynamodb: \(Swift.String(describing: dynamodb)), eventID: \(Swift.String(describing: eventID)), eventName: \(Swift.String(describing: eventName)), eventSource: \(Swift.String(describing: eventSource)), eventVersion: \(Swift.String(describing: eventVersion)), userIdentity: \(Swift.String(describing: userIdentity)))"}
}

extension DynamoDbStreamsClientTypes {
    /// <p>A description of a unique event within a stream.</p>
    public struct Record: Swift.Equatable {
        /// <p>The region in which the <code>GetRecords</code> request was received.</p>
        public let awsRegion: Swift.String?
        /// <p>The main body of the stream record, containing all of the DynamoDB-specific fields.</p>
        public let dynamodb: DynamoDbStreamsClientTypes.StreamRecord?
        /// <p>A globally unique identifier for the event that was recorded in this stream record.</p>
        public let eventID: Swift.String?
        /// <p>The type of data modification that was performed on the DynamoDB table:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>INSERT</code> - a new item was added to the table.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>MODIFY</code> - one or more of an existing item's attributes were modified.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>REMOVE</code> - the item was deleted from the table</p>
        ///             </li>
        ///          </ul>
        public let eventName: DynamoDbStreamsClientTypes.OperationType?
        /// <p>The AWS service from which the stream record originated.  For DynamoDB Streams, this is <code>aws:dynamodb</code>.</p>
        public let eventSource: Swift.String?
        /// <p>The version number of the stream record format.  This number is updated whenever the structure of <code>Record</code> is modified.</p>
        ///          <p>Client applications must not assume that <code>eventVersion</code> will remain at a particular
        ///       value, as this number is subject to change at any time. In general, <code>eventVersion</code> will
        ///       only increase as the low-level DynamoDB Streams API evolves.</p>
        public let eventVersion: Swift.String?
        /// <p>Items that are deleted by the Time to Live process after expiration have the following fields: </p>
        ///          <ul>
        ///             <li>
        ///                <p>Records[].userIdentity.type</p>
        ///                <p>"Service"</p>
        ///             </li>
        ///             <li>
        ///                <p>Records[].userIdentity.principalId</p>
        ///                <p>"dynamodb.amazonaws.com"</p>
        ///             </li>
        ///          </ul>
        public let userIdentity: DynamoDbStreamsClientTypes.Identity?

        public init (
            awsRegion: Swift.String? = nil,
            dynamodb: DynamoDbStreamsClientTypes.StreamRecord? = nil,
            eventID: Swift.String? = nil,
            eventName: DynamoDbStreamsClientTypes.OperationType? = nil,
            eventSource: Swift.String? = nil,
            eventVersion: Swift.String? = nil,
            userIdentity: DynamoDbStreamsClientTypes.Identity? = nil
        )
        {
            self.awsRegion = awsRegion
            self.dynamodb = dynamodb
            self.eventID = eventID
            self.eventName = eventName
            self.eventSource = eventSource
            self.eventVersion = eventVersion
            self.userIdentity = userIdentity
        }
    }

}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation tried to access a nonexistent table or index. The resource
///             might not be specified correctly, or its status might not be
///             <code>ACTIVE</code>.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The resource which is being requested does not exist.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDbStreamsClientTypes.SequenceNumberRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endingSequenceNumber = "EndingSequenceNumber"
        case startingSequenceNumber = "StartingSequenceNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endingSequenceNumber = endingSequenceNumber {
            try encodeContainer.encode(endingSequenceNumber, forKey: .endingSequenceNumber)
        }
        if let startingSequenceNumber = startingSequenceNumber {
            try encodeContainer.encode(startingSequenceNumber, forKey: .startingSequenceNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startingSequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startingSequenceNumber)
        startingSequenceNumber = startingSequenceNumberDecoded
        let endingSequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endingSequenceNumber)
        endingSequenceNumber = endingSequenceNumberDecoded
    }
}

extension DynamoDbStreamsClientTypes.SequenceNumberRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SequenceNumberRange(endingSequenceNumber: \(Swift.String(describing: endingSequenceNumber)), startingSequenceNumber: \(Swift.String(describing: startingSequenceNumber)))"}
}

extension DynamoDbStreamsClientTypes {
    /// <p>The beginning and ending sequence numbers for the stream records contained within a shard.</p>
    public struct SequenceNumberRange: Swift.Equatable {
        /// <p>The last sequence number for the stream records contained within a shard. String contains numeric characters only.</p>
        public let endingSequenceNumber: Swift.String?
        /// <p>The first sequence number for the stream records contained within a shard. String contains numeric characters only.</p>
        public let startingSequenceNumber: Swift.String?

        public init (
            endingSequenceNumber: Swift.String? = nil,
            startingSequenceNumber: Swift.String? = nil
        )
        {
            self.endingSequenceNumber = endingSequenceNumber
            self.startingSequenceNumber = startingSequenceNumber
        }
    }

}

extension DynamoDbStreamsClientTypes.Shard: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parentShardId = "ParentShardId"
        case sequenceNumberRange = "SequenceNumberRange"
        case shardId = "ShardId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parentShardId = parentShardId {
            try encodeContainer.encode(parentShardId, forKey: .parentShardId)
        }
        if let sequenceNumberRange = sequenceNumberRange {
            try encodeContainer.encode(sequenceNumberRange, forKey: .sequenceNumberRange)
        }
        if let shardId = shardId {
            try encodeContainer.encode(shardId, forKey: .shardId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardId)
        shardId = shardIdDecoded
        let sequenceNumberRangeDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.SequenceNumberRange.self, forKey: .sequenceNumberRange)
        sequenceNumberRange = sequenceNumberRangeDecoded
        let parentShardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentShardId)
        parentShardId = parentShardIdDecoded
    }
}

extension DynamoDbStreamsClientTypes.Shard: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Shard(parentShardId: \(Swift.String(describing: parentShardId)), sequenceNumberRange: \(Swift.String(describing: sequenceNumberRange)), shardId: \(Swift.String(describing: shardId)))"}
}

extension DynamoDbStreamsClientTypes {
    /// <p>A uniquely identified group of stream records within a stream.</p>
    public struct Shard: Swift.Equatable {
        /// <p>The shard ID of the current shard's parent.</p>
        public let parentShardId: Swift.String?
        /// <p>The range of possible sequence numbers for the shard.</p>
        public let sequenceNumberRange: DynamoDbStreamsClientTypes.SequenceNumberRange?
        /// <p>The system-generated identifier for this shard.</p>
        public let shardId: Swift.String?

        public init (
            parentShardId: Swift.String? = nil,
            sequenceNumberRange: DynamoDbStreamsClientTypes.SequenceNumberRange? = nil,
            shardId: Swift.String? = nil
        )
        {
            self.parentShardId = parentShardId
            self.sequenceNumberRange = sequenceNumberRange
            self.shardId = shardId
        }
    }

}

extension DynamoDbStreamsClientTypes {
    public enum ShardIteratorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case afterSequenceNumber
        case atSequenceNumber
        case latest
        case trimHorizon
        case sdkUnknown(Swift.String)

        public static var allCases: [ShardIteratorType] {
            return [
                .afterSequenceNumber,
                .atSequenceNumber,
                .latest,
                .trimHorizon,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .afterSequenceNumber: return "AFTER_SEQUENCE_NUMBER"
            case .atSequenceNumber: return "AT_SEQUENCE_NUMBER"
            case .latest: return "LATEST"
            case .trimHorizon: return "TRIM_HORIZON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ShardIteratorType(rawValue: rawValue) ?? ShardIteratorType.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDbStreamsClientTypes.Stream: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamArn = "StreamArn"
        case streamLabel = "StreamLabel"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamArn = streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
        if let streamLabel = streamLabel {
            try encodeContainer.encode(streamLabel, forKey: .streamLabel)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let streamLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamLabel)
        streamLabel = streamLabelDecoded
    }
}

extension DynamoDbStreamsClientTypes.Stream: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Stream(streamArn: \(Swift.String(describing: streamArn)), streamLabel: \(Swift.String(describing: streamLabel)), tableName: \(Swift.String(describing: tableName)))"}
}

extension DynamoDbStreamsClientTypes {
    /// <p>Represents all of the data describing a particular stream.</p>
    public struct Stream: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) for the stream.</p>
        public let streamArn: Swift.String?
        /// <p>A timestamp, in ISO 8601 format, for this stream.</p>
        ///          <p>Note that <code>LatestStreamLabel</code> is not a unique identifier for the stream, because it is
        ///       possible that a stream from another table might have the same timestamp. However, the
        ///       combination of the following three elements is guaranteed to be unique:</p>
        ///          <ul>
        ///             <li>
        ///                <p>the AWS customer ID.</p>
        ///             </li>
        ///             <li>
        ///                <p>the table name</p>
        ///             </li>
        ///             <li>
        ///                <p>the <code>StreamLabel</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let streamLabel: Swift.String?
        /// <p>The DynamoDB table with which the stream is associated.</p>
        public let tableName: Swift.String?

        public init (
            streamArn: Swift.String? = nil,
            streamLabel: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.streamArn = streamArn
            self.streamLabel = streamLabel
            self.tableName = tableName
        }
    }

}

extension DynamoDbStreamsClientTypes.StreamDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationRequestDateTime = "CreationRequestDateTime"
        case keySchema = "KeySchema"
        case lastEvaluatedShardId = "LastEvaluatedShardId"
        case shards = "Shards"
        case streamArn = "StreamArn"
        case streamLabel = "StreamLabel"
        case streamStatus = "StreamStatus"
        case streamViewType = "StreamViewType"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationRequestDateTime = creationRequestDateTime {
            try encodeContainer.encode(creationRequestDateTime.timeIntervalSince1970, forKey: .creationRequestDateTime)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let lastEvaluatedShardId = lastEvaluatedShardId {
            try encodeContainer.encode(lastEvaluatedShardId, forKey: .lastEvaluatedShardId)
        }
        if let shards = shards {
            var shardsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shards)
            for sharddescriptionlist0 in shards {
                try shardsContainer.encode(sharddescriptionlist0)
            }
        }
        if let streamArn = streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
        if let streamLabel = streamLabel {
            try encodeContainer.encode(streamLabel, forKey: .streamLabel)
        }
        if let streamStatus = streamStatus {
            try encodeContainer.encode(streamStatus.rawValue, forKey: .streamStatus)
        }
        if let streamViewType = streamViewType {
            try encodeContainer.encode(streamViewType.rawValue, forKey: .streamViewType)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let streamLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamLabel)
        streamLabel = streamLabelDecoded
        let streamStatusDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.StreamStatus.self, forKey: .streamStatus)
        streamStatus = streamStatusDecoded
        let streamViewTypeDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.StreamViewType.self, forKey: .streamViewType)
        streamViewType = streamViewTypeDecoded
        let creationRequestDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationRequestDateTime)
        creationRequestDateTime = creationRequestDateTimeDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDbStreamsClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDbStreamsClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDbStreamsClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let shardsContainer = try containerValues.decodeIfPresent([DynamoDbStreamsClientTypes.Shard?].self, forKey: .shards)
        var shardsDecoded0:[DynamoDbStreamsClientTypes.Shard]? = nil
        if let shardsContainer = shardsContainer {
            shardsDecoded0 = [DynamoDbStreamsClientTypes.Shard]()
            for structure0 in shardsContainer {
                if let structure0 = structure0 {
                    shardsDecoded0?.append(structure0)
                }
            }
        }
        shards = shardsDecoded0
        let lastEvaluatedShardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastEvaluatedShardId)
        lastEvaluatedShardId = lastEvaluatedShardIdDecoded
    }
}

extension DynamoDbStreamsClientTypes.StreamDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StreamDescription(creationRequestDateTime: \(Swift.String(describing: creationRequestDateTime)), keySchema: \(Swift.String(describing: keySchema)), lastEvaluatedShardId: \(Swift.String(describing: lastEvaluatedShardId)), shards: \(Swift.String(describing: shards)), streamArn: \(Swift.String(describing: streamArn)), streamLabel: \(Swift.String(describing: streamLabel)), streamStatus: \(Swift.String(describing: streamStatus)), streamViewType: \(Swift.String(describing: streamViewType)), tableName: \(Swift.String(describing: tableName)))"}
}

extension DynamoDbStreamsClientTypes {
    /// <p>Represents all of the data describing a particular stream.</p>
    public struct StreamDescription: Swift.Equatable {
        /// <p>The date and time when the request to create this stream was issued.</p>
        public let creationRequestDateTime: ClientRuntime.Date?
        /// <p>The key attribute(s) of the stream's DynamoDB table.</p>
        public let keySchema: [DynamoDbStreamsClientTypes.KeySchemaElement]?
        /// <p>The shard ID of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p>
        ///          <p>If <code>LastEvaluatedShardId</code> is empty, then the "last page" of results has been
        ///       processed and there is currently no more data to be retrieved.</p>
        ///          <p>If <code>LastEvaluatedShardId</code> is not empty, it does not necessarily mean that there is
        ///       more data in the result set. The only way to know when you have reached the end of the result
        ///       set is when <code>LastEvaluatedShardId</code> is empty.</p>
        public let lastEvaluatedShardId: Swift.String?
        /// <p>The shards that comprise the stream.</p>
        public let shards: [DynamoDbStreamsClientTypes.Shard]?
        /// <p>The Amazon Resource Name (ARN) for the stream.</p>
        public let streamArn: Swift.String?
        /// <p>A timestamp, in ISO 8601 format, for this stream.</p>
        ///          <p>Note that <code>LatestStreamLabel</code> is not a unique identifier for the stream, because it is
        ///       possible that a stream from another table might have the same timestamp. However, the
        ///       combination of the following three elements is guaranteed to be unique:</p>
        ///          <ul>
        ///             <li>
        ///                <p>the AWS customer ID.</p>
        ///             </li>
        ///             <li>
        ///                <p>the table name</p>
        ///             </li>
        ///             <li>
        ///                <p>the <code>StreamLabel</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let streamLabel: Swift.String?
        /// <p>Indicates the current status of the stream:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ENABLING</code> - Streams is currently being enabled on the DynamoDB table.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>ENABLED</code> - the stream is enabled.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DISABLING</code> - Streams is currently being disabled on the DynamoDB table.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DISABLED</code> - the stream is disabled.</p>
        ///             </li>
        ///          </ul>
        public let streamStatus: DynamoDbStreamsClientTypes.StreamStatus?
        /// <p>Indicates the format of the records within this stream:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>KEYS_ONLY</code> - only the key attributes of items that were modified in the DynamoDB table.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NEW_IMAGE</code> - entire items from the table, as they appeared after they were modified.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>OLD_IMAGE</code> - entire items from the table, as they appeared before they were modified.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NEW_AND_OLD_IMAGES</code> - both the new and the old images of the items from the table.</p>
        ///             </li>
        ///          </ul>
        public let streamViewType: DynamoDbStreamsClientTypes.StreamViewType?
        /// <p>The DynamoDB table with which the stream is associated.</p>
        public let tableName: Swift.String?

        public init (
            creationRequestDateTime: ClientRuntime.Date? = nil,
            keySchema: [DynamoDbStreamsClientTypes.KeySchemaElement]? = nil,
            lastEvaluatedShardId: Swift.String? = nil,
            shards: [DynamoDbStreamsClientTypes.Shard]? = nil,
            streamArn: Swift.String? = nil,
            streamLabel: Swift.String? = nil,
            streamStatus: DynamoDbStreamsClientTypes.StreamStatus? = nil,
            streamViewType: DynamoDbStreamsClientTypes.StreamViewType? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.creationRequestDateTime = creationRequestDateTime
            self.keySchema = keySchema
            self.lastEvaluatedShardId = lastEvaluatedShardId
            self.shards = shards
            self.streamArn = streamArn
            self.streamLabel = streamLabel
            self.streamStatus = streamStatus
            self.streamViewType = streamViewType
            self.tableName = tableName
        }
    }

}

extension DynamoDbStreamsClientTypes.StreamRecord: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateCreationDateTime = "ApproximateCreationDateTime"
        case keys = "Keys"
        case newImage = "NewImage"
        case oldImage = "OldImage"
        case sequenceNumber = "SequenceNumber"
        case sizeBytes = "SizeBytes"
        case streamViewType = "StreamViewType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approximateCreationDateTime = approximateCreationDateTime {
            try encodeContainer.encode(approximateCreationDateTime.timeIntervalSince1970, forKey: .approximateCreationDateTime)
        }
        if let keys = keys {
            var keysContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .keys)
            for (dictKey0, attributemap0) in keys {
                try keysContainer.encode(attributemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let newImage = newImage {
            var newImageContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .newImage)
            for (dictKey0, attributemap0) in newImage {
                try newImageContainer.encode(attributemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let oldImage = oldImage {
            var oldImageContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .oldImage)
            for (dictKey0, attributemap0) in oldImage {
                try oldImageContainer.encode(attributemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sequenceNumber = sequenceNumber {
            try encodeContainer.encode(sequenceNumber, forKey: .sequenceNumber)
        }
        if let sizeBytes = sizeBytes {
            try encodeContainer.encode(sizeBytes, forKey: .sizeBytes)
        }
        if let streamViewType = streamViewType {
            try encodeContainer.encode(streamViewType.rawValue, forKey: .streamViewType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let approximateCreationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .approximateCreationDateTime)
        approximateCreationDateTime = approximateCreationDateTimeDecoded
        let keysContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbStreamsClientTypes.AttributeValue?].self, forKey: .keys)
        var keysDecoded0: [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]()
            for (key0, attributevalue0) in keysContainer {
                if let attributevalue0 = attributevalue0 {
                    keysDecoded0?[key0] = attributevalue0
                }
            }
        }
        keys = keysDecoded0
        let newImageContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbStreamsClientTypes.AttributeValue?].self, forKey: .newImage)
        var newImageDecoded0: [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]? = nil
        if let newImageContainer = newImageContainer {
            newImageDecoded0 = [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]()
            for (key0, attributevalue0) in newImageContainer {
                if let attributevalue0 = attributevalue0 {
                    newImageDecoded0?[key0] = attributevalue0
                }
            }
        }
        newImage = newImageDecoded0
        let oldImageContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbStreamsClientTypes.AttributeValue?].self, forKey: .oldImage)
        var oldImageDecoded0: [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]? = nil
        if let oldImageContainer = oldImageContainer {
            oldImageDecoded0 = [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]()
            for (key0, attributevalue0) in oldImageContainer {
                if let attributevalue0 = attributevalue0 {
                    oldImageDecoded0?[key0] = attributevalue0
                }
            }
        }
        oldImage = oldImageDecoded0
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
        let sizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeBytes)
        sizeBytes = sizeBytesDecoded
        let streamViewTypeDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.StreamViewType.self, forKey: .streamViewType)
        streamViewType = streamViewTypeDecoded
    }
}

extension DynamoDbStreamsClientTypes.StreamRecord: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StreamRecord(approximateCreationDateTime: \(Swift.String(describing: approximateCreationDateTime)), keys: \(Swift.String(describing: keys)), newImage: \(Swift.String(describing: newImage)), oldImage: \(Swift.String(describing: oldImage)), sequenceNumber: \(Swift.String(describing: sequenceNumber)), sizeBytes: \(Swift.String(describing: sizeBytes)), streamViewType: \(Swift.String(describing: streamViewType)))"}
}

extension DynamoDbStreamsClientTypes {
    /// <p>A description of a single data modification that was performed on an item in a DynamoDB table.</p>
    public struct StreamRecord: Swift.Equatable {
        /// <p>The approximate date and time when the stream record was created, in <a href="http://www.epochconverter.com/">UNIX epoch time</a> format.</p>
        public let approximateCreationDateTime: ClientRuntime.Date?
        /// <p>The primary key attribute(s) for the DynamoDB item that was modified.</p>
        public let keys: [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]?
        /// <p>The item in the DynamoDB table as it appeared after it was modified.</p>
        public let newImage: [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]?
        /// <p>The item in the DynamoDB table as it appeared before it was modified.</p>
        public let oldImage: [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]?
        /// <p>The sequence number of the stream record.</p>
        public let sequenceNumber: Swift.String?
        /// <p>The size of the stream record, in bytes.</p>
        public let sizeBytes: Swift.Int?
        /// <p>The type of data from the modified DynamoDB item that was captured in this stream record:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>KEYS_ONLY</code> - only the key attributes of the modified item.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NEW_IMAGE</code> - the entire item, as it appeared after it was modified.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>OLD_IMAGE</code> - the entire item, as it appeared before it was modified.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NEW_AND_OLD_IMAGES</code> - both the new and the old item images of the item.</p>
        ///             </li>
        ///          </ul>
        public let streamViewType: DynamoDbStreamsClientTypes.StreamViewType?

        public init (
            approximateCreationDateTime: ClientRuntime.Date? = nil,
            keys: [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]? = nil,
            newImage: [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]? = nil,
            oldImage: [Swift.String:DynamoDbStreamsClientTypes.AttributeValue]? = nil,
            sequenceNumber: Swift.String? = nil,
            sizeBytes: Swift.Int? = nil,
            streamViewType: DynamoDbStreamsClientTypes.StreamViewType? = nil
        )
        {
            self.approximateCreationDateTime = approximateCreationDateTime
            self.keys = keys
            self.newImage = newImage
            self.oldImage = oldImage
            self.sequenceNumber = sequenceNumber
            self.sizeBytes = sizeBytes
            self.streamViewType = streamViewType
        }
    }

}

extension DynamoDbStreamsClientTypes {
    public enum StreamStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabling
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .enabled: return "ENABLED"
            case .enabling: return "ENABLING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StreamStatus(rawValue: rawValue) ?? StreamStatus.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDbStreamsClientTypes {
    public enum StreamViewType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case keysOnly
        case newAndOldImages
        case newImage
        case oldImage
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamViewType] {
            return [
                .keysOnly,
                .newAndOldImages,
                .newImage,
                .oldImage,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .keysOnly: return "KEYS_ONLY"
            case .newAndOldImages: return "NEW_AND_OLD_IMAGES"
            case .newImage: return "NEW_IMAGE"
            case .oldImage: return "OLD_IMAGE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StreamViewType(rawValue: rawValue) ?? StreamViewType.sdkUnknown(rawValue)
        }
    }
}

extension TrimmedDataAccessException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrimmedDataAccessException(message: \(Swift.String(describing: message)))"}
}

extension TrimmedDataAccessException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TrimmedDataAccessExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation attempted to read past the oldest stream record in a shard.</p>
///          <p>In DynamoDB Streams, there is a 24 hour limit on data retention. Stream records whose age exceeds this limit are subject to removal (trimming) from the stream. You might receive a TrimmedDataAccessException if:</p>
///          <ul>
///             <li>
///                <p>You request a shard iterator with a sequence number older than the trim point (24 hours).</p>
///             </li>
///             <li>
///                <p>You obtain a shard iterator, but before you use the iterator in a <code>GetRecords</code>
///         request, a stream record in the shard exceeds the 24 hour period and is trimmed. This causes
///         the iterator to access a record that no longer exists.</p>
///             </li>
///          </ul>
public struct TrimmedDataAccessException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>"The data you are trying to access has been trimmed.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TrimmedDataAccessExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TrimmedDataAccessExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
