// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension DatabaseMigrationClient {
    /// <p>Adds metadata tags to an AWS DMS resource, including replication instance, endpoint,
    ///          security group, and migration task. These tags can also be used with cost allocation
    ///          reporting to track cost associated with DMS resources, or used in a Condition statement in
    ///          an IAM policy for DMS. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
    ///                <code>Tag</code>
    ///             </a> data type description.</p>
    func addTagsToResource(input: AddTagsToResourceInput) async throws -> AddTagsToResourceOutputResponse
    {
        typealias addTagsToResourceContinuation = CheckedContinuation<AddTagsToResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addTagsToResourceContinuation) in
            addTagsToResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Applies a pending maintenance action to a resource (for example, to a replication instance).</p>
    func applyPendingMaintenanceAction(input: ApplyPendingMaintenanceActionInput) async throws -> ApplyPendingMaintenanceActionOutputResponse
    {
        typealias applyPendingMaintenanceActionContinuation = CheckedContinuation<ApplyPendingMaintenanceActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: applyPendingMaintenanceActionContinuation) in
            applyPendingMaintenanceAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Cancels a single premigration assessment run.</p>
    ///          <p>This operation prevents any individual assessments from running if they haven't started
    ///          running. It also attempts to cancel any individual assessments that are currently
    ///          running.</p>
    func cancelReplicationTaskAssessmentRun(input: CancelReplicationTaskAssessmentRunInput) async throws -> CancelReplicationTaskAssessmentRunOutputResponse
    {
        typealias cancelReplicationTaskAssessmentRunContinuation = CheckedContinuation<CancelReplicationTaskAssessmentRunOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelReplicationTaskAssessmentRunContinuation) in
            cancelReplicationTaskAssessmentRun(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an endpoint using the provided settings.</p>
    func createEndpoint(input: CreateEndpointInput) async throws -> CreateEndpointOutputResponse
    {
        typealias createEndpointContinuation = CheckedContinuation<CreateEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEndpointContinuation) in
            createEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Creates an AWS DMS event notification subscription. </p>
    ///          <p>You can specify the type of source (<code>SourceType</code>) you want to be notified of,
    ///          provide a list of AWS DMS source IDs (<code>SourceIds</code>) that triggers the events, and
    ///          provide a list of event categories (<code>EventCategories</code>) for events you want to be
    ///          notified of. If you specify both the <code>SourceType</code> and <code>SourceIds</code>,
    ///          such as <code>SourceType = replication-instance</code> and <code>SourceIdentifier =
    ///             my-replinstance</code>, you will be notified of all the replication instance events for
    ///          the specified source. If you specify a <code>SourceType</code> but don't specify a
    ///             <code>SourceIdentifier</code>, you receive notice of the events for that source type for
    ///          all your AWS DMS sources. If you don't specify either <code>SourceType</code> nor
    ///             <code>SourceIdentifier</code>, you will be notified of events generated from all AWS DMS
    ///          sources belonging to your customer account.</p>
    ///          <p>For more information about AWS DMS events, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and
    ///             Notifications</a> in the <i>AWS Database Migration Service User
    ///             Guide.</i>
    ///          </p>
    func createEventSubscription(input: CreateEventSubscriptionInput) async throws -> CreateEventSubscriptionOutputResponse
    {
        typealias createEventSubscriptionContinuation = CheckedContinuation<CreateEventSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEventSubscriptionContinuation) in
            createEventSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates the replication instance using the specified parameters.</p>
    ///          <p>AWS DMS requires that your account have certain roles with appropriate permissions
    ///          before you can create a replication instance. For information on the required roles, see
    ///       <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.APIRole">Creating the IAM Roles to Use With the AWS CLI and AWS DMS API</a>. For
    ///          information on the required permissions, see
    ///       <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.IAMPermissions">IAM Permissions Needed to Use AWS DMS</a>.</p>
    func createReplicationInstance(input: CreateReplicationInstanceInput) async throws -> CreateReplicationInstanceOutputResponse
    {
        typealias createReplicationInstanceContinuation = CheckedContinuation<CreateReplicationInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createReplicationInstanceContinuation) in
            createReplicationInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a replication subnet group given a list of the subnet IDs in a VPC.</p>
    func createReplicationSubnetGroup(input: CreateReplicationSubnetGroupInput) async throws -> CreateReplicationSubnetGroupOutputResponse
    {
        typealias createReplicationSubnetGroupContinuation = CheckedContinuation<CreateReplicationSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createReplicationSubnetGroupContinuation) in
            createReplicationSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a replication task using the specified parameters.</p>
    func createReplicationTask(input: CreateReplicationTaskInput) async throws -> CreateReplicationTaskOutputResponse
    {
        typealias createReplicationTaskContinuation = CheckedContinuation<CreateReplicationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createReplicationTaskContinuation) in
            createReplicationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified certificate. </p>
    func deleteCertificate(input: DeleteCertificateInput) async throws -> DeleteCertificateOutputResponse
    {
        typealias deleteCertificateContinuation = CheckedContinuation<DeleteCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCertificateContinuation) in
            deleteCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the connection between a replication instance and an endpoint.</p>
    func deleteConnection(input: DeleteConnectionInput) async throws -> DeleteConnectionOutputResponse
    {
        typealias deleteConnectionContinuation = CheckedContinuation<DeleteConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConnectionContinuation) in
            deleteConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified endpoint.</p>
    ///          <note>
    ///             <p>All tasks associated with the endpoint must be deleted before you can delete the
    ///             endpoint.</p>
    ///          </note>
    ///          <p></p>
    func deleteEndpoint(input: DeleteEndpointInput) async throws -> DeleteEndpointOutputResponse
    {
        typealias deleteEndpointContinuation = CheckedContinuation<DeleteEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEndpointContinuation) in
            deleteEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Deletes an AWS DMS event subscription. </p>
    func deleteEventSubscription(input: DeleteEventSubscriptionInput) async throws -> DeleteEventSubscriptionOutputResponse
    {
        typealias deleteEventSubscriptionContinuation = CheckedContinuation<DeleteEventSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEventSubscriptionContinuation) in
            deleteEventSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified replication instance.</p>
    ///          <note>
    ///             <p>You must delete any migration tasks that are associated with the replication instance
    ///             before you can delete it.</p>
    ///          </note>
    ///          <p></p>
    func deleteReplicationInstance(input: DeleteReplicationInstanceInput) async throws -> DeleteReplicationInstanceOutputResponse
    {
        typealias deleteReplicationInstanceContinuation = CheckedContinuation<DeleteReplicationInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteReplicationInstanceContinuation) in
            deleteReplicationInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a subnet group.</p>
    func deleteReplicationSubnetGroup(input: DeleteReplicationSubnetGroupInput) async throws -> DeleteReplicationSubnetGroupOutputResponse
    {
        typealias deleteReplicationSubnetGroupContinuation = CheckedContinuation<DeleteReplicationSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteReplicationSubnetGroupContinuation) in
            deleteReplicationSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified replication task.</p>
    func deleteReplicationTask(input: DeleteReplicationTaskInput) async throws -> DeleteReplicationTaskOutputResponse
    {
        typealias deleteReplicationTaskContinuation = CheckedContinuation<DeleteReplicationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteReplicationTaskContinuation) in
            deleteReplicationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the record of a single premigration assessment run.</p>
    ///          <p>This operation removes all metadata that AWS DMS maintains about this assessment run.
    ///          However, the operation leaves untouched all information about this assessment run that is
    ///          stored in your Amazon S3 bucket.</p>
    func deleteReplicationTaskAssessmentRun(input: DeleteReplicationTaskAssessmentRunInput) async throws -> DeleteReplicationTaskAssessmentRunOutputResponse
    {
        typealias deleteReplicationTaskAssessmentRunContinuation = CheckedContinuation<DeleteReplicationTaskAssessmentRunOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteReplicationTaskAssessmentRunContinuation) in
            deleteReplicationTaskAssessmentRun(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all of the AWS DMS attributes for a customer account. These attributes include AWS
    ///          DMS quotas for the account and a unique account identifier in a particular DMS region. DMS
    ///          quotas include a list of resource quotas supported by the account, such as the number of
    ///          replication instances allowed. The description for each resource quota, includes the quota
    ///          name, current usage toward that quota, and the quota's maximum value. DMS uses the unique
    ///          account identifier to name each artifact used by DMS in the given region.</p>
    ///          <p>This command does not take any parameters.</p>
    func describeAccountAttributes(input: DescribeAccountAttributesInput) async throws -> DescribeAccountAttributesOutputResponse
    {
        typealias describeAccountAttributesContinuation = CheckedContinuation<DescribeAccountAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountAttributesContinuation) in
            describeAccountAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides a list of individual assessments that you can specify for a new premigration
    ///          assessment run, given one or more parameters.</p>
    ///          <p>If you specify an existing migration task, this operation provides the default individual
    ///          assessments you can specify for that task. Otherwise, the specified parameters model elements
    ///          of a possible migration task on which to base a premigration assessment run.</p>
    ///          <p>To use these migration task modeling parameters, you must specify an existing replication instance,
    ///          a source database engine, a target database engine, and a migration type. This combination of
    ///          parameters potentially limits the default individual assessments available for an assessment run
    ///          created for a corresponding migration task.</p>
    ///          <p>If you specify no parameters, this operation provides a list of all possible individual assessments
    ///          that you can specify for an assessment run. If you specify any one of the task modeling parameters, you must
    ///          specify all of them or the operation cannot provide a list of individual assessments.
    ///          The only parameter that you can specify alone is for an existing migration task. The specified task
    ///          definition then determines the default list of individual assessments that you can specify in an
    ///          assessment run for the task.</p>
    func describeApplicableIndividualAssessments(input: DescribeApplicableIndividualAssessmentsInput) async throws -> DescribeApplicableIndividualAssessmentsOutputResponse
    {
        typealias describeApplicableIndividualAssessmentsContinuation = CheckedContinuation<DescribeApplicableIndividualAssessmentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeApplicableIndividualAssessmentsContinuation) in
            describeApplicableIndividualAssessments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides a description of the certificate.</p>
    func describeCertificates(input: DescribeCertificatesInput) async throws -> DescribeCertificatesOutputResponse
    {
        typealias describeCertificatesContinuation = CheckedContinuation<DescribeCertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCertificatesContinuation) in
            describeCertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the status of the connections that have been made between the replication
    ///          instance and an endpoint. Connections are created when you test an endpoint.</p>
    func describeConnections(input: DescribeConnectionsInput) async throws -> DescribeConnectionsOutputResponse
    {
        typealias describeConnectionsContinuation = CheckedContinuation<DescribeConnectionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeConnectionsContinuation) in
            describeConnections(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the possible endpoint settings available
    ///          when you create an endpoint for a specific database engine.</p>
    func describeEndpointSettings(input: DescribeEndpointSettingsInput) async throws -> DescribeEndpointSettingsOutputResponse
    {
        typealias describeEndpointSettingsContinuation = CheckedContinuation<DescribeEndpointSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEndpointSettingsContinuation) in
            describeEndpointSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the type of endpoints available.</p>
    func describeEndpointTypes(input: DescribeEndpointTypesInput) async throws -> DescribeEndpointTypesOutputResponse
    {
        typealias describeEndpointTypesContinuation = CheckedContinuation<DescribeEndpointTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEndpointTypesContinuation) in
            describeEndpointTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the endpoints for your account in the current region.</p>
    func describeEndpoints(input: DescribeEndpointsInput) async throws -> DescribeEndpointsOutputResponse
    {
        typealias describeEndpointsContinuation = CheckedContinuation<DescribeEndpointsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEndpointsContinuation) in
            describeEndpoints(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists categories for all event source types, or, if specified, for a specified source
    ///          type. You can see a list of the event categories and source types in <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events
    ///             and Notifications</a> in the <i>AWS Database Migration Service User
    ///             Guide.</i>
    ///          </p>
    func describeEventCategories(input: DescribeEventCategoriesInput) async throws -> DescribeEventCategoriesOutputResponse
    {
        typealias describeEventCategoriesContinuation = CheckedContinuation<DescribeEventCategoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventCategoriesContinuation) in
            describeEventCategories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all the event subscriptions for a customer account. The description of a
    ///          subscription includes <code>SubscriptionName</code>, <code>SNSTopicARN</code>,
    ///             <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>,
    ///             <code>CreationTime</code>, and <code>Status</code>. </p>
    ///          <p>If you specify <code>SubscriptionName</code>, this action lists the description for that
    ///          subscription.</p>
    func describeEventSubscriptions(input: DescribeEventSubscriptionsInput) async throws -> DescribeEventSubscriptionsOutputResponse
    {
        typealias describeEventSubscriptionsContinuation = CheckedContinuation<DescribeEventSubscriptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventSubscriptionsContinuation) in
            describeEventSubscriptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Lists events for a given source identifier and source type. You can also specify a
    ///          start and end time. For more information on AWS DMS events, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and
    ///             Notifications</a> in the <i>AWS Database Migration User
    ///          Guide.</i>
    ///          </p>
    func describeEvents(input: DescribeEventsInput) async throws -> DescribeEventsOutputResponse
    {
        typealias describeEventsContinuation = CheckedContinuation<DescribeEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventsContinuation) in
            describeEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the replication instance types that can be created in the
    ///          specified region.</p>
    func describeOrderableReplicationInstances(input: DescribeOrderableReplicationInstancesInput) async throws -> DescribeOrderableReplicationInstancesOutputResponse
    {
        typealias describeOrderableReplicationInstancesContinuation = CheckedContinuation<DescribeOrderableReplicationInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOrderableReplicationInstancesContinuation) in
            describeOrderableReplicationInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>For internal use only</p>
    func describePendingMaintenanceActions(input: DescribePendingMaintenanceActionsInput) async throws -> DescribePendingMaintenanceActionsOutputResponse
    {
        typealias describePendingMaintenanceActionsContinuation = CheckedContinuation<DescribePendingMaintenanceActionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePendingMaintenanceActionsContinuation) in
            describePendingMaintenanceActions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the status of the RefreshSchemas operation.</p>
    func describeRefreshSchemasStatus(input: DescribeRefreshSchemasStatusInput) async throws -> DescribeRefreshSchemasStatusOutputResponse
    {
        typealias describeRefreshSchemasStatusContinuation = CheckedContinuation<DescribeRefreshSchemasStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRefreshSchemasStatusContinuation) in
            describeRefreshSchemasStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the task logs for the specified task.</p>
    func describeReplicationInstanceTaskLogs(input: DescribeReplicationInstanceTaskLogsInput) async throws -> DescribeReplicationInstanceTaskLogsOutputResponse
    {
        typealias describeReplicationInstanceTaskLogsContinuation = CheckedContinuation<DescribeReplicationInstanceTaskLogsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReplicationInstanceTaskLogsContinuation) in
            describeReplicationInstanceTaskLogs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about replication instances for your account in the current
    ///          region.</p>
    func describeReplicationInstances(input: DescribeReplicationInstancesInput) async throws -> DescribeReplicationInstancesOutputResponse
    {
        typealias describeReplicationInstancesContinuation = CheckedContinuation<DescribeReplicationInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReplicationInstancesContinuation) in
            describeReplicationInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the replication subnet groups.</p>
    func describeReplicationSubnetGroups(input: DescribeReplicationSubnetGroupsInput) async throws -> DescribeReplicationSubnetGroupsOutputResponse
    {
        typealias describeReplicationSubnetGroupsContinuation = CheckedContinuation<DescribeReplicationSubnetGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReplicationSubnetGroupsContinuation) in
            describeReplicationSubnetGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the task assessment results from Amazon S3. This action always returns the
    ///          latest results.</p>
    func describeReplicationTaskAssessmentResults(input: DescribeReplicationTaskAssessmentResultsInput) async throws -> DescribeReplicationTaskAssessmentResultsOutputResponse
    {
        typealias describeReplicationTaskAssessmentResultsContinuation = CheckedContinuation<DescribeReplicationTaskAssessmentResultsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReplicationTaskAssessmentResultsContinuation) in
            describeReplicationTaskAssessmentResults(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a paginated list of premigration assessment runs based on filter
    ///          settings.</p>
    ///          <p>These filter settings can specify a combination of premigration assessment runs,
    ///          migration tasks, replication instances, and assessment run status values.</p>
    ///          <note>
    ///             <p>This operation doesn't return information about individual assessments. For this
    ///             information, see the <code>DescribeReplicationTaskIndividualAssessments</code>
    ///             operation. </p>
    ///          </note>
    func describeReplicationTaskAssessmentRuns(input: DescribeReplicationTaskAssessmentRunsInput) async throws -> DescribeReplicationTaskAssessmentRunsOutputResponse
    {
        typealias describeReplicationTaskAssessmentRunsContinuation = CheckedContinuation<DescribeReplicationTaskAssessmentRunsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReplicationTaskAssessmentRunsContinuation) in
            describeReplicationTaskAssessmentRuns(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a paginated list of individual assessments based on filter settings.</p>
    ///          <p>These filter settings can specify a combination of premigration assessment runs,
    ///          migration tasks, and assessment status values.</p>
    func describeReplicationTaskIndividualAssessments(input: DescribeReplicationTaskIndividualAssessmentsInput) async throws -> DescribeReplicationTaskIndividualAssessmentsOutputResponse
    {
        typealias describeReplicationTaskIndividualAssessmentsContinuation = CheckedContinuation<DescribeReplicationTaskIndividualAssessmentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReplicationTaskIndividualAssessmentsContinuation) in
            describeReplicationTaskIndividualAssessments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about replication tasks for your account in the current
    ///          region.</p>
    func describeReplicationTasks(input: DescribeReplicationTasksInput) async throws -> DescribeReplicationTasksOutputResponse
    {
        typealias describeReplicationTasksContinuation = CheckedContinuation<DescribeReplicationTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReplicationTasksContinuation) in
            describeReplicationTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the schema for the specified endpoint.</p>
    ///
    ///          <p></p>
    func describeSchemas(input: DescribeSchemasInput) async throws -> DescribeSchemasOutputResponse
    {
        typealias describeSchemasContinuation = CheckedContinuation<DescribeSchemasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSchemasContinuation) in
            describeSchemas(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns table statistics on the database migration task, including table name, rows
    ///          inserted, rows updated, and rows deleted.</p>
    ///          <p>Note that the "last updated" column the DMS console only indicates the time that AWS DMS
    ///          last updated the table statistics record for a table. It does not indicate the time of the
    ///          last update to the table.</p>
    func describeTableStatistics(input: DescribeTableStatisticsInput) async throws -> DescribeTableStatisticsOutputResponse
    {
        typealias describeTableStatisticsContinuation = CheckedContinuation<DescribeTableStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTableStatisticsContinuation) in
            describeTableStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Uploads the specified certificate.</p>
    func importCertificate(input: ImportCertificateInput) async throws -> ImportCertificateOutputResponse
    {
        typealias importCertificateContinuation = CheckedContinuation<ImportCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importCertificateContinuation) in
            importCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all metadata tags attached to an AWS DMS resource, including
    ///          replication instance, endpoint, security group, and migration task.
    ///          For more information, see <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
    ///                <code>Tag</code>
    ///             </a> data type description.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies the specified endpoint.</p>
    func modifyEndpoint(input: ModifyEndpointInput) async throws -> ModifyEndpointOutputResponse
    {
        typealias modifyEndpointContinuation = CheckedContinuation<ModifyEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyEndpointContinuation) in
            modifyEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies an existing AWS DMS event notification subscription. </p>
    func modifyEventSubscription(input: ModifyEventSubscriptionInput) async throws -> ModifyEventSubscriptionOutputResponse
    {
        typealias modifyEventSubscriptionContinuation = CheckedContinuation<ModifyEventSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyEventSubscriptionContinuation) in
            modifyEventSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies the replication instance to apply new settings. You can change one or more
    ///          parameters by specifying these parameters and the new values in the request.</p>
    ///          <p>Some settings are applied during the maintenance window.</p>
    ///
    ///          <p></p>
    func modifyReplicationInstance(input: ModifyReplicationInstanceInput) async throws -> ModifyReplicationInstanceOutputResponse
    {
        typealias modifyReplicationInstanceContinuation = CheckedContinuation<ModifyReplicationInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyReplicationInstanceContinuation) in
            modifyReplicationInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies the settings for the specified replication subnet group.</p>
    func modifyReplicationSubnetGroup(input: ModifyReplicationSubnetGroupInput) async throws -> ModifyReplicationSubnetGroupOutputResponse
    {
        typealias modifyReplicationSubnetGroupContinuation = CheckedContinuation<ModifyReplicationSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyReplicationSubnetGroupContinuation) in
            modifyReplicationSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies the specified replication task.</p>
    ///          <p>You can't modify the task endpoints. The task must be stopped before you can modify it. </p>
    ///          <p>For more information about AWS DMS tasks, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html">Working with Migration Tasks</a> in the
    ///             <i>AWS Database Migration Service User Guide</i>.</p>
    func modifyReplicationTask(input: ModifyReplicationTaskInput) async throws -> ModifyReplicationTaskOutputResponse
    {
        typealias modifyReplicationTaskContinuation = CheckedContinuation<ModifyReplicationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyReplicationTaskContinuation) in
            modifyReplicationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Moves a replication task from its current replication instance to a different target
    ///          replication instance using the specified parameters. The target replication instance must
    ///          be created with the same or later AWS DMS version as the current replication
    ///          instance.</p>
    func moveReplicationTask(input: MoveReplicationTaskInput) async throws -> MoveReplicationTaskOutputResponse
    {
        typealias moveReplicationTaskContinuation = CheckedContinuation<MoveReplicationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: moveReplicationTaskContinuation) in
            moveReplicationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Reboots a replication instance. Rebooting results in a momentary outage, until the
    ///          replication instance becomes available again.</p>
    func rebootReplicationInstance(input: RebootReplicationInstanceInput) async throws -> RebootReplicationInstanceOutputResponse
    {
        typealias rebootReplicationInstanceContinuation = CheckedContinuation<RebootReplicationInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rebootReplicationInstanceContinuation) in
            rebootReplicationInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Populates the schema for the specified endpoint. This is an asynchronous operation and
    ///          can take several minutes. You can check the status of this operation by calling the
    ///          DescribeRefreshSchemasStatus operation.</p>
    func refreshSchemas(input: RefreshSchemasInput) async throws -> RefreshSchemasOutputResponse
    {
        typealias refreshSchemasContinuation = CheckedContinuation<RefreshSchemasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: refreshSchemasContinuation) in
            refreshSchemas(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Reloads the target database table with the source data. </p>
    func reloadTables(input: ReloadTablesInput) async throws -> ReloadTablesOutputResponse
    {
        typealias reloadTablesContinuation = CheckedContinuation<ReloadTablesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: reloadTablesContinuation) in
            reloadTables(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes metadata tags from an AWS DMS resource, including replication instance,
    ///          endpoint, security group, and migration task. For more information, see
    ///          <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
    ///                <code>Tag</code>
    ///             </a>
    ///          data type description.</p>
    func removeTagsFromResource(input: RemoveTagsFromResourceInput) async throws -> RemoveTagsFromResourceOutputResponse
    {
        typealias removeTagsFromResourceContinuation = CheckedContinuation<RemoveTagsFromResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeTagsFromResourceContinuation) in
            removeTagsFromResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts the replication task.</p>
    ///          <p>For more information about AWS DMS tasks, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html">Working with Migration Tasks </a> in the
    ///             <i>AWS Database Migration Service User Guide.</i>
    ///          </p>
    func startReplicationTask(input: StartReplicationTaskInput) async throws -> StartReplicationTaskOutputResponse
    {
        typealias startReplicationTaskContinuation = CheckedContinuation<StartReplicationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startReplicationTaskContinuation) in
            startReplicationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Starts the replication task assessment for unsupported data types in the source
    ///          database. </p>
    func startReplicationTaskAssessment(input: StartReplicationTaskAssessmentInput) async throws -> StartReplicationTaskAssessmentOutputResponse
    {
        typealias startReplicationTaskAssessmentContinuation = CheckedContinuation<StartReplicationTaskAssessmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startReplicationTaskAssessmentContinuation) in
            startReplicationTaskAssessment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts a new premigration assessment run for one or more individual assessments
    ///          of a migration task.</p>
    ///          <p>The assessments that you can specify depend on the source and target database engine and
    ///          the migration type defined for the given task. To run this operation, your migration task
    ///          must already be created. After you run this operation, you can review the status of each
    ///          individual assessment. You can also run the migration task manually after the assessment
    ///          run and its individual assessments complete.</p>
    func startReplicationTaskAssessmentRun(input: StartReplicationTaskAssessmentRunInput) async throws -> StartReplicationTaskAssessmentRunOutputResponse
    {
        typealias startReplicationTaskAssessmentRunContinuation = CheckedContinuation<StartReplicationTaskAssessmentRunOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startReplicationTaskAssessmentRunContinuation) in
            startReplicationTaskAssessmentRun(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Stops the replication task.</p>
    func stopReplicationTask(input: StopReplicationTaskInput) async throws -> StopReplicationTaskOutputResponse
    {
        typealias stopReplicationTaskContinuation = CheckedContinuation<StopReplicationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopReplicationTaskContinuation) in
            stopReplicationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Tests the connection between the replication instance and the endpoint.</p>
    func testConnection(input: TestConnectionInput) async throws -> TestConnectionOutputResponse
    {
        typealias testConnectionContinuation = CheckedContinuation<TestConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testConnectionContinuation) in
            testConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
