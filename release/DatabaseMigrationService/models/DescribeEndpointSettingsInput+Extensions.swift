// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeEndpointSettingsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeEndpointSettingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEndpointSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEndpointSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEndpointSettingsInput>
    public typealias MOutput = OperationOutput<DescribeEndpointSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEndpointSettingsOutputError>
}

public struct DescribeEndpointSettingsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeEndpointSettingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEndpointSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEndpointSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEndpointSettingsInput>
    public typealias MOutput = OperationOutput<DescribeEndpointSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEndpointSettingsOutputError>
}

public struct DescribeEndpointSettingsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeEndpointSettingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEndpointSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEndpointSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEndpointSettingsInput>
    public typealias MOutput = OperationOutput<DescribeEndpointSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEndpointSettingsOutputError>
}

extension DescribeEndpointSettingsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case engineName = "EngineName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let engineName = engineName {
            try encodeContainer.encode(engineName, forKey: .engineName)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let maxRecords = maxRecords {
            try encodeContainer.encode(maxRecords, forKey: .maxRecords)
        }
    }
}
