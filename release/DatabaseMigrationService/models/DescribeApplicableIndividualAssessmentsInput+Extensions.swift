// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeApplicableIndividualAssessmentsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeApplicableIndividualAssessmentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeApplicableIndividualAssessmentsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeApplicableIndividualAssessmentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeApplicableIndividualAssessmentsInput>
    public typealias MOutput = OperationOutput<DescribeApplicableIndividualAssessmentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeApplicableIndividualAssessmentsOutputError>
}

public struct DescribeApplicableIndividualAssessmentsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeApplicableIndividualAssessmentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeApplicableIndividualAssessmentsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeApplicableIndividualAssessmentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeApplicableIndividualAssessmentsInput>
    public typealias MOutput = OperationOutput<DescribeApplicableIndividualAssessmentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeApplicableIndividualAssessmentsOutputError>
}

public struct DescribeApplicableIndividualAssessmentsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeApplicableIndividualAssessmentsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeApplicableIndividualAssessmentsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeApplicableIndividualAssessmentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeApplicableIndividualAssessmentsInput>
    public typealias MOutput = OperationOutput<DescribeApplicableIndividualAssessmentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeApplicableIndividualAssessmentsOutputError>
}

extension DescribeApplicableIndividualAssessmentsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case migrationType = "MigrationType"
        case replicationInstanceArn = "ReplicationInstanceArn"
        case replicationTaskArn = "ReplicationTaskArn"
        case sourceEngineName = "SourceEngineName"
        case targetEngineName = "TargetEngineName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let maxRecords = maxRecords {
            try encodeContainer.encode(maxRecords, forKey: .maxRecords)
        }
        if let migrationType = migrationType {
            try encodeContainer.encode(migrationType.rawValue, forKey: .migrationType)
        }
        if let replicationInstanceArn = replicationInstanceArn {
            try encodeContainer.encode(replicationInstanceArn, forKey: .replicationInstanceArn)
        }
        if let replicationTaskArn = replicationTaskArn {
            try encodeContainer.encode(replicationTaskArn, forKey: .replicationTaskArn)
        }
        if let sourceEngineName = sourceEngineName {
            try encodeContainer.encode(sourceEngineName, forKey: .sourceEngineName)
        }
        if let targetEngineName = targetEngineName {
            try encodeContainer.encode(targetEngineName, forKey: .targetEngineName)
        }
    }
}
