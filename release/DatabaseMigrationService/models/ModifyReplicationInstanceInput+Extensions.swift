// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifyReplicationInstanceInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyReplicationInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationInstanceInput>
    public typealias MOutput = OperationOutput<ModifyReplicationInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationInstanceOutputError>
}

public struct ModifyReplicationInstanceInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyReplicationInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationInstanceInput>
    public typealias MOutput = OperationOutput<ModifyReplicationInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationInstanceOutputError>
}

public struct ModifyReplicationInstanceInputBodyMiddleware: Middleware {
    public let id: String = "ModifyReplicationInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationInstanceInput>
    public typealias MOutput = OperationOutput<ModifyReplicationInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationInstanceOutputError>
}

extension ModifyReplicationInstanceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
        case applyImmediately = "ApplyImmediately"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case engineVersion = "EngineVersion"
        case multiAZ = "MultiAZ"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case replicationInstanceArn = "ReplicationInstanceArn"
        case replicationInstanceClass = "ReplicationInstanceClass"
        case replicationInstanceIdentifier = "ReplicationInstanceIdentifier"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocatedStorage = allocatedStorage {
            try encodeContainer.encode(allocatedStorage, forKey: .allocatedStorage)
        }
        if allowMajorVersionUpgrade != false {
            try encodeContainer.encode(allowMajorVersionUpgrade, forKey: .allowMajorVersionUpgrade)
        }
        if applyImmediately != false {
            try encodeContainer.encode(applyImmediately, forKey: .applyImmediately)
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try encodeContainer.encode(autoMinorVersionUpgrade, forKey: .autoMinorVersionUpgrade)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let multiAZ = multiAZ {
            try encodeContainer.encode(multiAZ, forKey: .multiAZ)
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let replicationInstanceArn = replicationInstanceArn {
            try encodeContainer.encode(replicationInstanceArn, forKey: .replicationInstanceArn)
        }
        if let replicationInstanceClass = replicationInstanceClass {
            try encodeContainer.encode(replicationInstanceClass, forKey: .replicationInstanceClass)
        }
        if let replicationInstanceIdentifier = replicationInstanceIdentifier {
            try encodeContainer.encode(replicationInstanceIdentifier, forKey: .replicationInstanceIdentifier)
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            var vpcSecurityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcSecurityGroupIds)
            for vpcsecuritygroupidlist0 in vpcSecurityGroupIds {
                try vpcSecurityGroupIdsContainer.encode(vpcsecuritygroupidlist0)
            }
        }
    }
}
