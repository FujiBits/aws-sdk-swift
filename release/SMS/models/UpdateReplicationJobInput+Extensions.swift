// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateReplicationJobInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateReplicationJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateReplicationJobInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateReplicationJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateReplicationJobInput>
    public typealias MOutput = OperationOutput<UpdateReplicationJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateReplicationJobOutputError>
}

public struct UpdateReplicationJobInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateReplicationJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateReplicationJobInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateReplicationJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateReplicationJobInput>
    public typealias MOutput = OperationOutput<UpdateReplicationJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateReplicationJobOutputError>
}

public struct UpdateReplicationJobInputBodyMiddleware: Middleware {
    public let id: String = "UpdateReplicationJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateReplicationJobInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateReplicationJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateReplicationJobInput>
    public typealias MOutput = OperationOutput<UpdateReplicationJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateReplicationJobOutputError>
}

extension UpdateReplicationJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case encrypted
        case frequency
        case kmsKeyId
        case licenseType
        case nextReplicationRunStartTime
        case numberOfRecentAmisToKeep
        case replicationJobId
        case roleName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encrypted = encrypted {
            try encodeContainer.encode(encrypted, forKey: .encrypted)
        }
        if let frequency = frequency {
            try encodeContainer.encode(frequency, forKey: .frequency)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let licenseType = licenseType {
            try encodeContainer.encode(licenseType.rawValue, forKey: .licenseType)
        }
        if let nextReplicationRunStartTime = nextReplicationRunStartTime {
            try encodeContainer.encode(nextReplicationRunStartTime.timeIntervalSince1970, forKey: .nextReplicationRunStartTime)
        }
        if let numberOfRecentAmisToKeep = numberOfRecentAmisToKeep {
            try encodeContainer.encode(numberOfRecentAmisToKeep, forKey: .numberOfRecentAmisToKeep)
        }
        if let replicationJobId = replicationJobId {
            try encodeContainer.encode(replicationJobId, forKey: .replicationJobId)
        }
        if let roleName = roleName {
            try encodeContainer.encode(roleName, forKey: .roleName)
        }
    }
}
