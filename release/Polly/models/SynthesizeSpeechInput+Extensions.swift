// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SynthesizeSpeechInputHeadersMiddleware: Middleware {
    public let id: String = "SynthesizeSpeechInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SynthesizeSpeechInput>,
                  next: H) -> Swift.Result<OperationOutput<SynthesizeSpeechOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SynthesizeSpeechInput>
    public typealias MOutput = OperationOutput<SynthesizeSpeechOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SynthesizeSpeechOutputError>
}

public struct SynthesizeSpeechInputQueryItemMiddleware: Middleware {
    public let id: String = "SynthesizeSpeechInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SynthesizeSpeechInput>,
                  next: H) -> Swift.Result<OperationOutput<SynthesizeSpeechOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SynthesizeSpeechInput>
    public typealias MOutput = OperationOutput<SynthesizeSpeechOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SynthesizeSpeechOutputError>
}

public struct SynthesizeSpeechInputBodyMiddleware: Middleware {
    public let id: String = "SynthesizeSpeechInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SynthesizeSpeechInput>,
                  next: H) -> Swift.Result<OperationOutput<SynthesizeSpeechOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SynthesizeSpeechInput>
    public typealias MOutput = OperationOutput<SynthesizeSpeechOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SynthesizeSpeechOutputError>
}

extension SynthesizeSpeechInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case engine = "Engine"
        case languageCode = "LanguageCode"
        case lexiconNames = "LexiconNames"
        case outputFormat = "OutputFormat"
        case sampleRate = "SampleRate"
        case speechMarkTypes = "SpeechMarkTypes"
        case text = "Text"
        case textType = "TextType"
        case voiceId = "VoiceId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let engine = engine {
            try encodeContainer.encode(engine.rawValue, forKey: .engine)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lexiconNames = lexiconNames {
            var lexiconNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lexiconNames)
            for lexiconnamelist0 in lexiconNames {
                try lexiconNamesContainer.encode(lexiconnamelist0)
            }
        }
        if let outputFormat = outputFormat {
            try encodeContainer.encode(outputFormat.rawValue, forKey: .outputFormat)
        }
        if let sampleRate = sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let speechMarkTypes = speechMarkTypes {
            var speechMarkTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .speechMarkTypes)
            for speechmarktypelist0 in speechMarkTypes {
                try speechMarkTypesContainer.encode(speechmarktypelist0.rawValue)
            }
        }
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let textType = textType {
            try encodeContainer.encode(textType.rawValue, forKey: .textType)
        }
        if let voiceId = voiceId {
            try encodeContainer.encode(voiceId.rawValue, forKey: .voiceId)
        }
    }
}
