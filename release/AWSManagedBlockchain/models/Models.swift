// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(message: \(Swift.String(describing: message)))"}
}

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ManagedBlockchainClientTypes.ApprovalThresholdPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case proposalDurationInHours = "ProposalDurationInHours"
        case thresholdComparator = "ThresholdComparator"
        case thresholdPercentage = "ThresholdPercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let proposalDurationInHours = proposalDurationInHours {
            try encodeContainer.encode(proposalDurationInHours, forKey: .proposalDurationInHours)
        }
        if let thresholdComparator = thresholdComparator {
            try encodeContainer.encode(thresholdComparator.rawValue, forKey: .thresholdComparator)
        }
        if let thresholdPercentage = thresholdPercentage {
            try encodeContainer.encode(thresholdPercentage, forKey: .thresholdPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thresholdPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .thresholdPercentage)
        thresholdPercentage = thresholdPercentageDecoded
        let proposalDurationInHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .proposalDurationInHours)
        proposalDurationInHours = proposalDurationInHoursDecoded
        let thresholdComparatorDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.ThresholdComparator.self, forKey: .thresholdComparator)
        thresholdComparator = thresholdComparatorDecoded
    }
}

extension ManagedBlockchainClientTypes.ApprovalThresholdPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ApprovalThresholdPolicy(proposalDurationInHours: \(Swift.String(describing: proposalDurationInHours)), thresholdComparator: \(Swift.String(describing: thresholdComparator)), thresholdPercentage: \(Swift.String(describing: thresholdPercentage)))"}
}

extension ManagedBlockchainClientTypes {
    /// A policy type that defines the voting rules for the network. The rules decide if a proposal is approved. Approval may be based on criteria such as the percentage of YES votes and the duration of the proposal. The policy applies to all proposals and is specified when the network is created. Applies only to Hyperledger Fabric.
    public struct ApprovalThresholdPolicy: Swift.Equatable {
        /// The duration from the time that a proposal is created until it expires. If members cast neither the required number of YES votes to approve the proposal nor the number of NO votes required to reject it before the duration expires, the proposal is EXPIRED and ProposalActions are not carried out.
        public var proposalDurationInHours: Swift.Int?
        /// Determines whether the vote percentage must be greater than the ThresholdPercentage or must be greater than or equal to the ThreholdPercentage to be approved.
        public var thresholdComparator: ManagedBlockchainClientTypes.ThresholdComparator?
        /// The percentage of votes among all members that must be YES for a proposal to be approved. For example, a ThresholdPercentage value of 50 indicates 50%. The ThresholdComparator determines the precise comparison. If a ThresholdPercentage value of 50 is specified on a network with 10 members, along with a ThresholdComparator value of GREATER_THAN, this indicates that 6 YES votes are required for the proposal to be approved.
        public var thresholdPercentage: Swift.Int?

        public init (
            proposalDurationInHours: Swift.Int? = nil,
            thresholdComparator: ManagedBlockchainClientTypes.ThresholdComparator? = nil,
            thresholdPercentage: Swift.Int? = nil
        )
        {
            self.proposalDurationInHours = proposalDurationInHours
            self.thresholdComparator = thresholdComparator
            self.thresholdPercentage = thresholdPercentage
        }
    }

}

public struct CreateMemberInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMemberInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMemberInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMemberInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMemberOutputError>
}

extension CreateMemberInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMemberInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), invitationId: \(Swift.String(describing: invitationId)), memberConfiguration: \(Swift.String(describing: memberConfiguration)), networkId: \(Swift.String(describing: networkId)))"}
}

extension CreateMemberInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case invitationId = "InvitationId"
        case memberConfiguration = "MemberConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let invitationId = invitationId {
            try encodeContainer.encode(invitationId, forKey: .invitationId)
        }
        if let memberConfiguration = memberConfiguration {
            try encodeContainer.encode(memberConfiguration, forKey: .memberConfiguration)
        }
    }
}

public struct CreateMemberInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMemberInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMemberInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMemberInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMemberOutputError>
}

public struct CreateMemberInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMemberInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMemberInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMemberInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMemberOutputError>
}

public struct CreateMemberInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMemberInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateMemberInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateMemberInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMemberOutputError>
}

public struct CreateMemberInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMemberInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateMemberInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/members"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateMemberInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMemberOutputError>
}

public struct CreateMemberInput: Swift.Equatable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The unique identifier of the invitation that is sent to the member to join the network.
    /// This member is required.
    public var invitationId: Swift.String?
    /// Member configuration parameters.
    /// This member is required.
    public var memberConfiguration: ManagedBlockchainClientTypes.MemberConfiguration?
    /// The unique identifier of the network in which the member is created.
    /// This member is required.
    public var networkId: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        invitationId: Swift.String? = nil,
        memberConfiguration: ManagedBlockchainClientTypes.MemberConfiguration? = nil,
        networkId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.invitationId = invitationId
        self.memberConfiguration = memberConfiguration
        self.networkId = networkId
    }
}

struct CreateMemberInputBody: Swift.Equatable {
    public let clientRequestToken: Swift.String?
    public let invitationId: Swift.String?
    public let memberConfiguration: ManagedBlockchainClientTypes.MemberConfiguration?
}

extension CreateMemberInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case invitationId = "InvitationId"
        case memberConfiguration = "MemberConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let invitationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .invitationId)
        invitationId = invitationIdDecoded
        let memberConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberConfiguration.self, forKey: .memberConfiguration)
        memberConfiguration = memberConfigurationDecoded
    }
}

extension CreateMemberOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMemberOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMemberOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMemberOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMemberOutputResponse(memberId: \(Swift.String(describing: memberId)))"}
}

extension CreateMemberOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateMemberOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.memberId = output.memberId
        } else {
            self.memberId = nil
        }
    }
}

public struct CreateMemberOutputResponse: Swift.Equatable {
    /// The unique identifier of the member.
    public var memberId: Swift.String?

    public init (
        memberId: Swift.String? = nil
    )
    {
        self.memberId = memberId
    }
}

struct CreateMemberOutputResponseBody: Swift.Equatable {
    public let memberId: Swift.String?
}

extension CreateMemberOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case memberId = "MemberId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberId)
        memberId = memberIdDecoded
    }
}

public struct CreateNetworkInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateNetworkInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateNetworkInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateNetworkInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateNetworkOutputError>
}

extension CreateNetworkInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateNetworkInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), description: \(Swift.String(describing: description)), framework: \(Swift.String(describing: framework)), frameworkConfiguration: \(Swift.String(describing: frameworkConfiguration)), frameworkVersion: \(Swift.String(describing: frameworkVersion)), memberConfiguration: \(Swift.String(describing: memberConfiguration)), name: \(Swift.String(describing: name)), tags: \(Swift.String(describing: tags)), votingPolicy: \(Swift.String(describing: votingPolicy)))"}
}

extension CreateNetworkInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case framework = "Framework"
        case frameworkConfiguration = "FrameworkConfiguration"
        case frameworkVersion = "FrameworkVersion"
        case memberConfiguration = "MemberConfiguration"
        case name = "Name"
        case tags = "Tags"
        case votingPolicy = "VotingPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let framework = framework {
            try encodeContainer.encode(framework.rawValue, forKey: .framework)
        }
        if let frameworkConfiguration = frameworkConfiguration {
            try encodeContainer.encode(frameworkConfiguration, forKey: .frameworkConfiguration)
        }
        if let frameworkVersion = frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let memberConfiguration = memberConfiguration {
            try encodeContainer.encode(memberConfiguration, forKey: .memberConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, inputtagmap0) in tags {
                try tagsContainer.encode(inputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let votingPolicy = votingPolicy {
            try encodeContainer.encode(votingPolicy, forKey: .votingPolicy)
        }
    }
}

public struct CreateNetworkInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateNetworkInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateNetworkInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateNetworkInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateNetworkOutputError>
}

public struct CreateNetworkInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateNetworkInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateNetworkInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateNetworkInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateNetworkOutputError>
}

public struct CreateNetworkInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateNetworkInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateNetworkInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateNetworkInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateNetworkOutputError>
}

public struct CreateNetworkInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateNetworkInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateNetworkInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/networks"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateNetworkInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateNetworkOutputError>
}

public struct CreateNetworkInput: Swift.Equatable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// An optional description for the network.
    public var description: Swift.String?
    /// The blockchain framework that the network uses.
    /// This member is required.
    public var framework: ManagedBlockchainClientTypes.Framework?
    /// Configuration properties of the blockchain framework relevant to the network configuration.
    public var frameworkConfiguration: ManagedBlockchainClientTypes.NetworkFrameworkConfiguration?
    /// The version of the blockchain framework that the network uses.
    /// This member is required.
    public var frameworkVersion: Swift.String?
    /// Configuration properties for the first member within the network.
    /// This member is required.
    public var memberConfiguration: ManagedBlockchainClientTypes.MemberConfiguration?
    /// The name of the network.
    /// This member is required.
    public var name: Swift.String?
    /// Tags to assign to the network. Each tag consists of a key and optional value. When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    public var tags: [Swift.String:Swift.String]?
    /// The voting rules used by the network to determine if a proposal is approved.
    /// This member is required.
    public var votingPolicy: ManagedBlockchainClientTypes.VotingPolicy?

    public init (
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        framework: ManagedBlockchainClientTypes.Framework? = nil,
        frameworkConfiguration: ManagedBlockchainClientTypes.NetworkFrameworkConfiguration? = nil,
        frameworkVersion: Swift.String? = nil,
        memberConfiguration: ManagedBlockchainClientTypes.MemberConfiguration? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        votingPolicy: ManagedBlockchainClientTypes.VotingPolicy? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.framework = framework
        self.frameworkConfiguration = frameworkConfiguration
        self.frameworkVersion = frameworkVersion
        self.memberConfiguration = memberConfiguration
        self.name = name
        self.tags = tags
        self.votingPolicy = votingPolicy
    }
}

struct CreateNetworkInputBody: Swift.Equatable {
    public let clientRequestToken: Swift.String?
    public let name: Swift.String?
    public let description: Swift.String?
    public let framework: ManagedBlockchainClientTypes.Framework?
    public let frameworkVersion: Swift.String?
    public let frameworkConfiguration: ManagedBlockchainClientTypes.NetworkFrameworkConfiguration?
    public let votingPolicy: ManagedBlockchainClientTypes.VotingPolicy?
    public let memberConfiguration: ManagedBlockchainClientTypes.MemberConfiguration?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateNetworkInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case framework = "Framework"
        case frameworkConfiguration = "FrameworkConfiguration"
        case frameworkVersion = "FrameworkVersion"
        case memberConfiguration = "MemberConfiguration"
        case name = "Name"
        case tags = "Tags"
        case votingPolicy = "VotingPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.Framework.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
        let frameworkConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NetworkFrameworkConfiguration.self, forKey: .frameworkConfiguration)
        frameworkConfiguration = frameworkConfigurationDecoded
        let votingPolicyDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.VotingPolicy.self, forKey: .votingPolicy)
        votingPolicy = votingPolicyDecoded
        let memberConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberConfiguration.self, forKey: .memberConfiguration)
        memberConfiguration = memberConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateNetworkOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateNetworkOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateNetworkOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case throttlingException(ThrottlingException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateNetworkOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateNetworkOutputResponse(memberId: \(Swift.String(describing: memberId)), networkId: \(Swift.String(describing: networkId)))"}
}

extension CreateNetworkOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateNetworkOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.memberId = output.memberId
            self.networkId = output.networkId
        } else {
            self.memberId = nil
            self.networkId = nil
        }
    }
}

public struct CreateNetworkOutputResponse: Swift.Equatable {
    /// The unique identifier for the first member within the network.
    public var memberId: Swift.String?
    /// The unique identifier for the network.
    public var networkId: Swift.String?

    public init (
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
    }
}

struct CreateNetworkOutputResponseBody: Swift.Equatable {
    public let networkId: Swift.String?
    public let memberId: Swift.String?
}

extension CreateNetworkOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case memberId = "MemberId"
        case networkId = "NetworkId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberId)
        memberId = memberIdDecoded
    }
}

public struct CreateNodeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateNodeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateNodeOutputError>
}

extension CreateNodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateNodeInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), memberId: \(Swift.String(describing: memberId)), networkId: \(Swift.String(describing: networkId)), nodeConfiguration: \(Swift.String(describing: nodeConfiguration)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateNodeInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case memberId = "MemberId"
        case nodeConfiguration = "NodeConfiguration"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
        if let nodeConfiguration = nodeConfiguration {
            try encodeContainer.encode(nodeConfiguration, forKey: .nodeConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, inputtagmap0) in tags {
                try tagsContainer.encode(inputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateNodeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateNodeOutputError>
}

public struct CreateNodeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateNodeOutputError>
}

public struct CreateNodeInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateNodeInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateNodeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateNodeInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateNodeOutputError>
}

public struct CreateNodeInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateNodeInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateNodeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/nodes"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateNodeInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateNodeOutputError>
}

public struct CreateNodeInput: Swift.Equatable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The unique identifier of the member that owns this node. Applies only to Hyperledger Fabric.
    public var memberId: Swift.String?
    /// The unique identifier of the network for the node. Ethereum public networks have the following NetworkIds:
    ///
    /// * n-ethereum-mainnet
    ///
    /// * n-ethereum-rinkeby
    ///
    /// * n-ethereum-ropsten
    /// This member is required.
    public var networkId: Swift.String?
    /// The properties of a node configuration.
    /// This member is required.
    public var nodeConfiguration: ManagedBlockchainClientTypes.NodeConfiguration?
    /// Tags to assign to the node. Each tag consists of a key and optional value. When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    public var tags: [Swift.String:Swift.String]?

    public init (
        clientRequestToken: Swift.String? = nil,
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nodeConfiguration: ManagedBlockchainClientTypes.NodeConfiguration? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.memberId = memberId
        self.networkId = networkId
        self.nodeConfiguration = nodeConfiguration
        self.tags = tags
    }
}

struct CreateNodeInputBody: Swift.Equatable {
    public let clientRequestToken: Swift.String?
    public let memberId: Swift.String?
    public let nodeConfiguration: ManagedBlockchainClientTypes.NodeConfiguration?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateNodeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case memberId = "MemberId"
        case nodeConfiguration = "NodeConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberId)
        memberId = memberIdDecoded
        let nodeConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NodeConfiguration.self, forKey: .nodeConfiguration)
        nodeConfiguration = nodeConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateNodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateNodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateNodeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateNodeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateNodeOutputResponse(nodeId: \(Swift.String(describing: nodeId)))"}
}

extension CreateNodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateNodeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nodeId = output.nodeId
        } else {
            self.nodeId = nil
        }
    }
}

public struct CreateNodeOutputResponse: Swift.Equatable {
    /// The unique identifier of the node.
    public var nodeId: Swift.String?

    public init (
        nodeId: Swift.String? = nil
    )
    {
        self.nodeId = nodeId
    }
}

struct CreateNodeOutputResponseBody: Swift.Equatable {
    public let nodeId: Swift.String?
}

extension CreateNodeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeId = "NodeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeId)
        nodeId = nodeIdDecoded
    }
}

public struct CreateProposalInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProposalInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProposalOutputError>
}

extension CreateProposalInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateProposalInput(actions: \(Swift.String(describing: actions)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), description: \(Swift.String(describing: description)), memberId: \(Swift.String(describing: memberId)), networkId: \(Swift.String(describing: networkId)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateProposalInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case memberId = "MemberId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            try encodeContainer.encode(actions, forKey: .actions)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, inputtagmap0) in tags {
                try tagsContainer.encode(inputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateProposalInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProposalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProposalOutputError>
}

public struct CreateProposalInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProposalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProposalOutputError>
}

public struct CreateProposalInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProposalInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateProposalInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateProposalInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProposalOutputError>
}

public struct CreateProposalInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProposalInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateProposalInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/proposals"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateProposalInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProposalOutputError>
}

public struct CreateProposalInput: Swift.Equatable {
    /// The type of actions proposed, such as inviting a member or removing a member. The types of Actions in a proposal are mutually exclusive. For example, a proposal with Invitations actions cannot also contain Removals actions.
    /// This member is required.
    public var actions: ManagedBlockchainClientTypes.ProposalActions?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// A description for the proposal that is visible to voting members, for example, "Proposal to add Example Corp. as member."
    public var description: Swift.String?
    /// The unique identifier of the member that is creating the proposal. This identifier is especially useful for identifying the member making the proposal when multiple members exist in a single AWS account.
    /// This member is required.
    public var memberId: Swift.String?
    /// The unique identifier of the network for which the proposal is made.
    /// This member is required.
    public var networkId: Swift.String?
    /// Tags to assign to the proposal. Each tag consists of a key and optional value. When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource. If the proposal is for a network invitation, the invitation inherits the tags added to the proposal. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    public var tags: [Swift.String:Swift.String]?

    public init (
        actions: ManagedBlockchainClientTypes.ProposalActions? = nil,
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.actions = actions
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.memberId = memberId
        self.networkId = networkId
        self.tags = tags
    }
}

struct CreateProposalInputBody: Swift.Equatable {
    public let clientRequestToken: Swift.String?
    public let memberId: Swift.String?
    public let actions: ManagedBlockchainClientTypes.ProposalActions?
    public let description: Swift.String?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateProposalInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case memberId = "MemberId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberId)
        memberId = memberIdDecoded
        let actionsDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.ProposalActions.self, forKey: .actions)
        actions = actionsDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateProposalOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateProposalOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateProposalOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateProposalOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateProposalOutputResponse(proposalId: \(Swift.String(describing: proposalId)))"}
}

extension CreateProposalOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateProposalOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.proposalId = output.proposalId
        } else {
            self.proposalId = nil
        }
    }
}

public struct CreateProposalOutputResponse: Swift.Equatable {
    /// The unique identifier of the proposal.
    public var proposalId: Swift.String?

    public init (
        proposalId: Swift.String? = nil
    )
    {
        self.proposalId = proposalId
    }
}

struct CreateProposalOutputResponseBody: Swift.Equatable {
    public let proposalId: Swift.String?
}

extension CreateProposalOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case proposalId = "ProposalId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
    }
}

extension DeleteMemberInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMemberInput(memberId: \(Swift.String(describing: memberId)), networkId: \(Swift.String(describing: networkId)))"}
}

extension DeleteMemberInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteMemberInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMemberInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMemberInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMemberInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMemberOutputError>
}

public struct DeleteMemberInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMemberInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMemberInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMemberInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMemberOutputError>
}

public struct DeleteMemberInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMemberInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteMemberInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteMemberInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMemberOutputError>
}

public struct DeleteMemberInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMemberInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteMemberInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        guard let memberId = input.memberId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("memberId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/members/\(memberId.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteMemberInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMemberOutputError>
}

public struct DeleteMemberInput: Swift.Equatable {
    /// The unique identifier of the member to remove.
    /// This member is required.
    public var memberId: Swift.String?
    /// The unique identifier of the network from which the member is removed.
    /// This member is required.
    public var networkId: Swift.String?

    public init (
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
    }
}

struct DeleteMemberInputBody: Swift.Equatable {
}

extension DeleteMemberInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMemberOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMemberOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMemberOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMemberOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMemberOutputResponse()"}
}

extension DeleteMemberOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMemberOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteMemberOutputResponseBody: Swift.Equatable {
}

extension DeleteMemberOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteNodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteNodeInput(memberId: \(Swift.String(describing: memberId)), networkId: \(Swift.String(describing: networkId)), nodeId: \(Swift.String(describing: nodeId)))"}
}

extension DeleteNodeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteNodeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteNodeOutputError>
}

public struct DeleteNodeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let memberId = input.operationInput.memberId {
            let memberIdQueryItem = ClientRuntime.URLQueryItem(name: "memberId".urlPercentEncoding(), value: Swift.String(memberId).urlPercentEncoding())
            input.builder.withQueryItem(memberIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteNodeOutputError>
}

public struct DeleteNodeInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteNodeInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteNodeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteNodeInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteNodeOutputError>
}

public struct DeleteNodeInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteNodeInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteNodeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        guard let nodeId = input.nodeId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("nodeId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/nodes/\(nodeId.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteNodeInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteNodeOutputError>
}

public struct DeleteNodeInput: Swift.Equatable {
    /// The unique identifier of the member that owns this node. Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.
    public var memberId: Swift.String?
    /// The unique identifier of the network that the node is on. Ethereum public networks have the following NetworkIds:
    ///
    /// * n-ethereum-mainnet
    ///
    /// * n-ethereum-rinkeby
    ///
    /// * n-ethereum-ropsten
    /// This member is required.
    public var networkId: Swift.String?
    /// The unique identifier of the node.
    /// This member is required.
    public var nodeId: Swift.String?

    public init (
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nodeId: Swift.String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
        self.nodeId = nodeId
    }
}

struct DeleteNodeInputBody: Swift.Equatable {
}

extension DeleteNodeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteNodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteNodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteNodeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteNodeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteNodeOutputResponse()"}
}

extension DeleteNodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteNodeOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteNodeOutputResponseBody: Swift.Equatable {
}

extension DeleteNodeOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ManagedBlockchainClientTypes {
    public enum Edition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case standard
        case starter
        case sdkUnknown(Swift.String)

        public static var allCases: [Edition] {
            return [
                .standard,
                .starter,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .standard: return "STANDARD"
            case .starter: return "STARTER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Edition(rawValue: rawValue) ?? Edition.sdkUnknown(rawValue)
        }
    }
}

extension ManagedBlockchainClientTypes {
    public enum Framework: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ethereum
        case hyperledgerFabric
        case sdkUnknown(Swift.String)

        public static var allCases: [Framework] {
            return [
                .ethereum,
                .hyperledgerFabric,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ethereum: return "ETHEREUM"
            case .hyperledgerFabric: return "HYPERLEDGER_FABRIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Framework(rawValue: rawValue) ?? Framework.sdkUnknown(rawValue)
        }
    }
}

extension GetMemberInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMemberInput(memberId: \(Swift.String(describing: memberId)), networkId: \(Swift.String(describing: networkId)))"}
}

extension GetMemberInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetMemberInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMemberInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMemberInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMemberInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMemberOutputError>
}

public struct GetMemberInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMemberInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMemberInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMemberInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMemberOutputError>
}

public struct GetMemberInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMemberInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetMemberInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetMemberInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMemberOutputError>
}

public struct GetMemberInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMemberInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetMemberInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        guard let memberId = input.memberId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("memberId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/members/\(memberId.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetMemberInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMemberOutputError>
}

public struct GetMemberInput: Swift.Equatable {
    /// The unique identifier of the member.
    /// This member is required.
    public var memberId: Swift.String?
    /// The unique identifier of the network to which the member belongs.
    /// This member is required.
    public var networkId: Swift.String?

    public init (
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
    }
}

struct GetMemberInputBody: Swift.Equatable {
}

extension GetMemberInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetMemberOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMemberOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMemberOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMemberOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMemberOutputResponse(member: \(Swift.String(describing: member)))"}
}

extension GetMemberOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMemberOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.member = output.member
        } else {
            self.member = nil
        }
    }
}

public struct GetMemberOutputResponse: Swift.Equatable {
    /// The properties of a member.
    public var member: ManagedBlockchainClientTypes.Member?

    public init (
        member: ManagedBlockchainClientTypes.Member? = nil
    )
    {
        self.member = member
    }
}

struct GetMemberOutputResponseBody: Swift.Equatable {
    public let member: ManagedBlockchainClientTypes.Member?
}

extension GetMemberOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case member = "Member"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memberDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.Member.self, forKey: .member)
        member = memberDecoded
    }
}

extension GetNetworkInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetNetworkInput(networkId: \(Swift.String(describing: networkId)))"}
}

extension GetNetworkInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetNetworkInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetNetworkInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetNetworkInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetNetworkInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetNetworkOutputError>
}

public struct GetNetworkInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetNetworkInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetNetworkInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetNetworkInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetNetworkOutputError>
}

public struct GetNetworkInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetNetworkInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetNetworkInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetNetworkInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetNetworkOutputError>
}

public struct GetNetworkInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetNetworkInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetNetworkInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetNetworkInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetNetworkOutputError>
}

public struct GetNetworkInput: Swift.Equatable {
    /// The unique identifier of the network to get information about.
    /// This member is required.
    public var networkId: Swift.String?

    public init (
        networkId: Swift.String? = nil
    )
    {
        self.networkId = networkId
    }
}

struct GetNetworkInputBody: Swift.Equatable {
}

extension GetNetworkInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetNetworkOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetNetworkOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetNetworkOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetNetworkOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetNetworkOutputResponse(network: \(Swift.String(describing: network)))"}
}

extension GetNetworkOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetNetworkOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.network = output.network
        } else {
            self.network = nil
        }
    }
}

public struct GetNetworkOutputResponse: Swift.Equatable {
    /// An object containing network configuration parameters.
    public var network: ManagedBlockchainClientTypes.Network?

    public init (
        network: ManagedBlockchainClientTypes.Network? = nil
    )
    {
        self.network = network
    }
}

struct GetNetworkOutputResponseBody: Swift.Equatable {
    public let network: ManagedBlockchainClientTypes.Network?
}

extension GetNetworkOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case network = "Network"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.Network.self, forKey: .network)
        network = networkDecoded
    }
}

extension GetNodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetNodeInput(memberId: \(Swift.String(describing: memberId)), networkId: \(Swift.String(describing: networkId)), nodeId: \(Swift.String(describing: nodeId)))"}
}

extension GetNodeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetNodeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetNodeOutputError>
}

public struct GetNodeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let memberId = input.operationInput.memberId {
            let memberIdQueryItem = ClientRuntime.URLQueryItem(name: "memberId".urlPercentEncoding(), value: Swift.String(memberId).urlPercentEncoding())
            input.builder.withQueryItem(memberIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetNodeOutputError>
}

public struct GetNodeInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetNodeInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetNodeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetNodeInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetNodeOutputError>
}

public struct GetNodeInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetNodeInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetNodeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        guard let nodeId = input.nodeId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("nodeId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/nodes/\(nodeId.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetNodeInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetNodeOutputError>
}

public struct GetNodeInput: Swift.Equatable {
    /// The unique identifier of the member that owns the node. Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.
    public var memberId: Swift.String?
    /// The unique identifier of the network that the node is on.
    /// This member is required.
    public var networkId: Swift.String?
    /// The unique identifier of the node.
    /// This member is required.
    public var nodeId: Swift.String?

    public init (
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nodeId: Swift.String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
        self.nodeId = nodeId
    }
}

struct GetNodeInputBody: Swift.Equatable {
}

extension GetNodeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetNodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetNodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetNodeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetNodeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetNodeOutputResponse(node: \(Swift.String(describing: node)))"}
}

extension GetNodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetNodeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.node = output.node
        } else {
            self.node = nil
        }
    }
}

public struct GetNodeOutputResponse: Swift.Equatable {
    /// Properties of the node configuration.
    public var node: ManagedBlockchainClientTypes.Node?

    public init (
        node: ManagedBlockchainClientTypes.Node? = nil
    )
    {
        self.node = node
    }
}

struct GetNodeOutputResponseBody: Swift.Equatable {
    public let node: ManagedBlockchainClientTypes.Node?
}

extension GetNodeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case node = "Node"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.Node.self, forKey: .node)
        node = nodeDecoded
    }
}

extension GetProposalInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetProposalInput(networkId: \(Swift.String(describing: networkId)), proposalId: \(Swift.String(describing: proposalId)))"}
}

extension GetProposalInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetProposalInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetProposalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetProposalOutputError>
}

public struct GetProposalInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetProposalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetProposalOutputError>
}

public struct GetProposalInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetProposalInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetProposalInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetProposalInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetProposalOutputError>
}

public struct GetProposalInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetProposalInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetProposalInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        guard let proposalId = input.proposalId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("proposalId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/proposals/\(proposalId.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetProposalInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetProposalOutputError>
}

public struct GetProposalInput: Swift.Equatable {
    /// The unique identifier of the network for which the proposal is made.
    /// This member is required.
    public var networkId: Swift.String?
    /// The unique identifier of the proposal.
    /// This member is required.
    public var proposalId: Swift.String?

    public init (
        networkId: Swift.String? = nil,
        proposalId: Swift.String? = nil
    )
    {
        self.networkId = networkId
        self.proposalId = proposalId
    }
}

struct GetProposalInputBody: Swift.Equatable {
}

extension GetProposalInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetProposalOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetProposalOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetProposalOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetProposalOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetProposalOutputResponse(proposal: \(Swift.String(describing: proposal)))"}
}

extension GetProposalOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetProposalOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.proposal = output.proposal
        } else {
            self.proposal = nil
        }
    }
}

public struct GetProposalOutputResponse: Swift.Equatable {
    /// Information about a proposal.
    public var proposal: ManagedBlockchainClientTypes.Proposal?

    public init (
        proposal: ManagedBlockchainClientTypes.Proposal? = nil
    )
    {
        self.proposal = proposal
    }
}

struct GetProposalOutputResponseBody: Swift.Equatable {
    public let proposal: ManagedBlockchainClientTypes.Proposal?
}

extension GetProposalOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case proposal = "Proposal"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.Proposal.self, forKey: .proposal)
        proposal = proposalDecoded
    }
}

extension IllegalActionException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IllegalActionException(message: \(Swift.String(describing: message)))"}
}

extension IllegalActionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: IllegalActionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct IllegalActionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IllegalActionExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension IllegalActionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InternalServiceErrorException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServiceErrorException()"}
}

extension InternalServiceErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request processing has failed because of an unknown error, exception or failure.
public struct InternalServiceErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server

    public init() {}
}

extension InvalidRequestException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidRequestException(message: \(Swift.String(describing: message)))"}
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The action or operation requested is invalid. Verify that the action is typed correctly.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ManagedBlockchainClientTypes.Invitation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case expirationDate = "ExpirationDate"
        case invitationId = "InvitationId"
        case networkSummary = "NetworkSummary"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let invitationId = invitationId {
            try encodeContainer.encode(invitationId, forKey: .invitationId)
        }
        if let networkSummary = networkSummary {
            try encodeContainer.encode(networkSummary, forKey: .networkSummary)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invitationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .invitationId)
        invitationId = invitationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.InvitationStatus.self, forKey: .status)
        status = statusDecoded
        let networkSummaryDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NetworkSummary.self, forKey: .networkSummary)
        networkSummary = networkSummaryDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension ManagedBlockchainClientTypes.Invitation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Invitation(arn: \(Swift.String(describing: arn)), creationDate: \(Swift.String(describing: creationDate)), expirationDate: \(Swift.String(describing: expirationDate)), invitationId: \(Swift.String(describing: invitationId)), networkSummary: \(Swift.String(describing: networkSummary)), status: \(Swift.String(describing: status)))"}
}

extension ManagedBlockchainClientTypes {
    /// An invitation to an AWS account to create a member and join the network. Applies only to Hyperledger Fabric.
    public struct Invitation: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the invitation. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
        public var arn: Swift.String?
        /// The date and time that the invitation was created.
        public var creationDate: ClientRuntime.Date?
        /// The date and time that the invitation expires. This is the CreationDate plus the ProposalDurationInHours that is specified in the ProposalThresholdPolicy. After this date and time, the invitee can no longer create a member and join the network using this InvitationId.
        public var expirationDate: ClientRuntime.Date?
        /// The unique identifier for the invitation.
        public var invitationId: Swift.String?
        /// A summary of network configuration properties.
        public var networkSummary: ManagedBlockchainClientTypes.NetworkSummary?
        /// The status of the invitation:
        ///
        /// * PENDING - The invitee has not created a member to join the network, and the invitation has not yet expired.
        ///
        /// * ACCEPTING - The invitee has begun creating a member, and creation has not yet completed.
        ///
        /// * ACCEPTED - The invitee created a member and joined the network using the InvitationID.
        ///
        /// * REJECTED - The invitee rejected the invitation.
        ///
        /// * EXPIRED - The invitee neither created a member nor rejected the invitation before the ExpirationDate.
        public var status: ManagedBlockchainClientTypes.InvitationStatus?

        public init (
            arn: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            expirationDate: ClientRuntime.Date? = nil,
            invitationId: Swift.String? = nil,
            networkSummary: ManagedBlockchainClientTypes.NetworkSummary? = nil,
            status: ManagedBlockchainClientTypes.InvitationStatus? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.expirationDate = expirationDate
            self.invitationId = invitationId
            self.networkSummary = networkSummary
            self.status = status
        }
    }

}

extension ManagedBlockchainClientTypes {
    public enum InvitationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accepted
        case accepting
        case expired
        case pending
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [InvitationStatus] {
            return [
                .accepted,
                .accepting,
                .expired,
                .pending,
                .rejected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accepted: return "ACCEPTED"
            case .accepting: return "ACCEPTING"
            case .expired: return "EXPIRED"
            case .pending: return "PENDING"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InvitationStatus(rawValue: rawValue) ?? InvitationStatus.sdkUnknown(rawValue)
        }
    }
}

extension ManagedBlockchainClientTypes.InviteAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case principal = "Principal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let principal = principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principal)
        principal = principalDecoded
    }
}

extension ManagedBlockchainClientTypes.InviteAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InviteAction(principal: \(Swift.String(describing: principal)))"}
}

extension ManagedBlockchainClientTypes {
    /// An action to invite a specific AWS account to create a member and join the network. The InviteAction is carried out when a Proposal is APPROVED. Applies only to Hyperledger Fabric.
    public struct InviteAction: Swift.Equatable {
        /// The AWS account ID to invite.
        /// This member is required.
        public var principal: Swift.String?

        public init (
            principal: Swift.String? = nil
        )
        {
            self.principal = principal
        }
    }

}

extension ListInvitationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInvitationsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListInvitationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListInvitationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInvitationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInvitationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInvitationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInvitationsOutputError>
}

public struct ListInvitationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInvitationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInvitationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInvitationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInvitationsOutputError>
}

public struct ListInvitationsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInvitationsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListInvitationsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListInvitationsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInvitationsOutputError>
}

public struct ListInvitationsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInvitationsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListInvitationsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/invitations"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListInvitationsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInvitationsOutputError>
}

public struct ListInvitationsInput: Swift.Equatable {
    /// The maximum number of invitations to return.
    public var maxResults: Swift.Int?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInvitationsInputBody: Swift.Equatable {
}

extension ListInvitationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListInvitationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInvitationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInvitationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInvitationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInvitationsOutputResponse(invitations: \(Swift.String(describing: invitations)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListInvitationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInvitationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.invitations = output.invitations
            self.nextToken = output.nextToken
        } else {
            self.invitations = nil
            self.nextToken = nil
        }
    }
}

public struct ListInvitationsOutputResponse: Swift.Equatable {
    /// The invitations for the network.
    public var invitations: [ManagedBlockchainClientTypes.Invitation]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init (
        invitations: [ManagedBlockchainClientTypes.Invitation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.invitations = invitations
        self.nextToken = nextToken
    }
}

struct ListInvitationsOutputResponseBody: Swift.Equatable {
    public let invitations: [ManagedBlockchainClientTypes.Invitation]?
    public let nextToken: Swift.String?
}

extension ListInvitationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invitations = "Invitations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invitationsContainer = try containerValues.decodeIfPresent([ManagedBlockchainClientTypes.Invitation?].self, forKey: .invitations)
        var invitationsDecoded0:[ManagedBlockchainClientTypes.Invitation]? = nil
        if let invitationsContainer = invitationsContainer {
            invitationsDecoded0 = [ManagedBlockchainClientTypes.Invitation]()
            for structure0 in invitationsContainer {
                if let structure0 = structure0 {
                    invitationsDecoded0?.append(structure0)
                }
            }
        }
        invitations = invitationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMembersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMembersInput(isOwned: \(Swift.String(describing: isOwned)), maxResults: \(Swift.String(describing: maxResults)), name: \(Swift.String(describing: name)), networkId: \(Swift.String(describing: networkId)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListMembersInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListMembersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMembersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMembersOutputError>
}

public struct ListMembersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMembersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let status = input.operationInput.status {
            let statusQueryItem = ClientRuntime.URLQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let isOwned = input.operationInput.isOwned {
            let isOwnedQueryItem = ClientRuntime.URLQueryItem(name: "isOwned".urlPercentEncoding(), value: Swift.String(isOwned).urlPercentEncoding())
            input.builder.withQueryItem(isOwnedQueryItem)
        }
        if let name = input.operationInput.name {
            let nameQueryItem = ClientRuntime.URLQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            input.builder.withQueryItem(nameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMembersOutputError>
}

public struct ListMembersInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMembersInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListMembersInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListMembersInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMembersOutputError>
}

public struct ListMembersInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMembersInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListMembersInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/members"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListMembersInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMembersOutputError>
}

public struct ListMembersInput: Swift.Equatable {
    /// An optional Boolean value. If provided, the request is limited either to members that the current AWS account owns (true) or that other AWS accounts own (false). If omitted, all members are listed.
    public var isOwned: Swift.Bool?
    /// The maximum number of members to return in the request.
    public var maxResults: Swift.Int?
    /// The optional name of the member to list.
    public var name: Swift.String?
    /// The unique identifier of the network for which to list members.
    /// This member is required.
    public var networkId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// An optional status specifier. If provided, only members currently in this status are listed.
    public var status: ManagedBlockchainClientTypes.MemberStatus?

    public init (
        isOwned: Swift.Bool? = nil,
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: ManagedBlockchainClientTypes.MemberStatus? = nil
    )
    {
        self.isOwned = isOwned
        self.maxResults = maxResults
        self.name = name
        self.networkId = networkId
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListMembersInputBody: Swift.Equatable {
}

extension ListMembersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListMembersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMembersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMembersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMembersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMembersOutputResponse(members: \(Swift.String(describing: members)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListMembersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMembersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.members = output.members
            self.nextToken = output.nextToken
        } else {
            self.members = nil
            self.nextToken = nil
        }
    }
}

public struct ListMembersOutputResponse: Swift.Equatable {
    /// An array of MemberSummary objects. Each object contains details about a network member.
    public var members: [ManagedBlockchainClientTypes.MemberSummary]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init (
        members: [ManagedBlockchainClientTypes.MemberSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.members = members
        self.nextToken = nextToken
    }
}

struct ListMembersOutputResponseBody: Swift.Equatable {
    public let members: [ManagedBlockchainClientTypes.MemberSummary]?
    public let nextToken: Swift.String?
}

extension ListMembersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case members = "Members"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let membersContainer = try containerValues.decodeIfPresent([ManagedBlockchainClientTypes.MemberSummary?].self, forKey: .members)
        var membersDecoded0:[ManagedBlockchainClientTypes.MemberSummary]? = nil
        if let membersContainer = membersContainer {
            membersDecoded0 = [ManagedBlockchainClientTypes.MemberSummary]()
            for structure0 in membersContainer {
                if let structure0 = structure0 {
                    membersDecoded0?.append(structure0)
                }
            }
        }
        members = membersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListNetworksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListNetworksInput(framework: \(Swift.String(describing: framework)), maxResults: \(Swift.String(describing: maxResults)), name: \(Swift.String(describing: name)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListNetworksInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListNetworksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNetworksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListNetworksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNetworksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListNetworksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListNetworksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNetworksOutputError>
}

public struct ListNetworksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNetworksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListNetworksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNetworksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let status = input.operationInput.status {
            let statusQueryItem = ClientRuntime.URLQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let framework = input.operationInput.framework {
            let frameworkQueryItem = ClientRuntime.URLQueryItem(name: "framework".urlPercentEncoding(), value: Swift.String(framework.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(frameworkQueryItem)
        }
        if let name = input.operationInput.name {
            let nameQueryItem = ClientRuntime.URLQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            input.builder.withQueryItem(nameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListNetworksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListNetworksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNetworksOutputError>
}

public struct ListNetworksInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNetworksInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListNetworksInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNetworksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListNetworksInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListNetworksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNetworksOutputError>
}

public struct ListNetworksInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNetworksInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListNetworksInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNetworksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/networks"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListNetworksInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListNetworksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNetworksOutputError>
}

public struct ListNetworksInput: Swift.Equatable {
    /// An optional framework specifier. If provided, only networks of this framework type are listed.
    public var framework: ManagedBlockchainClientTypes.Framework?
    /// The maximum number of networks to list.
    public var maxResults: Swift.Int?
    /// The name of the network.
    public var name: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// An optional status specifier. If provided, only networks currently in this status are listed. Applies only to Hyperledger Fabric.
    public var status: ManagedBlockchainClientTypes.NetworkStatus?

    public init (
        framework: ManagedBlockchainClientTypes.Framework? = nil,
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: ManagedBlockchainClientTypes.NetworkStatus? = nil
    )
    {
        self.framework = framework
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListNetworksInputBody: Swift.Equatable {
}

extension ListNetworksInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListNetworksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListNetworksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListNetworksOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListNetworksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListNetworksOutputResponse(networks: \(Swift.String(describing: networks)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListNetworksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListNetworksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.networks = output.networks
            self.nextToken = output.nextToken
        } else {
            self.networks = nil
            self.nextToken = nil
        }
    }
}

public struct ListNetworksOutputResponse: Swift.Equatable {
    /// An array of NetworkSummary objects that contain configuration properties for each network.
    public var networks: [ManagedBlockchainClientTypes.NetworkSummary]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init (
        networks: [ManagedBlockchainClientTypes.NetworkSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.networks = networks
        self.nextToken = nextToken
    }
}

struct ListNetworksOutputResponseBody: Swift.Equatable {
    public let networks: [ManagedBlockchainClientTypes.NetworkSummary]?
    public let nextToken: Swift.String?
}

extension ListNetworksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networks = "Networks"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networksContainer = try containerValues.decodeIfPresent([ManagedBlockchainClientTypes.NetworkSummary?].self, forKey: .networks)
        var networksDecoded0:[ManagedBlockchainClientTypes.NetworkSummary]? = nil
        if let networksContainer = networksContainer {
            networksDecoded0 = [ManagedBlockchainClientTypes.NetworkSummary]()
            for structure0 in networksContainer {
                if let structure0 = structure0 {
                    networksDecoded0?.append(structure0)
                }
            }
        }
        networks = networksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListNodesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListNodesInput(maxResults: \(Swift.String(describing: maxResults)), memberId: \(Swift.String(describing: memberId)), networkId: \(Swift.String(describing: networkId)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListNodesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListNodesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNodesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListNodesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNodesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListNodesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListNodesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNodesOutputError>
}

public struct ListNodesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNodesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListNodesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNodesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let status = input.operationInput.status {
            let statusQueryItem = ClientRuntime.URLQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        if let memberId = input.operationInput.memberId {
            let memberIdQueryItem = ClientRuntime.URLQueryItem(name: "memberId".urlPercentEncoding(), value: Swift.String(memberId).urlPercentEncoding())
            input.builder.withQueryItem(memberIdQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListNodesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListNodesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNodesOutputError>
}

public struct ListNodesInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNodesInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListNodesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNodesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListNodesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListNodesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNodesOutputError>
}

public struct ListNodesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNodesInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListNodesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNodesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/nodes"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListNodesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListNodesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNodesOutputError>
}

public struct ListNodesInput: Swift.Equatable {
    /// The maximum number of nodes to list.
    public var maxResults: Swift.Int?
    /// The unique identifier of the member who owns the nodes to list. Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.
    public var memberId: Swift.String?
    /// The unique identifier of the network for which to list nodes.
    /// This member is required.
    public var networkId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// An optional status specifier. If provided, only nodes currently in this status are listed.
    public var status: ManagedBlockchainClientTypes.NodeStatus?

    public init (
        maxResults: Swift.Int? = nil,
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: ManagedBlockchainClientTypes.NodeStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.memberId = memberId
        self.networkId = networkId
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListNodesInputBody: Swift.Equatable {
}

extension ListNodesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListNodesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListNodesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListNodesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListNodesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListNodesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), nodes: \(Swift.String(describing: nodes)))"}
}

extension ListNodesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListNodesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.nodes = output.nodes
        } else {
            self.nextToken = nil
            self.nodes = nil
        }
    }
}

public struct ListNodesOutputResponse: Swift.Equatable {
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// An array of NodeSummary objects that contain configuration properties for each node.
    public var nodes: [ManagedBlockchainClientTypes.NodeSummary]?

    public init (
        nextToken: Swift.String? = nil,
        nodes: [ManagedBlockchainClientTypes.NodeSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.nodes = nodes
    }
}

struct ListNodesOutputResponseBody: Swift.Equatable {
    public let nodes: [ManagedBlockchainClientTypes.NodeSummary]?
    public let nextToken: Swift.String?
}

extension ListNodesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case nodes = "Nodes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodesContainer = try containerValues.decodeIfPresent([ManagedBlockchainClientTypes.NodeSummary?].self, forKey: .nodes)
        var nodesDecoded0:[ManagedBlockchainClientTypes.NodeSummary]? = nil
        if let nodesContainer = nodesContainer {
            nodesDecoded0 = [ManagedBlockchainClientTypes.NodeSummary]()
            for structure0 in nodesContainer {
                if let structure0 = structure0 {
                    nodesDecoded0?.append(structure0)
                }
            }
        }
        nodes = nodesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListProposalVotesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListProposalVotesInput(maxResults: \(Swift.String(describing: maxResults)), networkId: \(Swift.String(describing: networkId)), nextToken: \(Swift.String(describing: nextToken)), proposalId: \(Swift.String(describing: proposalId)))"}
}

extension ListProposalVotesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListProposalVotesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProposalVotesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListProposalVotesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProposalVotesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListProposalVotesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListProposalVotesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProposalVotesOutputError>
}

public struct ListProposalVotesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProposalVotesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListProposalVotesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProposalVotesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListProposalVotesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListProposalVotesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProposalVotesOutputError>
}

public struct ListProposalVotesInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProposalVotesInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListProposalVotesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProposalVotesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListProposalVotesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListProposalVotesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProposalVotesOutputError>
}

public struct ListProposalVotesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProposalVotesInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListProposalVotesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProposalVotesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        guard let proposalId = input.proposalId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("proposalId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/proposals/\(proposalId.urlPercentEncoding())/votes"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListProposalVotesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListProposalVotesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProposalVotesOutputError>
}

public struct ListProposalVotesInput: Swift.Equatable {
    /// The maximum number of votes to return.
    public var maxResults: Swift.Int?
    /// The unique identifier of the network.
    /// This member is required.
    public var networkId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// The unique identifier of the proposal.
    /// This member is required.
    public var proposalId: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        networkId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        proposalId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.networkId = networkId
        self.nextToken = nextToken
        self.proposalId = proposalId
    }
}

struct ListProposalVotesInputBody: Swift.Equatable {
}

extension ListProposalVotesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListProposalVotesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListProposalVotesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListProposalVotesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListProposalVotesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListProposalVotesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), proposalVotes: \(Swift.String(describing: proposalVotes)))"}
}

extension ListProposalVotesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListProposalVotesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.proposalVotes = output.proposalVotes
        } else {
            self.nextToken = nil
            self.proposalVotes = nil
        }
    }
}

public struct ListProposalVotesOutputResponse: Swift.Equatable {
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// The list of votes.
    public var proposalVotes: [ManagedBlockchainClientTypes.VoteSummary]?

    public init (
        nextToken: Swift.String? = nil,
        proposalVotes: [ManagedBlockchainClientTypes.VoteSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.proposalVotes = proposalVotes
    }
}

struct ListProposalVotesOutputResponseBody: Swift.Equatable {
    public let proposalVotes: [ManagedBlockchainClientTypes.VoteSummary]?
    public let nextToken: Swift.String?
}

extension ListProposalVotesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case proposalVotes = "ProposalVotes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalVotesContainer = try containerValues.decodeIfPresent([ManagedBlockchainClientTypes.VoteSummary?].self, forKey: .proposalVotes)
        var proposalVotesDecoded0:[ManagedBlockchainClientTypes.VoteSummary]? = nil
        if let proposalVotesContainer = proposalVotesContainer {
            proposalVotesDecoded0 = [ManagedBlockchainClientTypes.VoteSummary]()
            for structure0 in proposalVotesContainer {
                if let structure0 = structure0 {
                    proposalVotesDecoded0?.append(structure0)
                }
            }
        }
        proposalVotes = proposalVotesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListProposalsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListProposalsInput(maxResults: \(Swift.String(describing: maxResults)), networkId: \(Swift.String(describing: networkId)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListProposalsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListProposalsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProposalsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListProposalsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProposalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListProposalsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListProposalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProposalsOutputError>
}

public struct ListProposalsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProposalsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListProposalsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProposalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListProposalsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListProposalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProposalsOutputError>
}

public struct ListProposalsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProposalsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListProposalsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProposalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListProposalsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListProposalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProposalsOutputError>
}

public struct ListProposalsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProposalsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListProposalsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProposalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/proposals"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListProposalsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListProposalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProposalsOutputError>
}

public struct ListProposalsInput: Swift.Equatable {
    /// The maximum number of proposals to return.
    public var maxResults: Swift.Int?
    /// The unique identifier of the network.
    /// This member is required.
    public var networkId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        networkId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.networkId = networkId
        self.nextToken = nextToken
    }
}

struct ListProposalsInputBody: Swift.Equatable {
}

extension ListProposalsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListProposalsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListProposalsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListProposalsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListProposalsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListProposalsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), proposals: \(Swift.String(describing: proposals)))"}
}

extension ListProposalsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListProposalsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.proposals = output.proposals
        } else {
            self.nextToken = nil
            self.proposals = nil
        }
    }
}

public struct ListProposalsOutputResponse: Swift.Equatable {
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// The summary of each proposal made on the network.
    public var proposals: [ManagedBlockchainClientTypes.ProposalSummary]?

    public init (
        nextToken: Swift.String? = nil,
        proposals: [ManagedBlockchainClientTypes.ProposalSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.proposals = proposals
    }
}

struct ListProposalsOutputResponseBody: Swift.Equatable {
    public let proposals: [ManagedBlockchainClientTypes.ProposalSummary]?
    public let nextToken: Swift.String?
}

extension ListProposalsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case proposals = "Proposals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalsContainer = try containerValues.decodeIfPresent([ManagedBlockchainClientTypes.ProposalSummary?].self, forKey: .proposals)
        var proposalsDecoded0:[ManagedBlockchainClientTypes.ProposalSummary]? = nil
        if let proposalsContainer = proposalsContainer {
            proposalsDecoded0 = [ManagedBlockchainClientTypes.ProposalSummary]()
            for structure0 in proposalsContainer {
                if let structure0 = structure0 {
                    proposalsDecoded0?.append(structure0)
                }
            }
        }
        proposals = proposalsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListTagsForResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTagsForResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListTagsForResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let resourceArn = input.resourceArn else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("resourceArn is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/tags/\(resourceArn.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTagsForResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The tags assigned to the resource.
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ManagedBlockchainClientTypes.LogConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension ManagedBlockchainClientTypes.LogConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogConfiguration(enabled: \(Swift.String(describing: enabled)))"}
}

extension ManagedBlockchainClientTypes {
    /// A configuration for logging events.
    public struct LogConfiguration: Swift.Equatable {
        /// Indicates whether logging is enabled.
        public var enabled: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension ManagedBlockchainClientTypes.LogConfigurations: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudwatch = "Cloudwatch"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudwatch = cloudwatch {
            try encodeContainer.encode(cloudwatch, forKey: .cloudwatch)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudwatchDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.LogConfiguration.self, forKey: .cloudwatch)
        cloudwatch = cloudwatchDecoded
    }
}

extension ManagedBlockchainClientTypes.LogConfigurations: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogConfigurations(cloudwatch: \(Swift.String(describing: cloudwatch)))"}
}

extension ManagedBlockchainClientTypes {
    /// A collection of log configurations.
    public struct LogConfigurations: Swift.Equatable {
        /// Parameters for publishing logs to Amazon CloudWatch Logs.
        public var cloudwatch: ManagedBlockchainClientTypes.LogConfiguration?

        public init (
            cloudwatch: ManagedBlockchainClientTypes.LogConfiguration? = nil
        )
        {
            self.cloudwatch = cloudwatch
        }
    }

}

extension ManagedBlockchainClientTypes.Member: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case frameworkAttributes = "FrameworkAttributes"
        case id = "Id"
        case kmsKeyArn = "KmsKeyArn"
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case name = "Name"
        case networkId = "NetworkId"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let frameworkAttributes = frameworkAttributes {
            try encodeContainer.encode(frameworkAttributes, forKey: .frameworkAttributes)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let kmsKeyArn = kmsKeyArn {
            try encodeContainer.encode(kmsKeyArn, forKey: .kmsKeyArn)
        }
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkId = networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkAttributesDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberFrameworkAttributes.self, forKey: .frameworkAttributes)
        frameworkAttributes = frameworkAttributesDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
    }
}

extension ManagedBlockchainClientTypes.Member: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Member(arn: \(Swift.String(describing: arn)), creationDate: \(Swift.String(describing: creationDate)), description: \(Swift.String(describing: description)), frameworkAttributes: \(Swift.String(describing: frameworkAttributes)), id: \(Swift.String(describing: id)), kmsKeyArn: \(Swift.String(describing: kmsKeyArn)), logPublishingConfiguration: \(Swift.String(describing: logPublishingConfiguration)), name: \(Swift.String(describing: name)), networkId: \(Swift.String(describing: networkId)), status: \(Swift.String(describing: status)), tags: \(Swift.String(describing: tags)))"}
}

extension ManagedBlockchainClientTypes {
    /// Member configuration properties. Applies only to Hyperledger Fabric.
    public struct Member: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the member. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
        public var arn: Swift.String?
        /// The date and time that the member was created.
        public var creationDate: ClientRuntime.Date?
        /// An optional description for the member.
        public var description: Swift.String?
        /// Attributes relevant to a member for the blockchain framework that the Managed Blockchain network uses.
        public var frameworkAttributes: ManagedBlockchainClientTypes.MemberFrameworkAttributes?
        /// The unique identifier of the member.
        public var id: Swift.String?
        /// The Amazon Resource Name (ARN) of the customer managed key in AWS Key Management Service (AWS KMS) that the member uses for encryption at rest. If the value of this parameter is "AWS Owned KMS Key", the member uses an AWS owned KMS key for encryption. This parameter is inherited by the nodes that this member owns.
        public var kmsKeyArn: Swift.String?
        /// Configuration properties for logging events associated with a member.
        public var logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration?
        /// The name of the member.
        public var name: Swift.String?
        /// The unique identifier of the network to which the member belongs.
        public var networkId: Swift.String?
        /// The status of a member.
        ///
        /// * CREATING - The AWS account is in the process of creating a member.
        ///
        /// * AVAILABLE - The member has been created and can participate in the network.
        ///
        /// * CREATE_FAILED - The AWS account attempted to create a member and creation failed.
        ///
        /// * UPDATING - The member is in the process of being updated.
        ///
        /// * DELETING - The member and all associated resources are in the process of being deleted. Either the AWS account that owns the member deleted it, or the member is being deleted as the result of an APPROVEDPROPOSAL to remove the member.
        ///
        /// * DELETED - The member can no longer participate on the network and all associated resources are deleted. Either the AWS account that owns the member deleted it, or the member is being deleted as the result of an APPROVEDPROPOSAL to remove the member.
        ///
        /// * INACCESSIBLE_ENCRYPTION_KEY - The member is impaired and might not function as expected because it cannot access the specified customer managed key in AWS KMS for encryption at rest. Either the KMS key was disabled or deleted, or the grants on the key were revoked. The effect of disabling or deleting a key, or revoking a grant is not immediate. The member resource might take some time to find that the key is inaccessible. When a resource is in this state, we recommend deleting and recreating the resource.
        public var status: ManagedBlockchainClientTypes.MemberStatus?
        /// Tags assigned to the member. Tags consist of a key and optional value. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var tags: [Swift.String:Swift.String]?

        public init (
            arn: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            frameworkAttributes: ManagedBlockchainClientTypes.MemberFrameworkAttributes? = nil,
            id: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil,
            logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration? = nil,
            name: Swift.String? = nil,
            networkId: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.MemberStatus? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.frameworkAttributes = frameworkAttributes
            self.id = id
            self.kmsKeyArn = kmsKeyArn
            self.logPublishingConfiguration = logPublishingConfiguration
            self.name = name
            self.networkId = networkId
            self.status = status
            self.tags = tags
        }
    }

}

extension ManagedBlockchainClientTypes.MemberConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case frameworkConfiguration = "FrameworkConfiguration"
        case kmsKeyArn = "KmsKeyArn"
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let frameworkConfiguration = frameworkConfiguration {
            try encodeContainer.encode(frameworkConfiguration, forKey: .frameworkConfiguration)
        }
        if let kmsKeyArn = kmsKeyArn {
            try encodeContainer.encode(kmsKeyArn, forKey: .kmsKeyArn)
        }
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, inputtagmap0) in tags {
                try tagsContainer.encode(inputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberFrameworkConfiguration.self, forKey: .frameworkConfiguration)
        frameworkConfiguration = frameworkConfigurationDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
    }
}

extension ManagedBlockchainClientTypes.MemberConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MemberConfiguration(description: \(Swift.String(describing: description)), frameworkConfiguration: \(Swift.String(describing: frameworkConfiguration)), kmsKeyArn: \(Swift.String(describing: kmsKeyArn)), logPublishingConfiguration: \(Swift.String(describing: logPublishingConfiguration)), name: \(Swift.String(describing: name)), tags: \(Swift.String(describing: tags)))"}
}

extension ManagedBlockchainClientTypes {
    /// Configuration properties of the member. Applies only to Hyperledger Fabric.
    public struct MemberConfiguration: Swift.Equatable {
        /// An optional description of the member.
        public var description: Swift.String?
        /// Configuration properties of the blockchain framework relevant to the member.
        /// This member is required.
        public var frameworkConfiguration: ManagedBlockchainClientTypes.MemberFrameworkConfiguration?
        /// The Amazon Resource Name (ARN) of the customer managed key in AWS Key Management Service (AWS KMS) to use for encryption at rest in the member. This parameter is inherited by any nodes that this member creates. Use one of the following options to specify this parameter:
        ///
        /// * Undefined or empty string - The member uses an AWS owned KMS key for encryption by default.
        ///
        /// * A valid symmetric customer managed KMS key - The member uses the specified key for encryption. Amazon Managed Blockchain doesn't support asymmetric keys. For more information, see [Using symmetric and asymmetric keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the AWS Key Management Service Developer Guide. The following is an example of a KMS key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        public var kmsKeyArn: Swift.String?
        /// Configuration properties for logging events associated with a member of a Managed Blockchain network.
        public var logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration?
        /// The name of the member.
        /// This member is required.
        public var name: Swift.String?
        /// Tags assigned to the member. Tags consist of a key and optional value. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide. When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.
        public var tags: [Swift.String:Swift.String]?

        public init (
            description: Swift.String? = nil,
            frameworkConfiguration: ManagedBlockchainClientTypes.MemberFrameworkConfiguration? = nil,
            kmsKeyArn: Swift.String? = nil,
            logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.description = description
            self.frameworkConfiguration = frameworkConfiguration
            self.kmsKeyArn = kmsKeyArn
            self.logPublishingConfiguration = logPublishingConfiguration
            self.name = name
            self.tags = tags
        }
    }

}

extension ManagedBlockchainClientTypes.MemberFabricAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adminUsername = "AdminUsername"
        case caEndpoint = "CaEndpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adminUsername = adminUsername {
            try encodeContainer.encode(adminUsername, forKey: .adminUsername)
        }
        if let caEndpoint = caEndpoint {
            try encodeContainer.encode(caEndpoint, forKey: .caEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adminUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adminUsername)
        adminUsername = adminUsernameDecoded
        let caEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caEndpoint)
        caEndpoint = caEndpointDecoded
    }
}

extension ManagedBlockchainClientTypes.MemberFabricAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MemberFabricAttributes(adminUsername: \(Swift.String(describing: adminUsername)), caEndpoint: \(Swift.String(describing: caEndpoint)))"}
}

extension ManagedBlockchainClientTypes {
    /// Attributes of Hyperledger Fabric for a member in a Managed Blockchain network using the Hyperledger Fabric framework.
    public struct MemberFabricAttributes: Swift.Equatable {
        /// The user name for the initial administrator user for the member.
        public var adminUsername: Swift.String?
        /// The endpoint used to access the member's certificate authority.
        public var caEndpoint: Swift.String?

        public init (
            adminUsername: Swift.String? = nil,
            caEndpoint: Swift.String? = nil
        )
        {
            self.adminUsername = adminUsername
            self.caEndpoint = caEndpoint
        }
    }

}

extension ManagedBlockchainClientTypes.MemberFabricConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adminPassword = "AdminPassword"
        case adminUsername = "AdminUsername"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adminPassword = adminPassword {
            try encodeContainer.encode(adminPassword, forKey: .adminPassword)
        }
        if let adminUsername = adminUsername {
            try encodeContainer.encode(adminUsername, forKey: .adminUsername)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adminUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adminUsername)
        adminUsername = adminUsernameDecoded
        let adminPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adminPassword)
        adminPassword = adminPasswordDecoded
    }
}

extension ManagedBlockchainClientTypes.MemberFabricConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MemberFabricConfiguration(adminPassword: \(Swift.String(describing: adminPassword)), adminUsername: \(Swift.String(describing: adminUsername)))"}
}

extension ManagedBlockchainClientTypes {
    /// Configuration properties for Hyperledger Fabric for a member in a Managed Blockchain network using the Hyperledger Fabric framework.
    public struct MemberFabricConfiguration: Swift.Equatable {
        /// The password for the member's initial administrative user. The AdminPassword must be at least eight characters long and no more than 32 characters. It must contain at least one uppercase letter, one lowercase letter, and one digit. It cannot have a single quotation mark (‘), a double quotation marks (“), a forward slash(/), a backward slash(\), @, or a space.
        /// This member is required.
        public var adminPassword: Swift.String?
        /// The user name for the member's initial administrative user.
        /// This member is required.
        public var adminUsername: Swift.String?

        public init (
            adminPassword: Swift.String? = nil,
            adminUsername: Swift.String? = nil
        )
        {
            self.adminPassword = adminPassword
            self.adminUsername = adminUsername
        }
    }

}

extension ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caLogs = "CaLogs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caLogs = caLogs {
            try encodeContainer.encode(caLogs, forKey: .caLogs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let caLogsDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.LogConfigurations.self, forKey: .caLogs)
        caLogs = caLogsDecoded
    }
}

extension ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MemberFabricLogPublishingConfiguration(caLogs: \(Swift.String(describing: caLogs)))"}
}

extension ManagedBlockchainClientTypes {
    /// Configuration properties for logging events associated with a member of a Managed Blockchain network using the Hyperledger Fabric framework.
    public struct MemberFabricLogPublishingConfiguration: Swift.Equatable {
        /// Configuration properties for logging events associated with a member's Certificate Authority (CA). CA logs help you determine when a member in your account joins the network, or when new peers register with a member CA.
        public var caLogs: ManagedBlockchainClientTypes.LogConfigurations?

        public init (
            caLogs: ManagedBlockchainClientTypes.LogConfigurations? = nil
        )
        {
            self.caLogs = caLogs
        }
    }

}

extension ManagedBlockchainClientTypes.MemberFrameworkAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fabric = "Fabric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberFabricAttributes.self, forKey: .fabric)
        fabric = fabricDecoded
    }
}

extension ManagedBlockchainClientTypes.MemberFrameworkAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MemberFrameworkAttributes(fabric: \(Swift.String(describing: fabric)))"}
}

extension ManagedBlockchainClientTypes {
    /// Attributes relevant to a member for the blockchain framework that the Managed Blockchain network uses.
    public struct MemberFrameworkAttributes: Swift.Equatable {
        /// Attributes of Hyperledger Fabric relevant to a member on a Managed Blockchain network that uses Hyperledger Fabric.
        public var fabric: ManagedBlockchainClientTypes.MemberFabricAttributes?

        public init (
            fabric: ManagedBlockchainClientTypes.MemberFabricAttributes? = nil
        )
        {
            self.fabric = fabric
        }
    }

}

extension ManagedBlockchainClientTypes.MemberFrameworkConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fabric = "Fabric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberFabricConfiguration.self, forKey: .fabric)
        fabric = fabricDecoded
    }
}

extension ManagedBlockchainClientTypes.MemberFrameworkConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MemberFrameworkConfiguration(fabric: \(Swift.String(describing: fabric)))"}
}

extension ManagedBlockchainClientTypes {
    /// Configuration properties relevant to a member for the blockchain framework that the Managed Blockchain network uses.
    public struct MemberFrameworkConfiguration: Swift.Equatable {
        /// Attributes of Hyperledger Fabric for a member on a Managed Blockchain network that uses Hyperledger Fabric.
        public var fabric: ManagedBlockchainClientTypes.MemberFabricConfiguration?

        public init (
            fabric: ManagedBlockchainClientTypes.MemberFabricConfiguration? = nil
        )
        {
            self.fabric = fabric
        }
    }

}

extension ManagedBlockchainClientTypes.MemberLogPublishingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fabric = "Fabric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration.self, forKey: .fabric)
        fabric = fabricDecoded
    }
}

extension ManagedBlockchainClientTypes.MemberLogPublishingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MemberLogPublishingConfiguration(fabric: \(Swift.String(describing: fabric)))"}
}

extension ManagedBlockchainClientTypes {
    /// Configuration properties for logging events associated with a member of a Managed Blockchain network.
    public struct MemberLogPublishingConfiguration: Swift.Equatable {
        /// Configuration properties for logging events associated with a member of a Managed Blockchain network using the Hyperledger Fabric framework.
        public var fabric: ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration?

        public init (
            fabric: ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration? = nil
        )
        {
            self.fabric = fabric
        }
    }

}

extension ManagedBlockchainClientTypes {
    public enum MemberStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case createFailed
        case creating
        case deleted
        case deleting
        case inaccessibleEncryptionKey
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [MemberStatus] {
            return [
                .available,
                .createFailed,
                .creating,
                .deleted,
                .deleting,
                .inaccessibleEncryptionKey,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .inaccessibleEncryptionKey: return "INACCESSIBLE_ENCRYPTION_KEY"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MemberStatus(rawValue: rawValue) ?? MemberStatus.sdkUnknown(rawValue)
        }
    }
}

extension ManagedBlockchainClientTypes.MemberSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case id = "Id"
        case isOwned = "IsOwned"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isOwned = isOwned {
            try encodeContainer.encode(isOwned, forKey: .isOwned)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let isOwnedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isOwned)
        isOwned = isOwnedDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension ManagedBlockchainClientTypes.MemberSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MemberSummary(arn: \(Swift.String(describing: arn)), creationDate: \(Swift.String(describing: creationDate)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), isOwned: \(Swift.String(describing: isOwned)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)))"}
}

extension ManagedBlockchainClientTypes {
    /// A summary of configuration properties for a member. Applies only to Hyperledger Fabric.
    public struct MemberSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the member. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
        public var arn: Swift.String?
        /// The date and time that the member was created.
        public var creationDate: ClientRuntime.Date?
        /// An optional description of the member.
        public var description: Swift.String?
        /// The unique identifier of the member.
        public var id: Swift.String?
        /// An indicator of whether the member is owned by your AWS account or a different AWS account.
        public var isOwned: Swift.Bool?
        /// The name of the member.
        public var name: Swift.String?
        /// The status of the member.
        ///
        /// * CREATING - The AWS account is in the process of creating a member.
        ///
        /// * AVAILABLE - The member has been created and can participate in the network.
        ///
        /// * CREATE_FAILED - The AWS account attempted to create a member and creation failed.
        ///
        /// * UPDATING - The member is in the process of being updated.
        ///
        /// * DELETING - The member and all associated resources are in the process of being deleted. Either the AWS account that owns the member deleted it, or the member is being deleted as the result of an APPROVEDPROPOSAL to remove the member.
        ///
        /// * DELETED - The member can no longer participate on the network and all associated resources are deleted. Either the AWS account that owns the member deleted it, or the member is being deleted as the result of an APPROVEDPROPOSAL to remove the member.
        ///
        /// * INACCESSIBLE_ENCRYPTION_KEY - The member is impaired and might not function as expected because it cannot access the specified customer managed key in AWS Key Management Service (AWS KMS) for encryption at rest. Either the KMS key was disabled or deleted, or the grants on the key were revoked. The effect of disabling or deleting a key, or revoking a grant is not immediate. The member resource might take some time to find that the key is inaccessible. When a resource is in this state, we recommend deleting and recreating the resource.
        public var status: ManagedBlockchainClientTypes.MemberStatus?

        public init (
            arn: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            isOwned: Swift.Bool? = nil,
            name: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.MemberStatus? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.id = id
            self.isOwned = isOwned
            self.name = name
            self.status = status
        }
    }

}

extension ManagedBlockchainClientTypes.Network: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case framework = "Framework"
        case frameworkAttributes = "FrameworkAttributes"
        case frameworkVersion = "FrameworkVersion"
        case id = "Id"
        case name = "Name"
        case status = "Status"
        case tags = "Tags"
        case votingPolicy = "VotingPolicy"
        case vpcEndpointServiceName = "VpcEndpointServiceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let framework = framework {
            try encodeContainer.encode(framework.rawValue, forKey: .framework)
        }
        if let frameworkAttributes = frameworkAttributes {
            try encodeContainer.encode(frameworkAttributes, forKey: .frameworkAttributes)
        }
        if let frameworkVersion = frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let votingPolicy = votingPolicy {
            try encodeContainer.encode(votingPolicy, forKey: .votingPolicy)
        }
        if let vpcEndpointServiceName = vpcEndpointServiceName {
            try encodeContainer.encode(vpcEndpointServiceName, forKey: .vpcEndpointServiceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.Framework.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
        let frameworkAttributesDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NetworkFrameworkAttributes.self, forKey: .frameworkAttributes)
        frameworkAttributes = frameworkAttributesDecoded
        let vpcEndpointServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointServiceName)
        vpcEndpointServiceName = vpcEndpointServiceNameDecoded
        let votingPolicyDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.VotingPolicy.self, forKey: .votingPolicy)
        votingPolicy = votingPolicyDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NetworkStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension ManagedBlockchainClientTypes.Network: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Network(arn: \(Swift.String(describing: arn)), creationDate: \(Swift.String(describing: creationDate)), description: \(Swift.String(describing: description)), framework: \(Swift.String(describing: framework)), frameworkAttributes: \(Swift.String(describing: frameworkAttributes)), frameworkVersion: \(Swift.String(describing: frameworkVersion)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), tags: \(Swift.String(describing: tags)), votingPolicy: \(Swift.String(describing: votingPolicy)), vpcEndpointServiceName: \(Swift.String(describing: vpcEndpointServiceName)))"}
}

extension ManagedBlockchainClientTypes {
    /// Network configuration properties.
    public struct Network: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the network. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
        public var arn: Swift.String?
        /// The date and time that the network was created.
        public var creationDate: ClientRuntime.Date?
        /// Attributes of the blockchain framework for the network.
        public var description: Swift.String?
        /// The blockchain framework that the network uses.
        public var framework: ManagedBlockchainClientTypes.Framework?
        /// Attributes of the blockchain framework that the network uses.
        public var frameworkAttributes: ManagedBlockchainClientTypes.NetworkFrameworkAttributes?
        /// The version of the blockchain framework that the network uses.
        public var frameworkVersion: Swift.String?
        /// The unique identifier of the network.
        public var id: Swift.String?
        /// The name of the network.
        public var name: Swift.String?
        /// The current status of the network.
        public var status: ManagedBlockchainClientTypes.NetworkStatus?
        /// Tags assigned to the network. Each tag consists of a key and optional value. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var tags: [Swift.String:Swift.String]?
        /// The voting rules for the network to decide if a proposal is accepted.
        public var votingPolicy: ManagedBlockchainClientTypes.VotingPolicy?
        /// The VPC endpoint service name of the VPC endpoint service of the network. Members use the VPC endpoint service name to create a VPC endpoint to access network resources.
        public var vpcEndpointServiceName: Swift.String?

        public init (
            arn: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            framework: ManagedBlockchainClientTypes.Framework? = nil,
            frameworkAttributes: ManagedBlockchainClientTypes.NetworkFrameworkAttributes? = nil,
            frameworkVersion: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.NetworkStatus? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            votingPolicy: ManagedBlockchainClientTypes.VotingPolicy? = nil,
            vpcEndpointServiceName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.framework = framework
            self.frameworkAttributes = frameworkAttributes
            self.frameworkVersion = frameworkVersion
            self.id = id
            self.name = name
            self.status = status
            self.tags = tags
            self.votingPolicy = votingPolicy
            self.vpcEndpointServiceName = vpcEndpointServiceName
        }
    }

}

extension ManagedBlockchainClientTypes.NetworkEthereumAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case chainId = "ChainId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let chainId = chainId {
            try encodeContainer.encode(chainId, forKey: .chainId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let chainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .chainId)
        chainId = chainIdDecoded
    }
}

extension ManagedBlockchainClientTypes.NetworkEthereumAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkEthereumAttributes(chainId: \(Swift.String(describing: chainId)))"}
}

extension ManagedBlockchainClientTypes {
    /// Attributes of Ethereum for a network.
    public struct NetworkEthereumAttributes: Swift.Equatable {
        /// The Ethereum CHAIN_ID associated with the Ethereum network. Chain IDs are as follows:
        ///
        /// * mainnet = 1
        ///
        /// * rinkeby = 4
        ///
        /// * ropsten = 3
        public var chainId: Swift.String?

        public init (
            chainId: Swift.String? = nil
        )
        {
            self.chainId = chainId
        }
    }

}

extension ManagedBlockchainClientTypes.NetworkFabricAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edition = "Edition"
        case orderingServiceEndpoint = "OrderingServiceEndpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let edition = edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
        if let orderingServiceEndpoint = orderingServiceEndpoint {
            try encodeContainer.encode(orderingServiceEndpoint, forKey: .orderingServiceEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orderingServiceEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .orderingServiceEndpoint)
        orderingServiceEndpoint = orderingServiceEndpointDecoded
        let editionDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.Edition.self, forKey: .edition)
        edition = editionDecoded
    }
}

extension ManagedBlockchainClientTypes.NetworkFabricAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkFabricAttributes(edition: \(Swift.String(describing: edition)), orderingServiceEndpoint: \(Swift.String(describing: orderingServiceEndpoint)))"}
}

extension ManagedBlockchainClientTypes {
    /// Attributes of Hyperledger Fabric for a network.
    public struct NetworkFabricAttributes: Swift.Equatable {
        /// The edition of Amazon Managed Blockchain that Hyperledger Fabric uses. For more information, see [Amazon Managed Blockchain Pricing](http://aws.amazon.com/managed-blockchain/pricing/).
        public var edition: ManagedBlockchainClientTypes.Edition?
        /// The endpoint of the ordering service for the network.
        public var orderingServiceEndpoint: Swift.String?

        public init (
            edition: ManagedBlockchainClientTypes.Edition? = nil,
            orderingServiceEndpoint: Swift.String? = nil
        )
        {
            self.edition = edition
            self.orderingServiceEndpoint = orderingServiceEndpoint
        }
    }

}

extension ManagedBlockchainClientTypes.NetworkFabricConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edition = "Edition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let edition = edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let editionDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.Edition.self, forKey: .edition)
        edition = editionDecoded
    }
}

extension ManagedBlockchainClientTypes.NetworkFabricConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkFabricConfiguration(edition: \(Swift.String(describing: edition)))"}
}

extension ManagedBlockchainClientTypes {
    /// Hyperledger Fabric configuration properties for the network.
    public struct NetworkFabricConfiguration: Swift.Equatable {
        /// The edition of Amazon Managed Blockchain that the network uses. For more information, see [Amazon Managed Blockchain Pricing](http://aws.amazon.com/managed-blockchain/pricing/).
        /// This member is required.
        public var edition: ManagedBlockchainClientTypes.Edition?

        public init (
            edition: ManagedBlockchainClientTypes.Edition? = nil
        )
        {
            self.edition = edition
        }
    }

}

extension ManagedBlockchainClientTypes.NetworkFrameworkAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ethereum = "Ethereum"
        case fabric = "Fabric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ethereum = ethereum {
            try encodeContainer.encode(ethereum, forKey: .ethereum)
        }
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NetworkFabricAttributes.self, forKey: .fabric)
        fabric = fabricDecoded
        let ethereumDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NetworkEthereumAttributes.self, forKey: .ethereum)
        ethereum = ethereumDecoded
    }
}

extension ManagedBlockchainClientTypes.NetworkFrameworkAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkFrameworkAttributes(ethereum: \(Swift.String(describing: ethereum)), fabric: \(Swift.String(describing: fabric)))"}
}

extension ManagedBlockchainClientTypes {
    /// Attributes relevant to the network for the blockchain framework that the network uses.
    public struct NetworkFrameworkAttributes: Swift.Equatable {
        /// Attributes of an Ethereum network for Managed Blockchain resources participating in an Ethereum network.
        public var ethereum: ManagedBlockchainClientTypes.NetworkEthereumAttributes?
        /// Attributes of Hyperledger Fabric for a Managed Blockchain network that uses Hyperledger Fabric.
        public var fabric: ManagedBlockchainClientTypes.NetworkFabricAttributes?

        public init (
            ethereum: ManagedBlockchainClientTypes.NetworkEthereumAttributes? = nil,
            fabric: ManagedBlockchainClientTypes.NetworkFabricAttributes? = nil
        )
        {
            self.ethereum = ethereum
            self.fabric = fabric
        }
    }

}

extension ManagedBlockchainClientTypes.NetworkFrameworkConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fabric = "Fabric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NetworkFabricConfiguration.self, forKey: .fabric)
        fabric = fabricDecoded
    }
}

extension ManagedBlockchainClientTypes.NetworkFrameworkConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkFrameworkConfiguration(fabric: \(Swift.String(describing: fabric)))"}
}

extension ManagedBlockchainClientTypes {
    /// Configuration properties relevant to the network for the blockchain framework that the network uses.
    public struct NetworkFrameworkConfiguration: Swift.Equatable {
        /// Hyperledger Fabric configuration properties for a Managed Blockchain network that uses Hyperledger Fabric.
        public var fabric: ManagedBlockchainClientTypes.NetworkFabricConfiguration?

        public init (
            fabric: ManagedBlockchainClientTypes.NetworkFabricConfiguration? = nil
        )
        {
            self.fabric = fabric
        }
    }

}

extension ManagedBlockchainClientTypes {
    public enum NetworkStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case createFailed
        case creating
        case deleted
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkStatus] {
            return [
                .available,
                .createFailed,
                .creating,
                .deleted,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NetworkStatus(rawValue: rawValue) ?? NetworkStatus.sdkUnknown(rawValue)
        }
    }
}

extension ManagedBlockchainClientTypes.NetworkSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case framework = "Framework"
        case frameworkVersion = "FrameworkVersion"
        case id = "Id"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let framework = framework {
            try encodeContainer.encode(framework.rawValue, forKey: .framework)
        }
        if let frameworkVersion = frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.Framework.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NetworkStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension ManagedBlockchainClientTypes.NetworkSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkSummary(arn: \(Swift.String(describing: arn)), creationDate: \(Swift.String(describing: creationDate)), description: \(Swift.String(describing: description)), framework: \(Swift.String(describing: framework)), frameworkVersion: \(Swift.String(describing: frameworkVersion)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)))"}
}

extension ManagedBlockchainClientTypes {
    /// A summary of network configuration properties.
    public struct NetworkSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the network. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
        public var arn: Swift.String?
        /// The date and time that the network was created.
        public var creationDate: ClientRuntime.Date?
        /// An optional description of the network.
        public var description: Swift.String?
        /// The blockchain framework that the network uses.
        public var framework: ManagedBlockchainClientTypes.Framework?
        /// The version of the blockchain framework that the network uses.
        public var frameworkVersion: Swift.String?
        /// The unique identifier of the network.
        public var id: Swift.String?
        /// The name of the network.
        public var name: Swift.String?
        /// The current status of the network.
        public var status: ManagedBlockchainClientTypes.NetworkStatus?

        public init (
            arn: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            framework: ManagedBlockchainClientTypes.Framework? = nil,
            frameworkVersion: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.NetworkStatus? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.framework = framework
            self.frameworkVersion = frameworkVersion
            self.id = id
            self.name = name
            self.status = status
        }
    }

}

extension ManagedBlockchainClientTypes.Node: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case availabilityZone = "AvailabilityZone"
        case creationDate = "CreationDate"
        case frameworkAttributes = "FrameworkAttributes"
        case id = "Id"
        case instanceType = "InstanceType"
        case kmsKeyArn = "KmsKeyArn"
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case memberId = "MemberId"
        case networkId = "NetworkId"
        case stateDB = "StateDB"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let frameworkAttributes = frameworkAttributes {
            try encodeContainer.encode(frameworkAttributes, forKey: .frameworkAttributes)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let kmsKeyArn = kmsKeyArn {
            try encodeContainer.encode(kmsKeyArn, forKey: .kmsKeyArn)
        }
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
        if let networkId = networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let stateDB = stateDB {
            try encodeContainer.encode(stateDB.rawValue, forKey: .stateDB)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberId)
        memberId = memberIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let frameworkAttributesDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NodeFrameworkAttributes.self, forKey: .frameworkAttributes)
        frameworkAttributes = frameworkAttributesDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NodeLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
        let stateDBDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.StateDBType.self, forKey: .stateDB)
        stateDB = stateDBDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NodeStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
    }
}

extension ManagedBlockchainClientTypes.Node: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Node(arn: \(Swift.String(describing: arn)), availabilityZone: \(Swift.String(describing: availabilityZone)), creationDate: \(Swift.String(describing: creationDate)), frameworkAttributes: \(Swift.String(describing: frameworkAttributes)), id: \(Swift.String(describing: id)), instanceType: \(Swift.String(describing: instanceType)), kmsKeyArn: \(Swift.String(describing: kmsKeyArn)), logPublishingConfiguration: \(Swift.String(describing: logPublishingConfiguration)), memberId: \(Swift.String(describing: memberId)), networkId: \(Swift.String(describing: networkId)), stateDB: \(Swift.String(describing: stateDB)), status: \(Swift.String(describing: status)), tags: \(Swift.String(describing: tags)))"}
}

extension ManagedBlockchainClientTypes {
    /// Configuration properties of a node.
    public struct Node: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the node. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
        public var arn: Swift.String?
        /// The Availability Zone in which the node exists. Required for Ethereum nodes.
        public var availabilityZone: Swift.String?
        /// The date and time that the node was created.
        public var creationDate: ClientRuntime.Date?
        /// Attributes of the blockchain framework being used.
        public var frameworkAttributes: ManagedBlockchainClientTypes.NodeFrameworkAttributes?
        /// The unique identifier of the node.
        public var id: Swift.String?
        /// The instance type of the node.
        public var instanceType: Swift.String?
        /// The Amazon Resource Name (ARN) of the customer managed key in AWS Key Management Service (AWS KMS) that the node uses for encryption at rest. If the value of this parameter is "AWS Owned KMS Key", the node uses an AWS owned KMS key for encryption. The node inherits this parameter from the member that it belongs to. Applies only to Hyperledger Fabric.
        public var kmsKeyArn: Swift.String?
        /// Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.
        public var logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration?
        /// The unique identifier of the member to which the node belongs. Applies only to Hyperledger Fabric.
        public var memberId: Swift.String?
        /// The unique identifier of the network that the node is on.
        public var networkId: Swift.String?
        /// The state database that the node uses. Values are LevelDB or CouchDB. Applies only to Hyperledger Fabric.
        public var stateDB: ManagedBlockchainClientTypes.StateDBType?
        /// The status of the node.
        ///
        /// * CREATING - The AWS account is in the process of creating a node.
        ///
        /// * AVAILABLE - The node has been created and can participate in the network.
        ///
        /// * UNHEALTHY - The node is impaired and might not function as expected. Amazon Managed Blockchain automatically finds nodes in this state and tries to recover them. If a node is recoverable, it returns to AVAILABLE. Otherwise, it moves to FAILED status.
        ///
        /// * CREATE_FAILED - The AWS account attempted to create a node and creation failed.
        ///
        /// * UPDATING - The node is in the process of being updated.
        ///
        /// * DELETING - The node is in the process of being deleted.
        ///
        /// * DELETED - The node can no longer participate on the network.
        ///
        /// * FAILED - The node is no longer functional, cannot be recovered, and must be deleted.
        ///
        /// * INACCESSIBLE_ENCRYPTION_KEY - The node is impaired and might not function as expected because it cannot access the specified customer managed key in AWS KMS for encryption at rest. Either the KMS key was disabled or deleted, or the grants on the key were revoked. The effect of disabling or deleting a key, or revoking a grant is not immediate. The node resource might take some time to find that the key is inaccessible. When a resource is in this state, we recommend deleting and recreating the resource.
        public var status: ManagedBlockchainClientTypes.NodeStatus?
        /// Tags assigned to the node. Each tag consists of a key and optional value. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var tags: [Swift.String:Swift.String]?

        public init (
            arn: Swift.String? = nil,
            availabilityZone: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            frameworkAttributes: ManagedBlockchainClientTypes.NodeFrameworkAttributes? = nil,
            id: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil,
            logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration? = nil,
            memberId: Swift.String? = nil,
            networkId: Swift.String? = nil,
            stateDB: ManagedBlockchainClientTypes.StateDBType? = nil,
            status: ManagedBlockchainClientTypes.NodeStatus? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.arn = arn
            self.availabilityZone = availabilityZone
            self.creationDate = creationDate
            self.frameworkAttributes = frameworkAttributes
            self.id = id
            self.instanceType = instanceType
            self.kmsKeyArn = kmsKeyArn
            self.logPublishingConfiguration = logPublishingConfiguration
            self.memberId = memberId
            self.networkId = networkId
            self.stateDB = stateDB
            self.status = status
            self.tags = tags
        }
    }

}

extension ManagedBlockchainClientTypes.NodeConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case instanceType = "InstanceType"
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case stateDB = "StateDB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let stateDB = stateDB {
            try encodeContainer.encode(stateDB.rawValue, forKey: .stateDB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NodeLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
        let stateDBDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.StateDBType.self, forKey: .stateDB)
        stateDB = stateDBDecoded
    }
}

extension ManagedBlockchainClientTypes.NodeConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeConfiguration(availabilityZone: \(Swift.String(describing: availabilityZone)), instanceType: \(Swift.String(describing: instanceType)), logPublishingConfiguration: \(Swift.String(describing: logPublishingConfiguration)), stateDB: \(Swift.String(describing: stateDB)))"}
}

extension ManagedBlockchainClientTypes {
    /// Configuration properties of a node.
    public struct NodeConfiguration: Swift.Equatable {
        /// The Availability Zone in which the node exists. Required for Ethereum nodes.
        public var availabilityZone: Swift.String?
        /// The Amazon Managed Blockchain instance type for the node.
        /// This member is required.
        public var instanceType: Swift.String?
        /// Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.
        public var logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration?
        /// The state database that the node uses. Values are LevelDB or CouchDB. When using an Amazon Managed Blockchain network with Hyperledger Fabric version 1.4 or later, the default is CouchDB. Applies only to Hyperledger Fabric.
        public var stateDB: ManagedBlockchainClientTypes.StateDBType?

        public init (
            availabilityZone: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration? = nil,
            stateDB: ManagedBlockchainClientTypes.StateDBType? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.logPublishingConfiguration = logPublishingConfiguration
            self.stateDB = stateDB
        }
    }

}

extension ManagedBlockchainClientTypes.NodeEthereumAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpEndpoint = "HttpEndpoint"
        case webSocketEndpoint = "WebSocketEndpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let httpEndpoint = httpEndpoint {
            try encodeContainer.encode(httpEndpoint, forKey: .httpEndpoint)
        }
        if let webSocketEndpoint = webSocketEndpoint {
            try encodeContainer.encode(webSocketEndpoint, forKey: .webSocketEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .httpEndpoint)
        httpEndpoint = httpEndpointDecoded
        let webSocketEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webSocketEndpoint)
        webSocketEndpoint = webSocketEndpointDecoded
    }
}

extension ManagedBlockchainClientTypes.NodeEthereumAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeEthereumAttributes(httpEndpoint: \(Swift.String(describing: httpEndpoint)), webSocketEndpoint: \(Swift.String(describing: webSocketEndpoint)))"}
}

extension ManagedBlockchainClientTypes {
    /// Attributes of an Ethereum node.
    public struct NodeEthereumAttributes: Swift.Equatable {
        /// The endpoint on which the Ethereum node listens to run Ethereum JSON-RPC methods over HTTP connections from a client. Use this endpoint in client code for smart contracts when using an HTTP connection. Connections to this endpoint are authenticated using [Signature Version 4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).
        public var httpEndpoint: Swift.String?
        /// The endpoint on which the Ethereum node listens to run Ethereum JSON-RPC methods over WebSockets connections from a client. Use this endpoint in client code for smart contracts when using a WebSockets connection. Connections to this endpoint are authenticated using [Signature Version 4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).
        public var webSocketEndpoint: Swift.String?

        public init (
            httpEndpoint: Swift.String? = nil,
            webSocketEndpoint: Swift.String? = nil
        )
        {
            self.httpEndpoint = httpEndpoint
            self.webSocketEndpoint = webSocketEndpoint
        }
    }

}

extension ManagedBlockchainClientTypes.NodeFabricAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case peerEndpoint = "PeerEndpoint"
        case peerEventEndpoint = "PeerEventEndpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let peerEndpoint = peerEndpoint {
            try encodeContainer.encode(peerEndpoint, forKey: .peerEndpoint)
        }
        if let peerEventEndpoint = peerEventEndpoint {
            try encodeContainer.encode(peerEventEndpoint, forKey: .peerEventEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let peerEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerEndpoint)
        peerEndpoint = peerEndpointDecoded
        let peerEventEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerEventEndpoint)
        peerEventEndpoint = peerEventEndpointDecoded
    }
}

extension ManagedBlockchainClientTypes.NodeFabricAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeFabricAttributes(peerEndpoint: \(Swift.String(describing: peerEndpoint)), peerEventEndpoint: \(Swift.String(describing: peerEventEndpoint)))"}
}

extension ManagedBlockchainClientTypes {
    /// Attributes of Hyperledger Fabric for a peer node on a Hyperledger Fabric network on Managed Blockchain.
    public struct NodeFabricAttributes: Swift.Equatable {
        /// The endpoint that identifies the peer node for all services except peer channel-based event services.
        public var peerEndpoint: Swift.String?
        /// The endpoint that identifies the peer node for peer channel-based event services.
        public var peerEventEndpoint: Swift.String?

        public init (
            peerEndpoint: Swift.String? = nil,
            peerEventEndpoint: Swift.String? = nil
        )
        {
            self.peerEndpoint = peerEndpoint
            self.peerEventEndpoint = peerEventEndpoint
        }
    }

}

extension ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case chaincodeLogs = "ChaincodeLogs"
        case peerLogs = "PeerLogs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let chaincodeLogs = chaincodeLogs {
            try encodeContainer.encode(chaincodeLogs, forKey: .chaincodeLogs)
        }
        if let peerLogs = peerLogs {
            try encodeContainer.encode(peerLogs, forKey: .peerLogs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let chaincodeLogsDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.LogConfigurations.self, forKey: .chaincodeLogs)
        chaincodeLogs = chaincodeLogsDecoded
        let peerLogsDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.LogConfigurations.self, forKey: .peerLogs)
        peerLogs = peerLogsDecoded
    }
}

extension ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeFabricLogPublishingConfiguration(chaincodeLogs: \(Swift.String(describing: chaincodeLogs)), peerLogs: \(Swift.String(describing: peerLogs)))"}
}

extension ManagedBlockchainClientTypes {
    /// Configuration properties for logging events associated with a peer node owned by a member in a Managed Blockchain network.
    public struct NodeFabricLogPublishingConfiguration: Swift.Equatable {
        /// Configuration properties for logging events associated with chaincode execution on a peer node. Chaincode logs contain the results of instantiating, invoking, and querying the chaincode. A peer can run multiple instances of chaincode. When enabled, a log stream is created for all chaincodes, with an individual log stream for each chaincode.
        public var chaincodeLogs: ManagedBlockchainClientTypes.LogConfigurations?
        /// Configuration properties for a peer node log. Peer node logs contain messages generated when your client submits transaction proposals to peer nodes, requests to join channels, enrolls an admin peer, and lists the chaincode instances on a peer node.
        public var peerLogs: ManagedBlockchainClientTypes.LogConfigurations?

        public init (
            chaincodeLogs: ManagedBlockchainClientTypes.LogConfigurations? = nil,
            peerLogs: ManagedBlockchainClientTypes.LogConfigurations? = nil
        )
        {
            self.chaincodeLogs = chaincodeLogs
            self.peerLogs = peerLogs
        }
    }

}

extension ManagedBlockchainClientTypes.NodeFrameworkAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ethereum = "Ethereum"
        case fabric = "Fabric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ethereum = ethereum {
            try encodeContainer.encode(ethereum, forKey: .ethereum)
        }
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NodeFabricAttributes.self, forKey: .fabric)
        fabric = fabricDecoded
        let ethereumDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NodeEthereumAttributes.self, forKey: .ethereum)
        ethereum = ethereumDecoded
    }
}

extension ManagedBlockchainClientTypes.NodeFrameworkAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeFrameworkAttributes(ethereum: \(Swift.String(describing: ethereum)), fabric: \(Swift.String(describing: fabric)))"}
}

extension ManagedBlockchainClientTypes {
    /// Attributes relevant to a node on a Managed Blockchain network for the blockchain framework that the network uses.
    public struct NodeFrameworkAttributes: Swift.Equatable {
        /// Attributes of Ethereum for a node on a Managed Blockchain network that uses Ethereum.
        public var ethereum: ManagedBlockchainClientTypes.NodeEthereumAttributes?
        /// Attributes of Hyperledger Fabric for a peer node on a Managed Blockchain network that uses Hyperledger Fabric.
        public var fabric: ManagedBlockchainClientTypes.NodeFabricAttributes?

        public init (
            ethereum: ManagedBlockchainClientTypes.NodeEthereumAttributes? = nil,
            fabric: ManagedBlockchainClientTypes.NodeFabricAttributes? = nil
        )
        {
            self.ethereum = ethereum
            self.fabric = fabric
        }
    }

}

extension ManagedBlockchainClientTypes.NodeLogPublishingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fabric = "Fabric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration.self, forKey: .fabric)
        fabric = fabricDecoded
    }
}

extension ManagedBlockchainClientTypes.NodeLogPublishingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeLogPublishingConfiguration(fabric: \(Swift.String(describing: fabric)))"}
}

extension ManagedBlockchainClientTypes {
    /// Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.
    public struct NodeLogPublishingConfiguration: Swift.Equatable {
        /// Configuration properties for logging events associated with a node that is owned by a member of a Managed Blockchain network using the Hyperledger Fabric framework.
        public var fabric: ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration?

        public init (
            fabric: ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration? = nil
        )
        {
            self.fabric = fabric
        }
    }

}

extension ManagedBlockchainClientTypes {
    public enum NodeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case createFailed
        case creating
        case deleted
        case deleting
        case failed
        case inaccessibleEncryptionKey
        case unhealthy
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeStatus] {
            return [
                .available,
                .createFailed,
                .creating,
                .deleted,
                .deleting,
                .failed,
                .inaccessibleEncryptionKey,
                .unhealthy,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .inaccessibleEncryptionKey: return "INACCESSIBLE_ENCRYPTION_KEY"
            case .unhealthy: return "UNHEALTHY"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NodeStatus(rawValue: rawValue) ?? NodeStatus.sdkUnknown(rawValue)
        }
    }
}

extension ManagedBlockchainClientTypes.NodeSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case availabilityZone = "AvailabilityZone"
        case creationDate = "CreationDate"
        case id = "Id"
        case instanceType = "InstanceType"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NodeStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension ManagedBlockchainClientTypes.NodeSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeSummary(arn: \(Swift.String(describing: arn)), availabilityZone: \(Swift.String(describing: availabilityZone)), creationDate: \(Swift.String(describing: creationDate)), id: \(Swift.String(describing: id)), instanceType: \(Swift.String(describing: instanceType)), status: \(Swift.String(describing: status)))"}
}

extension ManagedBlockchainClientTypes {
    /// A summary of configuration properties for a node.
    public struct NodeSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the node. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
        public var arn: Swift.String?
        /// The Availability Zone in which the node exists.
        public var availabilityZone: Swift.String?
        /// The date and time that the node was created.
        public var creationDate: ClientRuntime.Date?
        /// The unique identifier of the node.
        public var id: Swift.String?
        /// The EC2 instance type for the node.
        public var instanceType: Swift.String?
        /// The status of the node.
        public var status: ManagedBlockchainClientTypes.NodeStatus?

        public init (
            arn: Swift.String? = nil,
            availabilityZone: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.NodeStatus? = nil
        )
        {
            self.arn = arn
            self.availabilityZone = availabilityZone
            self.creationDate = creationDate
            self.id = id
            self.instanceType = instanceType
            self.status = status
        }
    }

}

extension ManagedBlockchainClientTypes.Proposal: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case expirationDate = "ExpirationDate"
        case networkId = "NetworkId"
        case noVoteCount = "NoVoteCount"
        case outstandingVoteCount = "OutstandingVoteCount"
        case proposalId = "ProposalId"
        case proposedByMemberId = "ProposedByMemberId"
        case proposedByMemberName = "ProposedByMemberName"
        case status = "Status"
        case tags = "Tags"
        case yesVoteCount = "YesVoteCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            try encodeContainer.encode(actions, forKey: .actions)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let networkId = networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let noVoteCount = noVoteCount {
            try encodeContainer.encode(noVoteCount, forKey: .noVoteCount)
        }
        if let outstandingVoteCount = outstandingVoteCount {
            try encodeContainer.encode(outstandingVoteCount, forKey: .outstandingVoteCount)
        }
        if let proposalId = proposalId {
            try encodeContainer.encode(proposalId, forKey: .proposalId)
        }
        if let proposedByMemberId = proposedByMemberId {
            try encodeContainer.encode(proposedByMemberId, forKey: .proposedByMemberId)
        }
        if let proposedByMemberName = proposedByMemberName {
            try encodeContainer.encode(proposedByMemberName, forKey: .proposedByMemberName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let yesVoteCount = yesVoteCount {
            try encodeContainer.encode(yesVoteCount, forKey: .yesVoteCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
        let networkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let actionsDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.ProposalActions.self, forKey: .actions)
        actions = actionsDecoded
        let proposedByMemberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposedByMemberId)
        proposedByMemberId = proposedByMemberIdDecoded
        let proposedByMemberNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposedByMemberName)
        proposedByMemberName = proposedByMemberNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.ProposalStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let yesVoteCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .yesVoteCount)
        yesVoteCount = yesVoteCountDecoded
        let noVoteCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .noVoteCount)
        noVoteCount = noVoteCountDecoded
        let outstandingVoteCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .outstandingVoteCount)
        outstandingVoteCount = outstandingVoteCountDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension ManagedBlockchainClientTypes.Proposal: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Proposal(actions: \(Swift.String(describing: actions)), arn: \(Swift.String(describing: arn)), creationDate: \(Swift.String(describing: creationDate)), description: \(Swift.String(describing: description)), expirationDate: \(Swift.String(describing: expirationDate)), networkId: \(Swift.String(describing: networkId)), noVoteCount: \(Swift.String(describing: noVoteCount)), outstandingVoteCount: \(Swift.String(describing: outstandingVoteCount)), proposalId: \(Swift.String(describing: proposalId)), proposedByMemberId: \(Swift.String(describing: proposedByMemberId)), proposedByMemberName: \(Swift.String(describing: proposedByMemberName)), status: \(Swift.String(describing: status)), tags: \(Swift.String(describing: tags)), yesVoteCount: \(Swift.String(describing: yesVoteCount)))"}
}

extension ManagedBlockchainClientTypes {
    /// Properties of a proposal on a Managed Blockchain network. Applies only to Hyperledger Fabric.
    public struct Proposal: Swift.Equatable {
        /// The actions to perform on the network if the proposal is APPROVED.
        public var actions: ManagedBlockchainClientTypes.ProposalActions?
        /// The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
        public var arn: Swift.String?
        /// The date and time that the proposal was created.
        public var creationDate: ClientRuntime.Date?
        /// The description of the proposal.
        public var description: Swift.String?
        /// The date and time that the proposal expires. This is the CreationDate plus the ProposalDurationInHours that is specified in the ProposalThresholdPolicy. After this date and time, if members have not cast enough votes to determine the outcome according to the voting policy, the proposal is EXPIRED and Actions are not carried out.
        public var expirationDate: ClientRuntime.Date?
        /// The unique identifier of the network for which the proposal is made.
        public var networkId: Swift.String?
        /// The current total of NO votes cast on the proposal by members.
        public var noVoteCount: Swift.Int?
        /// The number of votes remaining to be cast on the proposal by members. In other words, the number of members minus the sum of YES votes and NO votes.
        public var outstandingVoteCount: Swift.Int?
        /// The unique identifier of the proposal.
        public var proposalId: Swift.String?
        /// The unique identifier of the member that created the proposal.
        public var proposedByMemberId: Swift.String?
        /// The name of the member that created the proposal.
        public var proposedByMemberName: Swift.String?
        /// The status of the proposal. Values are as follows:
        ///
        /// * IN_PROGRESS - The proposal is active and open for member voting.
        ///
        /// * APPROVED - The proposal was approved with sufficient YES votes among members according to the VotingPolicy specified for the Network. The specified proposal actions are carried out.
        ///
        /// * REJECTED - The proposal was rejected with insufficient YES votes among members according to the VotingPolicy specified for the Network. The specified ProposalActions are not carried out.
        ///
        /// * EXPIRED - Members did not cast the number of votes required to determine the proposal outcome before the proposal expired. The specified ProposalActions are not carried out.
        ///
        /// * ACTION_FAILED - One or more of the specified ProposalActions in a proposal that was approved could not be completed because of an error. The ACTION_FAILED status occurs even if only one ProposalAction fails and other actions are successful.
        public var status: ManagedBlockchainClientTypes.ProposalStatus?
        /// Tags assigned to the proposal. Each tag consists of a key and optional value. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var tags: [Swift.String:Swift.String]?
        /// The current total of YES votes cast on the proposal by members.
        public var yesVoteCount: Swift.Int?

        public init (
            actions: ManagedBlockchainClientTypes.ProposalActions? = nil,
            arn: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            expirationDate: ClientRuntime.Date? = nil,
            networkId: Swift.String? = nil,
            noVoteCount: Swift.Int? = nil,
            outstandingVoteCount: Swift.Int? = nil,
            proposalId: Swift.String? = nil,
            proposedByMemberId: Swift.String? = nil,
            proposedByMemberName: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.ProposalStatus? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            yesVoteCount: Swift.Int? = nil
        )
        {
            self.actions = actions
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.expirationDate = expirationDate
            self.networkId = networkId
            self.noVoteCount = noVoteCount
            self.outstandingVoteCount = outstandingVoteCount
            self.proposalId = proposalId
            self.proposedByMemberId = proposedByMemberId
            self.proposedByMemberName = proposedByMemberName
            self.status = status
            self.tags = tags
            self.yesVoteCount = yesVoteCount
        }
    }

}

extension ManagedBlockchainClientTypes.ProposalActions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invitations = "Invitations"
        case removals = "Removals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invitations = invitations {
            var invitationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .invitations)
            for inviteactionlist0 in invitations {
                try invitationsContainer.encode(inviteactionlist0)
            }
        }
        if let removals = removals {
            var removalsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removals)
            for removeactionlist0 in removals {
                try removalsContainer.encode(removeactionlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invitationsContainer = try containerValues.decodeIfPresent([ManagedBlockchainClientTypes.InviteAction?].self, forKey: .invitations)
        var invitationsDecoded0:[ManagedBlockchainClientTypes.InviteAction]? = nil
        if let invitationsContainer = invitationsContainer {
            invitationsDecoded0 = [ManagedBlockchainClientTypes.InviteAction]()
            for structure0 in invitationsContainer {
                if let structure0 = structure0 {
                    invitationsDecoded0?.append(structure0)
                }
            }
        }
        invitations = invitationsDecoded0
        let removalsContainer = try containerValues.decodeIfPresent([ManagedBlockchainClientTypes.RemoveAction?].self, forKey: .removals)
        var removalsDecoded0:[ManagedBlockchainClientTypes.RemoveAction]? = nil
        if let removalsContainer = removalsContainer {
            removalsDecoded0 = [ManagedBlockchainClientTypes.RemoveAction]()
            for structure0 in removalsContainer {
                if let structure0 = structure0 {
                    removalsDecoded0?.append(structure0)
                }
            }
        }
        removals = removalsDecoded0
    }
}

extension ManagedBlockchainClientTypes.ProposalActions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProposalActions(invitations: \(Swift.String(describing: invitations)), removals: \(Swift.String(describing: removals)))"}
}

extension ManagedBlockchainClientTypes {
    /// The actions to carry out if a proposal is APPROVED. Applies only to Hyperledger Fabric.
    public struct ProposalActions: Swift.Equatable {
        /// The actions to perform for an APPROVED proposal to invite an AWS account to create a member and join the network.
        public var invitations: [ManagedBlockchainClientTypes.InviteAction]?
        /// The actions to perform for an APPROVED proposal to remove a member from the network, which deletes the member and all associated member resources from the network.
        public var removals: [ManagedBlockchainClientTypes.RemoveAction]?

        public init (
            invitations: [ManagedBlockchainClientTypes.InviteAction]? = nil,
            removals: [ManagedBlockchainClientTypes.RemoveAction]? = nil
        )
        {
            self.invitations = invitations
            self.removals = removals
        }
    }

}

extension ManagedBlockchainClientTypes {
    public enum ProposalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case actionFailed
        case approved
        case expired
        case inProgress
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [ProposalStatus] {
            return [
                .actionFailed,
                .approved,
                .expired,
                .inProgress,
                .rejected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .actionFailed: return "ACTION_FAILED"
            case .approved: return "APPROVED"
            case .expired: return "EXPIRED"
            case .inProgress: return "IN_PROGRESS"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProposalStatus(rawValue: rawValue) ?? ProposalStatus.sdkUnknown(rawValue)
        }
    }
}

extension ManagedBlockchainClientTypes.ProposalSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case expirationDate = "ExpirationDate"
        case proposalId = "ProposalId"
        case proposedByMemberId = "ProposedByMemberId"
        case proposedByMemberName = "ProposedByMemberName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let proposalId = proposalId {
            try encodeContainer.encode(proposalId, forKey: .proposalId)
        }
        if let proposedByMemberId = proposedByMemberId {
            try encodeContainer.encode(proposedByMemberId, forKey: .proposedByMemberId)
        }
        if let proposedByMemberName = proposedByMemberName {
            try encodeContainer.encode(proposedByMemberName, forKey: .proposedByMemberName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let proposedByMemberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposedByMemberId)
        proposedByMemberId = proposedByMemberIdDecoded
        let proposedByMemberNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposedByMemberName)
        proposedByMemberName = proposedByMemberNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.ProposalStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension ManagedBlockchainClientTypes.ProposalSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProposalSummary(arn: \(Swift.String(describing: arn)), creationDate: \(Swift.String(describing: creationDate)), description: \(Swift.String(describing: description)), expirationDate: \(Swift.String(describing: expirationDate)), proposalId: \(Swift.String(describing: proposalId)), proposedByMemberId: \(Swift.String(describing: proposedByMemberId)), proposedByMemberName: \(Swift.String(describing: proposedByMemberName)), status: \(Swift.String(describing: status)))"}
}

extension ManagedBlockchainClientTypes {
    /// Properties of a proposal. Applies only to Hyperledger Fabric.
    public struct ProposalSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
        public var arn: Swift.String?
        /// The date and time that the proposal was created.
        public var creationDate: ClientRuntime.Date?
        /// The description of the proposal.
        public var description: Swift.String?
        /// The date and time that the proposal expires. This is the CreationDate plus the ProposalDurationInHours that is specified in the ProposalThresholdPolicy. After this date and time, if members have not cast enough votes to determine the outcome according to the voting policy, the proposal is EXPIRED and Actions are not carried out.
        public var expirationDate: ClientRuntime.Date?
        /// The unique identifier of the proposal.
        public var proposalId: Swift.String?
        /// The unique identifier of the member that created the proposal.
        public var proposedByMemberId: Swift.String?
        /// The name of the member that created the proposal.
        public var proposedByMemberName: Swift.String?
        /// The status of the proposal. Values are as follows:
        ///
        /// * IN_PROGRESS - The proposal is active and open for member voting.
        ///
        /// * APPROVED - The proposal was approved with sufficient YES votes among members according to the VotingPolicy specified for the Network. The specified proposal actions are carried out.
        ///
        /// * REJECTED - The proposal was rejected with insufficient YES votes among members according to the VotingPolicy specified for the Network. The specified ProposalActions are not carried out.
        ///
        /// * EXPIRED - Members did not cast the number of votes required to determine the proposal outcome before the proposal expired. The specified ProposalActions are not carried out.
        ///
        /// * ACTION_FAILED - One or more of the specified ProposalActions in a proposal that was approved could not be completed because of an error.
        public var status: ManagedBlockchainClientTypes.ProposalStatus?

        public init (
            arn: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            expirationDate: ClientRuntime.Date? = nil,
            proposalId: Swift.String? = nil,
            proposedByMemberId: Swift.String? = nil,
            proposedByMemberName: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.ProposalStatus? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.expirationDate = expirationDate
            self.proposalId = proposalId
            self.proposedByMemberId = proposedByMemberId
            self.proposedByMemberName = proposedByMemberName
            self.status = status
        }
    }

}

extension RejectInvitationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RejectInvitationInput(invitationId: \(Swift.String(describing: invitationId)))"}
}

extension RejectInvitationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct RejectInvitationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectInvitationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RejectInvitationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RejectInvitationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RejectInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectInvitationOutputError>
}

public struct RejectInvitationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectInvitationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RejectInvitationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RejectInvitationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RejectInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectInvitationOutputError>
}

public struct RejectInvitationInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectInvitationInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: RejectInvitationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = RejectInvitationInput
    public typealias MOutput = ClientRuntime.OperationOutput<RejectInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectInvitationOutputError>
}

public struct RejectInvitationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectInvitationInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: RejectInvitationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let invitationId = input.invitationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("invitationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/invitations/\(invitationId.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = RejectInvitationInput
    public typealias MOutput = ClientRuntime.OperationOutput<RejectInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectInvitationOutputError>
}

public struct RejectInvitationInput: Swift.Equatable {
    /// The unique identifier of the invitation to reject.
    /// This member is required.
    public var invitationId: Swift.String?

    public init (
        invitationId: Swift.String? = nil
    )
    {
        self.invitationId = invitationId
    }
}

struct RejectInvitationInputBody: Swift.Equatable {
}

extension RejectInvitationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension RejectInvitationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RejectInvitationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IllegalActionException" : self = .illegalActionException(try IllegalActionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RejectInvitationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case illegalActionException(IllegalActionException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RejectInvitationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RejectInvitationOutputResponse()"}
}

extension RejectInvitationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RejectInvitationOutputResponse: Swift.Equatable {

    public init() {}
}

struct RejectInvitationOutputResponseBody: Swift.Equatable {
}

extension RejectInvitationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ManagedBlockchainClientTypes.RemoveAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case memberId = "MemberId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberId)
        memberId = memberIdDecoded
    }
}

extension ManagedBlockchainClientTypes.RemoveAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveAction(memberId: \(Swift.String(describing: memberId)))"}
}

extension ManagedBlockchainClientTypes {
    /// An action to remove a member from a Managed Blockchain network as the result of a removal proposal that is APPROVED. The member and all associated resources are deleted from the network. Applies only to Hyperledger Fabric.
    public struct RemoveAction: Swift.Equatable {
        /// The unique identifier of the member to remove.
        /// This member is required.
        public var memberId: Swift.String?

        public init (
            memberId: Swift.String? = nil
        )
        {
            self.memberId = memberId
        }
    }

}

extension ResourceAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceAlreadyExistsException(message: \(Swift.String(describing: message)))"}
}

extension ResourceAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource request is issued for a resource that already exists.
public struct ResourceAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceAlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceLimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension ResourceLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum number of resources of that type already exist. Ensure the resources requested are within the boundaries of the service edition and your account limits.
public struct ResourceLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)), resourceName: \(Swift.String(describing: resourceName)))"}
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceName = output.resourceName
        } else {
            self.message = nil
            self.resourceName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A requested resource does not exist. It may have been deleted or referenced inaccurately.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// A requested resource does not exist. It may have been deleted or referenced inaccurately.
    public var resourceName: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceName = resourceName
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let resourceName: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceName = "ResourceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension ResourceNotReadyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotReadyException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotReadyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotReadyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested resource exists but is not in a status that can complete the operation.
public struct ResourceNotReadyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotReadyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotReadyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ManagedBlockchainClientTypes {
    public enum StateDBType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case couchdb
        case leveldb
        case sdkUnknown(Swift.String)

        public static var allCases: [StateDBType] {
            return [
                .couchdb,
                .leveldb,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .couchdb: return "CouchDB"
            case .leveldb: return "LevelDB"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StateDBType(rawValue: rawValue) ?? StateDBType.sdkUnknown(rawValue)
        }
    }
}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, inputtagmap0) in tags {
                try tagsContainer.encode(inputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: TagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = TagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: TagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let resourceArn = input.resourceArn else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("resourceArn is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/tags/\(resourceArn.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = TagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to assign to the specified resource. Tag values can be empty, for example, "MyTagKey" : "". You can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ManagedBlockchainClientTypes {
    public enum ThresholdComparator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case greaterThan
        case greaterThanOrEqualTo
        case sdkUnknown(Swift.String)

        public static var allCases: [ThresholdComparator] {
            return [
                .greaterThan,
                .greaterThanOrEqualTo,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .greaterThan: return "GREATER_THAN"
            case .greaterThanOrEqualTo: return "GREATER_THAN_OR_EQUAL_TO"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ThresholdComparator(rawValue: rawValue) ?? ThresholdComparator.sdkUnknown(rawValue)
        }
    }
}

extension ThrottlingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThrottlingException()"}
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request or operation could not be performed because a service is throttling requests. The most common source of throttling errors is launching EC2 instances such that your service limit for EC2 instances is exceeded. Request a limit increase or delete unused resources if possible.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client

    public init() {}
}

extension TooManyTagsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyTagsException(message: \(Swift.String(describing: message)), resourceName: \(Swift.String(describing: resourceName)))"}
}

extension TooManyTagsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TooManyTagsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceName = output.resourceName
        } else {
            self.message = nil
            self.resourceName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct TooManyTagsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    ///
    public var resourceName: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceName = resourceName
    }
}

struct TooManyTagsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let resourceName: Swift.String?
}

extension TooManyTagsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceName = "ResourceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let tagKeys = input.operationInput.tagKeys {
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UntagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UntagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UntagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let resourceArn = input.resourceArn else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("resourceArn is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/tags/\(resourceArn.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UntagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag keys.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateMemberInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMemberInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMemberInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMemberInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMemberOutputError>
}

extension UpdateMemberInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateMemberInput(logPublishingConfiguration: \(Swift.String(describing: logPublishingConfiguration)), memberId: \(Swift.String(describing: memberId)), networkId: \(Swift.String(describing: networkId)))"}
}

extension UpdateMemberInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logPublishingConfiguration = "LogPublishingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
    }
}

public struct UpdateMemberInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMemberInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMemberInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMemberInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMemberOutputError>
}

public struct UpdateMemberInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMemberInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMemberInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMemberInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMemberOutputError>
}

public struct UpdateMemberInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMemberInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateMemberInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateMemberInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMemberOutputError>
}

public struct UpdateMemberInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMemberInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateMemberInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        guard let memberId = input.memberId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("memberId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/members/\(memberId.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateMemberInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMemberOutputError>
}

public struct UpdateMemberInput: Swift.Equatable {
    /// Configuration properties for publishing to Amazon CloudWatch Logs.
    public var logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration?
    /// The unique identifier of the member.
    /// This member is required.
    public var memberId: Swift.String?
    /// The unique identifier of the Managed Blockchain network to which the member belongs.
    /// This member is required.
    public var networkId: Swift.String?

    public init (
        logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration? = nil,
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil
    )
    {
        self.logPublishingConfiguration = logPublishingConfiguration
        self.memberId = memberId
        self.networkId = networkId
    }
}

struct UpdateMemberInputBody: Swift.Equatable {
    public let logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration?
}

extension UpdateMemberInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logPublishingConfiguration = "LogPublishingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.MemberLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
    }
}

extension UpdateMemberOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMemberOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMemberOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMemberOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateMemberOutputResponse()"}
}

extension UpdateMemberOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateMemberOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateMemberOutputResponseBody: Swift.Equatable {
}

extension UpdateMemberOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateNodeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateNodeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateNodeOutputError>
}

extension UpdateNodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateNodeInput(logPublishingConfiguration: \(Swift.String(describing: logPublishingConfiguration)), memberId: \(Swift.String(describing: memberId)), networkId: \(Swift.String(describing: networkId)), nodeId: \(Swift.String(describing: nodeId)))"}
}

extension UpdateNodeInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case memberId = "MemberId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
    }
}

public struct UpdateNodeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateNodeOutputError>
}

public struct UpdateNodeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateNodeOutputError>
}

public struct UpdateNodeInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateNodeInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateNodeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateNodeInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateNodeOutputError>
}

public struct UpdateNodeInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateNodeInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateNodeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        guard let nodeId = input.nodeId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("nodeId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/nodes/\(nodeId.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateNodeInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateNodeOutputError>
}

public struct UpdateNodeInput: Swift.Equatable {
    /// Configuration properties for publishing to Amazon CloudWatch Logs.
    public var logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration?
    /// The unique identifier of the member that owns the node. Applies only to Hyperledger Fabric.
    public var memberId: Swift.String?
    /// The unique identifier of the network that the node is on.
    /// This member is required.
    public var networkId: Swift.String?
    /// The unique identifier of the node.
    /// This member is required.
    public var nodeId: Swift.String?

    public init (
        logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration? = nil,
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nodeId: Swift.String? = nil
    )
    {
        self.logPublishingConfiguration = logPublishingConfiguration
        self.memberId = memberId
        self.networkId = networkId
        self.nodeId = nodeId
    }
}

struct UpdateNodeInputBody: Swift.Equatable {
    public let memberId: Swift.String?
    public let logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration?
}

extension UpdateNodeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case memberId = "MemberId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberId)
        memberId = memberIdDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NodeLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
    }
}

extension UpdateNodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateNodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateNodeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateNodeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateNodeOutputResponse()"}
}

extension UpdateNodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateNodeOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateNodeOutputResponseBody: Swift.Equatable {
}

extension UpdateNodeOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct VoteOnProposalInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VoteOnProposalInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VoteOnProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VoteOnProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VoteOnProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VoteOnProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VoteOnProposalOutputError>
}

extension VoteOnProposalInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VoteOnProposalInput(networkId: \(Swift.String(describing: networkId)), proposalId: \(Swift.String(describing: proposalId)), vote: \(Swift.String(describing: vote)), voterMemberId: \(Swift.String(describing: voterMemberId)))"}
}

extension VoteOnProposalInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vote = "Vote"
        case voterMemberId = "VoterMemberId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vote = vote {
            try encodeContainer.encode(vote.rawValue, forKey: .vote)
        }
        if let voterMemberId = voterMemberId {
            try encodeContainer.encode(voterMemberId, forKey: .voterMemberId)
        }
    }
}

public struct VoteOnProposalInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VoteOnProposalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VoteOnProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VoteOnProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VoteOnProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VoteOnProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VoteOnProposalOutputError>
}

public struct VoteOnProposalInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VoteOnProposalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VoteOnProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VoteOnProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VoteOnProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VoteOnProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VoteOnProposalOutputError>
}

public struct VoteOnProposalInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VoteOnProposalInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: VoteOnProposalInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VoteOnProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = VoteOnProposalInput
    public typealias MOutput = ClientRuntime.OperationOutput<VoteOnProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VoteOnProposalOutputError>
}

public struct VoteOnProposalInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VoteOnProposalInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: VoteOnProposalInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VoteOnProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let networkId = input.networkId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("networkId is nil and needs a value for the path of this operation"))))
        }
        guard let proposalId = input.proposalId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("proposalId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/networks/\(networkId.urlPercentEncoding())/proposals/\(proposalId.urlPercentEncoding())/votes"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = VoteOnProposalInput
    public typealias MOutput = ClientRuntime.OperationOutput<VoteOnProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VoteOnProposalOutputError>
}

public struct VoteOnProposalInput: Swift.Equatable {
    /// The unique identifier of the network.
    /// This member is required.
    public var networkId: Swift.String?
    /// The unique identifier of the proposal.
    /// This member is required.
    public var proposalId: Swift.String?
    /// The value of the vote.
    /// This member is required.
    public var vote: ManagedBlockchainClientTypes.VoteValue?
    /// The unique identifier of the member casting the vote.
    /// This member is required.
    public var voterMemberId: Swift.String?

    public init (
        networkId: Swift.String? = nil,
        proposalId: Swift.String? = nil,
        vote: ManagedBlockchainClientTypes.VoteValue? = nil,
        voterMemberId: Swift.String? = nil
    )
    {
        self.networkId = networkId
        self.proposalId = proposalId
        self.vote = vote
        self.voterMemberId = voterMemberId
    }
}

struct VoteOnProposalInputBody: Swift.Equatable {
    public let voterMemberId: Swift.String?
    public let vote: ManagedBlockchainClientTypes.VoteValue?
}

extension VoteOnProposalInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vote = "Vote"
        case voterMemberId = "VoterMemberId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voterMemberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .voterMemberId)
        voterMemberId = voterMemberIdDecoded
        let voteDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.VoteValue.self, forKey: .vote)
        vote = voteDecoded
    }
}

extension VoteOnProposalOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension VoteOnProposalOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IllegalActionException" : self = .illegalActionException(try IllegalActionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum VoteOnProposalOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case illegalActionException(IllegalActionException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension VoteOnProposalOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VoteOnProposalOutputResponse()"}
}

extension VoteOnProposalOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct VoteOnProposalOutputResponse: Swift.Equatable {

    public init() {}
}

struct VoteOnProposalOutputResponseBody: Swift.Equatable {
}

extension VoteOnProposalOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ManagedBlockchainClientTypes.VoteSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case memberId = "MemberId"
        case memberName = "MemberName"
        case vote = "Vote"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
        if let memberName = memberName {
            try encodeContainer.encode(memberName, forKey: .memberName)
        }
        if let vote = vote {
            try encodeContainer.encode(vote.rawValue, forKey: .vote)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voteDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.VoteValue.self, forKey: .vote)
        vote = voteDecoded
        let memberNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberName)
        memberName = memberNameDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberId)
        memberId = memberIdDecoded
    }
}

extension ManagedBlockchainClientTypes.VoteSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VoteSummary(memberId: \(Swift.String(describing: memberId)), memberName: \(Swift.String(describing: memberName)), vote: \(Swift.String(describing: vote)))"}
}

extension ManagedBlockchainClientTypes {
    /// Properties of an individual vote that a member cast for a proposal. Applies only to Hyperledger Fabric.
    public struct VoteSummary: Swift.Equatable {
        /// The unique identifier of the member that cast the vote.
        public var memberId: Swift.String?
        /// The name of the member that cast the vote.
        public var memberName: Swift.String?
        /// The vote value, either YES or NO.
        public var vote: ManagedBlockchainClientTypes.VoteValue?

        public init (
            memberId: Swift.String? = nil,
            memberName: Swift.String? = nil,
            vote: ManagedBlockchainClientTypes.VoteValue? = nil
        )
        {
            self.memberId = memberId
            self.memberName = memberName
            self.vote = vote
        }
    }

}

extension ManagedBlockchainClientTypes {
    public enum VoteValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case no
        case yes
        case sdkUnknown(Swift.String)

        public static var allCases: [VoteValue] {
            return [
                .no,
                .yes,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .no: return "NO"
            case .yes: return "YES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VoteValue(rawValue: rawValue) ?? VoteValue.sdkUnknown(rawValue)
        }
    }
}

extension ManagedBlockchainClientTypes.VotingPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approvalThresholdPolicy = "ApprovalThresholdPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalThresholdPolicy = approvalThresholdPolicy {
            try encodeContainer.encode(approvalThresholdPolicy, forKey: .approvalThresholdPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let approvalThresholdPolicyDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.ApprovalThresholdPolicy.self, forKey: .approvalThresholdPolicy)
        approvalThresholdPolicy = approvalThresholdPolicyDecoded
    }
}

extension ManagedBlockchainClientTypes.VotingPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VotingPolicy(approvalThresholdPolicy: \(Swift.String(describing: approvalThresholdPolicy)))"}
}

extension ManagedBlockchainClientTypes {
    /// The voting rules for the network to decide if a proposal is accepted Applies only to Hyperledger Fabric.
    public struct VotingPolicy: Swift.Equatable {
        /// Defines the rules for the network for voting on proposals, such as the percentage of YES votes required for the proposal to be approved and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.
        public var approvalThresholdPolicy: ManagedBlockchainClientTypes.ApprovalThresholdPolicy?

        public init (
            approvalThresholdPolicy: ManagedBlockchainClientTypes.ApprovalThresholdPolicy? = nil
        )
        {
            self.approvalThresholdPolicy = approvalThresholdPolicy
        }
    }

}
