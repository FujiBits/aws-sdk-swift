// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ManagedBlockchainClient {
    /// Creates a member within a Managed Blockchain network.
    ///          Applies only to Hyperledger Fabric.
    func createMember(input: CreateMemberInput) async throws -> CreateMemberOutputResponse
    {
        typealias createMemberContinuation = CheckedContinuation<CreateMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMemberContinuation) in
            createMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new blockchain network using Amazon Managed Blockchain.
    ///          Applies only to Hyperledger Fabric.
    func createNetwork(input: CreateNetworkInput) async throws -> CreateNetworkOutputResponse
    {
        typealias createNetworkContinuation = CheckedContinuation<CreateNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createNetworkContinuation) in
            createNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a node on the specified blockchain network.
    ///          Applies to Hyperledger Fabric and Ethereum.
    func createNode(input: CreateNodeInput) async throws -> CreateNodeOutputResponse
    {
        typealias createNodeContinuation = CheckedContinuation<CreateNodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createNodeContinuation) in
            createNode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a proposal for a change to the network that other members of the network can vote on, for example, a proposal to add a new member to the network. Any member can create a proposal.
    ///          Applies only to Hyperledger Fabric.
    func createProposal(input: CreateProposalInput) async throws -> CreateProposalOutputResponse
    {
        typealias createProposalContinuation = CheckedContinuation<CreateProposalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProposalContinuation) in
            createProposal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a member. Deleting a member removes the member and all associated resources from the network. DeleteMember can only be called for a specified MemberId if the principal performing the action is associated with the AWS account that owns the member. In all other cases, the DeleteMember action is carried out as the result of an approved proposal to remove a member. If MemberId is the last member in a network specified by the last AWS account, the network is deleted also.
    ///          Applies only to Hyperledger Fabric.
    func deleteMember(input: DeleteMemberInput) async throws -> DeleteMemberOutputResponse
    {
        typealias deleteMemberContinuation = CheckedContinuation<DeleteMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMemberContinuation) in
            deleteMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a node that your AWS account owns. All data on the node is lost and cannot be recovered.
    ///          Applies to Hyperledger Fabric and Ethereum.
    func deleteNode(input: DeleteNodeInput) async throws -> DeleteNodeOutputResponse
    {
        typealias deleteNodeContinuation = CheckedContinuation<DeleteNodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteNodeContinuation) in
            deleteNode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns detailed information about a member.
    ///          Applies only to Hyperledger Fabric.
    func getMember(input: GetMemberInput) async throws -> GetMemberOutputResponse
    {
        typealias getMemberContinuation = CheckedContinuation<GetMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMemberContinuation) in
            getMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns detailed information about a network.
    ///          Applies to Hyperledger Fabric and Ethereum.
    func getNetwork(input: GetNetworkInput) async throws -> GetNetworkOutputResponse
    {
        typealias getNetworkContinuation = CheckedContinuation<GetNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNetworkContinuation) in
            getNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns detailed information about a node.
    ///          Applies to Hyperledger Fabric and Ethereum.
    func getNode(input: GetNodeInput) async throws -> GetNodeOutputResponse
    {
        typealias getNodeContinuation = CheckedContinuation<GetNodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNodeContinuation) in
            getNode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns detailed information about a proposal.
    ///          Applies only to Hyperledger Fabric.
    func getProposal(input: GetProposalInput) async throws -> GetProposalOutputResponse
    {
        typealias getProposalContinuation = CheckedContinuation<GetProposalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getProposalContinuation) in
            getProposal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all invitations for the current AWS account.
    ///          Applies only to Hyperledger Fabric.
    func listInvitations(input: ListInvitationsInput) async throws -> ListInvitationsOutputResponse
    {
        typealias listInvitationsContinuation = CheckedContinuation<ListInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInvitationsContinuation) in
            listInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the members in a network and properties of their configurations.
    ///          Applies only to Hyperledger Fabric.
    func listMembers(input: ListMembersInput) async throws -> ListMembersOutputResponse
    {
        typealias listMembersContinuation = CheckedContinuation<ListMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMembersContinuation) in
            listMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the networks in which the current AWS account participates.
    ///          Applies to Hyperledger Fabric and Ethereum.
    func listNetworks(input: ListNetworksInput) async throws -> ListNetworksOutputResponse
    {
        typealias listNetworksContinuation = CheckedContinuation<ListNetworksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNetworksContinuation) in
            listNetworks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the nodes within a network.
    ///          Applies to Hyperledger Fabric and Ethereum.
    func listNodes(input: ListNodesInput) async throws -> ListNodesOutputResponse
    {
        typealias listNodesContinuation = CheckedContinuation<ListNodesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNodesContinuation) in
            listNodes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the list of votes for a specified proposal, including the value of each vote and the unique identifier of the member that cast the vote.
    ///          Applies only to Hyperledger Fabric.
    func listProposalVotes(input: ListProposalVotesInput) async throws -> ListProposalVotesOutputResponse
    {
        typealias listProposalVotesContinuation = CheckedContinuation<ListProposalVotesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProposalVotesContinuation) in
            listProposalVotes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of proposals for the network.
    ///          Applies only to Hyperledger Fabric.
    func listProposals(input: ListProposalsInput) async throws -> ListProposalsOutputResponse
    {
        typealias listProposalsContinuation = CheckedContinuation<ListProposalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProposalsContinuation) in
            listProposals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of tags for the specified resource. Each tag consists of a key and optional value.
    ///          For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Rejects an invitation to join a network. This action can be called by a principal in an AWS account that has received an invitation to create a member and join a network.
    ///          Applies only to Hyperledger Fabric.
    func rejectInvitation(input: RejectInvitationInput) async throws -> RejectInvitationOutputResponse
    {
        typealias rejectInvitationContinuation = CheckedContinuation<RejectInvitationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rejectInvitationContinuation) in
            rejectInvitation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or overwrites the specified tags for the specified Amazon Managed Blockchain resource. Each tag consists of a key and optional value.
    ///          When you specify a tag key that already exists, the tag value is overwritten with the new value. Use UntagResource to remove tag keys.
    ///          A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, your request fails and returns an error.
    ///          For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified tags from the Amazon Managed Blockchain resource.
    ///          For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a member configuration with new parameters.
    ///          Applies only to Hyperledger Fabric.
    func updateMember(input: UpdateMemberInput) async throws -> UpdateMemberOutputResponse
    {
        typealias updateMemberContinuation = CheckedContinuation<UpdateMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMemberContinuation) in
            updateMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a node configuration with new parameters.
    ///          Applies only to Hyperledger Fabric.
    func updateNode(input: UpdateNodeInput) async throws -> UpdateNodeOutputResponse
    {
        typealias updateNodeContinuation = CheckedContinuation<UpdateNodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateNodeContinuation) in
            updateNode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Casts a vote for a specified ProposalId on behalf of a member. The member to vote as, specified by VoterMemberId, must be in the same AWS account as the principal that calls the action.
    ///          Applies only to Hyperledger Fabric.
    func voteOnProposal(input: VoteOnProposalInput) async throws -> VoteOnProposalOutputResponse
    {
        typealias voteOnProposalContinuation = CheckedContinuation<VoteOnProposalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: voteOnProposalContinuation) in
            voteOnProposal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
