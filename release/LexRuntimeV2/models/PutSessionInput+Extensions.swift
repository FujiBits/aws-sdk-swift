// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutSessionInputHeadersMiddleware: Middleware {
    public let id: String = "PutSessionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let responseContentType = input.operationInput.responseContentType {
            input.builder.withHeader(name: "ResponseContentType", value: String(responseContentType))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSessionInput>
    public typealias MOutput = OperationOutput<PutSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSessionOutputError>
}

public struct PutSessionInputQueryItemMiddleware: Middleware {
    public let id: String = "PutSessionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSessionInput>
    public typealias MOutput = OperationOutput<PutSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSessionOutputError>
}

public struct PutSessionInputBodyMiddleware: Middleware {
    public let id: String = "PutSessionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSessionInput>
    public typealias MOutput = OperationOutput<PutSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSessionOutputError>
}

extension PutSessionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case messages
        case requestAttributes
        case sessionState
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messages = messages {
            var messagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .messages)
            for messages0 in messages {
                try messagesContainer.encode(messages0)
            }
        }
        if let requestAttributes = requestAttributes {
            var requestAttributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestAttributes)
            for (dictKey0, stringmap0) in requestAttributes {
                try requestAttributesContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sessionState = sessionState {
            try encodeContainer.encode(sessionState, forKey: .sessionState)
        }
    }
}
