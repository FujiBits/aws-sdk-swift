// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// EC2 Image Builder is a fully managed Amazon Web Services service that makes it easier to automate the creation, management, and deployment of customized, secure, and up-to-date "golden" server images that are pre-installed and pre-configured with software and settings to meet specific IT standards.
public protocol ImagebuilderClientProtocol {
    /// CancelImageCreation cancels the creation of Image. This operation can only be used on images in a non-terminal state.
    func cancelImageCreation(input: CancelImageCreationInput, completion: @escaping (ClientRuntime.SdkResult<CancelImageCreationOutputResponse, CancelImageCreationOutputError>) -> Void)
    /// Creates a new component that can be used to build, validate, test, and assess your image.
    func createComponent(input: CreateComponentInput, completion: @escaping (ClientRuntime.SdkResult<CreateComponentOutputResponse, CreateComponentOutputError>) -> Void)
    /// Creates a new container recipe. Container recipes define how images are configured, tested, and assessed.
    func createContainerRecipe(input: CreateContainerRecipeInput, completion: @escaping (ClientRuntime.SdkResult<CreateContainerRecipeOutputResponse, CreateContainerRecipeOutputError>) -> Void)
    /// Creates a new distribution configuration. Distribution configurations define and configure the outputs of your pipeline.
    func createDistributionConfiguration(input: CreateDistributionConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<CreateDistributionConfigurationOutputResponse, CreateDistributionConfigurationOutputError>) -> Void)
    /// Creates a new image. This request will create a new image along with all of the configured output resources defined in the distribution configuration. You must specify exactly one recipe for your image, using either a ContainerRecipeArn or an ImageRecipeArn.
    func createImage(input: CreateImageInput, completion: @escaping (ClientRuntime.SdkResult<CreateImageOutputResponse, CreateImageOutputError>) -> Void)
    /// Creates a new image pipeline. Image pipelines enable you to automate the creation and distribution of images.
    func createImagePipeline(input: CreateImagePipelineInput, completion: @escaping (ClientRuntime.SdkResult<CreateImagePipelineOutputResponse, CreateImagePipelineOutputError>) -> Void)
    /// Creates a new image recipe. Image recipes define how images are configured, tested, and assessed.
    func createImageRecipe(input: CreateImageRecipeInput, completion: @escaping (ClientRuntime.SdkResult<CreateImageRecipeOutputResponse, CreateImageRecipeOutputError>) -> Void)
    /// Creates a new infrastructure configuration. An infrastructure configuration defines the environment in which your image will be built and tested.
    func createInfrastructureConfiguration(input: CreateInfrastructureConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<CreateInfrastructureConfigurationOutputResponse, CreateInfrastructureConfigurationOutputError>) -> Void)
    /// Deletes a component build version.
    func deleteComponent(input: DeleteComponentInput, completion: @escaping (ClientRuntime.SdkResult<DeleteComponentOutputResponse, DeleteComponentOutputError>) -> Void)
    /// Deletes a container recipe.
    func deleteContainerRecipe(input: DeleteContainerRecipeInput, completion: @escaping (ClientRuntime.SdkResult<DeleteContainerRecipeOutputResponse, DeleteContainerRecipeOutputError>) -> Void)
    /// Deletes a distribution configuration.
    func deleteDistributionConfiguration(input: DeleteDistributionConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<DeleteDistributionConfigurationOutputResponse, DeleteDistributionConfigurationOutputError>) -> Void)
    /// Deletes an Image Builder image resource. This does not delete any EC2 AMIs or ECR container images that are created during the image build process. You must clean those up separately, using the appropriate Amazon EC2 or Amazon ECR console actions, or API or CLI commands.
    ///
    /// * To deregister an EC2 Linux AMI, see [Deregister your Linux AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/deregister-ami.html) in the Amazon EC2 User Guide .
    ///
    /// * To deregister an EC2 Windows AMI, see [Deregister your Windows AMI](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/deregister-ami.html) in the Amazon EC2 Windows Guide .
    ///
    /// * To delete a container image from Amazon ECR, see [Deleting an image](https://docs.aws.amazon.com/AmazonECR/latest/userguide/delete_image.html) in the Amazon ECR User Guide.
    func deleteImage(input: DeleteImageInput, completion: @escaping (ClientRuntime.SdkResult<DeleteImageOutputResponse, DeleteImageOutputError>) -> Void)
    /// Deletes an image pipeline.
    func deleteImagePipeline(input: DeleteImagePipelineInput, completion: @escaping (ClientRuntime.SdkResult<DeleteImagePipelineOutputResponse, DeleteImagePipelineOutputError>) -> Void)
    /// Deletes an image recipe.
    func deleteImageRecipe(input: DeleteImageRecipeInput, completion: @escaping (ClientRuntime.SdkResult<DeleteImageRecipeOutputResponse, DeleteImageRecipeOutputError>) -> Void)
    /// Deletes an infrastructure configuration.
    func deleteInfrastructureConfiguration(input: DeleteInfrastructureConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<DeleteInfrastructureConfigurationOutputResponse, DeleteInfrastructureConfigurationOutputError>) -> Void)
    /// Gets a component object.
    func getComponent(input: GetComponentInput, completion: @escaping (ClientRuntime.SdkResult<GetComponentOutputResponse, GetComponentOutputError>) -> Void)
    /// Gets a component policy.
    func getComponentPolicy(input: GetComponentPolicyInput, completion: @escaping (ClientRuntime.SdkResult<GetComponentPolicyOutputResponse, GetComponentPolicyOutputError>) -> Void)
    /// Retrieves a container recipe.
    func getContainerRecipe(input: GetContainerRecipeInput, completion: @escaping (ClientRuntime.SdkResult<GetContainerRecipeOutputResponse, GetContainerRecipeOutputError>) -> Void)
    /// Retrieves the policy for a container recipe.
    func getContainerRecipePolicy(input: GetContainerRecipePolicyInput, completion: @escaping (ClientRuntime.SdkResult<GetContainerRecipePolicyOutputResponse, GetContainerRecipePolicyOutputError>) -> Void)
    /// Gets a distribution configuration.
    func getDistributionConfiguration(input: GetDistributionConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<GetDistributionConfigurationOutputResponse, GetDistributionConfigurationOutputError>) -> Void)
    /// Gets an image.
    func getImage(input: GetImageInput, completion: @escaping (ClientRuntime.SdkResult<GetImageOutputResponse, GetImageOutputError>) -> Void)
    /// Gets an image pipeline.
    func getImagePipeline(input: GetImagePipelineInput, completion: @escaping (ClientRuntime.SdkResult<GetImagePipelineOutputResponse, GetImagePipelineOutputError>) -> Void)
    /// Gets an image policy.
    func getImagePolicy(input: GetImagePolicyInput, completion: @escaping (ClientRuntime.SdkResult<GetImagePolicyOutputResponse, GetImagePolicyOutputError>) -> Void)
    /// Gets an image recipe.
    func getImageRecipe(input: GetImageRecipeInput, completion: @escaping (ClientRuntime.SdkResult<GetImageRecipeOutputResponse, GetImageRecipeOutputError>) -> Void)
    /// Gets an image recipe policy.
    func getImageRecipePolicy(input: GetImageRecipePolicyInput, completion: @escaping (ClientRuntime.SdkResult<GetImageRecipePolicyOutputResponse, GetImageRecipePolicyOutputError>) -> Void)
    /// Gets an infrastructure configuration.
    func getInfrastructureConfiguration(input: GetInfrastructureConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<GetInfrastructureConfigurationOutputResponse, GetInfrastructureConfigurationOutputError>) -> Void)
    /// Imports a component and transforms its data into a component document.
    func importComponent(input: ImportComponentInput, completion: @escaping (ClientRuntime.SdkResult<ImportComponentOutputResponse, ImportComponentOutputError>) -> Void)
    /// Returns the list of component build versions for the specified semantic version. The semantic version has four nodes: ../. You can assign values for the first three, and can filter on all of them. Filtering: With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.
    func listComponentBuildVersions(input: ListComponentBuildVersionsInput, completion: @escaping (ClientRuntime.SdkResult<ListComponentBuildVersionsOutputResponse, ListComponentBuildVersionsOutputError>) -> Void)
    /// Returns the list of component build versions for the specified semantic version. The semantic version has four nodes: ../. You can assign values for the first three, and can filter on all of them. Filtering: With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.
    func listComponents(input: ListComponentsInput, completion: @escaping (ClientRuntime.SdkResult<ListComponentsOutputResponse, ListComponentsOutputError>) -> Void)
    /// Returns a list of container recipes.
    func listContainerRecipes(input: ListContainerRecipesInput, completion: @escaping (ClientRuntime.SdkResult<ListContainerRecipesOutputResponse, ListContainerRecipesOutputError>) -> Void)
    /// Returns a list of distribution configurations.
    func listDistributionConfigurations(input: ListDistributionConfigurationsInput, completion: @escaping (ClientRuntime.SdkResult<ListDistributionConfigurationsOutputResponse, ListDistributionConfigurationsOutputError>) -> Void)
    /// Returns a list of image build versions.
    func listImageBuildVersions(input: ListImageBuildVersionsInput, completion: @escaping (ClientRuntime.SdkResult<ListImageBuildVersionsOutputResponse, ListImageBuildVersionsOutputError>) -> Void)
    /// List the Packages that are associated with an Image Build Version, as determined by Amazon Web Services Systems Manager Inventory at build time.
    func listImagePackages(input: ListImagePackagesInput, completion: @escaping (ClientRuntime.SdkResult<ListImagePackagesOutputResponse, ListImagePackagesOutputError>) -> Void)
    /// Returns a list of images created by the specified pipeline.
    func listImagePipelineImages(input: ListImagePipelineImagesInput, completion: @escaping (ClientRuntime.SdkResult<ListImagePipelineImagesOutputResponse, ListImagePipelineImagesOutputError>) -> Void)
    /// Returns a list of image pipelines.
    func listImagePipelines(input: ListImagePipelinesInput, completion: @escaping (ClientRuntime.SdkResult<ListImagePipelinesOutputResponse, ListImagePipelinesOutputError>) -> Void)
    /// Returns a list of image recipes.
    func listImageRecipes(input: ListImageRecipesInput, completion: @escaping (ClientRuntime.SdkResult<ListImageRecipesOutputResponse, ListImageRecipesOutputError>) -> Void)
    /// Returns the list of images that you have access to.
    func listImages(input: ListImagesInput, completion: @escaping (ClientRuntime.SdkResult<ListImagesOutputResponse, ListImagesOutputError>) -> Void)
    /// Returns a list of infrastructure configurations.
    func listInfrastructureConfigurations(input: ListInfrastructureConfigurationsInput, completion: @escaping (ClientRuntime.SdkResult<ListInfrastructureConfigurationsOutputResponse, ListInfrastructureConfigurationsOutputError>) -> Void)
    /// Returns the list of tags for the specified resource.
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// Applies a policy to a component. We recommend that you call the RAM API [CreateResourceShare](https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API PutComponentPolicy, you must also call the RAM API [PromoteResourceShareCreatedFromPolicy](https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.
    func putComponentPolicy(input: PutComponentPolicyInput, completion: @escaping (ClientRuntime.SdkResult<PutComponentPolicyOutputResponse, PutComponentPolicyOutputError>) -> Void)
    /// Applies a policy to a container image. We recommend that you call the RAM API CreateResourceShare (https://docs.aws.amazon.com//ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API PutContainerImagePolicy, you must also call the RAM API PromoteResourceShareCreatedFromPolicy (https://docs.aws.amazon.com//ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.
    func putContainerRecipePolicy(input: PutContainerRecipePolicyInput, completion: @escaping (ClientRuntime.SdkResult<PutContainerRecipePolicyOutputResponse, PutContainerRecipePolicyOutputError>) -> Void)
    /// Applies a policy to an image. We recommend that you call the RAM API [CreateResourceShare](https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API PutImagePolicy, you must also call the RAM API [PromoteResourceShareCreatedFromPolicy](https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.
    func putImagePolicy(input: PutImagePolicyInput, completion: @escaping (ClientRuntime.SdkResult<PutImagePolicyOutputResponse, PutImagePolicyOutputError>) -> Void)
    /// Applies a policy to an image recipe. We recommend that you call the RAM API [CreateResourceShare](https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API PutImageRecipePolicy, you must also call the RAM API [PromoteResourceShareCreatedFromPolicy](https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.
    func putImageRecipePolicy(input: PutImageRecipePolicyInput, completion: @escaping (ClientRuntime.SdkResult<PutImageRecipePolicyOutputResponse, PutImageRecipePolicyOutputError>) -> Void)
    /// Manually triggers a pipeline to create an image.
    func startImagePipelineExecution(input: StartImagePipelineExecutionInput, completion: @escaping (ClientRuntime.SdkResult<StartImagePipelineExecutionOutputResponse, StartImagePipelineExecutionOutputError>) -> Void)
    /// Adds a tag to a resource.
    func tagResource(input: TagResourceInput, completion: @escaping (ClientRuntime.SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// Removes a tag from a resource.
    func untagResource(input: UntagResourceInput, completion: @escaping (ClientRuntime.SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// Updates a new distribution configuration. Distribution configurations define and configure the outputs of your pipeline.
    func updateDistributionConfiguration(input: UpdateDistributionConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDistributionConfigurationOutputResponse, UpdateDistributionConfigurationOutputError>) -> Void)
    /// Updates an image pipeline. Image pipelines enable you to automate the creation and distribution of images. UpdateImagePipeline does not support selective updates for the pipeline. You must specify all of the required properties in the update request, not just the properties that have changed.
    func updateImagePipeline(input: UpdateImagePipelineInput, completion: @escaping (ClientRuntime.SdkResult<UpdateImagePipelineOutputResponse, UpdateImagePipelineOutputError>) -> Void)
    /// Updates a new infrastructure configuration. An infrastructure configuration defines the environment in which your image will be built and tested.
    func updateInfrastructureConfiguration(input: UpdateInfrastructureConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<UpdateInfrastructureConfigurationOutputResponse, UpdateInfrastructureConfigurationOutputError>) -> Void)
}

public enum ImagebuilderClientTypes {}
