// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartEngagementInputHeadersMiddleware: Middleware {
    public let id: String = "StartEngagementInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartEngagementInput>,
                  next: H) -> Swift.Result<OperationOutput<StartEngagementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartEngagementInput>
    public typealias MOutput = OperationOutput<StartEngagementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartEngagementOutputError>
}

public struct StartEngagementInputQueryItemMiddleware: Middleware {
    public let id: String = "StartEngagementInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartEngagementInput>,
                  next: H) -> Swift.Result<OperationOutput<StartEngagementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartEngagementInput>
    public typealias MOutput = OperationOutput<StartEngagementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartEngagementOutputError>
}

public struct StartEngagementInputBodyMiddleware: Middleware {
    public let id: String = "StartEngagementInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartEngagementInput>,
                  next: H) -> Swift.Result<OperationOutput<StartEngagementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartEngagementInput>
    public typealias MOutput = OperationOutput<StartEngagementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartEngagementOutputError>
}

extension StartEngagementInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contactId = "ContactId"
        case content = "Content"
        case idempotencyToken = "IdempotencyToken"
        case incidentId = "IncidentId"
        case publicContent = "PublicContent"
        case publicSubject = "PublicSubject"
        case sender = "Sender"
        case subject = "Subject"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactId = contactId {
            try encodeContainer.encode(contactId, forKey: .contactId)
        }
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let incidentId = incidentId {
            try encodeContainer.encode(incidentId, forKey: .incidentId)
        }
        if let publicContent = publicContent {
            try encodeContainer.encode(publicContent, forKey: .publicContent)
        }
        if let publicSubject = publicSubject {
            try encodeContainer.encode(publicSubject, forKey: .publicSubject)
        }
        if let sender = sender {
            try encodeContainer.encode(sender, forKey: .sender)
        }
        if let subject = subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
    }
}
