// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetComplianceSummaryInputHeadersMiddleware: Middleware {
    public let id: String = "GetComplianceSummaryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetComplianceSummaryInput>,
                  next: H) -> Swift.Result<OperationOutput<GetComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetComplianceSummaryInput>
    public typealias MOutput = OperationOutput<GetComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetComplianceSummaryOutputError>
}

public struct GetComplianceSummaryInputQueryItemMiddleware: Middleware {
    public let id: String = "GetComplianceSummaryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetComplianceSummaryInput>,
                  next: H) -> Swift.Result<OperationOutput<GetComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetComplianceSummaryInput>
    public typealias MOutput = OperationOutput<GetComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetComplianceSummaryOutputError>
}

public struct GetComplianceSummaryInputBodyMiddleware: Middleware {
    public let id: String = "GetComplianceSummaryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetComplianceSummaryInput>,
                  next: H) -> Swift.Result<OperationOutput<GetComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetComplianceSummaryInput>
    public typealias MOutput = OperationOutput<GetComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetComplianceSummaryOutputError>
}

extension GetComplianceSummaryInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case groupBy = "GroupBy"
        case maxResults = "MaxResults"
        case paginationToken = "PaginationToken"
        case regionFilters = "RegionFilters"
        case resourceTypeFilters = "ResourceTypeFilters"
        case tagKeyFilters = "TagKeyFilters"
        case targetIdFilters = "TargetIdFilters"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupBy = groupBy {
            var groupByContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupBy)
            for groupby0 in groupBy {
                try groupByContainer.encode(groupby0.rawValue)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let paginationToken = paginationToken {
            try encodeContainer.encode(paginationToken, forKey: .paginationToken)
        }
        if let regionFilters = regionFilters {
            var regionFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regionFilters)
            for regionfilterlist0 in regionFilters {
                try regionFiltersContainer.encode(regionfilterlist0)
            }
        }
        if let resourceTypeFilters = resourceTypeFilters {
            var resourceTypeFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypeFilters)
            for resourcetypefilterlist0 in resourceTypeFilters {
                try resourceTypeFiltersContainer.encode(resourcetypefilterlist0)
            }
        }
        if let tagKeyFilters = tagKeyFilters {
            var tagKeyFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeyFilters)
            for tagkeyfilterlist0 in tagKeyFilters {
                try tagKeyFiltersContainer.encode(tagkeyfilterlist0)
            }
        }
        if let targetIdFilters = targetIdFilters {
            var targetIdFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetIdFilters)
            for targetidfilterlist0 in targetIdFilters {
                try targetIdFiltersContainer.encode(targetidfilterlist0)
            }
        }
    }
}
