// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Summary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lastUpdated = "LastUpdated"
        case nonCompliantResources = "NonCompliantResources"
        case region = "Region"
        case resourceType = "ResourceType"
        case targetId = "TargetId"
        case targetIdType = "TargetIdType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated, forKey: .lastUpdated)
        }
        if nonCompliantResources != 0 {
            try encodeContainer.encode(nonCompliantResources, forKey: .nonCompliantResources)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if let targetIdType = targetIdType {
            try encodeContainer.encode(targetIdType.rawValue, forKey: .targetIdType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetIdTypeDecoded = try containerValues.decodeIfPresent(TargetIdType.self, forKey: .targetIdType)
        targetIdType = targetIdTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let nonCompliantResourcesDecoded = try containerValues.decode(Int.self, forKey: .nonCompliantResources)
        nonCompliantResources = nonCompliantResourcesDecoded
    }
}
