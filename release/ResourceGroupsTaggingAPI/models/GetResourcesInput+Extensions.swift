// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetResourcesInputHeadersMiddleware: Middleware {
    public let id: String = "GetResourcesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetResourcesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetResourcesInput>
    public typealias MOutput = OperationOutput<GetResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetResourcesOutputError>
}

public struct GetResourcesInputQueryItemMiddleware: Middleware {
    public let id: String = "GetResourcesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetResourcesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetResourcesInput>
    public typealias MOutput = OperationOutput<GetResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetResourcesOutputError>
}

public struct GetResourcesInputBodyMiddleware: Middleware {
    public let id: String = "GetResourcesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetResourcesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetResourcesInput>
    public typealias MOutput = OperationOutput<GetResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetResourcesOutputError>
}

extension GetResourcesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case excludeCompliantResources = "ExcludeCompliantResources"
        case includeComplianceDetails = "IncludeComplianceDetails"
        case paginationToken = "PaginationToken"
        case resourceARNList = "ResourceARNList"
        case resourceTypeFilters = "ResourceTypeFilters"
        case resourcesPerPage = "ResourcesPerPage"
        case tagFilters = "TagFilters"
        case tagsPerPage = "TagsPerPage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excludeCompliantResources = excludeCompliantResources {
            try encodeContainer.encode(excludeCompliantResources, forKey: .excludeCompliantResources)
        }
        if let includeComplianceDetails = includeComplianceDetails {
            try encodeContainer.encode(includeComplianceDetails, forKey: .includeComplianceDetails)
        }
        if let paginationToken = paginationToken {
            try encodeContainer.encode(paginationToken, forKey: .paginationToken)
        }
        if let resourceARNList = resourceARNList {
            var resourceARNListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceARNList)
            for resourcearnlistforget0 in resourceARNList {
                try resourceARNListContainer.encode(resourcearnlistforget0)
            }
        }
        if let resourceTypeFilters = resourceTypeFilters {
            var resourceTypeFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypeFilters)
            for resourcetypefilterlist0 in resourceTypeFilters {
                try resourceTypeFiltersContainer.encode(resourcetypefilterlist0)
            }
        }
        if let resourcesPerPage = resourcesPerPage {
            try encodeContainer.encode(resourcesPerPage, forKey: .resourcesPerPage)
        }
        if let tagFilters = tagFilters {
            var tagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagFilters)
            for tagfilterlist0 in tagFilters {
                try tagFiltersContainer.encode(tagfilterlist0)
            }
        }
        if let tagsPerPage = tagsPerPage {
            try encodeContainer.encode(tagsPerPage, forKey: .tagsPerPage)
        }
    }
}
