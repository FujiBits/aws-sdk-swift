// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateFleetAttributesInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateFleetAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetAttributesInput>
    public typealias MOutput = OperationOutput<UpdateFleetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetAttributesOutputError>
}

public struct UpdateFleetAttributesInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateFleetAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetAttributesInput>
    public typealias MOutput = OperationOutput<UpdateFleetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetAttributesOutputError>
}

public struct UpdateFleetAttributesInputBodyMiddleware: Middleware {
    public let id: String = "UpdateFleetAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFleetAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFleetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFleetAttributesInput>
    public typealias MOutput = OperationOutput<UpdateFleetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFleetAttributesOutputError>
}

extension UpdateFleetAttributesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case fleetId = "FleetId"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let metricGroups = metricGroups {
            var metricGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricGroups)
            for metricgrouplist0 in metricGroups {
                try metricGroupsContainer.encode(metricgrouplist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newGameSessionProtectionPolicy = newGameSessionProtectionPolicy {
            try encodeContainer.encode(newGameSessionProtectionPolicy.rawValue, forKey: .newGameSessionProtectionPolicy)
        }
        if let resourceCreationLimitPolicy = resourceCreationLimitPolicy {
            try encodeContainer.encode(resourceCreationLimitPolicy, forKey: .resourceCreationLimitPolicy)
        }
    }
}
