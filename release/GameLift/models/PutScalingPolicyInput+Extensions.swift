// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutScalingPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "PutScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScalingPolicyOutputError>
}

public struct PutScalingPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "PutScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScalingPolicyOutputError>
}

public struct PutScalingPolicyInputBodyMiddleware: Middleware {
    public let id: String = "PutScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutScalingPolicyOutputError>
}

extension PutScalingPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case evaluationPeriods = "EvaluationPeriods"
        case fleetId = "FleetId"
        case metricName = "MetricName"
        case name = "Name"
        case policyType = "PolicyType"
        case scalingAdjustment = "ScalingAdjustment"
        case scalingAdjustmentType = "ScalingAdjustmentType"
        case targetConfiguration = "TargetConfiguration"
        case threshold = "Threshold"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let evaluationPeriods = evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if scalingAdjustment != 0 {
            try encodeContainer.encode(scalingAdjustment, forKey: .scalingAdjustment)
        }
        if let scalingAdjustmentType = scalingAdjustmentType {
            try encodeContainer.encode(scalingAdjustmentType.rawValue, forKey: .scalingAdjustmentType)
        }
        if let targetConfiguration = targetConfiguration {
            try encodeContainer.encode(targetConfiguration, forKey: .targetConfiguration)
        }
        if threshold != 0.0 {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
    }
}
