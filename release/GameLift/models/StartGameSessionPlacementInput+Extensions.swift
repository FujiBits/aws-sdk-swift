// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartGameSessionPlacementInputHeadersMiddleware: Middleware {
    public let id: String = "StartGameSessionPlacementInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<StartGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<StartGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartGameSessionPlacementOutputError>
}

public struct StartGameSessionPlacementInputQueryItemMiddleware: Middleware {
    public let id: String = "StartGameSessionPlacementInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<StartGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<StartGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartGameSessionPlacementOutputError>
}

public struct StartGameSessionPlacementInputBodyMiddleware: Middleware {
    public let id: String = "StartGameSessionPlacementInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartGameSessionPlacementInput>,
                  next: H) -> Swift.Result<OperationOutput<StartGameSessionPlacementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartGameSessionPlacementInput>
    public typealias MOutput = OperationOutput<StartGameSessionPlacementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartGameSessionPlacementOutputError>
}

extension StartGameSessionPlacementInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case desiredPlayerSessions = "DesiredPlayerSessions"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionName = "GameSessionName"
        case gameSessionQueueName = "GameSessionQueueName"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case placementId = "PlacementId"
        case playerLatencies = "PlayerLatencies"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredPlayerSessions = desiredPlayerSessions {
            var desiredPlayerSessionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .desiredPlayerSessions)
            for desiredplayersessionlist0 in desiredPlayerSessions {
                try desiredPlayerSessionsContainer.encode(desiredplayersessionlist0)
            }
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionName = gameSessionName {
            try encodeContainer.encode(gameSessionName, forKey: .gameSessionName)
        }
        if let gameSessionQueueName = gameSessionQueueName {
            try encodeContainer.encode(gameSessionQueueName, forKey: .gameSessionQueueName)
        }
        if let maximumPlayerSessionCount = maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let placementId = placementId {
            try encodeContainer.encode(placementId, forKey: .placementId)
        }
        if let playerLatencies = playerLatencies {
            var playerLatenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencies)
            for playerlatencylist0 in playerLatencies {
                try playerLatenciesContainer.encode(playerlatencylist0)
            }
        }
    }
}
