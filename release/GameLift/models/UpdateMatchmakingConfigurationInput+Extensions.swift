// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateMatchmakingConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateMatchmakingConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMatchmakingConfigurationOutputError>
}

public struct UpdateMatchmakingConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateMatchmakingConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMatchmakingConfigurationOutputError>
}

public struct UpdateMatchmakingConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "UpdateMatchmakingConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMatchmakingConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMatchmakingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMatchmakingConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateMatchmakingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMatchmakingConfigurationOutputError>
}

extension UpdateMatchmakingConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptanceRequired = acceptanceRequired {
            try encodeContainer.encode(acceptanceRequired, forKey: .acceptanceRequired)
        }
        if let acceptanceTimeoutSeconds = acceptanceTimeoutSeconds {
            try encodeContainer.encode(acceptanceTimeoutSeconds, forKey: .acceptanceTimeoutSeconds)
        }
        if let additionalPlayerCount = additionalPlayerCount {
            try encodeContainer.encode(additionalPlayerCount, forKey: .additionalPlayerCount)
        }
        if let backfillMode = backfillMode {
            try encodeContainer.encode(backfillMode.rawValue, forKey: .backfillMode)
        }
        if let customEventData = customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let flexMatchMode = flexMatchMode {
            try encodeContainer.encode(flexMatchMode.rawValue, forKey: .flexMatchMode)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionQueueArns = gameSessionQueueArns {
            var gameSessionQueueArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameSessionQueueArns)
            for queuearnslist0 in gameSessionQueueArns {
                try gameSessionQueueArnsContainer.encode(queuearnslist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let requestTimeoutSeconds = requestTimeoutSeconds {
            try encodeContainer.encode(requestTimeoutSeconds, forKey: .requestTimeoutSeconds)
        }
        if let ruleSetName = ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
    }
}
