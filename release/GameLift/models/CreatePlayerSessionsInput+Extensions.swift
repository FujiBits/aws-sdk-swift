// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreatePlayerSessionsInputHeadersMiddleware: Middleware {
    public let id: String = "CreatePlayerSessionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlayerSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlayerSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlayerSessionsInput>
    public typealias MOutput = OperationOutput<CreatePlayerSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlayerSessionsOutputError>
}

public struct CreatePlayerSessionsInputQueryItemMiddleware: Middleware {
    public let id: String = "CreatePlayerSessionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlayerSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlayerSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlayerSessionsInput>
    public typealias MOutput = OperationOutput<CreatePlayerSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlayerSessionsOutputError>
}

public struct CreatePlayerSessionsInputBodyMiddleware: Middleware {
    public let id: String = "CreatePlayerSessionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlayerSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlayerSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlayerSessionsInput>
    public typealias MOutput = OperationOutput<CreatePlayerSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlayerSessionsOutputError>
}

extension CreatePlayerSessionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameSessionId = "GameSessionId"
        case playerDataMap = "PlayerDataMap"
        case playerIds = "PlayerIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let playerDataMap = playerDataMap {
            var playerDataMapContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .playerDataMap)
            for (dictKey0, playerdatamap0) in playerDataMap {
                try playerDataMapContainer.encode(playerdatamap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let playerIds = playerIds {
            var playerIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerIds)
            for playeridlist0 in playerIds {
                try playerIdsContainer.encode(playeridlist0)
            }
        }
    }
}
