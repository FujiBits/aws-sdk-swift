// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateGameServerGroupInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateGameServerGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerGroupInput>
    public typealias MOutput = OperationOutput<UpdateGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerGroupOutputError>
}

public struct UpdateGameServerGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateGameServerGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerGroupInput>
    public typealias MOutput = OperationOutput<UpdateGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerGroupOutputError>
}

public struct UpdateGameServerGroupInputBodyMiddleware: Middleware {
    public let id: String = "UpdateGameServerGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerGroupInput>
    public typealias MOutput = OperationOutput<UpdateGameServerGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerGroupOutputError>
}

extension UpdateGameServerGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let balancingStrategy = balancingStrategy {
            try encodeContainer.encode(balancingStrategy.rawValue, forKey: .balancingStrategy)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerProtectionPolicy = gameServerProtectionPolicy {
            try encodeContainer.encode(gameServerProtectionPolicy.rawValue, forKey: .gameServerProtectionPolicy)
        }
        if let instanceDefinitions = instanceDefinitions {
            var instanceDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceDefinitions)
            for instancedefinitions0 in instanceDefinitions {
                try instanceDefinitionsContainer.encode(instancedefinitions0)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}
