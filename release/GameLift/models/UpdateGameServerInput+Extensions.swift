// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateGameServerInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateGameServerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerInput>
    public typealias MOutput = OperationOutput<UpdateGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerOutputError>
}

public struct UpdateGameServerInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateGameServerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerInput>
    public typealias MOutput = OperationOutput<UpdateGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerOutputError>
}

public struct UpdateGameServerInputBodyMiddleware: Middleware {
    public let id: String = "UpdateGameServerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGameServerInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGameServerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGameServerInput>
    public typealias MOutput = OperationOutput<UpdateGameServerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGameServerOutputError>
}

extension UpdateGameServerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case healthCheck = "HealthCheck"
        case utilizationStatus = "UtilizationStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerData = gameServerData {
            try encodeContainer.encode(gameServerData, forKey: .gameServerData)
        }
        if let gameServerGroupName = gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
        if let healthCheck = healthCheck {
            try encodeContainer.encode(healthCheck.rawValue, forKey: .healthCheck)
        }
        if let utilizationStatus = utilizationStatus {
            try encodeContainer.encode(utilizationStatus.rawValue, forKey: .utilizationStatus)
        }
    }
}
