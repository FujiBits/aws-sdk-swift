// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateGameSessionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateGameSessionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameSessionInput>
    public typealias MOutput = OperationOutput<CreateGameSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameSessionOutputError>
}

public struct CreateGameSessionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateGameSessionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameSessionInput>
    public typealias MOutput = OperationOutput<CreateGameSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameSessionOutputError>
}

public struct CreateGameSessionInputBodyMiddleware: Middleware {
    public let id: String = "CreateGameSessionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGameSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGameSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGameSessionInput>
    public typealias MOutput = OperationOutput<CreateGameSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGameSessionOutputError>
}

extension CreateGameSessionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case creatorId = "CreatorId"
        case fleetId = "FleetId"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionId = "GameSessionId"
        case idempotencyToken = "IdempotencyToken"
        case location = "Location"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let creatorId = creatorId {
            try encodeContainer.encode(creatorId, forKey: .creatorId)
        }
        if let fleetId = fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionId = gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let maximumPlayerSessionCount = maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}
