// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ServiceCatalogClient {
    /// Accepts an offer to share the specified portfolio.
    func acceptPortfolioShare(input: AcceptPortfolioShareInput) async throws -> AcceptPortfolioShareOutputResponse
    {
        typealias acceptPortfolioShareContinuation = CheckedContinuation<AcceptPortfolioShareOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptPortfolioShareContinuation) in
            acceptPortfolioShare(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates the specified budget with the specified resource.
    func associateBudgetWithResource(input: AssociateBudgetWithResourceInput) async throws -> AssociateBudgetWithResourceOutputResponse
    {
        typealias associateBudgetWithResourceContinuation = CheckedContinuation<AssociateBudgetWithResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateBudgetWithResourceContinuation) in
            associateBudgetWithResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates the specified principal ARN with the specified portfolio.
    func associatePrincipalWithPortfolio(input: AssociatePrincipalWithPortfolioInput) async throws -> AssociatePrincipalWithPortfolioOutputResponse
    {
        typealias associatePrincipalWithPortfolioContinuation = CheckedContinuation<AssociatePrincipalWithPortfolioOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associatePrincipalWithPortfolioContinuation) in
            associatePrincipalWithPortfolio(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates the specified product with the specified portfolio. A delegated admin is authorized to invoke this command.
    func associateProductWithPortfolio(input: AssociateProductWithPortfolioInput) async throws -> AssociateProductWithPortfolioOutputResponse
    {
        typealias associateProductWithPortfolioContinuation = CheckedContinuation<AssociateProductWithPortfolioOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateProductWithPortfolioContinuation) in
            associateProductWithPortfolio(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a self-service action with a provisioning artifact.
    func associateServiceActionWithProvisioningArtifact(input: AssociateServiceActionWithProvisioningArtifactInput) async throws -> AssociateServiceActionWithProvisioningArtifactOutputResponse
    {
        typealias associateServiceActionWithProvisioningArtifactContinuation = CheckedContinuation<AssociateServiceActionWithProvisioningArtifactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateServiceActionWithProvisioningArtifactContinuation) in
            associateServiceActionWithProvisioningArtifact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associate the specified TagOption with the specified portfolio or product.
    func associateTagOptionWithResource(input: AssociateTagOptionWithResourceInput) async throws -> AssociateTagOptionWithResourceOutputResponse
    {
        typealias associateTagOptionWithResourceContinuation = CheckedContinuation<AssociateTagOptionWithResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateTagOptionWithResourceContinuation) in
            associateTagOptionWithResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates multiple self-service actions with provisioning artifacts.
    func batchAssociateServiceActionWithProvisioningArtifact(input: BatchAssociateServiceActionWithProvisioningArtifactInput) async throws -> BatchAssociateServiceActionWithProvisioningArtifactOutputResponse
    {
        typealias batchAssociateServiceActionWithProvisioningArtifactContinuation = CheckedContinuation<BatchAssociateServiceActionWithProvisioningArtifactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchAssociateServiceActionWithProvisioningArtifactContinuation) in
            batchAssociateServiceActionWithProvisioningArtifact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a batch of self-service actions from the specified provisioning artifact.
    func batchDisassociateServiceActionFromProvisioningArtifact(input: BatchDisassociateServiceActionFromProvisioningArtifactInput) async throws -> BatchDisassociateServiceActionFromProvisioningArtifactOutputResponse
    {
        typealias batchDisassociateServiceActionFromProvisioningArtifactContinuation = CheckedContinuation<BatchDisassociateServiceActionFromProvisioningArtifactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDisassociateServiceActionFromProvisioningArtifactContinuation) in
            batchDisassociateServiceActionFromProvisioningArtifact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Copies the specified source product to the specified target product or a new product. You can copy a product to the same account or another account. You can copy a product to the same region or another region. This operation is performed asynchronously. To track the progress of the operation, use [DescribeCopyProductStatus].
    func copyProduct(input: CopyProductInput) async throws -> CopyProductOutputResponse
    {
        typealias copyProductContinuation = CheckedContinuation<CopyProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: copyProductContinuation) in
            copyProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a constraint. A delegated admin is authorized to invoke this command.
    func createConstraint(input: CreateConstraintInput) async throws -> CreateConstraintOutputResponse
    {
        typealias createConstraintContinuation = CheckedContinuation<CreateConstraintOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConstraintContinuation) in
            createConstraint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a portfolio. A delegated admin is authorized to invoke this command.
    func createPortfolio(input: CreatePortfolioInput) async throws -> CreatePortfolioOutputResponse
    {
        typealias createPortfolioContinuation = CheckedContinuation<CreatePortfolioOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPortfolioContinuation) in
            createPortfolio(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Shares the specified portfolio with the specified account or organization node. Shares to an organization node can only be created by the management account of an organization or by a delegated administrator. You can share portfolios to an organization, an organizational unit, or a specific account. Note that if a delegated admin is de-registered, they can no longer create portfolio shares. AWSOrganizationsAccess must be enabled in order to create a portfolio share to an organization node. You can't share a shared resource, including portfolios that contain a shared product. If the portfolio share with the specified account or organization node already exists, this action will have no effect and will not return an error. To update an existing share, you must use the  UpdatePortfolioShare API instead.
    func createPortfolioShare(input: CreatePortfolioShareInput) async throws -> CreatePortfolioShareOutputResponse
    {
        typealias createPortfolioShareContinuation = CheckedContinuation<CreatePortfolioShareOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPortfolioShareContinuation) in
            createPortfolioShare(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a product. A delegated admin is authorized to invoke this command. The user or role that performs this operation must have the cloudformation:GetTemplate IAM policy permission. This policy permission is required when using the ImportFromPhysicalId template source in the information data section.
    func createProduct(input: CreateProductInput) async throws -> CreateProductOutputResponse
    {
        typealias createProductContinuation = CheckedContinuation<CreateProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProductContinuation) in
            createProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a plan. A plan includes the list of resources to be created (when provisioning a new product) or modified (when updating a provisioned product) when the plan is executed. You can create one plan per provisioned product. To create a plan for an existing provisioned product, the product status must be AVAILBLE or TAINTED. To view the resource changes in the change set, use [DescribeProvisionedProductPlan]. To create or modify the provisioned product, use [ExecuteProvisionedProductPlan].
    func createProvisionedProductPlan(input: CreateProvisionedProductPlanInput) async throws -> CreateProvisionedProductPlanOutputResponse
    {
        typealias createProvisionedProductPlanContinuation = CheckedContinuation<CreateProvisionedProductPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProvisionedProductPlanContinuation) in
            createProvisionedProductPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a provisioning artifact (also known as a version) for the specified product. You cannot create a provisioning artifact for a product that was shared with you. The user or role that performs this operation must have the cloudformation:GetTemplate IAM policy permission. This policy permission is required when using the ImportFromPhysicalId template source in the information data section.
    func createProvisioningArtifact(input: CreateProvisioningArtifactInput) async throws -> CreateProvisioningArtifactOutputResponse
    {
        typealias createProvisioningArtifactContinuation = CheckedContinuation<CreateProvisioningArtifactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProvisioningArtifactContinuation) in
            createProvisioningArtifact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a self-service action.
    func createServiceAction(input: CreateServiceActionInput) async throws -> CreateServiceActionOutputResponse
    {
        typealias createServiceActionContinuation = CheckedContinuation<CreateServiceActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createServiceActionContinuation) in
            createServiceAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a TagOption.
    func createTagOption(input: CreateTagOptionInput) async throws -> CreateTagOptionOutputResponse
    {
        typealias createTagOptionContinuation = CheckedContinuation<CreateTagOptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTagOptionContinuation) in
            createTagOption(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified constraint. A delegated admin is authorized to invoke this command.
    func deleteConstraint(input: DeleteConstraintInput) async throws -> DeleteConstraintOutputResponse
    {
        typealias deleteConstraintContinuation = CheckedContinuation<DeleteConstraintOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConstraintContinuation) in
            deleteConstraint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified portfolio. You cannot delete a portfolio if it was shared with you or if it has associated products, users, constraints, or shared accounts. A delegated admin is authorized to invoke this command.
    func deletePortfolio(input: DeletePortfolioInput) async throws -> DeletePortfolioOutputResponse
    {
        typealias deletePortfolioContinuation = CheckedContinuation<DeletePortfolioOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePortfolioContinuation) in
            deletePortfolio(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops sharing the specified portfolio with the specified account or organization node. Shares to an organization node can only be deleted by the management account of an organization or by a delegated administrator. Note that if a delegated admin is de-registered, portfolio shares created from that account are removed.
    func deletePortfolioShare(input: DeletePortfolioShareInput) async throws -> DeletePortfolioShareOutputResponse
    {
        typealias deletePortfolioShareContinuation = CheckedContinuation<DeletePortfolioShareOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePortfolioShareContinuation) in
            deletePortfolioShare(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified product. You cannot delete a product if it was shared with you or is associated with a portfolio. A delegated admin is authorized to invoke this command.
    func deleteProduct(input: DeleteProductInput) async throws -> DeleteProductOutputResponse
    {
        typealias deleteProductContinuation = CheckedContinuation<DeleteProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProductContinuation) in
            deleteProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified plan.
    func deleteProvisionedProductPlan(input: DeleteProvisionedProductPlanInput) async throws -> DeleteProvisionedProductPlanOutputResponse
    {
        typealias deleteProvisionedProductPlanContinuation = CheckedContinuation<DeleteProvisionedProductPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProvisionedProductPlanContinuation) in
            deleteProvisionedProductPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified provisioning artifact (also known as a version) for the specified product. You cannot delete a provisioning artifact associated with a product that was shared with you. You cannot delete the last provisioning artifact for a product, because a product must have at least one provisioning artifact.
    func deleteProvisioningArtifact(input: DeleteProvisioningArtifactInput) async throws -> DeleteProvisioningArtifactOutputResponse
    {
        typealias deleteProvisioningArtifactContinuation = CheckedContinuation<DeleteProvisioningArtifactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProvisioningArtifactContinuation) in
            deleteProvisioningArtifact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a self-service action.
    func deleteServiceAction(input: DeleteServiceActionInput) async throws -> DeleteServiceActionOutputResponse
    {
        typealias deleteServiceActionContinuation = CheckedContinuation<DeleteServiceActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteServiceActionContinuation) in
            deleteServiceAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified TagOption. You cannot delete a TagOption if it is associated with a product or portfolio.
    func deleteTagOption(input: DeleteTagOptionInput) async throws -> DeleteTagOptionOutputResponse
    {
        typealias deleteTagOptionContinuation = CheckedContinuation<DeleteTagOptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTagOptionContinuation) in
            deleteTagOption(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified constraint.
    func describeConstraint(input: DescribeConstraintInput) async throws -> DescribeConstraintOutputResponse
    {
        typealias describeConstraintContinuation = CheckedContinuation<DescribeConstraintOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeConstraintContinuation) in
            describeConstraint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the status of the specified copy product operation.
    func describeCopyProductStatus(input: DescribeCopyProductStatusInput) async throws -> DescribeCopyProductStatusOutputResponse
    {
        typealias describeCopyProductStatusContinuation = CheckedContinuation<DescribeCopyProductStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCopyProductStatusContinuation) in
            describeCopyProductStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified portfolio. A delegated admin is authorized to invoke this command.
    func describePortfolio(input: DescribePortfolioInput) async throws -> DescribePortfolioOutputResponse
    {
        typealias describePortfolioContinuation = CheckedContinuation<DescribePortfolioOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePortfolioContinuation) in
            describePortfolio(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the status of the specified portfolio share operation. This API can only be called by the management account in the organization or by a delegated admin.
    func describePortfolioShareStatus(input: DescribePortfolioShareStatusInput) async throws -> DescribePortfolioShareStatusOutputResponse
    {
        typealias describePortfolioShareStatusContinuation = CheckedContinuation<DescribePortfolioShareStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePortfolioShareStatusContinuation) in
            describePortfolioShareStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a summary of each of the portfolio shares that were created for the specified portfolio. You can use this API to determine which accounts or organizational nodes this portfolio have been shared, whether the recipient entity has imported the share, and whether TagOptions are included with the share. The PortfolioId and Type parameters are both required.
    func describePortfolioShares(input: DescribePortfolioSharesInput) async throws -> DescribePortfolioSharesOutputResponse
    {
        typealias describePortfolioSharesContinuation = CheckedContinuation<DescribePortfolioSharesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePortfolioSharesContinuation) in
            describePortfolioShares(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified product.
    func describeProduct(input: DescribeProductInput) async throws -> DescribeProductOutputResponse
    {
        typealias describeProductContinuation = CheckedContinuation<DescribeProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProductContinuation) in
            describeProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified product. This operation is run with administrator access.
    func describeProductAsAdmin(input: DescribeProductAsAdminInput) async throws -> DescribeProductAsAdminOutputResponse
    {
        typealias describeProductAsAdminContinuation = CheckedContinuation<DescribeProductAsAdminOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProductAsAdminContinuation) in
            describeProductAsAdmin(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified product.
    func describeProductView(input: DescribeProductViewInput) async throws -> DescribeProductViewOutputResponse
    {
        typealias describeProductViewContinuation = CheckedContinuation<DescribeProductViewOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProductViewContinuation) in
            describeProductView(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified provisioned product.
    func describeProvisionedProduct(input: DescribeProvisionedProductInput) async throws -> DescribeProvisionedProductOutputResponse
    {
        typealias describeProvisionedProductContinuation = CheckedContinuation<DescribeProvisionedProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProvisionedProductContinuation) in
            describeProvisionedProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the resource changes for the specified plan.
    func describeProvisionedProductPlan(input: DescribeProvisionedProductPlanInput) async throws -> DescribeProvisionedProductPlanOutputResponse
    {
        typealias describeProvisionedProductPlanContinuation = CheckedContinuation<DescribeProvisionedProductPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProvisionedProductPlanContinuation) in
            describeProvisionedProductPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified provisioning artifact (also known as a version) for the specified product.
    func describeProvisioningArtifact(input: DescribeProvisioningArtifactInput) async throws -> DescribeProvisioningArtifactOutputResponse
    {
        typealias describeProvisioningArtifactContinuation = CheckedContinuation<DescribeProvisioningArtifactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProvisioningArtifactContinuation) in
            describeProvisioningArtifact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the configuration required to provision the specified product using the specified provisioning artifact. If the output contains a TagOption key with an empty list of values, there is a TagOption conflict for that key. The end user cannot take action to fix the conflict, and launch is not blocked. In subsequent calls to [ProvisionProduct], do not include conflicted TagOption keys as tags, or this causes the error "Parameter validation failed: Missing required parameter in Tags[N]:Value". Tag the provisioned product with the value sc-tagoption-conflict-portfolioId-productId.
    func describeProvisioningParameters(input: DescribeProvisioningParametersInput) async throws -> DescribeProvisioningParametersOutputResponse
    {
        typealias describeProvisioningParametersContinuation = CheckedContinuation<DescribeProvisioningParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProvisioningParametersContinuation) in
            describeProvisioningParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified request operation. Use this operation after calling a request operation (for example, [ProvisionProduct], [TerminateProvisionedProduct], or [UpdateProvisionedProduct]). If a provisioned product was transferred to a new owner using [UpdateProvisionedProductProperties], the new owner will be able to describe all past records for that product. The previous owner will no longer be able to describe the records, but will be able to use [ListRecordHistory] to see the product's history from when he was the owner.
    func describeRecord(input: DescribeRecordInput) async throws -> DescribeRecordOutputResponse
    {
        typealias describeRecordContinuation = CheckedContinuation<DescribeRecordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRecordContinuation) in
            describeRecord(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a self-service action.
    func describeServiceAction(input: DescribeServiceActionInput) async throws -> DescribeServiceActionOutputResponse
    {
        typealias describeServiceActionContinuation = CheckedContinuation<DescribeServiceActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeServiceActionContinuation) in
            describeServiceAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Finds the default parameters for a specific self-service action on a specific provisioned product and returns a map of the results to the user.
    func describeServiceActionExecutionParameters(input: DescribeServiceActionExecutionParametersInput) async throws -> DescribeServiceActionExecutionParametersOutputResponse
    {
        typealias describeServiceActionExecutionParametersContinuation = CheckedContinuation<DescribeServiceActionExecutionParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeServiceActionExecutionParametersContinuation) in
            describeServiceActionExecutionParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified TagOption.
    func describeTagOption(input: DescribeTagOptionInput) async throws -> DescribeTagOptionOutputResponse
    {
        typealias describeTagOptionContinuation = CheckedContinuation<DescribeTagOptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTagOptionContinuation) in
            describeTagOption(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disable portfolio sharing through AWS Organizations feature. This feature will not delete your current shares but it will prevent you from creating new shares throughout your organization. Current shares will not be in sync with your organization structure if it changes after calling this API. This API can only be called by the management account in the organization. This API can't be invoked if there are active delegated administrators in the organization. Note that a delegated administrator is not authorized to invoke DisableAWSOrganizationsAccess.
    func disableAWSOrganizationsAccess(input: DisableAWSOrganizationsAccessInput) async throws -> DisableAWSOrganizationsAccessOutputResponse
    {
        typealias disableAWSOrganizationsAccessContinuation = CheckedContinuation<DisableAWSOrganizationsAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableAWSOrganizationsAccessContinuation) in
            disableAWSOrganizationsAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the specified budget from the specified resource.
    func disassociateBudgetFromResource(input: DisassociateBudgetFromResourceInput) async throws -> DisassociateBudgetFromResourceOutputResponse
    {
        typealias disassociateBudgetFromResourceContinuation = CheckedContinuation<DisassociateBudgetFromResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateBudgetFromResourceContinuation) in
            disassociateBudgetFromResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a previously associated principal ARN from a specified portfolio.
    func disassociatePrincipalFromPortfolio(input: DisassociatePrincipalFromPortfolioInput) async throws -> DisassociatePrincipalFromPortfolioOutputResponse
    {
        typealias disassociatePrincipalFromPortfolioContinuation = CheckedContinuation<DisassociatePrincipalFromPortfolioOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociatePrincipalFromPortfolioContinuation) in
            disassociatePrincipalFromPortfolio(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the specified product from the specified portfolio. A delegated admin is authorized to invoke this command.
    func disassociateProductFromPortfolio(input: DisassociateProductFromPortfolioInput) async throws -> DisassociateProductFromPortfolioOutputResponse
    {
        typealias disassociateProductFromPortfolioContinuation = CheckedContinuation<DisassociateProductFromPortfolioOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateProductFromPortfolioContinuation) in
            disassociateProductFromPortfolio(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the specified self-service action association from the specified provisioning artifact.
    func disassociateServiceActionFromProvisioningArtifact(input: DisassociateServiceActionFromProvisioningArtifactInput) async throws -> DisassociateServiceActionFromProvisioningArtifactOutputResponse
    {
        typealias disassociateServiceActionFromProvisioningArtifactContinuation = CheckedContinuation<DisassociateServiceActionFromProvisioningArtifactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateServiceActionFromProvisioningArtifactContinuation) in
            disassociateServiceActionFromProvisioningArtifact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the specified TagOption from the specified resource.
    func disassociateTagOptionFromResource(input: DisassociateTagOptionFromResourceInput) async throws -> DisassociateTagOptionFromResourceOutputResponse
    {
        typealias disassociateTagOptionFromResourceContinuation = CheckedContinuation<DisassociateTagOptionFromResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateTagOptionFromResourceContinuation) in
            disassociateTagOptionFromResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enable portfolio sharing feature through AWS Organizations. This API will allow Service Catalog to receive updates on your organization in order to sync your shares with the current structure. This API can only be called by the management account in the organization. By calling this API Service Catalog will make a call to organizations:EnableAWSServiceAccess on your behalf so that your shares can be in sync with any changes in your AWS Organizations structure. Note that a delegated administrator is not authorized to invoke EnableAWSOrganizationsAccess.
    func enableAWSOrganizationsAccess(input: EnableAWSOrganizationsAccessInput) async throws -> EnableAWSOrganizationsAccessOutputResponse
    {
        typealias enableAWSOrganizationsAccessContinuation = CheckedContinuation<EnableAWSOrganizationsAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableAWSOrganizationsAccessContinuation) in
            enableAWSOrganizationsAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provisions or modifies a product based on the resource changes for the specified plan.
    func executeProvisionedProductPlan(input: ExecuteProvisionedProductPlanInput) async throws -> ExecuteProvisionedProductPlanOutputResponse
    {
        typealias executeProvisionedProductPlanContinuation = CheckedContinuation<ExecuteProvisionedProductPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: executeProvisionedProductPlanContinuation) in
            executeProvisionedProductPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Executes a self-service action against a provisioned product.
    func executeProvisionedProductServiceAction(input: ExecuteProvisionedProductServiceActionInput) async throws -> ExecuteProvisionedProductServiceActionOutputResponse
    {
        typealias executeProvisionedProductServiceActionContinuation = CheckedContinuation<ExecuteProvisionedProductServiceActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: executeProvisionedProductServiceActionContinuation) in
            executeProvisionedProductServiceAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get the Access Status for AWS Organization portfolio share feature. This API can only be called by the management account in the organization or by a delegated admin.
    func getAWSOrganizationsAccessStatus(input: GetAWSOrganizationsAccessStatusInput) async throws -> GetAWSOrganizationsAccessStatusOutputResponse
    {
        typealias getAWSOrganizationsAccessStatusContinuation = CheckedContinuation<GetAWSOrganizationsAccessStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAWSOrganizationsAccessStatusContinuation) in
            getAWSOrganizationsAccessStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This API takes either a ProvisonedProductId or a ProvisionedProductName, along with a list of one or more output keys, and responds with the key/value pairs of those outputs.
    func getProvisionedProductOutputs(input: GetProvisionedProductOutputsInput) async throws -> GetProvisionedProductOutputsOutputResponse
    {
        typealias getProvisionedProductOutputsContinuation = CheckedContinuation<GetProvisionedProductOutputsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getProvisionedProductOutputsContinuation) in
            getProvisionedProductOutputs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Requests the import of a resource as a Service Catalog provisioned product that is associated to a Service Catalog product and provisioning artifact. Once imported, all supported Service Catalog governance actions are supported on the provisioned product. Resource import only supports CloudFormation stack ARNs. CloudFormation StackSets and non-root nested stacks are not supported. The CloudFormation stack must have one of the following statuses to be imported: CREATE_COMPLETE, UPDATE_COMPLETE, UPDATE_ROLLBACK_COMPLETE, IMPORT_COMPLETE, IMPORT_ROLLBACK_COMPLETE. Import of the resource requires that the CloudFormation stack template matches the associated Service Catalog product provisioning artifact. The user or role that performs this operation must have the cloudformation:GetTemplate and cloudformation:DescribeStacks IAM policy permissions.
    func importAsProvisionedProduct(input: ImportAsProvisionedProductInput) async throws -> ImportAsProvisionedProductOutputResponse
    {
        typealias importAsProvisionedProductContinuation = CheckedContinuation<ImportAsProvisionedProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importAsProvisionedProductContinuation) in
            importAsProvisionedProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all portfolios for which sharing was accepted by this account.
    func listAcceptedPortfolioShares(input: ListAcceptedPortfolioSharesInput) async throws -> ListAcceptedPortfolioSharesOutputResponse
    {
        typealias listAcceptedPortfolioSharesContinuation = CheckedContinuation<ListAcceptedPortfolioSharesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAcceptedPortfolioSharesContinuation) in
            listAcceptedPortfolioShares(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all the budgets associated to the specified resource.
    func listBudgetsForResource(input: ListBudgetsForResourceInput) async throws -> ListBudgetsForResourceOutputResponse
    {
        typealias listBudgetsForResourceContinuation = CheckedContinuation<ListBudgetsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBudgetsForResourceContinuation) in
            listBudgetsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the constraints for the specified portfolio and product.
    func listConstraintsForPortfolio(input: ListConstraintsForPortfolioInput) async throws -> ListConstraintsForPortfolioOutputResponse
    {
        typealias listConstraintsForPortfolioContinuation = CheckedContinuation<ListConstraintsForPortfolioOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConstraintsForPortfolioContinuation) in
            listConstraintsForPortfolio(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the paths to the specified product. A path is how the user has access to a specified product, and is necessary when provisioning a product. A path also determines the constraints put on the product.
    func listLaunchPaths(input: ListLaunchPathsInput) async throws -> ListLaunchPathsOutputResponse
    {
        typealias listLaunchPathsContinuation = CheckedContinuation<ListLaunchPathsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLaunchPathsContinuation) in
            listLaunchPaths(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the organization nodes that have access to the specified portfolio. This API can only be called by the management account in the organization or by a delegated admin. If a delegated admin is de-registered, they can no longer perform this operation.
    func listOrganizationPortfolioAccess(input: ListOrganizationPortfolioAccessInput) async throws -> ListOrganizationPortfolioAccessOutputResponse
    {
        typealias listOrganizationPortfolioAccessContinuation = CheckedContinuation<ListOrganizationPortfolioAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOrganizationPortfolioAccessContinuation) in
            listOrganizationPortfolioAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the account IDs that have access to the specified portfolio. A delegated admin can list the accounts that have access to the shared portfolio. Note that if a delegated admin is de-registered, they can no longer perform this operation.
    func listPortfolioAccess(input: ListPortfolioAccessInput) async throws -> ListPortfolioAccessOutputResponse
    {
        typealias listPortfolioAccessContinuation = CheckedContinuation<ListPortfolioAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPortfolioAccessContinuation) in
            listPortfolioAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all portfolios in the catalog.
    func listPortfolios(input: ListPortfoliosInput) async throws -> ListPortfoliosOutputResponse
    {
        typealias listPortfoliosContinuation = CheckedContinuation<ListPortfoliosOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPortfoliosContinuation) in
            listPortfolios(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all portfolios that the specified product is associated with.
    func listPortfoliosForProduct(input: ListPortfoliosForProductInput) async throws -> ListPortfoliosForProductOutputResponse
    {
        typealias listPortfoliosForProductContinuation = CheckedContinuation<ListPortfoliosForProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPortfoliosForProductContinuation) in
            listPortfoliosForProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all principal ARNs associated with the specified portfolio.
    func listPrincipalsForPortfolio(input: ListPrincipalsForPortfolioInput) async throws -> ListPrincipalsForPortfolioOutputResponse
    {
        typealias listPrincipalsForPortfolioContinuation = CheckedContinuation<ListPrincipalsForPortfolioOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPrincipalsForPortfolioContinuation) in
            listPrincipalsForPortfolio(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the plans for the specified provisioned product or all plans to which the user has access.
    func listProvisionedProductPlans(input: ListProvisionedProductPlansInput) async throws -> ListProvisionedProductPlansOutputResponse
    {
        typealias listProvisionedProductPlansContinuation = CheckedContinuation<ListProvisionedProductPlansOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProvisionedProductPlansContinuation) in
            listProvisionedProductPlans(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all provisioning artifacts (also known as versions) for the specified product.
    func listProvisioningArtifacts(input: ListProvisioningArtifactsInput) async throws -> ListProvisioningArtifactsOutputResponse
    {
        typealias listProvisioningArtifactsContinuation = CheckedContinuation<ListProvisioningArtifactsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProvisioningArtifactsContinuation) in
            listProvisioningArtifacts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all provisioning artifacts (also known as versions) for the specified self-service action.
    func listProvisioningArtifactsForServiceAction(input: ListProvisioningArtifactsForServiceActionInput) async throws -> ListProvisioningArtifactsForServiceActionOutputResponse
    {
        typealias listProvisioningArtifactsForServiceActionContinuation = CheckedContinuation<ListProvisioningArtifactsForServiceActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProvisioningArtifactsForServiceActionContinuation) in
            listProvisioningArtifactsForServiceAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the specified requests or all performed requests.
    func listRecordHistory(input: ListRecordHistoryInput) async throws -> ListRecordHistoryOutputResponse
    {
        typealias listRecordHistoryContinuation = CheckedContinuation<ListRecordHistoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRecordHistoryContinuation) in
            listRecordHistory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the resources associated with the specified TagOption.
    func listResourcesForTagOption(input: ListResourcesForTagOptionInput) async throws -> ListResourcesForTagOptionOutputResponse
    {
        typealias listResourcesForTagOptionContinuation = CheckedContinuation<ListResourcesForTagOptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourcesForTagOptionContinuation) in
            listResourcesForTagOption(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all self-service actions.
    func listServiceActions(input: ListServiceActionsInput) async throws -> ListServiceActionsOutputResponse
    {
        typealias listServiceActionsContinuation = CheckedContinuation<ListServiceActionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listServiceActionsContinuation) in
            listServiceActions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a paginated list of self-service actions associated with the specified Product ID and Provisioning Artifact ID.
    func listServiceActionsForProvisioningArtifact(input: ListServiceActionsForProvisioningArtifactInput) async throws -> ListServiceActionsForProvisioningArtifactOutputResponse
    {
        typealias listServiceActionsForProvisioningArtifactContinuation = CheckedContinuation<ListServiceActionsForProvisioningArtifactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listServiceActionsForProvisioningArtifactContinuation) in
            listServiceActionsForProvisioningArtifact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns summary information about stack instances that are associated with the specified CFN_STACKSET type provisioned product. You can filter for stack instances that are associated with a specific AWS account name or region.
    func listStackInstancesForProvisionedProduct(input: ListStackInstancesForProvisionedProductInput) async throws -> ListStackInstancesForProvisionedProductOutputResponse
    {
        typealias listStackInstancesForProvisionedProductContinuation = CheckedContinuation<ListStackInstancesForProvisionedProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStackInstancesForProvisionedProductContinuation) in
            listStackInstancesForProvisionedProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the specified TagOptions or all TagOptions.
    func listTagOptions(input: ListTagOptionsInput) async throws -> ListTagOptionsOutputResponse
    {
        typealias listTagOptionsContinuation = CheckedContinuation<ListTagOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagOptionsContinuation) in
            listTagOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provisions the specified product. A provisioned product is a resourced instance of a product. For example, provisioning a product based on a CloudFormation template launches a CloudFormation stack and its underlying resources. You can check the status of this request using [DescribeRecord]. If the request contains a tag key with an empty list of values, there is a tag conflict for that key. Do not include conflicted keys as tags, or this causes the error "Parameter validation failed: Missing required parameter in Tags[N]:Value".
    func provisionProduct(input: ProvisionProductInput) async throws -> ProvisionProductOutputResponse
    {
        typealias provisionProductContinuation = CheckedContinuation<ProvisionProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: provisionProductContinuation) in
            provisionProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Rejects an offer to share the specified portfolio.
    func rejectPortfolioShare(input: RejectPortfolioShareInput) async throws -> RejectPortfolioShareOutputResponse
    {
        typealias rejectPortfolioShareContinuation = CheckedContinuation<RejectPortfolioShareOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rejectPortfolioShareContinuation) in
            rejectPortfolioShare(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the provisioned products that are available (not terminated). To use additional filtering, see [SearchProvisionedProducts].
    func scanProvisionedProducts(input: ScanProvisionedProductsInput) async throws -> ScanProvisionedProductsOutputResponse
    {
        typealias scanProvisionedProductsContinuation = CheckedContinuation<ScanProvisionedProductsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: scanProvisionedProductsContinuation) in
            scanProvisionedProducts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the products to which the caller has access.
    func searchProducts(input: SearchProductsInput) async throws -> SearchProductsOutputResponse
    {
        typealias searchProductsContinuation = CheckedContinuation<SearchProductsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchProductsContinuation) in
            searchProducts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the products for the specified portfolio or all products.
    func searchProductsAsAdmin(input: SearchProductsAsAdminInput) async throws -> SearchProductsAsAdminOutputResponse
    {
        typealias searchProductsAsAdminContinuation = CheckedContinuation<SearchProductsAsAdminOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchProductsAsAdminContinuation) in
            searchProductsAsAdmin(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the provisioned products that meet the specified criteria.
    func searchProvisionedProducts(input: SearchProvisionedProductsInput) async throws -> SearchProvisionedProductsOutputResponse
    {
        typealias searchProvisionedProductsContinuation = CheckedContinuation<SearchProvisionedProductsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchProvisionedProductsContinuation) in
            searchProvisionedProducts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Terminates the specified provisioned product. This operation does not delete any records associated with the provisioned product. You can check the status of this request using [DescribeRecord].
    func terminateProvisionedProduct(input: TerminateProvisionedProductInput) async throws -> TerminateProvisionedProductOutputResponse
    {
        typealias terminateProvisionedProductContinuation = CheckedContinuation<TerminateProvisionedProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: terminateProvisionedProductContinuation) in
            terminateProvisionedProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified constraint.
    func updateConstraint(input: UpdateConstraintInput) async throws -> UpdateConstraintOutputResponse
    {
        typealias updateConstraintContinuation = CheckedContinuation<UpdateConstraintOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConstraintContinuation) in
            updateConstraint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified portfolio. You cannot update a product that was shared with you.
    func updatePortfolio(input: UpdatePortfolioInput) async throws -> UpdatePortfolioOutputResponse
    {
        typealias updatePortfolioContinuation = CheckedContinuation<UpdatePortfolioOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePortfolioContinuation) in
            updatePortfolio(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified portfolio share. You can use this API to enable or disable TagOptions sharing for an existing portfolio share. The portfolio share cannot be updated if the  CreatePortfolioShare operation is IN_PROGRESS, as the share is not available to recipient entities. In this case, you must wait for the portfolio share to be COMPLETED. You must provide the accountId or organization node in the input, but not both. If the portfolio is shared to both an external account and an organization node, and both shares need to be updated, you must invoke UpdatePortfolioShare separately for each share type. This API cannot be used for removing the portfolio share. You must use DeletePortfolioShare API for that action.
    func updatePortfolioShare(input: UpdatePortfolioShareInput) async throws -> UpdatePortfolioShareOutputResponse
    {
        typealias updatePortfolioShareContinuation = CheckedContinuation<UpdatePortfolioShareOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePortfolioShareContinuation) in
            updatePortfolioShare(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified product.
    func updateProduct(input: UpdateProductInput) async throws -> UpdateProductOutputResponse
    {
        typealias updateProductContinuation = CheckedContinuation<UpdateProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProductContinuation) in
            updateProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Requests updates to the configuration of the specified provisioned product. If there are tags associated with the object, they cannot be updated or added. Depending on the specific updates requested, this operation can update with no interruption, with some interruption, or replace the provisioned product entirely. You can check the status of this request using [DescribeRecord].
    func updateProvisionedProduct(input: UpdateProvisionedProductInput) async throws -> UpdateProvisionedProductOutputResponse
    {
        typealias updateProvisionedProductContinuation = CheckedContinuation<UpdateProvisionedProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProvisionedProductContinuation) in
            updateProvisionedProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Requests updates to the properties of the specified provisioned product.
    func updateProvisionedProductProperties(input: UpdateProvisionedProductPropertiesInput) async throws -> UpdateProvisionedProductPropertiesOutputResponse
    {
        typealias updateProvisionedProductPropertiesContinuation = CheckedContinuation<UpdateProvisionedProductPropertiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProvisionedProductPropertiesContinuation) in
            updateProvisionedProductProperties(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified provisioning artifact (also known as a version) for the specified product. You cannot update a provisioning artifact for a product that was shared with you.
    func updateProvisioningArtifact(input: UpdateProvisioningArtifactInput) async throws -> UpdateProvisioningArtifactOutputResponse
    {
        typealias updateProvisioningArtifactContinuation = CheckedContinuation<UpdateProvisioningArtifactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProvisioningArtifactContinuation) in
            updateProvisioningArtifact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a self-service action.
    func updateServiceAction(input: UpdateServiceActionInput) async throws -> UpdateServiceActionOutputResponse
    {
        typealias updateServiceActionContinuation = CheckedContinuation<UpdateServiceActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateServiceActionContinuation) in
            updateServiceAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified TagOption.
    func updateTagOption(input: UpdateTagOptionInput) async throws -> UpdateTagOptionOutputResponse
    {
        typealias updateTagOptionContinuation = CheckedContinuation<UpdateTagOptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTagOptionContinuation) in
            updateTagOption(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
