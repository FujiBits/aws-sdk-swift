// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetMetricDataInputHeadersMiddleware: Middleware {
    public let id: String = "GetMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMetricDataInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMetricDataInput>
    public typealias MOutput = OperationOutput<GetMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMetricDataOutputError>
}

public struct GetMetricDataInputQueryItemMiddleware: Middleware {
    public let id: String = "GetMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMetricDataInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMetricDataInput>
    public typealias MOutput = OperationOutput<GetMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMetricDataOutputError>
}

public struct GetMetricDataInputBodyMiddleware: Middleware {
    public let id: String = "GetMetricDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMetricDataInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMetricDataInput>
    public typealias MOutput = OperationOutput<GetMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMetricDataOutputError>
}

extension GetMetricDataInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let labelOptions = labelOptions {
            try container.encode(labelOptions, forKey: Key("LabelOptions"))
        }
        if let maxDatapoints = maxDatapoints {
            try container.encode(maxDatapoints, forKey: Key("MaxDatapoints"))
        }
        if let metricDataQueries = metricDataQueries {
            var metricDataQueriesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("MetricDataQueries"))
            for (index0, metricdataquery0) in metricDataQueries.enumerated() {
                try metricDataQueriesContainer.encode(metricdataquery0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        if let scanBy = scanBy {
            try container.encode(scanBy, forKey: Key("ScanBy"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        try container.encode("GetMetricData", forKey:Key("Action"))
        try container.encode("2010-08-01", forKey:Key("Version"))
    }
}
