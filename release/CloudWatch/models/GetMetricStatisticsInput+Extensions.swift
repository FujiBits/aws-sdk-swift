// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetMetricStatisticsInputHeadersMiddleware: Middleware {
    public let id: String = "GetMetricStatisticsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMetricStatisticsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMetricStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMetricStatisticsInput>
    public typealias MOutput = OperationOutput<GetMetricStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMetricStatisticsOutputError>
}

public struct GetMetricStatisticsInputQueryItemMiddleware: Middleware {
    public let id: String = "GetMetricStatisticsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMetricStatisticsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMetricStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMetricStatisticsInput>
    public typealias MOutput = OperationOutput<GetMetricStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMetricStatisticsOutputError>
}

public struct GetMetricStatisticsInputBodyMiddleware: Middleware {
    public let id: String = "GetMetricStatisticsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMetricStatisticsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMetricStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMetricStatisticsInput>
    public typealias MOutput = OperationOutput<GetMetricStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMetricStatisticsOutputError>
}

extension GetMetricStatisticsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let extendedStatistics = extendedStatistics {
            var extendedStatisticsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ExtendedStatistics"))
            for (index0, extendedstatistic0) in extendedStatistics.enumerated() {
                try extendedStatisticsContainer.encode(extendedstatistic0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: Key("Namespace"))
        }
        if let period = period {
            try container.encode(period, forKey: Key("Period"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let statistics = statistics {
            var statisticsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Statistics"))
            for (index0, statistic0) in statistics.enumerated() {
                try statisticsContainer.encode(statistic0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let unit = unit {
            try container.encode(unit, forKey: Key("Unit"))
        }
        try container.encode("GetMetricStatistics", forKey:Key("Action"))
        try container.encode("2010-08-01", forKey:Key("Version"))
    }
}
