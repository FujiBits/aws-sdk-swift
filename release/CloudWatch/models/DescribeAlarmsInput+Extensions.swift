// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeAlarmsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeAlarmsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAlarmsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAlarmsInput>
    public typealias MOutput = OperationOutput<DescribeAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAlarmsOutputError>
}

public struct DescribeAlarmsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeAlarmsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAlarmsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAlarmsInput>
    public typealias MOutput = OperationOutput<DescribeAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAlarmsOutputError>
}

public struct DescribeAlarmsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeAlarmsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAlarmsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAlarmsInput>
    public typealias MOutput = OperationOutput<DescribeAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAlarmsOutputError>
}

extension DescribeAlarmsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let actionPrefix = actionPrefix {
            try container.encode(actionPrefix, forKey: Key("ActionPrefix"))
        }
        if let alarmNamePrefix = alarmNamePrefix {
            try container.encode(alarmNamePrefix, forKey: Key("AlarmNamePrefix"))
        }
        if let alarmNames = alarmNames {
            var alarmNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AlarmNames"))
            for (index0, alarmname0) in alarmNames.enumerated() {
                try alarmNamesContainer.encode(alarmname0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let alarmTypes = alarmTypes {
            var alarmTypesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AlarmTypes"))
            for (index0, alarmtype0) in alarmTypes.enumerated() {
                try alarmTypesContainer.encode(alarmtype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let childrenOfAlarmName = childrenOfAlarmName {
            try container.encode(childrenOfAlarmName, forKey: Key("ChildrenOfAlarmName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        if let parentsOfAlarmName = parentsOfAlarmName {
            try container.encode(parentsOfAlarmName, forKey: Key("ParentsOfAlarmName"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: Key("StateValue"))
        }
        try container.encode("DescribeAlarms", forKey:Key("Action"))
        try container.encode("2010-08-01", forKey:Key("Version"))
    }
}
