// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension CloudWatchClientTypes.AlarmHistoryItem: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName = "AlarmName"
        case alarmType = "AlarmType"
        case historyData = "HistoryData"
        case historyItemType = "HistoryItemType"
        case historySummary = "HistorySummary"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let alarmType = alarmType {
            try container.encode(alarmType, forKey: ClientRuntime.Key("AlarmType"))
        }
        if let historyData = historyData {
            try container.encode(historyData, forKey: ClientRuntime.Key("HistoryData"))
        }
        if let historyItemType = historyItemType {
            try container.encode(historyItemType, forKey: ClientRuntime.Key("HistoryItemType"))
        }
        if let historySummary = historySummary {
            try container.encode(historySummary, forKey: ClientRuntime.Key("HistorySummary"))
        }
        if let timestamp = timestamp {
            try container.encode(ClientRuntime.TimestampWrapper(timestamp, format: .dateTime), forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmTypeDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.AlarmType.self, forKey: .alarmType)
        alarmType = alarmTypeDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let historyItemTypeDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.HistoryItemType.self, forKey: .historyItemType)
        historyItemType = historyItemTypeDecoded
        let historySummaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .historySummary)
        historySummary = historySummaryDecoded
        let historyDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .historyData)
        historyData = historyDataDecoded
    }
}

extension CloudWatchClientTypes.AlarmHistoryItem: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AlarmHistoryItem(alarmName: \(Swift.String(describing: alarmName)), alarmType: \(Swift.String(describing: alarmType)), historyData: \(Swift.String(describing: historyData)), historyItemType: \(Swift.String(describing: historyItemType)), historySummary: \(Swift.String(describing: historySummary)), timestamp: \(Swift.String(describing: timestamp)))"}
}

extension CloudWatchClientTypes {
    /// <p>Represents the history of a specific alarm.</p>
    public struct AlarmHistoryItem: Swift.Equatable {
        /// <p>The descriptive name for the alarm.</p>
        public let alarmName: Swift.String?
        /// <p>The type of alarm, either metric alarm or composite alarm.</p>
        public let alarmType: CloudWatchClientTypes.AlarmType?
        /// <p>Data about the alarm, in JSON format.</p>
        public let historyData: Swift.String?
        /// <p>The type of alarm history item.</p>
        public let historyItemType: CloudWatchClientTypes.HistoryItemType?
        /// <p>A summary of the alarm history, in text format.</p>
        public let historySummary: Swift.String?
        /// <p>The time stamp for the alarm history item.</p>
        public let timestamp: ClientRuntime.Date?

        public init (
            alarmName: Swift.String? = nil,
            alarmType: CloudWatchClientTypes.AlarmType? = nil,
            historyData: Swift.String? = nil,
            historyItemType: CloudWatchClientTypes.HistoryItemType? = nil,
            historySummary: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.alarmName = alarmName
            self.alarmType = alarmType
            self.historyData = historyData
            self.historyItemType = historyItemType
            self.historySummary = historySummary
            self.timestamp = timestamp
        }
    }

}

extension CloudWatchClientTypes {
    public enum AlarmType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case compositealarm
        case metricalarm
        case sdkUnknown(Swift.String)

        public static var allCases: [AlarmType] {
            return [
                .compositealarm,
                .metricalarm,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .compositealarm: return "CompositeAlarm"
            case .metricalarm: return "MetricAlarm"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AlarmType(rawValue: rawValue) ?? AlarmType.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes.AnomalyDetector: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case stat = "Stat"
        case stateValue = "StateValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configuration = configuration {
            try container.encode(configuration, forKey: ClientRuntime.Key("Configuration"))
        }
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: ClientRuntime.Key("Stat"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: ClientRuntime.Key("StateValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let statDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stat)
        stat = statDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.AnomalyDetectorConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let stateValueDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.AnomalyDetectorStateValue.self, forKey: .stateValue)
        stateValue = stateValueDecoded
    }
}

extension CloudWatchClientTypes.AnomalyDetector: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AnomalyDetector(configuration: \(Swift.String(describing: configuration)), dimensions: \(Swift.String(describing: dimensions)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), stat: \(Swift.String(describing: stat)), stateValue: \(Swift.String(describing: stateValue)))"}
}

extension CloudWatchClientTypes {
    /// <p>An anomaly detection model associated with a particular CloudWatch metric and statistic. You
    /// 			can use the model to display a band of expected normal values when the metric is
    /// 			graphed.</p>
    public struct AnomalyDetector: Swift.Equatable {
        /// <p>The configuration specifies details about how the
        /// 		anomaly detection model is to be trained, including time ranges to
        /// 		exclude from use for training the model, and the time zone to use for
        /// 		the metric.</p>
        public let configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration?
        /// <p>The metric dimensions associated with the anomaly detection model.</p>
        public let dimensions: [CloudWatchClientTypes.Dimension]?
        /// <p>The name of the metric associated with the anomaly detection model.</p>
        public let metricName: Swift.String?
        /// <p>The namespace of the metric associated with the anomaly detection model.</p>
        public let namespace: Swift.String?
        /// <p>The statistic associated with the anomaly detection model.</p>
        public let stat: Swift.String?
        /// <p>The current status of the anomaly detector's training. The possible values are <code>TRAINED | PENDING_TRAINING | TRAINED_INSUFFICIENT_DATA</code>
        ///          </p>
        public let stateValue: CloudWatchClientTypes.AnomalyDetectorStateValue?

        public init (
            configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration? = nil,
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            stat: Swift.String? = nil,
            stateValue: CloudWatchClientTypes.AnomalyDetectorStateValue? = nil
        )
        {
            self.configuration = configuration
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.stat = stat
            self.stateValue = stateValue
        }
    }

}

extension CloudWatchClientTypes.AnomalyDetectorConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludedTimeRanges = "ExcludedTimeRanges"
        case metricTimezone = "MetricTimezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let excludedTimeRanges = excludedTimeRanges {
            var excludedTimeRangesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedTimeRanges"))
            for (index0, range0) in excludedTimeRanges.enumerated() {
                try excludedTimeRangesContainer.encode(range0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricTimezone = metricTimezone {
            try container.encode(metricTimezone, forKey: ClientRuntime.Key("MetricTimezone"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.excludedTimeRanges) {
            struct KeyVal0{struct member{}}
            let excludedTimeRangesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .excludedTimeRanges)
            if let excludedTimeRangesWrappedContainer = excludedTimeRangesWrappedContainer {
                let excludedTimeRangesContainer = try excludedTimeRangesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Range].self, forKey: .member)
                var excludedTimeRangesBuffer:[CloudWatchClientTypes.Range]? = nil
                if let excludedTimeRangesContainer = excludedTimeRangesContainer {
                    excludedTimeRangesBuffer = [CloudWatchClientTypes.Range]()
                    for structureContainer0 in excludedTimeRangesContainer {
                        excludedTimeRangesBuffer?.append(structureContainer0)
                    }
                }
                excludedTimeRanges = excludedTimeRangesBuffer
            } else {
                excludedTimeRanges = []
            }
        } else {
            excludedTimeRanges = nil
        }
        let metricTimezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricTimezone)
        metricTimezone = metricTimezoneDecoded
    }
}

extension CloudWatchClientTypes.AnomalyDetectorConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AnomalyDetectorConfiguration(excludedTimeRanges: \(Swift.String(describing: excludedTimeRanges)), metricTimezone: \(Swift.String(describing: metricTimezone)))"}
}

extension CloudWatchClientTypes {
    /// <p>The configuration specifies details about how the anomaly detection model is to be trained,
    /// 			including time ranges to exclude from use for training the model and the time zone to
    /// 			use for the metric.</p>
    public struct AnomalyDetectorConfiguration: Swift.Equatable {
        /// <p>An array of time ranges to exclude from use when the anomaly detection model is trained. Use
        /// 			this to make sure that events that could cause unusual values for the metric, such as
        /// 			deployments, aren't used when CloudWatch creates the model.</p>
        public let excludedTimeRanges: [CloudWatchClientTypes.Range]?
        /// <p>The time zone to use for the metric. This is useful to enable the model to automatically
        /// 			account for daylight savings time changes if the metric is sensitive to such time
        /// 			changes.</p>
        /// 		       <p>To specify a time zone, use the name of the time zone as specified in the standard tz database. For more information,
        /// 			see <a href="https://en.wikipedia.org/wiki/Tz_database">tz database</a>.</p>
        public let metricTimezone: Swift.String?

        public init (
            excludedTimeRanges: [CloudWatchClientTypes.Range]? = nil,
            metricTimezone: Swift.String? = nil
        )
        {
            self.excludedTimeRanges = excludedTimeRanges
            self.metricTimezone = metricTimezone
        }
    }

}

extension CloudWatchClientTypes {
    public enum AnomalyDetectorStateValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pendingTraining
        case trained
        case trainedInsufficientData
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalyDetectorStateValue] {
            return [
                .pendingTraining,
                .trained,
                .trainedInsufficientData,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pendingTraining: return "PENDING_TRAINING"
            case .trained: return "TRAINED"
            case .trainedInsufficientData: return "TRAINED_INSUFFICIENT_DATA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnomalyDetectorStateValue(rawValue: rawValue) ?? AnomalyDetectorStateValue.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case greaterthanorequaltothreshold
        case greaterthanthreshold
        case greaterthanupperthreshold
        case lessthanlowerorgreaterthanupperthreshold
        case lessthanlowerthreshold
        case lessthanorequaltothreshold
        case lessthanthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .greaterthanorequaltothreshold,
                .greaterthanthreshold,
                .greaterthanupperthreshold,
                .lessthanlowerorgreaterthanupperthreshold,
                .lessthanlowerthreshold,
                .lessthanorequaltothreshold,
                .lessthanthreshold,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .greaterthanorequaltothreshold: return "GreaterThanOrEqualToThreshold"
            case .greaterthanthreshold: return "GreaterThanThreshold"
            case .greaterthanupperthreshold: return "GreaterThanUpperThreshold"
            case .lessthanlowerorgreaterthanupperthreshold: return "LessThanLowerOrGreaterThanUpperThreshold"
            case .lessthanlowerthreshold: return "LessThanLowerThreshold"
            case .lessthanorequaltothreshold: return "LessThanOrEqualToThreshold"
            case .lessthanthreshold: return "LessThanThreshold"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes.CompositeAlarm: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsEnabled = "ActionsEnabled"
        case alarmActions = "AlarmActions"
        case alarmArn = "AlarmArn"
        case alarmConfigurationUpdatedTimestamp = "AlarmConfigurationUpdatedTimestamp"
        case alarmDescription = "AlarmDescription"
        case alarmName = "AlarmName"
        case alarmRule = "AlarmRule"
        case insufficientDataActions = "InsufficientDataActions"
        case oKActions = "OKActions"
        case stateReason = "StateReason"
        case stateReasonData = "StateReasonData"
        case stateUpdatedTimestamp = "StateUpdatedTimestamp"
        case stateValue = "StateValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionsEnabled = actionsEnabled {
            try container.encode(actionsEnabled, forKey: ClientRuntime.Key("ActionsEnabled"))
        }
        if let alarmActions = alarmActions {
            var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
            for (index0, resourcename0) in alarmActions.enumerated() {
                try alarmActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let alarmArn = alarmArn {
            try container.encode(alarmArn, forKey: ClientRuntime.Key("AlarmArn"))
        }
        if let alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(alarmConfigurationUpdatedTimestamp, format: .dateTime), forKey: ClientRuntime.Key("alarmConfigurationUpdatedTimestamp"))
        }
        if let alarmDescription = alarmDescription {
            try container.encode(alarmDescription, forKey: ClientRuntime.Key("AlarmDescription"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let alarmRule = alarmRule {
            try container.encode(alarmRule, forKey: ClientRuntime.Key("AlarmRule"))
        }
        if let insufficientDataActions = insufficientDataActions {
            var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
            for (index0, resourcename0) in insufficientDataActions.enumerated() {
                try insufficientDataActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let oKActions = oKActions {
            var oKActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
            for (index0, resourcename0) in oKActions.enumerated() {
                try oKActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let stateReason = stateReason {
            try container.encode(stateReason, forKey: ClientRuntime.Key("StateReason"))
        }
        if let stateReasonData = stateReasonData {
            try container.encode(stateReasonData, forKey: ClientRuntime.Key("StateReasonData"))
        }
        if let stateUpdatedTimestamp = stateUpdatedTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(stateUpdatedTimestamp, format: .dateTime), forKey: ClientRuntime.Key("stateUpdatedTimestamp"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: ClientRuntime.Key("StateValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .actionsEnabled)
        actionsEnabled = actionsEnabledDecoded
        if containerValues.contains(.alarmActions) {
            struct KeyVal0{struct member{}}
            let alarmActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmActions)
            if let alarmActionsWrappedContainer = alarmActionsWrappedContainer {
                let alarmActionsContainer = try alarmActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmActionsBuffer:[Swift.String]? = nil
                if let alarmActionsContainer = alarmActionsContainer {
                    alarmActionsBuffer = [Swift.String]()
                    for stringContainer0 in alarmActionsContainer {
                        alarmActionsBuffer?.append(stringContainer0)
                    }
                }
                alarmActions = alarmActionsBuffer
            } else {
                alarmActions = []
            }
        } else {
            alarmActions = nil
        }
        let alarmArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmArn)
        alarmArn = alarmArnDecoded
        let alarmConfigurationUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmConfigurationUpdatedTimestamp)
        var alarmConfigurationUpdatedTimestampBuffer:ClientRuntime.Date? = nil
        if let alarmConfigurationUpdatedTimestampDecoded = alarmConfigurationUpdatedTimestampDecoded {
            alarmConfigurationUpdatedTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(alarmConfigurationUpdatedTimestampDecoded, format: .dateTime)
        }
        alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestampBuffer
        let alarmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmDescription)
        alarmDescription = alarmDescriptionDecoded
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmRuleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmRule)
        alarmRule = alarmRuleDecoded
        if containerValues.contains(.insufficientDataActions) {
            struct KeyVal0{struct member{}}
            let insufficientDataActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insufficientDataActions)
            if let insufficientDataActionsWrappedContainer = insufficientDataActionsWrappedContainer {
                let insufficientDataActionsContainer = try insufficientDataActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var insufficientDataActionsBuffer:[Swift.String]? = nil
                if let insufficientDataActionsContainer = insufficientDataActionsContainer {
                    insufficientDataActionsBuffer = [Swift.String]()
                    for stringContainer0 in insufficientDataActionsContainer {
                        insufficientDataActionsBuffer?.append(stringContainer0)
                    }
                }
                insufficientDataActions = insufficientDataActionsBuffer
            } else {
                insufficientDataActions = []
            }
        } else {
            insufficientDataActions = nil
        }
        if containerValues.contains(.oKActions) {
            struct KeyVal0{struct member{}}
            let oKActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .oKActions)
            if let oKActionsWrappedContainer = oKActionsWrappedContainer {
                let oKActionsContainer = try oKActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var oKActionsBuffer:[Swift.String]? = nil
                if let oKActionsContainer = oKActionsContainer {
                    oKActionsBuffer = [Swift.String]()
                    for stringContainer0 in oKActionsContainer {
                        oKActionsBuffer?.append(stringContainer0)
                    }
                }
                oKActions = oKActionsBuffer
            } else {
                oKActions = []
            }
        } else {
            oKActions = nil
        }
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let stateReasonDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReasonData)
        stateReasonData = stateReasonDataDecoded
        let stateUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateUpdatedTimestamp)
        var stateUpdatedTimestampBuffer:ClientRuntime.Date? = nil
        if let stateUpdatedTimestampDecoded = stateUpdatedTimestampDecoded {
            stateUpdatedTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(stateUpdatedTimestampDecoded, format: .dateTime)
        }
        stateUpdatedTimestamp = stateUpdatedTimestampBuffer
        let stateValueDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StateValue.self, forKey: .stateValue)
        stateValue = stateValueDecoded
    }
}

extension CloudWatchClientTypes.CompositeAlarm: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompositeAlarm(actionsEnabled: \(Swift.String(describing: actionsEnabled)), alarmActions: \(Swift.String(describing: alarmActions)), alarmArn: \(Swift.String(describing: alarmArn)), alarmConfigurationUpdatedTimestamp: \(Swift.String(describing: alarmConfigurationUpdatedTimestamp)), alarmDescription: \(Swift.String(describing: alarmDescription)), alarmName: \(Swift.String(describing: alarmName)), alarmRule: \(Swift.String(describing: alarmRule)), insufficientDataActions: \(Swift.String(describing: insufficientDataActions)), oKActions: \(Swift.String(describing: oKActions)), stateReason: \(Swift.String(describing: stateReason)), stateReasonData: \(Swift.String(describing: stateReasonData)), stateUpdatedTimestamp: \(Swift.String(describing: stateUpdatedTimestamp)), stateValue: \(Swift.String(describing: stateValue)))"}
}

extension CloudWatchClientTypes {
    /// <p>The details about a composite alarm.</p>
    public struct CompositeAlarm: Swift.Equatable {
        /// <p>Indicates whether actions should be executed during any changes to the alarm state.</p>
        public let actionsEnabled: Swift.Bool?
        /// <p>The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
        public let alarmActions: [Swift.String]?
        /// <p>The Amazon Resource Name (ARN) of the alarm.</p>
        public let alarmArn: Swift.String?
        /// <p>The time stamp of the last update to the alarm configuration.</p>
        public let alarmConfigurationUpdatedTimestamp: ClientRuntime.Date?
        /// <p>The description of the alarm.</p>
        public let alarmDescription: Swift.String?
        /// <p>The name of the alarm.</p>
        public let alarmName: Swift.String?
        /// <p>The rule that this alarm uses to evaluate its alarm state.</p>
        public let alarmRule: Swift.String?
        /// <p>The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
        public let insufficientDataActions: [Swift.String]?
        /// <p>The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
        public let oKActions: [Swift.String]?
        /// <p>An explanation for the alarm state, in text format.</p>
        public let stateReason: Swift.String?
        /// <p>An explanation for the alarm state, in JSON format.</p>
        public let stateReasonData: Swift.String?
        /// <p>The time stamp of the last update to the alarm state.</p>
        public let stateUpdatedTimestamp: ClientRuntime.Date?
        /// <p>The state value for the alarm.</p>
        public let stateValue: CloudWatchClientTypes.StateValue?

        public init (
            actionsEnabled: Swift.Bool? = nil,
            alarmActions: [Swift.String]? = nil,
            alarmArn: Swift.String? = nil,
            alarmConfigurationUpdatedTimestamp: ClientRuntime.Date? = nil,
            alarmDescription: Swift.String? = nil,
            alarmName: Swift.String? = nil,
            alarmRule: Swift.String? = nil,
            insufficientDataActions: [Swift.String]? = nil,
            oKActions: [Swift.String]? = nil,
            stateReason: Swift.String? = nil,
            stateReasonData: Swift.String? = nil,
            stateUpdatedTimestamp: ClientRuntime.Date? = nil,
            stateValue: CloudWatchClientTypes.StateValue? = nil
        )
        {
            self.actionsEnabled = actionsEnabled
            self.alarmActions = alarmActions
            self.alarmArn = alarmArn
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.alarmRule = alarmRule
            self.insufficientDataActions = insufficientDataActions
            self.oKActions = oKActions
            self.stateReason = stateReason
            self.stateReasonData = stateReasonData
            self.stateUpdatedTimestamp = stateUpdatedTimestamp
            self.stateValue = stateValue
        }
    }

}

extension ConcurrentModificationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConcurrentModificationException(message: \(Swift.String(describing: message)))"}
}

extension ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ConcurrentModificationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>More than one process tried to modify a resource at the same time.</p>
public struct ConcurrentModificationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes.DashboardEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardArn = "DashboardArn"
        case dashboardName = "DashboardName"
        case lastModified = "LastModified"
        case size = "Size"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dashboardArn = dashboardArn {
            try container.encode(dashboardArn, forKey: ClientRuntime.Key("DashboardArn"))
        }
        if let dashboardName = dashboardName {
            try container.encode(dashboardName, forKey: ClientRuntime.Key("DashboardName"))
        }
        if let lastModified = lastModified {
            try container.encode(ClientRuntime.TimestampWrapper(lastModified, format: .dateTime), forKey: ClientRuntime.Key("lastModified"))
        }
        if size != 0 {
            try container.encode(size, forKey: ClientRuntime.Key("Size"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardName)
        dashboardName = dashboardNameDecoded
        let dashboardArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardArn)
        dashboardArn = dashboardArnDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        var lastModifiedBuffer:ClientRuntime.Date? = nil
        if let lastModifiedDecoded = lastModifiedDecoded {
            lastModifiedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastModifiedDecoded, format: .dateTime)
        }
        lastModified = lastModifiedBuffer
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
    }
}

extension CloudWatchClientTypes.DashboardEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DashboardEntry(dashboardArn: \(Swift.String(describing: dashboardArn)), dashboardName: \(Swift.String(describing: dashboardName)), lastModified: \(Swift.String(describing: lastModified)), size: \(Swift.String(describing: size)))"}
}

extension CloudWatchClientTypes {
    /// <p>Represents a specific dashboard.</p>
    public struct DashboardEntry: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
        public let dashboardArn: Swift.String?
        /// <p>The name of the dashboard.</p>
        public let dashboardName: Swift.String?
        /// <p>The time stamp of when the dashboard was last modified, either by an API call or
        /// 			through the console. This number is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
        public let lastModified: ClientRuntime.Date?
        /// <p>The size of the dashboard, in bytes.</p>
        public let size: Swift.Int

        public init (
            dashboardArn: Swift.String? = nil,
            dashboardName: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil,
            size: Swift.Int = 0
        )
        {
            self.dashboardArn = dashboardArn
            self.dashboardName = dashboardName
            self.lastModified = lastModified
            self.size = size
        }
    }

}

extension DashboardInvalidInputError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DashboardInvalidInputError(dashboardValidationMessages: \(Swift.String(describing: dashboardValidationMessages)), message: \(Swift.String(describing: message)))"}
}

extension DashboardInvalidInputError: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<DashboardInvalidInputErrorBody> = try responseDecoder.decode(responseBody: data)
            self.dashboardValidationMessages = output.error.dashboardValidationMessages
            self.message = output.error.message
        } else {
            self.dashboardValidationMessages = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Some part of the dashboard data is invalid.</p>
public struct DashboardInvalidInputError: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]?
    public var message: Swift.String?

    public init (
        dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]? = nil,
        message: Swift.String? = nil
    )
    {
        self.dashboardValidationMessages = dashboardValidationMessages
        self.message = message
    }
}

struct DashboardInvalidInputErrorBody: Swift.Equatable {
    public let message: Swift.String?
    public let dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]?
}

extension DashboardInvalidInputErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardValidationMessages
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        if containerValues.contains(.dashboardValidationMessages) {
            struct KeyVal0{struct member{}}
            let dashboardValidationMessagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dashboardValidationMessages)
            if let dashboardValidationMessagesWrappedContainer = dashboardValidationMessagesWrappedContainer {
                let dashboardValidationMessagesContainer = try dashboardValidationMessagesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.DashboardValidationMessage].self, forKey: .member)
                var dashboardValidationMessagesBuffer:[CloudWatchClientTypes.DashboardValidationMessage]? = nil
                if let dashboardValidationMessagesContainer = dashboardValidationMessagesContainer {
                    dashboardValidationMessagesBuffer = [CloudWatchClientTypes.DashboardValidationMessage]()
                    for structureContainer0 in dashboardValidationMessagesContainer {
                        dashboardValidationMessagesBuffer?.append(structureContainer0)
                    }
                }
                dashboardValidationMessages = dashboardValidationMessagesBuffer
            } else {
                dashboardValidationMessages = []
            }
        } else {
            dashboardValidationMessages = nil
        }
    }
}

extension DashboardNotFoundError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DashboardNotFoundError(message: \(Swift.String(describing: message)))"}
}

extension DashboardNotFoundError: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<DashboardNotFoundErrorBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified dashboard does not exist.</p>
public struct DashboardNotFoundError: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DashboardNotFoundErrorBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DashboardNotFoundErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes.DashboardValidationMessage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataPath = "DataPath"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dataPath = dataPath {
            try container.encode(dataPath, forKey: ClientRuntime.Key("DataPath"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataPath)
        dataPath = dataPathDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes.DashboardValidationMessage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DashboardValidationMessage(dataPath: \(Swift.String(describing: dataPath)), message: \(Swift.String(describing: message)))"}
}

extension CloudWatchClientTypes {
    /// <p>An error or warning for the operation.</p>
    public struct DashboardValidationMessage: Swift.Equatable {
        /// <p>The data path related to the message.</p>
        public let dataPath: Swift.String?
        /// <p>A message describing the error or warning.</p>
        public let message: Swift.String?

        public init (
            dataPath: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.dataPath = dataPath
            self.message = message
        }
    }

}

extension CloudWatchClientTypes.Datapoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case average = "Average"
        case extendedStatistics = "ExtendedStatistics"
        case maximum = "Maximum"
        case minimum = "Minimum"
        case sampleCount = "SampleCount"
        case sum = "Sum"
        case timestamp = "Timestamp"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let average = average {
            try container.encode(average, forKey: ClientRuntime.Key("Average"))
        }
        if let extendedStatistics = extendedStatistics {
            var extendedStatisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtendedStatistics"))
            for (index0, element0) in extendedStatistics.sorted(by: { $0.key < $1.key }).enumerated() {
                let extendedstatisticKey0 = element0.key
                let datapointvalueValue0 = element0.value
                var entryContainer0 = extendedStatisticsContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(extendedstatisticKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(datapointvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let maximum = maximum {
            try container.encode(maximum, forKey: ClientRuntime.Key("Maximum"))
        }
        if let minimum = minimum {
            try container.encode(minimum, forKey: ClientRuntime.Key("Minimum"))
        }
        if let sampleCount = sampleCount {
            try container.encode(sampleCount, forKey: ClientRuntime.Key("SampleCount"))
        }
        if let sum = sum {
            try container.encode(sum, forKey: ClientRuntime.Key("Sum"))
        }
        if let timestamp = timestamp {
            try container.encode(ClientRuntime.TimestampWrapper(timestamp, format: .dateTime), forKey: ClientRuntime.Key("timestamp"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let sampleCountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleCount)
        sampleCount = sampleCountDecoded
        let averageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .average)
        average = averageDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maximum)
        maximum = maximumDecoded
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
        if containerValues.contains(.extendedStatistics) {
            struct KeyVal0{struct key{}; struct value{}}
            let extendedStatisticsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.Double, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .extendedStatistics)
            if let extendedStatisticsWrappedContainer = extendedStatisticsWrappedContainer {
                let extendedStatisticsContainer = try extendedStatisticsWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.Double, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var extendedStatisticsBuffer: [Swift.String:Swift.Double]? = nil
                if let extendedStatisticsContainer = extendedStatisticsContainer {
                    extendedStatisticsBuffer = [Swift.String:Swift.Double]()
                    for doubleContainer0 in extendedStatisticsContainer {
                        extendedStatisticsBuffer?[doubleContainer0.key] = doubleContainer0.value
                    }
                }
                extendedStatistics = extendedStatisticsBuffer
            } else {
                extendedStatistics = [:]
            }
        } else {
            extendedStatistics = nil
        }
    }
}

extension CloudWatchClientTypes.Datapoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Datapoint(average: \(Swift.String(describing: average)), extendedStatistics: \(Swift.String(describing: extendedStatistics)), maximum: \(Swift.String(describing: maximum)), minimum: \(Swift.String(describing: minimum)), sampleCount: \(Swift.String(describing: sampleCount)), sum: \(Swift.String(describing: sum)), timestamp: \(Swift.String(describing: timestamp)), unit: \(Swift.String(describing: unit)))"}
}

extension CloudWatchClientTypes {
    /// <p>Encapsulates the statistical data that CloudWatch computes from metric data.</p>
    public struct Datapoint: Swift.Equatable {
        /// <p>The average of the metric values that correspond to the data point.</p>
        public let average: Swift.Double?
        /// <p>The percentile statistic for the data point.</p>
        public let extendedStatistics: [Swift.String:Swift.Double]?
        /// <p>The maximum metric value for the data point.</p>
        public let maximum: Swift.Double?
        /// <p>The minimum metric value for the data point.</p>
        public let minimum: Swift.Double?
        /// <p>The number of metric values that contributed to the aggregate value of this
        /// 			data point.</p>
        public let sampleCount: Swift.Double?
        /// <p>The sum of the metric values for the data point.</p>
        public let sum: Swift.Double?
        /// <p>The time stamp used for the data point.</p>
        public let timestamp: ClientRuntime.Date?
        /// <p>The standard unit for the data point.</p>
        public let unit: CloudWatchClientTypes.StandardUnit?

        public init (
            average: Swift.Double? = nil,
            extendedStatistics: [Swift.String:Swift.Double]? = nil,
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil,
            timestamp: ClientRuntime.Date? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil
        )
        {
            self.average = average
            self.extendedStatistics = extendedStatistics
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.unit = unit
        }
    }

}

public struct DeleteAlarmsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAlarmsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAlarmsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAlarmsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAlarmsOutputError>
}

extension DeleteAlarmsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAlarmsInput(alarmNames: \(Swift.String(describing: alarmNames)))"}
}

extension DeleteAlarmsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmNames = alarmNames {
            var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
            for (index0, alarmname0) in alarmNames.enumerated() {
                try alarmNamesContainer.encode(alarmname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DeleteAlarms", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteAlarmsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAlarmsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAlarmsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAlarmsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAlarmsOutputError>
}

public struct DeleteAlarmsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAlarmsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAlarmsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAlarmsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAlarmsOutputError>
}

public struct DeleteAlarmsInput: Swift.Equatable {
    /// <p>The alarms to be deleted.</p>
    public let alarmNames: [Swift.String]?

    public init (
        alarmNames: [Swift.String]? = nil
    )
    {
        self.alarmNames = alarmNames
    }
}

extension DeleteAlarmsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteAlarmsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAlarmsOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAlarmsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAlarmsOutputResponse()"}
}

extension DeleteAlarmsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAlarmsOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteAlarmsOutputResponseBody: Swift.Equatable {
}

extension DeleteAlarmsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteAnomalyDetectorInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAnomalyDetectorInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAnomalyDetectorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAnomalyDetectorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAnomalyDetectorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAnomalyDetectorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAnomalyDetectorOutputError>
}

extension DeleteAnomalyDetectorInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAnomalyDetectorInput(dimensions: \(Swift.String(describing: dimensions)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), stat: \(Swift.String(describing: stat)))"}
}

extension DeleteAnomalyDetectorInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: ClientRuntime.Key("Stat"))
        }
        try container.encode("DeleteAnomalyDetector", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteAnomalyDetectorInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAnomalyDetectorInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAnomalyDetectorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAnomalyDetectorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAnomalyDetectorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAnomalyDetectorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAnomalyDetectorOutputError>
}

public struct DeleteAnomalyDetectorInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAnomalyDetectorInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAnomalyDetectorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAnomalyDetectorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAnomalyDetectorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAnomalyDetectorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAnomalyDetectorOutputError>
}

public struct DeleteAnomalyDetectorInput: Swift.Equatable {
    /// <p>The metric dimensions associated with the anomaly detection model to delete.</p>
    public let dimensions: [CloudWatchClientTypes.Dimension]?
    /// <p>The metric name associated with the anomaly detection model to delete.</p>
    public let metricName: Swift.String?
    /// <p>The namespace associated with the anomaly detection model to delete.</p>
    public let namespace: Swift.String?
    /// <p>The statistic associated with the anomaly detection model to delete.</p>
    public let stat: Swift.String?

    public init (
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        stat: Swift.String? = nil
    )
    {
        self.dimensions = dimensions
        self.metricName = metricName
        self.namespace = namespace
        self.stat = stat
    }
}

extension DeleteAnomalyDetectorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteAnomalyDetectorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAnomalyDetectorOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAnomalyDetectorOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAnomalyDetectorOutputResponse()"}
}

extension DeleteAnomalyDetectorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAnomalyDetectorOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteAnomalyDetectorOutputResponseBody: Swift.Equatable {
}

extension DeleteAnomalyDetectorOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteDashboardsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDashboardsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDashboardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDashboardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDashboardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDashboardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDashboardsOutputError>
}

extension DeleteDashboardsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDashboardsInput(dashboardNames: \(Swift.String(describing: dashboardNames)))"}
}

extension DeleteDashboardsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dashboardNames = dashboardNames {
            var dashboardNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DashboardNames"))
            for (index0, dashboardname0) in dashboardNames.enumerated() {
                try dashboardNamesContainer.encode(dashboardname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DeleteDashboards", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteDashboardsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDashboardsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDashboardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDashboardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDashboardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDashboardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDashboardsOutputError>
}

public struct DeleteDashboardsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDashboardsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDashboardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDashboardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDashboardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDashboardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDashboardsOutputError>
}

public struct DeleteDashboardsInput: Swift.Equatable {
    /// <p>The dashboards to be deleted. This parameter is required.</p>
    public let dashboardNames: [Swift.String]?

    public init (
        dashboardNames: [Swift.String]? = nil
    )
    {
        self.dashboardNames = dashboardNames
    }
}

extension DeleteDashboardsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteDashboardsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DashboardNotFoundError" : self = .dashboardNotFoundError(try DashboardNotFoundError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDashboardsOutputError: Swift.Error, Swift.Equatable {
    case dashboardNotFoundError(DashboardNotFoundError)
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDashboardsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDashboardsOutputResponse()"}
}

extension DeleteDashboardsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDashboardsOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteDashboardsOutputResponseBody: Swift.Equatable {
}

extension DeleteDashboardsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteInsightRulesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInsightRulesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInsightRulesOutputError>
}

extension DeleteInsightRulesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInsightRulesInput(ruleNames: \(Swift.String(describing: ruleNames)))"}
}

extension DeleteInsightRulesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleNames = ruleNames {
            var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
            for (index0, insightrulename0) in ruleNames.enumerated() {
                try ruleNamesContainer.encode(insightrulename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DeleteInsightRules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteInsightRulesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInsightRulesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInsightRulesOutputError>
}

public struct DeleteInsightRulesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInsightRulesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInsightRulesOutputError>
}

public struct DeleteInsightRulesInput: Swift.Equatable {
    /// <p>An array of the rule names to delete. If you need to find out the names of your rules, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</p>
    public let ruleNames: [Swift.String]?

    public init (
        ruleNames: [Swift.String]? = nil
    )
    {
        self.ruleNames = ruleNames
    }
}

extension DeleteInsightRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteInsightRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInsightRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInsightRulesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInsightRulesOutputResponse(failures: \(Swift.String(describing: failures)))"}
}

extension DeleteInsightRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteInsightRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failures = output.failures
        } else {
            self.failures = nil
        }
    }
}

public struct DeleteInsightRulesOutputResponse: Swift.Equatable {
    /// <p>An array listing the rules that could not be deleted. You cannot delete built-in rules.</p>
    public let failures: [CloudWatchClientTypes.PartialFailure]?

    public init (
        failures: [CloudWatchClientTypes.PartialFailure]? = nil
    )
    {
        self.failures = failures
    }
}

struct DeleteInsightRulesOutputResponseBody: Swift.Equatable {
    public let failures: [CloudWatchClientTypes.PartialFailure]?
}

extension DeleteInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failures = "Failures"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteInsightRulesResult"))
        if containerValues.contains(.failures) {
            struct KeyVal0{struct member{}}
            let failuresWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failures)
            if let failuresWrappedContainer = failuresWrappedContainer {
                let failuresContainer = try failuresWrappedContainer.decodeIfPresent([CloudWatchClientTypes.PartialFailure].self, forKey: .member)
                var failuresBuffer:[CloudWatchClientTypes.PartialFailure]? = nil
                if let failuresContainer = failuresContainer {
                    failuresBuffer = [CloudWatchClientTypes.PartialFailure]()
                    for structureContainer0 in failuresContainer {
                        failuresBuffer?.append(structureContainer0)
                    }
                }
                failures = failuresBuffer
            } else {
                failures = []
            }
        } else {
            failures = nil
        }
    }
}

public struct DeleteMetricStreamInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMetricStreamInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMetricStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMetricStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMetricStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMetricStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMetricStreamOutputError>
}

extension DeleteMetricStreamInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMetricStreamInput(name: \(Swift.String(describing: name)))"}
}

extension DeleteMetricStreamInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        try container.encode("DeleteMetricStream", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteMetricStreamInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMetricStreamInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMetricStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMetricStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMetricStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMetricStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMetricStreamOutputError>
}

public struct DeleteMetricStreamInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMetricStreamInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMetricStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMetricStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMetricStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMetricStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMetricStreamOutputError>
}

public struct DeleteMetricStreamInput: Swift.Equatable {
    /// <p>The name of the metric stream to delete.</p>
    public let name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension DeleteMetricStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteMetricStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMetricStreamOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMetricStreamOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMetricStreamOutputResponse()"}
}

extension DeleteMetricStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMetricStreamOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteMetricStreamOutputResponseBody: Swift.Equatable {
}

extension DeleteMetricStreamOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeAlarmHistoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAlarmHistoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAlarmHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAlarmHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAlarmHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAlarmHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAlarmHistoryOutputError>
}

extension DescribeAlarmHistoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAlarmHistoryInput(alarmName: \(Swift.String(describing: alarmName)), alarmTypes: \(Swift.String(describing: alarmTypes)), endDate: \(Swift.String(describing: endDate)), historyItemType: \(Swift.String(describing: historyItemType)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)), scanBy: \(Swift.String(describing: scanBy)), startDate: \(Swift.String(describing: startDate)))"}
}

extension DescribeAlarmHistoryInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let alarmTypes = alarmTypes {
            var alarmTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmTypes"))
            for (index0, alarmtype0) in alarmTypes.enumerated() {
                try alarmTypesContainer.encode(alarmtype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let endDate = endDate {
            try container.encode(ClientRuntime.TimestampWrapper(endDate, format: .dateTime), forKey: ClientRuntime.Key("endDate"))
        }
        if let historyItemType = historyItemType {
            try container.encode(historyItemType, forKey: ClientRuntime.Key("HistoryItemType"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let scanBy = scanBy {
            try container.encode(scanBy, forKey: ClientRuntime.Key("ScanBy"))
        }
        if let startDate = startDate {
            try container.encode(ClientRuntime.TimestampWrapper(startDate, format: .dateTime), forKey: ClientRuntime.Key("startDate"))
        }
        try container.encode("DescribeAlarmHistory", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeAlarmHistoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAlarmHistoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAlarmHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAlarmHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAlarmHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAlarmHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAlarmHistoryOutputError>
}

public struct DescribeAlarmHistoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAlarmHistoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAlarmHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAlarmHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAlarmHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAlarmHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAlarmHistoryOutputError>
}

public struct DescribeAlarmHistoryInput: Swift.Equatable {
    /// <p>The name of the alarm.</p>
    public let alarmName: Swift.String?
    /// <p>Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter,
    /// 			only metric alarms are returned.</p>
    public let alarmTypes: [CloudWatchClientTypes.AlarmType]?
    /// <p>The ending date to retrieve alarm history.</p>
    public let endDate: ClientRuntime.Date?
    /// <p>The type of alarm histories to retrieve.</p>
    public let historyItemType: CloudWatchClientTypes.HistoryItemType?
    /// <p>The maximum number of alarm history records to retrieve.</p>
    public let maxRecords: Swift.Int?
    /// <p>The token returned by a previous call to indicate that there is more data
    /// 			available.</p>
    public let nextToken: Swift.String?
    /// <p>Specified whether to return the newest or oldest alarm history first. Specify <code>TimestampDescending</code> to have the newest
    /// 		event history returned first, and specify <code>TimestampAscending</code> to have the oldest history returned first.</p>
    public let scanBy: CloudWatchClientTypes.ScanBy?
    /// <p>The starting date to retrieve alarm history.</p>
    public let startDate: ClientRuntime.Date?

    public init (
        alarmName: Swift.String? = nil,
        alarmTypes: [CloudWatchClientTypes.AlarmType]? = nil,
        endDate: ClientRuntime.Date? = nil,
        historyItemType: CloudWatchClientTypes.HistoryItemType? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scanBy: CloudWatchClientTypes.ScanBy? = nil,
        startDate: ClientRuntime.Date? = nil
    )
    {
        self.alarmName = alarmName
        self.alarmTypes = alarmTypes
        self.endDate = endDate
        self.historyItemType = historyItemType
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.scanBy = scanBy
        self.startDate = startDate
    }
}

extension DescribeAlarmHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAlarmHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAlarmHistoryOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAlarmHistoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAlarmHistoryOutputResponse(alarmHistoryItems: \(Swift.String(describing: alarmHistoryItems)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAlarmHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAlarmHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alarmHistoryItems = output.alarmHistoryItems
            self.nextToken = output.nextToken
        } else {
            self.alarmHistoryItems = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAlarmHistoryOutputResponse: Swift.Equatable {
    /// <p>The alarm histories, in JSON format.</p>
    public let alarmHistoryItems: [CloudWatchClientTypes.AlarmHistoryItem]?
    /// <p>The token that marks the start of the next batch of returned results.</p>
    public let nextToken: Swift.String?

    public init (
        alarmHistoryItems: [CloudWatchClientTypes.AlarmHistoryItem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.alarmHistoryItems = alarmHistoryItems
        self.nextToken = nextToken
    }
}

struct DescribeAlarmHistoryOutputResponseBody: Swift.Equatable {
    public let alarmHistoryItems: [CloudWatchClientTypes.AlarmHistoryItem]?
    public let nextToken: Swift.String?
}

extension DescribeAlarmHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmHistoryItems = "AlarmHistoryItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAlarmHistoryResult"))
        if containerValues.contains(.alarmHistoryItems) {
            struct KeyVal0{struct member{}}
            let alarmHistoryItemsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmHistoryItems)
            if let alarmHistoryItemsWrappedContainer = alarmHistoryItemsWrappedContainer {
                let alarmHistoryItemsContainer = try alarmHistoryItemsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.AlarmHistoryItem].self, forKey: .member)
                var alarmHistoryItemsBuffer:[CloudWatchClientTypes.AlarmHistoryItem]? = nil
                if let alarmHistoryItemsContainer = alarmHistoryItemsContainer {
                    alarmHistoryItemsBuffer = [CloudWatchClientTypes.AlarmHistoryItem]()
                    for structureContainer0 in alarmHistoryItemsContainer {
                        alarmHistoryItemsBuffer?.append(structureContainer0)
                    }
                }
                alarmHistoryItems = alarmHistoryItemsBuffer
            } else {
                alarmHistoryItems = []
            }
        } else {
            alarmHistoryItems = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeAlarmsForMetricInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAlarmsForMetricInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAlarmsForMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAlarmsForMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAlarmsForMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAlarmsForMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAlarmsForMetricOutputError>
}

extension DescribeAlarmsForMetricInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAlarmsForMetricInput(dimensions: \(Swift.String(describing: dimensions)), extendedStatistic: \(Swift.String(describing: extendedStatistic)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), period: \(Swift.String(describing: period)), statistic: \(Swift.String(describing: statistic)), unit: \(Swift.String(describing: unit)))"}
}

extension DescribeAlarmsForMetricInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let extendedStatistic = extendedStatistic {
            try container.encode(extendedStatistic, forKey: ClientRuntime.Key("ExtendedStatistic"))
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
        try container.encode("DescribeAlarmsForMetric", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeAlarmsForMetricInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAlarmsForMetricInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAlarmsForMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAlarmsForMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAlarmsForMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAlarmsForMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAlarmsForMetricOutputError>
}

public struct DescribeAlarmsForMetricInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAlarmsForMetricInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAlarmsForMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAlarmsForMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAlarmsForMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAlarmsForMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAlarmsForMetricOutputError>
}

public struct DescribeAlarmsForMetricInput: Swift.Equatable {
    /// <p>The dimensions associated with the metric. If the metric has any associated
    /// 			dimensions, you must specify them in order for the call to succeed.</p>
    public let dimensions: [CloudWatchClientTypes.Dimension]?
    /// <p>The percentile statistic for the metric. Specify a value between
    /// 		    p0.0 and p100.</p>
    public let extendedStatistic: Swift.String?
    /// <p>The name of the metric.</p>
    public let metricName: Swift.String?
    /// <p>The namespace of the metric.</p>
    public let namespace: Swift.String?
    /// <p>The period, in seconds, over which the statistic is applied.</p>
    public let period: Swift.Int?
    /// <p>The statistic for the metric, other than percentiles.
    /// 		    For percentile statistics, use <code>ExtendedStatistics</code>.</p>
    public let statistic: CloudWatchClientTypes.Statistic?
    /// <p>The unit for the metric.</p>
    public let unit: CloudWatchClientTypes.StandardUnit?

    public init (
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        extendedStatistic: Swift.String? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        period: Swift.Int? = nil,
        statistic: CloudWatchClientTypes.Statistic? = nil,
        unit: CloudWatchClientTypes.StandardUnit? = nil
    )
    {
        self.dimensions = dimensions
        self.extendedStatistic = extendedStatistic
        self.metricName = metricName
        self.namespace = namespace
        self.period = period
        self.statistic = statistic
        self.unit = unit
    }
}

extension DescribeAlarmsForMetricOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAlarmsForMetricOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAlarmsForMetricOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAlarmsForMetricOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAlarmsForMetricOutputResponse(metricAlarms: \(Swift.String(describing: metricAlarms)))"}
}

extension DescribeAlarmsForMetricOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAlarmsForMetricOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricAlarms = output.metricAlarms
        } else {
            self.metricAlarms = nil
        }
    }
}

public struct DescribeAlarmsForMetricOutputResponse: Swift.Equatable {
    /// <p>The information for each alarm with the specified metric.</p>
    public let metricAlarms: [CloudWatchClientTypes.MetricAlarm]?

    public init (
        metricAlarms: [CloudWatchClientTypes.MetricAlarm]? = nil
    )
    {
        self.metricAlarms = metricAlarms
    }
}

struct DescribeAlarmsForMetricOutputResponseBody: Swift.Equatable {
    public let metricAlarms: [CloudWatchClientTypes.MetricAlarm]?
}

extension DescribeAlarmsForMetricOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricAlarms = "MetricAlarms"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAlarmsForMetricResult"))
        if containerValues.contains(.metricAlarms) {
            struct KeyVal0{struct member{}}
            let metricAlarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricAlarms)
            if let metricAlarmsWrappedContainer = metricAlarmsWrappedContainer {
                let metricAlarmsContainer = try metricAlarmsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricAlarm].self, forKey: .member)
                var metricAlarmsBuffer:[CloudWatchClientTypes.MetricAlarm]? = nil
                if let metricAlarmsContainer = metricAlarmsContainer {
                    metricAlarmsBuffer = [CloudWatchClientTypes.MetricAlarm]()
                    for structureContainer0 in metricAlarmsContainer {
                        metricAlarmsBuffer?.append(structureContainer0)
                    }
                }
                metricAlarms = metricAlarmsBuffer
            } else {
                metricAlarms = []
            }
        } else {
            metricAlarms = nil
        }
    }
}

public struct DescribeAlarmsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAlarmsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAlarmsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAlarmsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAlarmsOutputError>
}

extension DescribeAlarmsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAlarmsInput(actionPrefix: \(Swift.String(describing: actionPrefix)), alarmNamePrefix: \(Swift.String(describing: alarmNamePrefix)), alarmNames: \(Swift.String(describing: alarmNames)), alarmTypes: \(Swift.String(describing: alarmTypes)), childrenOfAlarmName: \(Swift.String(describing: childrenOfAlarmName)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)), parentsOfAlarmName: \(Swift.String(describing: parentsOfAlarmName)), stateValue: \(Swift.String(describing: stateValue)))"}
}

extension DescribeAlarmsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionPrefix = actionPrefix {
            try container.encode(actionPrefix, forKey: ClientRuntime.Key("ActionPrefix"))
        }
        if let alarmNamePrefix = alarmNamePrefix {
            try container.encode(alarmNamePrefix, forKey: ClientRuntime.Key("AlarmNamePrefix"))
        }
        if let alarmNames = alarmNames {
            var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
            for (index0, alarmname0) in alarmNames.enumerated() {
                try alarmNamesContainer.encode(alarmname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let alarmTypes = alarmTypes {
            var alarmTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmTypes"))
            for (index0, alarmtype0) in alarmTypes.enumerated() {
                try alarmTypesContainer.encode(alarmtype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let childrenOfAlarmName = childrenOfAlarmName {
            try container.encode(childrenOfAlarmName, forKey: ClientRuntime.Key("ChildrenOfAlarmName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let parentsOfAlarmName = parentsOfAlarmName {
            try container.encode(parentsOfAlarmName, forKey: ClientRuntime.Key("ParentsOfAlarmName"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: ClientRuntime.Key("StateValue"))
        }
        try container.encode("DescribeAlarms", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeAlarmsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAlarmsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAlarmsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAlarmsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAlarmsOutputError>
}

public struct DescribeAlarmsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAlarmsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAlarmsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAlarmsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAlarmsOutputError>
}

public struct DescribeAlarmsInput: Swift.Equatable {
    /// <p>Use this parameter to filter the results of the operation to only those alarms that
    /// 		use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all
    /// 		alarms that send notifications to that topic.</p>
    public let actionPrefix: Swift.String?
    /// <p>An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names
    /// 			that start with this prefix.</p>
    /// 		       <p>If this parameter
    /// 			is specified, you cannot specify <code>AlarmNames</code>.</p>
    public let alarmNamePrefix: Swift.String?
    /// <p>The names of the alarms to retrieve information about.</p>
    public let alarmNames: [Swift.String]?
    /// <p>Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter,
    /// 		only metric alarms are returned.</p>
    public let alarmTypes: [CloudWatchClientTypes.AlarmType]?
    /// <p>If you use this parameter and specify the name of a composite alarm, the operation returns
    /// 			information about the "children" alarms
    /// 			of the alarm you specify. These are the metric alarms and composite alarms referenced in the
    /// 			<code>AlarmRule</code> field of the composite alarm that you specify in
    /// 			<code>ChildrenOfAlarmName</code>. Information about the composite alarm that you name in
    /// 			<code>ChildrenOfAlarmName</code> is not returned.</p>
    /// 		       <p>If you specify <code>ChildrenOfAlarmName</code>, you cannot specify any other parameters in the request except
    /// 			for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you
    /// 			receive a validation
    /// 			error.</p>
    /// 		       <note>
    ///             <p>Only the <code>Alarm Name</code>, <code>ARN</code>, <code>StateValue</code> (OK/ALARM/INSUFFICIENT_DATA), and <code>StateUpdatedTimestamp</code>
    /// 			information are returned by this operation
    /// 			when you use this parameter. To get complete information about
    /// 			these alarms, perform another <code>DescribeAlarms</code> operation and specify
    /// 			the parent alarm names in the <code>AlarmNames</code> parameter.</p>
    ///          </note>
    public let childrenOfAlarmName: Swift.String?
    /// <p>The maximum number of alarm descriptions to retrieve.</p>
    public let maxRecords: Swift.Int?
    /// <p>The token returned by a previous call to indicate that there is more data
    /// 			available.</p>
    public let nextToken: Swift.String?
    /// <p>If you use this parameter and specify the name of a metric or composite alarm, the operation returns
    /// 			information about the "parent" alarms
    /// 			of the alarm you specify. These are the composite alarms that have <code>AlarmRule</code>
    /// 			parameters that reference
    /// 			the alarm named in <code>ParentsOfAlarmName</code>. Information about the alarm that you specify in
    /// 			<code>ParentsOfAlarmName</code> is not returned.</p>
    /// 		       <p>If you specify <code>ParentsOfAlarmName</code>, you cannot specify any other parameters in the request except
    /// 			for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation
    /// 			error.</p>
    /// 		       <note>
    ///             <p>Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about
    /// 			these alarms, perform another <code>DescribeAlarms</code> operation and specify
    /// 			the parent alarm names in the <code>AlarmNames</code> parameter.</p>
    ///          </note>
    public let parentsOfAlarmName: Swift.String?
    /// <p>Specify this parameter to receive information only about alarms that are currently in the state that you specify.</p>
    public let stateValue: CloudWatchClientTypes.StateValue?

    public init (
        actionPrefix: Swift.String? = nil,
        alarmNamePrefix: Swift.String? = nil,
        alarmNames: [Swift.String]? = nil,
        alarmTypes: [CloudWatchClientTypes.AlarmType]? = nil,
        childrenOfAlarmName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        parentsOfAlarmName: Swift.String? = nil,
        stateValue: CloudWatchClientTypes.StateValue? = nil
    )
    {
        self.actionPrefix = actionPrefix
        self.alarmNamePrefix = alarmNamePrefix
        self.alarmNames = alarmNames
        self.alarmTypes = alarmTypes
        self.childrenOfAlarmName = childrenOfAlarmName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.parentsOfAlarmName = parentsOfAlarmName
        self.stateValue = stateValue
    }
}

extension DescribeAlarmsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAlarmsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAlarmsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAlarmsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAlarmsOutputResponse(compositeAlarms: \(Swift.String(describing: compositeAlarms)), metricAlarms: \(Swift.String(describing: metricAlarms)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAlarmsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAlarmsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compositeAlarms = output.compositeAlarms
            self.metricAlarms = output.metricAlarms
            self.nextToken = output.nextToken
        } else {
            self.compositeAlarms = nil
            self.metricAlarms = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAlarmsOutputResponse: Swift.Equatable {
    /// <p>The information about any composite alarms returned by the operation.</p>
    public let compositeAlarms: [CloudWatchClientTypes.CompositeAlarm]?
    /// <p>The information about any metric alarms returned by the operation.</p>
    public let metricAlarms: [CloudWatchClientTypes.MetricAlarm]?
    /// <p>The token that marks the start of the next batch of returned results.</p>
    public let nextToken: Swift.String?

    public init (
        compositeAlarms: [CloudWatchClientTypes.CompositeAlarm]? = nil,
        metricAlarms: [CloudWatchClientTypes.MetricAlarm]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.compositeAlarms = compositeAlarms
        self.metricAlarms = metricAlarms
        self.nextToken = nextToken
    }
}

struct DescribeAlarmsOutputResponseBody: Swift.Equatable {
    public let compositeAlarms: [CloudWatchClientTypes.CompositeAlarm]?
    public let metricAlarms: [CloudWatchClientTypes.MetricAlarm]?
    public let nextToken: Swift.String?
}

extension DescribeAlarmsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compositeAlarms = "CompositeAlarms"
        case metricAlarms = "MetricAlarms"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAlarmsResult"))
        if containerValues.contains(.compositeAlarms) {
            struct KeyVal0{struct member{}}
            let compositeAlarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .compositeAlarms)
            if let compositeAlarmsWrappedContainer = compositeAlarmsWrappedContainer {
                let compositeAlarmsContainer = try compositeAlarmsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.CompositeAlarm].self, forKey: .member)
                var compositeAlarmsBuffer:[CloudWatchClientTypes.CompositeAlarm]? = nil
                if let compositeAlarmsContainer = compositeAlarmsContainer {
                    compositeAlarmsBuffer = [CloudWatchClientTypes.CompositeAlarm]()
                    for structureContainer0 in compositeAlarmsContainer {
                        compositeAlarmsBuffer?.append(structureContainer0)
                    }
                }
                compositeAlarms = compositeAlarmsBuffer
            } else {
                compositeAlarms = []
            }
        } else {
            compositeAlarms = nil
        }
        if containerValues.contains(.metricAlarms) {
            struct KeyVal0{struct member{}}
            let metricAlarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricAlarms)
            if let metricAlarmsWrappedContainer = metricAlarmsWrappedContainer {
                let metricAlarmsContainer = try metricAlarmsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricAlarm].self, forKey: .member)
                var metricAlarmsBuffer:[CloudWatchClientTypes.MetricAlarm]? = nil
                if let metricAlarmsContainer = metricAlarmsContainer {
                    metricAlarmsBuffer = [CloudWatchClientTypes.MetricAlarm]()
                    for structureContainer0 in metricAlarmsContainer {
                        metricAlarmsBuffer?.append(structureContainer0)
                    }
                }
                metricAlarms = metricAlarmsBuffer
            } else {
                metricAlarms = []
            }
        } else {
            metricAlarms = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeAnomalyDetectorsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAnomalyDetectorsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAnomalyDetectorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAnomalyDetectorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAnomalyDetectorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAnomalyDetectorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAnomalyDetectorsOutputError>
}

extension DescribeAnomalyDetectorsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAnomalyDetectorsInput(dimensions: \(Swift.String(describing: dimensions)), maxResults: \(Swift.String(describing: maxResults)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAnomalyDetectorsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeAnomalyDetectors", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeAnomalyDetectorsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAnomalyDetectorsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAnomalyDetectorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAnomalyDetectorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAnomalyDetectorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAnomalyDetectorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAnomalyDetectorsOutputError>
}

public struct DescribeAnomalyDetectorsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAnomalyDetectorsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAnomalyDetectorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAnomalyDetectorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAnomalyDetectorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAnomalyDetectorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAnomalyDetectorsOutputError>
}

public struct DescribeAnomalyDetectorsInput: Swift.Equatable {
    /// <p>Limits the results to only the anomaly detection models that are associated with the
    /// 			specified metric dimensions. If there are multiple metrics that have these dimensions
    /// 			and have anomaly detection models associated, they're all returned.</p>
    public let dimensions: [CloudWatchClientTypes.Dimension]?
    /// <p>The maximum number of results to return in one operation. The maximum
    /// 			value that you can specify is 100.</p>
    /// 			      <p>To retrieve the remaining results, make another call with the returned
    /// 			<code>NextToken</code> value. </p>
    public let maxResults: Swift.Int?
    /// <p>Limits the results to only the anomaly detection models that are associated with the
    /// 			specified metric name. If there are multiple metrics with this name in different
    /// 			namespaces that have anomaly detection models, they're all returned.</p>
    public let metricName: Swift.String?
    /// <p>Limits the results to only the anomaly detection models that
    /// 			are associated with the specified namespace.</p>
    public let namespace: Swift.String?
    /// <p>Use the token returned by the previous operation to request the next page of results.</p>
    public let nextToken: Swift.String?

    public init (
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        maxResults: Swift.Int? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dimensions = dimensions
        self.maxResults = maxResults
        self.metricName = metricName
        self.namespace = namespace
        self.nextToken = nextToken
    }
}

extension DescribeAnomalyDetectorsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAnomalyDetectorsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAnomalyDetectorsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidNextToken(InvalidNextToken)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAnomalyDetectorsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAnomalyDetectorsOutputResponse(anomalyDetectors: \(Swift.String(describing: anomalyDetectors)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAnomalyDetectorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAnomalyDetectorsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.anomalyDetectors = output.anomalyDetectors
            self.nextToken = output.nextToken
        } else {
            self.anomalyDetectors = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAnomalyDetectorsOutputResponse: Swift.Equatable {
    /// <p>The list of anomaly detection models returned by the operation.</p>
    public let anomalyDetectors: [CloudWatchClientTypes.AnomalyDetector]?
    /// <p>A token that you can use in a subsequent operation to
    /// 		retrieve the next set of results.</p>
    public let nextToken: Swift.String?

    public init (
        anomalyDetectors: [CloudWatchClientTypes.AnomalyDetector]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.anomalyDetectors = anomalyDetectors
        self.nextToken = nextToken
    }
}

struct DescribeAnomalyDetectorsOutputResponseBody: Swift.Equatable {
    public let anomalyDetectors: [CloudWatchClientTypes.AnomalyDetector]?
    public let nextToken: Swift.String?
}

extension DescribeAnomalyDetectorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectors = "AnomalyDetectors"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAnomalyDetectorsResult"))
        if containerValues.contains(.anomalyDetectors) {
            struct KeyVal0{struct member{}}
            let anomalyDetectorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .anomalyDetectors)
            if let anomalyDetectorsWrappedContainer = anomalyDetectorsWrappedContainer {
                let anomalyDetectorsContainer = try anomalyDetectorsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.AnomalyDetector].self, forKey: .member)
                var anomalyDetectorsBuffer:[CloudWatchClientTypes.AnomalyDetector]? = nil
                if let anomalyDetectorsContainer = anomalyDetectorsContainer {
                    anomalyDetectorsBuffer = [CloudWatchClientTypes.AnomalyDetector]()
                    for structureContainer0 in anomalyDetectorsContainer {
                        anomalyDetectorsBuffer?.append(structureContainer0)
                    }
                }
                anomalyDetectors = anomalyDetectorsBuffer
            } else {
                anomalyDetectors = []
            }
        } else {
            anomalyDetectors = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeInsightRulesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInsightRulesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInsightRulesOutputError>
}

extension DescribeInsightRulesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInsightRulesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeInsightRulesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeInsightRules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeInsightRulesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInsightRulesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInsightRulesOutputError>
}

public struct DescribeInsightRulesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInsightRulesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInsightRulesOutputError>
}

public struct DescribeInsightRulesInput: Swift.Equatable {
    /// <p>The maximum number of results to return in one operation. If you omit this
    /// 		parameter, the default of 500 is used.</p>
    public let maxResults: Swift.Int?
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of rules.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension DescribeInsightRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeInsightRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInsightRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInsightRulesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInsightRulesOutputResponse(insightRules: \(Swift.String(describing: insightRules)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeInsightRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeInsightRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.insightRules = output.insightRules
            self.nextToken = output.nextToken
        } else {
            self.insightRules = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeInsightRulesOutputResponse: Swift.Equatable {
    /// <p>The rules returned by the operation.</p>
    public let insightRules: [CloudWatchClientTypes.InsightRule]?
    /// <p>If this parameter is present, it is a token that marks the start of the next batch of returned results.      </p>
    public let nextToken: Swift.String?

    public init (
        insightRules: [CloudWatchClientTypes.InsightRule]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.insightRules = insightRules
        self.nextToken = nextToken
    }
}

struct DescribeInsightRulesOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let insightRules: [CloudWatchClientTypes.InsightRule]?
}

extension DescribeInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightRules = "InsightRules"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeInsightRulesResult"))
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.insightRules) {
            struct KeyVal0{struct member{}}
            let insightRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insightRules)
            if let insightRulesWrappedContainer = insightRulesWrappedContainer {
                let insightRulesContainer = try insightRulesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.InsightRule].self, forKey: .member)
                var insightRulesBuffer:[CloudWatchClientTypes.InsightRule]? = nil
                if let insightRulesContainer = insightRulesContainer {
                    insightRulesBuffer = [CloudWatchClientTypes.InsightRule]()
                    for structureContainer0 in insightRulesContainer {
                        insightRulesBuffer?.append(structureContainer0)
                    }
                }
                insightRules = insightRulesBuffer
            } else {
                insightRules = []
            }
        } else {
            insightRules = nil
        }
    }
}

extension CloudWatchClientTypes.Dimension: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudWatchClientTypes.Dimension: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Dimension(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension CloudWatchClientTypes {
    /// <p>A dimension is a name/value pair that is part of the identity of a metric. You
    /// 			can assign up to 10 dimensions to a metric. Because dimensions are part of the unique
    /// 			identifier for a metric, whenever you add a unique name/value pair to one of
    /// 			your metrics, you are creating a new variation of that metric. </p>
    public struct Dimension: Swift.Equatable {
        /// <p>The name of the dimension. Dimension names cannot contain blank spaces or non-ASCII
        /// 		characters.</p>
        public let name: Swift.String?
        /// <p>The value of the dimension. Dimension values cannot contain blank spaces
        /// 			or non-ASCII characters.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension CloudWatchClientTypes.DimensionFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudWatchClientTypes.DimensionFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DimensionFilter(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension CloudWatchClientTypes {
    /// <p>Represents filters for a dimension.</p>
    public struct DimensionFilter: Swift.Equatable {
        /// <p>The dimension name to be matched.</p>
        public let name: Swift.String?
        /// <p>The value of the dimension to be matched.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

public struct DisableAlarmActionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableAlarmActionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableAlarmActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableAlarmActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableAlarmActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableAlarmActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableAlarmActionsOutputError>
}

extension DisableAlarmActionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableAlarmActionsInput(alarmNames: \(Swift.String(describing: alarmNames)))"}
}

extension DisableAlarmActionsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmNames = alarmNames {
            var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
            for (index0, alarmname0) in alarmNames.enumerated() {
                try alarmNamesContainer.encode(alarmname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DisableAlarmActions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DisableAlarmActionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableAlarmActionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableAlarmActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableAlarmActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableAlarmActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableAlarmActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableAlarmActionsOutputError>
}

public struct DisableAlarmActionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableAlarmActionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableAlarmActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableAlarmActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableAlarmActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableAlarmActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableAlarmActionsOutputError>
}

public struct DisableAlarmActionsInput: Swift.Equatable {
    /// <p>The names of the alarms.</p>
    public let alarmNames: [Swift.String]?

    public init (
        alarmNames: [Swift.String]? = nil
    )
    {
        self.alarmNames = alarmNames
    }
}

extension DisableAlarmActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisableAlarmActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableAlarmActionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableAlarmActionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableAlarmActionsOutputResponse()"}
}

extension DisableAlarmActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableAlarmActionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisableAlarmActionsOutputResponseBody: Swift.Equatable {
}

extension DisableAlarmActionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DisableInsightRulesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableInsightRulesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableInsightRulesOutputError>
}

extension DisableInsightRulesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableInsightRulesInput(ruleNames: \(Swift.String(describing: ruleNames)))"}
}

extension DisableInsightRulesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleNames = ruleNames {
            var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
            for (index0, insightrulename0) in ruleNames.enumerated() {
                try ruleNamesContainer.encode(insightrulename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DisableInsightRules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DisableInsightRulesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableInsightRulesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableInsightRulesOutputError>
}

public struct DisableInsightRulesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableInsightRulesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableInsightRulesOutputError>
}

public struct DisableInsightRulesInput: Swift.Equatable {
    /// <p>An array of the rule names to disable. If you need to find out the names of your rules, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</p>
    public let ruleNames: [Swift.String]?

    public init (
        ruleNames: [Swift.String]? = nil
    )
    {
        self.ruleNames = ruleNames
    }
}

extension DisableInsightRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisableInsightRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableInsightRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableInsightRulesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableInsightRulesOutputResponse(failures: \(Swift.String(describing: failures)))"}
}

extension DisableInsightRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisableInsightRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failures = output.failures
        } else {
            self.failures = nil
        }
    }
}

public struct DisableInsightRulesOutputResponse: Swift.Equatable {
    /// <p>An array listing the rules that could not be disabled. You cannot disable built-in rules.</p>
    public let failures: [CloudWatchClientTypes.PartialFailure]?

    public init (
        failures: [CloudWatchClientTypes.PartialFailure]? = nil
    )
    {
        self.failures = failures
    }
}

struct DisableInsightRulesOutputResponseBody: Swift.Equatable {
    public let failures: [CloudWatchClientTypes.PartialFailure]?
}

extension DisableInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failures = "Failures"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DisableInsightRulesResult"))
        if containerValues.contains(.failures) {
            struct KeyVal0{struct member{}}
            let failuresWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failures)
            if let failuresWrappedContainer = failuresWrappedContainer {
                let failuresContainer = try failuresWrappedContainer.decodeIfPresent([CloudWatchClientTypes.PartialFailure].self, forKey: .member)
                var failuresBuffer:[CloudWatchClientTypes.PartialFailure]? = nil
                if let failuresContainer = failuresContainer {
                    failuresBuffer = [CloudWatchClientTypes.PartialFailure]()
                    for structureContainer0 in failuresContainer {
                        failuresBuffer?.append(structureContainer0)
                    }
                }
                failures = failuresBuffer
            } else {
                failures = []
            }
        } else {
            failures = nil
        }
    }
}

public struct EnableAlarmActionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableAlarmActionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableAlarmActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableAlarmActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableAlarmActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableAlarmActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableAlarmActionsOutputError>
}

extension EnableAlarmActionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableAlarmActionsInput(alarmNames: \(Swift.String(describing: alarmNames)))"}
}

extension EnableAlarmActionsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmNames = alarmNames {
            var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
            for (index0, alarmname0) in alarmNames.enumerated() {
                try alarmNamesContainer.encode(alarmname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("EnableAlarmActions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct EnableAlarmActionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableAlarmActionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableAlarmActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableAlarmActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableAlarmActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableAlarmActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableAlarmActionsOutputError>
}

public struct EnableAlarmActionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableAlarmActionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableAlarmActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableAlarmActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableAlarmActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableAlarmActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableAlarmActionsOutputError>
}

public struct EnableAlarmActionsInput: Swift.Equatable {
    /// <p>The names of the alarms.</p>
    public let alarmNames: [Swift.String]?

    public init (
        alarmNames: [Swift.String]? = nil
    )
    {
        self.alarmNames = alarmNames
    }
}

extension EnableAlarmActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnableAlarmActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableAlarmActionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableAlarmActionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableAlarmActionsOutputResponse()"}
}

extension EnableAlarmActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableAlarmActionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct EnableAlarmActionsOutputResponseBody: Swift.Equatable {
}

extension EnableAlarmActionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct EnableInsightRulesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableInsightRulesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableInsightRulesOutputError>
}

extension EnableInsightRulesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableInsightRulesInput(ruleNames: \(Swift.String(describing: ruleNames)))"}
}

extension EnableInsightRulesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleNames = ruleNames {
            var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
            for (index0, insightrulename0) in ruleNames.enumerated() {
                try ruleNamesContainer.encode(insightrulename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("EnableInsightRules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct EnableInsightRulesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableInsightRulesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableInsightRulesOutputError>
}

public struct EnableInsightRulesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableInsightRulesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableInsightRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableInsightRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableInsightRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableInsightRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableInsightRulesOutputError>
}

public struct EnableInsightRulesInput: Swift.Equatable {
    /// <p>An array of the rule names to enable. If you need to find out the names of your rules, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</p>
    public let ruleNames: [Swift.String]?

    public init (
        ruleNames: [Swift.String]? = nil
    )
    {
        self.ruleNames = ruleNames
    }
}

extension EnableInsightRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnableInsightRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableInsightRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableInsightRulesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableInsightRulesOutputResponse(failures: \(Swift.String(describing: failures)))"}
}

extension EnableInsightRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EnableInsightRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failures = output.failures
        } else {
            self.failures = nil
        }
    }
}

public struct EnableInsightRulesOutputResponse: Swift.Equatable {
    /// <p>An array listing the rules that could not be enabled. You cannot disable or enable built-in rules.</p>
    public let failures: [CloudWatchClientTypes.PartialFailure]?

    public init (
        failures: [CloudWatchClientTypes.PartialFailure]? = nil
    )
    {
        self.failures = failures
    }
}

struct EnableInsightRulesOutputResponseBody: Swift.Equatable {
    public let failures: [CloudWatchClientTypes.PartialFailure]?
}

extension EnableInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failures = "Failures"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("EnableInsightRulesResult"))
        if containerValues.contains(.failures) {
            struct KeyVal0{struct member{}}
            let failuresWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failures)
            if let failuresWrappedContainer = failuresWrappedContainer {
                let failuresContainer = try failuresWrappedContainer.decodeIfPresent([CloudWatchClientTypes.PartialFailure].self, forKey: .member)
                var failuresBuffer:[CloudWatchClientTypes.PartialFailure]? = nil
                if let failuresContainer = failuresContainer {
                    failuresBuffer = [CloudWatchClientTypes.PartialFailure]()
                    for structureContainer0 in failuresContainer {
                        failuresBuffer?.append(structureContainer0)
                    }
                }
                failures = failuresBuffer
            } else {
                failures = []
            }
        } else {
            failures = nil
        }
    }
}

public struct GetDashboardInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDashboardInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDashboardInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDashboardOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDashboardInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDashboardOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDashboardOutputError>
}

extension GetDashboardInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDashboardInput(dashboardName: \(Swift.String(describing: dashboardName)))"}
}

extension GetDashboardInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dashboardName = dashboardName {
            try container.encode(dashboardName, forKey: ClientRuntime.Key("DashboardName"))
        }
        try container.encode("GetDashboard", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetDashboardInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDashboardInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDashboardInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDashboardOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDashboardInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDashboardOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDashboardOutputError>
}

public struct GetDashboardInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDashboardInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDashboardInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDashboardOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDashboardInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDashboardOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDashboardOutputError>
}

public struct GetDashboardInput: Swift.Equatable {
    /// <p>The name of the dashboard to be described.</p>
    public let dashboardName: Swift.String?

    public init (
        dashboardName: Swift.String? = nil
    )
    {
        self.dashboardName = dashboardName
    }
}

extension GetDashboardOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetDashboardOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DashboardNotFoundError" : self = .dashboardNotFoundError(try DashboardNotFoundError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDashboardOutputError: Swift.Error, Swift.Equatable {
    case dashboardNotFoundError(DashboardNotFoundError)
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDashboardOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDashboardOutputResponse(dashboardArn: \(Swift.String(describing: dashboardArn)), dashboardBody: \(Swift.String(describing: dashboardBody)), dashboardName: \(Swift.String(describing: dashboardName)))"}
}

extension GetDashboardOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDashboardOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dashboardArn = output.dashboardArn
            self.dashboardBody = output.dashboardBody
            self.dashboardName = output.dashboardName
        } else {
            self.dashboardArn = nil
            self.dashboardBody = nil
            self.dashboardName = nil
        }
    }
}

public struct GetDashboardOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    public let dashboardArn: Swift.String?
    /// <p>The detailed information about the dashboard, including what widgets are included and their location
    /// 			on the dashboard. For more information about the <code>DashboardBody</code> syntax,
    /// 			see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html">Dashboard Body Structure and Syntax</a>. </p>
    public let dashboardBody: Swift.String?
    /// <p>The name of the dashboard.</p>
    public let dashboardName: Swift.String?

    public init (
        dashboardArn: Swift.String? = nil,
        dashboardBody: Swift.String? = nil,
        dashboardName: Swift.String? = nil
    )
    {
        self.dashboardArn = dashboardArn
        self.dashboardBody = dashboardBody
        self.dashboardName = dashboardName
    }
}

struct GetDashboardOutputResponseBody: Swift.Equatable {
    public let dashboardArn: Swift.String?
    public let dashboardBody: Swift.String?
    public let dashboardName: Swift.String?
}

extension GetDashboardOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardArn = "DashboardArn"
        case dashboardBody = "DashboardBody"
        case dashboardName = "DashboardName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetDashboardResult"))
        let dashboardArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardArn)
        dashboardArn = dashboardArnDecoded
        let dashboardBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardBody)
        dashboardBody = dashboardBodyDecoded
        let dashboardNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardName)
        dashboardName = dashboardNameDecoded
    }
}

public struct GetInsightRuleReportInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInsightRuleReportInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInsightRuleReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInsightRuleReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInsightRuleReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInsightRuleReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInsightRuleReportOutputError>
}

extension GetInsightRuleReportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInsightRuleReportInput(endTime: \(Swift.String(describing: endTime)), maxContributorCount: \(Swift.String(describing: maxContributorCount)), metrics: \(Swift.String(describing: metrics)), orderBy: \(Swift.String(describing: orderBy)), period: \(Swift.String(describing: period)), ruleName: \(Swift.String(describing: ruleName)), startTime: \(Swift.String(describing: startTime)))"}
}

extension GetInsightRuleReportInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let maxContributorCount = maxContributorCount {
            try container.encode(maxContributorCount, forKey: ClientRuntime.Key("MaxContributorCount"))
        }
        if let metrics = metrics {
            var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
            for (index0, insightrulemetricname0) in metrics.enumerated() {
                try metricsContainer.encode(insightrulemetricname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let orderBy = orderBy {
            try container.encode(orderBy, forKey: ClientRuntime.Key("OrderBy"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        try container.encode("GetInsightRuleReport", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetInsightRuleReportInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInsightRuleReportInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInsightRuleReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInsightRuleReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInsightRuleReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInsightRuleReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInsightRuleReportOutputError>
}

public struct GetInsightRuleReportInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInsightRuleReportInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInsightRuleReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInsightRuleReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInsightRuleReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInsightRuleReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInsightRuleReportOutputError>
}

public struct GetInsightRuleReportInput: Swift.Equatable {
    /// <p>The end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as
    /// 			<code>yyyy-MM-dd'T'HH:mm:ss</code>. For example,
    /// 			<code>2019-07-01T23:59:59</code>.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used.</p>
    public let maxContributorCount: Swift.Int?
    /// <p>Specifies which metrics to use for aggregation of contributor values for the report. You can specify one or more
    /// 		of the following metrics:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>
    ///                   <code>UniqueContributors</code> -- the number of unique contributors for each data point.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>MaxContributorValue</code> -- the value of the top contributor for each data point. The identity of the
    /// 					contributor might change for each data point in the graph.</p>
    /// 				           <p>If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the
    /// 					most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified
    /// 					by the rule's <code>Value</code>, during that period.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>SampleCount</code> -- the number of data points matched by the rule.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>Sum</code> -- the sum of the values from all contributors during the time period represented by that data point.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>Minimum</code> -- the minimum value from a single observation during the time period represented by that data point.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>Maximum</code> -- the maximum value from a single observation during the time period represented by that data point.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>Average</code> -- the average value from all contributors during the time period represented by that data point.</p>
    /// 			         </li>
    ///          </ul>
    public let metrics: [Swift.String]?
    /// <p>Determines what statistic to use to rank the contributors. Valid values are SUM and MAXIMUM.</p>
    public let orderBy: Swift.String?
    /// <p>The period, in seconds, to use for the statistics in the <code>InsightRuleMetricDatapoint</code> results.</p>
    public let period: Swift.Int?
    /// <p>The name of the rule that you want to see data from.</p>
    public let ruleName: Swift.String?
    /// <p>The start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as
    /// 			<code>yyyy-MM-dd'T'HH:mm:ss</code>. For example,
    /// 			<code>2019-07-01T23:59:59</code>.</p>
    public let startTime: ClientRuntime.Date?

    public init (
        endTime: ClientRuntime.Date? = nil,
        maxContributorCount: Swift.Int? = nil,
        metrics: [Swift.String]? = nil,
        orderBy: Swift.String? = nil,
        period: Swift.Int? = nil,
        ruleName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.endTime = endTime
        self.maxContributorCount = maxContributorCount
        self.metrics = metrics
        self.orderBy = orderBy
        self.period = period
        self.ruleName = ruleName
        self.startTime = startTime
    }
}

extension GetInsightRuleReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetInsightRuleReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInsightRuleReportOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInsightRuleReportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInsightRuleReportOutputResponse(aggregateValue: \(Swift.String(describing: aggregateValue)), aggregationStatistic: \(Swift.String(describing: aggregationStatistic)), approximateUniqueCount: \(Swift.String(describing: approximateUniqueCount)), contributors: \(Swift.String(describing: contributors)), keyLabels: \(Swift.String(describing: keyLabels)), metricDatapoints: \(Swift.String(describing: metricDatapoints)))"}
}

extension GetInsightRuleReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInsightRuleReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aggregateValue = output.aggregateValue
            self.aggregationStatistic = output.aggregationStatistic
            self.approximateUniqueCount = output.approximateUniqueCount
            self.contributors = output.contributors
            self.keyLabels = output.keyLabels
            self.metricDatapoints = output.metricDatapoints
        } else {
            self.aggregateValue = nil
            self.aggregationStatistic = nil
            self.approximateUniqueCount = nil
            self.contributors = nil
            self.keyLabels = nil
            self.metricDatapoints = nil
        }
    }
}

public struct GetInsightRuleReportOutputResponse: Swift.Equatable {
    /// <p>The sum of the values from all individual contributors that match the rule.</p>
    public let aggregateValue: Swift.Double?
    /// <p>Specifies whether this rule aggregates contributor data by COUNT or SUM.</p>
    public let aggregationStatistic: Swift.String?
    /// <p>An approximate count of the unique contributors found by this rule in this time period.</p>
    public let approximateUniqueCount: Swift.Int?
    /// <p>An array of the unique contributors found by this rule in this time period. If the rule contains multiple keys, each combination of values
    /// 		for the keys counts as a unique contributor.</p>
    public let contributors: [CloudWatchClientTypes.InsightRuleContributor]?
    /// <p>An array of the strings used as the keys for this rule. The keys are the dimensions used to classify contributors.
    /// 			If the rule contains more than one key, then each unique combination of values for the keys is counted as a unique contributor.</p>
    public let keyLabels: [Swift.String]?
    /// <p>A time series of metric data points that matches the time period in the rule request.</p>
    public let metricDatapoints: [CloudWatchClientTypes.InsightRuleMetricDatapoint]?

    public init (
        aggregateValue: Swift.Double? = nil,
        aggregationStatistic: Swift.String? = nil,
        approximateUniqueCount: Swift.Int? = nil,
        contributors: [CloudWatchClientTypes.InsightRuleContributor]? = nil,
        keyLabels: [Swift.String]? = nil,
        metricDatapoints: [CloudWatchClientTypes.InsightRuleMetricDatapoint]? = nil
    )
    {
        self.aggregateValue = aggregateValue
        self.aggregationStatistic = aggregationStatistic
        self.approximateUniqueCount = approximateUniqueCount
        self.contributors = contributors
        self.keyLabels = keyLabels
        self.metricDatapoints = metricDatapoints
    }
}

struct GetInsightRuleReportOutputResponseBody: Swift.Equatable {
    public let keyLabels: [Swift.String]?
    public let aggregationStatistic: Swift.String?
    public let aggregateValue: Swift.Double?
    public let approximateUniqueCount: Swift.Int?
    public let contributors: [CloudWatchClientTypes.InsightRuleContributor]?
    public let metricDatapoints: [CloudWatchClientTypes.InsightRuleMetricDatapoint]?
}

extension GetInsightRuleReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateValue = "AggregateValue"
        case aggregationStatistic = "AggregationStatistic"
        case approximateUniqueCount = "ApproximateUniqueCount"
        case contributors = "Contributors"
        case keyLabels = "KeyLabels"
        case metricDatapoints = "MetricDatapoints"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetInsightRuleReportResult"))
        if containerValues.contains(.keyLabels) {
            struct KeyVal0{struct member{}}
            let keyLabelsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .keyLabels)
            if let keyLabelsWrappedContainer = keyLabelsWrappedContainer {
                let keyLabelsContainer = try keyLabelsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var keyLabelsBuffer:[Swift.String]? = nil
                if let keyLabelsContainer = keyLabelsContainer {
                    keyLabelsBuffer = [Swift.String]()
                    for stringContainer0 in keyLabelsContainer {
                        keyLabelsBuffer?.append(stringContainer0)
                    }
                }
                keyLabels = keyLabelsBuffer
            } else {
                keyLabels = []
            }
        } else {
            keyLabels = nil
        }
        let aggregationStatisticDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aggregationStatistic)
        aggregationStatistic = aggregationStatisticDecoded
        let aggregateValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .aggregateValue)
        aggregateValue = aggregateValueDecoded
        let approximateUniqueCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .approximateUniqueCount)
        approximateUniqueCount = approximateUniqueCountDecoded
        if containerValues.contains(.contributors) {
            struct KeyVal0{struct member{}}
            let contributorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .contributors)
            if let contributorsWrappedContainer = contributorsWrappedContainer {
                let contributorsContainer = try contributorsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.InsightRuleContributor].self, forKey: .member)
                var contributorsBuffer:[CloudWatchClientTypes.InsightRuleContributor]? = nil
                if let contributorsContainer = contributorsContainer {
                    contributorsBuffer = [CloudWatchClientTypes.InsightRuleContributor]()
                    for structureContainer0 in contributorsContainer {
                        contributorsBuffer?.append(structureContainer0)
                    }
                }
                contributors = contributorsBuffer
            } else {
                contributors = []
            }
        } else {
            contributors = nil
        }
        if containerValues.contains(.metricDatapoints) {
            struct KeyVal0{struct member{}}
            let metricDatapointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDatapoints)
            if let metricDatapointsWrappedContainer = metricDatapointsWrappedContainer {
                let metricDatapointsContainer = try metricDatapointsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.InsightRuleMetricDatapoint].self, forKey: .member)
                var metricDatapointsBuffer:[CloudWatchClientTypes.InsightRuleMetricDatapoint]? = nil
                if let metricDatapointsContainer = metricDatapointsContainer {
                    metricDatapointsBuffer = [CloudWatchClientTypes.InsightRuleMetricDatapoint]()
                    for structureContainer0 in metricDatapointsContainer {
                        metricDatapointsBuffer?.append(structureContainer0)
                    }
                }
                metricDatapoints = metricDatapointsBuffer
            } else {
                metricDatapoints = []
            }
        } else {
            metricDatapoints = nil
        }
    }
}

public struct GetMetricDataInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricDataOutputError>
}

extension GetMetricDataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricDataInput(endTime: \(Swift.String(describing: endTime)), labelOptions: \(Swift.String(describing: labelOptions)), maxDatapoints: \(Swift.String(describing: maxDatapoints)), metricDataQueries: \(Swift.String(describing: metricDataQueries)), nextToken: \(Swift.String(describing: nextToken)), scanBy: \(Swift.String(describing: scanBy)), startTime: \(Swift.String(describing: startTime)))"}
}

extension GetMetricDataInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let labelOptions = labelOptions {
            try container.encode(labelOptions, forKey: ClientRuntime.Key("LabelOptions"))
        }
        if let maxDatapoints = maxDatapoints {
            try container.encode(maxDatapoints, forKey: ClientRuntime.Key("MaxDatapoints"))
        }
        if let metricDataQueries = metricDataQueries {
            var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
            for (index0, metricdataquery0) in metricDataQueries.enumerated() {
                try metricDataQueriesContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let scanBy = scanBy {
            try container.encode(scanBy, forKey: ClientRuntime.Key("ScanBy"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        try container.encode("GetMetricData", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetMetricDataInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricDataOutputError>
}

public struct GetMetricDataInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricDataOutputError>
}

public struct GetMetricDataInput: Swift.Equatable {
    /// <p>The time stamp indicating the latest data to be returned.</p>
    /// 		       <p>The value specified is exclusive; results include data points up to the specified time stamp.</p>
    /// 		       <p>For better performance, specify <code>StartTime</code> and <code>EndTime</code>
    /// 			values that align with the value of the metric's <code>Period</code> and sync up with
    /// 			the beginning and end of an hour. For example, if the <code>Period</code> of a metric
    /// 			is 5 minutes, specifying 12:05 or 12:30 as <code>EndTime</code> can get a faster response
    /// 			from CloudWatch than setting 12:07 or 12:29 as the <code>EndTime</code>.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>This structure includes the <code>Timezone</code> parameter, which you can use
    /// 			to specify your time zone so that the labels of returned data display the
    /// 			correct time
    /// 			for your time zone. </p>
    public let labelOptions: CloudWatchClientTypes.LabelOptions?
    /// <p>The maximum number of data points the request should return before paginating. If you omit
    /// 			this, the default of 100,800 is used.</p>
    public let maxDatapoints: Swift.Int?
    /// <p>The metric queries to be returned. A single <code>GetMetricData</code> call can include as many as 500 <code>MetricDataQuery</code>
    /// 		structures. Each of these structures can specify either a metric to retrieve, or a math expression to perform on retrieved data. </p>
    public let metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]?
    /// <p>Include this value, if it was returned by the previous <code>GetMetricData</code> operation,
    /// 			to get the next set of data points.</p>
    public let nextToken: Swift.String?
    /// <p>The order in which data points should be returned. <code>TimestampDescending</code> returns the newest data first and paginates
    /// 			when the <code>MaxDatapoints</code> limit is reached. <code>TimestampAscending</code> returns the oldest data first and paginates
    /// 			when the <code>MaxDatapoints</code> limit is reached.</p>
    public let scanBy: CloudWatchClientTypes.ScanBy?
    /// <p>The time stamp indicating the earliest data to be returned.</p>
    /// 		       <p>The value specified is inclusive; results include data points with the specified time stamp. </p>
    /// 		       <p>CloudWatch rounds the specified time stamp as follows:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>Start time less than 15 days ago - Round down to the nearest whole minute.
    /// 				For example, 12:32:34 is rounded down to 12:32:00.</p>
    ///             </li>
    ///             <li>
    ///                <p>Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval.
    /// 				For example, 12:32:34 is rounded down to 12:30:00.</p>
    ///             </li>
    ///             <li>
    ///                <p>Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval.
    /// 				For example, 12:32:34 is rounded down to 12:00:00.</p>
    ///             </li>
    ///          </ul>
    /// 		       <p>If you set <code>Period</code> to 5, 10, or 30, the start time of your request is
    /// 			rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions
    /// 			of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous
    /// 			10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to
    /// 			01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a
    /// 			period of 5 seconds, you receive data
    /// 			timestamped between 15:02:15 and 15:07:15.
    /// 		</p>
    /// 		       <p>For better performance, specify <code>StartTime</code> and <code>EndTime</code>
    /// 		values that align with the value of the metric's <code>Period</code> and sync up with
    /// 		the beginning and end of an hour. For example, if the <code>Period</code> of a metric
    /// 		is 5 minutes, specifying 12:05 or 12:30 as <code>StartTime</code> can get a faster response
    /// 			from CloudWatch than setting 12:07 or 12:29 as the <code>StartTime</code>.</p>
    public let startTime: ClientRuntime.Date?

    public init (
        endTime: ClientRuntime.Date? = nil,
        labelOptions: CloudWatchClientTypes.LabelOptions? = nil,
        maxDatapoints: Swift.Int? = nil,
        metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]? = nil,
        nextToken: Swift.String? = nil,
        scanBy: CloudWatchClientTypes.ScanBy? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.endTime = endTime
        self.labelOptions = labelOptions
        self.maxDatapoints = maxDatapoints
        self.metricDataQueries = metricDataQueries
        self.nextToken = nextToken
        self.scanBy = scanBy
        self.startTime = startTime
    }
}

extension GetMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMetricDataOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMetricDataOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricDataOutputResponse(messages: \(Swift.String(describing: messages)), metricDataResults: \(Swift.String(describing: metricDataResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messages = output.messages
            self.metricDataResults = output.metricDataResults
            self.nextToken = output.nextToken
        } else {
            self.messages = nil
            self.metricDataResults = nil
            self.nextToken = nil
        }
    }
}

public struct GetMetricDataOutputResponse: Swift.Equatable {
    /// <p>Contains a message about this <code>GetMetricData</code> operation, if the operation results in such a message.
    /// 			An example of a message that
    /// 			might be returned is <code>Maximum number of allowed metrics exceeded</code>. If there is a message, as much of the
    /// 			operation as possible is still executed.</p>
    /// 		       <p>A message appears here only if it is related to the global <code>GetMetricData</code> operation. Any message
    /// 			about a specific metric returned by the operation appears in the <code>MetricDataResult</code> object returned for that metric.</p>
    public let messages: [CloudWatchClientTypes.MessageData]?
    /// <p>The metrics that are returned, including the metric name, namespace, and dimensions.</p>
    public let metricDataResults: [CloudWatchClientTypes.MetricDataResult]?
    /// <p>A token that marks the next batch of returned results.</p>
    public let nextToken: Swift.String?

    public init (
        messages: [CloudWatchClientTypes.MessageData]? = nil,
        metricDataResults: [CloudWatchClientTypes.MetricDataResult]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.messages = messages
        self.metricDataResults = metricDataResults
        self.nextToken = nextToken
    }
}

struct GetMetricDataOutputResponseBody: Swift.Equatable {
    public let metricDataResults: [CloudWatchClientTypes.MetricDataResult]?
    public let nextToken: Swift.String?
    public let messages: [CloudWatchClientTypes.MessageData]?
}

extension GetMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messages = "Messages"
        case metricDataResults = "MetricDataResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetMetricDataResult"))
        if containerValues.contains(.metricDataResults) {
            struct KeyVal0{struct member{}}
            let metricDataResultsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDataResults)
            if let metricDataResultsWrappedContainer = metricDataResultsWrappedContainer {
                let metricDataResultsContainer = try metricDataResultsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDataResult].self, forKey: .member)
                var metricDataResultsBuffer:[CloudWatchClientTypes.MetricDataResult]? = nil
                if let metricDataResultsContainer = metricDataResultsContainer {
                    metricDataResultsBuffer = [CloudWatchClientTypes.MetricDataResult]()
                    for structureContainer0 in metricDataResultsContainer {
                        metricDataResultsBuffer?.append(structureContainer0)
                    }
                }
                metricDataResults = metricDataResultsBuffer
            } else {
                metricDataResults = []
            }
        } else {
            metricDataResults = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.messages) {
            struct KeyVal0{struct member{}}
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .messages)
            if let messagesWrappedContainer = messagesWrappedContainer {
                let messagesContainer = try messagesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MessageData].self, forKey: .member)
                var messagesBuffer:[CloudWatchClientTypes.MessageData]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [CloudWatchClientTypes.MessageData]()
                    for structureContainer0 in messagesContainer {
                        messagesBuffer?.append(structureContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
    }
}

public struct GetMetricStatisticsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricStatisticsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricStatisticsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricStatisticsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricStatisticsOutputError>
}

extension GetMetricStatisticsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricStatisticsInput(dimensions: \(Swift.String(describing: dimensions)), endTime: \(Swift.String(describing: endTime)), extendedStatistics: \(Swift.String(describing: extendedStatistics)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), period: \(Swift.String(describing: period)), startTime: \(Swift.String(describing: startTime)), statistics: \(Swift.String(describing: statistics)), unit: \(Swift.String(describing: unit)))"}
}

extension GetMetricStatisticsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let extendedStatistics = extendedStatistics {
            var extendedStatisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtendedStatistics"))
            for (index0, extendedstatistic0) in extendedStatistics.enumerated() {
                try extendedStatisticsContainer.encode(extendedstatistic0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        if let statistics = statistics {
            var statisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Statistics"))
            for (index0, statistic0) in statistics.enumerated() {
                try statisticsContainer.encode(statistic0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
        try container.encode("GetMetricStatistics", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetMetricStatisticsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricStatisticsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricStatisticsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricStatisticsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricStatisticsOutputError>
}

public struct GetMetricStatisticsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricStatisticsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricStatisticsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricStatisticsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricStatisticsOutputError>
}

public struct GetMetricStatisticsInput: Swift.Equatable {
    /// <p>The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension. CloudWatch treats each unique combination of dimensions as a separate metric.
    /// 		    If a specific combination of dimensions was not published, you can't retrieve statistics for it.
    /// 		    You must specify the same dimensions that were used when the metrics were created. For an example,
    /// 		    see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#dimension-combinations">Dimension Combinations</a> in the <i>Amazon CloudWatch User Guide</i>. For more information about specifying dimensions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publishing Metrics</a> in the
    /// 			<i>Amazon CloudWatch User Guide</i>.</p>
    public let dimensions: [CloudWatchClientTypes.Dimension]?
    /// <p>The time stamp that determines the last data point to return.</p>
    /// 		       <p>The value specified is exclusive; results include data points up to the specified time stamp.
    /// 			In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The percentile statistics. Specify values between p0.0 and p100. When calling <code>GetMetricStatistics</code>, you must
    /// 			specify either <code>Statistics</code> or <code>ExtendedStatistics</code>, but not both. Percentile statistics are not
    /// 			available for metrics when any of the metric values are negative numbers.</p>
    public let extendedStatistics: [Swift.String]?
    /// <p>The name of the metric, with or without spaces.</p>
    public let metricName: Swift.String?
    /// <p>The namespace of the metric, with or without spaces.</p>
    public let namespace: Swift.String?
    /// <p>The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can
    /// 			be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected
    /// 			at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics
    /// 		are those metrics stored by a <code>PutMetricData</code> call that includes a <code>StorageResolution</code> of 1 second.</p>
    /// 		       <p>If the <code>StartTime</code> parameter specifies a time stamp that is greater than
    /// 		    3 hours ago, you must specify the period as follows or no data points in that time range is returned:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).</p>
    ///             </li>
    ///             <li>
    ///                <p>Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).</p>
    ///             </li>
    ///             <li>
    ///                <p>Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).</p>
    ///             </li>
    ///          </ul>
    public let period: Swift.Int?
    /// <p>The time stamp that determines the first data point to return. Start times are
    /// 			evaluated relative to the time that CloudWatch receives the request.</p>
    /// 	        <p>The value specified is inclusive; results include data points with the specified time stamp.
    /// 	    	In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z).</p>
    /// 		       <p>CloudWatch rounds the specified time stamp as follows:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>Start time less than 15 days ago - Round down to the nearest whole minute.
    /// 			    For example, 12:32:34 is rounded down to 12:32:00.</p>
    ///             </li>
    ///             <li>
    ///                <p>Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval.
    /// 			    For example, 12:32:34 is rounded down to 12:30:00.</p>
    ///             </li>
    ///             <li>
    ///                <p>Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval.
    /// 			    For example, 12:32:34 is rounded down to 12:00:00.</p>
    ///             </li>
    ///          </ul>
    /// 		       <p>If you set <code>Period</code> to 5, 10, or 30, the start time of your request is
    /// 			rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions
    /// 			of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous
    /// 			10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to
    /// 			01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a
    /// 			period of 5 seconds, you receive data
    /// 			timestamped between 15:02:15 and 15:07:15.
    /// 		</p>
    public let startTime: ClientRuntime.Date?
    /// <p>The metric statistics, other than percentile. For percentile statistics,
    /// 		    use <code>ExtendedStatistics</code>. When calling <code>GetMetricStatistics</code>, you must
    /// 		specify either <code>Statistics</code> or <code>ExtendedStatistics</code>, but not both.</p>
    public let statistics: [CloudWatchClientTypes.Statistic]?
    /// <p>The unit for a given metric.
    /// 			If you omit <code>Unit</code>, all data that was collected with any unit is returned, along with the corresponding units that were specified
    /// 			when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified.
    /// 			If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.</p>
    public let unit: CloudWatchClientTypes.StandardUnit?

    public init (
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        endTime: ClientRuntime.Date? = nil,
        extendedStatistics: [Swift.String]? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        period: Swift.Int? = nil,
        startTime: ClientRuntime.Date? = nil,
        statistics: [CloudWatchClientTypes.Statistic]? = nil,
        unit: CloudWatchClientTypes.StandardUnit? = nil
    )
    {
        self.dimensions = dimensions
        self.endTime = endTime
        self.extendedStatistics = extendedStatistics
        self.metricName = metricName
        self.namespace = namespace
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

extension GetMetricStatisticsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetMetricStatisticsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMetricStatisticsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMetricStatisticsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricStatisticsOutputResponse(datapoints: \(Swift.String(describing: datapoints)), label: \(Swift.String(describing: label)))"}
}

extension GetMetricStatisticsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMetricStatisticsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datapoints = output.datapoints
            self.label = output.label
        } else {
            self.datapoints = nil
            self.label = nil
        }
    }
}

public struct GetMetricStatisticsOutputResponse: Swift.Equatable {
    /// <p>The data points for the specified metric.</p>
    public let datapoints: [CloudWatchClientTypes.Datapoint]?
    /// <p>A label for the specified metric.</p>
    public let label: Swift.String?

    public init (
        datapoints: [CloudWatchClientTypes.Datapoint]? = nil,
        label: Swift.String? = nil
    )
    {
        self.datapoints = datapoints
        self.label = label
    }
}

struct GetMetricStatisticsOutputResponseBody: Swift.Equatable {
    public let label: Swift.String?
    public let datapoints: [CloudWatchClientTypes.Datapoint]?
}

extension GetMetricStatisticsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datapoints = "Datapoints"
        case label = "Label"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetMetricStatisticsResult"))
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        if containerValues.contains(.datapoints) {
            struct KeyVal0{struct member{}}
            let datapointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .datapoints)
            if let datapointsWrappedContainer = datapointsWrappedContainer {
                let datapointsContainer = try datapointsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Datapoint].self, forKey: .member)
                var datapointsBuffer:[CloudWatchClientTypes.Datapoint]? = nil
                if let datapointsContainer = datapointsContainer {
                    datapointsBuffer = [CloudWatchClientTypes.Datapoint]()
                    for structureContainer0 in datapointsContainer {
                        datapointsBuffer?.append(structureContainer0)
                    }
                }
                datapoints = datapointsBuffer
            } else {
                datapoints = []
            }
        } else {
            datapoints = nil
        }
    }
}

public struct GetMetricStreamInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricStreamInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricStreamOutputError>
}

extension GetMetricStreamInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricStreamInput(name: \(Swift.String(describing: name)))"}
}

extension GetMetricStreamInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        try container.encode("GetMetricStream", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetMetricStreamInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricStreamInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricStreamOutputError>
}

public struct GetMetricStreamInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricStreamInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricStreamOutputError>
}

public struct GetMetricStreamInput: Swift.Equatable {
    /// <p>The name of the metric stream to retrieve information about.</p>
    public let name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension GetMetricStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetMetricStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMetricStreamOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMetricStreamOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricStreamOutputResponse(arn: \(Swift.String(describing: arn)), creationDate: \(Swift.String(describing: creationDate)), excludeFilters: \(Swift.String(describing: excludeFilters)), firehoseArn: \(Swift.String(describing: firehoseArn)), includeFilters: \(Swift.String(describing: includeFilters)), lastUpdateDate: \(Swift.String(describing: lastUpdateDate)), name: \(Swift.String(describing: name)), outputFormat: \(Swift.String(describing: outputFormat)), roleArn: \(Swift.String(describing: roleArn)), state: \(Swift.String(describing: state)))"}
}

extension GetMetricStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMetricStreamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.creationDate = output.creationDate
            self.excludeFilters = output.excludeFilters
            self.firehoseArn = output.firehoseArn
            self.includeFilters = output.includeFilters
            self.lastUpdateDate = output.lastUpdateDate
            self.name = output.name
            self.outputFormat = output.outputFormat
            self.roleArn = output.roleArn
            self.state = output.state
        } else {
            self.arn = nil
            self.creationDate = nil
            self.excludeFilters = nil
            self.firehoseArn = nil
            self.includeFilters = nil
            self.lastUpdateDate = nil
            self.name = nil
            self.outputFormat = nil
            self.roleArn = nil
            self.state = nil
        }
    }
}

public struct GetMetricStreamOutputResponse: Swift.Equatable {
    /// <p>The ARN of the metric stream.</p>
    public let arn: Swift.String?
    /// <p>The date that the metric stream was created.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>If this array of metric namespaces is present, then these namespaces are the only
    /// 			metric namespaces that are not streamed by this metric stream. In this case, all other metric namespaces in
    /// 		the account are streamed by this metric stream.</p>
    public let excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// <p>The ARN of the Amazon Kinesis Firehose delivery stream that is used by
    /// 		this metric stream.</p>
    public let firehoseArn: Swift.String?
    /// <p>If this array of metric namespaces is present, then these
    /// 			namespaces are the only
    /// 		metric namespaces that are streamed by this metric stream.</p>
    public let includeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// <p>The date of the most recent update to the metric stream's configuration.</p>
    public let lastUpdateDate: ClientRuntime.Date?
    /// <p>The name of the metric stream.</p>
    public let name: Swift.String?
    /// <p></p>
    public let outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
    /// <p>The ARN of the IAM role that is used by this metric stream.</p>
    public let roleArn: Swift.String?
    /// <p>The state of the metric stream. The possible values are <code>running</code>
    /// 		and <code>stopped</code>.</p>
    public let state: Swift.String?

    public init (
        arn: Swift.String? = nil,
        creationDate: ClientRuntime.Date? = nil,
        excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        firehoseArn: Swift.String? = nil,
        includeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        lastUpdateDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat? = nil,
        roleArn: Swift.String? = nil,
        state: Swift.String? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.excludeFilters = excludeFilters
        self.firehoseArn = firehoseArn
        self.includeFilters = includeFilters
        self.lastUpdateDate = lastUpdateDate
        self.name = name
        self.outputFormat = outputFormat
        self.roleArn = roleArn
        self.state = state
    }
}

struct GetMetricStreamOutputResponseBody: Swift.Equatable {
    public let arn: Swift.String?
    public let name: Swift.String?
    public let includeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    public let excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    public let firehoseArn: Swift.String?
    public let roleArn: Swift.String?
    public let state: Swift.String?
    public let creationDate: ClientRuntime.Date?
    public let lastUpdateDate: ClientRuntime.Date?
    public let outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
}

extension GetMetricStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case excludeFilters = "ExcludeFilters"
        case firehoseArn = "FirehoseArn"
        case includeFilters = "IncludeFilters"
        case lastUpdateDate = "LastUpdateDate"
        case name = "Name"
        case outputFormat = "OutputFormat"
        case roleArn = "RoleArn"
        case state = "State"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetMetricStreamResult"))
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.includeFilters) {
            struct KeyVal0{struct member{}}
            let includeFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .includeFilters)
            if let includeFiltersWrappedContainer = includeFiltersWrappedContainer {
                let includeFiltersContainer = try includeFiltersWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamFilter].self, forKey: .member)
                var includeFiltersBuffer:[CloudWatchClientTypes.MetricStreamFilter]? = nil
                if let includeFiltersContainer = includeFiltersContainer {
                    includeFiltersBuffer = [CloudWatchClientTypes.MetricStreamFilter]()
                    for structureContainer0 in includeFiltersContainer {
                        includeFiltersBuffer?.append(structureContainer0)
                    }
                }
                includeFilters = includeFiltersBuffer
            } else {
                includeFilters = []
            }
        } else {
            includeFilters = nil
        }
        if containerValues.contains(.excludeFilters) {
            struct KeyVal0{struct member{}}
            let excludeFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .excludeFilters)
            if let excludeFiltersWrappedContainer = excludeFiltersWrappedContainer {
                let excludeFiltersContainer = try excludeFiltersWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamFilter].self, forKey: .member)
                var excludeFiltersBuffer:[CloudWatchClientTypes.MetricStreamFilter]? = nil
                if let excludeFiltersContainer = excludeFiltersContainer {
                    excludeFiltersBuffer = [CloudWatchClientTypes.MetricStreamFilter]()
                    for structureContainer0 in excludeFiltersContainer {
                        excludeFiltersBuffer?.append(structureContainer0)
                    }
                }
                excludeFilters = excludeFiltersBuffer
            } else {
                excludeFilters = []
            }
        } else {
            excludeFilters = nil
        }
        let firehoseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firehoseArn)
        firehoseArn = firehoseArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        var creationDateBuffer:ClientRuntime.Date? = nil
        if let creationDateDecoded = creationDateDecoded {
            creationDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationDateDecoded, format: .dateTime)
        }
        creationDate = creationDateBuffer
        let lastUpdateDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdateDate)
        var lastUpdateDateBuffer:ClientRuntime.Date? = nil
        if let lastUpdateDateDecoded = lastUpdateDateDecoded {
            lastUpdateDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdateDateDecoded, format: .dateTime)
        }
        lastUpdateDate = lastUpdateDateBuffer
        let outputFormatDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricStreamOutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
    }
}

public struct GetMetricWidgetImageInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricWidgetImageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricWidgetImageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricWidgetImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricWidgetImageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricWidgetImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricWidgetImageOutputError>
}

extension GetMetricWidgetImageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricWidgetImageInput(metricWidget: \(Swift.String(describing: metricWidget)), outputFormat: \(Swift.String(describing: outputFormat)))"}
}

extension GetMetricWidgetImageInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricWidget = metricWidget {
            try container.encode(metricWidget, forKey: ClientRuntime.Key("MetricWidget"))
        }
        if let outputFormat = outputFormat {
            try container.encode(outputFormat, forKey: ClientRuntime.Key("OutputFormat"))
        }
        try container.encode("GetMetricWidgetImage", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetMetricWidgetImageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricWidgetImageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricWidgetImageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricWidgetImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricWidgetImageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricWidgetImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricWidgetImageOutputError>
}

public struct GetMetricWidgetImageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricWidgetImageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricWidgetImageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricWidgetImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricWidgetImageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricWidgetImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricWidgetImageOutputError>
}

public struct GetMetricWidgetImageInput: Swift.Equatable {
    /// <p>A JSON string that defines the bitmap graph to be retrieved. The string includes the
    /// 			metrics to include in the graph, statistics, annotations, title, axis limits, and so on.
    /// 			You can include only one <code>MetricWidget</code> parameter in each <code>GetMetricWidgetImage</code> call.</p>
    /// 		       <p>For more information about the syntax of <code>MetricWidget</code> see
    /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html">GetMetricWidgetImage: Metric Widget Structure and Syntax</a>.</p>
    /// 		
    /// 		       <p>If any metric on the graph could not load all the requested data points, an orange triangle with an exclamation
    /// 			point appears next to the graph legend.</p>
    public let metricWidget: Swift.String?
    /// <p>The format of the resulting image. Only PNG images are supported.</p>
    ///
    /// 		       <p>The default is <code>png</code>. If you specify <code>png</code>, the API returns an HTTP response with the
    /// 			content-type set to <code>text/xml</code>. The image data is in a <code>MetricWidgetImage</code>
    /// 			field. For example:</p>
    /// 		
    /// 		       <p>
    ///             <code>
    /// 			<GetMetricWidgetImageResponse xmlns=<URLstring>></code>
    ///          </p>
    /// 		       <p>
    ///             <code>  <GetMetricWidgetImageResult></code>
    ///          </p>
    /// 		       <p>
    ///             <code>    <MetricWidgetImage></code>
    ///          </p>
    /// 		       <p>
    ///             <code>       iVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...</code>
    ///          </p>
    /// 		       <p>
    ///             <code>    </MetricWidgetImage></code>
    ///          </p>
    /// 		       <p>
    ///             <code>  </GetMetricWidgetImageResult></code>
    ///          </p>
    /// 		       <p>
    ///             <code>  <ResponseMetadata></code>
    ///          </p>
    /// 		       <p>
    ///             <code>    <RequestId>6f0d4192-4d42-11e8-82c1-f539a07e0e3b</RequestId></code>
    ///          </p>
    /// 		       <p>
    ///             <code>  </ResponseMetadata></code>
    ///          </p>
    /// 		       <p>
    ///             <code></GetMetricWidgetImageResponse></code>
    ///          </p>
    /// 		
    /// 		       <p>The <code>image/png</code> setting is intended only for custom HTTP requests. For most
    /// 			use cases, and all actions using an AWS SDK, you should use <code>png</code>. If you specify
    /// 			<code>image/png</code>, the HTTP response has a content-type set to <code>image/png</code>,
    /// 			and the body of the response is a PNG image. </p>
    public let outputFormat: Swift.String?

    public init (
        metricWidget: Swift.String? = nil,
        outputFormat: Swift.String? = nil
    )
    {
        self.metricWidget = metricWidget
        self.outputFormat = outputFormat
    }
}

extension GetMetricWidgetImageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetMetricWidgetImageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMetricWidgetImageOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMetricWidgetImageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricWidgetImageOutputResponse(metricWidgetImage: \(Swift.String(describing: metricWidgetImage)))"}
}

extension GetMetricWidgetImageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMetricWidgetImageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricWidgetImage = output.metricWidgetImage
        } else {
            self.metricWidgetImage = nil
        }
    }
}

public struct GetMetricWidgetImageOutputResponse: Swift.Equatable {
    /// <p>The image of the graph, in the output format specified. The output is base64-encoded.</p>
    public let metricWidgetImage: ClientRuntime.Data?

    public init (
        metricWidgetImage: ClientRuntime.Data? = nil
    )
    {
        self.metricWidgetImage = metricWidgetImage
    }
}

struct GetMetricWidgetImageOutputResponseBody: Swift.Equatable {
    public let metricWidgetImage: ClientRuntime.Data?
}

extension GetMetricWidgetImageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricWidgetImage = "MetricWidgetImage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetMetricWidgetImageResult"))
        if containerValues.contains(.metricWidgetImage) {
            do {
                let metricWidgetImageDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .metricWidgetImage)
                metricWidgetImage = metricWidgetImageDecoded
            } catch {
                metricWidgetImage = "".data(using: .utf8)
            }
        } else {
            metricWidgetImage = nil
        }
    }
}

extension CloudWatchClientTypes {
    public enum HistoryItemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case action
        case configurationupdate
        case stateupdate
        case sdkUnknown(Swift.String)

        public static var allCases: [HistoryItemType] {
            return [
                .action,
                .configurationupdate,
                .stateupdate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .action: return "Action"
            case .configurationupdate: return "ConfigurationUpdate"
            case .stateupdate: return "StateUpdate"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HistoryItemType(rawValue: rawValue) ?? HistoryItemType.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes.InsightRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition = "Definition"
        case name = "Name"
        case schema = "Schema"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let definition = definition {
            try container.encode(definition, forKey: ClientRuntime.Key("Definition"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let schema = schema {
            try container.encode(schema, forKey: ClientRuntime.Key("Schema"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .definition)
        definition = definitionDecoded
    }
}

extension CloudWatchClientTypes.InsightRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsightRule(definition: \(Swift.String(describing: definition)), name: \(Swift.String(describing: name)), schema: \(Swift.String(describing: schema)), state: \(Swift.String(describing: state)))"}
}

extension CloudWatchClientTypes {
    /// <p>This structure contains the definition for a Contributor Insights rule.</p>
    public struct InsightRule: Swift.Equatable {
        /// <p>The definition of the rule, as a JSON object. The definition contains the keywords used to define contributors,
        /// 			the value to aggregate on if this rule returns a sum instead of a count, and the filters. For details on the valid syntax, see
        /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html">Contributor Insights
        /// 				Rule Syntax</a>.</p>
        public let definition: Swift.String?
        /// <p>The name of the rule.</p>
        public let name: Swift.String?
        /// <p>For rules that you create, this is always <code>{"Name": "CloudWatchLogRule", "Version": 1}</code>. For built-in rules,
        /// 			this is <code>{"Name": "ServiceLogRule", "Version": 1}</code>
        ///          </p>
        public let schema: Swift.String?
        /// <p>Indicates whether the rule is enabled or disabled.</p>
        public let state: Swift.String?

        public init (
            definition: Swift.String? = nil,
            name: Swift.String? = nil,
            schema: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.definition = definition
            self.name = name
            self.schema = schema
            self.state = state
        }
    }

}

extension CloudWatchClientTypes.InsightRuleContributor: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateAggregateValue = "ApproximateAggregateValue"
        case datapoints = "Datapoints"
        case keys = "Keys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let approximateAggregateValue = approximateAggregateValue {
            try container.encode(approximateAggregateValue, forKey: ClientRuntime.Key("ApproximateAggregateValue"))
        }
        if let datapoints = datapoints {
            var datapointsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Datapoints"))
            for (index0, insightrulecontributordatapoint0) in datapoints.enumerated() {
                try datapointsContainer.encode(insightrulecontributordatapoint0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let keys = keys {
            var keysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Keys"))
            for (index0, insightrulecontributorkey0) in keys.enumerated() {
                try keysContainer.encode(insightrulecontributorkey0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.keys) {
            struct KeyVal0{struct member{}}
            let keysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .keys)
            if let keysWrappedContainer = keysWrappedContainer {
                let keysContainer = try keysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var keysBuffer:[Swift.String]? = nil
                if let keysContainer = keysContainer {
                    keysBuffer = [Swift.String]()
                    for stringContainer0 in keysContainer {
                        keysBuffer?.append(stringContainer0)
                    }
                }
                keys = keysBuffer
            } else {
                keys = []
            }
        } else {
            keys = nil
        }
        let approximateAggregateValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .approximateAggregateValue)
        approximateAggregateValue = approximateAggregateValueDecoded
        if containerValues.contains(.datapoints) {
            struct KeyVal0{struct member{}}
            let datapointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .datapoints)
            if let datapointsWrappedContainer = datapointsWrappedContainer {
                let datapointsContainer = try datapointsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.InsightRuleContributorDatapoint].self, forKey: .member)
                var datapointsBuffer:[CloudWatchClientTypes.InsightRuleContributorDatapoint]? = nil
                if let datapointsContainer = datapointsContainer {
                    datapointsBuffer = [CloudWatchClientTypes.InsightRuleContributorDatapoint]()
                    for structureContainer0 in datapointsContainer {
                        datapointsBuffer?.append(structureContainer0)
                    }
                }
                datapoints = datapointsBuffer
            } else {
                datapoints = []
            }
        } else {
            datapoints = nil
        }
    }
}

extension CloudWatchClientTypes.InsightRuleContributor: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsightRuleContributor(approximateAggregateValue: \(Swift.String(describing: approximateAggregateValue)), datapoints: \(Swift.String(describing: datapoints)), keys: \(Swift.String(describing: keys)))"}
}

extension CloudWatchClientTypes {
    /// <p>One of the unique contributors found by a Contributor Insights rule. If the rule contains multiple keys, then
    /// 			a unique contributor is a unique combination of values from all the keys in the rule.</p>
    /// 		       <p>If the rule contains a single key, then each unique contributor is each unique value for this key.</p>
    /// 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a>.</p>
    public struct InsightRuleContributor: Swift.Equatable {
        /// <p>An approximation of the aggregate value that comes from this contributor.</p>
        public let approximateAggregateValue: Swift.Double?
        /// <p>An array of the data points where this contributor is present. Only the data points when this contributor appeared are included in the array.</p>
        public let datapoints: [CloudWatchClientTypes.InsightRuleContributorDatapoint]?
        /// <p>One of the log entry field keywords that is used to define contributors for this rule.</p>
        public let keys: [Swift.String]?

        public init (
            approximateAggregateValue: Swift.Double? = nil,
            datapoints: [CloudWatchClientTypes.InsightRuleContributorDatapoint]? = nil,
            keys: [Swift.String]? = nil
        )
        {
            self.approximateAggregateValue = approximateAggregateValue
            self.datapoints = datapoints
            self.keys = keys
        }
    }

}

extension CloudWatchClientTypes.InsightRuleContributorDatapoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateValue = "ApproximateValue"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let approximateValue = approximateValue {
            try container.encode(approximateValue, forKey: ClientRuntime.Key("ApproximateValue"))
        }
        if let timestamp = timestamp {
            try container.encode(ClientRuntime.TimestampWrapper(timestamp, format: .dateTime), forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let approximateValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .approximateValue)
        approximateValue = approximateValueDecoded
    }
}

extension CloudWatchClientTypes.InsightRuleContributorDatapoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsightRuleContributorDatapoint(approximateValue: \(Swift.String(describing: approximateValue)), timestamp: \(Swift.String(describing: timestamp)))"}
}

extension CloudWatchClientTypes {
    /// <p>One data point related to one contributor.</p>
    /// 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a> and
    /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_InsightRuleContributor.html">InsightRuleContributor</a>.</p>
    public struct InsightRuleContributorDatapoint: Swift.Equatable {
        /// <p>The approximate value that this contributor added during this timestamp.</p>
        public let approximateValue: Swift.Double?
        /// <p>The timestamp of the data point.</p>
        public let timestamp: ClientRuntime.Date?

        public init (
            approximateValue: Swift.Double? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.approximateValue = approximateValue
            self.timestamp = timestamp
        }
    }

}

extension CloudWatchClientTypes.InsightRuleMetricDatapoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case average = "Average"
        case maxContributorValue = "MaxContributorValue"
        case maximum = "Maximum"
        case minimum = "Minimum"
        case sampleCount = "SampleCount"
        case sum = "Sum"
        case timestamp = "Timestamp"
        case uniqueContributors = "UniqueContributors"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let average = average {
            try container.encode(average, forKey: ClientRuntime.Key("Average"))
        }
        if let maxContributorValue = maxContributorValue {
            try container.encode(maxContributorValue, forKey: ClientRuntime.Key("MaxContributorValue"))
        }
        if let maximum = maximum {
            try container.encode(maximum, forKey: ClientRuntime.Key("Maximum"))
        }
        if let minimum = minimum {
            try container.encode(minimum, forKey: ClientRuntime.Key("Minimum"))
        }
        if let sampleCount = sampleCount {
            try container.encode(sampleCount, forKey: ClientRuntime.Key("SampleCount"))
        }
        if let sum = sum {
            try container.encode(sum, forKey: ClientRuntime.Key("Sum"))
        }
        if let timestamp = timestamp {
            try container.encode(ClientRuntime.TimestampWrapper(timestamp, format: .dateTime), forKey: ClientRuntime.Key("timestamp"))
        }
        if let uniqueContributors = uniqueContributors {
            try container.encode(uniqueContributors, forKey: ClientRuntime.Key("UniqueContributors"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let uniqueContributorsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .uniqueContributors)
        uniqueContributors = uniqueContributorsDecoded
        let maxContributorValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxContributorValue)
        maxContributorValue = maxContributorValueDecoded
        let sampleCountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleCount)
        sampleCount = sampleCountDecoded
        let averageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .average)
        average = averageDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maximum)
        maximum = maximumDecoded
    }
}

extension CloudWatchClientTypes.InsightRuleMetricDatapoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsightRuleMetricDatapoint(average: \(Swift.String(describing: average)), maxContributorValue: \(Swift.String(describing: maxContributorValue)), maximum: \(Swift.String(describing: maximum)), minimum: \(Swift.String(describing: minimum)), sampleCount: \(Swift.String(describing: sampleCount)), sum: \(Swift.String(describing: sum)), timestamp: \(Swift.String(describing: timestamp)), uniqueContributors: \(Swift.String(describing: uniqueContributors)))"}
}

extension CloudWatchClientTypes {
    /// <p>One data point from the metric time series returned in a Contributor Insights rule report.</p>
    /// 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a>.</p>
    public struct InsightRuleMetricDatapoint: Swift.Equatable {
        /// <p>The average value from all contributors during the time period represented by that data point.</p>
        /// 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
        public let average: Swift.Double?
        /// <p>The maximum value provided by one contributor during this timestamp. Each timestamp is evaluated separately,
        /// 			so the identity of the max contributor
        /// 		could be different for each timestamp.</p>
        /// 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
        public let maxContributorValue: Swift.Double?
        /// <p>The maximum value from a single occurence from a single contributor during the time period represented by that data point.</p>
        /// 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
        public let maximum: Swift.Double?
        /// <p>The minimum value from a single contributor during the time period represented by that data point.</p>
        /// 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
        public let minimum: Swift.Double?
        /// <p>The number of occurrences that matched the rule during this data point.</p>
        /// 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
        public let sampleCount: Swift.Double?
        /// <p>The sum of the values from all contributors during the time period represented by that data point.</p>
        /// 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
        public let sum: Swift.Double?
        /// <p>The timestamp of the data point.</p>
        public let timestamp: ClientRuntime.Date?
        /// <p>The number of unique contributors who published data during this timestamp.</p>
        /// 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
        public let uniqueContributors: Swift.Double?

        public init (
            average: Swift.Double? = nil,
            maxContributorValue: Swift.Double? = nil,
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil,
            timestamp: ClientRuntime.Date? = nil,
            uniqueContributors: Swift.Double? = nil
        )
        {
            self.average = average
            self.maxContributorValue = maxContributorValue
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.uniqueContributors = uniqueContributors
        }
    }

}

extension InternalServiceFault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServiceFault(message: \(Swift.String(describing: message)))"}
}

extension InternalServiceFault: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InternalServiceFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Request processing has failed due to some unknown error, exception, or failure.</p>
public struct InternalServiceFault: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServiceFaultBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServiceFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidFormatFault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidFormatFault(message: \(Swift.String(describing: message)))"}
}

extension InvalidFormatFault: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidFormatFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Data was not syntactically valid JSON.</p>
public struct InvalidFormatFault: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidFormatFaultBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidFormatFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNextToken: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidNextToken(message: \(Swift.String(describing: message)))"}
}

extension InvalidNextToken: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidNextTokenBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The next token specified is invalid.</p>
public struct InvalidNextToken: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidNextTokenBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterCombinationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidParameterCombinationException(message: \(Swift.String(describing: message)))"}
}

extension InvalidParameterCombinationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidParameterCombinationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Parameters were used together that cannot be used together.</p>
public struct InvalidParameterCombinationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterCombinationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidParameterCombinationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterValueException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidParameterValueException(message: \(Swift.String(describing: message)))"}
}

extension InvalidParameterValueException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidParameterValueExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The value of an input parameter is bad or out-of-range.</p>
public struct InvalidParameterValueException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterValueExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidParameterValueExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes.LabelOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timezone = "Timezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let timezone = timezone {
            try container.encode(timezone, forKey: ClientRuntime.Key("Timezone"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
    }
}

extension CloudWatchClientTypes.LabelOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LabelOptions(timezone: \(Swift.String(describing: timezone)))"}
}

extension CloudWatchClientTypes {
    /// <p>This structure includes the <code>Timezone</code> parameter, which you can use
    /// 			to specify your time zone so that the labels that are associated with returned metrics display the
    /// 			correct time
    /// 			for your time zone. </p>
    /// 		       <p>The <code>Timezone</code> value affects a label only if you have a time-based
    /// 		dynamic expression in the label. For more information about dynamic expressions in labels,
    /// 		see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html">Using Dynamic Labels</a>.</p>
    public struct LabelOptions: Swift.Equatable {
        /// <p>The time zone to use for metric data return in this operation.
        /// 			The format is <code>+</code> or <code>-</code> followed by four digits.
        /// 			The first two digits indicate the number of hours ahead or behind of UTC, and
        /// 			the final two digits are the number of minutes. For example, +0130 indicates a time zone that is 1 hour
        /// 			and 30 minutes ahead of UTC. The default is +0000. </p>
        public let timezone: Swift.String?

        public init (
            timezone: Swift.String? = nil
        )
        {
            self.timezone = timezone
        }
    }

}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<LimitExceededExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation exceeded one or more limits.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededFault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededFault(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededFault: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<LimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The quota for alarms for this customer has already been reached.</p>
public struct LimitExceededFault: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededFaultBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListDashboardsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDashboardsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDashboardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDashboardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDashboardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDashboardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDashboardsOutputError>
}

extension ListDashboardsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDashboardsInput(dashboardNamePrefix: \(Swift.String(describing: dashboardNamePrefix)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDashboardsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dashboardNamePrefix = dashboardNamePrefix {
            try container.encode(dashboardNamePrefix, forKey: ClientRuntime.Key("DashboardNamePrefix"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListDashboards", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListDashboardsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDashboardsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDashboardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDashboardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDashboardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDashboardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDashboardsOutputError>
}

public struct ListDashboardsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDashboardsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDashboardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDashboardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDashboardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDashboardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDashboardsOutputError>
}

public struct ListDashboardsInput: Swift.Equatable {
    /// <p>If you specify this parameter, only
    /// 			the dashboards with names starting with the specified string are listed. The maximum length is 255, and
    /// 			valid characters are A-Z, a-z, 0-9, ".", "-", and "_".
    /// 			
    /// 		</p>
    public let dashboardNamePrefix: Swift.String?
    /// <p>The token returned by a previous call to indicate that there is more data available.</p>
    public let nextToken: Swift.String?

    public init (
        dashboardNamePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dashboardNamePrefix = dashboardNamePrefix
        self.nextToken = nextToken
    }
}

extension ListDashboardsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListDashboardsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDashboardsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDashboardsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDashboardsOutputResponse(dashboardEntries: \(Swift.String(describing: dashboardEntries)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDashboardsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDashboardsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dashboardEntries = output.dashboardEntries
            self.nextToken = output.nextToken
        } else {
            self.dashboardEntries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDashboardsOutputResponse: Swift.Equatable {
    /// <p>The list of matching dashboards.</p>
    public let dashboardEntries: [CloudWatchClientTypes.DashboardEntry]?
    /// <p>The token that marks the start of the next batch of returned results.</p>
    public let nextToken: Swift.String?

    public init (
        dashboardEntries: [CloudWatchClientTypes.DashboardEntry]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dashboardEntries = dashboardEntries
        self.nextToken = nextToken
    }
}

struct ListDashboardsOutputResponseBody: Swift.Equatable {
    public let dashboardEntries: [CloudWatchClientTypes.DashboardEntry]?
    public let nextToken: Swift.String?
}

extension ListDashboardsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardEntries = "DashboardEntries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListDashboardsResult"))
        if containerValues.contains(.dashboardEntries) {
            struct KeyVal0{struct member{}}
            let dashboardEntriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dashboardEntries)
            if let dashboardEntriesWrappedContainer = dashboardEntriesWrappedContainer {
                let dashboardEntriesContainer = try dashboardEntriesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.DashboardEntry].self, forKey: .member)
                var dashboardEntriesBuffer:[CloudWatchClientTypes.DashboardEntry]? = nil
                if let dashboardEntriesContainer = dashboardEntriesContainer {
                    dashboardEntriesBuffer = [CloudWatchClientTypes.DashboardEntry]()
                    for structureContainer0 in dashboardEntriesContainer {
                        dashboardEntriesBuffer?.append(structureContainer0)
                    }
                }
                dashboardEntries = dashboardEntriesBuffer
            } else {
                dashboardEntries = []
            }
        } else {
            dashboardEntries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListMetricStreamsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMetricStreamsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMetricStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMetricStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMetricStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMetricStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMetricStreamsOutputError>
}

extension ListMetricStreamsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMetricStreamsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListMetricStreamsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListMetricStreams", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListMetricStreamsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMetricStreamsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMetricStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMetricStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMetricStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMetricStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMetricStreamsOutputError>
}

public struct ListMetricStreamsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMetricStreamsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMetricStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMetricStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMetricStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMetricStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMetricStreamsOutputError>
}

public struct ListMetricStreamsInput: Swift.Equatable {
    /// <p>The maximum number of results to return in one operation.</p>
    public let maxResults: Swift.Int?
    /// <p>Include this value, if it was returned by the previous call, to get the next set of metric streams.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListMetricStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListMetricStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMetricStreamsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidNextToken(InvalidNextToken)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMetricStreamsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMetricStreamsOutputResponse(entries: \(Swift.String(describing: entries)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListMetricStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMetricStreamsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entries = output.entries
            self.nextToken = output.nextToken
        } else {
            self.entries = nil
            self.nextToken = nil
        }
    }
}

public struct ListMetricStreamsOutputResponse: Swift.Equatable {
    /// <p>The array of metric stream information.</p>
    public let entries: [CloudWatchClientTypes.MetricStreamEntry]?
    /// <p>The token that marks the start of the next batch of returned results. You can use this
    /// 		token in a subsequent operation to get the next batch of results.</p>
    public let nextToken: Swift.String?

    public init (
        entries: [CloudWatchClientTypes.MetricStreamEntry]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entries = entries
        self.nextToken = nextToken
    }
}

struct ListMetricStreamsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let entries: [CloudWatchClientTypes.MetricStreamEntry]?
}

extension ListMetricStreamsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entries = "Entries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListMetricStreamsResult"))
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.entries) {
            struct KeyVal0{struct member{}}
            let entriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .entries)
            if let entriesWrappedContainer = entriesWrappedContainer {
                let entriesContainer = try entriesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamEntry].self, forKey: .member)
                var entriesBuffer:[CloudWatchClientTypes.MetricStreamEntry]? = nil
                if let entriesContainer = entriesContainer {
                    entriesBuffer = [CloudWatchClientTypes.MetricStreamEntry]()
                    for structureContainer0 in entriesContainer {
                        entriesBuffer?.append(structureContainer0)
                    }
                }
                entries = entriesBuffer
            } else {
                entries = []
            }
        } else {
            entries = nil
        }
    }
}

public struct ListMetricsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMetricsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMetricsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMetricsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMetricsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMetricsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMetricsOutputError>
}

extension ListMetricsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMetricsInput(dimensions: \(Swift.String(describing: dimensions)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), nextToken: \(Swift.String(describing: nextToken)), recentlyActive: \(Swift.String(describing: recentlyActive)))"}
}

extension ListMetricsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimensionfilter0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimensionfilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let recentlyActive = recentlyActive {
            try container.encode(recentlyActive, forKey: ClientRuntime.Key("RecentlyActive"))
        }
        try container.encode("ListMetrics", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListMetricsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMetricsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMetricsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMetricsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMetricsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMetricsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMetricsOutputError>
}

public struct ListMetricsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMetricsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMetricsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMetricsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMetricsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMetricsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMetricsOutputError>
}

public struct ListMetricsInput: Swift.Equatable {
    /// <p>The dimensions to filter against.  Only the dimensions that match exactly
    /// 			will be returned.</p>
    public let dimensions: [CloudWatchClientTypes.DimensionFilter]?
    /// <p>The name of the metric to filter against.  Only the metrics with names that match exactly
    /// 			will be returned.</p>
    public let metricName: Swift.String?
    /// <p>The metric namespace to filter against. Only the namespace that matches exactly
    /// 		will be returned.</p>
    public let namespace: Swift.String?
    /// <p>The token returned by a previous call to indicate that there is more data
    /// 			available.</p>
    public let nextToken: Swift.String?
    /// <p>To filter the results to show only metrics that have had data points published
    /// 			in the past three hours, specify this parameter
    /// 			with a value of <code>PT3H</code>. This is the only valid value
    /// 			for this parameter.</p>
    /// 		       <p>The results that are returned are an approximation of the value you specify. There
    /// 		is a low probability that the returned results include metrics with last published
    /// 		data as much as 40 minutes more than the specified time interval.</p>
    public let recentlyActive: CloudWatchClientTypes.RecentlyActive?

    public init (
        dimensions: [CloudWatchClientTypes.DimensionFilter]? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        recentlyActive: CloudWatchClientTypes.RecentlyActive? = nil
    )
    {
        self.dimensions = dimensions
        self.metricName = metricName
        self.namespace = namespace
        self.nextToken = nextToken
        self.recentlyActive = recentlyActive
    }
}

extension ListMetricsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListMetricsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMetricsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMetricsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMetricsOutputResponse(metrics: \(Swift.String(describing: metrics)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListMetricsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMetricsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metrics = output.metrics
            self.nextToken = output.nextToken
        } else {
            self.metrics = nil
            self.nextToken = nil
        }
    }
}

public struct ListMetricsOutputResponse: Swift.Equatable {
    /// <p>The metrics that match your request. </p>
    public let metrics: [CloudWatchClientTypes.Metric]?
    /// <p>The token that marks the start of the next batch of returned results. </p>
    public let nextToken: Swift.String?

    public init (
        metrics: [CloudWatchClientTypes.Metric]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.metrics = metrics
        self.nextToken = nextToken
    }
}

struct ListMetricsOutputResponseBody: Swift.Equatable {
    public let metrics: [CloudWatchClientTypes.Metric]?
    public let nextToken: Swift.String?
}

extension ListMetricsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metrics = "Metrics"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListMetricsResult"))
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Metric].self, forKey: .member)
                var metricsBuffer:[CloudWatchClientTypes.Metric]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [CloudWatchClientTypes.Metric]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTagsForResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resourceARN: \(Swift.String(describing: resourceARN)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceARN = resourceARN {
            try container.encode(resourceARN, forKey: ClientRuntime.Key("ResourceARN"))
        }
        try container.encode("ListTagsForResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// <p>The ARN of the CloudWatch resource that you want to view tags for.</p>
    /// 		       <p>The ARN format of an alarm is
    /// 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i>
    ///             </code>
    ///          </p>
    /// 		       <p>The ARN format of a Contributor Insights rule is
    /// 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i>
    ///             </code>
    ///          </p>
    /// 	        <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies"> Resource
    /// 				Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General
    /// 			Reference</i>.</p>
    public let resourceARN: Swift.String?

    public init (
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// <p>The list of tag keys and values associated with the resource you specified.</p>
    public let tags: [CloudWatchClientTypes.Tag]?

    public init (
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [CloudWatchClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTagsForResourceResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudWatchClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudWatchClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CloudWatchClientTypes.MessageData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let code = code {
            try container.encode(code, forKey: ClientRuntime.Key("Code"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudWatchClientTypes.MessageData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MessageData(code: \(Swift.String(describing: code)), value: \(Swift.String(describing: value)))"}
}

extension CloudWatchClientTypes {
    /// <p>A message returned by the <code>GetMetricData</code>API, including a code and a description.</p>
    public struct MessageData: Swift.Equatable {
        /// <p>The error code or status code associated with the message.</p>
        public let code: Swift.String?
        /// <p>The message text.</p>
        public let value: Swift.String?

        public init (
            code: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.code = code
            self.value = value
        }
    }

}

extension CloudWatchClientTypes.Metric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
    }
}

extension CloudWatchClientTypes.Metric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Metric(dimensions: \(Swift.String(describing: dimensions)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)))"}
}

extension CloudWatchClientTypes {
    /// <p>Represents a specific metric.</p>
    public struct Metric: Swift.Equatable {
        /// <p>The dimensions for the metric.</p>
        public let dimensions: [CloudWatchClientTypes.Dimension]?
        /// <p>The name of the metric. This is a required field.</p>
        public let metricName: Swift.String?
        /// <p>The namespace of the metric.</p>
        public let namespace: Swift.String?

        public init (
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
        }
    }

}

extension CloudWatchClientTypes.MetricAlarm: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsEnabled = "ActionsEnabled"
        case alarmActions = "AlarmActions"
        case alarmArn = "AlarmArn"
        case alarmConfigurationUpdatedTimestamp = "AlarmConfigurationUpdatedTimestamp"
        case alarmDescription = "AlarmDescription"
        case alarmName = "AlarmName"
        case comparisonOperator = "ComparisonOperator"
        case datapointsToAlarm = "DatapointsToAlarm"
        case dimensions = "Dimensions"
        case evaluateLowSampleCountPercentile = "EvaluateLowSampleCountPercentile"
        case evaluationPeriods = "EvaluationPeriods"
        case extendedStatistic = "ExtendedStatistic"
        case insufficientDataActions = "InsufficientDataActions"
        case metricName = "MetricName"
        case metrics = "Metrics"
        case namespace = "Namespace"
        case oKActions = "OKActions"
        case period = "Period"
        case stateReason = "StateReason"
        case stateReasonData = "StateReasonData"
        case stateUpdatedTimestamp = "StateUpdatedTimestamp"
        case stateValue = "StateValue"
        case statistic = "Statistic"
        case threshold = "Threshold"
        case thresholdMetricId = "ThresholdMetricId"
        case treatMissingData = "TreatMissingData"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionsEnabled = actionsEnabled {
            try container.encode(actionsEnabled, forKey: ClientRuntime.Key("ActionsEnabled"))
        }
        if let alarmActions = alarmActions {
            var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
            for (index0, resourcename0) in alarmActions.enumerated() {
                try alarmActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let alarmArn = alarmArn {
            try container.encode(alarmArn, forKey: ClientRuntime.Key("AlarmArn"))
        }
        if let alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(alarmConfigurationUpdatedTimestamp, format: .dateTime), forKey: ClientRuntime.Key("alarmConfigurationUpdatedTimestamp"))
        }
        if let alarmDescription = alarmDescription {
            try container.encode(alarmDescription, forKey: ClientRuntime.Key("AlarmDescription"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let comparisonOperator = comparisonOperator {
            try container.encode(comparisonOperator, forKey: ClientRuntime.Key("ComparisonOperator"))
        }
        if let datapointsToAlarm = datapointsToAlarm {
            try container.encode(datapointsToAlarm, forKey: ClientRuntime.Key("DatapointsToAlarm"))
        }
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile {
            try container.encode(evaluateLowSampleCountPercentile, forKey: ClientRuntime.Key("EvaluateLowSampleCountPercentile"))
        }
        if let evaluationPeriods = evaluationPeriods {
            try container.encode(evaluationPeriods, forKey: ClientRuntime.Key("EvaluationPeriods"))
        }
        if let extendedStatistic = extendedStatistic {
            try container.encode(extendedStatistic, forKey: ClientRuntime.Key("ExtendedStatistic"))
        }
        if let insufficientDataActions = insufficientDataActions {
            var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
            for (index0, resourcename0) in insufficientDataActions.enumerated() {
                try insufficientDataActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let metrics = metrics {
            var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
            for (index0, metricdataquery0) in metrics.enumerated() {
                try metricsContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let oKActions = oKActions {
            var oKActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
            for (index0, resourcename0) in oKActions.enumerated() {
                try oKActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let stateReason = stateReason {
            try container.encode(stateReason, forKey: ClientRuntime.Key("StateReason"))
        }
        if let stateReasonData = stateReasonData {
            try container.encode(stateReasonData, forKey: ClientRuntime.Key("StateReasonData"))
        }
        if let stateUpdatedTimestamp = stateUpdatedTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(stateUpdatedTimestamp, format: .dateTime), forKey: ClientRuntime.Key("stateUpdatedTimestamp"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: ClientRuntime.Key("StateValue"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
        if let threshold = threshold {
            try container.encode(threshold, forKey: ClientRuntime.Key("Threshold"))
        }
        if let thresholdMetricId = thresholdMetricId {
            try container.encode(thresholdMetricId, forKey: ClientRuntime.Key("ThresholdMetricId"))
        }
        if let treatMissingData = treatMissingData {
            try container.encode(treatMissingData, forKey: ClientRuntime.Key("TreatMissingData"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmArn)
        alarmArn = alarmArnDecoded
        let alarmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmDescription)
        alarmDescription = alarmDescriptionDecoded
        let alarmConfigurationUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmConfigurationUpdatedTimestamp)
        var alarmConfigurationUpdatedTimestampBuffer:ClientRuntime.Date? = nil
        if let alarmConfigurationUpdatedTimestampDecoded = alarmConfigurationUpdatedTimestampDecoded {
            alarmConfigurationUpdatedTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(alarmConfigurationUpdatedTimestampDecoded, format: .dateTime)
        }
        alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestampBuffer
        let actionsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .actionsEnabled)
        actionsEnabled = actionsEnabledDecoded
        if containerValues.contains(.oKActions) {
            struct KeyVal0{struct member{}}
            let oKActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .oKActions)
            if let oKActionsWrappedContainer = oKActionsWrappedContainer {
                let oKActionsContainer = try oKActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var oKActionsBuffer:[Swift.String]? = nil
                if let oKActionsContainer = oKActionsContainer {
                    oKActionsBuffer = [Swift.String]()
                    for stringContainer0 in oKActionsContainer {
                        oKActionsBuffer?.append(stringContainer0)
                    }
                }
                oKActions = oKActionsBuffer
            } else {
                oKActions = []
            }
        } else {
            oKActions = nil
        }
        if containerValues.contains(.alarmActions) {
            struct KeyVal0{struct member{}}
            let alarmActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmActions)
            if let alarmActionsWrappedContainer = alarmActionsWrappedContainer {
                let alarmActionsContainer = try alarmActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmActionsBuffer:[Swift.String]? = nil
                if let alarmActionsContainer = alarmActionsContainer {
                    alarmActionsBuffer = [Swift.String]()
                    for stringContainer0 in alarmActionsContainer {
                        alarmActionsBuffer?.append(stringContainer0)
                    }
                }
                alarmActions = alarmActionsBuffer
            } else {
                alarmActions = []
            }
        } else {
            alarmActions = nil
        }
        if containerValues.contains(.insufficientDataActions) {
            struct KeyVal0{struct member{}}
            let insufficientDataActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insufficientDataActions)
            if let insufficientDataActionsWrappedContainer = insufficientDataActionsWrappedContainer {
                let insufficientDataActionsContainer = try insufficientDataActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var insufficientDataActionsBuffer:[Swift.String]? = nil
                if let insufficientDataActionsContainer = insufficientDataActionsContainer {
                    insufficientDataActionsBuffer = [Swift.String]()
                    for stringContainer0 in insufficientDataActionsContainer {
                        insufficientDataActionsBuffer?.append(stringContainer0)
                    }
                }
                insufficientDataActions = insufficientDataActionsBuffer
            } else {
                insufficientDataActions = []
            }
        } else {
            insufficientDataActions = nil
        }
        let stateValueDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StateValue.self, forKey: .stateValue)
        stateValue = stateValueDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let stateReasonDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReasonData)
        stateReasonData = stateReasonDataDecoded
        let stateUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateUpdatedTimestamp)
        var stateUpdatedTimestampBuffer:ClientRuntime.Date? = nil
        if let stateUpdatedTimestampDecoded = stateUpdatedTimestampDecoded {
            stateUpdatedTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(stateUpdatedTimestampDecoded, format: .dateTime)
        }
        stateUpdatedTimestamp = stateUpdatedTimestampBuffer
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.Statistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let extendedStatisticDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extendedStatistic)
        extendedStatistic = extendedStatisticDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let datapointsToAlarmDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .datapointsToAlarm)
        datapointsToAlarm = datapointsToAlarmDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let treatMissingDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatMissingData)
        treatMissingData = treatMissingDataDecoded
        let evaluateLowSampleCountPercentileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluateLowSampleCountPercentile)
        evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentileDecoded
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDataQuery].self, forKey: .member)
                var metricsBuffer:[CloudWatchClientTypes.MetricDataQuery]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [CloudWatchClientTypes.MetricDataQuery]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        let thresholdMetricIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thresholdMetricId)
        thresholdMetricId = thresholdMetricIdDecoded
    }
}

extension CloudWatchClientTypes.MetricAlarm: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricAlarm(actionsEnabled: \(Swift.String(describing: actionsEnabled)), alarmActions: \(Swift.String(describing: alarmActions)), alarmArn: \(Swift.String(describing: alarmArn)), alarmConfigurationUpdatedTimestamp: \(Swift.String(describing: alarmConfigurationUpdatedTimestamp)), alarmDescription: \(Swift.String(describing: alarmDescription)), alarmName: \(Swift.String(describing: alarmName)), comparisonOperator: \(Swift.String(describing: comparisonOperator)), datapointsToAlarm: \(Swift.String(describing: datapointsToAlarm)), dimensions: \(Swift.String(describing: dimensions)), evaluateLowSampleCountPercentile: \(Swift.String(describing: evaluateLowSampleCountPercentile)), evaluationPeriods: \(Swift.String(describing: evaluationPeriods)), extendedStatistic: \(Swift.String(describing: extendedStatistic)), insufficientDataActions: \(Swift.String(describing: insufficientDataActions)), metricName: \(Swift.String(describing: metricName)), metrics: \(Swift.String(describing: metrics)), namespace: \(Swift.String(describing: namespace)), oKActions: \(Swift.String(describing: oKActions)), period: \(Swift.String(describing: period)), stateReason: \(Swift.String(describing: stateReason)), stateReasonData: \(Swift.String(describing: stateReasonData)), stateUpdatedTimestamp: \(Swift.String(describing: stateUpdatedTimestamp)), stateValue: \(Swift.String(describing: stateValue)), statistic: \(Swift.String(describing: statistic)), threshold: \(Swift.String(describing: threshold)), thresholdMetricId: \(Swift.String(describing: thresholdMetricId)), treatMissingData: \(Swift.String(describing: treatMissingData)), unit: \(Swift.String(describing: unit)))"}
}

extension CloudWatchClientTypes {
    /// <p>The details about a metric alarm.</p>
    public struct MetricAlarm: Swift.Equatable {
        /// <p>Indicates whether actions should be executed during any changes to the alarm state.</p>
        public let actionsEnabled: Swift.Bool?
        /// <p>The actions to execute when this alarm transitions to the <code>ALARM</code> state
        /// 			from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
        public let alarmActions: [Swift.String]?
        /// <p>The Amazon Resource Name (ARN) of the alarm.</p>
        public let alarmArn: Swift.String?
        /// <p>The time stamp of the last update to the alarm configuration.</p>
        public let alarmConfigurationUpdatedTimestamp: ClientRuntime.Date?
        /// <p>The description of the alarm.</p>
        public let alarmDescription: Swift.String?
        /// <p>The name of the alarm.</p>
        public let alarmName: Swift.String?
        /// <p>The arithmetic operation to use when comparing the specified
        /// 			statistic and threshold. The specified statistic value is used as the first operand.</p>
        public let comparisonOperator: CloudWatchClientTypes.ComparisonOperator?
        /// <p>The number of data points that must be breaching to trigger the alarm.</p>
        public let datapointsToAlarm: Swift.Int?
        /// <p>The dimensions for the metric associated with the alarm.</p>
        public let dimensions: [CloudWatchClientTypes.Dimension]?
        /// <p>Used only for alarms based on percentiles. If <code>ignore</code>, the alarm state does not change
        /// 			during periods with too few data points to be statistically significant. If <code>evaluate</code> or this
        /// 			parameter is not used, the alarm is always evaluated and possibly changes state no matter
        /// 			how many data points are available.</p>
        public let evaluateLowSampleCountPercentile: Swift.String?
        /// <p>The number of periods over which data is compared to the specified threshold.</p>
        public let evaluationPeriods: Swift.Int?
        /// <p>The percentile statistic for the metric associated with the alarm. Specify a value between
        /// 			p0.0 and p100.</p>
        public let extendedStatistic: Swift.String?
        /// <p>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code> state
        /// 			from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
        public let insufficientDataActions: [Swift.String]?
        /// <p>The name of the metric associated with the alarm, if this is an alarm
        /// 		based on a single metric.</p>
        public let metricName: Swift.String?
        /// <p>An array of MetricDataQuery structures, used in an alarm based on a
        /// 			metric math expression. Each structure either retrieves a
        /// 			metric or performs a math expression.
        /// 			
        /// 			One item in the Metrics array is the math expression that the alarm watches.
        /// 			This expression by designated by having <code>ReturnData</code> set to
        /// 			true.</p>
        public let metrics: [CloudWatchClientTypes.MetricDataQuery]?
        /// <p>The namespace of the metric associated with the alarm.</p>
        public let namespace: Swift.String?
        /// <p>The actions to execute when this alarm transitions to the <code>OK</code> state
        /// 			from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
        public let oKActions: [Swift.String]?
        /// <p>The period, in seconds, over which the statistic is applied.</p>
        public let period: Swift.Int?
        /// <p>An explanation for the alarm state, in text format.</p>
        public let stateReason: Swift.String?
        /// <p>An explanation for the alarm state, in JSON format.</p>
        public let stateReasonData: Swift.String?
        /// <p>The time stamp of the last update to the alarm state.</p>
        public let stateUpdatedTimestamp: ClientRuntime.Date?
        /// <p>The state value for the alarm.</p>
        public let stateValue: CloudWatchClientTypes.StateValue?
        /// <p>The statistic for the metric associated with the alarm, other than percentile.
        /// 		    For percentile statistics, use <code>ExtendedStatistic</code>.</p>
        public let statistic: CloudWatchClientTypes.Statistic?
        /// <p>The value to compare with the specified statistic.</p>
        public let threshold: Swift.Double?
        /// <p>In an alarm based on an anomaly detection model, this is the ID of the
        /// 			<code>ANOMALY_DETECTION_BAND</code> function
        /// 			used as the threshold for the alarm.</p>
        public let thresholdMetricId: Swift.String?
        /// <p>Sets how this alarm is to handle missing data points. If this parameter is omitted, the default behavior of <code>missing</code> is used.</p>
        public let treatMissingData: Swift.String?
        /// <p>The unit of the metric associated with the alarm.</p>
        public let unit: CloudWatchClientTypes.StandardUnit?

        public init (
            actionsEnabled: Swift.Bool? = nil,
            alarmActions: [Swift.String]? = nil,
            alarmArn: Swift.String? = nil,
            alarmConfigurationUpdatedTimestamp: ClientRuntime.Date? = nil,
            alarmDescription: Swift.String? = nil,
            alarmName: Swift.String? = nil,
            comparisonOperator: CloudWatchClientTypes.ComparisonOperator? = nil,
            datapointsToAlarm: Swift.Int? = nil,
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            evaluateLowSampleCountPercentile: Swift.String? = nil,
            evaluationPeriods: Swift.Int? = nil,
            extendedStatistic: Swift.String? = nil,
            insufficientDataActions: [Swift.String]? = nil,
            metricName: Swift.String? = nil,
            metrics: [CloudWatchClientTypes.MetricDataQuery]? = nil,
            namespace: Swift.String? = nil,
            oKActions: [Swift.String]? = nil,
            period: Swift.Int? = nil,
            stateReason: Swift.String? = nil,
            stateReasonData: Swift.String? = nil,
            stateUpdatedTimestamp: ClientRuntime.Date? = nil,
            stateValue: CloudWatchClientTypes.StateValue? = nil,
            statistic: CloudWatchClientTypes.Statistic? = nil,
            threshold: Swift.Double? = nil,
            thresholdMetricId: Swift.String? = nil,
            treatMissingData: Swift.String? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil
        )
        {
            self.actionsEnabled = actionsEnabled
            self.alarmActions = alarmActions
            self.alarmArn = alarmArn
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.comparisonOperator = comparisonOperator
            self.datapointsToAlarm = datapointsToAlarm
            self.dimensions = dimensions
            self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
            self.evaluationPeriods = evaluationPeriods
            self.extendedStatistic = extendedStatistic
            self.insufficientDataActions = insufficientDataActions
            self.metricName = metricName
            self.metrics = metrics
            self.namespace = namespace
            self.oKActions = oKActions
            self.period = period
            self.stateReason = stateReason
            self.stateReasonData = stateReasonData
            self.stateUpdatedTimestamp = stateUpdatedTimestamp
            self.stateValue = stateValue
            self.statistic = statistic
            self.threshold = threshold
            self.thresholdMetricId = thresholdMetricId
            self.treatMissingData = treatMissingData
            self.unit = unit
        }
    }

}

extension CloudWatchClientTypes.MetricDataQuery: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression = "Expression"
        case id = "Id"
        case label = "Label"
        case metricStat = "MetricStat"
        case period = "Period"
        case returnData = "ReturnData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let expression = expression {
            try container.encode(expression, forKey: ClientRuntime.Key("Expression"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let label = label {
            try container.encode(label, forKey: ClientRuntime.Key("Label"))
        }
        if let metricStat = metricStat {
            try container.encode(metricStat, forKey: ClientRuntime.Key("MetricStat"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let returnData = returnData {
            try container.encode(returnData, forKey: ClientRuntime.Key("ReturnData"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let metricStatDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricStat.self, forKey: .metricStat)
        metricStat = metricStatDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let returnDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .returnData)
        returnData = returnDataDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
    }
}

extension CloudWatchClientTypes.MetricDataQuery: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricDataQuery(expression: \(Swift.String(describing: expression)), id: \(Swift.String(describing: id)), label: \(Swift.String(describing: label)), metricStat: \(Swift.String(describing: metricStat)), period: \(Swift.String(describing: period)), returnData: \(Swift.String(describing: returnData)))"}
}

extension CloudWatchClientTypes {
    /// <p>This structure is used in both <code>GetMetricData</code> and <code>PutMetricAlarm</code>. The supported
    /// 			use of this structure is different for those two operations.</p>
    /// 		       <p>When used in <code>GetMetricData</code>, it indicates the metric data to return, and whether this call is just retrieving
    /// 			a batch set of data for one metric, or is performing a math expression on metric data. A
    /// 			single <code>GetMetricData</code> call can include up to 500 <code>MetricDataQuery</code>
    /// 			structures.</p>
    /// 		       <p>When used in <code>PutMetricAlarm</code>, it enables you to create an alarm based on a
    /// 			metric math expression. Each <code>MetricDataQuery</code> in the array specifies either
    /// 			a metric to retrieve, or a math expression to be performed on retrieved metrics. A
    /// 			single <code>PutMetricAlarm</code> call can include up to 20
    /// 				<code>MetricDataQuery</code> structures in the array. The 20 structures can include
    /// 			as many as 10 structures that contain a <code>MetricStat</code> parameter to retrieve a
    /// 			metric, and as many as 10 structures that contain the <code>Expression</code> parameter
    /// 			to perform a math expression. Of those <code>Expression</code> structures, one must have <code>True</code>
    /// 		as the value for <code>ReturnData</code>. The result of this expression is the value the alarm watches.</p>
    ///
    /// 		       <p>Any expression used in a <code>PutMetricAlarm</code>
    /// 			operation must return a single time series. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric Math Syntax and Functions</a> in the <i>Amazon CloudWatch User
    /// 				Guide</i>.</p>
    ///
    /// 		       <p>Some of the parameters of this structure also have different uses whether you are using this structure in a <code>GetMetricData</code>
    /// 			operation or a <code>PutMetricAlarm</code> operation. These differences are explained in the following parameter list.</p>
    public struct MetricDataQuery: Swift.Equatable {
        /// <p>The math expression to be performed on the returned data, if this object is performing a math expression. This expression
        /// 			can use the <code>Id</code> of the other metrics to refer to those metrics, and can also use the <code>Id</code> of other
        /// 			expressions to use the result of those expressions. For more information about metric math expressions, see
        /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric Math Syntax and Functions</a> in the
        /// 			<i>Amazon CloudWatch User Guide</i>.</p>
        /// 		       <p>Within each MetricDataQuery object, you must specify either
        /// 			<code>Expression</code> or <code>MetricStat</code> but not both.</p>
        public let expression: Swift.String?
        /// <p>A short name used to tie this object to the results in the response. This name must be
        /// 			unique within a single call to <code>GetMetricData</code>. If you are performing math
        /// 			expressions on this set of data, this name represents that data and can serve as a
        /// 			variable in the mathematical expression. The valid characters are letters, numbers, and
        /// 			underscore. The first character must be a lowercase letter.</p>
        public let id: Swift.String?
        /// <p>A human-readable label for this metric or expression. This is especially useful
        /// 			if this is an expression, so that you know
        /// 			what the value represents. If the metric or expression is shown in a
        /// 			CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch
        /// 			generates a default.</p>
        /// 		       <p>You can put dynamic expressions into a label, so that it is more descriptive.
        /// 			For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html">Using Dynamic Labels</a>.</p>
        public let label: Swift.String?
        /// <p>The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric
        /// 			and not performing a math expression on returned data.</p>
        /// 		       <p>Within one MetricDataQuery object, you must specify either
        /// 			<code>Expression</code> or <code>MetricStat</code> but not both.</p>
        public let metricStat: CloudWatchClientTypes.MetricStat?
        /// <p>The granularity, in seconds, of the returned data points. For metrics with regular resolution, a
        /// 			period can be as short as one minute (60 seconds) and must be a multiple of 60.
        /// 			For high-resolution metrics that are collected at intervals of less than one minute,
        /// 			the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
        /// 			stored by a <code>PutMetricData</code> operation that includes a <code>StorageResolution of 1 second</code>.</p>
        public let period: Swift.Int?
        /// <p>When used in <code>GetMetricData</code>, this option indicates whether to return the
        /// 			timestamps and raw data values of this metric. If you are performing this call just to
        /// 			do math expressions and do not also need the raw data returned, you can specify
        /// 				<code>False</code>. If you omit this, the default of <code>True</code> is
        /// 			used.</p>
        /// 		       <p>When used in <code>PutMetricAlarm</code>, specify <code>True</code> for the one expression result to use as the alarm. For all
        /// 		other metrics and expressions in the same <code>PutMetricAlarm</code> operation, specify <code>ReturnData</code> as False.</p>
        public let returnData: Swift.Bool?

        public init (
            expression: Swift.String? = nil,
            id: Swift.String? = nil,
            label: Swift.String? = nil,
            metricStat: CloudWatchClientTypes.MetricStat? = nil,
            period: Swift.Int? = nil,
            returnData: Swift.Bool? = nil
        )
        {
            self.expression = expression
            self.id = id
            self.label = label
            self.metricStat = metricStat
            self.period = period
            self.returnData = returnData
        }
    }

}

extension CloudWatchClientTypes.MetricDataResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case label = "Label"
        case messages = "Messages"
        case statusCode = "StatusCode"
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let label = label {
            try container.encode(label, forKey: ClientRuntime.Key("Label"))
        }
        if let messages = messages {
            var messagesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Messages"))
            for (index0, messagedata0) in messages.enumerated() {
                try messagesContainer.encode(messagedata0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: ClientRuntime.Key("StatusCode"))
        }
        if let timestamps = timestamps {
            var timestampsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Timestamps"))
            for (index0, timestamp0) in timestamps.enumerated() {
                try timestampsContainer.encode(TimestampWrapper(timestamp0, format: .dateTime), forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
            for (index0, datapointvalue0) in values.enumerated() {
                try valuesContainer.encode(datapointvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        if containerValues.contains(.timestamps) {
            struct KeyVal0{struct member{}}
            let timestampsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .timestamps)
            if let timestampsWrappedContainer = timestampsWrappedContainer {
                let timestampsContainer = try timestampsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var timestampsBuffer:[ClientRuntime.Date]? = nil
                if let timestampsContainer = timestampsContainer {
                    timestampsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in timestampsContainer {
                        try timestampsBuffer?.append(ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampContainer0, format: .dateTime))
                    }
                }
                timestamps = timestampsBuffer
            } else {
                timestamps = []
            }
        } else {
            timestamps = nil
        }
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var valuesBuffer:[Swift.Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
        let statusCodeDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        if containerValues.contains(.messages) {
            struct KeyVal0{struct member{}}
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .messages)
            if let messagesWrappedContainer = messagesWrappedContainer {
                let messagesContainer = try messagesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MessageData].self, forKey: .member)
                var messagesBuffer:[CloudWatchClientTypes.MessageData]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [CloudWatchClientTypes.MessageData]()
                    for structureContainer0 in messagesContainer {
                        messagesBuffer?.append(structureContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
    }
}

extension CloudWatchClientTypes.MetricDataResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricDataResult(id: \(Swift.String(describing: id)), label: \(Swift.String(describing: label)), messages: \(Swift.String(describing: messages)), statusCode: \(Swift.String(describing: statusCode)), timestamps: \(Swift.String(describing: timestamps)), values: \(Swift.String(describing: values)))"}
}

extension CloudWatchClientTypes {
    /// <p>A <code>GetMetricData</code> call returns an array of <code>MetricDataResult</code>
    /// 			structures. Each of these structures includes the data points for that metric, along
    /// 			with the timestamps of those data points and other identifying information.</p>
    public struct MetricDataResult: Swift.Equatable {
        /// <p>The short name you specified to represent this metric.</p>
        public let id: Swift.String?
        /// <p>The human-readable label associated with the data.</p>
        public let label: Swift.String?
        /// <p>A list of messages with additional information about the data returned.</p>
        public let messages: [CloudWatchClientTypes.MessageData]?
        /// <p>The status of the returned data. <code>Complete</code> indicates that all data points in the requested time range were returned.
        /// 			<code>PartialData</code> means that an incomplete set of data points were returned.
        /// 					You can use the <code>NextToken</code> value that was returned and repeat your request to get more data points.
        /// 			<code>NextToken</code> is not returned if you are performing a math expression. <code>InternalError</code>
        /// 			indicates that an error occurred. Retry your request using <code>NextToken</code>, if present.</p>
        public let statusCode: CloudWatchClientTypes.StatusCode?
        /// <p>The timestamps for the data points, formatted in Unix timestamp format. The number of
        /// 			timestamps always matches the number of values and the value for Timestamps[x] is
        /// 			Values[x].</p>
        public let timestamps: [ClientRuntime.Date]?
        /// <p>The data points for the metric corresponding to <code>Timestamps</code>. The number of
        /// 			values always matches the number of timestamps and the timestamp for Values[x] is
        /// 			Timestamps[x].</p>
        public let values: [Swift.Double]?

        public init (
            id: Swift.String? = nil,
            label: Swift.String? = nil,
            messages: [CloudWatchClientTypes.MessageData]? = nil,
            statusCode: CloudWatchClientTypes.StatusCode? = nil,
            timestamps: [ClientRuntime.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.id = id
            self.label = label
            self.messages = messages
            self.statusCode = statusCode
            self.timestamps = timestamps
            self.values = values
        }
    }

}

extension CloudWatchClientTypes.MetricDatum: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case counts = "Counts"
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case statisticValues = "StatisticValues"
        case storageResolution = "StorageResolution"
        case timestamp = "Timestamp"
        case unit = "Unit"
        case value = "Value"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let counts = counts {
            var countsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Counts"))
            for (index0, datapointvalue0) in counts.enumerated() {
                try countsContainer.encode(datapointvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let statisticValues = statisticValues {
            try container.encode(statisticValues, forKey: ClientRuntime.Key("StatisticValues"))
        }
        if let storageResolution = storageResolution {
            try container.encode(storageResolution, forKey: ClientRuntime.Key("StorageResolution"))
        }
        if let timestamp = timestamp {
            try container.encode(ClientRuntime.TimestampWrapper(timestamp, format: .dateTime), forKey: ClientRuntime.Key("timestamp"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
            for (index0, datapointvalue0) in values.enumerated() {
                try valuesContainer.encode(datapointvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value)
        value = valueDecoded
        let statisticValuesDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StatisticSet.self, forKey: .statisticValues)
        statisticValues = statisticValuesDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var valuesBuffer:[Swift.Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
        if containerValues.contains(.counts) {
            struct KeyVal0{struct member{}}
            let countsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .counts)
            if let countsWrappedContainer = countsWrappedContainer {
                let countsContainer = try countsWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var countsBuffer:[Swift.Double]? = nil
                if let countsContainer = countsContainer {
                    countsBuffer = [Swift.Double]()
                    for doubleContainer0 in countsContainer {
                        countsBuffer?.append(doubleContainer0)
                    }
                }
                counts = countsBuffer
            } else {
                counts = []
            }
        } else {
            counts = nil
        }
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
        let storageResolutionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageResolution)
        storageResolution = storageResolutionDecoded
    }
}

extension CloudWatchClientTypes.MetricDatum: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricDatum(counts: \(Swift.String(describing: counts)), dimensions: \(Swift.String(describing: dimensions)), metricName: \(Swift.String(describing: metricName)), statisticValues: \(Swift.String(describing: statisticValues)), storageResolution: \(Swift.String(describing: storageResolution)), timestamp: \(Swift.String(describing: timestamp)), unit: \(Swift.String(describing: unit)), value: \(Swift.String(describing: value)), values: \(Swift.String(describing: values)))"}
}

extension CloudWatchClientTypes {
    /// <p>Encapsulates the information sent to either create a metric or add new values
    /// 			to be aggregated into an existing metric.</p>
    public struct MetricDatum: Swift.Equatable {
        /// <p>Array of numbers that is used along with the <code>Values</code> array. Each number in the <code>Count</code> array
        /// 			is the number of times the corresponding value in the <code>Values</code> array occurred during the period. </p>
        /// 		       <p>If you omit the <code>Counts</code> array, the default of 1 is used as the value for each count. If you
        /// 		include a <code>Counts</code> array, it must include the same amount of values as the <code>Values</code> array.</p>
        public let counts: [Swift.Double]?
        /// <p>The dimensions associated with the metric.</p>
        public let dimensions: [CloudWatchClientTypes.Dimension]?
        /// <p>The name of the metric.</p>
        public let metricName: Swift.String?
        /// <p>The statistical values for the metric.</p>
        public let statisticValues: CloudWatchClientTypes.StatisticSet?
        /// <p>Valid values are 1 and 60. Setting this to 1 specifies this metric as a high-resolution metric, so that CloudWatch stores the metric with
        /// 			sub-minute resolution down to one second.
        /// 		Setting this to 60 specifies this metric as a regular-resolution metric, which CloudWatch stores at 1-minute resolution. Currently, high resolution is available
        /// 		only for custom metrics. For more information about high-resolution metrics,
        /// 			see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html#high-resolution-metrics">High-Resolution Metrics</a> in the
        /// 			<i>Amazon CloudWatch User Guide</i>.
        /// 		</p>
        /// 	        <p>This field is optional, if you do not specify it the default of 60 is used.</p>
        public let storageResolution: Swift.Int?
        /// <p>The time the metric data was received, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
        public let timestamp: ClientRuntime.Date?
        /// <p>When you are using a <code>Put</code> operation, this defines what unit you want to use when storing the metric.</p>
        /// 		       <p>In
        /// 		a <code>Get</code> operation, this displays the unit that is used for the metric.</p>
        public let unit: CloudWatchClientTypes.StandardUnit?
        /// <p>The value for the metric.</p>
        /// 		       <p>Although the parameter accepts numbers of type Double, CloudWatch rejects values that are either too small or
        /// 			too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity)
        /// 			are not supported.</p>
        public let value: Swift.Double?
        /// <p>Array of numbers representing the values for the metric during the period. Each unique value is listed just once
        /// 		in this array, and the corresponding number in the <code>Counts</code> array specifies the number of times that value occurred during the period.
        /// 		You can include up to 150 unique values in each <code>PutMetricData</code> action that specifies a <code>Values</code> array.</p>
        /// 		       <p>Although the <code>Values</code> array accepts numbers of type
        /// 			<code>Double</code>, CloudWatch rejects values that are either too small
        /// 			or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity,
        /// 			-Infinity) are not supported.</p>
        public let values: [Swift.Double]?

        public init (
            counts: [Swift.Double]? = nil,
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            metricName: Swift.String? = nil,
            statisticValues: CloudWatchClientTypes.StatisticSet? = nil,
            storageResolution: Swift.Int? = nil,
            timestamp: ClientRuntime.Date? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil,
            value: Swift.Double? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.counts = counts
            self.dimensions = dimensions
            self.metricName = metricName
            self.statisticValues = statisticValues
            self.storageResolution = storageResolution
            self.timestamp = timestamp
            self.unit = unit
            self.value = value
            self.values = values
        }
    }

}

extension CloudWatchClientTypes.MetricStat: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metric = "Metric"
        case period = "Period"
        case stat = "Stat"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metric = metric {
            try container.encode(metric, forKey: ClientRuntime.Key("Metric"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: ClientRuntime.Key("Stat"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.Metric.self, forKey: .metric)
        metric = metricDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let statDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stat)
        stat = statDecoded
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension CloudWatchClientTypes.MetricStat: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricStat(metric: \(Swift.String(describing: metric)), period: \(Swift.String(describing: period)), stat: \(Swift.String(describing: stat)), unit: \(Swift.String(describing: unit)))"}
}

extension CloudWatchClientTypes {
    /// <p>This structure defines the metric to be returned, along with the statistics, period, and units.</p>
    public struct MetricStat: Swift.Equatable {
        /// <p>The metric to return, including the metric name, namespace, and dimensions.</p>
        public let metric: CloudWatchClientTypes.Metric?
        /// <p>The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can
        /// 			be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected
        /// 			at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics
        /// 			are those metrics stored by a <code>PutMetricData</code> call that includes a <code>StorageResolution</code> of 1 second.</p>
        /// 			      <p>If the <code>StartTime</code> parameter specifies a time stamp that is greater than
        /// 				3 hours ago, you must specify the period as follows or no data points in that time range is returned:</p>
        /// 			      <ul>
        ///             <li>
        ///                <p>Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).</p>
        ///             </li>
        ///             <li>
        ///                <p>Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).</p>
        ///             </li>
        ///             <li>
        ///                <p>Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).</p>
        ///             </li>
        ///          </ul>
        public let period: Swift.Int?
        /// <p>The statistic to return. It can include any CloudWatch statistic or extended statistic.</p>
        public let stat: Swift.String?
        /// <p>When you are using a <code>Put</code> operation, this defines what unit you want to use when storing the metric.</p>
        /// 		       <p>In a <code>Get</code> operation, if you omit <code>Unit</code> then all data that was collected with any unit is returned, along with the corresponding units that were specified
        /// 			when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified.
        /// 			If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.</p>
        public let unit: CloudWatchClientTypes.StandardUnit?

        public init (
            metric: CloudWatchClientTypes.Metric? = nil,
            period: Swift.Int? = nil,
            stat: Swift.String? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil
        )
        {
            self.metric = metric
            self.period = period
            self.stat = stat
            self.unit = unit
        }
    }

}

extension CloudWatchClientTypes.MetricStreamEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case firehoseArn = "FirehoseArn"
        case lastUpdateDate = "LastUpdateDate"
        case name = "Name"
        case outputFormat = "OutputFormat"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let creationDate = creationDate {
            try container.encode(ClientRuntime.TimestampWrapper(creationDate, format: .dateTime), forKey: ClientRuntime.Key("creationDate"))
        }
        if let firehoseArn = firehoseArn {
            try container.encode(firehoseArn, forKey: ClientRuntime.Key("FirehoseArn"))
        }
        if let lastUpdateDate = lastUpdateDate {
            try container.encode(ClientRuntime.TimestampWrapper(lastUpdateDate, format: .dateTime), forKey: ClientRuntime.Key("lastUpdateDate"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let outputFormat = outputFormat {
            try container.encode(outputFormat, forKey: ClientRuntime.Key("OutputFormat"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        var creationDateBuffer:ClientRuntime.Date? = nil
        if let creationDateDecoded = creationDateDecoded {
            creationDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationDateDecoded, format: .dateTime)
        }
        creationDate = creationDateBuffer
        let lastUpdateDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdateDate)
        var lastUpdateDateBuffer:ClientRuntime.Date? = nil
        if let lastUpdateDateDecoded = lastUpdateDateDecoded {
            lastUpdateDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdateDateDecoded, format: .dateTime)
        }
        lastUpdateDate = lastUpdateDateBuffer
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let firehoseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firehoseArn)
        firehoseArn = firehoseArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricStreamOutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
    }
}

extension CloudWatchClientTypes.MetricStreamEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricStreamEntry(arn: \(Swift.String(describing: arn)), creationDate: \(Swift.String(describing: creationDate)), firehoseArn: \(Swift.String(describing: firehoseArn)), lastUpdateDate: \(Swift.String(describing: lastUpdateDate)), name: \(Swift.String(describing: name)), outputFormat: \(Swift.String(describing: outputFormat)), state: \(Swift.String(describing: state)))"}
}

extension CloudWatchClientTypes {
    /// <p>This structure contains the configuration information about one metric stream.</p>
    public struct MetricStreamEntry: Swift.Equatable {
        /// <p>The ARN of the metric stream.</p>
        public let arn: Swift.String?
        /// <p>The date that the metric stream was originally created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The ARN of the Kinesis Firehose devlivery stream that is used for this metric stream.</p>
        public let firehoseArn: Swift.String?
        /// <p>The date that the configuration of this metric stream was most recently updated.</p>
        public let lastUpdateDate: ClientRuntime.Date?
        /// <p>The name of the metric stream.</p>
        public let name: Swift.String?
        /// <p>The output format of this metric stream. Valid values are
        /// 			<code>json</code>
        /// 			and <code>opentelemetry0.7</code>.</p>
        public let outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
        /// <p>The current state of this stream. Valid values are <code>running</code> and <code>stopped</code>.</p>
        public let state: Swift.String?

        public init (
            arn: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            firehoseArn: Swift.String? = nil,
            lastUpdateDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat? = nil,
            state: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.firehoseArn = firehoseArn
            self.lastUpdateDate = lastUpdateDate
            self.name = name
            self.outputFormat = outputFormat
            self.state = state
        }
    }

}

extension CloudWatchClientTypes.MetricStreamFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case namespace = "Namespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
    }
}

extension CloudWatchClientTypes.MetricStreamFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricStreamFilter(namespace: \(Swift.String(describing: namespace)))"}
}

extension CloudWatchClientTypes {
    /// <p>This structure contains the name of one of the metric namespaces that is listed in
    /// 		a filter of a metric stream.</p>
    public struct MetricStreamFilter: Swift.Equatable {
        /// <p>The name of the metric namespace in the filter.</p>
        public let namespace: Swift.String?

        public init (
            namespace: Swift.String? = nil
        )
        {
            self.namespace = namespace
        }
    }

}

extension CloudWatchClientTypes {
    public enum MetricStreamOutputFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case json
        case openTelemetry07
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStreamOutputFormat] {
            return [
                .json,
                .openTelemetry07,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .json: return "json"
            case .openTelemetry07: return "opentelemetry0.7"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricStreamOutputFormat(rawValue: rawValue) ?? MetricStreamOutputFormat.sdkUnknown(rawValue)
        }
    }
}

extension MissingRequiredParameterException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MissingRequiredParameterException(message: \(Swift.String(describing: message)))"}
}

extension MissingRequiredParameterException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<MissingRequiredParameterExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An input parameter that is required is missing.</p>
public struct MissingRequiredParameterException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MissingRequiredParameterExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MissingRequiredParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes.PartialFailure: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exceptionType = "ExceptionType"
        case failureCode = "FailureCode"
        case failureDescription = "FailureDescription"
        case failureResource = "FailureResource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exceptionType = exceptionType {
            try container.encode(exceptionType, forKey: ClientRuntime.Key("ExceptionType"))
        }
        if let failureCode = failureCode {
            try container.encode(failureCode, forKey: ClientRuntime.Key("FailureCode"))
        }
        if let failureDescription = failureDescription {
            try container.encode(failureDescription, forKey: ClientRuntime.Key("FailureDescription"))
        }
        if let failureResource = failureResource {
            try container.encode(failureResource, forKey: ClientRuntime.Key("FailureResource"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failureResourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureResource)
        failureResource = failureResourceDecoded
        let exceptionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exceptionType)
        exceptionType = exceptionTypeDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureDescription)
        failureDescription = failureDescriptionDecoded
    }
}

extension CloudWatchClientTypes.PartialFailure: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PartialFailure(exceptionType: \(Swift.String(describing: exceptionType)), failureCode: \(Swift.String(describing: failureCode)), failureDescription: \(Swift.String(describing: failureDescription)), failureResource: \(Swift.String(describing: failureResource)))"}
}

extension CloudWatchClientTypes {
    /// <p>This array is empty if the API operation was successful for all the rules specified in the request. If the operation could
    /// 		not process one of the rules, the following data is returned for each of those rules.</p>
    public struct PartialFailure: Swift.Equatable {
        /// <p>The type of error.</p>
        public let exceptionType: Swift.String?
        /// <p>The code of the error.</p>
        public let failureCode: Swift.String?
        /// <p>A description of the error.</p>
        public let failureDescription: Swift.String?
        /// <p>The specified rule that could not be deleted.</p>
        public let failureResource: Swift.String?

        public init (
            exceptionType: Swift.String? = nil,
            failureCode: Swift.String? = nil,
            failureDescription: Swift.String? = nil,
            failureResource: Swift.String? = nil
        )
        {
            self.exceptionType = exceptionType
            self.failureCode = failureCode
            self.failureDescription = failureDescription
            self.failureResource = failureResource
        }
    }

}

public struct PutAnomalyDetectorInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAnomalyDetectorInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAnomalyDetectorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAnomalyDetectorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAnomalyDetectorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAnomalyDetectorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAnomalyDetectorOutputError>
}

extension PutAnomalyDetectorInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAnomalyDetectorInput(configuration: \(Swift.String(describing: configuration)), dimensions: \(Swift.String(describing: dimensions)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), stat: \(Swift.String(describing: stat)))"}
}

extension PutAnomalyDetectorInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configuration = configuration {
            try container.encode(configuration, forKey: ClientRuntime.Key("Configuration"))
        }
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: ClientRuntime.Key("Stat"))
        }
        try container.encode("PutAnomalyDetector", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutAnomalyDetectorInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAnomalyDetectorInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAnomalyDetectorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAnomalyDetectorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAnomalyDetectorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAnomalyDetectorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAnomalyDetectorOutputError>
}

public struct PutAnomalyDetectorInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAnomalyDetectorInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAnomalyDetectorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAnomalyDetectorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAnomalyDetectorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAnomalyDetectorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAnomalyDetectorOutputError>
}

public struct PutAnomalyDetectorInput: Swift.Equatable {
    /// <p>The configuration specifies details about how the
    /// 			anomaly detection model is to be trained, including
    /// 			time ranges to exclude when training and updating the model.
    /// 			You can specify as many as 10 time ranges.</p>
    /// 		       <p>The configuration can also include the time zone to use for
    /// 			the metric.</p>
    public let configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration?
    /// <p>The metric dimensions to create the anomaly detection model for.</p>
    public let dimensions: [CloudWatchClientTypes.Dimension]?
    /// <p>The name of the metric to create the anomaly detection model for.</p>
    public let metricName: Swift.String?
    /// <p>The namespace of the metric to create the anomaly detection model for.</p>
    public let namespace: Swift.String?
    /// <p>The statistic to use for the metric and the anomaly detection model.</p>
    public let stat: Swift.String?

    public init (
        configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration? = nil,
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        stat: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.dimensions = dimensions
        self.metricName = metricName
        self.namespace = namespace
        self.stat = stat
    }
}

extension PutAnomalyDetectorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutAnomalyDetectorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutAnomalyDetectorOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAnomalyDetectorOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAnomalyDetectorOutputResponse()"}
}

extension PutAnomalyDetectorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutAnomalyDetectorOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutAnomalyDetectorOutputResponseBody: Swift.Equatable {
}

extension PutAnomalyDetectorOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutCompositeAlarmInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutCompositeAlarmInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutCompositeAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutCompositeAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutCompositeAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutCompositeAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutCompositeAlarmOutputError>
}

extension PutCompositeAlarmInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutCompositeAlarmInput(actionsEnabled: \(Swift.String(describing: actionsEnabled)), alarmActions: \(Swift.String(describing: alarmActions)), alarmDescription: \(Swift.String(describing: alarmDescription)), alarmName: \(Swift.String(describing: alarmName)), alarmRule: \(Swift.String(describing: alarmRule)), insufficientDataActions: \(Swift.String(describing: insufficientDataActions)), oKActions: \(Swift.String(describing: oKActions)), tags: \(Swift.String(describing: tags)))"}
}

extension PutCompositeAlarmInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionsEnabled = actionsEnabled {
            try container.encode(actionsEnabled, forKey: ClientRuntime.Key("ActionsEnabled"))
        }
        if let alarmActions = alarmActions {
            var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
            for (index0, resourcename0) in alarmActions.enumerated() {
                try alarmActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let alarmDescription = alarmDescription {
            try container.encode(alarmDescription, forKey: ClientRuntime.Key("AlarmDescription"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let alarmRule = alarmRule {
            try container.encode(alarmRule, forKey: ClientRuntime.Key("AlarmRule"))
        }
        if let insufficientDataActions = insufficientDataActions {
            var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
            for (index0, resourcename0) in insufficientDataActions.enumerated() {
                try insufficientDataActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let oKActions = oKActions {
            var oKActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
            for (index0, resourcename0) in oKActions.enumerated() {
                try oKActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("PutCompositeAlarm", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutCompositeAlarmInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutCompositeAlarmInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutCompositeAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutCompositeAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutCompositeAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutCompositeAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutCompositeAlarmOutputError>
}

public struct PutCompositeAlarmInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutCompositeAlarmInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutCompositeAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutCompositeAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutCompositeAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutCompositeAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutCompositeAlarmOutputError>
}

public struct PutCompositeAlarmInput: Swift.Equatable {
    /// <p>Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is
    /// 			<code>TRUE</code>.</p>
    public let actionsEnabled: Swift.Bool?
    /// <p>The actions to execute when this alarm transitions to the <code>ALARM</code> state from any other state.
    /// 			Each action is specified as an Amazon Resource Name (ARN).</p>
    /// 		
    /// 		       <p>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
    ///             </code>
    /// 			| <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:opsitem:<i>severity</i>
    ///             </code>
    ///          </p>
    public let alarmActions: [Swift.String]?
    /// <p>The description for the composite alarm.</p>
    public let alarmDescription: Swift.String?
    /// <p>The name for the composite alarm. This name must be unique within the Region.</p>
    public let alarmName: Swift.String?
    /// <p>An expression that specifies which other alarms are to be evaluated to determine this
    /// 			composite alarm's state. For each alarm that you reference, you
    /// 			designate a function that
    /// 			specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You
    /// 			can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the
    /// 			functions in your expression.</p>
    /// 		       <p>You can use either alarm names or ARNs to reference the other alarms that are to be evaluated.</p>
    /// 		       <p>Functions can include the following:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ALARM("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if the named
    /// 			alarm is in ALARM state.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>OK("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if the named
    /// 				alarm is in OK state.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INSUFFICIENT_DATA("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if the named
    /// 				alarm is in INSUFFICIENT_DATA state.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TRUE</code> always evaluates to TRUE.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FALSE</code> always evaluates to FALSE.</p>
    ///             </li>
    ///          </ul>
    /// 		       <p>TRUE and FALSE are useful for testing a complex <code>AlarmRule</code> structure, and
    /// 		for testing your alarm actions.</p>
    /// 		       <p>Alarm names specified in <code>AlarmRule</code> can be surrounded with double-quotes ("), but do not have to be.</p>
    /// 		       <p>The following
    /// 			are some examples of <code>AlarmRule</code>:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh)</code> specifies that the composite alarm goes into ALARM state only
    /// 				if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress)</code>
    /// 					specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state
    /// 					and DeploymentInProgress is not in ALARM state. This example reduces
    /// 					alarm noise during a known deployment window.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>(ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh)</code> goes into ALARM
    /// 				state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state.
    /// 				This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an
    /// 				alarm action on high CPU or disk usage if a known network problem is also occurring.</p>
    ///             </li>
    ///          </ul>
    /// 		       <p>The <code>AlarmRule</code> can specify as many as 100
    /// 			"children" alarms. The <code>AlarmRule</code> expression can have as many as 500 elements. Elements
    /// 			are child alarms, TRUE or FALSE statements, and
    /// 			parentheses.</p>
    public let alarmRule: Swift.String?
    /// <p>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code> state from any other state.
    /// 			Each action is specified as an Amazon Resource Name (ARN).</p>
    /// 		
    /// 		       <p>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
    ///             </code>
    ///          </p>
    public let insufficientDataActions: [Swift.String]?
    /// <p>The actions to execute when this alarm transitions to an <code>OK</code> state
    /// 			from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
    /// 		
    /// 		
    /// 		       <p>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
    ///             </code>
    ///          </p>
    public let oKActions: [Swift.String]?
    /// <p>A list of key-value pairs to associate with the composite alarm. You can associate as many as 50 tags with an alarm.</p>
    /// 		       <p>Tags can help you organize and categorize your
    /// 			resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with
    /// 			certain tag values.</p>
    public let tags: [CloudWatchClientTypes.Tag]?

    public init (
        actionsEnabled: Swift.Bool? = nil,
        alarmActions: [Swift.String]? = nil,
        alarmDescription: Swift.String? = nil,
        alarmName: Swift.String? = nil,
        alarmRule: Swift.String? = nil,
        insufficientDataActions: [Swift.String]? = nil,
        oKActions: [Swift.String]? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.actionsEnabled = actionsEnabled
        self.alarmActions = alarmActions
        self.alarmDescription = alarmDescription
        self.alarmName = alarmName
        self.alarmRule = alarmRule
        self.insufficientDataActions = insufficientDataActions
        self.oKActions = oKActions
        self.tags = tags
    }
}

extension PutCompositeAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutCompositeAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutCompositeAlarmOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutCompositeAlarmOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutCompositeAlarmOutputResponse()"}
}

extension PutCompositeAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutCompositeAlarmOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutCompositeAlarmOutputResponseBody: Swift.Equatable {
}

extension PutCompositeAlarmOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutDashboardInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDashboardInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDashboardInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDashboardOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDashboardInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDashboardOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDashboardOutputError>
}

extension PutDashboardInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutDashboardInput(dashboardBody: \(Swift.String(describing: dashboardBody)), dashboardName: \(Swift.String(describing: dashboardName)))"}
}

extension PutDashboardInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dashboardBody = dashboardBody {
            try container.encode(dashboardBody, forKey: ClientRuntime.Key("DashboardBody"))
        }
        if let dashboardName = dashboardName {
            try container.encode(dashboardName, forKey: ClientRuntime.Key("DashboardName"))
        }
        try container.encode("PutDashboard", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutDashboardInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDashboardInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDashboardInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDashboardOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDashboardInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDashboardOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDashboardOutputError>
}

public struct PutDashboardInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDashboardInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDashboardInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDashboardOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDashboardInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDashboardOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDashboardOutputError>
}

public struct PutDashboardInput: Swift.Equatable {
    /// <p>The detailed information about the dashboard in JSON format, including the widgets to include and their location
    /// 			on the dashboard.  This parameter is required.</p>
    /// 		       <p>For more information about the syntax,
    /// 			see  <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html">Dashboard Body Structure and Syntax</a>.</p>
    public let dashboardBody: Swift.String?
    /// <p>The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing
    /// 			its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are
    /// 			A-Z, a-z, 0-9, "-", and "_".  This parameter is required.</p>
    public let dashboardName: Swift.String?

    public init (
        dashboardBody: Swift.String? = nil,
        dashboardName: Swift.String? = nil
    )
    {
        self.dashboardBody = dashboardBody
        self.dashboardName = dashboardName
    }
}

extension PutDashboardOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutDashboardOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DashboardInvalidInputError" : self = .dashboardInvalidInputError(try DashboardInvalidInputError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutDashboardOutputError: Swift.Error, Swift.Equatable {
    case dashboardInvalidInputError(DashboardInvalidInputError)
    case internalServiceFault(InternalServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDashboardOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutDashboardOutputResponse(dashboardValidationMessages: \(Swift.String(describing: dashboardValidationMessages)))"}
}

extension PutDashboardOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutDashboardOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dashboardValidationMessages = output.dashboardValidationMessages
        } else {
            self.dashboardValidationMessages = nil
        }
    }
}

public struct PutDashboardOutputResponse: Swift.Equatable {
    /// <p>If the input for <code>PutDashboard</code> was correct and the dashboard was successfully created or modified, this result is empty.</p>
    /// 			      <p>If this result includes only warning messages, then the input was valid enough for the dashboard to be
    /// 			created or modified, but some elements of the dashboard
    /// 			might not render.</p>
    /// 				     <p>If this result includes error messages, the input was not valid and the operation failed.</p>
    public let dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]?

    public init (
        dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]? = nil
    )
    {
        self.dashboardValidationMessages = dashboardValidationMessages
    }
}

struct PutDashboardOutputResponseBody: Swift.Equatable {
    public let dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]?
}

extension PutDashboardOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardValidationMessages = "DashboardValidationMessages"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PutDashboardResult"))
        if containerValues.contains(.dashboardValidationMessages) {
            struct KeyVal0{struct member{}}
            let dashboardValidationMessagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dashboardValidationMessages)
            if let dashboardValidationMessagesWrappedContainer = dashboardValidationMessagesWrappedContainer {
                let dashboardValidationMessagesContainer = try dashboardValidationMessagesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.DashboardValidationMessage].self, forKey: .member)
                var dashboardValidationMessagesBuffer:[CloudWatchClientTypes.DashboardValidationMessage]? = nil
                if let dashboardValidationMessagesContainer = dashboardValidationMessagesContainer {
                    dashboardValidationMessagesBuffer = [CloudWatchClientTypes.DashboardValidationMessage]()
                    for structureContainer0 in dashboardValidationMessagesContainer {
                        dashboardValidationMessagesBuffer?.append(structureContainer0)
                    }
                }
                dashboardValidationMessages = dashboardValidationMessagesBuffer
            } else {
                dashboardValidationMessages = []
            }
        } else {
            dashboardValidationMessages = nil
        }
    }
}

public struct PutInsightRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutInsightRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutInsightRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutInsightRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutInsightRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutInsightRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutInsightRuleOutputError>
}

extension PutInsightRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutInsightRuleInput(ruleDefinition: \(Swift.String(describing: ruleDefinition)), ruleName: \(Swift.String(describing: ruleName)), ruleState: \(Swift.String(describing: ruleState)), tags: \(Swift.String(describing: tags)))"}
}

extension PutInsightRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleDefinition = ruleDefinition {
            try container.encode(ruleDefinition, forKey: ClientRuntime.Key("RuleDefinition"))
        }
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let ruleState = ruleState {
            try container.encode(ruleState, forKey: ClientRuntime.Key("RuleState"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("PutInsightRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutInsightRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutInsightRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutInsightRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutInsightRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutInsightRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutInsightRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutInsightRuleOutputError>
}

public struct PutInsightRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutInsightRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutInsightRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutInsightRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutInsightRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutInsightRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutInsightRuleOutputError>
}

public struct PutInsightRuleInput: Swift.Equatable {
    /// <p>The definition of the rule, as a JSON object. For details on the valid syntax, see
    /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html">Contributor Insights
    /// 			Rule Syntax</a>.</p>
    public let ruleDefinition: Swift.String?
    /// <p>A unique name for the rule.</p>
    public let ruleName: Swift.String?
    /// <p>The state of the rule. Valid values are ENABLED and DISABLED.</p>
    public let ruleState: Swift.String?
    /// <p>A list of key-value pairs to associate with the Contributor Insights rule.
    /// 			You can associate as many as 50 tags with a rule.</p>
    /// 		       <p>Tags can help you organize and categorize your
    /// 			resources. You can also use them to scope user permissions, by
    /// 			granting a user permission to access or change only the resources that have
    /// 			certain tag values.</p>
    /// 		       <p>To be able to associate tags with a rule, you must have the <code>cloudwatch:TagResource</code>
    /// 		permission in addition to the <code>cloudwatch:PutInsightRule</code> permission.</p>
    /// 		       <p>If you are using this operation to update an existing Contributor Insights rule, any tags
    /// 		you specify in this parameter are ignored. To change the tags of an existing rule, use
    /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html">TagResource</a>.</p>
    public let tags: [CloudWatchClientTypes.Tag]?

    public init (
        ruleDefinition: Swift.String? = nil,
        ruleName: Swift.String? = nil,
        ruleState: Swift.String? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.ruleDefinition = ruleDefinition
        self.ruleName = ruleName
        self.ruleState = ruleState
        self.tags = tags
    }
}

extension PutInsightRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutInsightRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutInsightRuleOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutInsightRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutInsightRuleOutputResponse()"}
}

extension PutInsightRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutInsightRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutInsightRuleOutputResponseBody: Swift.Equatable {
}

extension PutInsightRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutMetricAlarmInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricAlarmInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricAlarmOutputError>
}

extension PutMetricAlarmInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutMetricAlarmInput(actionsEnabled: \(Swift.String(describing: actionsEnabled)), alarmActions: \(Swift.String(describing: alarmActions)), alarmDescription: \(Swift.String(describing: alarmDescription)), alarmName: \(Swift.String(describing: alarmName)), comparisonOperator: \(Swift.String(describing: comparisonOperator)), datapointsToAlarm: \(Swift.String(describing: datapointsToAlarm)), dimensions: \(Swift.String(describing: dimensions)), evaluateLowSampleCountPercentile: \(Swift.String(describing: evaluateLowSampleCountPercentile)), evaluationPeriods: \(Swift.String(describing: evaluationPeriods)), extendedStatistic: \(Swift.String(describing: extendedStatistic)), insufficientDataActions: \(Swift.String(describing: insufficientDataActions)), metricName: \(Swift.String(describing: metricName)), metrics: \(Swift.String(describing: metrics)), namespace: \(Swift.String(describing: namespace)), oKActions: \(Swift.String(describing: oKActions)), period: \(Swift.String(describing: period)), statistic: \(Swift.String(describing: statistic)), tags: \(Swift.String(describing: tags)), threshold: \(Swift.String(describing: threshold)), thresholdMetricId: \(Swift.String(describing: thresholdMetricId)), treatMissingData: \(Swift.String(describing: treatMissingData)), unit: \(Swift.String(describing: unit)))"}
}

extension PutMetricAlarmInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionsEnabled = actionsEnabled {
            try container.encode(actionsEnabled, forKey: ClientRuntime.Key("ActionsEnabled"))
        }
        if let alarmActions = alarmActions {
            var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
            for (index0, resourcename0) in alarmActions.enumerated() {
                try alarmActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let alarmDescription = alarmDescription {
            try container.encode(alarmDescription, forKey: ClientRuntime.Key("AlarmDescription"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let comparisonOperator = comparisonOperator {
            try container.encode(comparisonOperator, forKey: ClientRuntime.Key("ComparisonOperator"))
        }
        if let datapointsToAlarm = datapointsToAlarm {
            try container.encode(datapointsToAlarm, forKey: ClientRuntime.Key("DatapointsToAlarm"))
        }
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile {
            try container.encode(evaluateLowSampleCountPercentile, forKey: ClientRuntime.Key("EvaluateLowSampleCountPercentile"))
        }
        if let evaluationPeriods = evaluationPeriods {
            try container.encode(evaluationPeriods, forKey: ClientRuntime.Key("EvaluationPeriods"))
        }
        if let extendedStatistic = extendedStatistic {
            try container.encode(extendedStatistic, forKey: ClientRuntime.Key("ExtendedStatistic"))
        }
        if let insufficientDataActions = insufficientDataActions {
            var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
            for (index0, resourcename0) in insufficientDataActions.enumerated() {
                try insufficientDataActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let metrics = metrics {
            var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
            for (index0, metricdataquery0) in metrics.enumerated() {
                try metricsContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let oKActions = oKActions {
            var oKActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
            for (index0, resourcename0) in oKActions.enumerated() {
                try oKActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let threshold = threshold {
            try container.encode(threshold, forKey: ClientRuntime.Key("Threshold"))
        }
        if let thresholdMetricId = thresholdMetricId {
            try container.encode(thresholdMetricId, forKey: ClientRuntime.Key("ThresholdMetricId"))
        }
        if let treatMissingData = treatMissingData {
            try container.encode(treatMissingData, forKey: ClientRuntime.Key("TreatMissingData"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
        try container.encode("PutMetricAlarm", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutMetricAlarmInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricAlarmInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricAlarmOutputError>
}

public struct PutMetricAlarmInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricAlarmInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricAlarmOutputError>
}

public struct PutMetricAlarmInput: Swift.Equatable {
    /// <p>Indicates whether actions should be executed during any changes to the alarm state. The default is
    /// 			<code>TRUE</code>.</p>
    public let actionsEnabled: Swift.Bool?
    /// <p>The actions to execute when this alarm transitions to the <code>ALARM</code> state from any other state.
    /// 			Each action is specified as an Amazon Resource Name (ARN).</p>
    ///
    /// 		       <p>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:terminate</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:recover</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:reboot</code> |
    /// 			<code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
    ///             </code> |
    /// 			<code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i>
    ///             </code>
    /// 			| <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:opsitem:<i>severity</i>
    ///             </code>
    ///          </p>
    ///
    /// 		       <p>Valid Values (for use with IAM roles):
    /// 			<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code>
    ///          </p>
    public let alarmActions: [Swift.String]?
    /// <p>The description for the alarm.</p>
    public let alarmDescription: Swift.String?
    /// <p>The name for the alarm. This name must be unique within the Region.</p>
    public let alarmName: Swift.String?
    /// <p> The arithmetic operation to use when comparing the specified statistic and
    /// 			threshold. The specified statistic value is used as the first operand.</p>
    /// 		       <p>The values <code>LessThanLowerOrGreaterThanUpperThreshold</code>,
    /// 			<code>LessThanLowerThreshold</code>, and <code>GreaterThanUpperThreshold</code>
    /// 		are used only for alarms based on anomaly detection models.</p>
    public let comparisonOperator: CloudWatchClientTypes.ComparisonOperator?
    /// <p>The number of data points that must be breaching to trigger the alarm. This is used only if you are setting
    /// 			an "M out of N" alarm. In that case, this value is the M. For more information, see
    /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation">Evaluating an Alarm</a> in the
    /// 			<i>Amazon CloudWatch User Guide</i>.</p>
    public let datapointsToAlarm: Swift.Int?
    /// <p>The dimensions for the metric specified in <code>MetricName</code>.</p>
    public let dimensions: [CloudWatchClientTypes.Dimension]?
    /// <p> Used only for alarms based on percentiles. If you specify <code>ignore</code>, the alarm state does not change during periods with too few data points to be
    /// 			statistically significant. If you specify <code>evaluate</code> or omit this parameter, the alarm is always evaluated and possibly changes state
    /// 			no matter how many data points are available. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples">Percentile-Based CloudWatch Alarms and Low Data Samples</a>.</p>
    /// 		       <p>Valid Values: <code>evaluate | ignore</code>
    ///          </p>
    public let evaluateLowSampleCountPercentile: Swift.String?
    /// <p>The number of periods over which data is compared to the specified threshold. If you are
    /// 			setting an alarm that requires that a number of consecutive data points be breaching to
    /// 			trigger the alarm, this value specifies that number. If you are setting an "M out of N"
    /// 			alarm, this value is the N.</p>
    /// 		       <p>An alarm's total current evaluation period can
    /// 			be no longer than one day, so this number multiplied by <code>Period</code> cannot be more than 86,400 seconds.</p>
    public let evaluationPeriods: Swift.Int?
    /// <p>The percentile statistic for the metric specified in <code>MetricName</code>. Specify a value
    /// 			between p0.0 and p100. When you call <code>PutMetricAlarm</code> and specify
    /// 			a <code>MetricName</code>, you must
    /// 			specify either <code>Statistic</code> or <code>ExtendedStatistic,</code> but not both.</p>
    public let extendedStatistic: Swift.String?
    /// <p>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code> state from any other state.
    /// 			Each action is specified as an Amazon Resource Name (ARN).</p>
    ///
    /// 		       <p>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:terminate</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:recover</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:reboot</code> |
    /// 			<code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
    ///             </code> |
    /// 			<code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i>
    ///             </code>
    ///          </p>
    ///
    /// 		       <p>Valid Values (for use with IAM roles):
    /// 			<code>>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code>
    ///          </p>
    public let insufficientDataActions: [Swift.String]?
    /// <p>The name for the metric associated with the alarm. For each <code>PutMetricAlarm</code>
    /// 		operation, you must specify either <code>MetricName</code> or a <code>Metrics</code> array.</p>
    /// 		       <p>If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the
    /// 			<code>Dimensions</code>, <code>Period</code>,
    /// 			<code>Namespace</code>, <code>Statistic</code>, or <code>ExtendedStatistic</code> parameters. Instead, you specify
    /// 		all this information in the <code>Metrics</code> array.</p>
    public let metricName: Swift.String?
    /// <p>An array of <code>MetricDataQuery</code> structures that enable you to create an alarm based on the result of a
    /// 			metric math expression. For each <code>PutMetricAlarm</code>
    /// 			operation, you must specify either <code>MetricName</code> or a <code>Metrics</code> array.</p>
    /// 		       <p>Each item in the <code>Metrics</code> array either retrieves a metric or performs a math expression.</p>
    /// 		       <p>One item in the <code>Metrics</code> array is the expression that the alarm watches. You designate this expression
    /// 			by setting <code>ReturnData</code> to true for this object in the array. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html">MetricDataQuery</a>.</p>
    /// 		       <p>If you use the <code>Metrics</code> parameter, you cannot include the <code>MetricName</code>, <code>Dimensions</code>, <code>Period</code>,
    /// 			<code>Namespace</code>, <code>Statistic</code>, or <code>ExtendedStatistic</code> parameters of <code>PutMetricAlarm</code> in the same operation.
    /// 			Instead, you retrieve
    /// 		the metrics you are using in your math expression as part of the <code>Metrics</code> array.</p>
    public let metrics: [CloudWatchClientTypes.MetricDataQuery]?
    /// <p>The namespace for the metric associated specified in <code>MetricName</code>.</p>
    public let namespace: Swift.String?
    /// <p>The actions to execute when this alarm transitions to an <code>OK</code> state
    /// 			from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
    ///
    /// 		       <p>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:terminate</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:recover</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:reboot</code> |
    /// 			<code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
    ///             </code> |
    /// 			<code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i>
    ///             </code>
    ///          </p>
    ///
    /// 		       <p>Valid Values (for use with IAM roles):
    /// 			<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code> |
    /// 			    <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Recover/1.0</code>
    ///          </p>
    public let oKActions: [Swift.String]?
    /// <p>The length, in seconds, used each time the metric specified in <code>MetricName</code> is
    /// 			evaluated. Valid values are 10, 30, and any multiple of 60.</p>
    /// 		       <p>
    ///             <code>Period</code> is required for alarms based on static thresholds. If
    /// 		you are creating an alarm based on a metric math expression, you specify the
    /// 		period for each metric within the objects in the <code>Metrics</code> array.</p>
    /// 		       <p>Be sure to specify 10 or 30 only for metrics that are stored by a <code>PutMetricData</code> call with a
    /// 				<code>StorageResolution</code> of 1. If you specify a period of 10 or 30 for a metric that does not have
    /// 			sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case,
    /// 			it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm
    /// 			might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm,
    /// 			which has a higher charge than other alarms. For more information about pricing, see <a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>.</p>
    /// 		       <p>An alarm's total current evaluation period can
    /// 		be no longer than one day, so <code>Period</code> multiplied by <code>EvaluationPeriods</code> cannot be more than 86,400 seconds.</p>
    public let period: Swift.Int?
    /// <p>The statistic for the metric specified in <code>MetricName</code>, other than percentile.
    /// 		    For percentile statistics, use <code>ExtendedStatistic</code>. When you call <code>PutMetricAlarm</code> and specify
    /// 			a <code>MetricName</code>, you must
    /// 		specify either <code>Statistic</code> or <code>ExtendedStatistic,</code> but not both.</p>
    public let statistic: CloudWatchClientTypes.Statistic?
    /// <p>A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.</p>
    /// 		       <p>Tags can help you organize and categorize your resources. You can also use them to scope user
    /// 			permissions by granting a user
    /// 			permission to access or change only resources with certain tag values.</p>
    /// 		       <p>If you are using this operation to update an existing alarm, any tags
    /// 			you specify in this parameter are ignored. To change the tags of an existing alarm, use
    /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html">TagResource</a>
    /// 			or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p>
    public let tags: [CloudWatchClientTypes.Tag]?
    /// <p>The value against which the specified statistic is compared.</p>
    /// 		       <p>This parameter is required for alarms based on static thresholds, but should
    /// 		not be used for alarms based on anomaly detection models.</p>
    public let threshold: Swift.Double?
    /// <p>If this is an alarm based on an anomaly detection model, make this value match
    /// 			the ID of
    /// 			the <code>ANOMALY_DETECTION_BAND</code> function.</p>
    /// 		       <p>For an example of how to use this parameter, see the
    /// 			<b>Anomaly Detection
    /// 		Model Alarm</b> example on this page.</p>
    /// 		       <p>If your alarm uses this parameter, it cannot have Auto Scaling actions.</p>
    public let thresholdMetricId: Swift.String?
    /// <p> Sets how this alarm is to handle missing data points. If <code>TreatMissingData</code> is omitted, the default behavior of <code>missing</code> is used.
    /// 			For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data">Configuring How CloudWatch
    /// 				Alarms Treats Missing Data</a>.</p>
    /// 		       <p>Valid Values: <code>breaching | notBreaching | ignore | missing</code>
    ///          </p>
    public let treatMissingData: Swift.String?
    /// <p>The unit of measure for the statistic. For example, the units for the Amazon EC2
    /// 			NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance
    /// 			receives on all network interfaces. You can also specify a unit when you create a custom
    /// 			metric. Units help provide conceptual meaning to your data. Metric data points that
    /// 			specify a unit of measure, such as Percent, are aggregated separately.</p>
    /// 		       <p>If you don't specify <code>Unit</code>, CloudWatch retrieves all unit types that have been published for the
    /// 			metric and attempts to evaluate the alarm.
    /// 			Usually, metrics are
    /// 			published with only one unit, so the alarm
    /// 			works as intended.</p>
    /// 			      <p>However, if the metric is published with multiple types of units and you don't specify a unit, the alarm's
    /// 			behavior is not defined and
    /// 			it behaves predictably.</p>
    /// 		       <p>We recommend omitting <code>Unit</code> so that you don't inadvertently
    /// 			specify an incorrect unit that is not published for this metric. Doing so
    /// 			causes the alarm to be stuck in the <code>INSUFFICIENT DATA</code> state.</p>
    public let unit: CloudWatchClientTypes.StandardUnit?

    public init (
        actionsEnabled: Swift.Bool? = nil,
        alarmActions: [Swift.String]? = nil,
        alarmDescription: Swift.String? = nil,
        alarmName: Swift.String? = nil,
        comparisonOperator: CloudWatchClientTypes.ComparisonOperator? = nil,
        datapointsToAlarm: Swift.Int? = nil,
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        evaluateLowSampleCountPercentile: Swift.String? = nil,
        evaluationPeriods: Swift.Int? = nil,
        extendedStatistic: Swift.String? = nil,
        insufficientDataActions: [Swift.String]? = nil,
        metricName: Swift.String? = nil,
        metrics: [CloudWatchClientTypes.MetricDataQuery]? = nil,
        namespace: Swift.String? = nil,
        oKActions: [Swift.String]? = nil,
        period: Swift.Int? = nil,
        statistic: CloudWatchClientTypes.Statistic? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil,
        threshold: Swift.Double? = nil,
        thresholdMetricId: Swift.String? = nil,
        treatMissingData: Swift.String? = nil,
        unit: CloudWatchClientTypes.StandardUnit? = nil
    )
    {
        self.actionsEnabled = actionsEnabled
        self.alarmActions = alarmActions
        self.alarmDescription = alarmDescription
        self.alarmName = alarmName
        self.comparisonOperator = comparisonOperator
        self.datapointsToAlarm = datapointsToAlarm
        self.dimensions = dimensions
        self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
        self.evaluationPeriods = evaluationPeriods
        self.extendedStatistic = extendedStatistic
        self.insufficientDataActions = insufficientDataActions
        self.metricName = metricName
        self.metrics = metrics
        self.namespace = namespace
        self.oKActions = oKActions
        self.period = period
        self.statistic = statistic
        self.tags = tags
        self.threshold = threshold
        self.thresholdMetricId = thresholdMetricId
        self.treatMissingData = treatMissingData
        self.unit = unit
    }
}

extension PutMetricAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutMetricAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutMetricAlarmOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutMetricAlarmOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutMetricAlarmOutputResponse()"}
}

extension PutMetricAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutMetricAlarmOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutMetricAlarmOutputResponseBody: Swift.Equatable {
}

extension PutMetricAlarmOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutMetricDataInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricDataOutputError>
}

extension PutMetricDataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutMetricDataInput(metricData: \(Swift.String(describing: metricData)), namespace: \(Swift.String(describing: namespace)))"}
}

extension PutMetricDataInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricData = metricData {
            var metricDataContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricData"))
            for (index0, metricdatum0) in metricData.enumerated() {
                try metricDataContainer.encode(metricdatum0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        try container.encode("PutMetricData", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutMetricDataInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricDataOutputError>
}

public struct PutMetricDataInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricDataOutputError>
}

public struct PutMetricDataInput: Swift.Equatable {
    /// <p>The data for the metric. The array can include no more than 20 metrics per call.</p>
    public let metricData: [CloudWatchClientTypes.MetricDatum]?
    /// <p>The namespace for the metric data.</p>
    /// 		       <p>To avoid conflicts
    /// 			with AWS service namespaces, you should not specify a namespace that begins with <code>AWS/</code>
    ///          </p>
    public let namespace: Swift.String?

    public init (
        metricData: [CloudWatchClientTypes.MetricDatum]? = nil,
        namespace: Swift.String? = nil
    )
    {
        self.metricData = metricData
        self.namespace = namespace
    }
}

extension PutMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutMetricDataOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutMetricDataOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutMetricDataOutputResponse()"}
}

extension PutMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutMetricDataOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutMetricDataOutputResponseBody: Swift.Equatable {
}

extension PutMetricDataOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutMetricStreamInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricStreamInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricStreamOutputError>
}

extension PutMetricStreamInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutMetricStreamInput(excludeFilters: \(Swift.String(describing: excludeFilters)), firehoseArn: \(Swift.String(describing: firehoseArn)), includeFilters: \(Swift.String(describing: includeFilters)), name: \(Swift.String(describing: name)), outputFormat: \(Swift.String(describing: outputFormat)), roleArn: \(Swift.String(describing: roleArn)), tags: \(Swift.String(describing: tags)))"}
}

extension PutMetricStreamInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let excludeFilters = excludeFilters {
            var excludeFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludeFilters"))
            for (index0, metricstreamfilter0) in excludeFilters.enumerated() {
                try excludeFiltersContainer.encode(metricstreamfilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let firehoseArn = firehoseArn {
            try container.encode(firehoseArn, forKey: ClientRuntime.Key("FirehoseArn"))
        }
        if let includeFilters = includeFilters {
            var includeFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IncludeFilters"))
            for (index0, metricstreamfilter0) in includeFilters.enumerated() {
                try includeFiltersContainer.encode(metricstreamfilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let outputFormat = outputFormat {
            try container.encode(outputFormat, forKey: ClientRuntime.Key("OutputFormat"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: ClientRuntime.Key("RoleArn"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("PutMetricStream", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutMetricStreamInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricStreamInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricStreamOutputError>
}

public struct PutMetricStreamInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricStreamInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricStreamOutputError>
}

public struct PutMetricStreamInput: Swift.Equatable {
    /// <p>If you specify this parameter, the stream sends metrics from all
    /// 			metric namespaces except for the namespaces that you specify here.</p>
    /// 		       <p>You cannot include <code>ExcludeFilters</code> and <code>IncludeFilters</code> in
    /// 			the same operation.</p>
    public let excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// <p>The ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
    /// 		This Amazon Kinesis Firehose delivery stream must already exist and must be in the same
    /// 		account as the metric stream.</p>
    public let firehoseArn: Swift.String?
    /// <p>If you specify this parameter, the stream sends only the
    /// 		metrics from the metric namespaces that you specify here.</p>
    /// 		       <p>You cannot include <code>IncludeFilters</code> and <code>ExcludeFilters</code>
    /// 		in the same operation.</p>
    public let includeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// <p>If you are creating a new metric stream, this is the name for the new stream. The name
    /// 		must be different than the names of other metric streams in this account and Region.</p>
    /// 		       <p>If you are updating a metric stream, specify the name of that stream here.</p>
    /// 		       <p>Valid characters are A-Z, a-z, 0-9, "-" and "_".</p>
    public let name: Swift.String?
    /// <p>The output format for the stream. Valid values are <code>json</code>
    /// 		and <code>opentelemetry0.7</code>. For more information about metric stream
    /// 		output formats, see
    /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html">
    /// 				Metric streams output formats</a>.</p>
    public let outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
    /// <p>The ARN of an IAM role that this metric stream will use to access
    /// 			Amazon Kinesis Firehose resources. This IAM role must already
    /// 		exist and must be in the same account as the metric stream. This IAM role must include the following permissions:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>firehose:PutRecord</p>
    ///             </li>
    ///             <li>
    ///                <p>firehose:PutRecordBatch</p>
    ///             </li>
    ///          </ul>
    public let roleArn: Swift.String?
    /// <p>A list of key-value pairs to associate with the metric stream. You can associate as
    /// 			many as 50 tags with a metric stream.</p>
    /// 		       <p>Tags can help you organize and categorize your resources. You can also use them to scope user
    /// 			permissions by granting a user
    /// 			permission to access or change only resources with certain tag values.</p>
    public let tags: [CloudWatchClientTypes.Tag]?

    public init (
        excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        firehoseArn: Swift.String? = nil,
        includeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        name: Swift.String? = nil,
        outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat? = nil,
        roleArn: Swift.String? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.excludeFilters = excludeFilters
        self.firehoseArn = firehoseArn
        self.includeFilters = includeFilters
        self.name = name
        self.outputFormat = outputFormat
        self.roleArn = roleArn
        self.tags = tags
    }
}

extension PutMetricStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutMetricStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombinationException" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutMetricStreamOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalServiceFault(InternalServiceFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutMetricStreamOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutMetricStreamOutputResponse(arn: \(Swift.String(describing: arn)))"}
}

extension PutMetricStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutMetricStreamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
        } else {
            self.arn = nil
        }
    }
}

public struct PutMetricStreamOutputResponse: Swift.Equatable {
    /// <p>The ARN of the metric stream.</p>
    public let arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct PutMetricStreamOutputResponseBody: Swift.Equatable {
    public let arn: Swift.String?
}

extension PutMetricStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PutMetricStreamResult"))
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension CloudWatchClientTypes.Range: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
    }
}

extension CloudWatchClientTypes.Range: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Range(endTime: \(Swift.String(describing: endTime)), startTime: \(Swift.String(describing: startTime)))"}
}

extension CloudWatchClientTypes {
    /// <p>Specifies one range of days or times to exclude from use for training an
    /// 		anomaly detection model.</p>
    public struct Range: Swift.Equatable {
        /// <p>The end time of the range to exclude. The format is <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example,
        /// 			<code>2019-07-01T23:59:59</code>.</p>
        public let endTime: ClientRuntime.Date?
        /// <p>The start time of the range to exclude. The format is <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example,
        /// 			<code>2019-07-01T23:59:59</code>.</p>
        public let startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension CloudWatchClientTypes {
    public enum RecentlyActive: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pt3h
        case sdkUnknown(Swift.String)

        public static var allCases: [RecentlyActive] {
            return [
                .pt3h,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pt3h: return "PT3H"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecentlyActive(rawValue: rawValue) ?? RecentlyActive.sdkUnknown(rawValue)
        }
    }
}

extension ResourceNotFound: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFound(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFound: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ResourceNotFoundBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The named resource does not exist.</p>
public struct ResourceNotFound: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ResourceNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.resourceId = output.error.resourceId
            self.resourceType = output.error.resourceType
        } else {
            self.message = nil
            self.resourceId = nil
            self.resourceType = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The named resource does not exist.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var resourceId: Swift.String?
    public var resourceType: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let resourceType: Swift.String?
    public let resourceId: Swift.String?
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes {
    public enum ScanBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case timestampAscending
        case timestampDescending
        case sdkUnknown(Swift.String)

        public static var allCases: [ScanBy] {
            return [
                .timestampAscending,
                .timestampDescending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .timestampAscending: return "TimestampAscending"
            case .timestampDescending: return "TimestampDescending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScanBy(rawValue: rawValue) ?? ScanBy.sdkUnknown(rawValue)
        }
    }
}

public struct SetAlarmStateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetAlarmStateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetAlarmStateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetAlarmStateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetAlarmStateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetAlarmStateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetAlarmStateOutputError>
}

extension SetAlarmStateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetAlarmStateInput(alarmName: \(Swift.String(describing: alarmName)), stateReason: \(Swift.String(describing: stateReason)), stateReasonData: \(Swift.String(describing: stateReasonData)), stateValue: \(Swift.String(describing: stateValue)))"}
}

extension SetAlarmStateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let stateReason = stateReason {
            try container.encode(stateReason, forKey: ClientRuntime.Key("StateReason"))
        }
        if let stateReasonData = stateReasonData {
            try container.encode(stateReasonData, forKey: ClientRuntime.Key("StateReasonData"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: ClientRuntime.Key("StateValue"))
        }
        try container.encode("SetAlarmState", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetAlarmStateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetAlarmStateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetAlarmStateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetAlarmStateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetAlarmStateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetAlarmStateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetAlarmStateOutputError>
}

public struct SetAlarmStateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetAlarmStateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetAlarmStateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetAlarmStateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetAlarmStateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetAlarmStateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetAlarmStateOutputError>
}

public struct SetAlarmStateInput: Swift.Equatable {
    /// <p>The name of the alarm.</p>
    public let alarmName: Swift.String?
    /// <p>The reason that this alarm is set to this specific state, in text format.</p>
    public let stateReason: Swift.String?
    /// <p>The reason that this alarm is set to this specific state, in JSON format.</p>
    /// 		       <p>For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling
    /// 		alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.</p>
    public let stateReasonData: Swift.String?
    /// <p>The value of the state.</p>
    public let stateValue: CloudWatchClientTypes.StateValue?

    public init (
        alarmName: Swift.String? = nil,
        stateReason: Swift.String? = nil,
        stateReasonData: Swift.String? = nil,
        stateValue: CloudWatchClientTypes.StateValue? = nil
    )
    {
        self.alarmName = alarmName
        self.stateReason = stateReason
        self.stateReasonData = stateReasonData
        self.stateValue = stateValue
    }
}

extension SetAlarmStateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetAlarmStateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidFormatFault" : self = .invalidFormatFault(try InvalidFormatFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetAlarmStateOutputError: Swift.Error, Swift.Equatable {
    case invalidFormatFault(InvalidFormatFault)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetAlarmStateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetAlarmStateOutputResponse()"}
}

extension SetAlarmStateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetAlarmStateOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetAlarmStateOutputResponseBody: Swift.Equatable {
}

extension SetAlarmStateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CloudWatchClientTypes {
    public enum StandardUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bits
        case bitsSecond
        case bytes
        case bytesSecond
        case count
        case countSecond
        case gigabits
        case gigabitsSecond
        case gigabytes
        case gigabytesSecond
        case kilobits
        case kilobitsSecond
        case kilobytes
        case kilobytesSecond
        case megabits
        case megabitsSecond
        case megabytes
        case megabytesSecond
        case microseconds
        case milliseconds
        case `none`
        case percent
        case seconds
        case terabits
        case terabitsSecond
        case terabytes
        case terabytesSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [StandardUnit] {
            return [
                .bits,
                .bitsSecond,
                .bytes,
                .bytesSecond,
                .count,
                .countSecond,
                .gigabits,
                .gigabitsSecond,
                .gigabytes,
                .gigabytesSecond,
                .kilobits,
                .kilobitsSecond,
                .kilobytes,
                .kilobytesSecond,
                .megabits,
                .megabitsSecond,
                .megabytes,
                .megabytesSecond,
                .microseconds,
                .milliseconds,
                .none,
                .percent,
                .seconds,
                .terabits,
                .terabitsSecond,
                .terabytes,
                .terabytesSecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bits: return "Bits"
            case .bitsSecond: return "Bits/Second"
            case .bytes: return "Bytes"
            case .bytesSecond: return "Bytes/Second"
            case .count: return "Count"
            case .countSecond: return "Count/Second"
            case .gigabits: return "Gigabits"
            case .gigabitsSecond: return "Gigabits/Second"
            case .gigabytes: return "Gigabytes"
            case .gigabytesSecond: return "Gigabytes/Second"
            case .kilobits: return "Kilobits"
            case .kilobitsSecond: return "Kilobits/Second"
            case .kilobytes: return "Kilobytes"
            case .kilobytesSecond: return "Kilobytes/Second"
            case .megabits: return "Megabits"
            case .megabitsSecond: return "Megabits/Second"
            case .megabytes: return "Megabytes"
            case .megabytesSecond: return "Megabytes/Second"
            case .microseconds: return "Microseconds"
            case .milliseconds: return "Milliseconds"
            case .none: return "None"
            case .percent: return "Percent"
            case .seconds: return "Seconds"
            case .terabits: return "Terabits"
            case .terabitsSecond: return "Terabits/Second"
            case .terabytes: return "Terabytes"
            case .terabytesSecond: return "Terabytes/Second"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StandardUnit(rawValue: rawValue) ?? StandardUnit.sdkUnknown(rawValue)
        }
    }
}

public struct StartMetricStreamsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMetricStreamsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartMetricStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMetricStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartMetricStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartMetricStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMetricStreamsOutputError>
}

extension StartMetricStreamsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartMetricStreamsInput(names: \(Swift.String(describing: names)))"}
}

extension StartMetricStreamsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let names = names {
            var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
            for (index0, metricstreamname0) in names.enumerated() {
                try namesContainer.encode(metricstreamname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("StartMetricStreams", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct StartMetricStreamsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMetricStreamsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartMetricStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMetricStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartMetricStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartMetricStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMetricStreamsOutputError>
}

public struct StartMetricStreamsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMetricStreamsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartMetricStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMetricStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartMetricStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartMetricStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMetricStreamsOutputError>
}

public struct StartMetricStreamsInput: Swift.Equatable {
    /// <p>The array of the names of metric streams to start streaming.</p>
    /// 		       <p>This is an "all or nothing" operation. If you do not have
    /// 		permission to access all of the metric streams that you list here, then none of the streams that you list
    /// 		in the operation will start streaming.</p>
    public let names: [Swift.String]?

    public init (
        names: [Swift.String]? = nil
    )
    {
        self.names = names
    }
}

extension StartMetricStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension StartMetricStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMetricStreamsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMetricStreamsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartMetricStreamsOutputResponse()"}
}

extension StartMetricStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartMetricStreamsOutputResponse: Swift.Equatable {

    public init() {}
}

struct StartMetricStreamsOutputResponseBody: Swift.Equatable {
}

extension StartMetricStreamsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CloudWatchClientTypes {
    public enum StateValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alarm
        case insufficientData
        case ok
        case sdkUnknown(Swift.String)

        public static var allCases: [StateValue] {
            return [
                .alarm,
                .insufficientData,
                .ok,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "ALARM"
            case .insufficientData: return "INSUFFICIENT_DATA"
            case .ok: return "OK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StateValue(rawValue: rawValue) ?? StateValue.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes {
    public enum Statistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [Statistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Statistic(rawValue: rawValue) ?? Statistic.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes.StatisticSet: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximum = "Maximum"
        case minimum = "Minimum"
        case sampleCount = "SampleCount"
        case sum = "Sum"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maximum = maximum {
            try container.encode(maximum, forKey: ClientRuntime.Key("Maximum"))
        }
        if let minimum = minimum {
            try container.encode(minimum, forKey: ClientRuntime.Key("Minimum"))
        }
        if let sampleCount = sampleCount {
            try container.encode(sampleCount, forKey: ClientRuntime.Key("SampleCount"))
        }
        if let sum = sum {
            try container.encode(sum, forKey: ClientRuntime.Key("Sum"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sampleCountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleCount)
        sampleCount = sampleCountDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maximum)
        maximum = maximumDecoded
    }
}

extension CloudWatchClientTypes.StatisticSet: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StatisticSet(maximum: \(Swift.String(describing: maximum)), minimum: \(Swift.String(describing: minimum)), sampleCount: \(Swift.String(describing: sampleCount)), sum: \(Swift.String(describing: sum)))"}
}

extension CloudWatchClientTypes {
    /// <p>Represents a set of statistics that describes a specific metric. </p>
    public struct StatisticSet: Swift.Equatable {
        /// <p>The maximum value of the sample set.</p>
        public let maximum: Swift.Double?
        /// <p>The minimum value of the sample set.</p>
        public let minimum: Swift.Double?
        /// <p>The number of samples used for the statistic set.</p>
        public let sampleCount: Swift.Double?
        /// <p>The sum of values for the sample set.</p>
        public let sum: Swift.Double?

        public init (
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil
        )
        {
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
        }
    }

}

extension CloudWatchClientTypes {
    public enum StatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case internalError
        case partialData
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusCode] {
            return [
                .complete,
                .internalError,
                .partialData,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "Complete"
            case .internalError: return "InternalError"
            case .partialData: return "PartialData"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatusCode(rawValue: rawValue) ?? StatusCode.sdkUnknown(rawValue)
        }
    }
}

public struct StopMetricStreamsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopMetricStreamsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopMetricStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopMetricStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopMetricStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopMetricStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopMetricStreamsOutputError>
}

extension StopMetricStreamsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopMetricStreamsInput(names: \(Swift.String(describing: names)))"}
}

extension StopMetricStreamsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let names = names {
            var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
            for (index0, metricstreamname0) in names.enumerated() {
                try namesContainer.encode(metricstreamname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("StopMetricStreams", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct StopMetricStreamsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopMetricStreamsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopMetricStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopMetricStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopMetricStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopMetricStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopMetricStreamsOutputError>
}

public struct StopMetricStreamsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopMetricStreamsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopMetricStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopMetricStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopMetricStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopMetricStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopMetricStreamsOutputError>
}

public struct StopMetricStreamsInput: Swift.Equatable {
    /// <p>The array of the names of metric streams to stop streaming.</p>
    /// 		       <p>This is an "all or nothing" operation. If you do not have
    /// 			permission to access all of the metric streams that you list here, then none of the streams that you list
    /// 			in the operation will stop streaming.</p>
    public let names: [Swift.String]?

    public init (
        names: [Swift.String]? = nil
    )
    {
        self.names = names
    }
}

extension StopMetricStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension StopMetricStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameterException" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopMetricStreamsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopMetricStreamsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopMetricStreamsOutputResponse()"}
}

extension StopMetricStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopMetricStreamsOutputResponse: Swift.Equatable {

    public init() {}
}

struct StopMetricStreamsOutputResponseBody: Swift.Equatable {
}

extension StopMetricStreamsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CloudWatchClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudWatchClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension CloudWatchClientTypes {
    /// <p>A key-value pair associated with a CloudWatch resource.</p>
    public struct Tag: Swift.Equatable {
        /// <p>A string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your
        /// 		resources.</p>
        public let key: Swift.String?
        /// <p>The value for the specified tag key.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceARN: \(Swift.String(describing: resourceARN)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceARN = resourceARN {
            try container.encode(resourceARN, forKey: ClientRuntime.Key("ResourceARN"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("TagResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// <p>The ARN of the CloudWatch resource that you're adding tags to.</p>
    /// 		       <p>The ARN format of an alarm is
    /// 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i>
    ///             </code>
    ///          </p>
    /// 		       <p>The ARN format of a Contributor Insights rule is
    /// 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i>
    ///             </code>
    ///          </p>
    /// 		       <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies"> Resource
    /// 				Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General
    /// 			Reference</i>.</p>
    public let resourceARN: Swift.String?
    /// <p>The list of key-value pairs to associate with the alarm.</p>
    public let tags: [CloudWatchClientTypes.Tag]?

    public init (
        resourceARN: Swift.String? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UntagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceARN: \(Swift.String(describing: resourceARN)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceARN = resourceARN {
            try container.encode(resourceARN, forKey: ClientRuntime.Key("ResourceARN"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
            for (index0, tagkey0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(tagkey0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("UntagResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// <p>The ARN of the CloudWatch resource that you're removing tags from.</p>
    /// 		       <p>The ARN format of an alarm is
    /// 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i>
    ///             </code>
    ///          </p>
    /// 		       <p>The ARN format of a Contributor Insights rule is
    /// 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i>
    ///             </code>
    ///          </p>
    /// 	        <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies"> Resource
    /// 				Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General
    /// 			Reference</i>.</p>
    public let resourceARN: Swift.String?
    /// <p>The list of tag keys to remove from the resource.</p>
    public let tagKeys: [Swift.String]?

    public init (
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceFault" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}
