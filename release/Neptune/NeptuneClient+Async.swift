// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension NeptuneClient {
    /// Associates an Identity and Access Management (IAM) role from an
    ///       Neptune DB cluster.
    func addRoleToDBCluster(input: AddRoleToDBClusterInput) async throws -> AddRoleToDBClusterOutputResponse
    {
        typealias addRoleToDBClusterContinuation = CheckedContinuation<AddRoleToDBClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addRoleToDBClusterContinuation) in
            addRoleToDBCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a source identifier to an existing event notification subscription.
    func addSourceIdentifierToSubscription(input: AddSourceIdentifierToSubscriptionInput) async throws -> AddSourceIdentifierToSubscriptionOutputResponse
    {
        typealias addSourceIdentifierToSubscriptionContinuation = CheckedContinuation<AddSourceIdentifierToSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addSourceIdentifierToSubscriptionContinuation) in
            addSourceIdentifierToSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost
    ///       allocation reporting to track cost associated with Amazon Neptune resources, or used in a
    ///       Condition statement in an IAM policy for Amazon Neptune.
    func addTagsToResource(input: AddTagsToResourceInput) async throws -> AddTagsToResourceOutputResponse
    {
        typealias addTagsToResourceContinuation = CheckedContinuation<AddTagsToResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addTagsToResourceContinuation) in
            addTagsToResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Applies a pending maintenance action to a resource (for example, to a DB instance).
    func applyPendingMaintenanceAction(input: ApplyPendingMaintenanceActionInput) async throws -> ApplyPendingMaintenanceActionOutputResponse
    {
        typealias applyPendingMaintenanceActionContinuation = CheckedContinuation<ApplyPendingMaintenanceActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: applyPendingMaintenanceActionContinuation) in
            applyPendingMaintenanceAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Copies the specified DB cluster parameter group.
    func copyDBClusterParameterGroup(input: CopyDBClusterParameterGroupInput) async throws -> CopyDBClusterParameterGroupOutputResponse
    {
        typealias copyDBClusterParameterGroupContinuation = CheckedContinuation<CopyDBClusterParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: copyDBClusterParameterGroupContinuation) in
            copyDBClusterParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Copies a snapshot of a DB cluster.
    ///          To copy a DB cluster snapshot from a shared manual DB cluster snapshot,
    ///       SourceDBClusterSnapshotIdentifier must be the Amazon Resource Name (ARN) of the
    ///       shared DB cluster snapshot.
    func copyDBClusterSnapshot(input: CopyDBClusterSnapshotInput) async throws -> CopyDBClusterSnapshotOutputResponse
    {
        typealias copyDBClusterSnapshotContinuation = CheckedContinuation<CopyDBClusterSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: copyDBClusterSnapshotContinuation) in
            copyDBClusterSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Copies the specified DB parameter group.
    func copyDBParameterGroup(input: CopyDBParameterGroupInput) async throws -> CopyDBParameterGroupOutputResponse
    {
        typealias copyDBParameterGroupContinuation = CheckedContinuation<CopyDBParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: copyDBParameterGroupContinuation) in
            copyDBParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new Amazon Neptune DB cluster.
    ///          You can use the ReplicationSourceIdentifier parameter to create the DB
    ///       cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.
    ///          Note that when you create a new cluster using CreateDBCluster directly,
    ///       deletion protection is disabled by default (when you create a new production cluster in
    ///       the console, deletion protection is enabled by default). You can only delete a DB
    ///       cluster if its DeletionProtection field is set to false.
    func createDBCluster(input: CreateDBClusterInput) async throws -> CreateDBClusterOutputResponse
    {
        typealias createDBClusterContinuation = CheckedContinuation<CreateDBClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDBClusterContinuation) in
            createDBCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.
    func createDBClusterEndpoint(input: CreateDBClusterEndpointInput) async throws -> CreateDBClusterEndpointOutputResponse
    {
        typealias createDBClusterEndpointContinuation = CheckedContinuation<CreateDBClusterEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDBClusterEndpointContinuation) in
            createDBClusterEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new DB cluster parameter group.
    ///          Parameters in a DB cluster parameter group apply to all of the instances in a DB
    ///       cluster.
    ///           A DB cluster parameter group is initially created with the default
    ///       parameters for the database engine used by instances in the DB cluster.
    ///       To provide custom values for any of the parameters, you must modify the
    ///       group after creating it using ModifyDBClusterParameterGroup.
    ///       Once you've created a DB cluster parameter group, you need to associate it
    ///       with your DB cluster using ModifyDBCluster.
    ///       When you associate a new DB cluster parameter group with a running DB cluster,
    ///       you need to reboot the DB instances in the DB cluster without failover for the
    ///       new DB cluster parameter group and associated settings to take effect.
    ///
    ///             After you create a DB cluster parameter group, you should wait at least
    ///         5 minutes before creating your first DB cluster that uses that DB cluster
    ///         parameter group as the default parameter group. This allows Amazon Neptune
    ///         to fully complete the create action before the DB cluster parameter group
    ///         is used as the default for a new DB cluster. This is especially important for
    ///         parameters that are critical when creating the default database for a DB
    ///         cluster, such as the character set for the default database defined by the
    ///         character_set_database parameter. You can use the Parameter
    ///         Groups option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune
    ///         console or the DescribeDBClusterParameters
    ///         command to verify that your DB cluster parameter group has been created or modified.
    ///
    func createDBClusterParameterGroup(input: CreateDBClusterParameterGroupInput) async throws -> CreateDBClusterParameterGroupOutputResponse
    {
        typealias createDBClusterParameterGroupContinuation = CheckedContinuation<CreateDBClusterParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDBClusterParameterGroupContinuation) in
            createDBClusterParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a snapshot of a DB cluster.
    func createDBClusterSnapshot(input: CreateDBClusterSnapshotInput) async throws -> CreateDBClusterSnapshotOutputResponse
    {
        typealias createDBClusterSnapshotContinuation = CheckedContinuation<CreateDBClusterSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDBClusterSnapshotContinuation) in
            createDBClusterSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new DB instance.
    func createDBInstance(input: CreateDBInstanceInput) async throws -> CreateDBInstanceOutputResponse
    {
        typealias createDBInstanceContinuation = CheckedContinuation<CreateDBInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDBInstanceContinuation) in
            createDBInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new DB parameter group.
    ///
    ///          A DB parameter group is initially created with the default parameters for the database
    ///       engine used by the DB instance. To provide custom values for any of the parameters, you must
    ///       modify the group after creating it using ModifyDBParameterGroup. Once
    ///       you've created a DB parameter group, you need to associate it with your DB instance using
    ///       ModifyDBInstance. When you associate a new DB parameter group with a
    ///       running DB instance, you need to reboot the DB instance without failover for the new DB
    ///       parameter group and associated settings to take effect.
    ///
    ///
    ///             After you create a DB parameter group, you should wait at least 5 minutes before
    ///         creating your first DB instance that uses that DB parameter group as the default parameter
    ///         group. This allows Amazon Neptune to fully complete the create action before the parameter
    ///         group is used as the default for a new DB instance. This is especially important for
    ///         parameters that are critical when creating the default database for a DB instance, such as
    ///         the character set for the default database defined by the
    ///         character_set_database parameter. You can use the Parameter
    ///         Groups option of the Amazon Neptune console or the
    ///         DescribeDBParameters command to verify that your DB parameter group has
    ///         been created or modified.
    ///
    func createDBParameterGroup(input: CreateDBParameterGroupInput) async throws -> CreateDBParameterGroupOutputResponse
    {
        typealias createDBParameterGroupContinuation = CheckedContinuation<CreateDBParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDBParameterGroupContinuation) in
            createDBParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at
    ///       least two AZs in the Amazon Region.
    func createDBSubnetGroup(input: CreateDBSubnetGroupInput) async throws -> CreateDBSubnetGroupOutputResponse
    {
        typealias createDBSubnetGroupContinuation = CheckedContinuation<CreateDBSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDBSubnetGroupContinuation) in
            createDBSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an event notification subscription. This action requires a topic ARN (Amazon
    ///       Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To
    ///       obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The
    ///       ARN is displayed in the SNS console.
    ///          You can specify the type of source (SourceType) you want to be notified of, provide a list
    ///       of Neptune sources (SourceIds) that triggers the events, and provide a list of event
    ///       categories (EventCategories) for events you want to be notified of. For example, you can
    ///       specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories
    ///       = Availability, Backup.
    ///          If you specify both the SourceType and SourceIds, such as SourceType = db-instance and
    ///       SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the
    ///       specified source. If you specify a SourceType but do not specify a SourceIdentifier, you
    ///       receive notice of the events for that source type for all your Neptune sources. If you do not
    ///       specify either the SourceType nor the SourceIdentifier, you are notified of events generated
    ///       from all Neptune sources belonging to your customer account.
    func createEventSubscription(input: CreateEventSubscriptionInput) async throws -> CreateEventSubscriptionOutputResponse
    {
        typealias createEventSubscriptionContinuation = CheckedContinuation<CreateEventSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEventSubscriptionContinuation) in
            createEventSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a
    ///       DB cluster, all automated backups for that DB cluster are deleted and can't be recovered.
    ///       Manual DB cluster snapshots of the specified DB cluster are not deleted.
    ///
    ///          Note that the DB Cluster cannot be deleted if deletion protection is enabled.  To
    ///       delete it, you must first set its DeletionProtection field to
    ///       False.
    func deleteDBCluster(input: DeleteDBClusterInput) async throws -> DeleteDBClusterOutputResponse
    {
        typealias deleteDBClusterContinuation = CheckedContinuation<DeleteDBClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDBClusterContinuation) in
            deleteDBCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.
    func deleteDBClusterEndpoint(input: DeleteDBClusterEndpointInput) async throws -> DeleteDBClusterEndpointOutputResponse
    {
        typealias deleteDBClusterEndpointContinuation = CheckedContinuation<DeleteDBClusterEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDBClusterEndpointContinuation) in
            deleteDBClusterEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specified DB cluster parameter group. The DB cluster parameter group to be
    ///       deleted can't be associated with any DB clusters.
    func deleteDBClusterParameterGroup(input: DeleteDBClusterParameterGroupInput) async throws -> DeleteDBClusterParameterGroupOutputResponse
    {
        typealias deleteDBClusterParameterGroupContinuation = CheckedContinuation<DeleteDBClusterParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDBClusterParameterGroupContinuation) in
            deleteDBClusterParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is
    ///       terminated.
    ///
    ///             The DB cluster snapshot must be in the available state to be
    ///         deleted.
    ///
    func deleteDBClusterSnapshot(input: DeleteDBClusterSnapshotInput) async throws -> DeleteDBClusterSnapshotOutputResponse
    {
        typealias deleteDBClusterSnapshotContinuation = CheckedContinuation<DeleteDBClusterSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDBClusterSnapshotContinuation) in
            deleteDBClusterSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete
    ///       a DB instance, all automated backups for that instance are deleted and can't be recovered.
    ///       Manual DB snapshots of the DB instance to be deleted by DeleteDBInstance are not
    ///       deleted.
    ///           If you request a final DB snapshot the status of the Amazon Neptune DB instance is
    ///       deleting until the DB snapshot is created. The API action
    ///       DescribeDBInstance is used to monitor the status of this operation. The action
    ///       can't be canceled or reverted once submitted.
    ///          Note that when a DB instance is in a failure state and has a status of
    ///       failed, incompatible-restore, or incompatible-network,
    ///       you can only delete it when the SkipFinalSnapshot parameter is set to
    ///       true.
    ///          You can't delete a DB instance if it is the only instance in the DB cluster, or
    ///       if it has deletion protection enabled.
    func deleteDBInstance(input: DeleteDBInstanceInput) async throws -> DeleteDBInstanceOutputResponse
    {
        typealias deleteDBInstanceContinuation = CheckedContinuation<DeleteDBInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDBInstanceContinuation) in
            deleteDBInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be
    ///       associated with any DB instances.
    func deleteDBParameterGroup(input: DeleteDBParameterGroupInput) async throws -> DeleteDBParameterGroupOutputResponse
    {
        typealias deleteDBParameterGroupContinuation = CheckedContinuation<DeleteDBParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDBParameterGroupContinuation) in
            deleteDBParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a DB subnet group.
    ///
    ///             The specified database subnet group must not be associated with any DB instances.
    ///
    func deleteDBSubnetGroup(input: DeleteDBSubnetGroupInput) async throws -> DeleteDBSubnetGroupOutputResponse
    {
        typealias deleteDBSubnetGroupContinuation = CheckedContinuation<DeleteDBSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDBSubnetGroupContinuation) in
            deleteDBSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an event notification subscription.
    func deleteEventSubscription(input: DeleteEventSubscriptionInput) async throws -> DeleteEventSubscriptionOutputResponse
    {
        typealias deleteEventSubscriptionContinuation = CheckedContinuation<DeleteEventSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEventSubscriptionContinuation) in
            deleteEventSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about endpoints for an Amazon Neptune DB cluster.
    ///
    ///             This operation can also return information for Amazon RDS clusters
    ///         and Amazon DocDB clusters.
    ///
    func describeDBClusterEndpoints(input: DescribeDBClusterEndpointsInput) async throws -> DescribeDBClusterEndpointsOutputResponse
    {
        typealias describeDBClusterEndpointsContinuation = CheckedContinuation<DescribeDBClusterEndpointsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDBClusterEndpointsContinuation) in
            describeDBClusterEndpoints(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///  Returns a list of DBClusterParameterGroup descriptions. If a
    ///       DBClusterParameterGroupName parameter is specified, the list will contain only
    ///       the description of the specified DB cluster parameter group.
    func describeDBClusterParameterGroups(input: DescribeDBClusterParameterGroupsInput) async throws -> DescribeDBClusterParameterGroupsOutputResponse
    {
        typealias describeDBClusterParameterGroupsContinuation = CheckedContinuation<DescribeDBClusterParameterGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDBClusterParameterGroupsContinuation) in
            describeDBClusterParameterGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the detailed parameter list for a particular DB cluster parameter group.
    func describeDBClusterParameters(input: DescribeDBClusterParametersInput) async throws -> DescribeDBClusterParametersOutputResponse
    {
        typealias describeDBClusterParametersContinuation = CheckedContinuation<DescribeDBClusterParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDBClusterParametersContinuation) in
            describeDBClusterParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster
    ///       snapshot.
    ///          When sharing snapshots with other Amazon accounts,
    ///       DescribeDBClusterSnapshotAttributes returns the restore attribute
    ///       and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB
    ///       cluster snapshot. If all is included in the list of values for the
    ///       restore attribute, then the manual DB cluster snapshot is public and can be
    ///       copied or restored by all Amazon accounts.
    ///          To add or remove access for an Amazon account to copy or restore a manual DB cluster
    ///       snapshot, or to make the manual DB cluster snapshot public or private, use the ModifyDBClusterSnapshotAttribute API action.
    func describeDBClusterSnapshotAttributes(input: DescribeDBClusterSnapshotAttributesInput) async throws -> DescribeDBClusterSnapshotAttributesOutputResponse
    {
        typealias describeDBClusterSnapshotAttributesContinuation = CheckedContinuation<DescribeDBClusterSnapshotAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDBClusterSnapshotAttributesContinuation) in
            describeDBClusterSnapshotAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about DB cluster snapshots. This API action supports
    ///       pagination.
    func describeDBClusterSnapshots(input: DescribeDBClusterSnapshotsInput) async throws -> DescribeDBClusterSnapshotsOutputResponse
    {
        typealias describeDBClusterSnapshotsContinuation = CheckedContinuation<DescribeDBClusterSnapshotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDBClusterSnapshotsContinuation) in
            describeDBClusterSnapshots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about provisioned DB clusters, and supports
    ///       pagination.
    ///
    ///
    ///             This operation can also return information for Amazon RDS clusters
    ///     and Amazon DocDB clusters.
    ///
    func describeDBClusters(input: DescribeDBClustersInput) async throws -> DescribeDBClustersOutputResponse
    {
        typealias describeDBClustersContinuation = CheckedContinuation<DescribeDBClustersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDBClustersContinuation) in
            describeDBClusters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the available DB engines.
    func describeDBEngineVersions(input: DescribeDBEngineVersionsInput) async throws -> DescribeDBEngineVersionsOutputResponse
    {
        typealias describeDBEngineVersionsContinuation = CheckedContinuation<DescribeDBEngineVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDBEngineVersionsContinuation) in
            describeDBEngineVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about provisioned instances, and supports pagination.
    ///
    ///
    ///             This operation can also return information for Amazon RDS instances
    ///     and Amazon DocDB instances.
    ///
    func describeDBInstances(input: DescribeDBInstancesInput) async throws -> DescribeDBInstancesOutputResponse
    {
        typealias describeDBInstancesContinuation = CheckedContinuation<DescribeDBInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDBInstancesContinuation) in
            describeDBInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of DBParameterGroup descriptions. If a
    ///       DBParameterGroupName is specified, the list will contain only the description of
    ///       the specified DB parameter group.
    func describeDBParameterGroups(input: DescribeDBParameterGroupsInput) async throws -> DescribeDBParameterGroupsOutputResponse
    {
        typealias describeDBParameterGroupsContinuation = CheckedContinuation<DescribeDBParameterGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDBParameterGroupsContinuation) in
            describeDBParameterGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the detailed parameter list for a particular DB parameter group.
    func describeDBParameters(input: DescribeDBParametersInput) async throws -> DescribeDBParametersOutputResponse
    {
        typealias describeDBParametersContinuation = CheckedContinuation<DescribeDBParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDBParametersContinuation) in
            describeDBParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the
    ///       list will contain only the descriptions of the specified DBSubnetGroup.
    ///          For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial.
    func describeDBSubnetGroups(input: DescribeDBSubnetGroupsInput) async throws -> DescribeDBSubnetGroupsOutputResponse
    {
        typealias describeDBSubnetGroupsContinuation = CheckedContinuation<DescribeDBSubnetGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDBSubnetGroupsContinuation) in
            describeDBSubnetGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the default engine and system parameter information for the cluster database
    ///       engine.
    func describeEngineDefaultClusterParameters(input: DescribeEngineDefaultClusterParametersInput) async throws -> DescribeEngineDefaultClusterParametersOutputResponse
    {
        typealias describeEngineDefaultClusterParametersContinuation = CheckedContinuation<DescribeEngineDefaultClusterParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEngineDefaultClusterParametersContinuation) in
            describeEngineDefaultClusterParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the default engine and system parameter information for the specified database
    ///       engine.
    func describeEngineDefaultParameters(input: DescribeEngineDefaultParametersInput) async throws -> DescribeEngineDefaultParametersOutputResponse
    {
        typealias describeEngineDefaultParametersContinuation = CheckedContinuation<DescribeEngineDefaultParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEngineDefaultParametersContinuation) in
            describeEngineDefaultParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays a list of categories for all event source types, or, if specified, for a
    ///       specified source type.
    func describeEventCategories(input: DescribeEventCategoriesInput) async throws -> DescribeEventCategoriesOutputResponse
    {
        typealias describeEventCategoriesContinuation = CheckedContinuation<DescribeEventCategoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventCategoriesContinuation) in
            describeEventCategories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all the subscription descriptions for a customer account. The description for a
    ///       subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID,
    ///       CreationTime, and Status.
    ///          If you specify a SubscriptionName, lists the description for that subscription.
    func describeEventSubscriptions(input: DescribeEventSubscriptionsInput) async throws -> DescribeEventSubscriptionsOutputResponse
    {
        typealias describeEventSubscriptionsContinuation = CheckedContinuation<DescribeEventSubscriptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventSubscriptionsContinuation) in
            describeEventSubscriptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter
    ///       groups for the past 14 days. Events specific to a particular DB instance, DB security group,
    ///       database snapshot, or DB parameter group can be obtained by providing the name as a parameter.
    ///       By default, the past hour of events are returned.
    func describeEvents(input: DescribeEventsInput) async throws -> DescribeEventsOutputResponse
    {
        typealias describeEventsContinuation = CheckedContinuation<DescribeEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventsContinuation) in
            describeEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of orderable DB instance options for the specified engine.
    func describeOrderableDBInstanceOptions(input: DescribeOrderableDBInstanceOptionsInput) async throws -> DescribeOrderableDBInstanceOptionsOutputResponse
    {
        typealias describeOrderableDBInstanceOptionsContinuation = CheckedContinuation<DescribeOrderableDBInstanceOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOrderableDBInstanceOptionsContinuation) in
            describeOrderableDBInstanceOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of resources (for example, DB instances) that have at least one pending
    ///       maintenance action.
    func describePendingMaintenanceActions(input: DescribePendingMaintenanceActionsInput) async throws -> DescribePendingMaintenanceActionsOutputResponse
    {
        typealias describePendingMaintenanceActionsContinuation = CheckedContinuation<DescribePendingMaintenanceActionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePendingMaintenanceActionsContinuation) in
            describePendingMaintenanceActions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// You can call DescribeValidDBInstanceModifications
    ///       to learn what modifications you can make to your DB instance. You can use this
    ///       information when you call ModifyDBInstance.
    func describeValidDBInstanceModifications(input: DescribeValidDBInstanceModificationsInput) async throws -> DescribeValidDBInstanceModificationsOutputResponse
    {
        typealias describeValidDBInstanceModificationsContinuation = CheckedContinuation<DescribeValidDBInstanceModificationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeValidDBInstanceModificationsContinuation) in
            describeValidDBInstanceModifications(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Forces a failover for a DB cluster.
    ///          A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the
    ///       DB cluster to be the primary instance (the cluster writer).
    ///          Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the
    ///       primary instance fails. You can force a failover when you want to simulate a failure of a
    ///       primary instance for testing. Because each instance in a DB cluster has its own endpoint
    ///       address, you will need to clean up and re-establish any existing connections that use those
    ///       endpoint addresses when the failover is complete.
    func failoverDBCluster(input: FailoverDBClusterInput) async throws -> FailoverDBClusterOutputResponse
    {
        typealias failoverDBClusterContinuation = CheckedContinuation<FailoverDBClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: failoverDBClusterContinuation) in
            failoverDBCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all tags on an Amazon Neptune resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modify a setting for a DB cluster. You can change one or more database configuration
    ///       parameters by specifying these parameters and the new values in the request.
    func modifyDBCluster(input: ModifyDBClusterInput) async throws -> ModifyDBClusterOutputResponse
    {
        typealias modifyDBClusterContinuation = CheckedContinuation<ModifyDBClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyDBClusterContinuation) in
            modifyDBCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies the properties of an endpoint in an Amazon Neptune DB cluster.
    func modifyDBClusterEndpoint(input: ModifyDBClusterEndpointInput) async throws -> ModifyDBClusterEndpointOutputResponse
    {
        typealias modifyDBClusterEndpointContinuation = CheckedContinuation<ModifyDBClusterEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyDBClusterEndpointContinuation) in
            modifyDBClusterEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///  Modifies the parameters of a DB cluster parameter group. To modify more than one
    ///       parameter, submit a list of the following: ParameterName,
    ///       ParameterValue, and ApplyMethod. A maximum of 20 parameters can be
    ///       modified in a single request.
    ///
    ///
    ///             Changes to dynamic parameters are applied immediately. Changes to static parameters
    ///         require a reboot without failover to the DB cluster associated with the parameter group
    ///         before the change can take effect.
    ///
    ///
    ///             After you create a DB cluster parameter group, you should wait at least 5 minutes before
    ///         creating your first DB cluster that uses that DB cluster parameter group as the default
    ///         parameter group. This allows Amazon Neptune to fully complete the create action before the
    ///         parameter group is used as the default for a new DB cluster. This is especially important
    ///         for parameters that are critical when creating the default database for a DB cluster, such
    ///         as the character set for the default database defined by the
    ///         character_set_database parameter. You can use the Parameter
    ///         Groups option of the Amazon Neptune console or the DescribeDBClusterParameters command to verify that your DB cluster parameter
    ///         group has been created or modified.
    ///
    func modifyDBClusterParameterGroup(input: ModifyDBClusterParameterGroupInput) async throws -> ModifyDBClusterParameterGroupOutputResponse
    {
        typealias modifyDBClusterParameterGroupContinuation = CheckedContinuation<ModifyDBClusterParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyDBClusterParameterGroupContinuation) in
            modifyDBClusterParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds an attribute and values to, or removes an attribute and values from, a manual DB
    ///       cluster snapshot.
    ///          To share a manual DB cluster snapshot with other Amazon accounts, specify
    ///       restore as the AttributeName and use the ValuesToAdd
    ///       parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual
    ///       DB cluster snapshot. Use the value all to make the manual DB cluster snapshot
    ///       public, which means that it can be copied or restored by all Amazon accounts. Do not add the
    ///       all value for any manual DB cluster snapshots that contain private information
    ///       that you don't want available to all Amazon accounts. If a manual DB cluster snapshot is
    ///       encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for
    ///       the ValuesToAdd parameter. You can't use all as a value for that
    ///       parameter in this case.
    ///          To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or
    ///       whether a manual DB cluster snapshot public or private, use the DescribeDBClusterSnapshotAttributes API action.
    func modifyDBClusterSnapshotAttribute(input: ModifyDBClusterSnapshotAttributeInput) async throws -> ModifyDBClusterSnapshotAttributeOutputResponse
    {
        typealias modifyDBClusterSnapshotAttributeContinuation = CheckedContinuation<ModifyDBClusterSnapshotAttributeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyDBClusterSnapshotAttributeContinuation) in
            modifyDBClusterSnapshotAttribute(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies settings for a DB instance. You can change one or more database configuration
    ///       parameters by specifying these parameters and the new values in the request. To learn what
    ///       modifications you can make to your DB instance, call DescribeValidDBInstanceModifications before you call ModifyDBInstance.
    func modifyDBInstance(input: ModifyDBInstanceInput) async throws -> ModifyDBInstanceOutputResponse
    {
        typealias modifyDBInstanceContinuation = CheckedContinuation<ModifyDBInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyDBInstanceContinuation) in
            modifyDBInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies the parameters of a DB parameter group. To modify more than one parameter,
    ///       submit a list of the following: ParameterName, ParameterValue, and
    ///       ApplyMethod. A maximum of 20 parameters can be modified in a single request.
    ///
    ///             Changes to dynamic parameters are applied immediately. Changes to static parameters
    ///         require a reboot without failover to the DB instance associated with the parameter group
    ///         before the change can take effect.
    ///
    ///
    ///             After you modify a DB parameter group, you should wait at least 5 minutes before
    ///         creating your first DB instance that uses that DB parameter group as the default parameter
    ///         group. This allows Amazon Neptune to fully complete the modify action before the parameter
    ///         group is used as the default for a new DB instance. This is especially important for
    ///         parameters that are critical when creating the default database for a DB instance, such as
    ///         the character set for the default database defined by the
    ///         character_set_database parameter. You can use the Parameter
    ///         Groups option of the Amazon Neptune console or the
    ///         DescribeDBParameters command to verify that your DB parameter group has
    ///         been created or modified.
    ///
    func modifyDBParameterGroup(input: ModifyDBParameterGroupInput) async throws -> ModifyDBParameterGroupOutputResponse
    {
        typealias modifyDBParameterGroupContinuation = CheckedContinuation<ModifyDBParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyDBParameterGroupContinuation) in
            modifyDBParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in
    ///       at least two AZs in the Amazon Region.
    func modifyDBSubnetGroup(input: ModifyDBSubnetGroupInput) async throws -> ModifyDBSubnetGroupOutputResponse
    {
        typealias modifyDBSubnetGroupContinuation = CheckedContinuation<ModifyDBSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyDBSubnetGroupContinuation) in
            modifyDBSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies an existing event notification subscription. Note that you can't modify the
    ///       source identifiers using this call; to change source identifiers for a subscription, use the
    ///       AddSourceIdentifierToSubscription and RemoveSourceIdentifierFromSubscription calls.
    ///          You can see a list of the event categories for a given SourceType
    ///       by using the DescribeEventCategories action.
    func modifyEventSubscription(input: ModifyEventSubscriptionInput) async throws -> ModifyEventSubscriptionOutputResponse
    {
        typealias modifyEventSubscriptionContinuation = CheckedContinuation<ModifyEventSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyEventSubscriptionContinuation) in
            modifyEventSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Not supported.
    func promoteReadReplicaDBCluster(input: PromoteReadReplicaDBClusterInput) async throws -> PromoteReadReplicaDBClusterOutputResponse
    {
        typealias promoteReadReplicaDBClusterContinuation = CheckedContinuation<PromoteReadReplicaDBClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: promoteReadReplicaDBClusterContinuation) in
            promoteReadReplicaDBCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// You might need to reboot your DB instance, usually for maintenance reasons. For example,
    ///       if you make certain modifications, or if you change the DB parameter group associated with the
    ///       DB instance, you must reboot the instance for the changes to take effect.
    ///          Rebooting a DB instance restarts the database engine service. Rebooting a DB instance
    ///       results in a momentary outage, during which the DB instance status is set to rebooting.
    func rebootDBInstance(input: RebootDBInstanceInput) async throws -> RebootDBInstanceOutputResponse
    {
        typealias rebootDBInstanceContinuation = CheckedContinuation<RebootDBInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rebootDBInstanceContinuation) in
            rebootDBInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates an Identity and Access Management (IAM) role from a DB cluster.
    func removeRoleFromDBCluster(input: RemoveRoleFromDBClusterInput) async throws -> RemoveRoleFromDBClusterOutputResponse
    {
        typealias removeRoleFromDBClusterContinuation = CheckedContinuation<RemoveRoleFromDBClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeRoleFromDBClusterContinuation) in
            removeRoleFromDBCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a source identifier from an existing event notification subscription.
    func removeSourceIdentifierFromSubscription(input: RemoveSourceIdentifierFromSubscriptionInput) async throws -> RemoveSourceIdentifierFromSubscriptionOutputResponse
    {
        typealias removeSourceIdentifierFromSubscriptionContinuation = CheckedContinuation<RemoveSourceIdentifierFromSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeSourceIdentifierFromSubscriptionContinuation) in
            removeSourceIdentifierFromSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes metadata tags from an Amazon Neptune resource.
    func removeTagsFromResource(input: RemoveTagsFromResourceInput) async throws -> RemoveTagsFromResourceOutputResponse
    {
        typealias removeTagsFromResourceContinuation = CheckedContinuation<RemoveTagsFromResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeTagsFromResourceContinuation) in
            removeTagsFromResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///  Modifies the parameters of a DB cluster parameter group to the default value. To reset
    ///       specific parameters submit a list of the following: ParameterName and
    ///       ApplyMethod. To reset the entire DB cluster parameter group, specify the
    ///       DBClusterParameterGroupName and ResetAllParameters parameters.
    ///           When resetting the entire group, dynamic parameters are updated immediately and static
    ///       parameters are set to pending-reboot to take effect on the next DB instance
    ///       restart or RebootDBInstance request. You must call RebootDBInstance for every DB instance in your DB cluster
    ///       that you want the updated static parameter to apply to.
    func resetDBClusterParameterGroup(input: ResetDBClusterParameterGroupInput) async throws -> ResetDBClusterParameterGroupOutputResponse
    {
        typealias resetDBClusterParameterGroupContinuation = CheckedContinuation<ResetDBClusterParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetDBClusterParameterGroupContinuation) in
            resetDBClusterParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies the parameters of a DB parameter group to the engine/system default value. To
    ///       reset specific parameters, provide a list of the following: ParameterName and
    ///       ApplyMethod. To reset the entire DB parameter group, specify the
    ///       DBParameterGroup name and ResetAllParameters parameters. When
    ///       resetting the entire group, dynamic parameters are updated immediately and static parameters
    ///       are set to pending-reboot to take effect on the next DB instance restart or
    ///       RebootDBInstance request.
    func resetDBParameterGroup(input: ResetDBParameterGroupInput) async throws -> ResetDBParameterGroupOutputResponse
    {
        typealias resetDBParameterGroupContinuation = CheckedContinuation<ResetDBParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetDBParameterGroupContinuation) in
            resetDBParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new DB cluster from a DB snapshot or DB cluster snapshot.
    ///          If a DB snapshot is specified, the target DB cluster is created from the source DB
    ///       snapshot with a default configuration and default security group.
    ///          If a DB cluster snapshot is specified, the target DB cluster is created from the source DB
    ///       cluster restore point with the same configuration as the original source DB cluster, except
    ///       that the new DB cluster is created with the default security group.
    func restoreDBClusterFromSnapshot(input: RestoreDBClusterFromSnapshotInput) async throws -> RestoreDBClusterFromSnapshotOutputResponse
    {
        typealias restoreDBClusterFromSnapshotContinuation = CheckedContinuation<RestoreDBClusterFromSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: restoreDBClusterFromSnapshotContinuation) in
            restoreDBClusterFromSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Restores a DB cluster to an arbitrary point in time. Users can restore to any point in
    ///       time before LatestRestorableTime for up to BackupRetentionPeriod
    ///       days. The target DB cluster is created from the source DB cluster with the same configuration
    ///       as the original DB cluster, except that the new DB cluster is created with the default DB
    ///       security group.
    ///
    ///             This action only restores the DB cluster, not the DB instances for that DB cluster. You
    ///         must invoke the CreateDBInstance action to create DB instances for the
    ///         restored DB cluster, specifying the identifier of the restored DB cluster in
    ///         DBClusterIdentifier. You can create DB instances only after the
    ///         RestoreDBClusterToPointInTime action has completed and the DB cluster is
    ///         available.
    ///
    func restoreDBClusterToPointInTime(input: RestoreDBClusterToPointInTimeInput) async throws -> RestoreDBClusterToPointInTimeOutputResponse
    {
        typealias restoreDBClusterToPointInTimeContinuation = CheckedContinuation<RestoreDBClusterToPointInTimeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: restoreDBClusterToPointInTimeContinuation) in
            restoreDBClusterToPointInTime(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an Amazon Neptune  DB cluster that was stopped using the AWS
    ///       console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.
    func startDBCluster(input: StartDBClusterInput) async throws -> StartDBClusterOutputResponse
    {
        typealias startDBClusterContinuation = CheckedContinuation<StartDBClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startDBClusterContinuation) in
            startDBCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune
    ///       retains the DB cluster's metadata, including its endpoints and DB parameter
    ///       groups.
    ///
    ///          Neptune also retains the transaction logs so you can do a point-in-time
    ///       restore if necessary.
    func stopDBCluster(input: StopDBClusterInput) async throws -> StopDBClusterOutputResponse
    {
        typealias stopDBClusterContinuation = CheckedContinuation<StopDBClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopDBClusterContinuation) in
            stopDBCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
