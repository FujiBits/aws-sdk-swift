// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AmpClient {
    /// Creates a new AMP workspace.
    func createWorkspace(input: CreateWorkspaceInput) async throws -> CreateWorkspaceOutputResponse
    {
        typealias createWorkspaceContinuation = CheckedContinuation<CreateWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWorkspaceContinuation) in
            createWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an AMP workspace.
    func deleteWorkspace(input: DeleteWorkspaceInput) async throws -> DeleteWorkspaceOutputResponse
    {
        typealias deleteWorkspaceContinuation = CheckedContinuation<DeleteWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWorkspaceContinuation) in
            deleteWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an existing AMP workspace.
    func describeWorkspace(input: DescribeWorkspaceInput) async throws -> DescribeWorkspaceOutputResponse
    {
        typealias describeWorkspaceContinuation = CheckedContinuation<DescribeWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkspaceContinuation) in
            describeWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all AMP workspaces, including workspaces being created or deleted.
    func listWorkspaces(input: ListWorkspacesInput) async throws -> ListWorkspacesOutputResponse
    {
        typealias listWorkspacesContinuation = CheckedContinuation<ListWorkspacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWorkspacesContinuation) in
            listWorkspaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an AMP workspace alias.
    func updateWorkspaceAlias(input: UpdateWorkspaceAliasInput) async throws -> UpdateWorkspaceAliasOutputResponse
    {
        typealias updateWorkspaceAliasContinuation = CheckedContinuation<UpdateWorkspaceAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWorkspaceAliasContinuation) in
            updateWorkspaceAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
