// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTranscriptionJobsOutputResponseBody: Equatable {
    public let status: TranscriptionJobStatus?
    public let nextToken: String?
    public let transcriptionJobSummaries: [TranscriptionJobSummary]?
}

extension ListTranscriptionJobsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case status = "Status"
        case transcriptionJobSummaries = "TranscriptionJobSummaries"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(TranscriptionJobStatus.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let transcriptionJobSummariesContainer = try containerValues.decodeIfPresent([TranscriptionJobSummary?].self, forKey: .transcriptionJobSummaries)
        var transcriptionJobSummariesDecoded0:[TranscriptionJobSummary]? = nil
        if let transcriptionJobSummariesContainer = transcriptionJobSummariesContainer {
            transcriptionJobSummariesDecoded0 = [TranscriptionJobSummary]()
            for structure0 in transcriptionJobSummariesContainer {
                if let structure0 = structure0 {
                    transcriptionJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        transcriptionJobSummaries = transcriptionJobSummariesDecoded0
    }
}
