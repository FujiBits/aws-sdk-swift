// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension TranscribeClient {
    /// <p>Creates a new custom language model. Use Amazon S3 prefixes to provide the location of your
    ///             input files. The time it takes to create your model depends on the size of your training
    ///             data.</p>
    func createLanguageModel(input: CreateLanguageModelInput) async throws -> CreateLanguageModelOutputResponse
    {
        typealias createLanguageModelContinuation = CheckedContinuation<CreateLanguageModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createLanguageModelContinuation) in
            createLanguageModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new custom vocabulary that you can use to
    ///             change
    ///             how Amazon Transcribe Medical transcribes your audio file.</p>
    func createMedicalVocabulary(input: CreateMedicalVocabularyInput) async throws -> CreateMedicalVocabularyOutputResponse
    {
        typealias createMedicalVocabularyContinuation = CheckedContinuation<CreateMedicalVocabularyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMedicalVocabularyContinuation) in
            createMedicalVocabulary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new custom vocabulary that you can use to change the way Amazon Transcribe handles
    ///             transcription of an audio file.</p>
    func createVocabulary(input: CreateVocabularyInput) async throws -> CreateVocabularyOutputResponse
    {
        typealias createVocabularyContinuation = CheckedContinuation<CreateVocabularyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createVocabularyContinuation) in
            createVocabulary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new vocabulary filter that you can use to filter words, such as profane
    ///             words, from the output of a transcription job.</p>
    func createVocabularyFilter(input: CreateVocabularyFilterInput) async throws -> CreateVocabularyFilterOutputResponse
    {
        typealias createVocabularyFilterContinuation = CheckedContinuation<CreateVocabularyFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createVocabularyFilterContinuation) in
            createVocabularyFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a custom language model using its name.</p>
    func deleteLanguageModel(input: DeleteLanguageModelInput) async throws -> DeleteLanguageModelOutputResponse
    {
        typealias deleteLanguageModelContinuation = CheckedContinuation<DeleteLanguageModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLanguageModelContinuation) in
            deleteLanguageModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a transcription job generated by Amazon Transcribe Medical and any related information.</p>
    func deleteMedicalTranscriptionJob(input: DeleteMedicalTranscriptionJobInput) async throws -> DeleteMedicalTranscriptionJobOutputResponse
    {
        typealias deleteMedicalTranscriptionJobContinuation = CheckedContinuation<DeleteMedicalTranscriptionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMedicalTranscriptionJobContinuation) in
            deleteMedicalTranscriptionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a vocabulary from Amazon Transcribe Medical.</p>
    func deleteMedicalVocabulary(input: DeleteMedicalVocabularyInput) async throws -> DeleteMedicalVocabularyOutputResponse
    {
        typealias deleteMedicalVocabularyContinuation = CheckedContinuation<DeleteMedicalVocabularyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMedicalVocabularyContinuation) in
            deleteMedicalVocabulary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a previously submitted transcription job along with any other generated
    ///             results such as the transcription, models, and so on.</p>
    func deleteTranscriptionJob(input: DeleteTranscriptionJobInput) async throws -> DeleteTranscriptionJobOutputResponse
    {
        typealias deleteTranscriptionJobContinuation = CheckedContinuation<DeleteTranscriptionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTranscriptionJobContinuation) in
            deleteTranscriptionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a vocabulary from Amazon Transcribe. </p>
    func deleteVocabulary(input: DeleteVocabularyInput) async throws -> DeleteVocabularyOutputResponse
    {
        typealias deleteVocabularyContinuation = CheckedContinuation<DeleteVocabularyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVocabularyContinuation) in
            deleteVocabulary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a vocabulary filter.</p>
    func deleteVocabularyFilter(input: DeleteVocabularyFilterInput) async throws -> DeleteVocabularyFilterOutputResponse
    {
        typealias deleteVocabularyFilterContinuation = CheckedContinuation<DeleteVocabularyFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVocabularyFilterContinuation) in
            deleteVocabularyFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a single custom language model. Use this information to see
    ///             details about the language model in your AWS account. You can also see whether the base
    ///             language model used to create your custom language model has been updated. If Amazon Transcribe has
    ///             updated the base model, you can create a new custom language model using the updated
    ///             base model. If the language model wasn't created, you can use this operation to
    ///             understand why Amazon Transcribe couldn't create it. </p>
    func describeLanguageModel(input: DescribeLanguageModelInput) async throws -> DescribeLanguageModelOutputResponse
    {
        typealias describeLanguageModelContinuation = CheckedContinuation<DescribeLanguageModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeLanguageModelContinuation) in
            describeLanguageModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a transcription job from Amazon Transcribe Medical. To see the status of the
    ///             job, check the <code>TranscriptionJobStatus</code> field. If the status is
    ///                 <code>COMPLETED</code>, the job is finished. You find the results of the completed
    ///             job in the <code>TranscriptFileUri</code> field.</p>
    func getMedicalTranscriptionJob(input: GetMedicalTranscriptionJobInput) async throws -> GetMedicalTranscriptionJobOutputResponse
    {
        typealias getMedicalTranscriptionJobContinuation = CheckedContinuation<GetMedicalTranscriptionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMedicalTranscriptionJobContinuation) in
            getMedicalTranscriptionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a medical vocabulary.</p>
    func getMedicalVocabulary(input: GetMedicalVocabularyInput) async throws -> GetMedicalVocabularyOutputResponse
    {
        typealias getMedicalVocabularyContinuation = CheckedContinuation<GetMedicalVocabularyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMedicalVocabularyContinuation) in
            getMedicalVocabulary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a transcription job. To see the status of the job, check the
    ///                 <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>,
    ///             the job is finished and you can find the results at the location specified in the
    ///                 <code>TranscriptFileUri</code> field. If you enable content redaction, the redacted
    ///             transcript appears in <code>RedactedTranscriptFileUri</code>.</p>
    func getTranscriptionJob(input: GetTranscriptionJobInput) async throws -> GetTranscriptionJobOutputResponse
    {
        typealias getTranscriptionJobContinuation = CheckedContinuation<GetTranscriptionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTranscriptionJobContinuation) in
            getTranscriptionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a vocabulary. </p>
    func getVocabulary(input: GetVocabularyInput) async throws -> GetVocabularyOutputResponse
    {
        typealias getVocabularyContinuation = CheckedContinuation<GetVocabularyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVocabularyContinuation) in
            getVocabulary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a vocabulary filter.</p>
    func getVocabularyFilter(input: GetVocabularyFilterInput) async throws -> GetVocabularyFilterOutputResponse
    {
        typealias getVocabularyFilterContinuation = CheckedContinuation<GetVocabularyFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVocabularyFilterContinuation) in
            getVocabularyFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides more information about the custom language models you've created. You can use
    ///             the information in this list to find a specific custom language model. You can then use
    ///             the  operation to get more information about
    ///             it.</p>
    func listLanguageModels(input: ListLanguageModelsInput) async throws -> ListLanguageModelsOutputResponse
    {
        typealias listLanguageModelsContinuation = CheckedContinuation<ListLanguageModelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLanguageModelsContinuation) in
            listLanguageModels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists medical transcription jobs with a specified status or substring that matches
    ///             their names.</p>
    func listMedicalTranscriptionJobs(input: ListMedicalTranscriptionJobsInput) async throws -> ListMedicalTranscriptionJobsOutputResponse
    {
        typealias listMedicalTranscriptionJobsContinuation = CheckedContinuation<ListMedicalTranscriptionJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMedicalTranscriptionJobsContinuation) in
            listMedicalTranscriptionJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of vocabularies that match the specified criteria. If you don't enter a
    ///             value in any of the request parameters, returns the entire list of vocabularies.</p>
    func listMedicalVocabularies(input: ListMedicalVocabulariesInput) async throws -> ListMedicalVocabulariesOutputResponse
    {
        typealias listMedicalVocabulariesContinuation = CheckedContinuation<ListMedicalVocabulariesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMedicalVocabulariesContinuation) in
            listMedicalVocabularies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists transcription jobs with the specified status.</p>
    func listTranscriptionJobs(input: ListTranscriptionJobsInput) async throws -> ListTranscriptionJobsOutputResponse
    {
        typealias listTranscriptionJobsContinuation = CheckedContinuation<ListTranscriptionJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTranscriptionJobsContinuation) in
            listTranscriptionJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of vocabularies that match the specified criteria. If no criteria are
    ///             specified, returns the entire list of vocabularies.</p>
    func listVocabularies(input: ListVocabulariesInput) async throws -> ListVocabulariesOutputResponse
    {
        typealias listVocabulariesContinuation = CheckedContinuation<ListVocabulariesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listVocabulariesContinuation) in
            listVocabularies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about vocabulary filters.</p>
    func listVocabularyFilters(input: ListVocabularyFiltersInput) async throws -> ListVocabularyFiltersOutputResponse
    {
        typealias listVocabularyFiltersContinuation = CheckedContinuation<ListVocabularyFiltersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listVocabularyFiltersContinuation) in
            listVocabularyFilters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts a batch job to transcribe medical speech to text.</p>
    func startMedicalTranscriptionJob(input: StartMedicalTranscriptionJobInput) async throws -> StartMedicalTranscriptionJobOutputResponse
    {
        typealias startMedicalTranscriptionJobContinuation = CheckedContinuation<StartMedicalTranscriptionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startMedicalTranscriptionJobContinuation) in
            startMedicalTranscriptionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts an asynchronous job to transcribe speech to text.</p>
    func startTranscriptionJob(input: StartTranscriptionJobInput) async throws -> StartTranscriptionJobOutputResponse
    {
        typealias startTranscriptionJobContinuation = CheckedContinuation<StartTranscriptionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startTranscriptionJobContinuation) in
            startTranscriptionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a vocabulary with new values that you provide in a different text file from
    ///             the one you used to create the vocabulary. The <code>UpdateMedicalVocabulary</code>
    ///             operation overwrites all of the existing information with the values that you provide in
    ///             the request.</p>
    func updateMedicalVocabulary(input: UpdateMedicalVocabularyInput) async throws -> UpdateMedicalVocabularyOutputResponse
    {
        typealias updateMedicalVocabularyContinuation = CheckedContinuation<UpdateMedicalVocabularyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMedicalVocabularyContinuation) in
            updateMedicalVocabulary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing vocabulary with new values. The <code>UpdateVocabulary</code>
    ///             operation overwrites all of the existing information with the values that you provide in
    ///             the request. </p>
    func updateVocabulary(input: UpdateVocabularyInput) async throws -> UpdateVocabularyOutputResponse
    {
        typealias updateVocabularyContinuation = CheckedContinuation<UpdateVocabularyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateVocabularyContinuation) in
            updateVocabulary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a vocabulary filter with a new list of filtered words.</p>
    func updateVocabularyFilter(input: UpdateVocabularyFilterInput) async throws -> UpdateVocabularyFilterOutputResponse
    {
        typealias updateVocabularyFilterContinuation = CheckedContinuation<UpdateVocabularyFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateVocabularyFilterContinuation) in
            updateVocabularyFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
