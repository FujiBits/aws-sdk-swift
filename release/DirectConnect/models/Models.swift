// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

public struct AcceptDirectConnectGatewayAssociationProposalInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptDirectConnectGatewayAssociationProposalInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptDirectConnectGatewayAssociationProposalOutputError>
}

extension AcceptDirectConnectGatewayAssociationProposalInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptDirectConnectGatewayAssociationProposalInput(associatedGatewayOwnerAccount: \(Swift.String(describing: associatedGatewayOwnerAccount)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), overrideAllowedPrefixesToDirectConnectGateway: \(Swift.String(describing: overrideAllowedPrefixesToDirectConnectGateway)), proposalId: \(Swift.String(describing: proposalId)))"}
}

extension AcceptDirectConnectGatewayAssociationProposalInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedGatewayOwnerAccount
        case directConnectGatewayId
        case overrideAllowedPrefixesToDirectConnectGateway
        case proposalId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associatedGatewayOwnerAccount = associatedGatewayOwnerAccount {
            try encodeContainer.encode(associatedGatewayOwnerAccount, forKey: .associatedGatewayOwnerAccount)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let overrideAllowedPrefixesToDirectConnectGateway = overrideAllowedPrefixesToDirectConnectGateway {
            var overrideAllowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .overrideAllowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in overrideAllowedPrefixesToDirectConnectGateway {
                try overrideAllowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
        if let proposalId = proposalId {
            try encodeContainer.encode(proposalId, forKey: .proposalId)
        }
    }
}

public struct AcceptDirectConnectGatewayAssociationProposalInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptDirectConnectGatewayAssociationProposalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptDirectConnectGatewayAssociationProposalOutputError>
}

public struct AcceptDirectConnectGatewayAssociationProposalInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptDirectConnectGatewayAssociationProposalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptDirectConnectGatewayAssociationProposalOutputError>
}

public struct AcceptDirectConnectGatewayAssociationProposalInput: Swift.Equatable {
    /// The ID of the account that owns the virtual private gateway or transit gateway.
    /// This member is required.
    public let associatedGatewayOwnerAccount: Swift.String?
    /// The ID of the Direct Connect gateway.
    /// This member is required.
    public let directConnectGatewayId: Swift.String?
    /// Overrides the Amazon VPC prefixes advertised to the Direct Connect gateway.
    ///          For information about how to set the prefixes, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/multi-account-associate-vgw.html#allowed-prefixes">Allowed Prefixes in the Direct Connect User Guide.
    public let overrideAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
    /// The ID of the request proposal.
    /// This member is required.
    public let proposalId: Swift.String?

    public init (
        associatedGatewayOwnerAccount: Swift.String? = nil,
        directConnectGatewayId: Swift.String? = nil,
        overrideAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
        proposalId: Swift.String? = nil
    )
    {
        self.associatedGatewayOwnerAccount = associatedGatewayOwnerAccount
        self.directConnectGatewayId = directConnectGatewayId
        self.overrideAllowedPrefixesToDirectConnectGateway = overrideAllowedPrefixesToDirectConnectGateway
        self.proposalId = proposalId
    }
}

struct AcceptDirectConnectGatewayAssociationProposalInputBody: Swift.Equatable {
    public let directConnectGatewayId: Swift.String?
    public let proposalId: Swift.String?
    public let associatedGatewayOwnerAccount: Swift.String?
    public let overrideAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
}

extension AcceptDirectConnectGatewayAssociationProposalInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedGatewayOwnerAccount
        case directConnectGatewayId
        case overrideAllowedPrefixesToDirectConnectGateway
        case proposalId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let proposalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
        let associatedGatewayOwnerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedGatewayOwnerAccount)
        associatedGatewayOwnerAccount = associatedGatewayOwnerAccountDecoded
        let overrideAllowedPrefixesToDirectConnectGatewayContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .overrideAllowedPrefixesToDirectConnectGateway)
        var overrideAllowedPrefixesToDirectConnectGatewayDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let overrideAllowedPrefixesToDirectConnectGatewayContainer = overrideAllowedPrefixesToDirectConnectGatewayContainer {
            overrideAllowedPrefixesToDirectConnectGatewayDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in overrideAllowedPrefixesToDirectConnectGatewayContainer {
                if let structure0 = structure0 {
                    overrideAllowedPrefixesToDirectConnectGatewayDecoded0?.append(structure0)
                }
            }
        }
        overrideAllowedPrefixesToDirectConnectGateway = overrideAllowedPrefixesToDirectConnectGatewayDecoded0
    }
}

extension AcceptDirectConnectGatewayAssociationProposalOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptDirectConnectGatewayAssociationProposalOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AcceptDirectConnectGatewayAssociationProposalOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptDirectConnectGatewayAssociationProposalOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptDirectConnectGatewayAssociationProposalOutputResponse(directConnectGatewayAssociation: \(Swift.String(describing: directConnectGatewayAssociation)))"}
}

extension AcceptDirectConnectGatewayAssociationProposalOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AcceptDirectConnectGatewayAssociationProposalOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGatewayAssociation = output.directConnectGatewayAssociation
        } else {
            self.directConnectGatewayAssociation = nil
        }
    }
}

public struct AcceptDirectConnectGatewayAssociationProposalOutputResponse: Swift.Equatable {
    /// Information about an association between a Direct Connect gateway and a virtual private gateway or transit gateway.
    public let directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation?

    public init (
        directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation? = nil
    )
    {
        self.directConnectGatewayAssociation = directConnectGatewayAssociation
    }
}

struct AcceptDirectConnectGatewayAssociationProposalOutputResponseBody: Swift.Equatable {
    public let directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation?
}

extension AcceptDirectConnectGatewayAssociationProposalOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayAssociation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayAssociationDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGatewayAssociation.self, forKey: .directConnectGatewayAssociation)
        directConnectGatewayAssociation = directConnectGatewayAssociationDecoded
    }
}

extension DirectConnectClientTypes {
    public enum AddressFamily: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [AddressFamily] {
            return [
                .ipv4,
                .ipv6,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ipv4: return "ipv4"
            case .ipv6: return "ipv6"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AddressFamily(rawValue: rawValue) ?? AddressFamily.sdkUnknown(rawValue)
        }
    }
}

public struct AllocateConnectionOnInterconnectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateConnectionOnInterconnectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateConnectionOnInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateConnectionOnInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateConnectionOnInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateConnectionOnInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateConnectionOnInterconnectOutputError>
}

extension AllocateConnectionOnInterconnectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocateConnectionOnInterconnectInput(bandwidth: \(Swift.String(describing: bandwidth)), connectionName: \(Swift.String(describing: connectionName)), interconnectId: \(Swift.String(describing: interconnectId)), ownerAccount: \(Swift.String(describing: ownerAccount)), vlan: \(Swift.String(describing: vlan)))"}
}

extension AllocateConnectionOnInterconnectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bandwidth
        case connectionName
        case interconnectId
        case ownerAccount
        case vlan
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bandwidth = bandwidth {
            try encodeContainer.encode(bandwidth, forKey: .bandwidth)
        }
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let interconnectId = interconnectId {
            try encodeContainer.encode(interconnectId, forKey: .interconnectId)
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if vlan != 0 {
            try encodeContainer.encode(vlan, forKey: .vlan)
        }
    }
}

public struct AllocateConnectionOnInterconnectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateConnectionOnInterconnectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateConnectionOnInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateConnectionOnInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateConnectionOnInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateConnectionOnInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateConnectionOnInterconnectOutputError>
}

public struct AllocateConnectionOnInterconnectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateConnectionOnInterconnectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateConnectionOnInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateConnectionOnInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateConnectionOnInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateConnectionOnInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateConnectionOnInterconnectOutputError>
}

public struct AllocateConnectionOnInterconnectInput: Swift.Equatable {
    /// The bandwidth of the connection. The possible values are 50Mbps, 100Mbps, 200Mbps,
    ///       300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, and 10Gbps. Note that only those Direct Connect Partners
    ///       who have met specific requirements
    ///     are allowed to create a 1Gbps, 2Gbps, 5Gbps or 10Gbps hosted connection.
    /// This member is required.
    public let bandwidth: Swift.String?
    /// The name of the provisioned connection.
    /// This member is required.
    public let connectionName: Swift.String?
    /// The ID of the interconnect on which the connection will be provisioned.
    /// This member is required.
    public let interconnectId: Swift.String?
    /// The ID of the account of the customer for whom the connection will be provisioned.
    /// This member is required.
    public let ownerAccount: Swift.String?
    /// The dedicated VLAN provisioned to the connection.
    /// This member is required.
    public let vlan: Swift.Int

    public init (
        bandwidth: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        interconnectId: Swift.String? = nil,
        ownerAccount: Swift.String? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.bandwidth = bandwidth
        self.connectionName = connectionName
        self.interconnectId = interconnectId
        self.ownerAccount = ownerAccount
        self.vlan = vlan
    }
}

struct AllocateConnectionOnInterconnectInputBody: Swift.Equatable {
    public let bandwidth: Swift.String?
    public let connectionName: Swift.String?
    public let ownerAccount: Swift.String?
    public let interconnectId: Swift.String?
    public let vlan: Swift.Int
}

extension AllocateConnectionOnInterconnectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bandwidth
        case connectionName
        case interconnectId
        case ownerAccount
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let interconnectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectId)
        interconnectId = interconnectIdDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
    }
}

extension AllocateConnectionOnInterconnectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AllocateConnectionOnInterconnectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AllocateConnectionOnInterconnectOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AllocateConnectionOnInterconnectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocateConnectionOnInterconnectOutputResponse(awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bandwidth: \(Swift.String(describing: bandwidth)), connectionId: \(Swift.String(describing: connectionId)), connectionName: \(Swift.String(describing: connectionName)), connectionState: \(Swift.String(describing: connectionState)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), loaIssueTime: \(Swift.String(describing: loaIssueTime)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), ownerAccount: \(Swift.String(describing: ownerAccount)), partnerName: \(Swift.String(describing: partnerName)), portEncryptionStatus: \(Swift.String(describing: portEncryptionStatus)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)), vlan: \(Swift.String(describing: vlan)))"}
}

extension AllocateConnectionOnInterconnectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AllocateConnectionOnInterconnectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bandwidth = output.bandwidth
            self.connectionId = output.connectionId
            self.connectionName = output.connectionName
            self.connectionState = output.connectionState
            self.encryptionMode = output.encryptionMode
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.loaIssueTime = output.loaIssueTime
            self.location = output.location
            self.macSecCapable = output.macSecCapable
            self.macSecKeys = output.macSecKeys
            self.ownerAccount = output.ownerAccount
            self.partnerName = output.partnerName
            self.portEncryptionStatus = output.portEncryptionStatus
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
            self.vlan = output.vlan
        } else {
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bandwidth = nil
            self.connectionId = nil
            self.connectionName = nil
            self.connectionState = nil
            self.encryptionMode = nil
            self.hasLogicalRedundancy = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.loaIssueTime = nil
            self.location = nil
            self.macSecCapable = nil
            self.macSecKeys = nil
            self.ownerAccount = nil
            self.partnerName = nil
            self.portEncryptionStatus = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
            self.vlan = 0
        }
    }
}

/// Information about an Direct Connect connection.
public struct AllocateConnectionOnInterconnectOutputResponse: Swift.Equatable {
    /// The Direct Connect endpoint on which the physical connection terminates.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The bandwidth of the connection.
    public let bandwidth: Swift.String?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The name of the connection.
    public let connectionName: Swift.String?
    /// The state of the connection. The following are the possible values:
    ///
    ///
    ///
    ///                   ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.
    ///
    ///
    ///
    ///                   requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    ///
    ///
    ///                   pending: The connection has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is up and the connection is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The connection is being deleted.
    ///
    ///
    ///
    ///                   deleted: The connection has been deleted.
    ///
    ///
    ///
    ///                   rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.
    ///
    ///
    ///
    ///                   unknown: The state of the connection is not available.
    ///
    ///
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    /// The MAC Security (MACsec) connection encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?
    /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The time of the most recent call to DescribeLoa for this connection.
    public let loaIssueTime: ClientRuntime.Date?
    /// The location of the connection.
    public let location: Swift.String?
    /// Indicates whether the connection supports MAC Security (MACsec).
    public let macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the connection.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The ID of the account that owns the connection.
    public let ownerAccount: Swift.String?
    /// The name of the Direct Connect service provider associated with the connection.
    public let partnerName: Swift.String?
    /// The MAC Security (MACsec) port link status of the connection.
    ///          The valid values are Encryption Up, which means that there is an active Connection Key Name, or Encryption Down.
    public let portEncryptionStatus: Swift.String?
    /// The name of the service provider associated with the connection.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the connection.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bandwidth: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        connectionState: DirectConnectClientTypes.ConnectionState? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        loaIssueTime: ClientRuntime.Date? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        ownerAccount: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        portEncryptionStatus: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bandwidth = bandwidth
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.connectionState = connectionState
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.ownerAccount = ownerAccount
        self.partnerName = partnerName
        self.portEncryptionStatus = portEncryptionStatus
        self.providerName = providerName
        self.region = region
        self.tags = tags
        self.vlan = vlan
    }
}

struct AllocateConnectionOnInterconnectOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let connectionId: Swift.String?
    public let connectionName: Swift.String?
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    public let region: Swift.String?
    public let location: Swift.String?
    public let bandwidth: Swift.String?
    public let vlan: Swift.Int
    public let partnerName: Swift.String?
    public let loaIssueTime: ClientRuntime.Date?
    public let lagId: Swift.String?
    public let awsDevice: Swift.String?
    public let jumboFrameCapable: Swift.Bool?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let macSecCapable: Swift.Bool?
    public let portEncryptionStatus: Swift.String?
    public let encryptionMode: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension AllocateConnectionOnInterconnectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case connectionId
        case connectionName
        case connectionState
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case macSecCapable
        case macSecKeys
        case ownerAccount
        case partnerName
        case portEncryptionStatus
        case providerName
        case region
        case tags
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let portEncryptionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portEncryptionStatus)
        portEncryptionStatus = portEncryptionStatusDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct AllocateHostedConnectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateHostedConnectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateHostedConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateHostedConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateHostedConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateHostedConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateHostedConnectionOutputError>
}

extension AllocateHostedConnectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocateHostedConnectionInput(bandwidth: \(Swift.String(describing: bandwidth)), connectionId: \(Swift.String(describing: connectionId)), connectionName: \(Swift.String(describing: connectionName)), ownerAccount: \(Swift.String(describing: ownerAccount)), tags: \(Swift.String(describing: tags)), vlan: \(Swift.String(describing: vlan)))"}
}

extension AllocateHostedConnectionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bandwidth
        case connectionId
        case connectionName
        case ownerAccount
        case tags
        case vlan
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bandwidth = bandwidth {
            try encodeContainer.encode(bandwidth, forKey: .bandwidth)
        }
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if vlan != 0 {
            try encodeContainer.encode(vlan, forKey: .vlan)
        }
    }
}

public struct AllocateHostedConnectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateHostedConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateHostedConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateHostedConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateHostedConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateHostedConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateHostedConnectionOutputError>
}

public struct AllocateHostedConnectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateHostedConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateHostedConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateHostedConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateHostedConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateHostedConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateHostedConnectionOutputError>
}

public struct AllocateHostedConnectionInput: Swift.Equatable {
    /// The bandwidth of the connection. The possible values are 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, and 10Gbps. Note that only those Direct Connect Partners who have met specific requirements are allowed to create a 1Gbps, 2Gbps, 5Gbps or 10Gbps hosted connection.
    /// This member is required.
    public let bandwidth: Swift.String?
    /// The ID of the interconnect or LAG.
    /// This member is required.
    public let connectionId: Swift.String?
    /// The name of the hosted connection.
    /// This member is required.
    public let connectionName: Swift.String?
    /// The ID of the account ID of the customer for the connection.
    /// This member is required.
    public let ownerAccount: Swift.String?
    /// The tags associated with the connection.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The dedicated VLAN provisioned to the hosted connection.
    /// This member is required.
    public let vlan: Swift.Int

    public init (
        bandwidth: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        ownerAccount: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.bandwidth = bandwidth
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.ownerAccount = ownerAccount
        self.tags = tags
        self.vlan = vlan
    }
}

struct AllocateHostedConnectionInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let ownerAccount: Swift.String?
    public let bandwidth: Swift.String?
    public let connectionName: Swift.String?
    public let vlan: Swift.Int
    public let tags: [DirectConnectClientTypes.Tag]?
}

extension AllocateHostedConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bandwidth
        case connectionId
        case connectionName
        case ownerAccount
        case tags
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension AllocateHostedConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AllocateHostedConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateTagKeysException" : self = .duplicateTagKeysException(try DuplicateTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AllocateHostedConnectionOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case duplicateTagKeysException(DuplicateTagKeysException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AllocateHostedConnectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocateHostedConnectionOutputResponse(awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bandwidth: \(Swift.String(describing: bandwidth)), connectionId: \(Swift.String(describing: connectionId)), connectionName: \(Swift.String(describing: connectionName)), connectionState: \(Swift.String(describing: connectionState)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), loaIssueTime: \(Swift.String(describing: loaIssueTime)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), ownerAccount: \(Swift.String(describing: ownerAccount)), partnerName: \(Swift.String(describing: partnerName)), portEncryptionStatus: \(Swift.String(describing: portEncryptionStatus)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)), vlan: \(Swift.String(describing: vlan)))"}
}

extension AllocateHostedConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AllocateHostedConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bandwidth = output.bandwidth
            self.connectionId = output.connectionId
            self.connectionName = output.connectionName
            self.connectionState = output.connectionState
            self.encryptionMode = output.encryptionMode
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.loaIssueTime = output.loaIssueTime
            self.location = output.location
            self.macSecCapable = output.macSecCapable
            self.macSecKeys = output.macSecKeys
            self.ownerAccount = output.ownerAccount
            self.partnerName = output.partnerName
            self.portEncryptionStatus = output.portEncryptionStatus
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
            self.vlan = output.vlan
        } else {
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bandwidth = nil
            self.connectionId = nil
            self.connectionName = nil
            self.connectionState = nil
            self.encryptionMode = nil
            self.hasLogicalRedundancy = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.loaIssueTime = nil
            self.location = nil
            self.macSecCapable = nil
            self.macSecKeys = nil
            self.ownerAccount = nil
            self.partnerName = nil
            self.portEncryptionStatus = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
            self.vlan = 0
        }
    }
}

/// Information about an Direct Connect connection.
public struct AllocateHostedConnectionOutputResponse: Swift.Equatable {
    /// The Direct Connect endpoint on which the physical connection terminates.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The bandwidth of the connection.
    public let bandwidth: Swift.String?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The name of the connection.
    public let connectionName: Swift.String?
    /// The state of the connection. The following are the possible values:
    ///
    ///
    ///
    ///                   ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.
    ///
    ///
    ///
    ///                   requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    ///
    ///
    ///                   pending: The connection has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is up and the connection is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The connection is being deleted.
    ///
    ///
    ///
    ///                   deleted: The connection has been deleted.
    ///
    ///
    ///
    ///                   rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.
    ///
    ///
    ///
    ///                   unknown: The state of the connection is not available.
    ///
    ///
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    /// The MAC Security (MACsec) connection encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?
    /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The time of the most recent call to DescribeLoa for this connection.
    public let loaIssueTime: ClientRuntime.Date?
    /// The location of the connection.
    public let location: Swift.String?
    /// Indicates whether the connection supports MAC Security (MACsec).
    public let macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the connection.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The ID of the account that owns the connection.
    public let ownerAccount: Swift.String?
    /// The name of the Direct Connect service provider associated with the connection.
    public let partnerName: Swift.String?
    /// The MAC Security (MACsec) port link status of the connection.
    ///          The valid values are Encryption Up, which means that there is an active Connection Key Name, or Encryption Down.
    public let portEncryptionStatus: Swift.String?
    /// The name of the service provider associated with the connection.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the connection.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bandwidth: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        connectionState: DirectConnectClientTypes.ConnectionState? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        loaIssueTime: ClientRuntime.Date? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        ownerAccount: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        portEncryptionStatus: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bandwidth = bandwidth
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.connectionState = connectionState
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.ownerAccount = ownerAccount
        self.partnerName = partnerName
        self.portEncryptionStatus = portEncryptionStatus
        self.providerName = providerName
        self.region = region
        self.tags = tags
        self.vlan = vlan
    }
}

struct AllocateHostedConnectionOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let connectionId: Swift.String?
    public let connectionName: Swift.String?
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    public let region: Swift.String?
    public let location: Swift.String?
    public let bandwidth: Swift.String?
    public let vlan: Swift.Int
    public let partnerName: Swift.String?
    public let loaIssueTime: ClientRuntime.Date?
    public let lagId: Swift.String?
    public let awsDevice: Swift.String?
    public let jumboFrameCapable: Swift.Bool?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let macSecCapable: Swift.Bool?
    public let portEncryptionStatus: Swift.String?
    public let encryptionMode: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension AllocateHostedConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case connectionId
        case connectionName
        case connectionState
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case macSecCapable
        case macSecKeys
        case ownerAccount
        case partnerName
        case portEncryptionStatus
        case providerName
        case region
        case tags
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let portEncryptionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portEncryptionStatus)
        portEncryptionStatus = portEncryptionStatusDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct AllocatePrivateVirtualInterfaceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocatePrivateVirtualInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocatePrivateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocatePrivateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocatePrivateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocatePrivateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocatePrivateVirtualInterfaceOutputError>
}

extension AllocatePrivateVirtualInterfaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocatePrivateVirtualInterfaceInput(connectionId: \(Swift.String(describing: connectionId)), newPrivateVirtualInterfaceAllocation: \(Swift.String(describing: newPrivateVirtualInterfaceAllocation)), ownerAccount: \(Swift.String(describing: ownerAccount)))"}
}

extension AllocatePrivateVirtualInterfaceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newPrivateVirtualInterfaceAllocation
        case ownerAccount
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let newPrivateVirtualInterfaceAllocation = newPrivateVirtualInterfaceAllocation {
            try encodeContainer.encode(newPrivateVirtualInterfaceAllocation, forKey: .newPrivateVirtualInterfaceAllocation)
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
    }
}

public struct AllocatePrivateVirtualInterfaceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocatePrivateVirtualInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocatePrivateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocatePrivateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocatePrivateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocatePrivateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocatePrivateVirtualInterfaceOutputError>
}

public struct AllocatePrivateVirtualInterfaceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocatePrivateVirtualInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocatePrivateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocatePrivateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocatePrivateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocatePrivateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocatePrivateVirtualInterfaceOutputError>
}

public struct AllocatePrivateVirtualInterfaceInput: Swift.Equatable {
    /// The ID of the connection on which the private virtual interface is provisioned.
    /// This member is required.
    public let connectionId: Swift.String?
    /// Information about the private virtual interface.
    /// This member is required.
    public let newPrivateVirtualInterfaceAllocation: DirectConnectClientTypes.NewPrivateVirtualInterfaceAllocation?
    /// The ID of the account that owns the virtual private interface.
    /// This member is required.
    public let ownerAccount: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        newPrivateVirtualInterfaceAllocation: DirectConnectClientTypes.NewPrivateVirtualInterfaceAllocation? = nil,
        ownerAccount: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.newPrivateVirtualInterfaceAllocation = newPrivateVirtualInterfaceAllocation
        self.ownerAccount = ownerAccount
    }
}

struct AllocatePrivateVirtualInterfaceInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let ownerAccount: Swift.String?
    public let newPrivateVirtualInterfaceAllocation: DirectConnectClientTypes.NewPrivateVirtualInterfaceAllocation?
}

extension AllocatePrivateVirtualInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newPrivateVirtualInterfaceAllocation
        case ownerAccount
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let newPrivateVirtualInterfaceAllocationDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.NewPrivateVirtualInterfaceAllocation.self, forKey: .newPrivateVirtualInterfaceAllocation)
        newPrivateVirtualInterfaceAllocation = newPrivateVirtualInterfaceAllocationDecoded
    }
}

extension AllocatePrivateVirtualInterfaceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AllocatePrivateVirtualInterfaceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateTagKeysException" : self = .duplicateTagKeysException(try DuplicateTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AllocatePrivateVirtualInterfaceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case duplicateTagKeysException(DuplicateTagKeysException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AllocatePrivateVirtualInterfaceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocatePrivateVirtualInterfaceOutputResponse(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), amazonSideAsn: \(Swift.String(describing: amazonSideAsn)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bgpPeers: \(Swift.String(describing: bgpPeers)), connectionId: \(Swift.String(describing: connectionId)), customerAddress: \(Swift.String(describing: customerAddress)), customerRouterConfig: \(Swift.String(describing: customerRouterConfig)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), location: \(Swift.String(describing: location)), mtu: \(Swift.String(describing: mtu)), ownerAccount: \(Swift.String(describing: ownerAccount)), region: \(Swift.String(describing: region)), routeFilterPrefixes: \(Swift.String(describing: routeFilterPrefixes)), tags: \(Swift.String(describing: tags)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), virtualInterfaceState: \(Swift.String(describing: virtualInterfaceState)), virtualInterfaceType: \(Swift.String(describing: virtualInterfaceType)), vlan: \(Swift.String(describing: vlan)))"}
}

extension AllocatePrivateVirtualInterfaceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AllocatePrivateVirtualInterfaceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addressFamily = output.addressFamily
            self.amazonAddress = output.amazonAddress
            self.amazonSideAsn = output.amazonSideAsn
            self.asn = output.asn
            self.authKey = output.authKey
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bgpPeers = output.bgpPeers
            self.connectionId = output.connectionId
            self.customerAddress = output.customerAddress
            self.customerRouterConfig = output.customerRouterConfig
            self.directConnectGatewayId = output.directConnectGatewayId
            self.jumboFrameCapable = output.jumboFrameCapable
            self.location = output.location
            self.mtu = output.mtu
            self.ownerAccount = output.ownerAccount
            self.region = output.region
            self.routeFilterPrefixes = output.routeFilterPrefixes
            self.tags = output.tags
            self.virtualGatewayId = output.virtualGatewayId
            self.virtualInterfaceId = output.virtualInterfaceId
            self.virtualInterfaceName = output.virtualInterfaceName
            self.virtualInterfaceState = output.virtualInterfaceState
            self.virtualInterfaceType = output.virtualInterfaceType
            self.vlan = output.vlan
        } else {
            self.addressFamily = nil
            self.amazonAddress = nil
            self.amazonSideAsn = nil
            self.asn = 0
            self.authKey = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bgpPeers = nil
            self.connectionId = nil
            self.customerAddress = nil
            self.customerRouterConfig = nil
            self.directConnectGatewayId = nil
            self.jumboFrameCapable = nil
            self.location = nil
            self.mtu = nil
            self.ownerAccount = nil
            self.region = nil
            self.routeFilterPrefixes = nil
            self.tags = nil
            self.virtualGatewayId = nil
            self.virtualInterfaceId = nil
            self.virtualInterfaceName = nil
            self.virtualInterfaceState = nil
            self.virtualInterfaceType = nil
            self.vlan = 0
        }
    }
}

/// Information about a virtual interface.
public struct AllocatePrivateVirtualInterfaceOutputResponse: Swift.Equatable {
    /// The address family for the BGP peer.
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    /// The IP address assigned to the Amazon interface.
    public let amazonAddress: Swift.String?
    /// The autonomous system number (ASN) for the Amazon side of the connection.
    public let amazonSideAsn: Swift.Int?
    /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
    ///          The valid values are 1-2147483647.
    public let asn: Swift.Int
    /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
    public let authKey: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The BGP peers configured on this virtual interface.
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The IP address assigned to the customer interface.
    public let customerAddress: Swift.String?
    /// The customer router configuration.
    public let customerRouterConfig: Swift.String?
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The location of the connection.
    public let location: Swift.String?
    /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
    public let mtu: Swift.Int?
    /// The ID of the account that owns the virtual interface.
    public let ownerAccount: Swift.String?
    /// The Region where the virtual interface is located.
    public let region: Swift.String?
    /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    /// The tags associated with the virtual interface.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
    public let virtualGatewayId: Swift.String?
    /// The ID of the virtual interface.
    public let virtualInterfaceId: Swift.String?
    /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
    public let virtualInterfaceName: Swift.String?
    /// The state of the virtual interface. The following are the possible values:
    ///
    ///
    ///
    ///                   confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.
    ///
    ///
    ///
    ///                   verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.
    ///
    ///
    ///
    ///                   pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.
    ///
    ///
    ///
    ///                   available: A virtual interface that is able to forward traffic.
    ///
    ///
    ///
    ///                   down: A virtual interface that is BGP down.
    ///
    ///
    ///
    ///                   deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.
    ///
    ///
    ///
    ///                   deleted: A virtual interface that cannot forward traffic.
    ///
    ///
    ///
    ///                   rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.
    ///
    ///
    ///
    ///                   unknown: The state of the virtual interface is not available.
    ///
    ///
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    /// The type of virtual interface. The possible values are private and public.
    public let virtualInterfaceType: Swift.String?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
        amazonAddress: Swift.String? = nil,
        amazonSideAsn: Swift.Int? = nil,
        asn: Swift.Int = 0,
        authKey: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bgpPeers: [DirectConnectClientTypes.BGPPeer]? = nil,
        connectionId: Swift.String? = nil,
        customerAddress: Swift.String? = nil,
        customerRouterConfig: Swift.String? = nil,
        directConnectGatewayId: Swift.String? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        location: Swift.String? = nil,
        mtu: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        region: Swift.String? = nil,
        routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        virtualGatewayId: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil,
        virtualInterfaceName: Swift.String? = nil,
        virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState? = nil,
        virtualInterfaceType: Swift.String? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.addressFamily = addressFamily
        self.amazonAddress = amazonAddress
        self.amazonSideAsn = amazonSideAsn
        self.asn = asn
        self.authKey = authKey
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bgpPeers = bgpPeers
        self.connectionId = connectionId
        self.customerAddress = customerAddress
        self.customerRouterConfig = customerRouterConfig
        self.directConnectGatewayId = directConnectGatewayId
        self.jumboFrameCapable = jumboFrameCapable
        self.location = location
        self.mtu = mtu
        self.ownerAccount = ownerAccount
        self.region = region
        self.routeFilterPrefixes = routeFilterPrefixes
        self.tags = tags
        self.virtualGatewayId = virtualGatewayId
        self.virtualInterfaceId = virtualInterfaceId
        self.virtualInterfaceName = virtualInterfaceName
        self.virtualInterfaceState = virtualInterfaceState
        self.virtualInterfaceType = virtualInterfaceType
        self.vlan = vlan
    }
}

struct AllocatePrivateVirtualInterfaceOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let virtualInterfaceId: Swift.String?
    public let location: Swift.String?
    public let connectionId: Swift.String?
    public let virtualInterfaceType: Swift.String?
    public let virtualInterfaceName: Swift.String?
    public let vlan: Swift.Int
    public let asn: Swift.Int
    public let amazonSideAsn: Swift.Int?
    public let authKey: Swift.String?
    public let amazonAddress: Swift.String?
    public let customerAddress: Swift.String?
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    public let customerRouterConfig: Swift.String?
    public let mtu: Swift.Int?
    public let jumboFrameCapable: Swift.Bool?
    public let virtualGatewayId: Swift.String?
    public let directConnectGatewayId: Swift.String?
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    public let region: Swift.String?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let tags: [DirectConnectClientTypes.Tag]?
}

extension AllocatePrivateVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case amazonSideAsn
        case asn
        case authKey
        case awsDeviceV2
        case awsLogicalDeviceId
        case bgpPeers
        case connectionId
        case customerAddress
        case customerRouterConfig
        case directConnectGatewayId
        case jumboFrameCapable
        case location
        case mtu
        case ownerAccount
        case region
        case routeFilterPrefixes
        case tags
        case virtualGatewayId
        case virtualInterfaceId
        case virtualInterfaceName
        case virtualInterfaceState
        case virtualInterfaceType
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let virtualInterfaceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceType)
        virtualInterfaceType = virtualInterfaceTypeDecoded
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
        let customerRouterConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerRouterConfig)
        customerRouterConfig = customerRouterConfigDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let routeFilterPrefixesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .routeFilterPrefixes)
        var routeFilterPrefixesDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let routeFilterPrefixesContainer = routeFilterPrefixesContainer {
            routeFilterPrefixesDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in routeFilterPrefixesContainer {
                if let structure0 = structure0 {
                    routeFilterPrefixesDecoded0?.append(structure0)
                }
            }
        }
        routeFilterPrefixes = routeFilterPrefixesDecoded0
        let bgpPeersContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.BGPPeer?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[DirectConnectClientTypes.BGPPeer]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [DirectConnectClientTypes.BGPPeer]()
            for structure0 in bgpPeersContainer {
                if let structure0 = structure0 {
                    bgpPeersDecoded0?.append(structure0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public struct AllocatePublicVirtualInterfaceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocatePublicVirtualInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocatePublicVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocatePublicVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocatePublicVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocatePublicVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocatePublicVirtualInterfaceOutputError>
}

extension AllocatePublicVirtualInterfaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocatePublicVirtualInterfaceInput(connectionId: \(Swift.String(describing: connectionId)), newPublicVirtualInterfaceAllocation: \(Swift.String(describing: newPublicVirtualInterfaceAllocation)), ownerAccount: \(Swift.String(describing: ownerAccount)))"}
}

extension AllocatePublicVirtualInterfaceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newPublicVirtualInterfaceAllocation
        case ownerAccount
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let newPublicVirtualInterfaceAllocation = newPublicVirtualInterfaceAllocation {
            try encodeContainer.encode(newPublicVirtualInterfaceAllocation, forKey: .newPublicVirtualInterfaceAllocation)
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
    }
}

public struct AllocatePublicVirtualInterfaceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocatePublicVirtualInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocatePublicVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocatePublicVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocatePublicVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocatePublicVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocatePublicVirtualInterfaceOutputError>
}

public struct AllocatePublicVirtualInterfaceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocatePublicVirtualInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocatePublicVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocatePublicVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocatePublicVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocatePublicVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocatePublicVirtualInterfaceOutputError>
}

public struct AllocatePublicVirtualInterfaceInput: Swift.Equatable {
    /// The ID of the connection on which the public virtual interface is provisioned.
    /// This member is required.
    public let connectionId: Swift.String?
    /// Information about the public virtual interface.
    /// This member is required.
    public let newPublicVirtualInterfaceAllocation: DirectConnectClientTypes.NewPublicVirtualInterfaceAllocation?
    /// The ID of the account that owns the public virtual interface.
    /// This member is required.
    public let ownerAccount: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        newPublicVirtualInterfaceAllocation: DirectConnectClientTypes.NewPublicVirtualInterfaceAllocation? = nil,
        ownerAccount: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.newPublicVirtualInterfaceAllocation = newPublicVirtualInterfaceAllocation
        self.ownerAccount = ownerAccount
    }
}

struct AllocatePublicVirtualInterfaceInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let ownerAccount: Swift.String?
    public let newPublicVirtualInterfaceAllocation: DirectConnectClientTypes.NewPublicVirtualInterfaceAllocation?
}

extension AllocatePublicVirtualInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newPublicVirtualInterfaceAllocation
        case ownerAccount
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let newPublicVirtualInterfaceAllocationDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.NewPublicVirtualInterfaceAllocation.self, forKey: .newPublicVirtualInterfaceAllocation)
        newPublicVirtualInterfaceAllocation = newPublicVirtualInterfaceAllocationDecoded
    }
}

extension AllocatePublicVirtualInterfaceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AllocatePublicVirtualInterfaceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateTagKeysException" : self = .duplicateTagKeysException(try DuplicateTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AllocatePublicVirtualInterfaceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case duplicateTagKeysException(DuplicateTagKeysException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AllocatePublicVirtualInterfaceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocatePublicVirtualInterfaceOutputResponse(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), amazonSideAsn: \(Swift.String(describing: amazonSideAsn)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bgpPeers: \(Swift.String(describing: bgpPeers)), connectionId: \(Swift.String(describing: connectionId)), customerAddress: \(Swift.String(describing: customerAddress)), customerRouterConfig: \(Swift.String(describing: customerRouterConfig)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), location: \(Swift.String(describing: location)), mtu: \(Swift.String(describing: mtu)), ownerAccount: \(Swift.String(describing: ownerAccount)), region: \(Swift.String(describing: region)), routeFilterPrefixes: \(Swift.String(describing: routeFilterPrefixes)), tags: \(Swift.String(describing: tags)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), virtualInterfaceState: \(Swift.String(describing: virtualInterfaceState)), virtualInterfaceType: \(Swift.String(describing: virtualInterfaceType)), vlan: \(Swift.String(describing: vlan)))"}
}

extension AllocatePublicVirtualInterfaceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AllocatePublicVirtualInterfaceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addressFamily = output.addressFamily
            self.amazonAddress = output.amazonAddress
            self.amazonSideAsn = output.amazonSideAsn
            self.asn = output.asn
            self.authKey = output.authKey
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bgpPeers = output.bgpPeers
            self.connectionId = output.connectionId
            self.customerAddress = output.customerAddress
            self.customerRouterConfig = output.customerRouterConfig
            self.directConnectGatewayId = output.directConnectGatewayId
            self.jumboFrameCapable = output.jumboFrameCapable
            self.location = output.location
            self.mtu = output.mtu
            self.ownerAccount = output.ownerAccount
            self.region = output.region
            self.routeFilterPrefixes = output.routeFilterPrefixes
            self.tags = output.tags
            self.virtualGatewayId = output.virtualGatewayId
            self.virtualInterfaceId = output.virtualInterfaceId
            self.virtualInterfaceName = output.virtualInterfaceName
            self.virtualInterfaceState = output.virtualInterfaceState
            self.virtualInterfaceType = output.virtualInterfaceType
            self.vlan = output.vlan
        } else {
            self.addressFamily = nil
            self.amazonAddress = nil
            self.amazonSideAsn = nil
            self.asn = 0
            self.authKey = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bgpPeers = nil
            self.connectionId = nil
            self.customerAddress = nil
            self.customerRouterConfig = nil
            self.directConnectGatewayId = nil
            self.jumboFrameCapable = nil
            self.location = nil
            self.mtu = nil
            self.ownerAccount = nil
            self.region = nil
            self.routeFilterPrefixes = nil
            self.tags = nil
            self.virtualGatewayId = nil
            self.virtualInterfaceId = nil
            self.virtualInterfaceName = nil
            self.virtualInterfaceState = nil
            self.virtualInterfaceType = nil
            self.vlan = 0
        }
    }
}

/// Information about a virtual interface.
public struct AllocatePublicVirtualInterfaceOutputResponse: Swift.Equatable {
    /// The address family for the BGP peer.
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    /// The IP address assigned to the Amazon interface.
    public let amazonAddress: Swift.String?
    /// The autonomous system number (ASN) for the Amazon side of the connection.
    public let amazonSideAsn: Swift.Int?
    /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
    ///          The valid values are 1-2147483647.
    public let asn: Swift.Int
    /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
    public let authKey: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The BGP peers configured on this virtual interface.
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The IP address assigned to the customer interface.
    public let customerAddress: Swift.String?
    /// The customer router configuration.
    public let customerRouterConfig: Swift.String?
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The location of the connection.
    public let location: Swift.String?
    /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
    public let mtu: Swift.Int?
    /// The ID of the account that owns the virtual interface.
    public let ownerAccount: Swift.String?
    /// The Region where the virtual interface is located.
    public let region: Swift.String?
    /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    /// The tags associated with the virtual interface.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
    public let virtualGatewayId: Swift.String?
    /// The ID of the virtual interface.
    public let virtualInterfaceId: Swift.String?
    /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
    public let virtualInterfaceName: Swift.String?
    /// The state of the virtual interface. The following are the possible values:
    ///
    ///
    ///
    ///                   confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.
    ///
    ///
    ///
    ///                   verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.
    ///
    ///
    ///
    ///                   pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.
    ///
    ///
    ///
    ///                   available: A virtual interface that is able to forward traffic.
    ///
    ///
    ///
    ///                   down: A virtual interface that is BGP down.
    ///
    ///
    ///
    ///                   deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.
    ///
    ///
    ///
    ///                   deleted: A virtual interface that cannot forward traffic.
    ///
    ///
    ///
    ///                   rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.
    ///
    ///
    ///
    ///                   unknown: The state of the virtual interface is not available.
    ///
    ///
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    /// The type of virtual interface. The possible values are private and public.
    public let virtualInterfaceType: Swift.String?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
        amazonAddress: Swift.String? = nil,
        amazonSideAsn: Swift.Int? = nil,
        asn: Swift.Int = 0,
        authKey: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bgpPeers: [DirectConnectClientTypes.BGPPeer]? = nil,
        connectionId: Swift.String? = nil,
        customerAddress: Swift.String? = nil,
        customerRouterConfig: Swift.String? = nil,
        directConnectGatewayId: Swift.String? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        location: Swift.String? = nil,
        mtu: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        region: Swift.String? = nil,
        routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        virtualGatewayId: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil,
        virtualInterfaceName: Swift.String? = nil,
        virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState? = nil,
        virtualInterfaceType: Swift.String? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.addressFamily = addressFamily
        self.amazonAddress = amazonAddress
        self.amazonSideAsn = amazonSideAsn
        self.asn = asn
        self.authKey = authKey
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bgpPeers = bgpPeers
        self.connectionId = connectionId
        self.customerAddress = customerAddress
        self.customerRouterConfig = customerRouterConfig
        self.directConnectGatewayId = directConnectGatewayId
        self.jumboFrameCapable = jumboFrameCapable
        self.location = location
        self.mtu = mtu
        self.ownerAccount = ownerAccount
        self.region = region
        self.routeFilterPrefixes = routeFilterPrefixes
        self.tags = tags
        self.virtualGatewayId = virtualGatewayId
        self.virtualInterfaceId = virtualInterfaceId
        self.virtualInterfaceName = virtualInterfaceName
        self.virtualInterfaceState = virtualInterfaceState
        self.virtualInterfaceType = virtualInterfaceType
        self.vlan = vlan
    }
}

struct AllocatePublicVirtualInterfaceOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let virtualInterfaceId: Swift.String?
    public let location: Swift.String?
    public let connectionId: Swift.String?
    public let virtualInterfaceType: Swift.String?
    public let virtualInterfaceName: Swift.String?
    public let vlan: Swift.Int
    public let asn: Swift.Int
    public let amazonSideAsn: Swift.Int?
    public let authKey: Swift.String?
    public let amazonAddress: Swift.String?
    public let customerAddress: Swift.String?
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    public let customerRouterConfig: Swift.String?
    public let mtu: Swift.Int?
    public let jumboFrameCapable: Swift.Bool?
    public let virtualGatewayId: Swift.String?
    public let directConnectGatewayId: Swift.String?
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    public let region: Swift.String?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let tags: [DirectConnectClientTypes.Tag]?
}

extension AllocatePublicVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case amazonSideAsn
        case asn
        case authKey
        case awsDeviceV2
        case awsLogicalDeviceId
        case bgpPeers
        case connectionId
        case customerAddress
        case customerRouterConfig
        case directConnectGatewayId
        case jumboFrameCapable
        case location
        case mtu
        case ownerAccount
        case region
        case routeFilterPrefixes
        case tags
        case virtualGatewayId
        case virtualInterfaceId
        case virtualInterfaceName
        case virtualInterfaceState
        case virtualInterfaceType
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let virtualInterfaceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceType)
        virtualInterfaceType = virtualInterfaceTypeDecoded
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
        let customerRouterConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerRouterConfig)
        customerRouterConfig = customerRouterConfigDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let routeFilterPrefixesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .routeFilterPrefixes)
        var routeFilterPrefixesDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let routeFilterPrefixesContainer = routeFilterPrefixesContainer {
            routeFilterPrefixesDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in routeFilterPrefixesContainer {
                if let structure0 = structure0 {
                    routeFilterPrefixesDecoded0?.append(structure0)
                }
            }
        }
        routeFilterPrefixes = routeFilterPrefixesDecoded0
        let bgpPeersContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.BGPPeer?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[DirectConnectClientTypes.BGPPeer]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [DirectConnectClientTypes.BGPPeer]()
            for structure0 in bgpPeersContainer {
                if let structure0 = structure0 {
                    bgpPeersDecoded0?.append(structure0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public struct AllocateTransitVirtualInterfaceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateTransitVirtualInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateTransitVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateTransitVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateTransitVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateTransitVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateTransitVirtualInterfaceOutputError>
}

extension AllocateTransitVirtualInterfaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocateTransitVirtualInterfaceInput(connectionId: \(Swift.String(describing: connectionId)), newTransitVirtualInterfaceAllocation: \(Swift.String(describing: newTransitVirtualInterfaceAllocation)), ownerAccount: \(Swift.String(describing: ownerAccount)))"}
}

extension AllocateTransitVirtualInterfaceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newTransitVirtualInterfaceAllocation
        case ownerAccount
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let newTransitVirtualInterfaceAllocation = newTransitVirtualInterfaceAllocation {
            try encodeContainer.encode(newTransitVirtualInterfaceAllocation, forKey: .newTransitVirtualInterfaceAllocation)
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
    }
}

public struct AllocateTransitVirtualInterfaceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateTransitVirtualInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateTransitVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateTransitVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateTransitVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateTransitVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateTransitVirtualInterfaceOutputError>
}

public struct AllocateTransitVirtualInterfaceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateTransitVirtualInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateTransitVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateTransitVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateTransitVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateTransitVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateTransitVirtualInterfaceOutputError>
}

public struct AllocateTransitVirtualInterfaceInput: Swift.Equatable {
    /// The ID of the connection on which the transit virtual interface is provisioned.
    /// This member is required.
    public let connectionId: Swift.String?
    /// Information about the transit virtual interface.
    /// This member is required.
    public let newTransitVirtualInterfaceAllocation: DirectConnectClientTypes.NewTransitVirtualInterfaceAllocation?
    /// The ID of the account that owns the transit virtual interface.
    /// This member is required.
    public let ownerAccount: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        newTransitVirtualInterfaceAllocation: DirectConnectClientTypes.NewTransitVirtualInterfaceAllocation? = nil,
        ownerAccount: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.newTransitVirtualInterfaceAllocation = newTransitVirtualInterfaceAllocation
        self.ownerAccount = ownerAccount
    }
}

struct AllocateTransitVirtualInterfaceInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let ownerAccount: Swift.String?
    public let newTransitVirtualInterfaceAllocation: DirectConnectClientTypes.NewTransitVirtualInterfaceAllocation?
}

extension AllocateTransitVirtualInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newTransitVirtualInterfaceAllocation
        case ownerAccount
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let newTransitVirtualInterfaceAllocationDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.NewTransitVirtualInterfaceAllocation.self, forKey: .newTransitVirtualInterfaceAllocation)
        newTransitVirtualInterfaceAllocation = newTransitVirtualInterfaceAllocationDecoded
    }
}

extension AllocateTransitVirtualInterfaceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AllocateTransitVirtualInterfaceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateTagKeysException" : self = .duplicateTagKeysException(try DuplicateTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AllocateTransitVirtualInterfaceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case duplicateTagKeysException(DuplicateTagKeysException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AllocateTransitVirtualInterfaceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocateTransitVirtualInterfaceOutputResponse(virtualInterface: \(Swift.String(describing: virtualInterface)))"}
}

extension AllocateTransitVirtualInterfaceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AllocateTransitVirtualInterfaceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualInterface = output.virtualInterface
        } else {
            self.virtualInterface = nil
        }
    }
}

public struct AllocateTransitVirtualInterfaceOutputResponse: Swift.Equatable {
    /// Information about a virtual interface.
    public let virtualInterface: DirectConnectClientTypes.VirtualInterface?

    public init (
        virtualInterface: DirectConnectClientTypes.VirtualInterface? = nil
    )
    {
        self.virtualInterface = virtualInterface
    }
}

struct AllocateTransitVirtualInterfaceOutputResponseBody: Swift.Equatable {
    public let virtualInterface: DirectConnectClientTypes.VirtualInterface?
}

extension AllocateTransitVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterface
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterface.self, forKey: .virtualInterface)
        virtualInterface = virtualInterfaceDecoded
    }
}

public struct AssociateConnectionWithLagInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateConnectionWithLagInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateConnectionWithLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateConnectionWithLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateConnectionWithLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateConnectionWithLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateConnectionWithLagOutputError>
}

extension AssociateConnectionWithLagInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateConnectionWithLagInput(connectionId: \(Swift.String(describing: connectionId)), lagId: \(Swift.String(describing: lagId)))"}
}

extension AssociateConnectionWithLagInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case lagId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let lagId = lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
    }
}

public struct AssociateConnectionWithLagInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateConnectionWithLagInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateConnectionWithLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateConnectionWithLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateConnectionWithLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateConnectionWithLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateConnectionWithLagOutputError>
}

public struct AssociateConnectionWithLagInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateConnectionWithLagInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateConnectionWithLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateConnectionWithLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateConnectionWithLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateConnectionWithLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateConnectionWithLagOutputError>
}

public struct AssociateConnectionWithLagInput: Swift.Equatable {
    /// The ID of the connection.
    /// This member is required.
    public let connectionId: Swift.String?
    /// The ID of the LAG with which to associate the connection.
    /// This member is required.
    public let lagId: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        lagId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.lagId = lagId
    }
}

struct AssociateConnectionWithLagInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let lagId: Swift.String?
}

extension AssociateConnectionWithLagInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case lagId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
    }
}

extension AssociateConnectionWithLagOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateConnectionWithLagOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateConnectionWithLagOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateConnectionWithLagOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateConnectionWithLagOutputResponse(awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bandwidth: \(Swift.String(describing: bandwidth)), connectionId: \(Swift.String(describing: connectionId)), connectionName: \(Swift.String(describing: connectionName)), connectionState: \(Swift.String(describing: connectionState)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), loaIssueTime: \(Swift.String(describing: loaIssueTime)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), ownerAccount: \(Swift.String(describing: ownerAccount)), partnerName: \(Swift.String(describing: partnerName)), portEncryptionStatus: \(Swift.String(describing: portEncryptionStatus)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)), vlan: \(Swift.String(describing: vlan)))"}
}

extension AssociateConnectionWithLagOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociateConnectionWithLagOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bandwidth = output.bandwidth
            self.connectionId = output.connectionId
            self.connectionName = output.connectionName
            self.connectionState = output.connectionState
            self.encryptionMode = output.encryptionMode
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.loaIssueTime = output.loaIssueTime
            self.location = output.location
            self.macSecCapable = output.macSecCapable
            self.macSecKeys = output.macSecKeys
            self.ownerAccount = output.ownerAccount
            self.partnerName = output.partnerName
            self.portEncryptionStatus = output.portEncryptionStatus
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
            self.vlan = output.vlan
        } else {
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bandwidth = nil
            self.connectionId = nil
            self.connectionName = nil
            self.connectionState = nil
            self.encryptionMode = nil
            self.hasLogicalRedundancy = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.loaIssueTime = nil
            self.location = nil
            self.macSecCapable = nil
            self.macSecKeys = nil
            self.ownerAccount = nil
            self.partnerName = nil
            self.portEncryptionStatus = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
            self.vlan = 0
        }
    }
}

/// Information about an Direct Connect connection.
public struct AssociateConnectionWithLagOutputResponse: Swift.Equatable {
    /// The Direct Connect endpoint on which the physical connection terminates.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The bandwidth of the connection.
    public let bandwidth: Swift.String?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The name of the connection.
    public let connectionName: Swift.String?
    /// The state of the connection. The following are the possible values:
    ///
    ///
    ///
    ///                   ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.
    ///
    ///
    ///
    ///                   requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    ///
    ///
    ///                   pending: The connection has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is up and the connection is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The connection is being deleted.
    ///
    ///
    ///
    ///                   deleted: The connection has been deleted.
    ///
    ///
    ///
    ///                   rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.
    ///
    ///
    ///
    ///                   unknown: The state of the connection is not available.
    ///
    ///
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    /// The MAC Security (MACsec) connection encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?
    /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The time of the most recent call to DescribeLoa for this connection.
    public let loaIssueTime: ClientRuntime.Date?
    /// The location of the connection.
    public let location: Swift.String?
    /// Indicates whether the connection supports MAC Security (MACsec).
    public let macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the connection.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The ID of the account that owns the connection.
    public let ownerAccount: Swift.String?
    /// The name of the Direct Connect service provider associated with the connection.
    public let partnerName: Swift.String?
    /// The MAC Security (MACsec) port link status of the connection.
    ///          The valid values are Encryption Up, which means that there is an active Connection Key Name, or Encryption Down.
    public let portEncryptionStatus: Swift.String?
    /// The name of the service provider associated with the connection.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the connection.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bandwidth: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        connectionState: DirectConnectClientTypes.ConnectionState? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        loaIssueTime: ClientRuntime.Date? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        ownerAccount: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        portEncryptionStatus: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bandwidth = bandwidth
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.connectionState = connectionState
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.ownerAccount = ownerAccount
        self.partnerName = partnerName
        self.portEncryptionStatus = portEncryptionStatus
        self.providerName = providerName
        self.region = region
        self.tags = tags
        self.vlan = vlan
    }
}

struct AssociateConnectionWithLagOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let connectionId: Swift.String?
    public let connectionName: Swift.String?
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    public let region: Swift.String?
    public let location: Swift.String?
    public let bandwidth: Swift.String?
    public let vlan: Swift.Int
    public let partnerName: Swift.String?
    public let loaIssueTime: ClientRuntime.Date?
    public let lagId: Swift.String?
    public let awsDevice: Swift.String?
    public let jumboFrameCapable: Swift.Bool?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let macSecCapable: Swift.Bool?
    public let portEncryptionStatus: Swift.String?
    public let encryptionMode: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension AssociateConnectionWithLagOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case connectionId
        case connectionName
        case connectionState
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case macSecCapable
        case macSecKeys
        case ownerAccount
        case partnerName
        case portEncryptionStatus
        case providerName
        case region
        case tags
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let portEncryptionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portEncryptionStatus)
        portEncryptionStatus = portEncryptionStatusDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct AssociateHostedConnectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateHostedConnectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateHostedConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateHostedConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateHostedConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateHostedConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateHostedConnectionOutputError>
}

extension AssociateHostedConnectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateHostedConnectionInput(connectionId: \(Swift.String(describing: connectionId)), parentConnectionId: \(Swift.String(describing: parentConnectionId)))"}
}

extension AssociateHostedConnectionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case parentConnectionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let parentConnectionId = parentConnectionId {
            try encodeContainer.encode(parentConnectionId, forKey: .parentConnectionId)
        }
    }
}

public struct AssociateHostedConnectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateHostedConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateHostedConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateHostedConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateHostedConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateHostedConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateHostedConnectionOutputError>
}

public struct AssociateHostedConnectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateHostedConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateHostedConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateHostedConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateHostedConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateHostedConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateHostedConnectionOutputError>
}

public struct AssociateHostedConnectionInput: Swift.Equatable {
    /// The ID of the hosted connection.
    /// This member is required.
    public let connectionId: Swift.String?
    /// The ID of the interconnect or the LAG.
    /// This member is required.
    public let parentConnectionId: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        parentConnectionId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.parentConnectionId = parentConnectionId
    }
}

struct AssociateHostedConnectionInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let parentConnectionId: Swift.String?
}

extension AssociateHostedConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case parentConnectionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let parentConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentConnectionId)
        parentConnectionId = parentConnectionIdDecoded
    }
}

extension AssociateHostedConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateHostedConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateHostedConnectionOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateHostedConnectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateHostedConnectionOutputResponse(awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bandwidth: \(Swift.String(describing: bandwidth)), connectionId: \(Swift.String(describing: connectionId)), connectionName: \(Swift.String(describing: connectionName)), connectionState: \(Swift.String(describing: connectionState)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), loaIssueTime: \(Swift.String(describing: loaIssueTime)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), ownerAccount: \(Swift.String(describing: ownerAccount)), partnerName: \(Swift.String(describing: partnerName)), portEncryptionStatus: \(Swift.String(describing: portEncryptionStatus)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)), vlan: \(Swift.String(describing: vlan)))"}
}

extension AssociateHostedConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociateHostedConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bandwidth = output.bandwidth
            self.connectionId = output.connectionId
            self.connectionName = output.connectionName
            self.connectionState = output.connectionState
            self.encryptionMode = output.encryptionMode
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.loaIssueTime = output.loaIssueTime
            self.location = output.location
            self.macSecCapable = output.macSecCapable
            self.macSecKeys = output.macSecKeys
            self.ownerAccount = output.ownerAccount
            self.partnerName = output.partnerName
            self.portEncryptionStatus = output.portEncryptionStatus
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
            self.vlan = output.vlan
        } else {
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bandwidth = nil
            self.connectionId = nil
            self.connectionName = nil
            self.connectionState = nil
            self.encryptionMode = nil
            self.hasLogicalRedundancy = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.loaIssueTime = nil
            self.location = nil
            self.macSecCapable = nil
            self.macSecKeys = nil
            self.ownerAccount = nil
            self.partnerName = nil
            self.portEncryptionStatus = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
            self.vlan = 0
        }
    }
}

/// Information about an Direct Connect connection.
public struct AssociateHostedConnectionOutputResponse: Swift.Equatable {
    /// The Direct Connect endpoint on which the physical connection terminates.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The bandwidth of the connection.
    public let bandwidth: Swift.String?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The name of the connection.
    public let connectionName: Swift.String?
    /// The state of the connection. The following are the possible values:
    ///
    ///
    ///
    ///                   ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.
    ///
    ///
    ///
    ///                   requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    ///
    ///
    ///                   pending: The connection has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is up and the connection is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The connection is being deleted.
    ///
    ///
    ///
    ///                   deleted: The connection has been deleted.
    ///
    ///
    ///
    ///                   rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.
    ///
    ///
    ///
    ///                   unknown: The state of the connection is not available.
    ///
    ///
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    /// The MAC Security (MACsec) connection encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?
    /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The time of the most recent call to DescribeLoa for this connection.
    public let loaIssueTime: ClientRuntime.Date?
    /// The location of the connection.
    public let location: Swift.String?
    /// Indicates whether the connection supports MAC Security (MACsec).
    public let macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the connection.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The ID of the account that owns the connection.
    public let ownerAccount: Swift.String?
    /// The name of the Direct Connect service provider associated with the connection.
    public let partnerName: Swift.String?
    /// The MAC Security (MACsec) port link status of the connection.
    ///          The valid values are Encryption Up, which means that there is an active Connection Key Name, or Encryption Down.
    public let portEncryptionStatus: Swift.String?
    /// The name of the service provider associated with the connection.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the connection.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bandwidth: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        connectionState: DirectConnectClientTypes.ConnectionState? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        loaIssueTime: ClientRuntime.Date? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        ownerAccount: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        portEncryptionStatus: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bandwidth = bandwidth
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.connectionState = connectionState
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.ownerAccount = ownerAccount
        self.partnerName = partnerName
        self.portEncryptionStatus = portEncryptionStatus
        self.providerName = providerName
        self.region = region
        self.tags = tags
        self.vlan = vlan
    }
}

struct AssociateHostedConnectionOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let connectionId: Swift.String?
    public let connectionName: Swift.String?
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    public let region: Swift.String?
    public let location: Swift.String?
    public let bandwidth: Swift.String?
    public let vlan: Swift.Int
    public let partnerName: Swift.String?
    public let loaIssueTime: ClientRuntime.Date?
    public let lagId: Swift.String?
    public let awsDevice: Swift.String?
    public let jumboFrameCapable: Swift.Bool?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let macSecCapable: Swift.Bool?
    public let portEncryptionStatus: Swift.String?
    public let encryptionMode: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension AssociateHostedConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case connectionId
        case connectionName
        case connectionState
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case macSecCapable
        case macSecKeys
        case ownerAccount
        case partnerName
        case portEncryptionStatus
        case providerName
        case region
        case tags
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let portEncryptionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portEncryptionStatus)
        portEncryptionStatus = portEncryptionStatusDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct AssociateMacSecKeyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateMacSecKeyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateMacSecKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateMacSecKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateMacSecKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateMacSecKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateMacSecKeyOutputError>
}

extension AssociateMacSecKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateMacSecKeyInput(cak: \(Swift.String(describing: cak)), ckn: \(Swift.String(describing: ckn)), connectionId: \(Swift.String(describing: connectionId)), secretARN: \(Swift.String(describing: secretARN)))"}
}

extension AssociateMacSecKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cak
        case ckn
        case connectionId
        case secretARN
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cak = cak {
            try encodeContainer.encode(cak, forKey: .cak)
        }
        if let ckn = ckn {
            try encodeContainer.encode(ckn, forKey: .ckn)
        }
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let secretARN = secretARN {
            try encodeContainer.encode(secretARN, forKey: .secretARN)
        }
    }
}

public struct AssociateMacSecKeyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateMacSecKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateMacSecKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateMacSecKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateMacSecKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateMacSecKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateMacSecKeyOutputError>
}

public struct AssociateMacSecKeyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateMacSecKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateMacSecKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateMacSecKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateMacSecKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateMacSecKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateMacSecKeyOutputError>
}

public struct AssociateMacSecKeyInput: Swift.Equatable {
    /// The MAC Security (MACsec) CAK to associate with the dedicated connection.
    ///          You can create the CKN/CAK pair using an industry standard tool.
    ///           The valid values are 64 hexadecimal characters (0-9, A-E).
    ///          If you use this request parameter, you must use the ckn request parameter and not use the secretARN request parameter.
    public let cak: Swift.String?
    /// The MAC Security (MACsec) CKN to associate with the dedicated connection.
    ///          You can create the CKN/CAK pair using an industry standard tool.
    ///           The valid values are 64 hexadecimal characters (0-9, A-E).
    ///          If you use this request parameter, you must use the cak request parameter and not use the secretARN request parameter.
    public let ckn: Swift.String?
    /// The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx).
    ///          You can use DescribeConnections or DescribeLags to retrieve connection ID.
    /// This member is required.
    public let connectionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the MAC Security (MACsec) secret key to associate with the dedicated connection.
    ///          You can use DescribeConnections or DescribeLags to retrieve the MAC Security (MACsec) secret key.
    ///          If you use this request parameter, you do not use the ckn and cak request parameters.
    public let secretARN: Swift.String?

    public init (
        cak: Swift.String? = nil,
        ckn: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        secretARN: Swift.String? = nil
    )
    {
        self.cak = cak
        self.ckn = ckn
        self.connectionId = connectionId
        self.secretARN = secretARN
    }
}

struct AssociateMacSecKeyInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let secretARN: Swift.String?
    public let ckn: Swift.String?
    public let cak: Swift.String?
}

extension AssociateMacSecKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cak
        case ckn
        case connectionId
        case secretARN
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let secretARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretARN)
        secretARN = secretARNDecoded
        let cknDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ckn)
        ckn = cknDecoded
        let cakDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cak)
        cak = cakDecoded
    }
}

extension AssociateMacSecKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateMacSecKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateMacSecKeyOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateMacSecKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateMacSecKeyOutputResponse(connectionId: \(Swift.String(describing: connectionId)), macSecKeys: \(Swift.String(describing: macSecKeys)))"}
}

extension AssociateMacSecKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociateMacSecKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connectionId = output.connectionId
            self.macSecKeys = output.macSecKeys
        } else {
            self.connectionId = nil
            self.macSecKeys = nil
        }
    }
}

public struct AssociateMacSecKeyOutputResponse: Swift.Equatable {
    /// The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx).
    public let connectionId: Swift.String?
    /// The MAC Security (MACsec) security keys associated with the dedicated connection.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?

    public init (
        connectionId: Swift.String? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil
    )
    {
        self.connectionId = connectionId
        self.macSecKeys = macSecKeys
    }
}

struct AssociateMacSecKeyOutputResponseBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension AssociateMacSecKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case macSecKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct AssociateVirtualInterfaceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateVirtualInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateVirtualInterfaceOutputError>
}

extension AssociateVirtualInterfaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateVirtualInterfaceInput(connectionId: \(Swift.String(describing: connectionId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension AssociateVirtualInterfaceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct AssociateVirtualInterfaceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateVirtualInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateVirtualInterfaceOutputError>
}

public struct AssociateVirtualInterfaceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateVirtualInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateVirtualInterfaceOutputError>
}

public struct AssociateVirtualInterfaceInput: Swift.Equatable {
    /// The ID of the LAG or connection.
    /// This member is required.
    public let connectionId: Swift.String?
    /// The ID of the virtual interface.
    /// This member is required.
    public let virtualInterfaceId: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct AssociateVirtualInterfaceInputBody: Swift.Equatable {
    public let virtualInterfaceId: Swift.String?
    public let connectionId: Swift.String?
}

extension AssociateVirtualInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
    }
}

extension AssociateVirtualInterfaceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateVirtualInterfaceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateVirtualInterfaceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateVirtualInterfaceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateVirtualInterfaceOutputResponse(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), amazonSideAsn: \(Swift.String(describing: amazonSideAsn)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bgpPeers: \(Swift.String(describing: bgpPeers)), connectionId: \(Swift.String(describing: connectionId)), customerAddress: \(Swift.String(describing: customerAddress)), customerRouterConfig: \(Swift.String(describing: customerRouterConfig)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), location: \(Swift.String(describing: location)), mtu: \(Swift.String(describing: mtu)), ownerAccount: \(Swift.String(describing: ownerAccount)), region: \(Swift.String(describing: region)), routeFilterPrefixes: \(Swift.String(describing: routeFilterPrefixes)), tags: \(Swift.String(describing: tags)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), virtualInterfaceState: \(Swift.String(describing: virtualInterfaceState)), virtualInterfaceType: \(Swift.String(describing: virtualInterfaceType)), vlan: \(Swift.String(describing: vlan)))"}
}

extension AssociateVirtualInterfaceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociateVirtualInterfaceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addressFamily = output.addressFamily
            self.amazonAddress = output.amazonAddress
            self.amazonSideAsn = output.amazonSideAsn
            self.asn = output.asn
            self.authKey = output.authKey
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bgpPeers = output.bgpPeers
            self.connectionId = output.connectionId
            self.customerAddress = output.customerAddress
            self.customerRouterConfig = output.customerRouterConfig
            self.directConnectGatewayId = output.directConnectGatewayId
            self.jumboFrameCapable = output.jumboFrameCapable
            self.location = output.location
            self.mtu = output.mtu
            self.ownerAccount = output.ownerAccount
            self.region = output.region
            self.routeFilterPrefixes = output.routeFilterPrefixes
            self.tags = output.tags
            self.virtualGatewayId = output.virtualGatewayId
            self.virtualInterfaceId = output.virtualInterfaceId
            self.virtualInterfaceName = output.virtualInterfaceName
            self.virtualInterfaceState = output.virtualInterfaceState
            self.virtualInterfaceType = output.virtualInterfaceType
            self.vlan = output.vlan
        } else {
            self.addressFamily = nil
            self.amazonAddress = nil
            self.amazonSideAsn = nil
            self.asn = 0
            self.authKey = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bgpPeers = nil
            self.connectionId = nil
            self.customerAddress = nil
            self.customerRouterConfig = nil
            self.directConnectGatewayId = nil
            self.jumboFrameCapable = nil
            self.location = nil
            self.mtu = nil
            self.ownerAccount = nil
            self.region = nil
            self.routeFilterPrefixes = nil
            self.tags = nil
            self.virtualGatewayId = nil
            self.virtualInterfaceId = nil
            self.virtualInterfaceName = nil
            self.virtualInterfaceState = nil
            self.virtualInterfaceType = nil
            self.vlan = 0
        }
    }
}

/// Information about a virtual interface.
public struct AssociateVirtualInterfaceOutputResponse: Swift.Equatable {
    /// The address family for the BGP peer.
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    /// The IP address assigned to the Amazon interface.
    public let amazonAddress: Swift.String?
    /// The autonomous system number (ASN) for the Amazon side of the connection.
    public let amazonSideAsn: Swift.Int?
    /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
    ///          The valid values are 1-2147483647.
    public let asn: Swift.Int
    /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
    public let authKey: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The BGP peers configured on this virtual interface.
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The IP address assigned to the customer interface.
    public let customerAddress: Swift.String?
    /// The customer router configuration.
    public let customerRouterConfig: Swift.String?
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The location of the connection.
    public let location: Swift.String?
    /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
    public let mtu: Swift.Int?
    /// The ID of the account that owns the virtual interface.
    public let ownerAccount: Swift.String?
    /// The Region where the virtual interface is located.
    public let region: Swift.String?
    /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    /// The tags associated with the virtual interface.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
    public let virtualGatewayId: Swift.String?
    /// The ID of the virtual interface.
    public let virtualInterfaceId: Swift.String?
    /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
    public let virtualInterfaceName: Swift.String?
    /// The state of the virtual interface. The following are the possible values:
    ///
    ///
    ///
    ///                   confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.
    ///
    ///
    ///
    ///                   verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.
    ///
    ///
    ///
    ///                   pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.
    ///
    ///
    ///
    ///                   available: A virtual interface that is able to forward traffic.
    ///
    ///
    ///
    ///                   down: A virtual interface that is BGP down.
    ///
    ///
    ///
    ///                   deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.
    ///
    ///
    ///
    ///                   deleted: A virtual interface that cannot forward traffic.
    ///
    ///
    ///
    ///                   rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.
    ///
    ///
    ///
    ///                   unknown: The state of the virtual interface is not available.
    ///
    ///
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    /// The type of virtual interface. The possible values are private and public.
    public let virtualInterfaceType: Swift.String?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
        amazonAddress: Swift.String? = nil,
        amazonSideAsn: Swift.Int? = nil,
        asn: Swift.Int = 0,
        authKey: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bgpPeers: [DirectConnectClientTypes.BGPPeer]? = nil,
        connectionId: Swift.String? = nil,
        customerAddress: Swift.String? = nil,
        customerRouterConfig: Swift.String? = nil,
        directConnectGatewayId: Swift.String? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        location: Swift.String? = nil,
        mtu: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        region: Swift.String? = nil,
        routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        virtualGatewayId: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil,
        virtualInterfaceName: Swift.String? = nil,
        virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState? = nil,
        virtualInterfaceType: Swift.String? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.addressFamily = addressFamily
        self.amazonAddress = amazonAddress
        self.amazonSideAsn = amazonSideAsn
        self.asn = asn
        self.authKey = authKey
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bgpPeers = bgpPeers
        self.connectionId = connectionId
        self.customerAddress = customerAddress
        self.customerRouterConfig = customerRouterConfig
        self.directConnectGatewayId = directConnectGatewayId
        self.jumboFrameCapable = jumboFrameCapable
        self.location = location
        self.mtu = mtu
        self.ownerAccount = ownerAccount
        self.region = region
        self.routeFilterPrefixes = routeFilterPrefixes
        self.tags = tags
        self.virtualGatewayId = virtualGatewayId
        self.virtualInterfaceId = virtualInterfaceId
        self.virtualInterfaceName = virtualInterfaceName
        self.virtualInterfaceState = virtualInterfaceState
        self.virtualInterfaceType = virtualInterfaceType
        self.vlan = vlan
    }
}

struct AssociateVirtualInterfaceOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let virtualInterfaceId: Swift.String?
    public let location: Swift.String?
    public let connectionId: Swift.String?
    public let virtualInterfaceType: Swift.String?
    public let virtualInterfaceName: Swift.String?
    public let vlan: Swift.Int
    public let asn: Swift.Int
    public let amazonSideAsn: Swift.Int?
    public let authKey: Swift.String?
    public let amazonAddress: Swift.String?
    public let customerAddress: Swift.String?
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    public let customerRouterConfig: Swift.String?
    public let mtu: Swift.Int?
    public let jumboFrameCapable: Swift.Bool?
    public let virtualGatewayId: Swift.String?
    public let directConnectGatewayId: Swift.String?
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    public let region: Swift.String?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let tags: [DirectConnectClientTypes.Tag]?
}

extension AssociateVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case amazonSideAsn
        case asn
        case authKey
        case awsDeviceV2
        case awsLogicalDeviceId
        case bgpPeers
        case connectionId
        case customerAddress
        case customerRouterConfig
        case directConnectGatewayId
        case jumboFrameCapable
        case location
        case mtu
        case ownerAccount
        case region
        case routeFilterPrefixes
        case tags
        case virtualGatewayId
        case virtualInterfaceId
        case virtualInterfaceName
        case virtualInterfaceState
        case virtualInterfaceType
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let virtualInterfaceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceType)
        virtualInterfaceType = virtualInterfaceTypeDecoded
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
        let customerRouterConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerRouterConfig)
        customerRouterConfig = customerRouterConfigDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let routeFilterPrefixesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .routeFilterPrefixes)
        var routeFilterPrefixesDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let routeFilterPrefixesContainer = routeFilterPrefixesContainer {
            routeFilterPrefixesDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in routeFilterPrefixesContainer {
                if let structure0 = structure0 {
                    routeFilterPrefixesDecoded0?.append(structure0)
                }
            }
        }
        routeFilterPrefixes = routeFilterPrefixesDecoded0
        let bgpPeersContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.BGPPeer?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[DirectConnectClientTypes.BGPPeer]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [DirectConnectClientTypes.BGPPeer]()
            for structure0 in bgpPeersContainer {
                if let structure0 = structure0 {
                    bgpPeersDecoded0?.append(structure0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DirectConnectClientTypes.AssociatedGateway: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case ownerAccount
        case region
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.GatewayType.self, forKey: .type)
        type = typeDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension DirectConnectClientTypes.AssociatedGateway: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociatedGateway(id: \(Swift.String(describing: id)), ownerAccount: \(Swift.String(describing: ownerAccount)), region: \(Swift.String(describing: region)), type: \(Swift.String(describing: type)))"}
}

extension DirectConnectClientTypes {
    /// Information about the associated gateway.
    public struct AssociatedGateway: Swift.Equatable {
        /// The ID of the associated gateway.
        public let id: Swift.String?
        /// The ID of the account that owns the associated virtual private gateway or transit gateway.
        public let ownerAccount: Swift.String?
        /// The Region where the associated gateway is located.
        public let region: Swift.String?
        /// The type of associated gateway.
        public let type: DirectConnectClientTypes.GatewayType?

        public init (
            id: Swift.String? = nil,
            ownerAccount: Swift.String? = nil,
            region: Swift.String? = nil,
            type: DirectConnectClientTypes.GatewayType? = nil
        )
        {
            self.id = id
            self.ownerAccount = ownerAccount
            self.region = region
            self.type = type
        }
    }

}

extension DirectConnectClientTypes.BGPPeer: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case asn
        case authKey
        case awsDeviceV2
        case awsLogicalDeviceId
        case bgpPeerId
        case bgpPeerState
        case bgpStatus
        case customerAddress
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressFamily = addressFamily {
            try encodeContainer.encode(addressFamily.rawValue, forKey: .addressFamily)
        }
        if let amazonAddress = amazonAddress {
            try encodeContainer.encode(amazonAddress, forKey: .amazonAddress)
        }
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let authKey = authKey {
            try encodeContainer.encode(authKey, forKey: .authKey)
        }
        if let awsDeviceV2 = awsDeviceV2 {
            try encodeContainer.encode(awsDeviceV2, forKey: .awsDeviceV2)
        }
        if let awsLogicalDeviceId = awsLogicalDeviceId {
            try encodeContainer.encode(awsLogicalDeviceId, forKey: .awsLogicalDeviceId)
        }
        if let bgpPeerId = bgpPeerId {
            try encodeContainer.encode(bgpPeerId, forKey: .bgpPeerId)
        }
        if let bgpPeerState = bgpPeerState {
            try encodeContainer.encode(bgpPeerState.rawValue, forKey: .bgpPeerState)
        }
        if let bgpStatus = bgpStatus {
            try encodeContainer.encode(bgpStatus.rawValue, forKey: .bgpStatus)
        }
        if let customerAddress = customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bgpPeerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bgpPeerId)
        bgpPeerId = bgpPeerIdDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let bgpPeerStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.BGPPeerState.self, forKey: .bgpPeerState)
        bgpPeerState = bgpPeerStateDecoded
        let bgpStatusDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.BGPStatus.self, forKey: .bgpStatus)
        bgpStatus = bgpStatusDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
    }
}

extension DirectConnectClientTypes.BGPPeer: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BGPPeer(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bgpPeerId: \(Swift.String(describing: bgpPeerId)), bgpPeerState: \(Swift.String(describing: bgpPeerState)), bgpStatus: \(Swift.String(describing: bgpStatus)), customerAddress: \(Swift.String(describing: customerAddress)))"}
}

extension DirectConnectClientTypes {
    /// Information about a BGP peer.
    public struct BGPPeer: Swift.Equatable {
        /// The address family for the BGP peer.
        public let addressFamily: DirectConnectClientTypes.AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: Swift.String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Swift.Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: Swift.String?
        /// The Direct Connect endpoint that terminates the BGP peer.
        public let awsDeviceV2: Swift.String?
        /// The Direct Connect endpoint that terminates the logical connection. This device might be
        ///       different than the device that terminates the physical connection.
        public let awsLogicalDeviceId: Swift.String?
        /// The ID of the BGP peer.
        public let bgpPeerId: Swift.String?
        /// The state of the BGP peer. The following are the possible values:
        ///
        ///
        ///
        ///                   verifying: The BGP peering addresses or ASN require validation before the BGP peer can be created. This state applies only to public virtual interfaces.
        ///
        ///
        ///
        ///                   pending: The BGP peer is created, and remains in this state until it is ready to be established.
        ///
        ///
        ///
        ///                   available: The BGP peer is ready to be established.
        ///
        ///
        ///
        ///                   deleting:  The BGP peer is being deleted.
        ///
        ///
        ///
        ///                   deleted:  The BGP peer is deleted and cannot be established.
        ///
        ///
        public let bgpPeerState: DirectConnectClientTypes.BGPPeerState?
        /// The status of the BGP peer. The following are the possible values:
        ///
        ///
        ///
        ///                   up: The BGP peer is established. This state does not indicate the
        ///         state of the routing function. Ensure that you are receiving routes over the BGP session.
        ///
        ///
        ///
        ///                   down: The BGP peer is down.
        ///
        ///
        ///
        ///                   unknown: The BGP peer status is not available.
        ///
        ///
        public let bgpStatus: DirectConnectClientTypes.BGPStatus?
        /// The IP address assigned to the customer interface.
        public let customerAddress: Swift.String?

        public init (
            addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
            amazonAddress: Swift.String? = nil,
            asn: Swift.Int = 0,
            authKey: Swift.String? = nil,
            awsDeviceV2: Swift.String? = nil,
            awsLogicalDeviceId: Swift.String? = nil,
            bgpPeerId: Swift.String? = nil,
            bgpPeerState: DirectConnectClientTypes.BGPPeerState? = nil,
            bgpStatus: DirectConnectClientTypes.BGPStatus? = nil,
            customerAddress: Swift.String? = nil
        )
        {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.awsDeviceV2 = awsDeviceV2
            self.awsLogicalDeviceId = awsLogicalDeviceId
            self.bgpPeerId = bgpPeerId
            self.bgpPeerState = bgpPeerState
            self.bgpStatus = bgpStatus
            self.customerAddress = customerAddress
        }
    }

}

extension DirectConnectClientTypes {
    public enum BGPPeerState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case deleted
        case deleting
        case pending
        case verifying
        case sdkUnknown(Swift.String)

        public static var allCases: [BGPPeerState] {
            return [
                .available,
                .deleted,
                .deleting,
                .pending,
                .verifying,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .deleted: return "deleted"
            case .deleting: return "deleting"
            case .pending: return "pending"
            case .verifying: return "verifying"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BGPPeerState(rawValue: rawValue) ?? BGPPeerState.sdkUnknown(rawValue)
        }
    }
}

extension DirectConnectClientTypes {
    public enum BGPStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case down
        case unknown
        case up
        case sdkUnknown(Swift.String)

        public static var allCases: [BGPStatus] {
            return [
                .down,
                .unknown,
                .up,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .down: return "down"
            case .unknown: return "unknown"
            case .up: return "up"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BGPStatus(rawValue: rawValue) ?? BGPStatus.sdkUnknown(rawValue)
        }
    }
}

public struct ConfirmConnectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmConnectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmConnectionOutputError>
}

extension ConfirmConnectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmConnectionInput(connectionId: \(Swift.String(describing: connectionId)))"}
}

extension ConfirmConnectionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
    }
}

public struct ConfirmConnectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmConnectionOutputError>
}

public struct ConfirmConnectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmConnectionOutputError>
}

public struct ConfirmConnectionInput: Swift.Equatable {
    /// The ID of the hosted connection.
    /// This member is required.
    public let connectionId: Swift.String?

    public init (
        connectionId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
    }
}

struct ConfirmConnectionInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
}

extension ConfirmConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
    }
}

extension ConfirmConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ConfirmConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ConfirmConnectionOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ConfirmConnectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmConnectionOutputResponse(connectionState: \(Swift.String(describing: connectionState)))"}
}

extension ConfirmConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConfirmConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connectionState = output.connectionState
        } else {
            self.connectionState = nil
        }
    }
}

public struct ConfirmConnectionOutputResponse: Swift.Equatable {
    /// The state of the connection. The following are the possible values:
    ///
    ///
    ///
    ///                   ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.
    ///
    ///
    ///
    ///                   requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    ///
    ///
    ///                   pending: The connection has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is up and the connection is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The connection is being deleted.
    ///
    ///
    ///
    ///                   deleted: The connection has been deleted.
    ///
    ///
    ///
    ///                   rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.
    ///
    ///
    ///
    ///                   unknown: The state of the connection is not available.
    ///
    ///
    public let connectionState: DirectConnectClientTypes.ConnectionState?

    public init (
        connectionState: DirectConnectClientTypes.ConnectionState? = nil
    )
    {
        self.connectionState = connectionState
    }
}

struct ConfirmConnectionOutputResponseBody: Swift.Equatable {
    public let connectionState: DirectConnectClientTypes.ConnectionState?
}

extension ConfirmConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionState
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
    }
}

public struct ConfirmPrivateVirtualInterfaceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmPrivateVirtualInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmPrivateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmPrivateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmPrivateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmPrivateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmPrivateVirtualInterfaceOutputError>
}

extension ConfirmPrivateVirtualInterfaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmPrivateVirtualInterfaceInput(directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension ConfirmPrivateVirtualInterfaceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayId
        case virtualGatewayId
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let virtualGatewayId = virtualGatewayId {
            try encodeContainer.encode(virtualGatewayId, forKey: .virtualGatewayId)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct ConfirmPrivateVirtualInterfaceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmPrivateVirtualInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmPrivateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmPrivateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmPrivateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmPrivateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmPrivateVirtualInterfaceOutputError>
}

public struct ConfirmPrivateVirtualInterfaceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmPrivateVirtualInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmPrivateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmPrivateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmPrivateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmPrivateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmPrivateVirtualInterfaceOutputError>
}

public struct ConfirmPrivateVirtualInterfaceInput: Swift.Equatable {
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// The ID of the virtual private gateway.
    public let virtualGatewayId: Swift.String?
    /// The ID of the virtual interface.
    /// This member is required.
    public let virtualInterfaceId: Swift.String?

    public init (
        directConnectGatewayId: Swift.String? = nil,
        virtualGatewayId: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.directConnectGatewayId = directConnectGatewayId
        self.virtualGatewayId = virtualGatewayId
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct ConfirmPrivateVirtualInterfaceInputBody: Swift.Equatable {
    public let virtualInterfaceId: Swift.String?
    public let virtualGatewayId: Swift.String?
    public let directConnectGatewayId: Swift.String?
}

extension ConfirmPrivateVirtualInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayId
        case virtualGatewayId
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
    }
}

extension ConfirmPrivateVirtualInterfaceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ConfirmPrivateVirtualInterfaceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ConfirmPrivateVirtualInterfaceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ConfirmPrivateVirtualInterfaceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmPrivateVirtualInterfaceOutputResponse(virtualInterfaceState: \(Swift.String(describing: virtualInterfaceState)))"}
}

extension ConfirmPrivateVirtualInterfaceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConfirmPrivateVirtualInterfaceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualInterfaceState = output.virtualInterfaceState
        } else {
            self.virtualInterfaceState = nil
        }
    }
}

public struct ConfirmPrivateVirtualInterfaceOutputResponse: Swift.Equatable {
    /// The state of the virtual interface. The following are the possible values:
    ///
    ///
    ///
    ///                   confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.
    ///
    ///
    ///
    ///                   verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.
    ///
    ///
    ///
    ///                   pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.
    ///
    ///
    ///
    ///                   available: A virtual interface that is able to forward traffic.
    ///
    ///
    ///
    ///                   down: A virtual interface that is BGP down.
    ///
    ///
    ///
    ///                   deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.
    ///
    ///
    ///
    ///                   deleted: A virtual interface that cannot forward traffic.
    ///
    ///
    ///
    ///                   rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.
    ///
    ///
    ///
    ///                   unknown: The state of the virtual interface is not available.
    ///
    ///
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?

    public init (
        virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState? = nil
    )
    {
        self.virtualInterfaceState = virtualInterfaceState
    }
}

struct ConfirmPrivateVirtualInterfaceOutputResponseBody: Swift.Equatable {
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
}

extension ConfirmPrivateVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceState
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
    }
}

public struct ConfirmPublicVirtualInterfaceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmPublicVirtualInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmPublicVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmPublicVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmPublicVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmPublicVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmPublicVirtualInterfaceOutputError>
}

extension ConfirmPublicVirtualInterfaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmPublicVirtualInterfaceInput(virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension ConfirmPublicVirtualInterfaceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct ConfirmPublicVirtualInterfaceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmPublicVirtualInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmPublicVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmPublicVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmPublicVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmPublicVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmPublicVirtualInterfaceOutputError>
}

public struct ConfirmPublicVirtualInterfaceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmPublicVirtualInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmPublicVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmPublicVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmPublicVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmPublicVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmPublicVirtualInterfaceOutputError>
}

public struct ConfirmPublicVirtualInterfaceInput: Swift.Equatable {
    /// The ID of the virtual interface.
    /// This member is required.
    public let virtualInterfaceId: Swift.String?

    public init (
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct ConfirmPublicVirtualInterfaceInputBody: Swift.Equatable {
    public let virtualInterfaceId: Swift.String?
}

extension ConfirmPublicVirtualInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
    }
}

extension ConfirmPublicVirtualInterfaceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ConfirmPublicVirtualInterfaceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ConfirmPublicVirtualInterfaceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ConfirmPublicVirtualInterfaceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmPublicVirtualInterfaceOutputResponse(virtualInterfaceState: \(Swift.String(describing: virtualInterfaceState)))"}
}

extension ConfirmPublicVirtualInterfaceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConfirmPublicVirtualInterfaceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualInterfaceState = output.virtualInterfaceState
        } else {
            self.virtualInterfaceState = nil
        }
    }
}

public struct ConfirmPublicVirtualInterfaceOutputResponse: Swift.Equatable {
    /// The state of the virtual interface. The following are the possible values:
    ///
    ///
    ///
    ///                   confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.
    ///
    ///
    ///
    ///                   verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.
    ///
    ///
    ///
    ///                   pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.
    ///
    ///
    ///
    ///                   available: A virtual interface that is able to forward traffic.
    ///
    ///
    ///
    ///                   down: A virtual interface that is BGP down.
    ///
    ///
    ///
    ///                   deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.
    ///
    ///
    ///
    ///                   deleted: A virtual interface that cannot forward traffic.
    ///
    ///
    ///
    ///                   rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.
    ///
    ///
    ///
    ///                   unknown: The state of the virtual interface is not available.
    ///
    ///
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?

    public init (
        virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState? = nil
    )
    {
        self.virtualInterfaceState = virtualInterfaceState
    }
}

struct ConfirmPublicVirtualInterfaceOutputResponseBody: Swift.Equatable {
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
}

extension ConfirmPublicVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceState
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
    }
}

public struct ConfirmTransitVirtualInterfaceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmTransitVirtualInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmTransitVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmTransitVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmTransitVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmTransitVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmTransitVirtualInterfaceOutputError>
}

extension ConfirmTransitVirtualInterfaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmTransitVirtualInterfaceInput(directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension ConfirmTransitVirtualInterfaceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayId
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct ConfirmTransitVirtualInterfaceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmTransitVirtualInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmTransitVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmTransitVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmTransitVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmTransitVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmTransitVirtualInterfaceOutputError>
}

public struct ConfirmTransitVirtualInterfaceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmTransitVirtualInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmTransitVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmTransitVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmTransitVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmTransitVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmTransitVirtualInterfaceOutputError>
}

public struct ConfirmTransitVirtualInterfaceInput: Swift.Equatable {
    /// The ID of the Direct Connect gateway.
    /// This member is required.
    public let directConnectGatewayId: Swift.String?
    /// The ID of the virtual interface.
    /// This member is required.
    public let virtualInterfaceId: Swift.String?

    public init (
        directConnectGatewayId: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.directConnectGatewayId = directConnectGatewayId
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct ConfirmTransitVirtualInterfaceInputBody: Swift.Equatable {
    public let virtualInterfaceId: Swift.String?
    public let directConnectGatewayId: Swift.String?
}

extension ConfirmTransitVirtualInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayId
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
    }
}

extension ConfirmTransitVirtualInterfaceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ConfirmTransitVirtualInterfaceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ConfirmTransitVirtualInterfaceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ConfirmTransitVirtualInterfaceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmTransitVirtualInterfaceOutputResponse(virtualInterfaceState: \(Swift.String(describing: virtualInterfaceState)))"}
}

extension ConfirmTransitVirtualInterfaceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConfirmTransitVirtualInterfaceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualInterfaceState = output.virtualInterfaceState
        } else {
            self.virtualInterfaceState = nil
        }
    }
}

public struct ConfirmTransitVirtualInterfaceOutputResponse: Swift.Equatable {
    /// The state of the virtual interface. The following are the possible values:
    ///
    ///
    ///
    ///                   confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.
    ///
    ///
    ///
    ///                   verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.
    ///
    ///
    ///
    ///                   pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.
    ///
    ///
    ///
    ///                   available: A virtual interface that is able to forward traffic.
    ///
    ///
    ///
    ///                   down: A virtual interface that is BGP down.
    ///
    ///
    ///
    ///                   deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.
    ///
    ///
    ///
    ///                   deleted: A virtual interface that cannot forward traffic.
    ///
    ///
    ///
    ///                   rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.
    ///
    ///
    ///
    ///                   unknown: The state of the virtual interface is not available.
    ///
    ///
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?

    public init (
        virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState? = nil
    )
    {
        self.virtualInterfaceState = virtualInterfaceState
    }
}

struct ConfirmTransitVirtualInterfaceOutputResponseBody: Swift.Equatable {
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
}

extension ConfirmTransitVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceState
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
    }
}

extension DirectConnectClientTypes.Connection: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case connectionId
        case connectionName
        case connectionState
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case macSecCapable
        case macSecKeys
        case ownerAccount
        case partnerName
        case portEncryptionStatus
        case providerName
        case region
        case tags
        case vlan
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsDevice = awsDevice {
            try encodeContainer.encode(awsDevice, forKey: .awsDevice)
        }
        if let awsDeviceV2 = awsDeviceV2 {
            try encodeContainer.encode(awsDeviceV2, forKey: .awsDeviceV2)
        }
        if let awsLogicalDeviceId = awsLogicalDeviceId {
            try encodeContainer.encode(awsLogicalDeviceId, forKey: .awsLogicalDeviceId)
        }
        if let bandwidth = bandwidth {
            try encodeContainer.encode(bandwidth, forKey: .bandwidth)
        }
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let connectionState = connectionState {
            try encodeContainer.encode(connectionState.rawValue, forKey: .connectionState)
        }
        if let encryptionMode = encryptionMode {
            try encodeContainer.encode(encryptionMode, forKey: .encryptionMode)
        }
        if let hasLogicalRedundancy = hasLogicalRedundancy {
            try encodeContainer.encode(hasLogicalRedundancy.rawValue, forKey: .hasLogicalRedundancy)
        }
        if let jumboFrameCapable = jumboFrameCapable {
            try encodeContainer.encode(jumboFrameCapable, forKey: .jumboFrameCapable)
        }
        if let lagId = lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
        if let loaIssueTime = loaIssueTime {
            try encodeContainer.encode(loaIssueTime.timeIntervalSince1970, forKey: .loaIssueTime)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let macSecCapable = macSecCapable {
            try encodeContainer.encode(macSecCapable, forKey: .macSecCapable)
        }
        if let macSecKeys = macSecKeys {
            var macSecKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .macSecKeys)
            for macseckeylist0 in macSecKeys {
                try macSecKeysContainer.encode(macseckeylist0)
            }
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let partnerName = partnerName {
            try encodeContainer.encode(partnerName, forKey: .partnerName)
        }
        if let portEncryptionStatus = portEncryptionStatus {
            try encodeContainer.encode(portEncryptionStatus, forKey: .portEncryptionStatus)
        }
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if vlan != 0 {
            try encodeContainer.encode(vlan, forKey: .vlan)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let portEncryptionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portEncryptionStatus)
        portEncryptionStatus = portEncryptionStatusDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

extension DirectConnectClientTypes.Connection: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Connection(awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bandwidth: \(Swift.String(describing: bandwidth)), connectionId: \(Swift.String(describing: connectionId)), connectionName: \(Swift.String(describing: connectionName)), connectionState: \(Swift.String(describing: connectionState)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), loaIssueTime: \(Swift.String(describing: loaIssueTime)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), ownerAccount: \(Swift.String(describing: ownerAccount)), partnerName: \(Swift.String(describing: partnerName)), portEncryptionStatus: \(Swift.String(describing: portEncryptionStatus)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)), vlan: \(Swift.String(describing: vlan)))"}
}

extension DirectConnectClientTypes {
    /// Information about an Direct Connect connection.
    public struct Connection: Swift.Equatable {
        /// The Direct Connect endpoint on which the physical connection terminates.
        @available(*, deprecated)
        public let awsDevice: Swift.String?
        /// The Direct Connect endpoint that terminates the physical connection.
        public let awsDeviceV2: Swift.String?
        /// The Direct Connect endpoint that terminates the logical connection. This device might be
        ///       different than the device that terminates the physical connection.
        public let awsLogicalDeviceId: Swift.String?
        /// The bandwidth of the connection.
        public let bandwidth: Swift.String?
        /// The ID of the connection.
        public let connectionId: Swift.String?
        /// The name of the connection.
        public let connectionName: Swift.String?
        /// The state of the connection. The following are the possible values:
        ///
        ///
        ///
        ///                   ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.
        ///
        ///
        ///
        ///                   requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.
        ///
        ///
        ///
        ///                   pending: The connection has been approved and is being initialized.
        ///
        ///
        ///
        ///                   available: The network link is up and the connection is ready for use.
        ///
        ///
        ///
        ///                   down: The network link is down.
        ///
        ///
        ///
        ///                   deleting: The connection is being deleted.
        ///
        ///
        ///
        ///                   deleted: The connection has been deleted.
        ///
        ///
        ///
        ///                   rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.
        ///
        ///
        ///
        ///                   unknown: The state of the connection is not available.
        ///
        ///
        public let connectionState: DirectConnectClientTypes.ConnectionState?
        /// The MAC Security (MACsec) connection encryption mode.
        ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
        public let encryptionMode: Swift.String?
        /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
        public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Swift.Bool?
        /// The ID of the LAG.
        public let lagId: Swift.String?
        /// The time of the most recent call to DescribeLoa for this connection.
        public let loaIssueTime: ClientRuntime.Date?
        /// The location of the connection.
        public let location: Swift.String?
        /// Indicates whether the connection supports MAC Security (MACsec).
        public let macSecCapable: Swift.Bool?
        /// The MAC Security (MACsec) security keys associated with the connection.
        public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
        /// The ID of the account that owns the connection.
        public let ownerAccount: Swift.String?
        /// The name of the Direct Connect service provider associated with the connection.
        public let partnerName: Swift.String?
        /// The MAC Security (MACsec) port link status of the connection.
        ///          The valid values are Encryption Up, which means that there is an active Connection Key Name, or Encryption Down.
        public let portEncryptionStatus: Swift.String?
        /// The name of the service provider associated with the connection.
        public let providerName: Swift.String?
        /// The Region where the connection is located.
        public let region: Swift.String?
        /// The tags associated with the connection.
        public let tags: [DirectConnectClientTypes.Tag]?
        /// The ID of the VLAN.
        public let vlan: Swift.Int

        public init (
            awsDevice: Swift.String? = nil,
            awsDeviceV2: Swift.String? = nil,
            awsLogicalDeviceId: Swift.String? = nil,
            bandwidth: Swift.String? = nil,
            connectionId: Swift.String? = nil,
            connectionName: Swift.String? = nil,
            connectionState: DirectConnectClientTypes.ConnectionState? = nil,
            encryptionMode: Swift.String? = nil,
            hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
            jumboFrameCapable: Swift.Bool? = nil,
            lagId: Swift.String? = nil,
            loaIssueTime: ClientRuntime.Date? = nil,
            location: Swift.String? = nil,
            macSecCapable: Swift.Bool? = nil,
            macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
            ownerAccount: Swift.String? = nil,
            partnerName: Swift.String? = nil,
            portEncryptionStatus: Swift.String? = nil,
            providerName: Swift.String? = nil,
            region: Swift.String? = nil,
            tags: [DirectConnectClientTypes.Tag]? = nil,
            vlan: Swift.Int = 0
        )
        {
            self.awsDevice = awsDevice
            self.awsDeviceV2 = awsDeviceV2
            self.awsLogicalDeviceId = awsLogicalDeviceId
            self.bandwidth = bandwidth
            self.connectionId = connectionId
            self.connectionName = connectionName
            self.connectionState = connectionState
            self.encryptionMode = encryptionMode
            self.hasLogicalRedundancy = hasLogicalRedundancy
            self.jumboFrameCapable = jumboFrameCapable
            self.lagId = lagId
            self.loaIssueTime = loaIssueTime
            self.location = location
            self.macSecCapable = macSecCapable
            self.macSecKeys = macSecKeys
            self.ownerAccount = ownerAccount
            self.partnerName = partnerName
            self.portEncryptionStatus = portEncryptionStatus
            self.providerName = providerName
            self.region = region
            self.tags = tags
            self.vlan = vlan
        }
    }

}

extension DirectConnectClientTypes {
    public enum ConnectionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case deleted
        case deleting
        case down
        case ordering
        case pending
        case rejected
        case requested
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionState] {
            return [
                .available,
                .deleted,
                .deleting,
                .down,
                .ordering,
                .pending,
                .rejected,
                .requested,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .deleted: return "deleted"
            case .deleting: return "deleting"
            case .down: return "down"
            case .ordering: return "ordering"
            case .pending: return "pending"
            case .rejected: return "rejected"
            case .requested: return "requested"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConnectionState(rawValue: rawValue) ?? ConnectionState.sdkUnknown(rawValue)
        }
    }
}

public struct CreateBGPPeerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBGPPeerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBGPPeerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBGPPeerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBGPPeerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBGPPeerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBGPPeerOutputError>
}

extension CreateBGPPeerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBGPPeerInput(newBGPPeer: \(Swift.String(describing: newBGPPeer)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension CreateBGPPeerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case newBGPPeer
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let newBGPPeer = newBGPPeer {
            try encodeContainer.encode(newBGPPeer, forKey: .newBGPPeer)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct CreateBGPPeerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBGPPeerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBGPPeerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBGPPeerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBGPPeerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBGPPeerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBGPPeerOutputError>
}

public struct CreateBGPPeerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBGPPeerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBGPPeerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBGPPeerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBGPPeerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBGPPeerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBGPPeerOutputError>
}

public struct CreateBGPPeerInput: Swift.Equatable {
    /// Information about the BGP peer.
    public let newBGPPeer: DirectConnectClientTypes.NewBGPPeer?
    /// The ID of the virtual interface.
    public let virtualInterfaceId: Swift.String?

    public init (
        newBGPPeer: DirectConnectClientTypes.NewBGPPeer? = nil,
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.newBGPPeer = newBGPPeer
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct CreateBGPPeerInputBody: Swift.Equatable {
    public let virtualInterfaceId: Swift.String?
    public let newBGPPeer: DirectConnectClientTypes.NewBGPPeer?
}

extension CreateBGPPeerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case newBGPPeer
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let newBGPPeerDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.NewBGPPeer.self, forKey: .newBGPPeer)
        newBGPPeer = newBGPPeerDecoded
    }
}

extension CreateBGPPeerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBGPPeerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateBGPPeerOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBGPPeerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBGPPeerOutputResponse(virtualInterface: \(Swift.String(describing: virtualInterface)))"}
}

extension CreateBGPPeerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateBGPPeerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualInterface = output.virtualInterface
        } else {
            self.virtualInterface = nil
        }
    }
}

public struct CreateBGPPeerOutputResponse: Swift.Equatable {
    /// The virtual interface.
    public let virtualInterface: DirectConnectClientTypes.VirtualInterface?

    public init (
        virtualInterface: DirectConnectClientTypes.VirtualInterface? = nil
    )
    {
        self.virtualInterface = virtualInterface
    }
}

struct CreateBGPPeerOutputResponseBody: Swift.Equatable {
    public let virtualInterface: DirectConnectClientTypes.VirtualInterface?
}

extension CreateBGPPeerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterface
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterface.self, forKey: .virtualInterface)
        virtualInterface = virtualInterfaceDecoded
    }
}

public struct CreateConnectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConnectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConnectionOutputError>
}

extension CreateConnectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConnectionInput(bandwidth: \(Swift.String(describing: bandwidth)), connectionName: \(Swift.String(describing: connectionName)), lagId: \(Swift.String(describing: lagId)), location: \(Swift.String(describing: location)), providerName: \(Swift.String(describing: providerName)), requestMACSec: \(Swift.String(describing: requestMACSec)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateConnectionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bandwidth
        case connectionName
        case lagId
        case location
        case providerName
        case requestMACSec
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bandwidth = bandwidth {
            try encodeContainer.encode(bandwidth, forKey: .bandwidth)
        }
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let lagId = lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let requestMACSec = requestMACSec {
            try encodeContainer.encode(requestMACSec, forKey: .requestMACSec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateConnectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConnectionOutputError>
}

public struct CreateConnectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConnectionOutputError>
}

public struct CreateConnectionInput: Swift.Equatable {
    /// The bandwidth of the connection.
    /// This member is required.
    public let bandwidth: Swift.String?
    /// The name of the connection.
    /// This member is required.
    public let connectionName: Swift.String?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The location of the connection.
    /// This member is required.
    public let location: Swift.String?
    /// The name of the service provider associated with the requested connection.
    public let providerName: Swift.String?
    /// Indicates whether you want the connection to support MAC Security (MACsec).
    ///          MAC Security (MACsec) is only available on dedicated connections. For information about MAC Security (MACsec) prerequisties, see  <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties in the Direct Connect User Guide.
    public let requestMACSec: Swift.Bool?
    /// The tags to associate with the lag.
    public let tags: [DirectConnectClientTypes.Tag]?

    public init (
        bandwidth: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        lagId: Swift.String? = nil,
        location: Swift.String? = nil,
        providerName: Swift.String? = nil,
        requestMACSec: Swift.Bool? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil
    )
    {
        self.bandwidth = bandwidth
        self.connectionName = connectionName
        self.lagId = lagId
        self.location = location
        self.providerName = providerName
        self.requestMACSec = requestMACSec
        self.tags = tags
    }
}

struct CreateConnectionInputBody: Swift.Equatable {
    public let location: Swift.String?
    public let bandwidth: Swift.String?
    public let connectionName: Swift.String?
    public let lagId: Swift.String?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let requestMACSec: Swift.Bool?
}

extension CreateConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bandwidth
        case connectionName
        case lagId
        case location
        case providerName
        case requestMACSec
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let requestMACSecDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requestMACSec)
        requestMACSec = requestMACSecDecoded
    }
}

extension CreateConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateTagKeysException" : self = .duplicateTagKeysException(try DuplicateTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateConnectionOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case duplicateTagKeysException(DuplicateTagKeysException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConnectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConnectionOutputResponse(awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bandwidth: \(Swift.String(describing: bandwidth)), connectionId: \(Swift.String(describing: connectionId)), connectionName: \(Swift.String(describing: connectionName)), connectionState: \(Swift.String(describing: connectionState)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), loaIssueTime: \(Swift.String(describing: loaIssueTime)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), ownerAccount: \(Swift.String(describing: ownerAccount)), partnerName: \(Swift.String(describing: partnerName)), portEncryptionStatus: \(Swift.String(describing: portEncryptionStatus)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)), vlan: \(Swift.String(describing: vlan)))"}
}

extension CreateConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bandwidth = output.bandwidth
            self.connectionId = output.connectionId
            self.connectionName = output.connectionName
            self.connectionState = output.connectionState
            self.encryptionMode = output.encryptionMode
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.loaIssueTime = output.loaIssueTime
            self.location = output.location
            self.macSecCapable = output.macSecCapable
            self.macSecKeys = output.macSecKeys
            self.ownerAccount = output.ownerAccount
            self.partnerName = output.partnerName
            self.portEncryptionStatus = output.portEncryptionStatus
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
            self.vlan = output.vlan
        } else {
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bandwidth = nil
            self.connectionId = nil
            self.connectionName = nil
            self.connectionState = nil
            self.encryptionMode = nil
            self.hasLogicalRedundancy = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.loaIssueTime = nil
            self.location = nil
            self.macSecCapable = nil
            self.macSecKeys = nil
            self.ownerAccount = nil
            self.partnerName = nil
            self.portEncryptionStatus = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
            self.vlan = 0
        }
    }
}

/// Information about an Direct Connect connection.
public struct CreateConnectionOutputResponse: Swift.Equatable {
    /// The Direct Connect endpoint on which the physical connection terminates.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The bandwidth of the connection.
    public let bandwidth: Swift.String?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The name of the connection.
    public let connectionName: Swift.String?
    /// The state of the connection. The following are the possible values:
    ///
    ///
    ///
    ///                   ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.
    ///
    ///
    ///
    ///                   requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    ///
    ///
    ///                   pending: The connection has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is up and the connection is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The connection is being deleted.
    ///
    ///
    ///
    ///                   deleted: The connection has been deleted.
    ///
    ///
    ///
    ///                   rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.
    ///
    ///
    ///
    ///                   unknown: The state of the connection is not available.
    ///
    ///
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    /// The MAC Security (MACsec) connection encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?
    /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The time of the most recent call to DescribeLoa for this connection.
    public let loaIssueTime: ClientRuntime.Date?
    /// The location of the connection.
    public let location: Swift.String?
    /// Indicates whether the connection supports MAC Security (MACsec).
    public let macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the connection.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The ID of the account that owns the connection.
    public let ownerAccount: Swift.String?
    /// The name of the Direct Connect service provider associated with the connection.
    public let partnerName: Swift.String?
    /// The MAC Security (MACsec) port link status of the connection.
    ///          The valid values are Encryption Up, which means that there is an active Connection Key Name, or Encryption Down.
    public let portEncryptionStatus: Swift.String?
    /// The name of the service provider associated with the connection.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the connection.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bandwidth: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        connectionState: DirectConnectClientTypes.ConnectionState? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        loaIssueTime: ClientRuntime.Date? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        ownerAccount: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        portEncryptionStatus: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bandwidth = bandwidth
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.connectionState = connectionState
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.ownerAccount = ownerAccount
        self.partnerName = partnerName
        self.portEncryptionStatus = portEncryptionStatus
        self.providerName = providerName
        self.region = region
        self.tags = tags
        self.vlan = vlan
    }
}

struct CreateConnectionOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let connectionId: Swift.String?
    public let connectionName: Swift.String?
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    public let region: Swift.String?
    public let location: Swift.String?
    public let bandwidth: Swift.String?
    public let vlan: Swift.Int
    public let partnerName: Swift.String?
    public let loaIssueTime: ClientRuntime.Date?
    public let lagId: Swift.String?
    public let awsDevice: Swift.String?
    public let jumboFrameCapable: Swift.Bool?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let macSecCapable: Swift.Bool?
    public let portEncryptionStatus: Swift.String?
    public let encryptionMode: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension CreateConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case connectionId
        case connectionName
        case connectionState
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case macSecCapable
        case macSecKeys
        case ownerAccount
        case partnerName
        case portEncryptionStatus
        case providerName
        case region
        case tags
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let portEncryptionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portEncryptionStatus)
        portEncryptionStatus = portEncryptionStatusDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct CreateDirectConnectGatewayAssociationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectConnectGatewayAssociationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectConnectGatewayAssociationOutputError>
}

extension CreateDirectConnectGatewayAssociationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDirectConnectGatewayAssociationInput(addAllowedPrefixesToDirectConnectGateway: \(Swift.String(describing: addAllowedPrefixesToDirectConnectGateway)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), gatewayId: \(Swift.String(describing: gatewayId)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)))"}
}

extension CreateDirectConnectGatewayAssociationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addAllowedPrefixesToDirectConnectGateway
        case directConnectGatewayId
        case gatewayId
        case virtualGatewayId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGateway {
            var addAllowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addAllowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in addAllowedPrefixesToDirectConnectGateway {
                try addAllowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let gatewayId = gatewayId {
            try encodeContainer.encode(gatewayId, forKey: .gatewayId)
        }
        if let virtualGatewayId = virtualGatewayId {
            try encodeContainer.encode(virtualGatewayId, forKey: .virtualGatewayId)
        }
    }
}

public struct CreateDirectConnectGatewayAssociationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectConnectGatewayAssociationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectConnectGatewayAssociationOutputError>
}

public struct CreateDirectConnectGatewayAssociationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectConnectGatewayAssociationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectConnectGatewayAssociationOutputError>
}

public struct CreateDirectConnectGatewayAssociationInput: Swift.Equatable {
    /// The Amazon VPC prefixes to advertise to the Direct Connect gateway
    ///          This parameter is required when you create an association to a transit gateway.
    ///          For information about how to set the prefixes, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/multi-account-associate-vgw.html#allowed-prefixes">Allowed Prefixes in the Direct Connect User Guide.
    public let addAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
    /// The ID of the Direct Connect gateway.
    /// This member is required.
    public let directConnectGatewayId: Swift.String?
    /// The ID of the virtual private gateway or transit gateway.
    public let gatewayId: Swift.String?
    /// The ID of the virtual private gateway.
    public let virtualGatewayId: Swift.String?

    public init (
        addAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
        directConnectGatewayId: Swift.String? = nil,
        gatewayId: Swift.String? = nil,
        virtualGatewayId: Swift.String? = nil
    )
    {
        self.addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGateway
        self.directConnectGatewayId = directConnectGatewayId
        self.gatewayId = gatewayId
        self.virtualGatewayId = virtualGatewayId
    }
}

struct CreateDirectConnectGatewayAssociationInputBody: Swift.Equatable {
    public let directConnectGatewayId: Swift.String?
    public let gatewayId: Swift.String?
    public let addAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
    public let virtualGatewayId: Swift.String?
}

extension CreateDirectConnectGatewayAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addAllowedPrefixesToDirectConnectGateway
        case directConnectGatewayId
        case gatewayId
        case virtualGatewayId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let gatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayId)
        gatewayId = gatewayIdDecoded
        let addAllowedPrefixesToDirectConnectGatewayContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .addAllowedPrefixesToDirectConnectGateway)
        var addAllowedPrefixesToDirectConnectGatewayDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let addAllowedPrefixesToDirectConnectGatewayContainer = addAllowedPrefixesToDirectConnectGatewayContainer {
            addAllowedPrefixesToDirectConnectGatewayDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in addAllowedPrefixesToDirectConnectGatewayContainer {
                if let structure0 = structure0 {
                    addAllowedPrefixesToDirectConnectGatewayDecoded0?.append(structure0)
                }
            }
        }
        addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGatewayDecoded0
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
    }
}

extension CreateDirectConnectGatewayAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDirectConnectGatewayAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDirectConnectGatewayAssociationOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDirectConnectGatewayAssociationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDirectConnectGatewayAssociationOutputResponse(directConnectGatewayAssociation: \(Swift.String(describing: directConnectGatewayAssociation)))"}
}

extension CreateDirectConnectGatewayAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDirectConnectGatewayAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGatewayAssociation = output.directConnectGatewayAssociation
        } else {
            self.directConnectGatewayAssociation = nil
        }
    }
}

public struct CreateDirectConnectGatewayAssociationOutputResponse: Swift.Equatable {
    /// The association to be created.
    public let directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation?

    public init (
        directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation? = nil
    )
    {
        self.directConnectGatewayAssociation = directConnectGatewayAssociation
    }
}

struct CreateDirectConnectGatewayAssociationOutputResponseBody: Swift.Equatable {
    public let directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation?
}

extension CreateDirectConnectGatewayAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayAssociation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayAssociationDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGatewayAssociation.self, forKey: .directConnectGatewayAssociation)
        directConnectGatewayAssociation = directConnectGatewayAssociationDecoded
    }
}

public struct CreateDirectConnectGatewayAssociationProposalInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectConnectGatewayAssociationProposalInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectConnectGatewayAssociationProposalOutputError>
}

extension CreateDirectConnectGatewayAssociationProposalInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDirectConnectGatewayAssociationProposalInput(addAllowedPrefixesToDirectConnectGateway: \(Swift.String(describing: addAllowedPrefixesToDirectConnectGateway)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), directConnectGatewayOwnerAccount: \(Swift.String(describing: directConnectGatewayOwnerAccount)), gatewayId: \(Swift.String(describing: gatewayId)), removeAllowedPrefixesToDirectConnectGateway: \(Swift.String(describing: removeAllowedPrefixesToDirectConnectGateway)))"}
}

extension CreateDirectConnectGatewayAssociationProposalInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addAllowedPrefixesToDirectConnectGateway
        case directConnectGatewayId
        case directConnectGatewayOwnerAccount
        case gatewayId
        case removeAllowedPrefixesToDirectConnectGateway
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGateway {
            var addAllowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addAllowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in addAllowedPrefixesToDirectConnectGateway {
                try addAllowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccount {
            try encodeContainer.encode(directConnectGatewayOwnerAccount, forKey: .directConnectGatewayOwnerAccount)
        }
        if let gatewayId = gatewayId {
            try encodeContainer.encode(gatewayId, forKey: .gatewayId)
        }
        if let removeAllowedPrefixesToDirectConnectGateway = removeAllowedPrefixesToDirectConnectGateway {
            var removeAllowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removeAllowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in removeAllowedPrefixesToDirectConnectGateway {
                try removeAllowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
    }
}

public struct CreateDirectConnectGatewayAssociationProposalInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectConnectGatewayAssociationProposalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectConnectGatewayAssociationProposalOutputError>
}

public struct CreateDirectConnectGatewayAssociationProposalInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectConnectGatewayAssociationProposalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectConnectGatewayAssociationProposalOutputError>
}

public struct CreateDirectConnectGatewayAssociationProposalInput: Swift.Equatable {
    /// The Amazon VPC prefixes to advertise to the Direct Connect gateway.
    public let addAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
    /// The ID of the Direct Connect gateway.
    /// This member is required.
    public let directConnectGatewayId: Swift.String?
    /// The ID of the account that owns the Direct Connect gateway.
    /// This member is required.
    public let directConnectGatewayOwnerAccount: Swift.String?
    /// The ID of the virtual private gateway or transit gateway.
    /// This member is required.
    public let gatewayId: Swift.String?
    /// The Amazon VPC prefixes to no longer advertise to the Direct Connect gateway.
    public let removeAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?

    public init (
        addAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
        directConnectGatewayId: Swift.String? = nil,
        directConnectGatewayOwnerAccount: Swift.String? = nil,
        gatewayId: Swift.String? = nil,
        removeAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]? = nil
    )
    {
        self.addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGateway
        self.directConnectGatewayId = directConnectGatewayId
        self.directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccount
        self.gatewayId = gatewayId
        self.removeAllowedPrefixesToDirectConnectGateway = removeAllowedPrefixesToDirectConnectGateway
    }
}

struct CreateDirectConnectGatewayAssociationProposalInputBody: Swift.Equatable {
    public let directConnectGatewayId: Swift.String?
    public let directConnectGatewayOwnerAccount: Swift.String?
    public let gatewayId: Swift.String?
    public let addAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
    public let removeAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
}

extension CreateDirectConnectGatewayAssociationProposalInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addAllowedPrefixesToDirectConnectGateway
        case directConnectGatewayId
        case directConnectGatewayOwnerAccount
        case gatewayId
        case removeAllowedPrefixesToDirectConnectGateway
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let directConnectGatewayOwnerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayOwnerAccount)
        directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccountDecoded
        let gatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayId)
        gatewayId = gatewayIdDecoded
        let addAllowedPrefixesToDirectConnectGatewayContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .addAllowedPrefixesToDirectConnectGateway)
        var addAllowedPrefixesToDirectConnectGatewayDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let addAllowedPrefixesToDirectConnectGatewayContainer = addAllowedPrefixesToDirectConnectGatewayContainer {
            addAllowedPrefixesToDirectConnectGatewayDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in addAllowedPrefixesToDirectConnectGatewayContainer {
                if let structure0 = structure0 {
                    addAllowedPrefixesToDirectConnectGatewayDecoded0?.append(structure0)
                }
            }
        }
        addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGatewayDecoded0
        let removeAllowedPrefixesToDirectConnectGatewayContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .removeAllowedPrefixesToDirectConnectGateway)
        var removeAllowedPrefixesToDirectConnectGatewayDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let removeAllowedPrefixesToDirectConnectGatewayContainer = removeAllowedPrefixesToDirectConnectGatewayContainer {
            removeAllowedPrefixesToDirectConnectGatewayDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in removeAllowedPrefixesToDirectConnectGatewayContainer {
                if let structure0 = structure0 {
                    removeAllowedPrefixesToDirectConnectGatewayDecoded0?.append(structure0)
                }
            }
        }
        removeAllowedPrefixesToDirectConnectGateway = removeAllowedPrefixesToDirectConnectGatewayDecoded0
    }
}

extension CreateDirectConnectGatewayAssociationProposalOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDirectConnectGatewayAssociationProposalOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDirectConnectGatewayAssociationProposalOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDirectConnectGatewayAssociationProposalOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDirectConnectGatewayAssociationProposalOutputResponse(directConnectGatewayAssociationProposal: \(Swift.String(describing: directConnectGatewayAssociationProposal)))"}
}

extension CreateDirectConnectGatewayAssociationProposalOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDirectConnectGatewayAssociationProposalOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGatewayAssociationProposal = output.directConnectGatewayAssociationProposal
        } else {
            self.directConnectGatewayAssociationProposal = nil
        }
    }
}

public struct CreateDirectConnectGatewayAssociationProposalOutputResponse: Swift.Equatable {
    /// Information about the Direct Connect gateway proposal.
    public let directConnectGatewayAssociationProposal: DirectConnectClientTypes.DirectConnectGatewayAssociationProposal?

    public init (
        directConnectGatewayAssociationProposal: DirectConnectClientTypes.DirectConnectGatewayAssociationProposal? = nil
    )
    {
        self.directConnectGatewayAssociationProposal = directConnectGatewayAssociationProposal
    }
}

struct CreateDirectConnectGatewayAssociationProposalOutputResponseBody: Swift.Equatable {
    public let directConnectGatewayAssociationProposal: DirectConnectClientTypes.DirectConnectGatewayAssociationProposal?
}

extension CreateDirectConnectGatewayAssociationProposalOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayAssociationProposal
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayAssociationProposalDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGatewayAssociationProposal.self, forKey: .directConnectGatewayAssociationProposal)
        directConnectGatewayAssociationProposal = directConnectGatewayAssociationProposalDecoded
    }
}

public struct CreateDirectConnectGatewayInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectConnectGatewayInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectConnectGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectConnectGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectConnectGatewayOutputError>
}

extension CreateDirectConnectGatewayInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDirectConnectGatewayInput(amazonSideAsn: \(Swift.String(describing: amazonSideAsn)), directConnectGatewayName: \(Swift.String(describing: directConnectGatewayName)))"}
}

extension CreateDirectConnectGatewayInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonSideAsn
        case directConnectGatewayName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amazonSideAsn = amazonSideAsn {
            try encodeContainer.encode(amazonSideAsn, forKey: .amazonSideAsn)
        }
        if let directConnectGatewayName = directConnectGatewayName {
            try encodeContainer.encode(directConnectGatewayName, forKey: .directConnectGatewayName)
        }
    }
}

public struct CreateDirectConnectGatewayInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectConnectGatewayInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectConnectGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectConnectGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectConnectGatewayOutputError>
}

public struct CreateDirectConnectGatewayInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectConnectGatewayInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectConnectGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectConnectGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectConnectGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectConnectGatewayOutputError>
}

public struct CreateDirectConnectGatewayInput: Swift.Equatable {
    /// The autonomous system number (ASN) for Border Gateway Protocol (BGP) to be configured
    ///       on the Amazon side of the connection. The ASN must be in the private range of 64,512 to
    ///       65,534 or 4,200,000,000 to 4,294,967,294. The default is 64512.
    public let amazonSideAsn: Swift.Int?
    /// The name of the Direct Connect gateway.
    /// This member is required.
    public let directConnectGatewayName: Swift.String?

    public init (
        amazonSideAsn: Swift.Int? = nil,
        directConnectGatewayName: Swift.String? = nil
    )
    {
        self.amazonSideAsn = amazonSideAsn
        self.directConnectGatewayName = directConnectGatewayName
    }
}

struct CreateDirectConnectGatewayInputBody: Swift.Equatable {
    public let directConnectGatewayName: Swift.String?
    public let amazonSideAsn: Swift.Int?
}

extension CreateDirectConnectGatewayInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonSideAsn
        case directConnectGatewayName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayName)
        directConnectGatewayName = directConnectGatewayNameDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
    }
}

extension CreateDirectConnectGatewayOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDirectConnectGatewayOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDirectConnectGatewayOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDirectConnectGatewayOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDirectConnectGatewayOutputResponse(directConnectGateway: \(Swift.String(describing: directConnectGateway)))"}
}

extension CreateDirectConnectGatewayOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDirectConnectGatewayOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGateway = output.directConnectGateway
        } else {
            self.directConnectGateway = nil
        }
    }
}

public struct CreateDirectConnectGatewayOutputResponse: Swift.Equatable {
    /// The Direct Connect gateway.
    public let directConnectGateway: DirectConnectClientTypes.DirectConnectGateway?

    public init (
        directConnectGateway: DirectConnectClientTypes.DirectConnectGateway? = nil
    )
    {
        self.directConnectGateway = directConnectGateway
    }
}

struct CreateDirectConnectGatewayOutputResponseBody: Swift.Equatable {
    public let directConnectGateway: DirectConnectClientTypes.DirectConnectGateway?
}

extension CreateDirectConnectGatewayOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGateway
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGateway.self, forKey: .directConnectGateway)
        directConnectGateway = directConnectGatewayDecoded
    }
}

public struct CreateInterconnectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInterconnectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInterconnectOutputError>
}

extension CreateInterconnectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInterconnectInput(bandwidth: \(Swift.String(describing: bandwidth)), interconnectName: \(Swift.String(describing: interconnectName)), lagId: \(Swift.String(describing: lagId)), location: \(Swift.String(describing: location)), providerName: \(Swift.String(describing: providerName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateInterconnectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bandwidth
        case interconnectName
        case lagId
        case location
        case providerName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bandwidth = bandwidth {
            try encodeContainer.encode(bandwidth, forKey: .bandwidth)
        }
        if let interconnectName = interconnectName {
            try encodeContainer.encode(interconnectName, forKey: .interconnectName)
        }
        if let lagId = lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateInterconnectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInterconnectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInterconnectOutputError>
}

public struct CreateInterconnectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInterconnectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInterconnectOutputError>
}

public struct CreateInterconnectInput: Swift.Equatable {
    /// The port bandwidth, in Gbps. The possible values are 1 and 10.
    /// This member is required.
    public let bandwidth: Swift.String?
    /// The name of the interconnect.
    /// This member is required.
    public let interconnectName: Swift.String?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The location of the interconnect.
    /// This member is required.
    public let location: Swift.String?
    /// The name of the service provider associated with the interconnect.
    public let providerName: Swift.String?
    /// The tags to associate with the interconnect.
    public let tags: [DirectConnectClientTypes.Tag]?

    public init (
        bandwidth: Swift.String? = nil,
        interconnectName: Swift.String? = nil,
        lagId: Swift.String? = nil,
        location: Swift.String? = nil,
        providerName: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil
    )
    {
        self.bandwidth = bandwidth
        self.interconnectName = interconnectName
        self.lagId = lagId
        self.location = location
        self.providerName = providerName
        self.tags = tags
    }
}

struct CreateInterconnectInputBody: Swift.Equatable {
    public let interconnectName: Swift.String?
    public let bandwidth: Swift.String?
    public let location: Swift.String?
    public let lagId: Swift.String?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
}

extension CreateInterconnectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bandwidth
        case interconnectName
        case lagId
        case location
        case providerName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interconnectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectName)
        interconnectName = interconnectNameDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
    }
}

extension CreateInterconnectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInterconnectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateTagKeysException" : self = .duplicateTagKeysException(try DuplicateTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateInterconnectOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case duplicateTagKeysException(DuplicateTagKeysException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInterconnectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInterconnectOutputResponse(awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bandwidth: \(Swift.String(describing: bandwidth)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), interconnectId: \(Swift.String(describing: interconnectId)), interconnectName: \(Swift.String(describing: interconnectName)), interconnectState: \(Swift.String(describing: interconnectState)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), loaIssueTime: \(Swift.String(describing: loaIssueTime)), location: \(Swift.String(describing: location)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateInterconnectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateInterconnectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bandwidth = output.bandwidth
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.interconnectId = output.interconnectId
            self.interconnectName = output.interconnectName
            self.interconnectState = output.interconnectState
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.loaIssueTime = output.loaIssueTime
            self.location = output.location
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
        } else {
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bandwidth = nil
            self.hasLogicalRedundancy = nil
            self.interconnectId = nil
            self.interconnectName = nil
            self.interconnectState = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.loaIssueTime = nil
            self.location = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
        }
    }
}

/// Information about an interconnect.
public struct CreateInterconnectOutputResponse: Swift.Equatable {
    /// The Direct Connect endpoint on which the physical connection terminates.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The bandwidth of the connection.
    public let bandwidth: Swift.String?
    /// Indicates whether the interconnect supports a secondary BGP in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// The ID of the interconnect.
    public let interconnectId: Swift.String?
    /// The name of the interconnect.
    public let interconnectName: Swift.String?
    /// The state of the interconnect. The following are the possible values:
    ///
    ///
    ///
    ///                   requested: The initial state of an interconnect. The interconnect stays in the
    ///         requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    ///
    ///
    ///                   pending: The interconnect is approved, and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is up, and the interconnect is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The interconnect is being deleted.
    ///
    ///
    ///
    ///                   deleted: The interconnect is deleted.
    ///
    ///
    ///
    ///                   unknown: The state of the interconnect is not available.
    ///
    ///
    public let interconnectState: DirectConnectClientTypes.InterconnectState?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The time of the most recent call to DescribeLoa for this connection.
    public let loaIssueTime: ClientRuntime.Date?
    /// The location of the connection.
    public let location: Swift.String?
    /// The name of the service provider associated with the interconnect.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the interconnect.
    public let tags: [DirectConnectClientTypes.Tag]?

    public init (
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bandwidth: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        interconnectId: Swift.String? = nil,
        interconnectName: Swift.String? = nil,
        interconnectState: DirectConnectClientTypes.InterconnectState? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        loaIssueTime: ClientRuntime.Date? = nil,
        location: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bandwidth = bandwidth
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.interconnectId = interconnectId
        self.interconnectName = interconnectName
        self.interconnectState = interconnectState
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.providerName = providerName
        self.region = region
        self.tags = tags
    }
}

struct CreateInterconnectOutputResponseBody: Swift.Equatable {
    public let interconnectId: Swift.String?
    public let interconnectName: Swift.String?
    public let interconnectState: DirectConnectClientTypes.InterconnectState?
    public let region: Swift.String?
    public let location: Swift.String?
    public let bandwidth: Swift.String?
    public let loaIssueTime: ClientRuntime.Date?
    public let lagId: Swift.String?
    public let awsDevice: Swift.String?
    public let jumboFrameCapable: Swift.Bool?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
}

extension CreateInterconnectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case hasLogicalRedundancy
        case interconnectId
        case interconnectName
        case interconnectState
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case providerName
        case region
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interconnectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectId)
        interconnectId = interconnectIdDecoded
        let interconnectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectName)
        interconnectName = interconnectNameDecoded
        let interconnectStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.InterconnectState.self, forKey: .interconnectState)
        interconnectState = interconnectStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
    }
}

public struct CreateLagInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLagInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLagOutputError>
}

extension CreateLagInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLagInput(childConnectionTags: \(Swift.String(describing: childConnectionTags)), connectionId: \(Swift.String(describing: connectionId)), connectionsBandwidth: \(Swift.String(describing: connectionsBandwidth)), lagName: \(Swift.String(describing: lagName)), location: \(Swift.String(describing: location)), numberOfConnections: \(Swift.String(describing: numberOfConnections)), providerName: \(Swift.String(describing: providerName)), requestMACSec: \(Swift.String(describing: requestMACSec)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateLagInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childConnectionTags
        case connectionId
        case connectionsBandwidth
        case lagName
        case location
        case numberOfConnections
        case providerName
        case requestMACSec
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childConnectionTags = childConnectionTags {
            var childConnectionTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .childConnectionTags)
            for taglist0 in childConnectionTags {
                try childConnectionTagsContainer.encode(taglist0)
            }
        }
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let connectionsBandwidth = connectionsBandwidth {
            try encodeContainer.encode(connectionsBandwidth, forKey: .connectionsBandwidth)
        }
        if let lagName = lagName {
            try encodeContainer.encode(lagName, forKey: .lagName)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if numberOfConnections != 0 {
            try encodeContainer.encode(numberOfConnections, forKey: .numberOfConnections)
        }
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let requestMACSec = requestMACSec {
            try encodeContainer.encode(requestMACSec, forKey: .requestMACSec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateLagInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLagInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLagOutputError>
}

public struct CreateLagInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLagInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLagOutputError>
}

public struct CreateLagInput: Swift.Equatable {
    /// The tags to associate with the automtically created LAGs.
    public let childConnectionTags: [DirectConnectClientTypes.Tag]?
    /// The ID of an existing dedicated connection to migrate to the LAG.
    public let connectionId: Swift.String?
    /// The bandwidth of the individual physical dedicated connections bundled by the LAG. The
    ///       possible values are 1Gbps and 10Gbps.
    /// This member is required.
    public let connectionsBandwidth: Swift.String?
    /// The name of the LAG.
    /// This member is required.
    public let lagName: Swift.String?
    /// The location for the LAG.
    /// This member is required.
    public let location: Swift.String?
    /// The number of physical dedicated connections initially provisioned and bundled by the
    ///       LAG.
    /// This member is required.
    public let numberOfConnections: Swift.Int
    /// The name of the service provider associated with the LAG.
    public let providerName: Swift.String?
    /// Indicates whether the connection will support MAC Security (MACsec).
    ///
    ///             All connections in the LAG must be capable of  supporting MAC Security (MACsec). For information about MAC Security (MACsec) prerequisties, see  <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties in the Direct Connect User Guide.
    ///
    public let requestMACSec: Swift.Bool?
    /// The tags to associate with the LAG.
    public let tags: [DirectConnectClientTypes.Tag]?

    public init (
        childConnectionTags: [DirectConnectClientTypes.Tag]? = nil,
        connectionId: Swift.String? = nil,
        connectionsBandwidth: Swift.String? = nil,
        lagName: Swift.String? = nil,
        location: Swift.String? = nil,
        numberOfConnections: Swift.Int = 0,
        providerName: Swift.String? = nil,
        requestMACSec: Swift.Bool? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil
    )
    {
        self.childConnectionTags = childConnectionTags
        self.connectionId = connectionId
        self.connectionsBandwidth = connectionsBandwidth
        self.lagName = lagName
        self.location = location
        self.numberOfConnections = numberOfConnections
        self.providerName = providerName
        self.requestMACSec = requestMACSec
        self.tags = tags
    }
}

struct CreateLagInputBody: Swift.Equatable {
    public let numberOfConnections: Swift.Int
    public let location: Swift.String?
    public let connectionsBandwidth: Swift.String?
    public let lagName: Swift.String?
    public let connectionId: Swift.String?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let childConnectionTags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let requestMACSec: Swift.Bool?
}

extension CreateLagInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childConnectionTags
        case connectionId
        case connectionsBandwidth
        case lagName
        case location
        case numberOfConnections
        case providerName
        case requestMACSec
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numberOfConnectionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfConnections)
        numberOfConnections = numberOfConnectionsDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let connectionsBandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionsBandwidth)
        connectionsBandwidth = connectionsBandwidthDecoded
        let lagNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagName)
        lagName = lagNameDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let childConnectionTagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .childConnectionTags)
        var childConnectionTagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let childConnectionTagsContainer = childConnectionTagsContainer {
            childConnectionTagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in childConnectionTagsContainer {
                if let structure0 = structure0 {
                    childConnectionTagsDecoded0?.append(structure0)
                }
            }
        }
        childConnectionTags = childConnectionTagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let requestMACSecDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requestMACSec)
        requestMACSec = requestMACSecDecoded
    }
}

extension CreateLagOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLagOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateTagKeysException" : self = .duplicateTagKeysException(try DuplicateTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLagOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case duplicateTagKeysException(DuplicateTagKeysException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLagOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLagOutputResponse(allowsHostedConnections: \(Swift.String(describing: allowsHostedConnections)), awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), connections: \(Swift.String(describing: connections)), connectionsBandwidth: \(Swift.String(describing: connectionsBandwidth)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), lagName: \(Swift.String(describing: lagName)), lagState: \(Swift.String(describing: lagState)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), minimumLinks: \(Swift.String(describing: minimumLinks)), numberOfConnections: \(Swift.String(describing: numberOfConnections)), ownerAccount: \(Swift.String(describing: ownerAccount)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateLagOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLagOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.allowsHostedConnections = output.allowsHostedConnections
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.connections = output.connections
            self.connectionsBandwidth = output.connectionsBandwidth
            self.encryptionMode = output.encryptionMode
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.lagName = output.lagName
            self.lagState = output.lagState
            self.location = output.location
            self.macSecCapable = output.macSecCapable
            self.macSecKeys = output.macSecKeys
            self.minimumLinks = output.minimumLinks
            self.numberOfConnections = output.numberOfConnections
            self.ownerAccount = output.ownerAccount
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
        } else {
            self.allowsHostedConnections = false
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.connections = nil
            self.connectionsBandwidth = nil
            self.encryptionMode = nil
            self.hasLogicalRedundancy = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.lagName = nil
            self.lagState = nil
            self.location = nil
            self.macSecCapable = nil
            self.macSecKeys = nil
            self.minimumLinks = 0
            self.numberOfConnections = 0
            self.ownerAccount = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
        }
    }
}

/// Information about a link aggregation group (LAG).
public struct CreateLagOutputResponse: Swift.Equatable {
    /// Indicates whether the LAG can host other connections.
    public let allowsHostedConnections: Swift.Bool
    /// The Direct Connect endpoint that hosts the LAG.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that hosts the LAG.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The connections bundled by the LAG.
    public let connections: [DirectConnectClientTypes.Connection]?
    /// The individual bandwidth of the physical connections bundled by the LAG. The possible
    ///       values are 1Gbps and 10Gbps.
    public let connectionsBandwidth: Swift.String?
    /// The LAG MAC Security (MACsec) encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?
    /// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The name of the LAG.
    public let lagName: Swift.String?
    /// The state of the LAG. The following are the possible values:
    ///
    ///
    ///
    ///                   requested: The initial state of a LAG. The LAG stays in the
    ///                 requested state until the Letter of Authorization (LOA) is available.
    ///
    ///
    ///
    ///                   pending: The LAG has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is established and the LAG is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The LAG is being deleted.
    ///
    ///
    ///
    ///                   deleted: The LAG is deleted.
    ///
    ///
    ///
    ///                   unknown: The state of the LAG is not available.
    ///
    ///
    public let lagState: DirectConnectClientTypes.LagState?
    /// The location of the LAG.
    public let location: Swift.String?
    /// Indicates whether the LAG supports MAC Security (MACsec).
    public let macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the LAG.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.
    public let minimumLinks: Swift.Int
    /// The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.
    public let numberOfConnections: Swift.Int
    /// The ID of the account that owns the LAG.
    public let ownerAccount: Swift.String?
    /// The name of the service provider associated with the LAG.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the LAG.
    public let tags: [DirectConnectClientTypes.Tag]?

    public init (
        allowsHostedConnections: Swift.Bool = false,
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        connections: [DirectConnectClientTypes.Connection]? = nil,
        connectionsBandwidth: Swift.String? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        lagName: Swift.String? = nil,
        lagState: DirectConnectClientTypes.LagState? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        minimumLinks: Swift.Int = 0,
        numberOfConnections: Swift.Int = 0,
        ownerAccount: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil
    )
    {
        self.allowsHostedConnections = allowsHostedConnections
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.connections = connections
        self.connectionsBandwidth = connectionsBandwidth
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.lagName = lagName
        self.lagState = lagState
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.minimumLinks = minimumLinks
        self.numberOfConnections = numberOfConnections
        self.ownerAccount = ownerAccount
        self.providerName = providerName
        self.region = region
        self.tags = tags
    }
}

struct CreateLagOutputResponseBody: Swift.Equatable {
    public let connectionsBandwidth: Swift.String?
    public let numberOfConnections: Swift.Int
    public let lagId: Swift.String?
    public let ownerAccount: Swift.String?
    public let lagName: Swift.String?
    public let lagState: DirectConnectClientTypes.LagState?
    public let location: Swift.String?
    public let region: Swift.String?
    public let minimumLinks: Swift.Int
    public let awsDevice: Swift.String?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let connections: [DirectConnectClientTypes.Connection]?
    public let allowsHostedConnections: Swift.Bool
    public let jumboFrameCapable: Swift.Bool?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let macSecCapable: Swift.Bool?
    public let encryptionMode: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension CreateLagOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowsHostedConnections
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case connections
        case connectionsBandwidth
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case lagName
        case lagState
        case location
        case macSecCapable
        case macSecKeys
        case minimumLinks
        case numberOfConnections
        case ownerAccount
        case providerName
        case region
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionsBandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionsBandwidth)
        connectionsBandwidth = connectionsBandwidthDecoded
        let numberOfConnectionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfConnections)
        numberOfConnections = numberOfConnectionsDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let lagNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagName)
        lagName = lagNameDecoded
        let lagStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.LagState.self, forKey: .lagState)
        lagState = lagStateDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let minimumLinksDecoded = try containerValues.decode(Swift.Int.self, forKey: .minimumLinks)
        minimumLinks = minimumLinksDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let connectionsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Connection?].self, forKey: .connections)
        var connectionsDecoded0:[DirectConnectClientTypes.Connection]? = nil
        if let connectionsContainer = connectionsContainer {
            connectionsDecoded0 = [DirectConnectClientTypes.Connection]()
            for structure0 in connectionsContainer {
                if let structure0 = structure0 {
                    connectionsDecoded0?.append(structure0)
                }
            }
        }
        connections = connectionsDecoded0
        let allowsHostedConnectionsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowsHostedConnections)
        allowsHostedConnections = allowsHostedConnectionsDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct CreatePrivateVirtualInterfaceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePrivateVirtualInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePrivateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePrivateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePrivateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePrivateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePrivateVirtualInterfaceOutputError>
}

extension CreatePrivateVirtualInterfaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePrivateVirtualInterfaceInput(connectionId: \(Swift.String(describing: connectionId)), newPrivateVirtualInterface: \(Swift.String(describing: newPrivateVirtualInterface)))"}
}

extension CreatePrivateVirtualInterfaceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newPrivateVirtualInterface
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let newPrivateVirtualInterface = newPrivateVirtualInterface {
            try encodeContainer.encode(newPrivateVirtualInterface, forKey: .newPrivateVirtualInterface)
        }
    }
}

public struct CreatePrivateVirtualInterfaceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePrivateVirtualInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePrivateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePrivateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePrivateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePrivateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePrivateVirtualInterfaceOutputError>
}

public struct CreatePrivateVirtualInterfaceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePrivateVirtualInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePrivateVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePrivateVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePrivateVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePrivateVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePrivateVirtualInterfaceOutputError>
}

public struct CreatePrivateVirtualInterfaceInput: Swift.Equatable {
    /// The ID of the connection.
    /// This member is required.
    public let connectionId: Swift.String?
    /// Information about the private virtual interface.
    /// This member is required.
    public let newPrivateVirtualInterface: DirectConnectClientTypes.NewPrivateVirtualInterface?

    public init (
        connectionId: Swift.String? = nil,
        newPrivateVirtualInterface: DirectConnectClientTypes.NewPrivateVirtualInterface? = nil
    )
    {
        self.connectionId = connectionId
        self.newPrivateVirtualInterface = newPrivateVirtualInterface
    }
}

struct CreatePrivateVirtualInterfaceInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let newPrivateVirtualInterface: DirectConnectClientTypes.NewPrivateVirtualInterface?
}

extension CreatePrivateVirtualInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newPrivateVirtualInterface
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let newPrivateVirtualInterfaceDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.NewPrivateVirtualInterface.self, forKey: .newPrivateVirtualInterface)
        newPrivateVirtualInterface = newPrivateVirtualInterfaceDecoded
    }
}

extension CreatePrivateVirtualInterfaceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePrivateVirtualInterfaceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateTagKeysException" : self = .duplicateTagKeysException(try DuplicateTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePrivateVirtualInterfaceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case duplicateTagKeysException(DuplicateTagKeysException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePrivateVirtualInterfaceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePrivateVirtualInterfaceOutputResponse(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), amazonSideAsn: \(Swift.String(describing: amazonSideAsn)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bgpPeers: \(Swift.String(describing: bgpPeers)), connectionId: \(Swift.String(describing: connectionId)), customerAddress: \(Swift.String(describing: customerAddress)), customerRouterConfig: \(Swift.String(describing: customerRouterConfig)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), location: \(Swift.String(describing: location)), mtu: \(Swift.String(describing: mtu)), ownerAccount: \(Swift.String(describing: ownerAccount)), region: \(Swift.String(describing: region)), routeFilterPrefixes: \(Swift.String(describing: routeFilterPrefixes)), tags: \(Swift.String(describing: tags)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), virtualInterfaceState: \(Swift.String(describing: virtualInterfaceState)), virtualInterfaceType: \(Swift.String(describing: virtualInterfaceType)), vlan: \(Swift.String(describing: vlan)))"}
}

extension CreatePrivateVirtualInterfaceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreatePrivateVirtualInterfaceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addressFamily = output.addressFamily
            self.amazonAddress = output.amazonAddress
            self.amazonSideAsn = output.amazonSideAsn
            self.asn = output.asn
            self.authKey = output.authKey
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bgpPeers = output.bgpPeers
            self.connectionId = output.connectionId
            self.customerAddress = output.customerAddress
            self.customerRouterConfig = output.customerRouterConfig
            self.directConnectGatewayId = output.directConnectGatewayId
            self.jumboFrameCapable = output.jumboFrameCapable
            self.location = output.location
            self.mtu = output.mtu
            self.ownerAccount = output.ownerAccount
            self.region = output.region
            self.routeFilterPrefixes = output.routeFilterPrefixes
            self.tags = output.tags
            self.virtualGatewayId = output.virtualGatewayId
            self.virtualInterfaceId = output.virtualInterfaceId
            self.virtualInterfaceName = output.virtualInterfaceName
            self.virtualInterfaceState = output.virtualInterfaceState
            self.virtualInterfaceType = output.virtualInterfaceType
            self.vlan = output.vlan
        } else {
            self.addressFamily = nil
            self.amazonAddress = nil
            self.amazonSideAsn = nil
            self.asn = 0
            self.authKey = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bgpPeers = nil
            self.connectionId = nil
            self.customerAddress = nil
            self.customerRouterConfig = nil
            self.directConnectGatewayId = nil
            self.jumboFrameCapable = nil
            self.location = nil
            self.mtu = nil
            self.ownerAccount = nil
            self.region = nil
            self.routeFilterPrefixes = nil
            self.tags = nil
            self.virtualGatewayId = nil
            self.virtualInterfaceId = nil
            self.virtualInterfaceName = nil
            self.virtualInterfaceState = nil
            self.virtualInterfaceType = nil
            self.vlan = 0
        }
    }
}

/// Information about a virtual interface.
public struct CreatePrivateVirtualInterfaceOutputResponse: Swift.Equatable {
    /// The address family for the BGP peer.
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    /// The IP address assigned to the Amazon interface.
    public let amazonAddress: Swift.String?
    /// The autonomous system number (ASN) for the Amazon side of the connection.
    public let amazonSideAsn: Swift.Int?
    /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
    ///          The valid values are 1-2147483647.
    public let asn: Swift.Int
    /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
    public let authKey: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The BGP peers configured on this virtual interface.
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The IP address assigned to the customer interface.
    public let customerAddress: Swift.String?
    /// The customer router configuration.
    public let customerRouterConfig: Swift.String?
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The location of the connection.
    public let location: Swift.String?
    /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
    public let mtu: Swift.Int?
    /// The ID of the account that owns the virtual interface.
    public let ownerAccount: Swift.String?
    /// The Region where the virtual interface is located.
    public let region: Swift.String?
    /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    /// The tags associated with the virtual interface.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
    public let virtualGatewayId: Swift.String?
    /// The ID of the virtual interface.
    public let virtualInterfaceId: Swift.String?
    /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
    public let virtualInterfaceName: Swift.String?
    /// The state of the virtual interface. The following are the possible values:
    ///
    ///
    ///
    ///                   confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.
    ///
    ///
    ///
    ///                   verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.
    ///
    ///
    ///
    ///                   pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.
    ///
    ///
    ///
    ///                   available: A virtual interface that is able to forward traffic.
    ///
    ///
    ///
    ///                   down: A virtual interface that is BGP down.
    ///
    ///
    ///
    ///                   deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.
    ///
    ///
    ///
    ///                   deleted: A virtual interface that cannot forward traffic.
    ///
    ///
    ///
    ///                   rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.
    ///
    ///
    ///
    ///                   unknown: The state of the virtual interface is not available.
    ///
    ///
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    /// The type of virtual interface. The possible values are private and public.
    public let virtualInterfaceType: Swift.String?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
        amazonAddress: Swift.String? = nil,
        amazonSideAsn: Swift.Int? = nil,
        asn: Swift.Int = 0,
        authKey: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bgpPeers: [DirectConnectClientTypes.BGPPeer]? = nil,
        connectionId: Swift.String? = nil,
        customerAddress: Swift.String? = nil,
        customerRouterConfig: Swift.String? = nil,
        directConnectGatewayId: Swift.String? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        location: Swift.String? = nil,
        mtu: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        region: Swift.String? = nil,
        routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        virtualGatewayId: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil,
        virtualInterfaceName: Swift.String? = nil,
        virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState? = nil,
        virtualInterfaceType: Swift.String? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.addressFamily = addressFamily
        self.amazonAddress = amazonAddress
        self.amazonSideAsn = amazonSideAsn
        self.asn = asn
        self.authKey = authKey
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bgpPeers = bgpPeers
        self.connectionId = connectionId
        self.customerAddress = customerAddress
        self.customerRouterConfig = customerRouterConfig
        self.directConnectGatewayId = directConnectGatewayId
        self.jumboFrameCapable = jumboFrameCapable
        self.location = location
        self.mtu = mtu
        self.ownerAccount = ownerAccount
        self.region = region
        self.routeFilterPrefixes = routeFilterPrefixes
        self.tags = tags
        self.virtualGatewayId = virtualGatewayId
        self.virtualInterfaceId = virtualInterfaceId
        self.virtualInterfaceName = virtualInterfaceName
        self.virtualInterfaceState = virtualInterfaceState
        self.virtualInterfaceType = virtualInterfaceType
        self.vlan = vlan
    }
}

struct CreatePrivateVirtualInterfaceOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let virtualInterfaceId: Swift.String?
    public let location: Swift.String?
    public let connectionId: Swift.String?
    public let virtualInterfaceType: Swift.String?
    public let virtualInterfaceName: Swift.String?
    public let vlan: Swift.Int
    public let asn: Swift.Int
    public let amazonSideAsn: Swift.Int?
    public let authKey: Swift.String?
    public let amazonAddress: Swift.String?
    public let customerAddress: Swift.String?
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    public let customerRouterConfig: Swift.String?
    public let mtu: Swift.Int?
    public let jumboFrameCapable: Swift.Bool?
    public let virtualGatewayId: Swift.String?
    public let directConnectGatewayId: Swift.String?
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    public let region: Swift.String?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let tags: [DirectConnectClientTypes.Tag]?
}

extension CreatePrivateVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case amazonSideAsn
        case asn
        case authKey
        case awsDeviceV2
        case awsLogicalDeviceId
        case bgpPeers
        case connectionId
        case customerAddress
        case customerRouterConfig
        case directConnectGatewayId
        case jumboFrameCapable
        case location
        case mtu
        case ownerAccount
        case region
        case routeFilterPrefixes
        case tags
        case virtualGatewayId
        case virtualInterfaceId
        case virtualInterfaceName
        case virtualInterfaceState
        case virtualInterfaceType
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let virtualInterfaceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceType)
        virtualInterfaceType = virtualInterfaceTypeDecoded
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
        let customerRouterConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerRouterConfig)
        customerRouterConfig = customerRouterConfigDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let routeFilterPrefixesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .routeFilterPrefixes)
        var routeFilterPrefixesDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let routeFilterPrefixesContainer = routeFilterPrefixesContainer {
            routeFilterPrefixesDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in routeFilterPrefixesContainer {
                if let structure0 = structure0 {
                    routeFilterPrefixesDecoded0?.append(structure0)
                }
            }
        }
        routeFilterPrefixes = routeFilterPrefixesDecoded0
        let bgpPeersContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.BGPPeer?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[DirectConnectClientTypes.BGPPeer]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [DirectConnectClientTypes.BGPPeer]()
            for structure0 in bgpPeersContainer {
                if let structure0 = structure0 {
                    bgpPeersDecoded0?.append(structure0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public struct CreatePublicVirtualInterfaceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePublicVirtualInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePublicVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePublicVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePublicVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePublicVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePublicVirtualInterfaceOutputError>
}

extension CreatePublicVirtualInterfaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePublicVirtualInterfaceInput(connectionId: \(Swift.String(describing: connectionId)), newPublicVirtualInterface: \(Swift.String(describing: newPublicVirtualInterface)))"}
}

extension CreatePublicVirtualInterfaceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newPublicVirtualInterface
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let newPublicVirtualInterface = newPublicVirtualInterface {
            try encodeContainer.encode(newPublicVirtualInterface, forKey: .newPublicVirtualInterface)
        }
    }
}

public struct CreatePublicVirtualInterfaceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePublicVirtualInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePublicVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePublicVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePublicVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePublicVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePublicVirtualInterfaceOutputError>
}

public struct CreatePublicVirtualInterfaceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePublicVirtualInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePublicVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePublicVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePublicVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePublicVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePublicVirtualInterfaceOutputError>
}

public struct CreatePublicVirtualInterfaceInput: Swift.Equatable {
    /// The ID of the connection.
    /// This member is required.
    public let connectionId: Swift.String?
    /// Information about the public virtual interface.
    /// This member is required.
    public let newPublicVirtualInterface: DirectConnectClientTypes.NewPublicVirtualInterface?

    public init (
        connectionId: Swift.String? = nil,
        newPublicVirtualInterface: DirectConnectClientTypes.NewPublicVirtualInterface? = nil
    )
    {
        self.connectionId = connectionId
        self.newPublicVirtualInterface = newPublicVirtualInterface
    }
}

struct CreatePublicVirtualInterfaceInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let newPublicVirtualInterface: DirectConnectClientTypes.NewPublicVirtualInterface?
}

extension CreatePublicVirtualInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newPublicVirtualInterface
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let newPublicVirtualInterfaceDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.NewPublicVirtualInterface.self, forKey: .newPublicVirtualInterface)
        newPublicVirtualInterface = newPublicVirtualInterfaceDecoded
    }
}

extension CreatePublicVirtualInterfaceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePublicVirtualInterfaceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateTagKeysException" : self = .duplicateTagKeysException(try DuplicateTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePublicVirtualInterfaceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case duplicateTagKeysException(DuplicateTagKeysException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePublicVirtualInterfaceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePublicVirtualInterfaceOutputResponse(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), amazonSideAsn: \(Swift.String(describing: amazonSideAsn)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bgpPeers: \(Swift.String(describing: bgpPeers)), connectionId: \(Swift.String(describing: connectionId)), customerAddress: \(Swift.String(describing: customerAddress)), customerRouterConfig: \(Swift.String(describing: customerRouterConfig)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), location: \(Swift.String(describing: location)), mtu: \(Swift.String(describing: mtu)), ownerAccount: \(Swift.String(describing: ownerAccount)), region: \(Swift.String(describing: region)), routeFilterPrefixes: \(Swift.String(describing: routeFilterPrefixes)), tags: \(Swift.String(describing: tags)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), virtualInterfaceState: \(Swift.String(describing: virtualInterfaceState)), virtualInterfaceType: \(Swift.String(describing: virtualInterfaceType)), vlan: \(Swift.String(describing: vlan)))"}
}

extension CreatePublicVirtualInterfaceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreatePublicVirtualInterfaceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addressFamily = output.addressFamily
            self.amazonAddress = output.amazonAddress
            self.amazonSideAsn = output.amazonSideAsn
            self.asn = output.asn
            self.authKey = output.authKey
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bgpPeers = output.bgpPeers
            self.connectionId = output.connectionId
            self.customerAddress = output.customerAddress
            self.customerRouterConfig = output.customerRouterConfig
            self.directConnectGatewayId = output.directConnectGatewayId
            self.jumboFrameCapable = output.jumboFrameCapable
            self.location = output.location
            self.mtu = output.mtu
            self.ownerAccount = output.ownerAccount
            self.region = output.region
            self.routeFilterPrefixes = output.routeFilterPrefixes
            self.tags = output.tags
            self.virtualGatewayId = output.virtualGatewayId
            self.virtualInterfaceId = output.virtualInterfaceId
            self.virtualInterfaceName = output.virtualInterfaceName
            self.virtualInterfaceState = output.virtualInterfaceState
            self.virtualInterfaceType = output.virtualInterfaceType
            self.vlan = output.vlan
        } else {
            self.addressFamily = nil
            self.amazonAddress = nil
            self.amazonSideAsn = nil
            self.asn = 0
            self.authKey = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bgpPeers = nil
            self.connectionId = nil
            self.customerAddress = nil
            self.customerRouterConfig = nil
            self.directConnectGatewayId = nil
            self.jumboFrameCapable = nil
            self.location = nil
            self.mtu = nil
            self.ownerAccount = nil
            self.region = nil
            self.routeFilterPrefixes = nil
            self.tags = nil
            self.virtualGatewayId = nil
            self.virtualInterfaceId = nil
            self.virtualInterfaceName = nil
            self.virtualInterfaceState = nil
            self.virtualInterfaceType = nil
            self.vlan = 0
        }
    }
}

/// Information about a virtual interface.
public struct CreatePublicVirtualInterfaceOutputResponse: Swift.Equatable {
    /// The address family for the BGP peer.
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    /// The IP address assigned to the Amazon interface.
    public let amazonAddress: Swift.String?
    /// The autonomous system number (ASN) for the Amazon side of the connection.
    public let amazonSideAsn: Swift.Int?
    /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
    ///          The valid values are 1-2147483647.
    public let asn: Swift.Int
    /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
    public let authKey: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The BGP peers configured on this virtual interface.
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The IP address assigned to the customer interface.
    public let customerAddress: Swift.String?
    /// The customer router configuration.
    public let customerRouterConfig: Swift.String?
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The location of the connection.
    public let location: Swift.String?
    /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
    public let mtu: Swift.Int?
    /// The ID of the account that owns the virtual interface.
    public let ownerAccount: Swift.String?
    /// The Region where the virtual interface is located.
    public let region: Swift.String?
    /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    /// The tags associated with the virtual interface.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
    public let virtualGatewayId: Swift.String?
    /// The ID of the virtual interface.
    public let virtualInterfaceId: Swift.String?
    /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
    public let virtualInterfaceName: Swift.String?
    /// The state of the virtual interface. The following are the possible values:
    ///
    ///
    ///
    ///                   confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.
    ///
    ///
    ///
    ///                   verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.
    ///
    ///
    ///
    ///                   pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.
    ///
    ///
    ///
    ///                   available: A virtual interface that is able to forward traffic.
    ///
    ///
    ///
    ///                   down: A virtual interface that is BGP down.
    ///
    ///
    ///
    ///                   deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.
    ///
    ///
    ///
    ///                   deleted: A virtual interface that cannot forward traffic.
    ///
    ///
    ///
    ///                   rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.
    ///
    ///
    ///
    ///                   unknown: The state of the virtual interface is not available.
    ///
    ///
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    /// The type of virtual interface. The possible values are private and public.
    public let virtualInterfaceType: Swift.String?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
        amazonAddress: Swift.String? = nil,
        amazonSideAsn: Swift.Int? = nil,
        asn: Swift.Int = 0,
        authKey: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bgpPeers: [DirectConnectClientTypes.BGPPeer]? = nil,
        connectionId: Swift.String? = nil,
        customerAddress: Swift.String? = nil,
        customerRouterConfig: Swift.String? = nil,
        directConnectGatewayId: Swift.String? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        location: Swift.String? = nil,
        mtu: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        region: Swift.String? = nil,
        routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        virtualGatewayId: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil,
        virtualInterfaceName: Swift.String? = nil,
        virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState? = nil,
        virtualInterfaceType: Swift.String? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.addressFamily = addressFamily
        self.amazonAddress = amazonAddress
        self.amazonSideAsn = amazonSideAsn
        self.asn = asn
        self.authKey = authKey
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bgpPeers = bgpPeers
        self.connectionId = connectionId
        self.customerAddress = customerAddress
        self.customerRouterConfig = customerRouterConfig
        self.directConnectGatewayId = directConnectGatewayId
        self.jumboFrameCapable = jumboFrameCapable
        self.location = location
        self.mtu = mtu
        self.ownerAccount = ownerAccount
        self.region = region
        self.routeFilterPrefixes = routeFilterPrefixes
        self.tags = tags
        self.virtualGatewayId = virtualGatewayId
        self.virtualInterfaceId = virtualInterfaceId
        self.virtualInterfaceName = virtualInterfaceName
        self.virtualInterfaceState = virtualInterfaceState
        self.virtualInterfaceType = virtualInterfaceType
        self.vlan = vlan
    }
}

struct CreatePublicVirtualInterfaceOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let virtualInterfaceId: Swift.String?
    public let location: Swift.String?
    public let connectionId: Swift.String?
    public let virtualInterfaceType: Swift.String?
    public let virtualInterfaceName: Swift.String?
    public let vlan: Swift.Int
    public let asn: Swift.Int
    public let amazonSideAsn: Swift.Int?
    public let authKey: Swift.String?
    public let amazonAddress: Swift.String?
    public let customerAddress: Swift.String?
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    public let customerRouterConfig: Swift.String?
    public let mtu: Swift.Int?
    public let jumboFrameCapable: Swift.Bool?
    public let virtualGatewayId: Swift.String?
    public let directConnectGatewayId: Swift.String?
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    public let region: Swift.String?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let tags: [DirectConnectClientTypes.Tag]?
}

extension CreatePublicVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case amazonSideAsn
        case asn
        case authKey
        case awsDeviceV2
        case awsLogicalDeviceId
        case bgpPeers
        case connectionId
        case customerAddress
        case customerRouterConfig
        case directConnectGatewayId
        case jumboFrameCapable
        case location
        case mtu
        case ownerAccount
        case region
        case routeFilterPrefixes
        case tags
        case virtualGatewayId
        case virtualInterfaceId
        case virtualInterfaceName
        case virtualInterfaceState
        case virtualInterfaceType
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let virtualInterfaceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceType)
        virtualInterfaceType = virtualInterfaceTypeDecoded
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
        let customerRouterConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerRouterConfig)
        customerRouterConfig = customerRouterConfigDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let routeFilterPrefixesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .routeFilterPrefixes)
        var routeFilterPrefixesDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let routeFilterPrefixesContainer = routeFilterPrefixesContainer {
            routeFilterPrefixesDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in routeFilterPrefixesContainer {
                if let structure0 = structure0 {
                    routeFilterPrefixesDecoded0?.append(structure0)
                }
            }
        }
        routeFilterPrefixes = routeFilterPrefixesDecoded0
        let bgpPeersContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.BGPPeer?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[DirectConnectClientTypes.BGPPeer]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [DirectConnectClientTypes.BGPPeer]()
            for structure0 in bgpPeersContainer {
                if let structure0 = structure0 {
                    bgpPeersDecoded0?.append(structure0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public struct CreateTransitVirtualInterfaceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTransitVirtualInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTransitVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTransitVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTransitVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTransitVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTransitVirtualInterfaceOutputError>
}

extension CreateTransitVirtualInterfaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTransitVirtualInterfaceInput(connectionId: \(Swift.String(describing: connectionId)), newTransitVirtualInterface: \(Swift.String(describing: newTransitVirtualInterface)))"}
}

extension CreateTransitVirtualInterfaceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newTransitVirtualInterface
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let newTransitVirtualInterface = newTransitVirtualInterface {
            try encodeContainer.encode(newTransitVirtualInterface, forKey: .newTransitVirtualInterface)
        }
    }
}

public struct CreateTransitVirtualInterfaceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTransitVirtualInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTransitVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTransitVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTransitVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTransitVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTransitVirtualInterfaceOutputError>
}

public struct CreateTransitVirtualInterfaceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTransitVirtualInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTransitVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTransitVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTransitVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTransitVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTransitVirtualInterfaceOutputError>
}

public struct CreateTransitVirtualInterfaceInput: Swift.Equatable {
    /// The ID of the connection.
    /// This member is required.
    public let connectionId: Swift.String?
    /// Information about the transit virtual interface.
    /// This member is required.
    public let newTransitVirtualInterface: DirectConnectClientTypes.NewTransitVirtualInterface?

    public init (
        connectionId: Swift.String? = nil,
        newTransitVirtualInterface: DirectConnectClientTypes.NewTransitVirtualInterface? = nil
    )
    {
        self.connectionId = connectionId
        self.newTransitVirtualInterface = newTransitVirtualInterface
    }
}

struct CreateTransitVirtualInterfaceInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let newTransitVirtualInterface: DirectConnectClientTypes.NewTransitVirtualInterface?
}

extension CreateTransitVirtualInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case newTransitVirtualInterface
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let newTransitVirtualInterfaceDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.NewTransitVirtualInterface.self, forKey: .newTransitVirtualInterface)
        newTransitVirtualInterface = newTransitVirtualInterfaceDecoded
    }
}

extension CreateTransitVirtualInterfaceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTransitVirtualInterfaceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateTagKeysException" : self = .duplicateTagKeysException(try DuplicateTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTransitVirtualInterfaceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case duplicateTagKeysException(DuplicateTagKeysException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTransitVirtualInterfaceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTransitVirtualInterfaceOutputResponse(virtualInterface: \(Swift.String(describing: virtualInterface)))"}
}

extension CreateTransitVirtualInterfaceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTransitVirtualInterfaceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualInterface = output.virtualInterface
        } else {
            self.virtualInterface = nil
        }
    }
}

public struct CreateTransitVirtualInterfaceOutputResponse: Swift.Equatable {
    /// Information about a virtual interface.
    public let virtualInterface: DirectConnectClientTypes.VirtualInterface?

    public init (
        virtualInterface: DirectConnectClientTypes.VirtualInterface? = nil
    )
    {
        self.virtualInterface = virtualInterface
    }
}

struct CreateTransitVirtualInterfaceOutputResponseBody: Swift.Equatable {
    public let virtualInterface: DirectConnectClientTypes.VirtualInterface?
}

extension CreateTransitVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterface
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterface.self, forKey: .virtualInterface)
        virtualInterface = virtualInterfaceDecoded
    }
}

public struct DeleteBGPPeerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBGPPeerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBGPPeerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBGPPeerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBGPPeerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBGPPeerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBGPPeerOutputError>
}

extension DeleteBGPPeerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBGPPeerInput(asn: \(Swift.String(describing: asn)), bgpPeerId: \(Swift.String(describing: bgpPeerId)), customerAddress: \(Swift.String(describing: customerAddress)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension DeleteBGPPeerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asn
        case bgpPeerId
        case customerAddress
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let bgpPeerId = bgpPeerId {
            try encodeContainer.encode(bgpPeerId, forKey: .bgpPeerId)
        }
        if let customerAddress = customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct DeleteBGPPeerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBGPPeerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBGPPeerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBGPPeerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBGPPeerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBGPPeerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBGPPeerOutputError>
}

public struct DeleteBGPPeerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBGPPeerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBGPPeerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBGPPeerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBGPPeerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBGPPeerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBGPPeerOutputError>
}

public struct DeleteBGPPeerInput: Swift.Equatable {
    /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
    public let asn: Swift.Int
    /// The ID of the BGP peer.
    public let bgpPeerId: Swift.String?
    /// The IP address assigned to the customer interface.
    public let customerAddress: Swift.String?
    /// The ID of the virtual interface.
    public let virtualInterfaceId: Swift.String?

    public init (
        asn: Swift.Int = 0,
        bgpPeerId: Swift.String? = nil,
        customerAddress: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.asn = asn
        self.bgpPeerId = bgpPeerId
        self.customerAddress = customerAddress
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct DeleteBGPPeerInputBody: Swift.Equatable {
    public let virtualInterfaceId: Swift.String?
    public let asn: Swift.Int
    public let customerAddress: Swift.String?
    public let bgpPeerId: Swift.String?
}

extension DeleteBGPPeerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asn
        case bgpPeerId
        case customerAddress
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let bgpPeerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bgpPeerId)
        bgpPeerId = bgpPeerIdDecoded
    }
}

extension DeleteBGPPeerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBGPPeerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBGPPeerOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBGPPeerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBGPPeerOutputResponse(virtualInterface: \(Swift.String(describing: virtualInterface)))"}
}

extension DeleteBGPPeerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteBGPPeerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualInterface = output.virtualInterface
        } else {
            self.virtualInterface = nil
        }
    }
}

public struct DeleteBGPPeerOutputResponse: Swift.Equatable {
    /// The virtual interface.
    public let virtualInterface: DirectConnectClientTypes.VirtualInterface?

    public init (
        virtualInterface: DirectConnectClientTypes.VirtualInterface? = nil
    )
    {
        self.virtualInterface = virtualInterface
    }
}

struct DeleteBGPPeerOutputResponseBody: Swift.Equatable {
    public let virtualInterface: DirectConnectClientTypes.VirtualInterface?
}

extension DeleteBGPPeerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterface
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterface.self, forKey: .virtualInterface)
        virtualInterface = virtualInterfaceDecoded
    }
}

public struct DeleteConnectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConnectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConnectionOutputError>
}

extension DeleteConnectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConnectionInput(connectionId: \(Swift.String(describing: connectionId)))"}
}

extension DeleteConnectionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
    }
}

public struct DeleteConnectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConnectionOutputError>
}

public struct DeleteConnectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConnectionOutputError>
}

public struct DeleteConnectionInput: Swift.Equatable {
    /// The ID of the connection.
    /// This member is required.
    public let connectionId: Swift.String?

    public init (
        connectionId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
    }
}

struct DeleteConnectionInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
}

extension DeleteConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
    }
}

extension DeleteConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConnectionOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConnectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConnectionOutputResponse(awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bandwidth: \(Swift.String(describing: bandwidth)), connectionId: \(Swift.String(describing: connectionId)), connectionName: \(Swift.String(describing: connectionName)), connectionState: \(Swift.String(describing: connectionState)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), loaIssueTime: \(Swift.String(describing: loaIssueTime)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), ownerAccount: \(Swift.String(describing: ownerAccount)), partnerName: \(Swift.String(describing: partnerName)), portEncryptionStatus: \(Swift.String(describing: portEncryptionStatus)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)), vlan: \(Swift.String(describing: vlan)))"}
}

extension DeleteConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bandwidth = output.bandwidth
            self.connectionId = output.connectionId
            self.connectionName = output.connectionName
            self.connectionState = output.connectionState
            self.encryptionMode = output.encryptionMode
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.loaIssueTime = output.loaIssueTime
            self.location = output.location
            self.macSecCapable = output.macSecCapable
            self.macSecKeys = output.macSecKeys
            self.ownerAccount = output.ownerAccount
            self.partnerName = output.partnerName
            self.portEncryptionStatus = output.portEncryptionStatus
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
            self.vlan = output.vlan
        } else {
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bandwidth = nil
            self.connectionId = nil
            self.connectionName = nil
            self.connectionState = nil
            self.encryptionMode = nil
            self.hasLogicalRedundancy = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.loaIssueTime = nil
            self.location = nil
            self.macSecCapable = nil
            self.macSecKeys = nil
            self.ownerAccount = nil
            self.partnerName = nil
            self.portEncryptionStatus = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
            self.vlan = 0
        }
    }
}

/// Information about an Direct Connect connection.
public struct DeleteConnectionOutputResponse: Swift.Equatable {
    /// The Direct Connect endpoint on which the physical connection terminates.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The bandwidth of the connection.
    public let bandwidth: Swift.String?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The name of the connection.
    public let connectionName: Swift.String?
    /// The state of the connection. The following are the possible values:
    ///
    ///
    ///
    ///                   ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.
    ///
    ///
    ///
    ///                   requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    ///
    ///
    ///                   pending: The connection has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is up and the connection is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The connection is being deleted.
    ///
    ///
    ///
    ///                   deleted: The connection has been deleted.
    ///
    ///
    ///
    ///                   rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.
    ///
    ///
    ///
    ///                   unknown: The state of the connection is not available.
    ///
    ///
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    /// The MAC Security (MACsec) connection encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?
    /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The time of the most recent call to DescribeLoa for this connection.
    public let loaIssueTime: ClientRuntime.Date?
    /// The location of the connection.
    public let location: Swift.String?
    /// Indicates whether the connection supports MAC Security (MACsec).
    public let macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the connection.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The ID of the account that owns the connection.
    public let ownerAccount: Swift.String?
    /// The name of the Direct Connect service provider associated with the connection.
    public let partnerName: Swift.String?
    /// The MAC Security (MACsec) port link status of the connection.
    ///          The valid values are Encryption Up, which means that there is an active Connection Key Name, or Encryption Down.
    public let portEncryptionStatus: Swift.String?
    /// The name of the service provider associated with the connection.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the connection.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bandwidth: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        connectionState: DirectConnectClientTypes.ConnectionState? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        loaIssueTime: ClientRuntime.Date? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        ownerAccount: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        portEncryptionStatus: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bandwidth = bandwidth
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.connectionState = connectionState
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.ownerAccount = ownerAccount
        self.partnerName = partnerName
        self.portEncryptionStatus = portEncryptionStatus
        self.providerName = providerName
        self.region = region
        self.tags = tags
        self.vlan = vlan
    }
}

struct DeleteConnectionOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let connectionId: Swift.String?
    public let connectionName: Swift.String?
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    public let region: Swift.String?
    public let location: Swift.String?
    public let bandwidth: Swift.String?
    public let vlan: Swift.Int
    public let partnerName: Swift.String?
    public let loaIssueTime: ClientRuntime.Date?
    public let lagId: Swift.String?
    public let awsDevice: Swift.String?
    public let jumboFrameCapable: Swift.Bool?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let macSecCapable: Swift.Bool?
    public let portEncryptionStatus: Swift.String?
    public let encryptionMode: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension DeleteConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case connectionId
        case connectionName
        case connectionState
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case macSecCapable
        case macSecKeys
        case ownerAccount
        case partnerName
        case portEncryptionStatus
        case providerName
        case region
        case tags
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let portEncryptionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portEncryptionStatus)
        portEncryptionStatus = portEncryptionStatusDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct DeleteDirectConnectGatewayAssociationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectConnectGatewayAssociationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectConnectGatewayAssociationOutputError>
}

extension DeleteDirectConnectGatewayAssociationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDirectConnectGatewayAssociationInput(associationId: \(Swift.String(describing: associationId)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)))"}
}

extension DeleteDirectConnectGatewayAssociationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId
        case directConnectGatewayId
        case virtualGatewayId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let virtualGatewayId = virtualGatewayId {
            try encodeContainer.encode(virtualGatewayId, forKey: .virtualGatewayId)
        }
    }
}

public struct DeleteDirectConnectGatewayAssociationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectConnectGatewayAssociationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectConnectGatewayAssociationOutputError>
}

public struct DeleteDirectConnectGatewayAssociationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectConnectGatewayAssociationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectConnectGatewayAssociationOutputError>
}

public struct DeleteDirectConnectGatewayAssociationInput: Swift.Equatable {
    /// The ID of the Direct Connect gateway association.
    public let associationId: Swift.String?
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// The ID of the virtual private gateway.
    public let virtualGatewayId: Swift.String?

    public init (
        associationId: Swift.String? = nil,
        directConnectGatewayId: Swift.String? = nil,
        virtualGatewayId: Swift.String? = nil
    )
    {
        self.associationId = associationId
        self.directConnectGatewayId = directConnectGatewayId
        self.virtualGatewayId = virtualGatewayId
    }
}

struct DeleteDirectConnectGatewayAssociationInputBody: Swift.Equatable {
    public let associationId: Swift.String?
    public let directConnectGatewayId: Swift.String?
    public let virtualGatewayId: Swift.String?
}

extension DeleteDirectConnectGatewayAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId
        case directConnectGatewayId
        case virtualGatewayId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
    }
}

extension DeleteDirectConnectGatewayAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDirectConnectGatewayAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDirectConnectGatewayAssociationOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDirectConnectGatewayAssociationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDirectConnectGatewayAssociationOutputResponse(directConnectGatewayAssociation: \(Swift.String(describing: directConnectGatewayAssociation)))"}
}

extension DeleteDirectConnectGatewayAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteDirectConnectGatewayAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGatewayAssociation = output.directConnectGatewayAssociation
        } else {
            self.directConnectGatewayAssociation = nil
        }
    }
}

public struct DeleteDirectConnectGatewayAssociationOutputResponse: Swift.Equatable {
    /// Information about the deleted association.
    public let directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation?

    public init (
        directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation? = nil
    )
    {
        self.directConnectGatewayAssociation = directConnectGatewayAssociation
    }
}

struct DeleteDirectConnectGatewayAssociationOutputResponseBody: Swift.Equatable {
    public let directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation?
}

extension DeleteDirectConnectGatewayAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayAssociation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayAssociationDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGatewayAssociation.self, forKey: .directConnectGatewayAssociation)
        directConnectGatewayAssociation = directConnectGatewayAssociationDecoded
    }
}

public struct DeleteDirectConnectGatewayAssociationProposalInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectConnectGatewayAssociationProposalInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectConnectGatewayAssociationProposalOutputError>
}

extension DeleteDirectConnectGatewayAssociationProposalInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDirectConnectGatewayAssociationProposalInput(proposalId: \(Swift.String(describing: proposalId)))"}
}

extension DeleteDirectConnectGatewayAssociationProposalInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case proposalId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let proposalId = proposalId {
            try encodeContainer.encode(proposalId, forKey: .proposalId)
        }
    }
}

public struct DeleteDirectConnectGatewayAssociationProposalInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectConnectGatewayAssociationProposalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectConnectGatewayAssociationProposalOutputError>
}

public struct DeleteDirectConnectGatewayAssociationProposalInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectConnectGatewayAssociationProposalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectConnectGatewayAssociationProposalOutputError>
}

public struct DeleteDirectConnectGatewayAssociationProposalInput: Swift.Equatable {
    /// The ID of the proposal.
    /// This member is required.
    public let proposalId: Swift.String?

    public init (
        proposalId: Swift.String? = nil
    )
    {
        self.proposalId = proposalId
    }
}

struct DeleteDirectConnectGatewayAssociationProposalInputBody: Swift.Equatable {
    public let proposalId: Swift.String?
}

extension DeleteDirectConnectGatewayAssociationProposalInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case proposalId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
    }
}

extension DeleteDirectConnectGatewayAssociationProposalOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDirectConnectGatewayAssociationProposalOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDirectConnectGatewayAssociationProposalOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDirectConnectGatewayAssociationProposalOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDirectConnectGatewayAssociationProposalOutputResponse(directConnectGatewayAssociationProposal: \(Swift.String(describing: directConnectGatewayAssociationProposal)))"}
}

extension DeleteDirectConnectGatewayAssociationProposalOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteDirectConnectGatewayAssociationProposalOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGatewayAssociationProposal = output.directConnectGatewayAssociationProposal
        } else {
            self.directConnectGatewayAssociationProposal = nil
        }
    }
}

public struct DeleteDirectConnectGatewayAssociationProposalOutputResponse: Swift.Equatable {
    /// The ID of the associated gateway.
    public let directConnectGatewayAssociationProposal: DirectConnectClientTypes.DirectConnectGatewayAssociationProposal?

    public init (
        directConnectGatewayAssociationProposal: DirectConnectClientTypes.DirectConnectGatewayAssociationProposal? = nil
    )
    {
        self.directConnectGatewayAssociationProposal = directConnectGatewayAssociationProposal
    }
}

struct DeleteDirectConnectGatewayAssociationProposalOutputResponseBody: Swift.Equatable {
    public let directConnectGatewayAssociationProposal: DirectConnectClientTypes.DirectConnectGatewayAssociationProposal?
}

extension DeleteDirectConnectGatewayAssociationProposalOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayAssociationProposal
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayAssociationProposalDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGatewayAssociationProposal.self, forKey: .directConnectGatewayAssociationProposal)
        directConnectGatewayAssociationProposal = directConnectGatewayAssociationProposalDecoded
    }
}

public struct DeleteDirectConnectGatewayInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectConnectGatewayInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectConnectGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectConnectGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectConnectGatewayOutputError>
}

extension DeleteDirectConnectGatewayInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDirectConnectGatewayInput(directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)))"}
}

extension DeleteDirectConnectGatewayInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
    }
}

public struct DeleteDirectConnectGatewayInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectConnectGatewayInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectConnectGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectConnectGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectConnectGatewayOutputError>
}

public struct DeleteDirectConnectGatewayInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectConnectGatewayInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectConnectGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectConnectGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectConnectGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectConnectGatewayOutputError>
}

public struct DeleteDirectConnectGatewayInput: Swift.Equatable {
    /// The ID of the Direct Connect gateway.
    /// This member is required.
    public let directConnectGatewayId: Swift.String?

    public init (
        directConnectGatewayId: Swift.String? = nil
    )
    {
        self.directConnectGatewayId = directConnectGatewayId
    }
}

struct DeleteDirectConnectGatewayInputBody: Swift.Equatable {
    public let directConnectGatewayId: Swift.String?
}

extension DeleteDirectConnectGatewayInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
    }
}

extension DeleteDirectConnectGatewayOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDirectConnectGatewayOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDirectConnectGatewayOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDirectConnectGatewayOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDirectConnectGatewayOutputResponse(directConnectGateway: \(Swift.String(describing: directConnectGateway)))"}
}

extension DeleteDirectConnectGatewayOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteDirectConnectGatewayOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGateway = output.directConnectGateway
        } else {
            self.directConnectGateway = nil
        }
    }
}

public struct DeleteDirectConnectGatewayOutputResponse: Swift.Equatable {
    /// The Direct Connect gateway.
    public let directConnectGateway: DirectConnectClientTypes.DirectConnectGateway?

    public init (
        directConnectGateway: DirectConnectClientTypes.DirectConnectGateway? = nil
    )
    {
        self.directConnectGateway = directConnectGateway
    }
}

struct DeleteDirectConnectGatewayOutputResponseBody: Swift.Equatable {
    public let directConnectGateway: DirectConnectClientTypes.DirectConnectGateway?
}

extension DeleteDirectConnectGatewayOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGateway
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGateway.self, forKey: .directConnectGateway)
        directConnectGateway = directConnectGatewayDecoded
    }
}

public struct DeleteInterconnectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInterconnectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInterconnectOutputError>
}

extension DeleteInterconnectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInterconnectInput(interconnectId: \(Swift.String(describing: interconnectId)))"}
}

extension DeleteInterconnectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interconnectId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let interconnectId = interconnectId {
            try encodeContainer.encode(interconnectId, forKey: .interconnectId)
        }
    }
}

public struct DeleteInterconnectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInterconnectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInterconnectOutputError>
}

public struct DeleteInterconnectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInterconnectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInterconnectOutputError>
}

public struct DeleteInterconnectInput: Swift.Equatable {
    /// The ID of the interconnect.
    /// This member is required.
    public let interconnectId: Swift.String?

    public init (
        interconnectId: Swift.String? = nil
    )
    {
        self.interconnectId = interconnectId
    }
}

struct DeleteInterconnectInputBody: Swift.Equatable {
    public let interconnectId: Swift.String?
}

extension DeleteInterconnectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interconnectId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interconnectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectId)
        interconnectId = interconnectIdDecoded
    }
}

extension DeleteInterconnectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInterconnectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInterconnectOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInterconnectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInterconnectOutputResponse(interconnectState: \(Swift.String(describing: interconnectState)))"}
}

extension DeleteInterconnectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteInterconnectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.interconnectState = output.interconnectState
        } else {
            self.interconnectState = nil
        }
    }
}

public struct DeleteInterconnectOutputResponse: Swift.Equatable {
    /// The state of the interconnect. The following are the possible values:
    ///
    ///
    ///
    ///                   requested: The initial state of an interconnect. The interconnect stays in the
    ///         requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    ///
    ///
    ///                   pending: The interconnect is approved, and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is up, and the interconnect is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The interconnect is being deleted.
    ///
    ///
    ///
    ///                   deleted: The interconnect is deleted.
    ///
    ///
    ///
    ///                   unknown: The state of the interconnect is not available.
    ///
    ///
    public let interconnectState: DirectConnectClientTypes.InterconnectState?

    public init (
        interconnectState: DirectConnectClientTypes.InterconnectState? = nil
    )
    {
        self.interconnectState = interconnectState
    }
}

struct DeleteInterconnectOutputResponseBody: Swift.Equatable {
    public let interconnectState: DirectConnectClientTypes.InterconnectState?
}

extension DeleteInterconnectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interconnectState
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interconnectStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.InterconnectState.self, forKey: .interconnectState)
        interconnectState = interconnectStateDecoded
    }
}

public struct DeleteLagInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLagInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLagOutputError>
}

extension DeleteLagInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLagInput(lagId: \(Swift.String(describing: lagId)))"}
}

extension DeleteLagInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lagId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lagId = lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
    }
}

public struct DeleteLagInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLagInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLagOutputError>
}

public struct DeleteLagInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLagInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLagOutputError>
}

public struct DeleteLagInput: Swift.Equatable {
    /// The ID of the LAG.
    /// This member is required.
    public let lagId: Swift.String?

    public init (
        lagId: Swift.String? = nil
    )
    {
        self.lagId = lagId
    }
}

struct DeleteLagInputBody: Swift.Equatable {
    public let lagId: Swift.String?
}

extension DeleteLagInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lagId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
    }
}

extension DeleteLagOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLagOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLagOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLagOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLagOutputResponse(allowsHostedConnections: \(Swift.String(describing: allowsHostedConnections)), awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), connections: \(Swift.String(describing: connections)), connectionsBandwidth: \(Swift.String(describing: connectionsBandwidth)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), lagName: \(Swift.String(describing: lagName)), lagState: \(Swift.String(describing: lagState)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), minimumLinks: \(Swift.String(describing: minimumLinks)), numberOfConnections: \(Swift.String(describing: numberOfConnections)), ownerAccount: \(Swift.String(describing: ownerAccount)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)))"}
}

extension DeleteLagOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteLagOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.allowsHostedConnections = output.allowsHostedConnections
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.connections = output.connections
            self.connectionsBandwidth = output.connectionsBandwidth
            self.encryptionMode = output.encryptionMode
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.lagName = output.lagName
            self.lagState = output.lagState
            self.location = output.location
            self.macSecCapable = output.macSecCapable
            self.macSecKeys = output.macSecKeys
            self.minimumLinks = output.minimumLinks
            self.numberOfConnections = output.numberOfConnections
            self.ownerAccount = output.ownerAccount
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
        } else {
            self.allowsHostedConnections = false
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.connections = nil
            self.connectionsBandwidth = nil
            self.encryptionMode = nil
            self.hasLogicalRedundancy = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.lagName = nil
            self.lagState = nil
            self.location = nil
            self.macSecCapable = nil
            self.macSecKeys = nil
            self.minimumLinks = 0
            self.numberOfConnections = 0
            self.ownerAccount = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
        }
    }
}

/// Information about a link aggregation group (LAG).
public struct DeleteLagOutputResponse: Swift.Equatable {
    /// Indicates whether the LAG can host other connections.
    public let allowsHostedConnections: Swift.Bool
    /// The Direct Connect endpoint that hosts the LAG.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that hosts the LAG.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The connections bundled by the LAG.
    public let connections: [DirectConnectClientTypes.Connection]?
    /// The individual bandwidth of the physical connections bundled by the LAG. The possible
    ///       values are 1Gbps and 10Gbps.
    public let connectionsBandwidth: Swift.String?
    /// The LAG MAC Security (MACsec) encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?
    /// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The name of the LAG.
    public let lagName: Swift.String?
    /// The state of the LAG. The following are the possible values:
    ///
    ///
    ///
    ///                   requested: The initial state of a LAG. The LAG stays in the
    ///                 requested state until the Letter of Authorization (LOA) is available.
    ///
    ///
    ///
    ///                   pending: The LAG has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is established and the LAG is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The LAG is being deleted.
    ///
    ///
    ///
    ///                   deleted: The LAG is deleted.
    ///
    ///
    ///
    ///                   unknown: The state of the LAG is not available.
    ///
    ///
    public let lagState: DirectConnectClientTypes.LagState?
    /// The location of the LAG.
    public let location: Swift.String?
    /// Indicates whether the LAG supports MAC Security (MACsec).
    public let macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the LAG.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.
    public let minimumLinks: Swift.Int
    /// The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.
    public let numberOfConnections: Swift.Int
    /// The ID of the account that owns the LAG.
    public let ownerAccount: Swift.String?
    /// The name of the service provider associated with the LAG.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the LAG.
    public let tags: [DirectConnectClientTypes.Tag]?

    public init (
        allowsHostedConnections: Swift.Bool = false,
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        connections: [DirectConnectClientTypes.Connection]? = nil,
        connectionsBandwidth: Swift.String? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        lagName: Swift.String? = nil,
        lagState: DirectConnectClientTypes.LagState? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        minimumLinks: Swift.Int = 0,
        numberOfConnections: Swift.Int = 0,
        ownerAccount: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil
    )
    {
        self.allowsHostedConnections = allowsHostedConnections
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.connections = connections
        self.connectionsBandwidth = connectionsBandwidth
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.lagName = lagName
        self.lagState = lagState
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.minimumLinks = minimumLinks
        self.numberOfConnections = numberOfConnections
        self.ownerAccount = ownerAccount
        self.providerName = providerName
        self.region = region
        self.tags = tags
    }
}

struct DeleteLagOutputResponseBody: Swift.Equatable {
    public let connectionsBandwidth: Swift.String?
    public let numberOfConnections: Swift.Int
    public let lagId: Swift.String?
    public let ownerAccount: Swift.String?
    public let lagName: Swift.String?
    public let lagState: DirectConnectClientTypes.LagState?
    public let location: Swift.String?
    public let region: Swift.String?
    public let minimumLinks: Swift.Int
    public let awsDevice: Swift.String?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let connections: [DirectConnectClientTypes.Connection]?
    public let allowsHostedConnections: Swift.Bool
    public let jumboFrameCapable: Swift.Bool?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let macSecCapable: Swift.Bool?
    public let encryptionMode: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension DeleteLagOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowsHostedConnections
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case connections
        case connectionsBandwidth
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case lagName
        case lagState
        case location
        case macSecCapable
        case macSecKeys
        case minimumLinks
        case numberOfConnections
        case ownerAccount
        case providerName
        case region
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionsBandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionsBandwidth)
        connectionsBandwidth = connectionsBandwidthDecoded
        let numberOfConnectionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfConnections)
        numberOfConnections = numberOfConnectionsDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let lagNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagName)
        lagName = lagNameDecoded
        let lagStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.LagState.self, forKey: .lagState)
        lagState = lagStateDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let minimumLinksDecoded = try containerValues.decode(Swift.Int.self, forKey: .minimumLinks)
        minimumLinks = minimumLinksDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let connectionsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Connection?].self, forKey: .connections)
        var connectionsDecoded0:[DirectConnectClientTypes.Connection]? = nil
        if let connectionsContainer = connectionsContainer {
            connectionsDecoded0 = [DirectConnectClientTypes.Connection]()
            for structure0 in connectionsContainer {
                if let structure0 = structure0 {
                    connectionsDecoded0?.append(structure0)
                }
            }
        }
        connections = connectionsDecoded0
        let allowsHostedConnectionsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowsHostedConnections)
        allowsHostedConnections = allowsHostedConnectionsDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct DeleteVirtualInterfaceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVirtualInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVirtualInterfaceOutputError>
}

extension DeleteVirtualInterfaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualInterfaceInput(virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension DeleteVirtualInterfaceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct DeleteVirtualInterfaceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVirtualInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVirtualInterfaceOutputError>
}

public struct DeleteVirtualInterfaceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVirtualInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVirtualInterfaceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVirtualInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVirtualInterfaceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVirtualInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVirtualInterfaceOutputError>
}

public struct DeleteVirtualInterfaceInput: Swift.Equatable {
    /// The ID of the virtual interface.
    /// This member is required.
    public let virtualInterfaceId: Swift.String?

    public init (
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct DeleteVirtualInterfaceInputBody: Swift.Equatable {
    public let virtualInterfaceId: Swift.String?
}

extension DeleteVirtualInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
    }
}

extension DeleteVirtualInterfaceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVirtualInterfaceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVirtualInterfaceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVirtualInterfaceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualInterfaceOutputResponse(virtualInterfaceState: \(Swift.String(describing: virtualInterfaceState)))"}
}

extension DeleteVirtualInterfaceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteVirtualInterfaceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualInterfaceState = output.virtualInterfaceState
        } else {
            self.virtualInterfaceState = nil
        }
    }
}

public struct DeleteVirtualInterfaceOutputResponse: Swift.Equatable {
    /// The state of the virtual interface. The following are the possible values:
    ///
    ///
    ///
    ///                   confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.
    ///
    ///
    ///
    ///                   verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.
    ///
    ///
    ///
    ///                   pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.
    ///
    ///
    ///
    ///                   available: A virtual interface that is able to forward traffic.
    ///
    ///
    ///
    ///                   down: A virtual interface that is BGP down.
    ///
    ///
    ///
    ///                   deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.
    ///
    ///
    ///
    ///                   deleted: A virtual interface that cannot forward traffic.
    ///
    ///
    ///
    ///                   rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.
    ///
    ///
    ///
    ///                   unknown: The state of the virtual interface is not available.
    ///
    ///
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?

    public init (
        virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState? = nil
    )
    {
        self.virtualInterfaceState = virtualInterfaceState
    }
}

struct DeleteVirtualInterfaceOutputResponseBody: Swift.Equatable {
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
}

extension DeleteVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceState
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
    }
}

public struct DescribeConnectionLoaInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConnectionLoaInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConnectionLoaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConnectionLoaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConnectionLoaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConnectionLoaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConnectionLoaOutputError>
}

extension DescribeConnectionLoaInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConnectionLoaInput(connectionId: \(Swift.String(describing: connectionId)), loaContentType: \(Swift.String(describing: loaContentType)), providerName: \(Swift.String(describing: providerName)))"}
}

extension DescribeConnectionLoaInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case loaContentType
        case providerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let loaContentType = loaContentType {
            try encodeContainer.encode(loaContentType.rawValue, forKey: .loaContentType)
        }
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
    }
}

public struct DescribeConnectionLoaInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConnectionLoaInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConnectionLoaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConnectionLoaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConnectionLoaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConnectionLoaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConnectionLoaOutputError>
}

public struct DescribeConnectionLoaInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConnectionLoaInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConnectionLoaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConnectionLoaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConnectionLoaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConnectionLoaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConnectionLoaOutputError>
}

public struct DescribeConnectionLoaInput: Swift.Equatable {
    /// The ID of the connection.
    /// This member is required.
    public let connectionId: Swift.String?
    /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
    public let loaContentType: DirectConnectClientTypes.LoaContentType?
    /// The name of the APN partner or service provider who establishes connectivity on your behalf. If you specify this parameter,
    ///       the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.
    public let providerName: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        loaContentType: DirectConnectClientTypes.LoaContentType? = nil,
        providerName: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.loaContentType = loaContentType
        self.providerName = providerName
    }
}

struct DescribeConnectionLoaInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let providerName: Swift.String?
    public let loaContentType: DirectConnectClientTypes.LoaContentType?
}

extension DescribeConnectionLoaInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case loaContentType
        case providerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let loaContentTypeDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.LoaContentType.self, forKey: .loaContentType)
        loaContentType = loaContentTypeDecoded
    }
}

extension DescribeConnectionLoaOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConnectionLoaOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConnectionLoaOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConnectionLoaOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConnectionLoaOutputResponse(loa: \(Swift.String(describing: loa)))"}
}

extension DescribeConnectionLoaOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConnectionLoaOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loa = output.loa
        } else {
            self.loa = nil
        }
    }
}

public struct DescribeConnectionLoaOutputResponse: Swift.Equatable {
    /// The Letter of Authorization - Connecting Facility Assignment (LOA-CFA).
    public let loa: DirectConnectClientTypes.Loa?

    public init (
        loa: DirectConnectClientTypes.Loa? = nil
    )
    {
        self.loa = loa
    }
}

struct DescribeConnectionLoaOutputResponseBody: Swift.Equatable {
    public let loa: DirectConnectClientTypes.Loa?
}

extension DescribeConnectionLoaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loa
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loaDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.Loa.self, forKey: .loa)
        loa = loaDecoded
    }
}

public struct DescribeConnectionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConnectionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConnectionsOutputError>
}

extension DescribeConnectionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConnectionsInput(connectionId: \(Swift.String(describing: connectionId)))"}
}

extension DescribeConnectionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
    }
}

public struct DescribeConnectionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConnectionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConnectionsOutputError>
}

public struct DescribeConnectionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConnectionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConnectionsOutputError>
}

public struct DescribeConnectionsInput: Swift.Equatable {
    /// The ID of the connection.
    public let connectionId: Swift.String?

    public init (
        connectionId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
    }
}

struct DescribeConnectionsInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
}

extension DescribeConnectionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
    }
}

public struct DescribeConnectionsOnInterconnectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConnectionsOnInterconnectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConnectionsOnInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConnectionsOnInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConnectionsOnInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConnectionsOnInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConnectionsOnInterconnectOutputError>
}

extension DescribeConnectionsOnInterconnectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConnectionsOnInterconnectInput(interconnectId: \(Swift.String(describing: interconnectId)))"}
}

extension DescribeConnectionsOnInterconnectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interconnectId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let interconnectId = interconnectId {
            try encodeContainer.encode(interconnectId, forKey: .interconnectId)
        }
    }
}

public struct DescribeConnectionsOnInterconnectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConnectionsOnInterconnectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConnectionsOnInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConnectionsOnInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConnectionsOnInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConnectionsOnInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConnectionsOnInterconnectOutputError>
}

public struct DescribeConnectionsOnInterconnectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConnectionsOnInterconnectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConnectionsOnInterconnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConnectionsOnInterconnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConnectionsOnInterconnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConnectionsOnInterconnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConnectionsOnInterconnectOutputError>
}

public struct DescribeConnectionsOnInterconnectInput: Swift.Equatable {
    /// The ID of the interconnect.
    /// This member is required.
    public let interconnectId: Swift.String?

    public init (
        interconnectId: Swift.String? = nil
    )
    {
        self.interconnectId = interconnectId
    }
}

struct DescribeConnectionsOnInterconnectInputBody: Swift.Equatable {
    public let interconnectId: Swift.String?
}

extension DescribeConnectionsOnInterconnectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interconnectId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interconnectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectId)
        interconnectId = interconnectIdDecoded
    }
}

extension DescribeConnectionsOnInterconnectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConnectionsOnInterconnectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConnectionsOnInterconnectOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConnectionsOnInterconnectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConnectionsOnInterconnectOutputResponse(connections: \(Swift.String(describing: connections)))"}
}

extension DescribeConnectionsOnInterconnectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConnectionsOnInterconnectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connections = output.connections
        } else {
            self.connections = nil
        }
    }
}

public struct DescribeConnectionsOnInterconnectOutputResponse: Swift.Equatable {
    /// The connections.
    public let connections: [DirectConnectClientTypes.Connection]?

    public init (
        connections: [DirectConnectClientTypes.Connection]? = nil
    )
    {
        self.connections = connections
    }
}

struct DescribeConnectionsOnInterconnectOutputResponseBody: Swift.Equatable {
    public let connections: [DirectConnectClientTypes.Connection]?
}

extension DescribeConnectionsOnInterconnectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connections
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Connection?].self, forKey: .connections)
        var connectionsDecoded0:[DirectConnectClientTypes.Connection]? = nil
        if let connectionsContainer = connectionsContainer {
            connectionsDecoded0 = [DirectConnectClientTypes.Connection]()
            for structure0 in connectionsContainer {
                if let structure0 = structure0 {
                    connectionsDecoded0?.append(structure0)
                }
            }
        }
        connections = connectionsDecoded0
    }
}

extension DescribeConnectionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConnectionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConnectionsOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConnectionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConnectionsOutputResponse(connections: \(Swift.String(describing: connections)))"}
}

extension DescribeConnectionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConnectionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connections = output.connections
        } else {
            self.connections = nil
        }
    }
}

public struct DescribeConnectionsOutputResponse: Swift.Equatable {
    /// The connections.
    public let connections: [DirectConnectClientTypes.Connection]?

    public init (
        connections: [DirectConnectClientTypes.Connection]? = nil
    )
    {
        self.connections = connections
    }
}

struct DescribeConnectionsOutputResponseBody: Swift.Equatable {
    public let connections: [DirectConnectClientTypes.Connection]?
}

extension DescribeConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connections
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Connection?].self, forKey: .connections)
        var connectionsDecoded0:[DirectConnectClientTypes.Connection]? = nil
        if let connectionsContainer = connectionsContainer {
            connectionsDecoded0 = [DirectConnectClientTypes.Connection]()
            for structure0 in connectionsContainer {
                if let structure0 = structure0 {
                    connectionsDecoded0?.append(structure0)
                }
            }
        }
        connections = connectionsDecoded0
    }
}

public struct DescribeDirectConnectGatewayAssociationProposalsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewayAssociationProposalsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationProposalsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationProposalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationProposalsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationProposalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewayAssociationProposalsOutputError>
}

extension DescribeDirectConnectGatewayAssociationProposalsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDirectConnectGatewayAssociationProposalsInput(associatedGatewayId: \(Swift.String(describing: associatedGatewayId)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), proposalId: \(Swift.String(describing: proposalId)))"}
}

extension DescribeDirectConnectGatewayAssociationProposalsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedGatewayId
        case directConnectGatewayId
        case maxResults
        case nextToken
        case proposalId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associatedGatewayId = associatedGatewayId {
            try encodeContainer.encode(associatedGatewayId, forKey: .associatedGatewayId)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let proposalId = proposalId {
            try encodeContainer.encode(proposalId, forKey: .proposalId)
        }
    }
}

public struct DescribeDirectConnectGatewayAssociationProposalsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewayAssociationProposalsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationProposalsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationProposalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationProposalsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationProposalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewayAssociationProposalsOutputError>
}

public struct DescribeDirectConnectGatewayAssociationProposalsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewayAssociationProposalsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationProposalsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationProposalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationProposalsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationProposalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewayAssociationProposalsOutputError>
}

public struct DescribeDirectConnectGatewayAssociationProposalsInput: Swift.Equatable {
    /// The ID of the associated gateway.
    public let associatedGatewayId: Swift.String?
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned nextToken value.
    /// 	        If MaxResults is given a value larger than 100, only 100 results are
    ///       returned.
    public let maxResults: Swift.Int?
    /// The token for the next page of results.
    public let nextToken: Swift.String?
    /// The ID of the proposal.
    public let proposalId: Swift.String?

    public init (
        associatedGatewayId: Swift.String? = nil,
        directConnectGatewayId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        proposalId: Swift.String? = nil
    )
    {
        self.associatedGatewayId = associatedGatewayId
        self.directConnectGatewayId = directConnectGatewayId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.proposalId = proposalId
    }
}

struct DescribeDirectConnectGatewayAssociationProposalsInputBody: Swift.Equatable {
    public let directConnectGatewayId: Swift.String?
    public let proposalId: Swift.String?
    public let associatedGatewayId: Swift.String?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension DescribeDirectConnectGatewayAssociationProposalsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedGatewayId
        case directConnectGatewayId
        case maxResults
        case nextToken
        case proposalId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let proposalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
        let associatedGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedGatewayId)
        associatedGatewayId = associatedGatewayIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDirectConnectGatewayAssociationProposalsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDirectConnectGatewayAssociationProposalsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDirectConnectGatewayAssociationProposalsOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDirectConnectGatewayAssociationProposalsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDirectConnectGatewayAssociationProposalsOutputResponse(directConnectGatewayAssociationProposals: \(Swift.String(describing: directConnectGatewayAssociationProposals)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeDirectConnectGatewayAssociationProposalsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDirectConnectGatewayAssociationProposalsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGatewayAssociationProposals = output.directConnectGatewayAssociationProposals
            self.nextToken = output.nextToken
        } else {
            self.directConnectGatewayAssociationProposals = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDirectConnectGatewayAssociationProposalsOutputResponse: Swift.Equatable {
    /// Describes the Direct Connect gateway association proposals.
    public let directConnectGatewayAssociationProposals: [DirectConnectClientTypes.DirectConnectGatewayAssociationProposal]?
    /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
    public let nextToken: Swift.String?

    public init (
        directConnectGatewayAssociationProposals: [DirectConnectClientTypes.DirectConnectGatewayAssociationProposal]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directConnectGatewayAssociationProposals = directConnectGatewayAssociationProposals
        self.nextToken = nextToken
    }
}

struct DescribeDirectConnectGatewayAssociationProposalsOutputResponseBody: Swift.Equatable {
    public let directConnectGatewayAssociationProposals: [DirectConnectClientTypes.DirectConnectGatewayAssociationProposal]?
    public let nextToken: Swift.String?
}

extension DescribeDirectConnectGatewayAssociationProposalsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayAssociationProposals
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayAssociationProposalsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.DirectConnectGatewayAssociationProposal?].self, forKey: .directConnectGatewayAssociationProposals)
        var directConnectGatewayAssociationProposalsDecoded0:[DirectConnectClientTypes.DirectConnectGatewayAssociationProposal]? = nil
        if let directConnectGatewayAssociationProposalsContainer = directConnectGatewayAssociationProposalsContainer {
            directConnectGatewayAssociationProposalsDecoded0 = [DirectConnectClientTypes.DirectConnectGatewayAssociationProposal]()
            for structure0 in directConnectGatewayAssociationProposalsContainer {
                if let structure0 = structure0 {
                    directConnectGatewayAssociationProposalsDecoded0?.append(structure0)
                }
            }
        }
        directConnectGatewayAssociationProposals = directConnectGatewayAssociationProposalsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeDirectConnectGatewayAssociationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewayAssociationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewayAssociationsOutputError>
}

extension DescribeDirectConnectGatewayAssociationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDirectConnectGatewayAssociationsInput(associatedGatewayId: \(Swift.String(describing: associatedGatewayId)), associationId: \(Swift.String(describing: associationId)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)))"}
}

extension DescribeDirectConnectGatewayAssociationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedGatewayId
        case associationId
        case directConnectGatewayId
        case maxResults
        case nextToken
        case virtualGatewayId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associatedGatewayId = associatedGatewayId {
            try encodeContainer.encode(associatedGatewayId, forKey: .associatedGatewayId)
        }
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let virtualGatewayId = virtualGatewayId {
            try encodeContainer.encode(virtualGatewayId, forKey: .virtualGatewayId)
        }
    }
}

public struct DescribeDirectConnectGatewayAssociationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewayAssociationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewayAssociationsOutputError>
}

public struct DescribeDirectConnectGatewayAssociationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewayAssociationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAssociationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAssociationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewayAssociationsOutputError>
}

public struct DescribeDirectConnectGatewayAssociationsInput: Swift.Equatable {
    /// The ID of the associated gateway.
    public let associatedGatewayId: Swift.String?
    /// The ID of the Direct Connect gateway association.
    public let associationId: Swift.String?
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned nextToken value.
    /// 	        If MaxResults is given a value larger than 100, only 100 results are
    ///       returned.
    public let maxResults: Swift.Int?
    /// The token provided in the previous call to retrieve the next page.
    public let nextToken: Swift.String?
    /// The ID of the virtual private gateway or transit gateway.
    public let virtualGatewayId: Swift.String?

    public init (
        associatedGatewayId: Swift.String? = nil,
        associationId: Swift.String? = nil,
        directConnectGatewayId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        virtualGatewayId: Swift.String? = nil
    )
    {
        self.associatedGatewayId = associatedGatewayId
        self.associationId = associationId
        self.directConnectGatewayId = directConnectGatewayId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.virtualGatewayId = virtualGatewayId
    }
}

struct DescribeDirectConnectGatewayAssociationsInputBody: Swift.Equatable {
    public let associationId: Swift.String?
    public let associatedGatewayId: Swift.String?
    public let directConnectGatewayId: Swift.String?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
    public let virtualGatewayId: Swift.String?
}

extension DescribeDirectConnectGatewayAssociationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedGatewayId
        case associationId
        case directConnectGatewayId
        case maxResults
        case nextToken
        case virtualGatewayId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let associatedGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedGatewayId)
        associatedGatewayId = associatedGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
    }
}

extension DescribeDirectConnectGatewayAssociationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDirectConnectGatewayAssociationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDirectConnectGatewayAssociationsOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDirectConnectGatewayAssociationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDirectConnectGatewayAssociationsOutputResponse(directConnectGatewayAssociations: \(Swift.String(describing: directConnectGatewayAssociations)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeDirectConnectGatewayAssociationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDirectConnectGatewayAssociationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGatewayAssociations = output.directConnectGatewayAssociations
            self.nextToken = output.nextToken
        } else {
            self.directConnectGatewayAssociations = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDirectConnectGatewayAssociationsOutputResponse: Swift.Equatable {
    /// Information about the associations.
    public let directConnectGatewayAssociations: [DirectConnectClientTypes.DirectConnectGatewayAssociation]?
    /// The token to retrieve the next page.
    public let nextToken: Swift.String?

    public init (
        directConnectGatewayAssociations: [DirectConnectClientTypes.DirectConnectGatewayAssociation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directConnectGatewayAssociations = directConnectGatewayAssociations
        self.nextToken = nextToken
    }
}

struct DescribeDirectConnectGatewayAssociationsOutputResponseBody: Swift.Equatable {
    public let directConnectGatewayAssociations: [DirectConnectClientTypes.DirectConnectGatewayAssociation]?
    public let nextToken: Swift.String?
}

extension DescribeDirectConnectGatewayAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayAssociations
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayAssociationsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.DirectConnectGatewayAssociation?].self, forKey: .directConnectGatewayAssociations)
        var directConnectGatewayAssociationsDecoded0:[DirectConnectClientTypes.DirectConnectGatewayAssociation]? = nil
        if let directConnectGatewayAssociationsContainer = directConnectGatewayAssociationsContainer {
            directConnectGatewayAssociationsDecoded0 = [DirectConnectClientTypes.DirectConnectGatewayAssociation]()
            for structure0 in directConnectGatewayAssociationsContainer {
                if let structure0 = structure0 {
                    directConnectGatewayAssociationsDecoded0?.append(structure0)
                }
            }
        }
        directConnectGatewayAssociations = directConnectGatewayAssociationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeDirectConnectGatewayAttachmentsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewayAttachmentsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAttachmentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAttachmentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAttachmentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAttachmentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewayAttachmentsOutputError>
}

extension DescribeDirectConnectGatewayAttachmentsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDirectConnectGatewayAttachmentsInput(directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension DescribeDirectConnectGatewayAttachmentsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayId
        case maxResults
        case nextToken
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct DescribeDirectConnectGatewayAttachmentsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewayAttachmentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAttachmentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAttachmentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAttachmentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAttachmentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewayAttachmentsOutputError>
}

public struct DescribeDirectConnectGatewayAttachmentsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewayAttachmentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAttachmentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAttachmentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewayAttachmentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewayAttachmentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewayAttachmentsOutputError>
}

public struct DescribeDirectConnectGatewayAttachmentsInput: Swift.Equatable {
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned nextToken value.
    /// 	        If MaxResults is given a value larger than 100, only 100 results are
    ///       returned.
    public let maxResults: Swift.Int?
    /// The token provided in the previous call to retrieve the next page.
    public let nextToken: Swift.String?
    /// The ID of the virtual interface.
    public let virtualInterfaceId: Swift.String?

    public init (
        directConnectGatewayId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.directConnectGatewayId = directConnectGatewayId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct DescribeDirectConnectGatewayAttachmentsInputBody: Swift.Equatable {
    public let directConnectGatewayId: Swift.String?
    public let virtualInterfaceId: Swift.String?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension DescribeDirectConnectGatewayAttachmentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayId
        case maxResults
        case nextToken
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDirectConnectGatewayAttachmentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDirectConnectGatewayAttachmentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDirectConnectGatewayAttachmentsOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDirectConnectGatewayAttachmentsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDirectConnectGatewayAttachmentsOutputResponse(directConnectGatewayAttachments: \(Swift.String(describing: directConnectGatewayAttachments)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeDirectConnectGatewayAttachmentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDirectConnectGatewayAttachmentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGatewayAttachments = output.directConnectGatewayAttachments
            self.nextToken = output.nextToken
        } else {
            self.directConnectGatewayAttachments = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDirectConnectGatewayAttachmentsOutputResponse: Swift.Equatable {
    /// The attachments.
    public let directConnectGatewayAttachments: [DirectConnectClientTypes.DirectConnectGatewayAttachment]?
    /// The token to retrieve the next page.
    public let nextToken: Swift.String?

    public init (
        directConnectGatewayAttachments: [DirectConnectClientTypes.DirectConnectGatewayAttachment]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directConnectGatewayAttachments = directConnectGatewayAttachments
        self.nextToken = nextToken
    }
}

struct DescribeDirectConnectGatewayAttachmentsOutputResponseBody: Swift.Equatable {
    public let directConnectGatewayAttachments: [DirectConnectClientTypes.DirectConnectGatewayAttachment]?
    public let nextToken: Swift.String?
}

extension DescribeDirectConnectGatewayAttachmentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayAttachments
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayAttachmentsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.DirectConnectGatewayAttachment?].self, forKey: .directConnectGatewayAttachments)
        var directConnectGatewayAttachmentsDecoded0:[DirectConnectClientTypes.DirectConnectGatewayAttachment]? = nil
        if let directConnectGatewayAttachmentsContainer = directConnectGatewayAttachmentsContainer {
            directConnectGatewayAttachmentsDecoded0 = [DirectConnectClientTypes.DirectConnectGatewayAttachment]()
            for structure0 in directConnectGatewayAttachmentsContainer {
                if let structure0 = structure0 {
                    directConnectGatewayAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        directConnectGatewayAttachments = directConnectGatewayAttachmentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeDirectConnectGatewaysInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewaysInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewaysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewaysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewaysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewaysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewaysOutputError>
}

extension DescribeDirectConnectGatewaysInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDirectConnectGatewaysInput(directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeDirectConnectGatewaysInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayId
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeDirectConnectGatewaysInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewaysInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewaysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewaysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewaysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewaysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewaysOutputError>
}

public struct DescribeDirectConnectGatewaysInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectConnectGatewaysInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewaysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectConnectGatewaysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectConnectGatewaysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectConnectGatewaysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectConnectGatewaysOutputError>
}

public struct DescribeDirectConnectGatewaysInput: Swift.Equatable {
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned nextToken value.
    /// 	        If MaxResults is given a value larger than 100, only 100 results are
    ///       returned.
    public let maxResults: Swift.Int?
    /// The token provided in the previous call to retrieve the next page.
    public let nextToken: Swift.String?

    public init (
        directConnectGatewayId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directConnectGatewayId = directConnectGatewayId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeDirectConnectGatewaysInputBody: Swift.Equatable {
    public let directConnectGatewayId: Swift.String?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension DescribeDirectConnectGatewaysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayId
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDirectConnectGatewaysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDirectConnectGatewaysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDirectConnectGatewaysOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDirectConnectGatewaysOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDirectConnectGatewaysOutputResponse(directConnectGateways: \(Swift.String(describing: directConnectGateways)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeDirectConnectGatewaysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDirectConnectGatewaysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGateways = output.directConnectGateways
            self.nextToken = output.nextToken
        } else {
            self.directConnectGateways = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDirectConnectGatewaysOutputResponse: Swift.Equatable {
    /// The Direct Connect gateways.
    public let directConnectGateways: [DirectConnectClientTypes.DirectConnectGateway]?
    /// The token to retrieve the next page.
    public let nextToken: Swift.String?

    public init (
        directConnectGateways: [DirectConnectClientTypes.DirectConnectGateway]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directConnectGateways = directConnectGateways
        self.nextToken = nextToken
    }
}

struct DescribeDirectConnectGatewaysOutputResponseBody: Swift.Equatable {
    public let directConnectGateways: [DirectConnectClientTypes.DirectConnectGateway]?
    public let nextToken: Swift.String?
}

extension DescribeDirectConnectGatewaysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGateways
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewaysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.DirectConnectGateway?].self, forKey: .directConnectGateways)
        var directConnectGatewaysDecoded0:[DirectConnectClientTypes.DirectConnectGateway]? = nil
        if let directConnectGatewaysContainer = directConnectGatewaysContainer {
            directConnectGatewaysDecoded0 = [DirectConnectClientTypes.DirectConnectGateway]()
            for structure0 in directConnectGatewaysContainer {
                if let structure0 = structure0 {
                    directConnectGatewaysDecoded0?.append(structure0)
                }
            }
        }
        directConnectGateways = directConnectGatewaysDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeHostedConnectionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeHostedConnectionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeHostedConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeHostedConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeHostedConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeHostedConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeHostedConnectionsOutputError>
}

extension DescribeHostedConnectionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeHostedConnectionsInput(connectionId: \(Swift.String(describing: connectionId)))"}
}

extension DescribeHostedConnectionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
    }
}

public struct DescribeHostedConnectionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeHostedConnectionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeHostedConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeHostedConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeHostedConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeHostedConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeHostedConnectionsOutputError>
}

public struct DescribeHostedConnectionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeHostedConnectionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeHostedConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeHostedConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeHostedConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeHostedConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeHostedConnectionsOutputError>
}

public struct DescribeHostedConnectionsInput: Swift.Equatable {
    /// The ID of the interconnect or LAG.
    /// This member is required.
    public let connectionId: Swift.String?

    public init (
        connectionId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
    }
}

struct DescribeHostedConnectionsInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
}

extension DescribeHostedConnectionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
    }
}

extension DescribeHostedConnectionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeHostedConnectionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeHostedConnectionsOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeHostedConnectionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeHostedConnectionsOutputResponse(connections: \(Swift.String(describing: connections)))"}
}

extension DescribeHostedConnectionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeHostedConnectionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connections = output.connections
        } else {
            self.connections = nil
        }
    }
}

public struct DescribeHostedConnectionsOutputResponse: Swift.Equatable {
    /// The connections.
    public let connections: [DirectConnectClientTypes.Connection]?

    public init (
        connections: [DirectConnectClientTypes.Connection]? = nil
    )
    {
        self.connections = connections
    }
}

struct DescribeHostedConnectionsOutputResponseBody: Swift.Equatable {
    public let connections: [DirectConnectClientTypes.Connection]?
}

extension DescribeHostedConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connections
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Connection?].self, forKey: .connections)
        var connectionsDecoded0:[DirectConnectClientTypes.Connection]? = nil
        if let connectionsContainer = connectionsContainer {
            connectionsDecoded0 = [DirectConnectClientTypes.Connection]()
            for structure0 in connectionsContainer {
                if let structure0 = structure0 {
                    connectionsDecoded0?.append(structure0)
                }
            }
        }
        connections = connectionsDecoded0
    }
}

public struct DescribeInterconnectLoaInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInterconnectLoaInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInterconnectLoaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInterconnectLoaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInterconnectLoaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInterconnectLoaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInterconnectLoaOutputError>
}

extension DescribeInterconnectLoaInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInterconnectLoaInput(interconnectId: \(Swift.String(describing: interconnectId)), loaContentType: \(Swift.String(describing: loaContentType)), providerName: \(Swift.String(describing: providerName)))"}
}

extension DescribeInterconnectLoaInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interconnectId
        case loaContentType
        case providerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let interconnectId = interconnectId {
            try encodeContainer.encode(interconnectId, forKey: .interconnectId)
        }
        if let loaContentType = loaContentType {
            try encodeContainer.encode(loaContentType.rawValue, forKey: .loaContentType)
        }
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
    }
}

public struct DescribeInterconnectLoaInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInterconnectLoaInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInterconnectLoaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInterconnectLoaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInterconnectLoaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInterconnectLoaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInterconnectLoaOutputError>
}

public struct DescribeInterconnectLoaInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInterconnectLoaInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInterconnectLoaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInterconnectLoaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInterconnectLoaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInterconnectLoaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInterconnectLoaOutputError>
}

public struct DescribeInterconnectLoaInput: Swift.Equatable {
    /// The ID of the interconnect.
    /// This member is required.
    public let interconnectId: Swift.String?
    /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
    public let loaContentType: DirectConnectClientTypes.LoaContentType?
    /// The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.
    public let providerName: Swift.String?

    public init (
        interconnectId: Swift.String? = nil,
        loaContentType: DirectConnectClientTypes.LoaContentType? = nil,
        providerName: Swift.String? = nil
    )
    {
        self.interconnectId = interconnectId
        self.loaContentType = loaContentType
        self.providerName = providerName
    }
}

struct DescribeInterconnectLoaInputBody: Swift.Equatable {
    public let interconnectId: Swift.String?
    public let providerName: Swift.String?
    public let loaContentType: DirectConnectClientTypes.LoaContentType?
}

extension DescribeInterconnectLoaInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interconnectId
        case loaContentType
        case providerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interconnectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectId)
        interconnectId = interconnectIdDecoded
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let loaContentTypeDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.LoaContentType.self, forKey: .loaContentType)
        loaContentType = loaContentTypeDecoded
    }
}

extension DescribeInterconnectLoaOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInterconnectLoaOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInterconnectLoaOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInterconnectLoaOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInterconnectLoaOutputResponse(loa: \(Swift.String(describing: loa)))"}
}

extension DescribeInterconnectLoaOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeInterconnectLoaOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loa = output.loa
        } else {
            self.loa = nil
        }
    }
}

public struct DescribeInterconnectLoaOutputResponse: Swift.Equatable {
    /// The Letter of Authorization - Connecting Facility Assignment (LOA-CFA).
    public let loa: DirectConnectClientTypes.Loa?

    public init (
        loa: DirectConnectClientTypes.Loa? = nil
    )
    {
        self.loa = loa
    }
}

struct DescribeInterconnectLoaOutputResponseBody: Swift.Equatable {
    public let loa: DirectConnectClientTypes.Loa?
}

extension DescribeInterconnectLoaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loa
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loaDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.Loa.self, forKey: .loa)
        loa = loaDecoded
    }
}

public struct DescribeInterconnectsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInterconnectsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInterconnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInterconnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInterconnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInterconnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInterconnectsOutputError>
}

extension DescribeInterconnectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInterconnectsInput(interconnectId: \(Swift.String(describing: interconnectId)))"}
}

extension DescribeInterconnectsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interconnectId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let interconnectId = interconnectId {
            try encodeContainer.encode(interconnectId, forKey: .interconnectId)
        }
    }
}

public struct DescribeInterconnectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInterconnectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInterconnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInterconnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInterconnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInterconnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInterconnectsOutputError>
}

public struct DescribeInterconnectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInterconnectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInterconnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInterconnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInterconnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInterconnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInterconnectsOutputError>
}

public struct DescribeInterconnectsInput: Swift.Equatable {
    /// The ID of the interconnect.
    public let interconnectId: Swift.String?

    public init (
        interconnectId: Swift.String? = nil
    )
    {
        self.interconnectId = interconnectId
    }
}

struct DescribeInterconnectsInputBody: Swift.Equatable {
    public let interconnectId: Swift.String?
}

extension DescribeInterconnectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interconnectId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interconnectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectId)
        interconnectId = interconnectIdDecoded
    }
}

extension DescribeInterconnectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInterconnectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInterconnectsOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInterconnectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInterconnectsOutputResponse(interconnects: \(Swift.String(describing: interconnects)))"}
}

extension DescribeInterconnectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeInterconnectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.interconnects = output.interconnects
        } else {
            self.interconnects = nil
        }
    }
}

public struct DescribeInterconnectsOutputResponse: Swift.Equatable {
    /// The interconnects.
    public let interconnects: [DirectConnectClientTypes.Interconnect]?

    public init (
        interconnects: [DirectConnectClientTypes.Interconnect]? = nil
    )
    {
        self.interconnects = interconnects
    }
}

struct DescribeInterconnectsOutputResponseBody: Swift.Equatable {
    public let interconnects: [DirectConnectClientTypes.Interconnect]?
}

extension DescribeInterconnectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interconnects
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interconnectsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Interconnect?].self, forKey: .interconnects)
        var interconnectsDecoded0:[DirectConnectClientTypes.Interconnect]? = nil
        if let interconnectsContainer = interconnectsContainer {
            interconnectsDecoded0 = [DirectConnectClientTypes.Interconnect]()
            for structure0 in interconnectsContainer {
                if let structure0 = structure0 {
                    interconnectsDecoded0?.append(structure0)
                }
            }
        }
        interconnects = interconnectsDecoded0
    }
}

public struct DescribeLagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLagsOutputError>
}

extension DescribeLagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLagsInput(lagId: \(Swift.String(describing: lagId)))"}
}

extension DescribeLagsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lagId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lagId = lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
    }
}

public struct DescribeLagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLagsOutputError>
}

public struct DescribeLagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLagsOutputError>
}

public struct DescribeLagsInput: Swift.Equatable {
    /// The ID of the LAG.
    public let lagId: Swift.String?

    public init (
        lagId: Swift.String? = nil
    )
    {
        self.lagId = lagId
    }
}

struct DescribeLagsInputBody: Swift.Equatable {
    public let lagId: Swift.String?
}

extension DescribeLagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lagId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
    }
}

extension DescribeLagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLagsOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLagsOutputResponse(lags: \(Swift.String(describing: lags)))"}
}

extension DescribeLagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lags = output.lags
        } else {
            self.lags = nil
        }
    }
}

public struct DescribeLagsOutputResponse: Swift.Equatable {
    /// The LAGs.
    public let lags: [DirectConnectClientTypes.Lag]?

    public init (
        lags: [DirectConnectClientTypes.Lag]? = nil
    )
    {
        self.lags = lags
    }
}

struct DescribeLagsOutputResponseBody: Swift.Equatable {
    public let lags: [DirectConnectClientTypes.Lag]?
}

extension DescribeLagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Lag?].self, forKey: .lags)
        var lagsDecoded0:[DirectConnectClientTypes.Lag]? = nil
        if let lagsContainer = lagsContainer {
            lagsDecoded0 = [DirectConnectClientTypes.Lag]()
            for structure0 in lagsContainer {
                if let structure0 = structure0 {
                    lagsDecoded0?.append(structure0)
                }
            }
        }
        lags = lagsDecoded0
    }
}

public struct DescribeLoaInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLoaInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLoaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLoaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLoaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLoaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLoaOutputError>
}

extension DescribeLoaInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLoaInput(connectionId: \(Swift.String(describing: connectionId)), loaContentType: \(Swift.String(describing: loaContentType)), providerName: \(Swift.String(describing: providerName)))"}
}

extension DescribeLoaInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case loaContentType
        case providerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let loaContentType = loaContentType {
            try encodeContainer.encode(loaContentType.rawValue, forKey: .loaContentType)
        }
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
    }
}

public struct DescribeLoaInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLoaInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLoaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLoaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLoaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLoaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLoaOutputError>
}

public struct DescribeLoaInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLoaInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLoaInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLoaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLoaInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLoaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLoaOutputError>
}

public struct DescribeLoaInput: Swift.Equatable {
    /// The ID of a connection, LAG, or interconnect.
    /// This member is required.
    public let connectionId: Swift.String?
    /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
    public let loaContentType: DirectConnectClientTypes.LoaContentType?
    /// The name of the service provider who establishes connectivity on your behalf. If you specify this parameter, the
    ///       LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.
    public let providerName: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        loaContentType: DirectConnectClientTypes.LoaContentType? = nil,
        providerName: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.loaContentType = loaContentType
        self.providerName = providerName
    }
}

struct DescribeLoaInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let providerName: Swift.String?
    public let loaContentType: DirectConnectClientTypes.LoaContentType?
}

extension DescribeLoaInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case loaContentType
        case providerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let loaContentTypeDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.LoaContentType.self, forKey: .loaContentType)
        loaContentType = loaContentTypeDecoded
    }
}

extension DescribeLoaOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLoaOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLoaOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLoaOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLoaOutputResponse(loaContent: \(Swift.String(describing: loaContent)), loaContentType: \(Swift.String(describing: loaContentType)))"}
}

extension DescribeLoaOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLoaOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loaContent = output.loaContent
            self.loaContentType = output.loaContentType
        } else {
            self.loaContent = nil
            self.loaContentType = nil
        }
    }
}

/// Information about a Letter of Authorization - Connecting Facility Assignment (LOA-CFA) for a connection.
public struct DescribeLoaOutputResponse: Swift.Equatable {
    /// The binary contents of the LOA-CFA document.
    public let loaContent: ClientRuntime.Data?
    /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
    public let loaContentType: DirectConnectClientTypes.LoaContentType?

    public init (
        loaContent: ClientRuntime.Data? = nil,
        loaContentType: DirectConnectClientTypes.LoaContentType? = nil
    )
    {
        self.loaContent = loaContent
        self.loaContentType = loaContentType
    }
}

struct DescribeLoaOutputResponseBody: Swift.Equatable {
    public let loaContent: ClientRuntime.Data?
    public let loaContentType: DirectConnectClientTypes.LoaContentType?
}

extension DescribeLoaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loaContent
        case loaContentType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loaContentDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .loaContent)
        loaContent = loaContentDecoded
        let loaContentTypeDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.LoaContentType.self, forKey: .loaContentType)
        loaContentType = loaContentTypeDecoded
    }
}

extension DescribeLocationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationsInput()"}
}

extension DescribeLocationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeLocationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationsOutputError>
}

public struct DescribeLocationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationsOutputError>
}

public struct DescribeLocationsInput: Swift.Equatable {

    public init() {}
}

struct DescribeLocationsInputBody: Swift.Equatable {
}

extension DescribeLocationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeLocationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLocationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLocationsOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLocationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationsOutputResponse(locations: \(Swift.String(describing: locations)))"}
}

extension DescribeLocationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLocationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locations = output.locations
        } else {
            self.locations = nil
        }
    }
}

public struct DescribeLocationsOutputResponse: Swift.Equatable {
    /// The locations.
    public let locations: [DirectConnectClientTypes.Location]?

    public init (
        locations: [DirectConnectClientTypes.Location]? = nil
    )
    {
        self.locations = locations
    }
}

struct DescribeLocationsOutputResponseBody: Swift.Equatable {
    public let locations: [DirectConnectClientTypes.Location]?
}

extension DescribeLocationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Location?].self, forKey: .locations)
        var locationsDecoded0:[DirectConnectClientTypes.Location]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [DirectConnectClientTypes.Location]()
            for structure0 in locationsContainer {
                if let structure0 = structure0 {
                    locationsDecoded0?.append(structure0)
                }
            }
        }
        locations = locationsDecoded0
    }
}

public struct DescribeTagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTagsOutputError>
}

extension DescribeTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTagsInput(resourceArns: \(Swift.String(describing: resourceArns)))"}
}

extension DescribeTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArns = resourceArns {
            var resourceArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceArns)
            for resourcearnlist0 in resourceArns {
                try resourceArnsContainer.encode(resourcearnlist0)
            }
        }
    }
}

public struct DescribeTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTagsOutputError>
}

public struct DescribeTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTagsOutputError>
}

public struct DescribeTagsInput: Swift.Equatable {
    /// The Amazon Resource Names (ARNs) of the resources.
    /// This member is required.
    public let resourceArns: [Swift.String]?

    public init (
        resourceArns: [Swift.String]? = nil
    )
    {
        self.resourceArns = resourceArns
    }
}

struct DescribeTagsInputBody: Swift.Equatable {
    public let resourceArns: [Swift.String]?
}

extension DescribeTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceArns)
        var resourceArnsDecoded0:[Swift.String]? = nil
        if let resourceArnsContainer = resourceArnsContainer {
            resourceArnsDecoded0 = [Swift.String]()
            for string0 in resourceArnsContainer {
                if let string0 = string0 {
                    resourceArnsDecoded0?.append(string0)
                }
            }
        }
        resourceArns = resourceArnsDecoded0
    }
}

extension DescribeTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTagsOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTagsOutputResponse(resourceTags: \(Swift.String(describing: resourceTags)))"}
}

extension DescribeTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceTags = output.resourceTags
        } else {
            self.resourceTags = nil
        }
    }
}

public struct DescribeTagsOutputResponse: Swift.Equatable {
    /// Information about the tags.
    public let resourceTags: [DirectConnectClientTypes.ResourceTag]?

    public init (
        resourceTags: [DirectConnectClientTypes.ResourceTag]? = nil
    )
    {
        self.resourceTags = resourceTags
    }
}

struct DescribeTagsOutputResponseBody: Swift.Equatable {
    public let resourceTags: [DirectConnectClientTypes.ResourceTag]?
}

extension DescribeTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceTags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.ResourceTag?].self, forKey: .resourceTags)
        var resourceTagsDecoded0:[DirectConnectClientTypes.ResourceTag]? = nil
        if let resourceTagsContainer = resourceTagsContainer {
            resourceTagsDecoded0 = [DirectConnectClientTypes.ResourceTag]()
            for structure0 in resourceTagsContainer {
                if let structure0 = structure0 {
                    resourceTagsDecoded0?.append(structure0)
                }
            }
        }
        resourceTags = resourceTagsDecoded0
    }
}

extension DescribeVirtualGatewaysInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualGatewaysInput()"}
}

extension DescribeVirtualGatewaysInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeVirtualGatewaysInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualGatewaysInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualGatewaysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualGatewaysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualGatewaysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualGatewaysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualGatewaysOutputError>
}

public struct DescribeVirtualGatewaysInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualGatewaysInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualGatewaysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualGatewaysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualGatewaysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualGatewaysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualGatewaysOutputError>
}

public struct DescribeVirtualGatewaysInput: Swift.Equatable {

    public init() {}
}

struct DescribeVirtualGatewaysInputBody: Swift.Equatable {
}

extension DescribeVirtualGatewaysInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeVirtualGatewaysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVirtualGatewaysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeVirtualGatewaysOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVirtualGatewaysOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualGatewaysOutputResponse(virtualGateways: \(Swift.String(describing: virtualGateways)))"}
}

extension DescribeVirtualGatewaysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeVirtualGatewaysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualGateways = output.virtualGateways
        } else {
            self.virtualGateways = nil
        }
    }
}

public struct DescribeVirtualGatewaysOutputResponse: Swift.Equatable {
    /// The virtual private gateways.
    public let virtualGateways: [DirectConnectClientTypes.VirtualGateway]?

    public init (
        virtualGateways: [DirectConnectClientTypes.VirtualGateway]? = nil
    )
    {
        self.virtualGateways = virtualGateways
    }
}

struct DescribeVirtualGatewaysOutputResponseBody: Swift.Equatable {
    public let virtualGateways: [DirectConnectClientTypes.VirtualGateway]?
}

extension DescribeVirtualGatewaysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualGateways
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualGatewaysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.VirtualGateway?].self, forKey: .virtualGateways)
        var virtualGatewaysDecoded0:[DirectConnectClientTypes.VirtualGateway]? = nil
        if let virtualGatewaysContainer = virtualGatewaysContainer {
            virtualGatewaysDecoded0 = [DirectConnectClientTypes.VirtualGateway]()
            for structure0 in virtualGatewaysContainer {
                if let structure0 = structure0 {
                    virtualGatewaysDecoded0?.append(structure0)
                }
            }
        }
        virtualGateways = virtualGatewaysDecoded0
    }
}

public struct DescribeVirtualInterfacesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualInterfacesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualInterfacesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualInterfacesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualInterfacesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualInterfacesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualInterfacesOutputError>
}

extension DescribeVirtualInterfacesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualInterfacesInput(connectionId: \(Swift.String(describing: connectionId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension DescribeVirtualInterfacesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct DescribeVirtualInterfacesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualInterfacesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualInterfacesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualInterfacesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualInterfacesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualInterfacesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualInterfacesOutputError>
}

public struct DescribeVirtualInterfacesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualInterfacesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualInterfacesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualInterfacesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualInterfacesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualInterfacesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualInterfacesOutputError>
}

public struct DescribeVirtualInterfacesInput: Swift.Equatable {
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The ID of the virtual interface.
    public let virtualInterfaceId: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct DescribeVirtualInterfacesInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let virtualInterfaceId: Swift.String?
}

extension DescribeVirtualInterfacesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
    }
}

extension DescribeVirtualInterfacesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVirtualInterfacesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeVirtualInterfacesOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVirtualInterfacesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualInterfacesOutputResponse(virtualInterfaces: \(Swift.String(describing: virtualInterfaces)))"}
}

extension DescribeVirtualInterfacesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeVirtualInterfacesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualInterfaces = output.virtualInterfaces
        } else {
            self.virtualInterfaces = nil
        }
    }
}

public struct DescribeVirtualInterfacesOutputResponse: Swift.Equatable {
    /// The virtual interfaces
    public let virtualInterfaces: [DirectConnectClientTypes.VirtualInterface]?

    public init (
        virtualInterfaces: [DirectConnectClientTypes.VirtualInterface]? = nil
    )
    {
        self.virtualInterfaces = virtualInterfaces
    }
}

struct DescribeVirtualInterfacesOutputResponseBody: Swift.Equatable {
    public let virtualInterfaces: [DirectConnectClientTypes.VirtualInterface]?
}

extension DescribeVirtualInterfacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaces
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfacesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.VirtualInterface?].self, forKey: .virtualInterfaces)
        var virtualInterfacesDecoded0:[DirectConnectClientTypes.VirtualInterface]? = nil
        if let virtualInterfacesContainer = virtualInterfacesContainer {
            virtualInterfacesDecoded0 = [DirectConnectClientTypes.VirtualInterface]()
            for structure0 in virtualInterfacesContainer {
                if let structure0 = structure0 {
                    virtualInterfacesDecoded0?.append(structure0)
                }
            }
        }
        virtualInterfaces = virtualInterfacesDecoded0
    }
}

extension DirectConnectClientException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectConnectClientException(message: \(Swift.String(describing: message)))"}
}

extension DirectConnectClientException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DirectConnectClientExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// One or more parameters are not valid.
public struct DirectConnectClientException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DirectConnectClientExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DirectConnectClientExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DirectConnectClientTypes.DirectConnectGateway: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonSideAsn
        case directConnectGatewayId
        case directConnectGatewayName
        case directConnectGatewayState
        case ownerAccount
        case stateChangeError
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amazonSideAsn = amazonSideAsn {
            try encodeContainer.encode(amazonSideAsn, forKey: .amazonSideAsn)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let directConnectGatewayName = directConnectGatewayName {
            try encodeContainer.encode(directConnectGatewayName, forKey: .directConnectGatewayName)
        }
        if let directConnectGatewayState = directConnectGatewayState {
            try encodeContainer.encode(directConnectGatewayState.rawValue, forKey: .directConnectGatewayState)
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let stateChangeError = stateChangeError {
            try encodeContainer.encode(stateChangeError, forKey: .stateChangeError)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let directConnectGatewayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayName)
        directConnectGatewayName = directConnectGatewayNameDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let directConnectGatewayStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGatewayState.self, forKey: .directConnectGatewayState)
        directConnectGatewayState = directConnectGatewayStateDecoded
        let stateChangeErrorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateChangeError)
        stateChangeError = stateChangeErrorDecoded
    }
}

extension DirectConnectClientTypes.DirectConnectGateway: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectConnectGateway(amazonSideAsn: \(Swift.String(describing: amazonSideAsn)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), directConnectGatewayName: \(Swift.String(describing: directConnectGatewayName)), directConnectGatewayState: \(Swift.String(describing: directConnectGatewayState)), ownerAccount: \(Swift.String(describing: ownerAccount)), stateChangeError: \(Swift.String(describing: stateChangeError)))"}
}

extension DirectConnectClientTypes {
    /// Information about a Direct Connect gateway, which enables you to connect virtual interfaces and virtual private gateway or transit gateways.
    public struct DirectConnectGateway: Swift.Equatable {
        /// The autonomous system number (ASN) for the Amazon side of the connection.
        public let amazonSideAsn: Swift.Int?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: Swift.String?
        /// The name of the Direct Connect gateway.
        public let directConnectGatewayName: Swift.String?
        /// The state of the Direct Connect gateway. The following are the possible values:
        ///
        ///
        ///
        ///                   pending: The initial state after calling CreateDirectConnectGateway.
        ///
        ///
        ///
        ///                   available: The Direct Connect gateway is ready for use.
        ///
        ///
        ///
        ///                   deleting: The initial state after calling DeleteDirectConnectGateway.
        ///
        ///
        ///
        ///                   deleted: The Direct Connect gateway is deleted and cannot pass traffic.
        ///
        ///
        public let directConnectGatewayState: DirectConnectClientTypes.DirectConnectGatewayState?
        /// The ID of the account that owns the Direct Connect gateway.
        public let ownerAccount: Swift.String?
        /// The error message if the state of an object failed to advance.
        public let stateChangeError: Swift.String?

        public init (
            amazonSideAsn: Swift.Int? = nil,
            directConnectGatewayId: Swift.String? = nil,
            directConnectGatewayName: Swift.String? = nil,
            directConnectGatewayState: DirectConnectClientTypes.DirectConnectGatewayState? = nil,
            ownerAccount: Swift.String? = nil,
            stateChangeError: Swift.String? = nil
        )
        {
            self.amazonSideAsn = amazonSideAsn
            self.directConnectGatewayId = directConnectGatewayId
            self.directConnectGatewayName = directConnectGatewayName
            self.directConnectGatewayState = directConnectGatewayState
            self.ownerAccount = ownerAccount
            self.stateChangeError = stateChangeError
        }
    }

}

extension DirectConnectClientTypes.DirectConnectGatewayAssociation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedPrefixesToDirectConnectGateway
        case associatedGateway
        case associationId
        case associationState
        case directConnectGatewayId
        case directConnectGatewayOwnerAccount
        case stateChangeError
        case virtualGatewayId
        case virtualGatewayOwnerAccount
        case virtualGatewayRegion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedPrefixesToDirectConnectGateway = allowedPrefixesToDirectConnectGateway {
            var allowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in allowedPrefixesToDirectConnectGateway {
                try allowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
        if let associatedGateway = associatedGateway {
            try encodeContainer.encode(associatedGateway, forKey: .associatedGateway)
        }
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let associationState = associationState {
            try encodeContainer.encode(associationState.rawValue, forKey: .associationState)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccount {
            try encodeContainer.encode(directConnectGatewayOwnerAccount, forKey: .directConnectGatewayOwnerAccount)
        }
        if let stateChangeError = stateChangeError {
            try encodeContainer.encode(stateChangeError, forKey: .stateChangeError)
        }
        if let virtualGatewayId = virtualGatewayId {
            try encodeContainer.encode(virtualGatewayId, forKey: .virtualGatewayId)
        }
        if let virtualGatewayOwnerAccount = virtualGatewayOwnerAccount {
            try encodeContainer.encode(virtualGatewayOwnerAccount, forKey: .virtualGatewayOwnerAccount)
        }
        if let virtualGatewayRegion = virtualGatewayRegion {
            try encodeContainer.encode(virtualGatewayRegion, forKey: .virtualGatewayRegion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let directConnectGatewayOwnerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayOwnerAccount)
        directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccountDecoded
        let associationStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGatewayAssociationState.self, forKey: .associationState)
        associationState = associationStateDecoded
        let stateChangeErrorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateChangeError)
        stateChangeError = stateChangeErrorDecoded
        let associatedGatewayDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AssociatedGateway.self, forKey: .associatedGateway)
        associatedGateway = associatedGatewayDecoded
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let allowedPrefixesToDirectConnectGatewayContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .allowedPrefixesToDirectConnectGateway)
        var allowedPrefixesToDirectConnectGatewayDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let allowedPrefixesToDirectConnectGatewayContainer = allowedPrefixesToDirectConnectGatewayContainer {
            allowedPrefixesToDirectConnectGatewayDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in allowedPrefixesToDirectConnectGatewayContainer {
                if let structure0 = structure0 {
                    allowedPrefixesToDirectConnectGatewayDecoded0?.append(structure0)
                }
            }
        }
        allowedPrefixesToDirectConnectGateway = allowedPrefixesToDirectConnectGatewayDecoded0
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let virtualGatewayRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayRegion)
        virtualGatewayRegion = virtualGatewayRegionDecoded
        let virtualGatewayOwnerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayOwnerAccount)
        virtualGatewayOwnerAccount = virtualGatewayOwnerAccountDecoded
    }
}

extension DirectConnectClientTypes.DirectConnectGatewayAssociation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectConnectGatewayAssociation(allowedPrefixesToDirectConnectGateway: \(Swift.String(describing: allowedPrefixesToDirectConnectGateway)), associatedGateway: \(Swift.String(describing: associatedGateway)), associationId: \(Swift.String(describing: associationId)), associationState: \(Swift.String(describing: associationState)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), directConnectGatewayOwnerAccount: \(Swift.String(describing: directConnectGatewayOwnerAccount)), stateChangeError: \(Swift.String(describing: stateChangeError)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)), virtualGatewayOwnerAccount: \(Swift.String(describing: virtualGatewayOwnerAccount)), virtualGatewayRegion: \(Swift.String(describing: virtualGatewayRegion)))"}
}

extension DirectConnectClientTypes {
    /// Information about an association between a Direct Connect gateway and a virtual private gateway or transit gateway.
    public struct DirectConnectGatewayAssociation: Swift.Equatable {
        /// The Amazon VPC prefixes to advertise to the Direct Connect gateway.
        public let allowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
        /// Information about the associated gateway.
        public let associatedGateway: DirectConnectClientTypes.AssociatedGateway?
        /// The ID of the Direct Connect gateway association.
        public let associationId: Swift.String?
        /// The state of the association. The following are the possible values:
        ///
        ///
        ///
        ///                   associating: The initial state after calling CreateDirectConnectGatewayAssociation.
        ///
        ///
        ///
        ///                   associated: The Direct Connect gateway and virtual private gateway or transit gateway are successfully associated and ready to pass traffic.
        ///
        ///
        ///
        ///                   disassociating: The initial state after calling DeleteDirectConnectGatewayAssociation.
        ///
        ///
        ///
        ///                   disassociated: The virtual private gateway or transit gateway is disassociated from the Direct Connect gateway. Traffic flow between the Direct Connect gateway and virtual private gateway or transit gateway is stopped.
        ///
        ///
        public let associationState: DirectConnectClientTypes.DirectConnectGatewayAssociationState?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: Swift.String?
        /// The ID of the account that owns the associated gateway.
        public let directConnectGatewayOwnerAccount: Swift.String?
        /// The error message if the state of an object failed to advance.
        public let stateChangeError: Swift.String?
        /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
        public let virtualGatewayId: Swift.String?
        /// The ID of the account that owns the virtual private gateway.
        public let virtualGatewayOwnerAccount: Swift.String?
        /// The Region where the virtual private gateway is located.
        @available(*, deprecated)
        public let virtualGatewayRegion: Swift.String?

        public init (
            allowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
            associatedGateway: DirectConnectClientTypes.AssociatedGateway? = nil,
            associationId: Swift.String? = nil,
            associationState: DirectConnectClientTypes.DirectConnectGatewayAssociationState? = nil,
            directConnectGatewayId: Swift.String? = nil,
            directConnectGatewayOwnerAccount: Swift.String? = nil,
            stateChangeError: Swift.String? = nil,
            virtualGatewayId: Swift.String? = nil,
            virtualGatewayOwnerAccount: Swift.String? = nil,
            virtualGatewayRegion: Swift.String? = nil
        )
        {
            self.allowedPrefixesToDirectConnectGateway = allowedPrefixesToDirectConnectGateway
            self.associatedGateway = associatedGateway
            self.associationId = associationId
            self.associationState = associationState
            self.directConnectGatewayId = directConnectGatewayId
            self.directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccount
            self.stateChangeError = stateChangeError
            self.virtualGatewayId = virtualGatewayId
            self.virtualGatewayOwnerAccount = virtualGatewayOwnerAccount
            self.virtualGatewayRegion = virtualGatewayRegion
        }
    }

}

extension DirectConnectClientTypes.DirectConnectGatewayAssociationProposal: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedGateway
        case directConnectGatewayId
        case directConnectGatewayOwnerAccount
        case existingAllowedPrefixesToDirectConnectGateway
        case proposalId
        case proposalState
        case requestedAllowedPrefixesToDirectConnectGateway
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associatedGateway = associatedGateway {
            try encodeContainer.encode(associatedGateway, forKey: .associatedGateway)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccount {
            try encodeContainer.encode(directConnectGatewayOwnerAccount, forKey: .directConnectGatewayOwnerAccount)
        }
        if let existingAllowedPrefixesToDirectConnectGateway = existingAllowedPrefixesToDirectConnectGateway {
            var existingAllowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .existingAllowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in existingAllowedPrefixesToDirectConnectGateway {
                try existingAllowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
        if let proposalId = proposalId {
            try encodeContainer.encode(proposalId, forKey: .proposalId)
        }
        if let proposalState = proposalState {
            try encodeContainer.encode(proposalState.rawValue, forKey: .proposalState)
        }
        if let requestedAllowedPrefixesToDirectConnectGateway = requestedAllowedPrefixesToDirectConnectGateway {
            var requestedAllowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestedAllowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in requestedAllowedPrefixesToDirectConnectGateway {
                try requestedAllowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let directConnectGatewayOwnerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayOwnerAccount)
        directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccountDecoded
        let proposalStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGatewayAssociationProposalState.self, forKey: .proposalState)
        proposalState = proposalStateDecoded
        let associatedGatewayDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AssociatedGateway.self, forKey: .associatedGateway)
        associatedGateway = associatedGatewayDecoded
        let existingAllowedPrefixesToDirectConnectGatewayContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .existingAllowedPrefixesToDirectConnectGateway)
        var existingAllowedPrefixesToDirectConnectGatewayDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let existingAllowedPrefixesToDirectConnectGatewayContainer = existingAllowedPrefixesToDirectConnectGatewayContainer {
            existingAllowedPrefixesToDirectConnectGatewayDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in existingAllowedPrefixesToDirectConnectGatewayContainer {
                if let structure0 = structure0 {
                    existingAllowedPrefixesToDirectConnectGatewayDecoded0?.append(structure0)
                }
            }
        }
        existingAllowedPrefixesToDirectConnectGateway = existingAllowedPrefixesToDirectConnectGatewayDecoded0
        let requestedAllowedPrefixesToDirectConnectGatewayContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .requestedAllowedPrefixesToDirectConnectGateway)
        var requestedAllowedPrefixesToDirectConnectGatewayDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let requestedAllowedPrefixesToDirectConnectGatewayContainer = requestedAllowedPrefixesToDirectConnectGatewayContainer {
            requestedAllowedPrefixesToDirectConnectGatewayDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in requestedAllowedPrefixesToDirectConnectGatewayContainer {
                if let structure0 = structure0 {
                    requestedAllowedPrefixesToDirectConnectGatewayDecoded0?.append(structure0)
                }
            }
        }
        requestedAllowedPrefixesToDirectConnectGateway = requestedAllowedPrefixesToDirectConnectGatewayDecoded0
    }
}

extension DirectConnectClientTypes.DirectConnectGatewayAssociationProposal: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectConnectGatewayAssociationProposal(associatedGateway: \(Swift.String(describing: associatedGateway)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), directConnectGatewayOwnerAccount: \(Swift.String(describing: directConnectGatewayOwnerAccount)), existingAllowedPrefixesToDirectConnectGateway: \(Swift.String(describing: existingAllowedPrefixesToDirectConnectGateway)), proposalId: \(Swift.String(describing: proposalId)), proposalState: \(Swift.String(describing: proposalState)), requestedAllowedPrefixesToDirectConnectGateway: \(Swift.String(describing: requestedAllowedPrefixesToDirectConnectGateway)))"}
}

extension DirectConnectClientTypes {
    /// Information about the  proposal request to attach a virtual private gateway to a Direct Connect gateway.
    public struct DirectConnectGatewayAssociationProposal: Swift.Equatable {
        /// Information about the associated gateway.
        public let associatedGateway: DirectConnectClientTypes.AssociatedGateway?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: Swift.String?
        /// The ID of the account that owns the Direct Connect gateway.
        public let directConnectGatewayOwnerAccount: Swift.String?
        /// The existing Amazon VPC prefixes advertised to the Direct Connect gateway.
        public let existingAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
        /// The ID of the association proposal.
        public let proposalId: Swift.String?
        /// The state of the proposal. The following are possible values:
        ///
        ///
        ///
        ///                   accepted: The proposal has been accepted. The Direct Connect gateway association is available to use in this state.
        ///
        ///
        ///
        ///                   deleted: The proposal has been deleted by the owner that made the proposal.  The Direct Connect gateway association cannot be used in this state.
        ///
        ///
        ///
        ///                   requested: The proposal has been requested. The Direct Connect gateway association cannot be used in this state.
        ///
        ///
        public let proposalState: DirectConnectClientTypes.DirectConnectGatewayAssociationProposalState?
        /// The Amazon VPC prefixes to advertise to the Direct Connect gateway.
        public let requestedAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?

        public init (
            associatedGateway: DirectConnectClientTypes.AssociatedGateway? = nil,
            directConnectGatewayId: Swift.String? = nil,
            directConnectGatewayOwnerAccount: Swift.String? = nil,
            existingAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
            proposalId: Swift.String? = nil,
            proposalState: DirectConnectClientTypes.DirectConnectGatewayAssociationProposalState? = nil,
            requestedAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]? = nil
        )
        {
            self.associatedGateway = associatedGateway
            self.directConnectGatewayId = directConnectGatewayId
            self.directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccount
            self.existingAllowedPrefixesToDirectConnectGateway = existingAllowedPrefixesToDirectConnectGateway
            self.proposalId = proposalId
            self.proposalState = proposalState
            self.requestedAllowedPrefixesToDirectConnectGateway = requestedAllowedPrefixesToDirectConnectGateway
        }
    }

}

extension DirectConnectClientTypes {
    public enum DirectConnectGatewayAssociationProposalState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accepted
        case deleted
        case requested
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectConnectGatewayAssociationProposalState] {
            return [
                .accepted,
                .deleted,
                .requested,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accepted: return "accepted"
            case .deleted: return "deleted"
            case .requested: return "requested"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectConnectGatewayAssociationProposalState(rawValue: rawValue) ?? DirectConnectGatewayAssociationProposalState.sdkUnknown(rawValue)
        }
    }
}

extension DirectConnectClientTypes {
    public enum DirectConnectGatewayAssociationState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case associated
        case associating
        case disassociated
        case disassociating
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectConnectGatewayAssociationState] {
            return [
                .associated,
                .associating,
                .disassociated,
                .disassociating,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .associated: return "associated"
            case .associating: return "associating"
            case .disassociated: return "disassociated"
            case .disassociating: return "disassociating"
            case .updating: return "updating"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectConnectGatewayAssociationState(rawValue: rawValue) ?? DirectConnectGatewayAssociationState.sdkUnknown(rawValue)
        }
    }
}

extension DirectConnectClientTypes.DirectConnectGatewayAttachment: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentState
        case attachmentType
        case directConnectGatewayId
        case stateChangeError
        case virtualInterfaceId
        case virtualInterfaceOwnerAccount
        case virtualInterfaceRegion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentState = attachmentState {
            try encodeContainer.encode(attachmentState.rawValue, forKey: .attachmentState)
        }
        if let attachmentType = attachmentType {
            try encodeContainer.encode(attachmentType.rawValue, forKey: .attachmentType)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let stateChangeError = stateChangeError {
            try encodeContainer.encode(stateChangeError, forKey: .stateChangeError)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
        if let virtualInterfaceOwnerAccount = virtualInterfaceOwnerAccount {
            try encodeContainer.encode(virtualInterfaceOwnerAccount, forKey: .virtualInterfaceOwnerAccount)
        }
        if let virtualInterfaceRegion = virtualInterfaceRegion {
            try encodeContainer.encode(virtualInterfaceRegion, forKey: .virtualInterfaceRegion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let virtualInterfaceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceRegion)
        virtualInterfaceRegion = virtualInterfaceRegionDecoded
        let virtualInterfaceOwnerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceOwnerAccount)
        virtualInterfaceOwnerAccount = virtualInterfaceOwnerAccountDecoded
        let attachmentStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGatewayAttachmentState.self, forKey: .attachmentState)
        attachmentState = attachmentStateDecoded
        let attachmentTypeDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGatewayAttachmentType.self, forKey: .attachmentType)
        attachmentType = attachmentTypeDecoded
        let stateChangeErrorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateChangeError)
        stateChangeError = stateChangeErrorDecoded
    }
}

extension DirectConnectClientTypes.DirectConnectGatewayAttachment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectConnectGatewayAttachment(attachmentState: \(Swift.String(describing: attachmentState)), attachmentType: \(Swift.String(describing: attachmentType)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), stateChangeError: \(Swift.String(describing: stateChangeError)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)), virtualInterfaceOwnerAccount: \(Swift.String(describing: virtualInterfaceOwnerAccount)), virtualInterfaceRegion: \(Swift.String(describing: virtualInterfaceRegion)))"}
}

extension DirectConnectClientTypes {
    /// Information about an attachment between a Direct Connect gateway and a virtual interface.
    public struct DirectConnectGatewayAttachment: Swift.Equatable {
        /// The state of the attachment. The following are the possible values:
        ///
        ///
        ///
        ///                   attaching: The initial state after a virtual interface is created using the Direct Connect gateway.
        ///
        ///
        ///
        ///                   attached: The Direct Connect gateway and virtual interface are attached and ready to pass traffic.
        ///
        ///
        ///
        ///                   detaching: The initial state after calling DeleteVirtualInterface.
        ///
        ///
        ///
        ///                   detached: The virtual interface is detached from the Direct Connect gateway. Traffic flow between the Direct Connect gateway and virtual interface is stopped.
        ///
        ///
        public let attachmentState: DirectConnectClientTypes.DirectConnectGatewayAttachmentState?
        /// The type of attachment.
        public let attachmentType: DirectConnectClientTypes.DirectConnectGatewayAttachmentType?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: Swift.String?
        /// The error message if the state of an object failed to advance.
        public let stateChangeError: Swift.String?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: Swift.String?
        /// The ID of the account that owns the virtual interface.
        public let virtualInterfaceOwnerAccount: Swift.String?
        /// The Region where the virtual interface is located.
        public let virtualInterfaceRegion: Swift.String?

        public init (
            attachmentState: DirectConnectClientTypes.DirectConnectGatewayAttachmentState? = nil,
            attachmentType: DirectConnectClientTypes.DirectConnectGatewayAttachmentType? = nil,
            directConnectGatewayId: Swift.String? = nil,
            stateChangeError: Swift.String? = nil,
            virtualInterfaceId: Swift.String? = nil,
            virtualInterfaceOwnerAccount: Swift.String? = nil,
            virtualInterfaceRegion: Swift.String? = nil
        )
        {
            self.attachmentState = attachmentState
            self.attachmentType = attachmentType
            self.directConnectGatewayId = directConnectGatewayId
            self.stateChangeError = stateChangeError
            self.virtualInterfaceId = virtualInterfaceId
            self.virtualInterfaceOwnerAccount = virtualInterfaceOwnerAccount
            self.virtualInterfaceRegion = virtualInterfaceRegion
        }
    }

}

extension DirectConnectClientTypes {
    public enum DirectConnectGatewayAttachmentState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case attached
        case attaching
        case detached
        case detaching
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectConnectGatewayAttachmentState] {
            return [
                .attached,
                .attaching,
                .detached,
                .detaching,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .attached: return "attached"
            case .attaching: return "attaching"
            case .detached: return "detached"
            case .detaching: return "detaching"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectConnectGatewayAttachmentState(rawValue: rawValue) ?? DirectConnectGatewayAttachmentState.sdkUnknown(rawValue)
        }
    }
}

extension DirectConnectClientTypes {
    public enum DirectConnectGatewayAttachmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case privatevirtualinterface
        case transitvirtualinterface
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectConnectGatewayAttachmentType] {
            return [
                .privatevirtualinterface,
                .transitvirtualinterface,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .privatevirtualinterface: return "PrivateVirtualInterface"
            case .transitvirtualinterface: return "TransitVirtualInterface"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectConnectGatewayAttachmentType(rawValue: rawValue) ?? DirectConnectGatewayAttachmentType.sdkUnknown(rawValue)
        }
    }
}

extension DirectConnectClientTypes {
    public enum DirectConnectGatewayState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case deleted
        case deleting
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectConnectGatewayState] {
            return [
                .available,
                .deleted,
                .deleting,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .deleted: return "deleted"
            case .deleting: return "deleting"
            case .pending: return "pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectConnectGatewayState(rawValue: rawValue) ?? DirectConnectGatewayState.sdkUnknown(rawValue)
        }
    }
}

extension DirectConnectServerException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectConnectServerException(message: \(Swift.String(describing: message)))"}
}

extension DirectConnectServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DirectConnectServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A server-side error occurred.
public struct DirectConnectServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DirectConnectServerExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DirectConnectServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct DisassociateConnectionFromLagInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateConnectionFromLagInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateConnectionFromLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateConnectionFromLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateConnectionFromLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateConnectionFromLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateConnectionFromLagOutputError>
}

extension DisassociateConnectionFromLagInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateConnectionFromLagInput(connectionId: \(Swift.String(describing: connectionId)), lagId: \(Swift.String(describing: lagId)))"}
}

extension DisassociateConnectionFromLagInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case lagId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let lagId = lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
    }
}

public struct DisassociateConnectionFromLagInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateConnectionFromLagInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateConnectionFromLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateConnectionFromLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateConnectionFromLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateConnectionFromLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateConnectionFromLagOutputError>
}

public struct DisassociateConnectionFromLagInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateConnectionFromLagInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateConnectionFromLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateConnectionFromLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateConnectionFromLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateConnectionFromLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateConnectionFromLagOutputError>
}

public struct DisassociateConnectionFromLagInput: Swift.Equatable {
    /// The ID of the connection.
    /// This member is required.
    public let connectionId: Swift.String?
    /// The ID of the LAG.
    /// This member is required.
    public let lagId: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        lagId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.lagId = lagId
    }
}

struct DisassociateConnectionFromLagInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let lagId: Swift.String?
}

extension DisassociateConnectionFromLagInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case lagId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
    }
}

extension DisassociateConnectionFromLagOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateConnectionFromLagOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateConnectionFromLagOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateConnectionFromLagOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateConnectionFromLagOutputResponse(awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bandwidth: \(Swift.String(describing: bandwidth)), connectionId: \(Swift.String(describing: connectionId)), connectionName: \(Swift.String(describing: connectionName)), connectionState: \(Swift.String(describing: connectionState)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), loaIssueTime: \(Swift.String(describing: loaIssueTime)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), ownerAccount: \(Swift.String(describing: ownerAccount)), partnerName: \(Swift.String(describing: partnerName)), portEncryptionStatus: \(Swift.String(describing: portEncryptionStatus)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)), vlan: \(Swift.String(describing: vlan)))"}
}

extension DisassociateConnectionFromLagOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisassociateConnectionFromLagOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bandwidth = output.bandwidth
            self.connectionId = output.connectionId
            self.connectionName = output.connectionName
            self.connectionState = output.connectionState
            self.encryptionMode = output.encryptionMode
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.loaIssueTime = output.loaIssueTime
            self.location = output.location
            self.macSecCapable = output.macSecCapable
            self.macSecKeys = output.macSecKeys
            self.ownerAccount = output.ownerAccount
            self.partnerName = output.partnerName
            self.portEncryptionStatus = output.portEncryptionStatus
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
            self.vlan = output.vlan
        } else {
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bandwidth = nil
            self.connectionId = nil
            self.connectionName = nil
            self.connectionState = nil
            self.encryptionMode = nil
            self.hasLogicalRedundancy = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.loaIssueTime = nil
            self.location = nil
            self.macSecCapable = nil
            self.macSecKeys = nil
            self.ownerAccount = nil
            self.partnerName = nil
            self.portEncryptionStatus = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
            self.vlan = 0
        }
    }
}

/// Information about an Direct Connect connection.
public struct DisassociateConnectionFromLagOutputResponse: Swift.Equatable {
    /// The Direct Connect endpoint on which the physical connection terminates.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The bandwidth of the connection.
    public let bandwidth: Swift.String?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The name of the connection.
    public let connectionName: Swift.String?
    /// The state of the connection. The following are the possible values:
    ///
    ///
    ///
    ///                   ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.
    ///
    ///
    ///
    ///                   requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    ///
    ///
    ///                   pending: The connection has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is up and the connection is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The connection is being deleted.
    ///
    ///
    ///
    ///                   deleted: The connection has been deleted.
    ///
    ///
    ///
    ///                   rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.
    ///
    ///
    ///
    ///                   unknown: The state of the connection is not available.
    ///
    ///
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    /// The MAC Security (MACsec) connection encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?
    /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The time of the most recent call to DescribeLoa for this connection.
    public let loaIssueTime: ClientRuntime.Date?
    /// The location of the connection.
    public let location: Swift.String?
    /// Indicates whether the connection supports MAC Security (MACsec).
    public let macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the connection.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The ID of the account that owns the connection.
    public let ownerAccount: Swift.String?
    /// The name of the Direct Connect service provider associated with the connection.
    public let partnerName: Swift.String?
    /// The MAC Security (MACsec) port link status of the connection.
    ///          The valid values are Encryption Up, which means that there is an active Connection Key Name, or Encryption Down.
    public let portEncryptionStatus: Swift.String?
    /// The name of the service provider associated with the connection.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the connection.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bandwidth: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        connectionState: DirectConnectClientTypes.ConnectionState? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        loaIssueTime: ClientRuntime.Date? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        ownerAccount: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        portEncryptionStatus: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bandwidth = bandwidth
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.connectionState = connectionState
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.ownerAccount = ownerAccount
        self.partnerName = partnerName
        self.portEncryptionStatus = portEncryptionStatus
        self.providerName = providerName
        self.region = region
        self.tags = tags
        self.vlan = vlan
    }
}

struct DisassociateConnectionFromLagOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let connectionId: Swift.String?
    public let connectionName: Swift.String?
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    public let region: Swift.String?
    public let location: Swift.String?
    public let bandwidth: Swift.String?
    public let vlan: Swift.Int
    public let partnerName: Swift.String?
    public let loaIssueTime: ClientRuntime.Date?
    public let lagId: Swift.String?
    public let awsDevice: Swift.String?
    public let jumboFrameCapable: Swift.Bool?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let macSecCapable: Swift.Bool?
    public let portEncryptionStatus: Swift.String?
    public let encryptionMode: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension DisassociateConnectionFromLagOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case connectionId
        case connectionName
        case connectionState
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case macSecCapable
        case macSecKeys
        case ownerAccount
        case partnerName
        case portEncryptionStatus
        case providerName
        case region
        case tags
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let portEncryptionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portEncryptionStatus)
        portEncryptionStatus = portEncryptionStatusDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct DisassociateMacSecKeyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateMacSecKeyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateMacSecKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateMacSecKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateMacSecKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateMacSecKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateMacSecKeyOutputError>
}

extension DisassociateMacSecKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateMacSecKeyInput(connectionId: \(Swift.String(describing: connectionId)), secretARN: \(Swift.String(describing: secretARN)))"}
}

extension DisassociateMacSecKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case secretARN
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let secretARN = secretARN {
            try encodeContainer.encode(secretARN, forKey: .secretARN)
        }
    }
}

public struct DisassociateMacSecKeyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateMacSecKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateMacSecKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateMacSecKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateMacSecKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateMacSecKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateMacSecKeyOutputError>
}

public struct DisassociateMacSecKeyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateMacSecKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateMacSecKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateMacSecKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateMacSecKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateMacSecKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateMacSecKeyOutputError>
}

public struct DisassociateMacSecKeyInput: Swift.Equatable {
    /// The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx).
    ///          You can use DescribeConnections or DescribeLags to retrieve connection ID.
    /// This member is required.
    public let connectionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the MAC Security (MACsec) secret key.
    ///          You can use DescribeConnections to retrieve the ARN of the MAC Security (MACsec) secret key.
    /// This member is required.
    public let secretARN: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        secretARN: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.secretARN = secretARN
    }
}

struct DisassociateMacSecKeyInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let secretARN: Swift.String?
}

extension DisassociateMacSecKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case secretARN
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let secretARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretARN)
        secretARN = secretARNDecoded
    }
}

extension DisassociateMacSecKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateMacSecKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateMacSecKeyOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateMacSecKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateMacSecKeyOutputResponse(connectionId: \(Swift.String(describing: connectionId)), macSecKeys: \(Swift.String(describing: macSecKeys)))"}
}

extension DisassociateMacSecKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisassociateMacSecKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connectionId = output.connectionId
            self.macSecKeys = output.macSecKeys
        } else {
            self.connectionId = nil
            self.macSecKeys = nil
        }
    }
}

public struct DisassociateMacSecKeyOutputResponse: Swift.Equatable {
    /// The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx).
    public let connectionId: Swift.String?
    /// The MAC Security (MACsec) security keys no longer associated with the dedicated connection.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?

    public init (
        connectionId: Swift.String? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil
    )
    {
        self.connectionId = connectionId
        self.macSecKeys = macSecKeys
    }
}

struct DisassociateMacSecKeyOutputResponseBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension DisassociateMacSecKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case macSecKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

extension DuplicateTagKeysException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DuplicateTagKeysException(message: \(Swift.String(describing: message)))"}
}

extension DuplicateTagKeysException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DuplicateTagKeysExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A tag key was specified more than once.
public struct DuplicateTagKeysException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateTagKeysExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DuplicateTagKeysExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DirectConnectClientTypes {
    public enum GatewayType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case transitgateway
        case virtualprivategateway
        case sdkUnknown(Swift.String)

        public static var allCases: [GatewayType] {
            return [
                .transitgateway,
                .virtualprivategateway,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .transitgateway: return "transitGateway"
            case .virtualprivategateway: return "virtualPrivateGateway"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GatewayType(rawValue: rawValue) ?? GatewayType.sdkUnknown(rawValue)
        }
    }
}

extension DirectConnectClientTypes {
    public enum HasLogicalRedundancy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case no
        case unknown
        case yes
        case sdkUnknown(Swift.String)

        public static var allCases: [HasLogicalRedundancy] {
            return [
                .no,
                .unknown,
                .yes,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .no: return "no"
            case .unknown: return "unknown"
            case .yes: return "yes"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HasLogicalRedundancy(rawValue: rawValue) ?? HasLogicalRedundancy.sdkUnknown(rawValue)
        }
    }
}

extension DirectConnectClientTypes.Interconnect: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case hasLogicalRedundancy
        case interconnectId
        case interconnectName
        case interconnectState
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case providerName
        case region
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsDevice = awsDevice {
            try encodeContainer.encode(awsDevice, forKey: .awsDevice)
        }
        if let awsDeviceV2 = awsDeviceV2 {
            try encodeContainer.encode(awsDeviceV2, forKey: .awsDeviceV2)
        }
        if let awsLogicalDeviceId = awsLogicalDeviceId {
            try encodeContainer.encode(awsLogicalDeviceId, forKey: .awsLogicalDeviceId)
        }
        if let bandwidth = bandwidth {
            try encodeContainer.encode(bandwidth, forKey: .bandwidth)
        }
        if let hasLogicalRedundancy = hasLogicalRedundancy {
            try encodeContainer.encode(hasLogicalRedundancy.rawValue, forKey: .hasLogicalRedundancy)
        }
        if let interconnectId = interconnectId {
            try encodeContainer.encode(interconnectId, forKey: .interconnectId)
        }
        if let interconnectName = interconnectName {
            try encodeContainer.encode(interconnectName, forKey: .interconnectName)
        }
        if let interconnectState = interconnectState {
            try encodeContainer.encode(interconnectState.rawValue, forKey: .interconnectState)
        }
        if let jumboFrameCapable = jumboFrameCapable {
            try encodeContainer.encode(jumboFrameCapable, forKey: .jumboFrameCapable)
        }
        if let lagId = lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
        if let loaIssueTime = loaIssueTime {
            try encodeContainer.encode(loaIssueTime.timeIntervalSince1970, forKey: .loaIssueTime)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interconnectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectId)
        interconnectId = interconnectIdDecoded
        let interconnectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectName)
        interconnectName = interconnectNameDecoded
        let interconnectStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.InterconnectState.self, forKey: .interconnectState)
        interconnectState = interconnectStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
    }
}

extension DirectConnectClientTypes.Interconnect: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Interconnect(awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bandwidth: \(Swift.String(describing: bandwidth)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), interconnectId: \(Swift.String(describing: interconnectId)), interconnectName: \(Swift.String(describing: interconnectName)), interconnectState: \(Swift.String(describing: interconnectState)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), loaIssueTime: \(Swift.String(describing: loaIssueTime)), location: \(Swift.String(describing: location)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)))"}
}

extension DirectConnectClientTypes {
    /// Information about an interconnect.
    public struct Interconnect: Swift.Equatable {
        /// The Direct Connect endpoint on which the physical connection terminates.
        @available(*, deprecated)
        public let awsDevice: Swift.String?
        /// The Direct Connect endpoint that terminates the physical connection.
        public let awsDeviceV2: Swift.String?
        /// The Direct Connect endpoint that terminates the logical connection. This device might be
        ///       different than the device that terminates the physical connection.
        public let awsLogicalDeviceId: Swift.String?
        /// The bandwidth of the connection.
        public let bandwidth: Swift.String?
        /// Indicates whether the interconnect supports a secondary BGP in the same address family (IPv4/IPv6).
        public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
        /// The ID of the interconnect.
        public let interconnectId: Swift.String?
        /// The name of the interconnect.
        public let interconnectName: Swift.String?
        /// The state of the interconnect. The following are the possible values:
        ///
        ///
        ///
        ///                   requested: The initial state of an interconnect. The interconnect stays in the
        ///         requested state until the Letter of Authorization (LOA) is sent to the customer.
        ///
        ///
        ///
        ///                   pending: The interconnect is approved, and is being initialized.
        ///
        ///
        ///
        ///                   available: The network link is up, and the interconnect is ready for use.
        ///
        ///
        ///
        ///                   down: The network link is down.
        ///
        ///
        ///
        ///                   deleting: The interconnect is being deleted.
        ///
        ///
        ///
        ///                   deleted: The interconnect is deleted.
        ///
        ///
        ///
        ///                   unknown: The state of the interconnect is not available.
        ///
        ///
        public let interconnectState: DirectConnectClientTypes.InterconnectState?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Swift.Bool?
        /// The ID of the LAG.
        public let lagId: Swift.String?
        /// The time of the most recent call to DescribeLoa for this connection.
        public let loaIssueTime: ClientRuntime.Date?
        /// The location of the connection.
        public let location: Swift.String?
        /// The name of the service provider associated with the interconnect.
        public let providerName: Swift.String?
        /// The Region where the connection is located.
        public let region: Swift.String?
        /// The tags associated with the interconnect.
        public let tags: [DirectConnectClientTypes.Tag]?

        public init (
            awsDevice: Swift.String? = nil,
            awsDeviceV2: Swift.String? = nil,
            awsLogicalDeviceId: Swift.String? = nil,
            bandwidth: Swift.String? = nil,
            hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
            interconnectId: Swift.String? = nil,
            interconnectName: Swift.String? = nil,
            interconnectState: DirectConnectClientTypes.InterconnectState? = nil,
            jumboFrameCapable: Swift.Bool? = nil,
            lagId: Swift.String? = nil,
            loaIssueTime: ClientRuntime.Date? = nil,
            location: Swift.String? = nil,
            providerName: Swift.String? = nil,
            region: Swift.String? = nil,
            tags: [DirectConnectClientTypes.Tag]? = nil
        )
        {
            self.awsDevice = awsDevice
            self.awsDeviceV2 = awsDeviceV2
            self.awsLogicalDeviceId = awsLogicalDeviceId
            self.bandwidth = bandwidth
            self.hasLogicalRedundancy = hasLogicalRedundancy
            self.interconnectId = interconnectId
            self.interconnectName = interconnectName
            self.interconnectState = interconnectState
            self.jumboFrameCapable = jumboFrameCapable
            self.lagId = lagId
            self.loaIssueTime = loaIssueTime
            self.location = location
            self.providerName = providerName
            self.region = region
            self.tags = tags
        }
    }

}

extension DirectConnectClientTypes {
    public enum InterconnectState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case deleted
        case deleting
        case down
        case pending
        case requested
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [InterconnectState] {
            return [
                .available,
                .deleted,
                .deleting,
                .down,
                .pending,
                .requested,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .deleted: return "deleted"
            case .deleting: return "deleting"
            case .down: return "down"
            case .pending: return "pending"
            case .requested: return "requested"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InterconnectState(rawValue: rawValue) ?? InterconnectState.sdkUnknown(rawValue)
        }
    }
}

extension DirectConnectClientTypes.Lag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowsHostedConnections
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case connections
        case connectionsBandwidth
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case lagName
        case lagState
        case location
        case macSecCapable
        case macSecKeys
        case minimumLinks
        case numberOfConnections
        case ownerAccount
        case providerName
        case region
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allowsHostedConnections != false {
            try encodeContainer.encode(allowsHostedConnections, forKey: .allowsHostedConnections)
        }
        if let awsDevice = awsDevice {
            try encodeContainer.encode(awsDevice, forKey: .awsDevice)
        }
        if let awsDeviceV2 = awsDeviceV2 {
            try encodeContainer.encode(awsDeviceV2, forKey: .awsDeviceV2)
        }
        if let awsLogicalDeviceId = awsLogicalDeviceId {
            try encodeContainer.encode(awsLogicalDeviceId, forKey: .awsLogicalDeviceId)
        }
        if let connections = connections {
            var connectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .connections)
            for connectionlist0 in connections {
                try connectionsContainer.encode(connectionlist0)
            }
        }
        if let connectionsBandwidth = connectionsBandwidth {
            try encodeContainer.encode(connectionsBandwidth, forKey: .connectionsBandwidth)
        }
        if let encryptionMode = encryptionMode {
            try encodeContainer.encode(encryptionMode, forKey: .encryptionMode)
        }
        if let hasLogicalRedundancy = hasLogicalRedundancy {
            try encodeContainer.encode(hasLogicalRedundancy.rawValue, forKey: .hasLogicalRedundancy)
        }
        if let jumboFrameCapable = jumboFrameCapable {
            try encodeContainer.encode(jumboFrameCapable, forKey: .jumboFrameCapable)
        }
        if let lagId = lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
        if let lagName = lagName {
            try encodeContainer.encode(lagName, forKey: .lagName)
        }
        if let lagState = lagState {
            try encodeContainer.encode(lagState.rawValue, forKey: .lagState)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let macSecCapable = macSecCapable {
            try encodeContainer.encode(macSecCapable, forKey: .macSecCapable)
        }
        if let macSecKeys = macSecKeys {
            var macSecKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .macSecKeys)
            for macseckeylist0 in macSecKeys {
                try macSecKeysContainer.encode(macseckeylist0)
            }
        }
        if minimumLinks != 0 {
            try encodeContainer.encode(minimumLinks, forKey: .minimumLinks)
        }
        if numberOfConnections != 0 {
            try encodeContainer.encode(numberOfConnections, forKey: .numberOfConnections)
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionsBandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionsBandwidth)
        connectionsBandwidth = connectionsBandwidthDecoded
        let numberOfConnectionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfConnections)
        numberOfConnections = numberOfConnectionsDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let lagNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagName)
        lagName = lagNameDecoded
        let lagStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.LagState.self, forKey: .lagState)
        lagState = lagStateDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let minimumLinksDecoded = try containerValues.decode(Swift.Int.self, forKey: .minimumLinks)
        minimumLinks = minimumLinksDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let connectionsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Connection?].self, forKey: .connections)
        var connectionsDecoded0:[DirectConnectClientTypes.Connection]? = nil
        if let connectionsContainer = connectionsContainer {
            connectionsDecoded0 = [DirectConnectClientTypes.Connection]()
            for structure0 in connectionsContainer {
                if let structure0 = structure0 {
                    connectionsDecoded0?.append(structure0)
                }
            }
        }
        connections = connectionsDecoded0
        let allowsHostedConnectionsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowsHostedConnections)
        allowsHostedConnections = allowsHostedConnectionsDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

extension DirectConnectClientTypes.Lag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Lag(allowsHostedConnections: \(Swift.String(describing: allowsHostedConnections)), awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), connections: \(Swift.String(describing: connections)), connectionsBandwidth: \(Swift.String(describing: connectionsBandwidth)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), lagName: \(Swift.String(describing: lagName)), lagState: \(Swift.String(describing: lagState)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), minimumLinks: \(Swift.String(describing: minimumLinks)), numberOfConnections: \(Swift.String(describing: numberOfConnections)), ownerAccount: \(Swift.String(describing: ownerAccount)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)))"}
}

extension DirectConnectClientTypes {
    /// Information about a link aggregation group (LAG).
    public struct Lag: Swift.Equatable {
        /// Indicates whether the LAG can host other connections.
        public let allowsHostedConnections: Swift.Bool
        /// The Direct Connect endpoint that hosts the LAG.
        @available(*, deprecated)
        public let awsDevice: Swift.String?
        /// The Direct Connect endpoint that hosts the LAG.
        public let awsDeviceV2: Swift.String?
        /// The Direct Connect endpoint that terminates the logical connection. This device might be
        ///       different than the device that terminates the physical connection.
        public let awsLogicalDeviceId: Swift.String?
        /// The connections bundled by the LAG.
        public let connections: [DirectConnectClientTypes.Connection]?
        /// The individual bandwidth of the physical connections bundled by the LAG. The possible
        ///       values are 1Gbps and 10Gbps.
        public let connectionsBandwidth: Swift.String?
        /// The LAG MAC Security (MACsec) encryption mode.
        ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
        public let encryptionMode: Swift.String?
        /// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
        public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Swift.Bool?
        /// The ID of the LAG.
        public let lagId: Swift.String?
        /// The name of the LAG.
        public let lagName: Swift.String?
        /// The state of the LAG. The following are the possible values:
        ///
        ///
        ///
        ///                   requested: The initial state of a LAG. The LAG stays in the
        ///                 requested state until the Letter of Authorization (LOA) is available.
        ///
        ///
        ///
        ///                   pending: The LAG has been approved and is being initialized.
        ///
        ///
        ///
        ///                   available: The network link is established and the LAG is ready for use.
        ///
        ///
        ///
        ///                   down: The network link is down.
        ///
        ///
        ///
        ///                   deleting: The LAG is being deleted.
        ///
        ///
        ///
        ///                   deleted: The LAG is deleted.
        ///
        ///
        ///
        ///                   unknown: The state of the LAG is not available.
        ///
        ///
        public let lagState: DirectConnectClientTypes.LagState?
        /// The location of the LAG.
        public let location: Swift.String?
        /// Indicates whether the LAG supports MAC Security (MACsec).
        public let macSecCapable: Swift.Bool?
        /// The MAC Security (MACsec) security keys associated with the LAG.
        public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
        /// The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.
        public let minimumLinks: Swift.Int
        /// The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.
        public let numberOfConnections: Swift.Int
        /// The ID of the account that owns the LAG.
        public let ownerAccount: Swift.String?
        /// The name of the service provider associated with the LAG.
        public let providerName: Swift.String?
        /// The Region where the connection is located.
        public let region: Swift.String?
        /// The tags associated with the LAG.
        public let tags: [DirectConnectClientTypes.Tag]?

        public init (
            allowsHostedConnections: Swift.Bool = false,
            awsDevice: Swift.String? = nil,
            awsDeviceV2: Swift.String? = nil,
            awsLogicalDeviceId: Swift.String? = nil,
            connections: [DirectConnectClientTypes.Connection]? = nil,
            connectionsBandwidth: Swift.String? = nil,
            encryptionMode: Swift.String? = nil,
            hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
            jumboFrameCapable: Swift.Bool? = nil,
            lagId: Swift.String? = nil,
            lagName: Swift.String? = nil,
            lagState: DirectConnectClientTypes.LagState? = nil,
            location: Swift.String? = nil,
            macSecCapable: Swift.Bool? = nil,
            macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
            minimumLinks: Swift.Int = 0,
            numberOfConnections: Swift.Int = 0,
            ownerAccount: Swift.String? = nil,
            providerName: Swift.String? = nil,
            region: Swift.String? = nil,
            tags: [DirectConnectClientTypes.Tag]? = nil
        )
        {
            self.allowsHostedConnections = allowsHostedConnections
            self.awsDevice = awsDevice
            self.awsDeviceV2 = awsDeviceV2
            self.awsLogicalDeviceId = awsLogicalDeviceId
            self.connections = connections
            self.connectionsBandwidth = connectionsBandwidth
            self.encryptionMode = encryptionMode
            self.hasLogicalRedundancy = hasLogicalRedundancy
            self.jumboFrameCapable = jumboFrameCapable
            self.lagId = lagId
            self.lagName = lagName
            self.lagState = lagState
            self.location = location
            self.macSecCapable = macSecCapable
            self.macSecKeys = macSecKeys
            self.minimumLinks = minimumLinks
            self.numberOfConnections = numberOfConnections
            self.ownerAccount = ownerAccount
            self.providerName = providerName
            self.region = region
            self.tags = tags
        }
    }

}

extension DirectConnectClientTypes {
    public enum LagState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case deleted
        case deleting
        case down
        case pending
        case requested
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [LagState] {
            return [
                .available,
                .deleted,
                .deleting,
                .down,
                .pending,
                .requested,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .deleted: return "deleted"
            case .deleting: return "deleting"
            case .down: return "down"
            case .pending: return "pending"
            case .requested: return "requested"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LagState(rawValue: rawValue) ?? LagState.sdkUnknown(rawValue)
        }
    }
}

public struct ListVirtualInterfaceTestHistoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVirtualInterfaceTestHistoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVirtualInterfaceTestHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVirtualInterfaceTestHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVirtualInterfaceTestHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVirtualInterfaceTestHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVirtualInterfaceTestHistoryOutputError>
}

extension ListVirtualInterfaceTestHistoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualInterfaceTestHistoryInput(bgpPeers: \(Swift.String(describing: bgpPeers)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)), testId: \(Swift.String(describing: testId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension ListVirtualInterfaceTestHistoryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bgpPeers
        case maxResults
        case nextToken
        case status
        case testId
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bgpPeers = bgpPeers {
            var bgpPeersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bgpPeers)
            for bgppeeridlist0 in bgpPeers {
                try bgpPeersContainer.encode(bgppeeridlist0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let testId = testId {
            try encodeContainer.encode(testId, forKey: .testId)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct ListVirtualInterfaceTestHistoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVirtualInterfaceTestHistoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVirtualInterfaceTestHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVirtualInterfaceTestHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVirtualInterfaceTestHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVirtualInterfaceTestHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVirtualInterfaceTestHistoryOutputError>
}

public struct ListVirtualInterfaceTestHistoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVirtualInterfaceTestHistoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVirtualInterfaceTestHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVirtualInterfaceTestHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVirtualInterfaceTestHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVirtualInterfaceTestHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVirtualInterfaceTestHistoryOutputError>
}

public struct ListVirtualInterfaceTestHistoryInput: Swift.Equatable {
    /// The BGP peers that were placed in the DOWN state during the virtual interface failover test.
    public let bgpPeers: [Swift.String]?
    /// The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned nextToken value.
    /// 	        If MaxResults is given a value larger than 100, only 100 results are
    ///       returned.
    public let maxResults: Swift.Int?
    /// The token for the next page of results.
    public let nextToken: Swift.String?
    /// The status of the virtual interface failover test.
    public let status: Swift.String?
    /// The ID of the virtual interface failover test.
    public let testId: Swift.String?
    /// The ID of the virtual interface that was tested.
    public let virtualInterfaceId: Swift.String?

    public init (
        bgpPeers: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: Swift.String? = nil,
        testId: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.bgpPeers = bgpPeers
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
        self.testId = testId
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct ListVirtualInterfaceTestHistoryInputBody: Swift.Equatable {
    public let testId: Swift.String?
    public let virtualInterfaceId: Swift.String?
    public let bgpPeers: [Swift.String]?
    public let status: Swift.String?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension ListVirtualInterfaceTestHistoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bgpPeers
        case maxResults
        case nextToken
        case status
        case testId
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let testIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testId)
        testId = testIdDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let bgpPeersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[Swift.String]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [Swift.String]()
            for string0 in bgpPeersContainer {
                if let string0 = string0 {
                    bgpPeersDecoded0?.append(string0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListVirtualInterfaceTestHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVirtualInterfaceTestHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVirtualInterfaceTestHistoryOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVirtualInterfaceTestHistoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualInterfaceTestHistoryOutputResponse(nextToken: \(Swift.String(describing: nextToken)), virtualInterfaceTestHistory: \(Swift.String(describing: virtualInterfaceTestHistory)))"}
}

extension ListVirtualInterfaceTestHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListVirtualInterfaceTestHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.virtualInterfaceTestHistory = output.virtualInterfaceTestHistory
        } else {
            self.nextToken = nil
            self.virtualInterfaceTestHistory = nil
        }
    }
}

public struct ListVirtualInterfaceTestHistoryOutputResponse: Swift.Equatable {
    /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
    public let nextToken: Swift.String?
    /// The ID of the tested virtual interface.
    public let virtualInterfaceTestHistory: [DirectConnectClientTypes.VirtualInterfaceTestHistory]?

    public init (
        nextToken: Swift.String? = nil,
        virtualInterfaceTestHistory: [DirectConnectClientTypes.VirtualInterfaceTestHistory]? = nil
    )
    {
        self.nextToken = nextToken
        self.virtualInterfaceTestHistory = virtualInterfaceTestHistory
    }
}

struct ListVirtualInterfaceTestHistoryOutputResponseBody: Swift.Equatable {
    public let virtualInterfaceTestHistory: [DirectConnectClientTypes.VirtualInterfaceTestHistory]?
    public let nextToken: Swift.String?
}

extension ListVirtualInterfaceTestHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case virtualInterfaceTestHistory
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceTestHistoryContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.VirtualInterfaceTestHistory?].self, forKey: .virtualInterfaceTestHistory)
        var virtualInterfaceTestHistoryDecoded0:[DirectConnectClientTypes.VirtualInterfaceTestHistory]? = nil
        if let virtualInterfaceTestHistoryContainer = virtualInterfaceTestHistoryContainer {
            virtualInterfaceTestHistoryDecoded0 = [DirectConnectClientTypes.VirtualInterfaceTestHistory]()
            for structure0 in virtualInterfaceTestHistoryContainer {
                if let structure0 = structure0 {
                    virtualInterfaceTestHistoryDecoded0?.append(structure0)
                }
            }
        }
        virtualInterfaceTestHistory = virtualInterfaceTestHistoryDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DirectConnectClientTypes.Loa: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loaContent
        case loaContentType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loaContent = loaContent {
            try encodeContainer.encode(loaContent.base64EncodedString(), forKey: .loaContent)
        }
        if let loaContentType = loaContentType {
            try encodeContainer.encode(loaContentType.rawValue, forKey: .loaContentType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loaContentDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .loaContent)
        loaContent = loaContentDecoded
        let loaContentTypeDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.LoaContentType.self, forKey: .loaContentType)
        loaContentType = loaContentTypeDecoded
    }
}

extension DirectConnectClientTypes.Loa: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Loa(loaContent: \(Swift.String(describing: loaContent)), loaContentType: \(Swift.String(describing: loaContentType)))"}
}

extension DirectConnectClientTypes {
    /// Information about a Letter of Authorization - Connecting Facility Assignment (LOA-CFA) for a connection.
    public struct Loa: Swift.Equatable {
        /// The binary contents of the LOA-CFA document.
        public let loaContent: ClientRuntime.Data?
        /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
        public let loaContentType: DirectConnectClientTypes.LoaContentType?

        public init (
            loaContent: ClientRuntime.Data? = nil,
            loaContentType: DirectConnectClientTypes.LoaContentType? = nil
        )
        {
            self.loaContent = loaContent
            self.loaContentType = loaContentType
        }
    }

}

extension DirectConnectClientTypes {
    public enum LoaContentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pdf
        case sdkUnknown(Swift.String)

        public static var allCases: [LoaContentType] {
            return [
                .pdf,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pdf: return "application/pdf"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoaContentType(rawValue: rawValue) ?? LoaContentType.sdkUnknown(rawValue)
        }
    }
}

extension DirectConnectClientTypes.Location: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availableMacSecPortSpeeds
        case availablePortSpeeds
        case availableProviders
        case locationCode
        case locationName
        case region
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availableMacSecPortSpeeds = availableMacSecPortSpeeds {
            var availableMacSecPortSpeedsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availableMacSecPortSpeeds)
            for availablemacsecportspeeds0 in availableMacSecPortSpeeds {
                try availableMacSecPortSpeedsContainer.encode(availablemacsecportspeeds0)
            }
        }
        if let availablePortSpeeds = availablePortSpeeds {
            var availablePortSpeedsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availablePortSpeeds)
            for availableportspeeds0 in availablePortSpeeds {
                try availablePortSpeedsContainer.encode(availableportspeeds0)
            }
        }
        if let availableProviders = availableProviders {
            var availableProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availableProviders)
            for providerlist0 in availableProviders {
                try availableProvidersContainer.encode(providerlist0)
            }
        }
        if let locationCode = locationCode {
            try encodeContainer.encode(locationCode, forKey: .locationCode)
        }
        if let locationName = locationName {
            try encodeContainer.encode(locationName, forKey: .locationName)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationCode)
        locationCode = locationCodeDecoded
        let locationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationName)
        locationName = locationNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let availablePortSpeedsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availablePortSpeeds)
        var availablePortSpeedsDecoded0:[Swift.String]? = nil
        if let availablePortSpeedsContainer = availablePortSpeedsContainer {
            availablePortSpeedsDecoded0 = [Swift.String]()
            for string0 in availablePortSpeedsContainer {
                if let string0 = string0 {
                    availablePortSpeedsDecoded0?.append(string0)
                }
            }
        }
        availablePortSpeeds = availablePortSpeedsDecoded0
        let availableProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availableProviders)
        var availableProvidersDecoded0:[Swift.String]? = nil
        if let availableProvidersContainer = availableProvidersContainer {
            availableProvidersDecoded0 = [Swift.String]()
            for string0 in availableProvidersContainer {
                if let string0 = string0 {
                    availableProvidersDecoded0?.append(string0)
                }
            }
        }
        availableProviders = availableProvidersDecoded0
        let availableMacSecPortSpeedsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availableMacSecPortSpeeds)
        var availableMacSecPortSpeedsDecoded0:[Swift.String]? = nil
        if let availableMacSecPortSpeedsContainer = availableMacSecPortSpeedsContainer {
            availableMacSecPortSpeedsDecoded0 = [Swift.String]()
            for string0 in availableMacSecPortSpeedsContainer {
                if let string0 = string0 {
                    availableMacSecPortSpeedsDecoded0?.append(string0)
                }
            }
        }
        availableMacSecPortSpeeds = availableMacSecPortSpeedsDecoded0
    }
}

extension DirectConnectClientTypes.Location: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Location(availableMacSecPortSpeeds: \(Swift.String(describing: availableMacSecPortSpeeds)), availablePortSpeeds: \(Swift.String(describing: availablePortSpeeds)), availableProviders: \(Swift.String(describing: availableProviders)), locationCode: \(Swift.String(describing: locationCode)), locationName: \(Swift.String(describing: locationName)), region: \(Swift.String(describing: region)))"}
}

extension DirectConnectClientTypes {
    /// Information about an Direct Connect location.
    public struct Location: Swift.Equatable {
        /// The available MAC Security (MACsec) port speeds for the location.
        public let availableMacSecPortSpeeds: [Swift.String]?
        /// The available port speeds for the location.
        public let availablePortSpeeds: [Swift.String]?
        /// The name of the service provider for the location.
        public let availableProviders: [Swift.String]?
        /// The code for the location.
        public let locationCode: Swift.String?
        /// The name of the location. This includes the name of the colocation partner and the physical site of the building.
        public let locationName: Swift.String?
        /// The Region for the location.
        public let region: Swift.String?

        public init (
            availableMacSecPortSpeeds: [Swift.String]? = nil,
            availablePortSpeeds: [Swift.String]? = nil,
            availableProviders: [Swift.String]? = nil,
            locationCode: Swift.String? = nil,
            locationName: Swift.String? = nil,
            region: Swift.String? = nil
        )
        {
            self.availableMacSecPortSpeeds = availableMacSecPortSpeeds
            self.availablePortSpeeds = availablePortSpeeds
            self.availableProviders = availableProviders
            self.locationCode = locationCode
            self.locationName = locationName
            self.region = region
        }
    }

}

extension DirectConnectClientTypes.MacSecKey: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ckn
        case secretARN
        case startOn
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ckn = ckn {
            try encodeContainer.encode(ckn, forKey: .ckn)
        }
        if let secretARN = secretARN {
            try encodeContainer.encode(secretARN, forKey: .secretARN)
        }
        if let startOn = startOn {
            try encodeContainer.encode(startOn, forKey: .startOn)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretARN)
        secretARN = secretARNDecoded
        let cknDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ckn)
        ckn = cknDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let startOnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startOn)
        startOn = startOnDecoded
    }
}

extension DirectConnectClientTypes.MacSecKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MacSecKey(ckn: \(Swift.String(describing: ckn)), secretARN: \(Swift.String(describing: secretARN)), startOn: \(Swift.String(describing: startOn)), state: \(Swift.String(describing: state)))"}
}

extension DirectConnectClientTypes {
    /// Information about the MAC Security (MACsec) secret key.
    public struct MacSecKey: Swift.Equatable {
        /// The Connection Key Name (CKN) for the MAC Security secret key.
        public let ckn: Swift.String?
        /// The Amazon Resource Name (ARN) of the MAC Security (MACsec) secret key.
        public let secretARN: Swift.String?
        /// The date that the MAC Security (MACsec) secret key takes effect. The value is displayed in UTC format.
        public let startOn: Swift.String?
        /// The state of the MAC Security (MACsec) secret key.
        ///          The possible values are:
        ///
        ///
        ///
        ///                   associating: The MAC Security (MACsec) secret key is being validated and not yet associated with the connection or LAG.
        ///
        ///
        ///
        ///                   associated: The MAC Security (MACsec) secret key is validated and associated with the connection or LAG.
        ///
        ///
        ///
        ///                   disassociating: The MAC Security (MACsec) secret key is being disassociated from the connection or LAG
        ///
        ///
        ///
        ///                   disassociated: The MAC Security (MACsec) secret key is no longer associated with the connection or LAG.
        ///
        ///
        public let state: Swift.String?

        public init (
            ckn: Swift.String? = nil,
            secretARN: Swift.String? = nil,
            startOn: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.ckn = ckn
            self.secretARN = secretARN
            self.startOn = startOn
            self.state = state
        }
    }

}

extension DirectConnectClientTypes.NewBGPPeer: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case asn
        case authKey
        case customerAddress
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressFamily = addressFamily {
            try encodeContainer.encode(addressFamily.rawValue, forKey: .addressFamily)
        }
        if let amazonAddress = amazonAddress {
            try encodeContainer.encode(amazonAddress, forKey: .amazonAddress)
        }
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let authKey = authKey {
            try encodeContainer.encode(authKey, forKey: .authKey)
        }
        if let customerAddress = customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
    }
}

extension DirectConnectClientTypes.NewBGPPeer: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NewBGPPeer(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), customerAddress: \(Swift.String(describing: customerAddress)))"}
}

extension DirectConnectClientTypes {
    /// Information about a new BGP peer.
    public struct NewBGPPeer: Swift.Equatable {
        /// The address family for the BGP peer.
        public let addressFamily: DirectConnectClientTypes.AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: Swift.String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Swift.Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: Swift.String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: Swift.String?

        public init (
            addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
            amazonAddress: Swift.String? = nil,
            asn: Swift.Int = 0,
            authKey: Swift.String? = nil,
            customerAddress: Swift.String? = nil
        )
        {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
        }
    }

}

extension DirectConnectClientTypes.NewPrivateVirtualInterface: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case asn
        case authKey
        case customerAddress
        case directConnectGatewayId
        case mtu
        case tags
        case virtualGatewayId
        case virtualInterfaceName
        case vlan
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressFamily = addressFamily {
            try encodeContainer.encode(addressFamily.rawValue, forKey: .addressFamily)
        }
        if let amazonAddress = amazonAddress {
            try encodeContainer.encode(amazonAddress, forKey: .amazonAddress)
        }
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let authKey = authKey {
            try encodeContainer.encode(authKey, forKey: .authKey)
        }
        if let customerAddress = customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let mtu = mtu {
            try encodeContainer.encode(mtu, forKey: .mtu)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualGatewayId = virtualGatewayId {
            try encodeContainer.encode(virtualGatewayId, forKey: .virtualGatewayId)
        }
        if let virtualInterfaceName = virtualInterfaceName {
            try encodeContainer.encode(virtualInterfaceName, forKey: .virtualInterfaceName)
        }
        if vlan != 0 {
            try encodeContainer.encode(vlan, forKey: .vlan)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DirectConnectClientTypes.NewPrivateVirtualInterface: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NewPrivateVirtualInterface(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), customerAddress: \(Swift.String(describing: customerAddress)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), mtu: \(Swift.String(describing: mtu)), tags: \(Swift.String(describing: tags)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), vlan: \(Swift.String(describing: vlan)))"}
}

extension DirectConnectClientTypes {
    /// Information about a private virtual interface.
    public struct NewPrivateVirtualInterface: Swift.Equatable {
        /// The address family for the BGP peer.
        public let addressFamily: DirectConnectClientTypes.AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: Swift.String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        ///          The valid values are 1-2147483647.
        /// This member is required.
        public let asn: Swift.Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: Swift.String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: Swift.String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: Swift.String?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Swift.Int?
        /// The tags associated with the private virtual interface.
        public let tags: [DirectConnectClientTypes.Tag]?
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: Swift.String?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        /// This member is required.
        public let virtualInterfaceName: Swift.String?
        /// The ID of the VLAN.
        /// This member is required.
        public let vlan: Swift.Int

        public init (
            addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
            amazonAddress: Swift.String? = nil,
            asn: Swift.Int = 0,
            authKey: Swift.String? = nil,
            customerAddress: Swift.String? = nil,
            directConnectGatewayId: Swift.String? = nil,
            mtu: Swift.Int? = nil,
            tags: [DirectConnectClientTypes.Tag]? = nil,
            virtualGatewayId: Swift.String? = nil,
            virtualInterfaceName: Swift.String? = nil,
            vlan: Swift.Int = 0
        )
        {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.directConnectGatewayId = directConnectGatewayId
            self.mtu = mtu
            self.tags = tags
            self.virtualGatewayId = virtualGatewayId
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }
    }

}

extension DirectConnectClientTypes.NewPrivateVirtualInterfaceAllocation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case asn
        case authKey
        case customerAddress
        case mtu
        case tags
        case virtualInterfaceName
        case vlan
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressFamily = addressFamily {
            try encodeContainer.encode(addressFamily.rawValue, forKey: .addressFamily)
        }
        if let amazonAddress = amazonAddress {
            try encodeContainer.encode(amazonAddress, forKey: .amazonAddress)
        }
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let authKey = authKey {
            try encodeContainer.encode(authKey, forKey: .authKey)
        }
        if let customerAddress = customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
        if let mtu = mtu {
            try encodeContainer.encode(mtu, forKey: .mtu)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualInterfaceName = virtualInterfaceName {
            try encodeContainer.encode(virtualInterfaceName, forKey: .virtualInterfaceName)
        }
        if vlan != 0 {
            try encodeContainer.encode(vlan, forKey: .vlan)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DirectConnectClientTypes.NewPrivateVirtualInterfaceAllocation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NewPrivateVirtualInterfaceAllocation(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), customerAddress: \(Swift.String(describing: customerAddress)), mtu: \(Swift.String(describing: mtu)), tags: \(Swift.String(describing: tags)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), vlan: \(Swift.String(describing: vlan)))"}
}

extension DirectConnectClientTypes {
    /// Information about a private virtual interface to be provisioned on a connection.
    public struct NewPrivateVirtualInterfaceAllocation: Swift.Equatable {
        /// The address family for the BGP peer.
        public let addressFamily: DirectConnectClientTypes.AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: Swift.String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        ///          The valid values are 1-2147483647.
        /// This member is required.
        public let asn: Swift.Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: Swift.String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: Swift.String?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Swift.Int?
        /// The tags associated with the private virtual interface.
        public let tags: [DirectConnectClientTypes.Tag]?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        /// This member is required.
        public let virtualInterfaceName: Swift.String?
        /// The ID of the VLAN.
        /// This member is required.
        public let vlan: Swift.Int

        public init (
            addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
            amazonAddress: Swift.String? = nil,
            asn: Swift.Int = 0,
            authKey: Swift.String? = nil,
            customerAddress: Swift.String? = nil,
            mtu: Swift.Int? = nil,
            tags: [DirectConnectClientTypes.Tag]? = nil,
            virtualInterfaceName: Swift.String? = nil,
            vlan: Swift.Int = 0
        )
        {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.mtu = mtu
            self.tags = tags
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }
    }

}

extension DirectConnectClientTypes.NewPublicVirtualInterface: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case asn
        case authKey
        case customerAddress
        case routeFilterPrefixes
        case tags
        case virtualInterfaceName
        case vlan
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressFamily = addressFamily {
            try encodeContainer.encode(addressFamily.rawValue, forKey: .addressFamily)
        }
        if let amazonAddress = amazonAddress {
            try encodeContainer.encode(amazonAddress, forKey: .amazonAddress)
        }
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let authKey = authKey {
            try encodeContainer.encode(authKey, forKey: .authKey)
        }
        if let customerAddress = customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
        if let routeFilterPrefixes = routeFilterPrefixes {
            var routeFilterPrefixesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .routeFilterPrefixes)
            for routefilterprefixlist0 in routeFilterPrefixes {
                try routeFilterPrefixesContainer.encode(routefilterprefixlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualInterfaceName = virtualInterfaceName {
            try encodeContainer.encode(virtualInterfaceName, forKey: .virtualInterfaceName)
        }
        if vlan != 0 {
            try encodeContainer.encode(vlan, forKey: .vlan)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let routeFilterPrefixesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .routeFilterPrefixes)
        var routeFilterPrefixesDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let routeFilterPrefixesContainer = routeFilterPrefixesContainer {
            routeFilterPrefixesDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in routeFilterPrefixesContainer {
                if let structure0 = structure0 {
                    routeFilterPrefixesDecoded0?.append(structure0)
                }
            }
        }
        routeFilterPrefixes = routeFilterPrefixesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DirectConnectClientTypes.NewPublicVirtualInterface: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NewPublicVirtualInterface(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), customerAddress: \(Swift.String(describing: customerAddress)), routeFilterPrefixes: \(Swift.String(describing: routeFilterPrefixes)), tags: \(Swift.String(describing: tags)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), vlan: \(Swift.String(describing: vlan)))"}
}

extension DirectConnectClientTypes {
    /// Information about a public virtual interface.
    public struct NewPublicVirtualInterface: Swift.Equatable {
        /// The address family for the BGP peer.
        public let addressFamily: DirectConnectClientTypes.AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: Swift.String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        ///          The valid values are 1-2147483647.
        /// This member is required.
        public let asn: Swift.Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: Swift.String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: Swift.String?
        /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
        public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
        /// The tags associated with the public virtual interface.
        public let tags: [DirectConnectClientTypes.Tag]?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        /// This member is required.
        public let virtualInterfaceName: Swift.String?
        /// The ID of the VLAN.
        /// This member is required.
        public let vlan: Swift.Int

        public init (
            addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
            amazonAddress: Swift.String? = nil,
            asn: Swift.Int = 0,
            authKey: Swift.String? = nil,
            customerAddress: Swift.String? = nil,
            routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
            tags: [DirectConnectClientTypes.Tag]? = nil,
            virtualInterfaceName: Swift.String? = nil,
            vlan: Swift.Int = 0
        )
        {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.routeFilterPrefixes = routeFilterPrefixes
            self.tags = tags
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }
    }

}

extension DirectConnectClientTypes.NewPublicVirtualInterfaceAllocation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case asn
        case authKey
        case customerAddress
        case routeFilterPrefixes
        case tags
        case virtualInterfaceName
        case vlan
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressFamily = addressFamily {
            try encodeContainer.encode(addressFamily.rawValue, forKey: .addressFamily)
        }
        if let amazonAddress = amazonAddress {
            try encodeContainer.encode(amazonAddress, forKey: .amazonAddress)
        }
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let authKey = authKey {
            try encodeContainer.encode(authKey, forKey: .authKey)
        }
        if let customerAddress = customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
        if let routeFilterPrefixes = routeFilterPrefixes {
            var routeFilterPrefixesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .routeFilterPrefixes)
            for routefilterprefixlist0 in routeFilterPrefixes {
                try routeFilterPrefixesContainer.encode(routefilterprefixlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualInterfaceName = virtualInterfaceName {
            try encodeContainer.encode(virtualInterfaceName, forKey: .virtualInterfaceName)
        }
        if vlan != 0 {
            try encodeContainer.encode(vlan, forKey: .vlan)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let routeFilterPrefixesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .routeFilterPrefixes)
        var routeFilterPrefixesDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let routeFilterPrefixesContainer = routeFilterPrefixesContainer {
            routeFilterPrefixesDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in routeFilterPrefixesContainer {
                if let structure0 = structure0 {
                    routeFilterPrefixesDecoded0?.append(structure0)
                }
            }
        }
        routeFilterPrefixes = routeFilterPrefixesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DirectConnectClientTypes.NewPublicVirtualInterfaceAllocation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NewPublicVirtualInterfaceAllocation(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), customerAddress: \(Swift.String(describing: customerAddress)), routeFilterPrefixes: \(Swift.String(describing: routeFilterPrefixes)), tags: \(Swift.String(describing: tags)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), vlan: \(Swift.String(describing: vlan)))"}
}

extension DirectConnectClientTypes {
    /// Information about a public virtual interface to be provisioned on a connection.
    public struct NewPublicVirtualInterfaceAllocation: Swift.Equatable {
        /// The address family for the BGP peer.
        public let addressFamily: DirectConnectClientTypes.AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: Swift.String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        ///          The valid values are 1-2147483647.
        /// This member is required.
        public let asn: Swift.Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: Swift.String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: Swift.String?
        /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
        public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
        /// The tags associated with the public virtual interface.
        public let tags: [DirectConnectClientTypes.Tag]?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        /// This member is required.
        public let virtualInterfaceName: Swift.String?
        /// The ID of the VLAN.
        /// This member is required.
        public let vlan: Swift.Int

        public init (
            addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
            amazonAddress: Swift.String? = nil,
            asn: Swift.Int = 0,
            authKey: Swift.String? = nil,
            customerAddress: Swift.String? = nil,
            routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
            tags: [DirectConnectClientTypes.Tag]? = nil,
            virtualInterfaceName: Swift.String? = nil,
            vlan: Swift.Int = 0
        )
        {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.routeFilterPrefixes = routeFilterPrefixes
            self.tags = tags
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }
    }

}

extension DirectConnectClientTypes.NewTransitVirtualInterface: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case asn
        case authKey
        case customerAddress
        case directConnectGatewayId
        case mtu
        case tags
        case virtualInterfaceName
        case vlan
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressFamily = addressFamily {
            try encodeContainer.encode(addressFamily.rawValue, forKey: .addressFamily)
        }
        if let amazonAddress = amazonAddress {
            try encodeContainer.encode(amazonAddress, forKey: .amazonAddress)
        }
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let authKey = authKey {
            try encodeContainer.encode(authKey, forKey: .authKey)
        }
        if let customerAddress = customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let mtu = mtu {
            try encodeContainer.encode(mtu, forKey: .mtu)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualInterfaceName = virtualInterfaceName {
            try encodeContainer.encode(virtualInterfaceName, forKey: .virtualInterfaceName)
        }
        if vlan != 0 {
            try encodeContainer.encode(vlan, forKey: .vlan)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DirectConnectClientTypes.NewTransitVirtualInterface: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NewTransitVirtualInterface(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), customerAddress: \(Swift.String(describing: customerAddress)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), mtu: \(Swift.String(describing: mtu)), tags: \(Swift.String(describing: tags)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), vlan: \(Swift.String(describing: vlan)))"}
}

extension DirectConnectClientTypes {
    /// Information about a transit virtual interface.
    public struct NewTransitVirtualInterface: Swift.Equatable {
        /// The address family for the BGP peer.
        public let addressFamily: DirectConnectClientTypes.AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: Swift.String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        ///          The valid values are 1-2147483647.
        public let asn: Swift.Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: Swift.String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: Swift.String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: Swift.String?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Swift.Int?
        /// The tags associated with the transitive virtual interface.
        public let tags: [DirectConnectClientTypes.Tag]?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        public let virtualInterfaceName: Swift.String?
        /// The ID of the VLAN.
        public let vlan: Swift.Int

        public init (
            addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
            amazonAddress: Swift.String? = nil,
            asn: Swift.Int = 0,
            authKey: Swift.String? = nil,
            customerAddress: Swift.String? = nil,
            directConnectGatewayId: Swift.String? = nil,
            mtu: Swift.Int? = nil,
            tags: [DirectConnectClientTypes.Tag]? = nil,
            virtualInterfaceName: Swift.String? = nil,
            vlan: Swift.Int = 0
        )
        {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.directConnectGatewayId = directConnectGatewayId
            self.mtu = mtu
            self.tags = tags
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }
    }

}

extension DirectConnectClientTypes.NewTransitVirtualInterfaceAllocation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case asn
        case authKey
        case customerAddress
        case mtu
        case tags
        case virtualInterfaceName
        case vlan
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressFamily = addressFamily {
            try encodeContainer.encode(addressFamily.rawValue, forKey: .addressFamily)
        }
        if let amazonAddress = amazonAddress {
            try encodeContainer.encode(amazonAddress, forKey: .amazonAddress)
        }
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let authKey = authKey {
            try encodeContainer.encode(authKey, forKey: .authKey)
        }
        if let customerAddress = customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
        if let mtu = mtu {
            try encodeContainer.encode(mtu, forKey: .mtu)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualInterfaceName = virtualInterfaceName {
            try encodeContainer.encode(virtualInterfaceName, forKey: .virtualInterfaceName)
        }
        if vlan != 0 {
            try encodeContainer.encode(vlan, forKey: .vlan)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DirectConnectClientTypes.NewTransitVirtualInterfaceAllocation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NewTransitVirtualInterfaceAllocation(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), customerAddress: \(Swift.String(describing: customerAddress)), mtu: \(Swift.String(describing: mtu)), tags: \(Swift.String(describing: tags)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), vlan: \(Swift.String(describing: vlan)))"}
}

extension DirectConnectClientTypes {
    /// Information about a transit virtual interface to be provisioned on a connection.
    public struct NewTransitVirtualInterfaceAllocation: Swift.Equatable {
        /// The address family for the BGP peer.
        public let addressFamily: DirectConnectClientTypes.AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: Swift.String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        ///          The valid values are 1-2147483647.
        public let asn: Swift.Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: Swift.String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: Swift.String?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Swift.Int?
        /// The tags associated with the transitive virtual interface.
        public let tags: [DirectConnectClientTypes.Tag]?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        public let virtualInterfaceName: Swift.String?
        /// The ID of the VLAN.
        public let vlan: Swift.Int

        public init (
            addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
            amazonAddress: Swift.String? = nil,
            asn: Swift.Int = 0,
            authKey: Swift.String? = nil,
            customerAddress: Swift.String? = nil,
            mtu: Swift.Int? = nil,
            tags: [DirectConnectClientTypes.Tag]? = nil,
            virtualInterfaceName: Swift.String? = nil,
            vlan: Swift.Int = 0
        )
        {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.mtu = mtu
            self.tags = tags
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }
    }

}

extension DirectConnectClientTypes.ResourceTag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DirectConnectClientTypes.ResourceTag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceTag(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension DirectConnectClientTypes {
    /// Information about a tag associated with an Direct Connect resource.
    public struct ResourceTag: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: Swift.String?
        /// The tags.
        public let tags: [DirectConnectClientTypes.Tag]?

        public init (
            resourceArn: Swift.String? = nil,
            tags: [DirectConnectClientTypes.Tag]? = nil
        )
        {
            self.resourceArn = resourceArn
            self.tags = tags
        }
    }

}

extension DirectConnectClientTypes.RouteFilterPrefix: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidr
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidr = cidr {
            try encodeContainer.encode(cidr, forKey: .cidr)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidr)
        cidr = cidrDecoded
    }
}

extension DirectConnectClientTypes.RouteFilterPrefix: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RouteFilterPrefix(cidr: \(Swift.String(describing: cidr)))"}
}

extension DirectConnectClientTypes {
    /// Information about a route filter prefix that a customer can advertise through Border Gateway Protocol (BGP)
    ///         over a public virtual interface.
    public struct RouteFilterPrefix: Swift.Equatable {
        /// The CIDR block for the advertised route. Separate multiple routes using commas. An IPv6 CIDR must use /64 or shorter.
        public let cidr: Swift.String?

        public init (
            cidr: Swift.String? = nil
        )
        {
            self.cidr = cidr
        }
    }

}

public struct StartBgpFailoverTestInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartBgpFailoverTestInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartBgpFailoverTestInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartBgpFailoverTestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartBgpFailoverTestInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartBgpFailoverTestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartBgpFailoverTestOutputError>
}

extension StartBgpFailoverTestInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartBgpFailoverTestInput(bgpPeers: \(Swift.String(describing: bgpPeers)), testDurationInMinutes: \(Swift.String(describing: testDurationInMinutes)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension StartBgpFailoverTestInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bgpPeers
        case testDurationInMinutes
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bgpPeers = bgpPeers {
            var bgpPeersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bgpPeers)
            for bgppeeridlist0 in bgpPeers {
                try bgpPeersContainer.encode(bgppeeridlist0)
            }
        }
        if let testDurationInMinutes = testDurationInMinutes {
            try encodeContainer.encode(testDurationInMinutes, forKey: .testDurationInMinutes)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct StartBgpFailoverTestInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartBgpFailoverTestInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartBgpFailoverTestInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartBgpFailoverTestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartBgpFailoverTestInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartBgpFailoverTestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartBgpFailoverTestOutputError>
}

public struct StartBgpFailoverTestInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartBgpFailoverTestInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartBgpFailoverTestInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartBgpFailoverTestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartBgpFailoverTestInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartBgpFailoverTestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartBgpFailoverTestOutputError>
}

public struct StartBgpFailoverTestInput: Swift.Equatable {
    /// The BGP peers to place in the DOWN state.
    public let bgpPeers: [Swift.String]?
    /// The time in minutes that the virtual interface failover test will last.
    ///          Maximum value: 180 minutes (3 hours).
    ///          Default: 180 minutes (3 hours).
    public let testDurationInMinutes: Swift.Int?
    /// The ID of the virtual interface you want to test.
    /// This member is required.
    public let virtualInterfaceId: Swift.String?

    public init (
        bgpPeers: [Swift.String]? = nil,
        testDurationInMinutes: Swift.Int? = nil,
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.bgpPeers = bgpPeers
        self.testDurationInMinutes = testDurationInMinutes
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct StartBgpFailoverTestInputBody: Swift.Equatable {
    public let virtualInterfaceId: Swift.String?
    public let bgpPeers: [Swift.String]?
    public let testDurationInMinutes: Swift.Int?
}

extension StartBgpFailoverTestInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bgpPeers
        case testDurationInMinutes
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let bgpPeersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[Swift.String]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [Swift.String]()
            for string0 in bgpPeersContainer {
                if let string0 = string0 {
                    bgpPeersDecoded0?.append(string0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let testDurationInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .testDurationInMinutes)
        testDurationInMinutes = testDurationInMinutesDecoded
    }
}

extension StartBgpFailoverTestOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartBgpFailoverTestOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartBgpFailoverTestOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartBgpFailoverTestOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartBgpFailoverTestOutputResponse(virtualInterfaceTest: \(Swift.String(describing: virtualInterfaceTest)))"}
}

extension StartBgpFailoverTestOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartBgpFailoverTestOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualInterfaceTest = output.virtualInterfaceTest
        } else {
            self.virtualInterfaceTest = nil
        }
    }
}

public struct StartBgpFailoverTestOutputResponse: Swift.Equatable {
    /// Information about the virtual interface failover test.
    public let virtualInterfaceTest: DirectConnectClientTypes.VirtualInterfaceTestHistory?

    public init (
        virtualInterfaceTest: DirectConnectClientTypes.VirtualInterfaceTestHistory? = nil
    )
    {
        self.virtualInterfaceTest = virtualInterfaceTest
    }
}

struct StartBgpFailoverTestOutputResponseBody: Swift.Equatable {
    public let virtualInterfaceTest: DirectConnectClientTypes.VirtualInterfaceTestHistory?
}

extension StartBgpFailoverTestOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceTest
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceTestDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceTestHistory.self, forKey: .virtualInterfaceTest)
        virtualInterfaceTest = virtualInterfaceTestDecoded
    }
}

public struct StopBgpFailoverTestInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopBgpFailoverTestInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopBgpFailoverTestInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopBgpFailoverTestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopBgpFailoverTestInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopBgpFailoverTestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopBgpFailoverTestOutputError>
}

extension StopBgpFailoverTestInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopBgpFailoverTestInput(virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension StopBgpFailoverTestInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct StopBgpFailoverTestInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopBgpFailoverTestInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopBgpFailoverTestInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopBgpFailoverTestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopBgpFailoverTestInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopBgpFailoverTestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopBgpFailoverTestOutputError>
}

public struct StopBgpFailoverTestInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopBgpFailoverTestInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopBgpFailoverTestInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopBgpFailoverTestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopBgpFailoverTestInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopBgpFailoverTestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopBgpFailoverTestOutputError>
}

public struct StopBgpFailoverTestInput: Swift.Equatable {
    /// The ID of the virtual interface you no longer want to test.
    /// This member is required.
    public let virtualInterfaceId: Swift.String?

    public init (
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct StopBgpFailoverTestInputBody: Swift.Equatable {
    public let virtualInterfaceId: Swift.String?
}

extension StopBgpFailoverTestInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
    }
}

extension StopBgpFailoverTestOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopBgpFailoverTestOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopBgpFailoverTestOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopBgpFailoverTestOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopBgpFailoverTestOutputResponse(virtualInterfaceTest: \(Swift.String(describing: virtualInterfaceTest)))"}
}

extension StopBgpFailoverTestOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StopBgpFailoverTestOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.virtualInterfaceTest = output.virtualInterfaceTest
        } else {
            self.virtualInterfaceTest = nil
        }
    }
}

public struct StopBgpFailoverTestOutputResponse: Swift.Equatable {
    /// Information about the virtual interface failover test.
    public let virtualInterfaceTest: DirectConnectClientTypes.VirtualInterfaceTestHistory?

    public init (
        virtualInterfaceTest: DirectConnectClientTypes.VirtualInterfaceTestHistory? = nil
    )
    {
        self.virtualInterfaceTest = virtualInterfaceTest
    }
}

struct StopBgpFailoverTestOutputResponseBody: Swift.Equatable {
    public let virtualInterfaceTest: DirectConnectClientTypes.VirtualInterfaceTestHistory?
}

extension StopBgpFailoverTestOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualInterfaceTest
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceTestDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceTestHistory.self, forKey: .virtualInterfaceTest)
        virtualInterfaceTest = virtualInterfaceTestDecoded
    }
}

extension DirectConnectClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension DirectConnectClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension DirectConnectClientTypes {
    /// Information about a tag.
    public struct Tag: Swift.Equatable {
        /// The key.
        /// This member is required.
        public let key: Swift.String?
        /// The value.
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public let resourceArn: Swift.String?
    /// The tags to add.
    /// This member is required.
    public let tags: [DirectConnectClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let tags: [DirectConnectClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateTagKeysException" : self = .duplicateTagKeysException(try DuplicateTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case duplicateTagKeysException(DuplicateTagKeysException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension TooManyTagsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyTagsException(message: \(Swift.String(describing: message)))"}
}

extension TooManyTagsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TooManyTagsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have reached the limit on the number of tags that can be assigned.
public struct TooManyTagsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTagsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyTagsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UntagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public let resourceArn: Swift.String?
    /// The tag keys of the tags to remove.
    /// This member is required.
    public let tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateConnectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConnectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConnectionOutputError>
}

extension UpdateConnectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConnectionInput(connectionId: \(Swift.String(describing: connectionId)), connectionName: \(Swift.String(describing: connectionName)), encryptionMode: \(Swift.String(describing: encryptionMode)))"}
}

extension UpdateConnectionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case connectionName
        case encryptionMode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let encryptionMode = encryptionMode {
            try encodeContainer.encode(encryptionMode, forKey: .encryptionMode)
        }
    }
}

public struct UpdateConnectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConnectionOutputError>
}

public struct UpdateConnectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConnectionOutputError>
}

public struct UpdateConnectionInput: Swift.Equatable {
    /// The ID of the dedicated connection.
    ///          You can use DescribeConnections to retrieve the connection ID.
    /// This member is required.
    public let connectionId: Swift.String?
    /// The name of the connection.
    public let connectionName: Swift.String?
    /// The connection MAC Security (MACsec) encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?

    public init (
        connectionId: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        encryptionMode: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.encryptionMode = encryptionMode
    }
}

struct UpdateConnectionInputBody: Swift.Equatable {
    public let connectionId: Swift.String?
    public let connectionName: Swift.String?
    public let encryptionMode: Swift.String?
}

extension UpdateConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId
        case connectionName
        case encryptionMode
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
    }
}

extension UpdateConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateConnectionOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConnectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConnectionOutputResponse(awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bandwidth: \(Swift.String(describing: bandwidth)), connectionId: \(Swift.String(describing: connectionId)), connectionName: \(Swift.String(describing: connectionName)), connectionState: \(Swift.String(describing: connectionState)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), loaIssueTime: \(Swift.String(describing: loaIssueTime)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), ownerAccount: \(Swift.String(describing: ownerAccount)), partnerName: \(Swift.String(describing: partnerName)), portEncryptionStatus: \(Swift.String(describing: portEncryptionStatus)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)), vlan: \(Swift.String(describing: vlan)))"}
}

extension UpdateConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bandwidth = output.bandwidth
            self.connectionId = output.connectionId
            self.connectionName = output.connectionName
            self.connectionState = output.connectionState
            self.encryptionMode = output.encryptionMode
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.loaIssueTime = output.loaIssueTime
            self.location = output.location
            self.macSecCapable = output.macSecCapable
            self.macSecKeys = output.macSecKeys
            self.ownerAccount = output.ownerAccount
            self.partnerName = output.partnerName
            self.portEncryptionStatus = output.portEncryptionStatus
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
            self.vlan = output.vlan
        } else {
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bandwidth = nil
            self.connectionId = nil
            self.connectionName = nil
            self.connectionState = nil
            self.encryptionMode = nil
            self.hasLogicalRedundancy = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.loaIssueTime = nil
            self.location = nil
            self.macSecCapable = nil
            self.macSecKeys = nil
            self.ownerAccount = nil
            self.partnerName = nil
            self.portEncryptionStatus = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
            self.vlan = 0
        }
    }
}

/// Information about an Direct Connect connection.
public struct UpdateConnectionOutputResponse: Swift.Equatable {
    /// The Direct Connect endpoint on which the physical connection terminates.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The bandwidth of the connection.
    public let bandwidth: Swift.String?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The name of the connection.
    public let connectionName: Swift.String?
    /// The state of the connection. The following are the possible values:
    ///
    ///
    ///
    ///                   ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.
    ///
    ///
    ///
    ///                   requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    ///
    ///
    ///                   pending: The connection has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is up and the connection is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The connection is being deleted.
    ///
    ///
    ///
    ///                   deleted: The connection has been deleted.
    ///
    ///
    ///
    ///                   rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.
    ///
    ///
    ///
    ///                   unknown: The state of the connection is not available.
    ///
    ///
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    /// The MAC Security (MACsec) connection encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?
    /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The time of the most recent call to DescribeLoa for this connection.
    public let loaIssueTime: ClientRuntime.Date?
    /// The location of the connection.
    public let location: Swift.String?
    /// Indicates whether the connection supports MAC Security (MACsec).
    public let macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the connection.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The ID of the account that owns the connection.
    public let ownerAccount: Swift.String?
    /// The name of the Direct Connect service provider associated with the connection.
    public let partnerName: Swift.String?
    /// The MAC Security (MACsec) port link status of the connection.
    ///          The valid values are Encryption Up, which means that there is an active Connection Key Name, or Encryption Down.
    public let portEncryptionStatus: Swift.String?
    /// The name of the service provider associated with the connection.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the connection.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bandwidth: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        connectionState: DirectConnectClientTypes.ConnectionState? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        loaIssueTime: ClientRuntime.Date? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        ownerAccount: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        portEncryptionStatus: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bandwidth = bandwidth
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.connectionState = connectionState
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.ownerAccount = ownerAccount
        self.partnerName = partnerName
        self.portEncryptionStatus = portEncryptionStatus
        self.providerName = providerName
        self.region = region
        self.tags = tags
        self.vlan = vlan
    }
}

struct UpdateConnectionOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let connectionId: Swift.String?
    public let connectionName: Swift.String?
    public let connectionState: DirectConnectClientTypes.ConnectionState?
    public let region: Swift.String?
    public let location: Swift.String?
    public let bandwidth: Swift.String?
    public let vlan: Swift.Int
    public let partnerName: Swift.String?
    public let loaIssueTime: ClientRuntime.Date?
    public let lagId: Swift.String?
    public let awsDevice: Swift.String?
    public let jumboFrameCapable: Swift.Bool?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let macSecCapable: Swift.Bool?
    public let portEncryptionStatus: Swift.String?
    public let encryptionMode: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension UpdateConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case connectionId
        case connectionName
        case connectionState
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case macSecCapable
        case macSecKeys
        case ownerAccount
        case partnerName
        case portEncryptionStatus
        case providerName
        case region
        case tags
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let portEncryptionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portEncryptionStatus)
        portEncryptionStatus = portEncryptionStatusDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct UpdateDirectConnectGatewayAssociationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDirectConnectGatewayAssociationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDirectConnectGatewayAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDirectConnectGatewayAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDirectConnectGatewayAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDirectConnectGatewayAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDirectConnectGatewayAssociationOutputError>
}

extension UpdateDirectConnectGatewayAssociationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDirectConnectGatewayAssociationInput(addAllowedPrefixesToDirectConnectGateway: \(Swift.String(describing: addAllowedPrefixesToDirectConnectGateway)), associationId: \(Swift.String(describing: associationId)), removeAllowedPrefixesToDirectConnectGateway: \(Swift.String(describing: removeAllowedPrefixesToDirectConnectGateway)))"}
}

extension UpdateDirectConnectGatewayAssociationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addAllowedPrefixesToDirectConnectGateway
        case associationId
        case removeAllowedPrefixesToDirectConnectGateway
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGateway {
            var addAllowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addAllowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in addAllowedPrefixesToDirectConnectGateway {
                try addAllowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let removeAllowedPrefixesToDirectConnectGateway = removeAllowedPrefixesToDirectConnectGateway {
            var removeAllowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removeAllowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in removeAllowedPrefixesToDirectConnectGateway {
                try removeAllowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
    }
}

public struct UpdateDirectConnectGatewayAssociationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDirectConnectGatewayAssociationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDirectConnectGatewayAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDirectConnectGatewayAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDirectConnectGatewayAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDirectConnectGatewayAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDirectConnectGatewayAssociationOutputError>
}

public struct UpdateDirectConnectGatewayAssociationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDirectConnectGatewayAssociationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDirectConnectGatewayAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDirectConnectGatewayAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDirectConnectGatewayAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDirectConnectGatewayAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDirectConnectGatewayAssociationOutputError>
}

public struct UpdateDirectConnectGatewayAssociationInput: Swift.Equatable {
    /// The Amazon VPC prefixes to advertise to the Direct Connect gateway.
    public let addAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
    /// The ID of the Direct Connect gateway association.
    public let associationId: Swift.String?
    /// The Amazon VPC prefixes to no longer advertise to the Direct Connect gateway.
    public let removeAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?

    public init (
        addAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
        associationId: Swift.String? = nil,
        removeAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]? = nil
    )
    {
        self.addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGateway
        self.associationId = associationId
        self.removeAllowedPrefixesToDirectConnectGateway = removeAllowedPrefixesToDirectConnectGateway
    }
}

struct UpdateDirectConnectGatewayAssociationInputBody: Swift.Equatable {
    public let associationId: Swift.String?
    public let addAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
    public let removeAllowedPrefixesToDirectConnectGateway: [DirectConnectClientTypes.RouteFilterPrefix]?
}

extension UpdateDirectConnectGatewayAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addAllowedPrefixesToDirectConnectGateway
        case associationId
        case removeAllowedPrefixesToDirectConnectGateway
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let addAllowedPrefixesToDirectConnectGatewayContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .addAllowedPrefixesToDirectConnectGateway)
        var addAllowedPrefixesToDirectConnectGatewayDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let addAllowedPrefixesToDirectConnectGatewayContainer = addAllowedPrefixesToDirectConnectGatewayContainer {
            addAllowedPrefixesToDirectConnectGatewayDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in addAllowedPrefixesToDirectConnectGatewayContainer {
                if let structure0 = structure0 {
                    addAllowedPrefixesToDirectConnectGatewayDecoded0?.append(structure0)
                }
            }
        }
        addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGatewayDecoded0
        let removeAllowedPrefixesToDirectConnectGatewayContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .removeAllowedPrefixesToDirectConnectGateway)
        var removeAllowedPrefixesToDirectConnectGatewayDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let removeAllowedPrefixesToDirectConnectGatewayContainer = removeAllowedPrefixesToDirectConnectGatewayContainer {
            removeAllowedPrefixesToDirectConnectGatewayDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in removeAllowedPrefixesToDirectConnectGatewayContainer {
                if let structure0 = structure0 {
                    removeAllowedPrefixesToDirectConnectGatewayDecoded0?.append(structure0)
                }
            }
        }
        removeAllowedPrefixesToDirectConnectGateway = removeAllowedPrefixesToDirectConnectGatewayDecoded0
    }
}

extension UpdateDirectConnectGatewayAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDirectConnectGatewayAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDirectConnectGatewayAssociationOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDirectConnectGatewayAssociationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDirectConnectGatewayAssociationOutputResponse(directConnectGatewayAssociation: \(Swift.String(describing: directConnectGatewayAssociation)))"}
}

extension UpdateDirectConnectGatewayAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateDirectConnectGatewayAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directConnectGatewayAssociation = output.directConnectGatewayAssociation
        } else {
            self.directConnectGatewayAssociation = nil
        }
    }
}

public struct UpdateDirectConnectGatewayAssociationOutputResponse: Swift.Equatable {
    /// Information about an association between a Direct Connect gateway and a virtual private gateway or transit gateway.
    public let directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation?

    public init (
        directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation? = nil
    )
    {
        self.directConnectGatewayAssociation = directConnectGatewayAssociation
    }
}

struct UpdateDirectConnectGatewayAssociationOutputResponseBody: Swift.Equatable {
    public let directConnectGatewayAssociation: DirectConnectClientTypes.DirectConnectGatewayAssociation?
}

extension UpdateDirectConnectGatewayAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directConnectGatewayAssociation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayAssociationDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.DirectConnectGatewayAssociation.self, forKey: .directConnectGatewayAssociation)
        directConnectGatewayAssociation = directConnectGatewayAssociationDecoded
    }
}

public struct UpdateLagInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLagInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLagOutputError>
}

extension UpdateLagInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLagInput(encryptionMode: \(Swift.String(describing: encryptionMode)), lagId: \(Swift.String(describing: lagId)), lagName: \(Swift.String(describing: lagName)), minimumLinks: \(Swift.String(describing: minimumLinks)))"}
}

extension UpdateLagInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionMode
        case lagId
        case lagName
        case minimumLinks
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionMode = encryptionMode {
            try encodeContainer.encode(encryptionMode, forKey: .encryptionMode)
        }
        if let lagId = lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
        if let lagName = lagName {
            try encodeContainer.encode(lagName, forKey: .lagName)
        }
        if minimumLinks != 0 {
            try encodeContainer.encode(minimumLinks, forKey: .minimumLinks)
        }
    }
}

public struct UpdateLagInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLagInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLagOutputError>
}

public struct UpdateLagInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLagInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLagInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLagInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLagOutputError>
}

public struct UpdateLagInput: Swift.Equatable {
    /// The LAG MAC Security (MACsec) encryption mode.
    ///          Amazon Web Services applies the value to all connections which are part of the LAG.
    public let encryptionMode: Swift.String?
    /// The ID of the LAG.
    /// This member is required.
    public let lagId: Swift.String?
    /// The name of the LAG.
    public let lagName: Swift.String?
    /// The minimum number of physical connections that must be operational for the LAG itself to be operational.
    public let minimumLinks: Swift.Int

    public init (
        encryptionMode: Swift.String? = nil,
        lagId: Swift.String? = nil,
        lagName: Swift.String? = nil,
        minimumLinks: Swift.Int = 0
    )
    {
        self.encryptionMode = encryptionMode
        self.lagId = lagId
        self.lagName = lagName
        self.minimumLinks = minimumLinks
    }
}

struct UpdateLagInputBody: Swift.Equatable {
    public let lagId: Swift.String?
    public let lagName: Swift.String?
    public let minimumLinks: Swift.Int
    public let encryptionMode: Swift.String?
}

extension UpdateLagInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionMode
        case lagId
        case lagName
        case minimumLinks
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let lagNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagName)
        lagName = lagNameDecoded
        let minimumLinksDecoded = try containerValues.decode(Swift.Int.self, forKey: .minimumLinks)
        minimumLinks = minimumLinksDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
    }
}

extension UpdateLagOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateLagOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateLagOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateLagOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLagOutputResponse(allowsHostedConnections: \(Swift.String(describing: allowsHostedConnections)), awsDevice: \(Swift.String(describing: awsDevice)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), connections: \(Swift.String(describing: connections)), connectionsBandwidth: \(Swift.String(describing: connectionsBandwidth)), encryptionMode: \(Swift.String(describing: encryptionMode)), hasLogicalRedundancy: \(Swift.String(describing: hasLogicalRedundancy)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), lagId: \(Swift.String(describing: lagId)), lagName: \(Swift.String(describing: lagName)), lagState: \(Swift.String(describing: lagState)), location: \(Swift.String(describing: location)), macSecCapable: \(Swift.String(describing: macSecCapable)), macSecKeys: \(Swift.String(describing: macSecKeys)), minimumLinks: \(Swift.String(describing: minimumLinks)), numberOfConnections: \(Swift.String(describing: numberOfConnections)), ownerAccount: \(Swift.String(describing: ownerAccount)), providerName: \(Swift.String(describing: providerName)), region: \(Swift.String(describing: region)), tags: \(Swift.String(describing: tags)))"}
}

extension UpdateLagOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateLagOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.allowsHostedConnections = output.allowsHostedConnections
            self.awsDevice = output.awsDevice
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.connections = output.connections
            self.connectionsBandwidth = output.connectionsBandwidth
            self.encryptionMode = output.encryptionMode
            self.hasLogicalRedundancy = output.hasLogicalRedundancy
            self.jumboFrameCapable = output.jumboFrameCapable
            self.lagId = output.lagId
            self.lagName = output.lagName
            self.lagState = output.lagState
            self.location = output.location
            self.macSecCapable = output.macSecCapable
            self.macSecKeys = output.macSecKeys
            self.minimumLinks = output.minimumLinks
            self.numberOfConnections = output.numberOfConnections
            self.ownerAccount = output.ownerAccount
            self.providerName = output.providerName
            self.region = output.region
            self.tags = output.tags
        } else {
            self.allowsHostedConnections = false
            self.awsDevice = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.connections = nil
            self.connectionsBandwidth = nil
            self.encryptionMode = nil
            self.hasLogicalRedundancy = nil
            self.jumboFrameCapable = nil
            self.lagId = nil
            self.lagName = nil
            self.lagState = nil
            self.location = nil
            self.macSecCapable = nil
            self.macSecKeys = nil
            self.minimumLinks = 0
            self.numberOfConnections = 0
            self.ownerAccount = nil
            self.providerName = nil
            self.region = nil
            self.tags = nil
        }
    }
}

/// Information about a link aggregation group (LAG).
public struct UpdateLagOutputResponse: Swift.Equatable {
    /// Indicates whether the LAG can host other connections.
    public let allowsHostedConnections: Swift.Bool
    /// The Direct Connect endpoint that hosts the LAG.
    @available(*, deprecated)
    public let awsDevice: Swift.String?
    /// The Direct Connect endpoint that hosts the LAG.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The connections bundled by the LAG.
    public let connections: [DirectConnectClientTypes.Connection]?
    /// The individual bandwidth of the physical connections bundled by the LAG. The possible
    ///       values are 1Gbps and 10Gbps.
    public let connectionsBandwidth: Swift.String?
    /// The LAG MAC Security (MACsec) encryption mode.
    ///          The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public let encryptionMode: Swift.String?
    /// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public let lagId: Swift.String?
    /// The name of the LAG.
    public let lagName: Swift.String?
    /// The state of the LAG. The following are the possible values:
    ///
    ///
    ///
    ///                   requested: The initial state of a LAG. The LAG stays in the
    ///                 requested state until the Letter of Authorization (LOA) is available.
    ///
    ///
    ///
    ///                   pending: The LAG has been approved and is being initialized.
    ///
    ///
    ///
    ///                   available: The network link is established and the LAG is ready for use.
    ///
    ///
    ///
    ///                   down: The network link is down.
    ///
    ///
    ///
    ///                   deleting: The LAG is being deleted.
    ///
    ///
    ///
    ///                   deleted: The LAG is deleted.
    ///
    ///
    ///
    ///                   unknown: The state of the LAG is not available.
    ///
    ///
    public let lagState: DirectConnectClientTypes.LagState?
    /// The location of the LAG.
    public let location: Swift.String?
    /// Indicates whether the LAG supports MAC Security (MACsec).
    public let macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the LAG.
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.
    public let minimumLinks: Swift.Int
    /// The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.
    public let numberOfConnections: Swift.Int
    /// The ID of the account that owns the LAG.
    public let ownerAccount: Swift.String?
    /// The name of the service provider associated with the LAG.
    public let providerName: Swift.String?
    /// The Region where the connection is located.
    public let region: Swift.String?
    /// The tags associated with the LAG.
    public let tags: [DirectConnectClientTypes.Tag]?

    public init (
        allowsHostedConnections: Swift.Bool = false,
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        connections: [DirectConnectClientTypes.Connection]? = nil,
        connectionsBandwidth: Swift.String? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        lagName: Swift.String? = nil,
        lagState: DirectConnectClientTypes.LagState? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        minimumLinks: Swift.Int = 0,
        numberOfConnections: Swift.Int = 0,
        ownerAccount: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil
    )
    {
        self.allowsHostedConnections = allowsHostedConnections
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.connections = connections
        self.connectionsBandwidth = connectionsBandwidth
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.lagName = lagName
        self.lagState = lagState
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.minimumLinks = minimumLinks
        self.numberOfConnections = numberOfConnections
        self.ownerAccount = ownerAccount
        self.providerName = providerName
        self.region = region
        self.tags = tags
    }
}

struct UpdateLagOutputResponseBody: Swift.Equatable {
    public let connectionsBandwidth: Swift.String?
    public let numberOfConnections: Swift.Int
    public let lagId: Swift.String?
    public let ownerAccount: Swift.String?
    public let lagName: Swift.String?
    public let lagState: DirectConnectClientTypes.LagState?
    public let location: Swift.String?
    public let region: Swift.String?
    public let minimumLinks: Swift.Int
    public let awsDevice: Swift.String?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let connections: [DirectConnectClientTypes.Connection]?
    public let allowsHostedConnections: Swift.Bool
    public let jumboFrameCapable: Swift.Bool?
    public let hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    public let tags: [DirectConnectClientTypes.Tag]?
    public let providerName: Swift.String?
    public let macSecCapable: Swift.Bool?
    public let encryptionMode: Swift.String?
    public let macSecKeys: [DirectConnectClientTypes.MacSecKey]?
}

extension UpdateLagOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowsHostedConnections
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case connections
        case connectionsBandwidth
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case lagName
        case lagState
        case location
        case macSecCapable
        case macSecKeys
        case minimumLinks
        case numberOfConnections
        case ownerAccount
        case providerName
        case region
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionsBandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionsBandwidth)
        connectionsBandwidth = connectionsBandwidthDecoded
        let numberOfConnectionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfConnections)
        numberOfConnections = numberOfConnectionsDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let lagNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagName)
        lagName = lagNameDecoded
        let lagStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.LagState.self, forKey: .lagState)
        lagState = lagStateDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let minimumLinksDecoded = try containerValues.decode(Swift.Int.self, forKey: .minimumLinks)
        minimumLinks = minimumLinksDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let connectionsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Connection?].self, forKey: .connections)
        var connectionsDecoded0:[DirectConnectClientTypes.Connection]? = nil
        if let connectionsContainer = connectionsContainer {
            connectionsDecoded0 = [DirectConnectClientTypes.Connection]()
            for structure0 in connectionsContainer {
                if let structure0 = structure0 {
                    connectionsDecoded0?.append(structure0)
                }
            }
        }
        connections = connectionsDecoded0
        let allowsHostedConnectionsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowsHostedConnections)
        allowsHostedConnections = allowsHostedConnectionsDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}

public struct UpdateVirtualInterfaceAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualInterfaceAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualInterfaceAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualInterfaceAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualInterfaceAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualInterfaceAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualInterfaceAttributesOutputError>
}

extension UpdateVirtualInterfaceAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVirtualInterfaceAttributesInput(mtu: \(Swift.String(describing: mtu)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension UpdateVirtualInterfaceAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mtu
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mtu = mtu {
            try encodeContainer.encode(mtu, forKey: .mtu)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}

public struct UpdateVirtualInterfaceAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualInterfaceAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualInterfaceAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualInterfaceAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualInterfaceAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualInterfaceAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualInterfaceAttributesOutputError>
}

public struct UpdateVirtualInterfaceAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualInterfaceAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualInterfaceAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualInterfaceAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualInterfaceAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualInterfaceAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualInterfaceAttributesOutputError>
}

public struct UpdateVirtualInterfaceAttributesInput: Swift.Equatable {
    /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
    public let mtu: Swift.Int?
    /// The ID of the virtual private interface.
    /// This member is required.
    public let virtualInterfaceId: Swift.String?

    public init (
        mtu: Swift.Int? = nil,
        virtualInterfaceId: Swift.String? = nil
    )
    {
        self.mtu = mtu
        self.virtualInterfaceId = virtualInterfaceId
    }
}

struct UpdateVirtualInterfaceAttributesInputBody: Swift.Equatable {
    public let virtualInterfaceId: Swift.String?
    public let mtu: Swift.Int?
}

extension UpdateVirtualInterfaceAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mtu
        case virtualInterfaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
    }
}

extension UpdateVirtualInterfaceAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVirtualInterfaceAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DirectConnectClientException" : self = .directConnectClientException(try DirectConnectClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectConnectServerException" : self = .directConnectServerException(try DirectConnectServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateVirtualInterfaceAttributesOutputError: Swift.Error, Swift.Equatable {
    case directConnectClientException(DirectConnectClientException)
    case directConnectServerException(DirectConnectServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVirtualInterfaceAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVirtualInterfaceAttributesOutputResponse(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), amazonSideAsn: \(Swift.String(describing: amazonSideAsn)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bgpPeers: \(Swift.String(describing: bgpPeers)), connectionId: \(Swift.String(describing: connectionId)), customerAddress: \(Swift.String(describing: customerAddress)), customerRouterConfig: \(Swift.String(describing: customerRouterConfig)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), location: \(Swift.String(describing: location)), mtu: \(Swift.String(describing: mtu)), ownerAccount: \(Swift.String(describing: ownerAccount)), region: \(Swift.String(describing: region)), routeFilterPrefixes: \(Swift.String(describing: routeFilterPrefixes)), tags: \(Swift.String(describing: tags)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), virtualInterfaceState: \(Swift.String(describing: virtualInterfaceState)), virtualInterfaceType: \(Swift.String(describing: virtualInterfaceType)), vlan: \(Swift.String(describing: vlan)))"}
}

extension UpdateVirtualInterfaceAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateVirtualInterfaceAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addressFamily = output.addressFamily
            self.amazonAddress = output.amazonAddress
            self.amazonSideAsn = output.amazonSideAsn
            self.asn = output.asn
            self.authKey = output.authKey
            self.awsDeviceV2 = output.awsDeviceV2
            self.awsLogicalDeviceId = output.awsLogicalDeviceId
            self.bgpPeers = output.bgpPeers
            self.connectionId = output.connectionId
            self.customerAddress = output.customerAddress
            self.customerRouterConfig = output.customerRouterConfig
            self.directConnectGatewayId = output.directConnectGatewayId
            self.jumboFrameCapable = output.jumboFrameCapable
            self.location = output.location
            self.mtu = output.mtu
            self.ownerAccount = output.ownerAccount
            self.region = output.region
            self.routeFilterPrefixes = output.routeFilterPrefixes
            self.tags = output.tags
            self.virtualGatewayId = output.virtualGatewayId
            self.virtualInterfaceId = output.virtualInterfaceId
            self.virtualInterfaceName = output.virtualInterfaceName
            self.virtualInterfaceState = output.virtualInterfaceState
            self.virtualInterfaceType = output.virtualInterfaceType
            self.vlan = output.vlan
        } else {
            self.addressFamily = nil
            self.amazonAddress = nil
            self.amazonSideAsn = nil
            self.asn = 0
            self.authKey = nil
            self.awsDeviceV2 = nil
            self.awsLogicalDeviceId = nil
            self.bgpPeers = nil
            self.connectionId = nil
            self.customerAddress = nil
            self.customerRouterConfig = nil
            self.directConnectGatewayId = nil
            self.jumboFrameCapable = nil
            self.location = nil
            self.mtu = nil
            self.ownerAccount = nil
            self.region = nil
            self.routeFilterPrefixes = nil
            self.tags = nil
            self.virtualGatewayId = nil
            self.virtualInterfaceId = nil
            self.virtualInterfaceName = nil
            self.virtualInterfaceState = nil
            self.virtualInterfaceType = nil
            self.vlan = 0
        }
    }
}

/// Information about a virtual interface.
public struct UpdateVirtualInterfaceAttributesOutputResponse: Swift.Equatable {
    /// The address family for the BGP peer.
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    /// The IP address assigned to the Amazon interface.
    public let amazonAddress: Swift.String?
    /// The autonomous system number (ASN) for the Amazon side of the connection.
    public let amazonSideAsn: Swift.Int?
    /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
    ///          The valid values are 1-2147483647.
    public let asn: Swift.Int
    /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
    public let authKey: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public let awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be
    ///       different than the device that terminates the physical connection.
    public let awsLogicalDeviceId: Swift.String?
    /// The BGP peers configured on this virtual interface.
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    /// The ID of the connection.
    public let connectionId: Swift.String?
    /// The IP address assigned to the customer interface.
    public let customerAddress: Swift.String?
    /// The customer router configuration.
    public let customerRouterConfig: Swift.String?
    /// The ID of the Direct Connect gateway.
    public let directConnectGatewayId: Swift.String?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public let jumboFrameCapable: Swift.Bool?
    /// The location of the connection.
    public let location: Swift.String?
    /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
    public let mtu: Swift.Int?
    /// The ID of the account that owns the virtual interface.
    public let ownerAccount: Swift.String?
    /// The Region where the virtual interface is located.
    public let region: Swift.String?
    /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    /// The tags associated with the virtual interface.
    public let tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
    public let virtualGatewayId: Swift.String?
    /// The ID of the virtual interface.
    public let virtualInterfaceId: Swift.String?
    /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
    public let virtualInterfaceName: Swift.String?
    /// The state of the virtual interface. The following are the possible values:
    ///
    ///
    ///
    ///                   confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.
    ///
    ///
    ///
    ///                   verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.
    ///
    ///
    ///
    ///                   pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.
    ///
    ///
    ///
    ///                   available: A virtual interface that is able to forward traffic.
    ///
    ///
    ///
    ///                   down: A virtual interface that is BGP down.
    ///
    ///
    ///
    ///                   deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.
    ///
    ///
    ///
    ///                   deleted: A virtual interface that cannot forward traffic.
    ///
    ///
    ///
    ///                   rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.
    ///
    ///
    ///
    ///                   unknown: The state of the virtual interface is not available.
    ///
    ///
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    /// The type of virtual interface. The possible values are private and public.
    public let virtualInterfaceType: Swift.String?
    /// The ID of the VLAN.
    public let vlan: Swift.Int

    public init (
        addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
        amazonAddress: Swift.String? = nil,
        amazonSideAsn: Swift.Int? = nil,
        asn: Swift.Int = 0,
        authKey: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bgpPeers: [DirectConnectClientTypes.BGPPeer]? = nil,
        connectionId: Swift.String? = nil,
        customerAddress: Swift.String? = nil,
        customerRouterConfig: Swift.String? = nil,
        directConnectGatewayId: Swift.String? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        location: Swift.String? = nil,
        mtu: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        region: Swift.String? = nil,
        routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        virtualGatewayId: Swift.String? = nil,
        virtualInterfaceId: Swift.String? = nil,
        virtualInterfaceName: Swift.String? = nil,
        virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState? = nil,
        virtualInterfaceType: Swift.String? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.addressFamily = addressFamily
        self.amazonAddress = amazonAddress
        self.amazonSideAsn = amazonSideAsn
        self.asn = asn
        self.authKey = authKey
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bgpPeers = bgpPeers
        self.connectionId = connectionId
        self.customerAddress = customerAddress
        self.customerRouterConfig = customerRouterConfig
        self.directConnectGatewayId = directConnectGatewayId
        self.jumboFrameCapable = jumboFrameCapable
        self.location = location
        self.mtu = mtu
        self.ownerAccount = ownerAccount
        self.region = region
        self.routeFilterPrefixes = routeFilterPrefixes
        self.tags = tags
        self.virtualGatewayId = virtualGatewayId
        self.virtualInterfaceId = virtualInterfaceId
        self.virtualInterfaceName = virtualInterfaceName
        self.virtualInterfaceState = virtualInterfaceState
        self.virtualInterfaceType = virtualInterfaceType
        self.vlan = vlan
    }
}

struct UpdateVirtualInterfaceAttributesOutputResponseBody: Swift.Equatable {
    public let ownerAccount: Swift.String?
    public let virtualInterfaceId: Swift.String?
    public let location: Swift.String?
    public let connectionId: Swift.String?
    public let virtualInterfaceType: Swift.String?
    public let virtualInterfaceName: Swift.String?
    public let vlan: Swift.Int
    public let asn: Swift.Int
    public let amazonSideAsn: Swift.Int?
    public let authKey: Swift.String?
    public let amazonAddress: Swift.String?
    public let customerAddress: Swift.String?
    public let addressFamily: DirectConnectClientTypes.AddressFamily?
    public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    public let customerRouterConfig: Swift.String?
    public let mtu: Swift.Int?
    public let jumboFrameCapable: Swift.Bool?
    public let virtualGatewayId: Swift.String?
    public let directConnectGatewayId: Swift.String?
    public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    public let region: Swift.String?
    public let awsDeviceV2: Swift.String?
    public let awsLogicalDeviceId: Swift.String?
    public let tags: [DirectConnectClientTypes.Tag]?
}

extension UpdateVirtualInterfaceAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case amazonSideAsn
        case asn
        case authKey
        case awsDeviceV2
        case awsLogicalDeviceId
        case bgpPeers
        case connectionId
        case customerAddress
        case customerRouterConfig
        case directConnectGatewayId
        case jumboFrameCapable
        case location
        case mtu
        case ownerAccount
        case region
        case routeFilterPrefixes
        case tags
        case virtualGatewayId
        case virtualInterfaceId
        case virtualInterfaceName
        case virtualInterfaceState
        case virtualInterfaceType
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let virtualInterfaceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceType)
        virtualInterfaceType = virtualInterfaceTypeDecoded
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
        let customerRouterConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerRouterConfig)
        customerRouterConfig = customerRouterConfigDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let routeFilterPrefixesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .routeFilterPrefixes)
        var routeFilterPrefixesDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let routeFilterPrefixesContainer = routeFilterPrefixesContainer {
            routeFilterPrefixesDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in routeFilterPrefixesContainer {
                if let structure0 = structure0 {
                    routeFilterPrefixesDecoded0?.append(structure0)
                }
            }
        }
        routeFilterPrefixes = routeFilterPrefixesDecoded0
        let bgpPeersContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.BGPPeer?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[DirectConnectClientTypes.BGPPeer]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [DirectConnectClientTypes.BGPPeer]()
            for structure0 in bgpPeersContainer {
                if let structure0 = structure0 {
                    bgpPeersDecoded0?.append(structure0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DirectConnectClientTypes.VirtualGateway: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualGatewayId
        case virtualGatewayState
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let virtualGatewayId = virtualGatewayId {
            try encodeContainer.encode(virtualGatewayId, forKey: .virtualGatewayId)
        }
        if let virtualGatewayState = virtualGatewayState {
            try encodeContainer.encode(virtualGatewayState, forKey: .virtualGatewayState)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let virtualGatewayStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayState)
        virtualGatewayState = virtualGatewayStateDecoded
    }
}

extension DirectConnectClientTypes.VirtualGateway: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGateway(virtualGatewayId: \(Swift.String(describing: virtualGatewayId)), virtualGatewayState: \(Swift.String(describing: virtualGatewayState)))"}
}

extension DirectConnectClientTypes {
    /// Information about a virtual private gateway for a private virtual interface.
    public struct VirtualGateway: Swift.Equatable {
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: Swift.String?
        /// The state of the virtual private gateway. The following are the possible values:
        ///
        ///
        ///
        ///                   pending: Initial state after creating the virtual private gateway.
        ///
        ///
        ///
        ///                   available: Ready for use by a private virtual interface.
        ///
        ///
        ///
        ///                   deleting: Initial state after deleting the virtual private gateway.
        ///
        ///
        ///
        ///                   deleted: The virtual private gateway is deleted. The private virtual interface is unable to send traffic over this gateway.
        ///
        ///
        public let virtualGatewayState: Swift.String?

        public init (
            virtualGatewayId: Swift.String? = nil,
            virtualGatewayState: Swift.String? = nil
        )
        {
            self.virtualGatewayId = virtualGatewayId
            self.virtualGatewayState = virtualGatewayState
        }
    }

}

extension DirectConnectClientTypes.VirtualInterface: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case amazonSideAsn
        case asn
        case authKey
        case awsDeviceV2
        case awsLogicalDeviceId
        case bgpPeers
        case connectionId
        case customerAddress
        case customerRouterConfig
        case directConnectGatewayId
        case jumboFrameCapable
        case location
        case mtu
        case ownerAccount
        case region
        case routeFilterPrefixes
        case tags
        case virtualGatewayId
        case virtualInterfaceId
        case virtualInterfaceName
        case virtualInterfaceState
        case virtualInterfaceType
        case vlan
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressFamily = addressFamily {
            try encodeContainer.encode(addressFamily.rawValue, forKey: .addressFamily)
        }
        if let amazonAddress = amazonAddress {
            try encodeContainer.encode(amazonAddress, forKey: .amazonAddress)
        }
        if let amazonSideAsn = amazonSideAsn {
            try encodeContainer.encode(amazonSideAsn, forKey: .amazonSideAsn)
        }
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let authKey = authKey {
            try encodeContainer.encode(authKey, forKey: .authKey)
        }
        if let awsDeviceV2 = awsDeviceV2 {
            try encodeContainer.encode(awsDeviceV2, forKey: .awsDeviceV2)
        }
        if let awsLogicalDeviceId = awsLogicalDeviceId {
            try encodeContainer.encode(awsLogicalDeviceId, forKey: .awsLogicalDeviceId)
        }
        if let bgpPeers = bgpPeers {
            var bgpPeersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bgpPeers)
            for bgppeerlist0 in bgpPeers {
                try bgpPeersContainer.encode(bgppeerlist0)
            }
        }
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let customerAddress = customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
        if let customerRouterConfig = customerRouterConfig {
            try encodeContainer.encode(customerRouterConfig, forKey: .customerRouterConfig)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let jumboFrameCapable = jumboFrameCapable {
            try encodeContainer.encode(jumboFrameCapable, forKey: .jumboFrameCapable)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let mtu = mtu {
            try encodeContainer.encode(mtu, forKey: .mtu)
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let routeFilterPrefixes = routeFilterPrefixes {
            var routeFilterPrefixesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .routeFilterPrefixes)
            for routefilterprefixlist0 in routeFilterPrefixes {
                try routeFilterPrefixesContainer.encode(routefilterprefixlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualGatewayId = virtualGatewayId {
            try encodeContainer.encode(virtualGatewayId, forKey: .virtualGatewayId)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
        if let virtualInterfaceName = virtualInterfaceName {
            try encodeContainer.encode(virtualInterfaceName, forKey: .virtualInterfaceName)
        }
        if let virtualInterfaceState = virtualInterfaceState {
            try encodeContainer.encode(virtualInterfaceState.rawValue, forKey: .virtualInterfaceState)
        }
        if let virtualInterfaceType = virtualInterfaceType {
            try encodeContainer.encode(virtualInterfaceType, forKey: .virtualInterfaceType)
        }
        if vlan != 0 {
            try encodeContainer.encode(vlan, forKey: .vlan)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let virtualInterfaceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceType)
        virtualInterfaceType = virtualInterfaceTypeDecoded
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decode(Swift.Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
        let customerRouterConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerRouterConfig)
        customerRouterConfig = customerRouterConfigDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let routeFilterPrefixesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .routeFilterPrefixes)
        var routeFilterPrefixesDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let routeFilterPrefixesContainer = routeFilterPrefixesContainer {
            routeFilterPrefixesDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in routeFilterPrefixesContainer {
                if let structure0 = structure0 {
                    routeFilterPrefixesDecoded0?.append(structure0)
                }
            }
        }
        routeFilterPrefixes = routeFilterPrefixesDecoded0
        let bgpPeersContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.BGPPeer?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[DirectConnectClientTypes.BGPPeer]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [DirectConnectClientTypes.BGPPeer]()
            for structure0 in bgpPeersContainer {
                if let structure0 = structure0 {
                    bgpPeersDecoded0?.append(structure0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DirectConnectClientTypes.VirtualInterface: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualInterface(addressFamily: \(Swift.String(describing: addressFamily)), amazonAddress: \(Swift.String(describing: amazonAddress)), amazonSideAsn: \(Swift.String(describing: amazonSideAsn)), asn: \(Swift.String(describing: asn)), authKey: \(Swift.String(describing: authKey)), awsDeviceV2: \(Swift.String(describing: awsDeviceV2)), awsLogicalDeviceId: \(Swift.String(describing: awsLogicalDeviceId)), bgpPeers: \(Swift.String(describing: bgpPeers)), connectionId: \(Swift.String(describing: connectionId)), customerAddress: \(Swift.String(describing: customerAddress)), customerRouterConfig: \(Swift.String(describing: customerRouterConfig)), directConnectGatewayId: \(Swift.String(describing: directConnectGatewayId)), jumboFrameCapable: \(Swift.String(describing: jumboFrameCapable)), location: \(Swift.String(describing: location)), mtu: \(Swift.String(describing: mtu)), ownerAccount: \(Swift.String(describing: ownerAccount)), region: \(Swift.String(describing: region)), routeFilterPrefixes: \(Swift.String(describing: routeFilterPrefixes)), tags: \(Swift.String(describing: tags)), virtualGatewayId: \(Swift.String(describing: virtualGatewayId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)), virtualInterfaceName: \(Swift.String(describing: virtualInterfaceName)), virtualInterfaceState: \(Swift.String(describing: virtualInterfaceState)), virtualInterfaceType: \(Swift.String(describing: virtualInterfaceType)), vlan: \(Swift.String(describing: vlan)))"}
}

extension DirectConnectClientTypes {
    /// Information about a virtual interface.
    public struct VirtualInterface: Swift.Equatable {
        /// The address family for the BGP peer.
        public let addressFamily: DirectConnectClientTypes.AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: Swift.String?
        /// The autonomous system number (ASN) for the Amazon side of the connection.
        public let amazonSideAsn: Swift.Int?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        ///          The valid values are 1-2147483647.
        public let asn: Swift.Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: Swift.String?
        /// The Direct Connect endpoint that terminates the physical connection.
        public let awsDeviceV2: Swift.String?
        /// The Direct Connect endpoint that terminates the logical connection. This device might be
        ///       different than the device that terminates the physical connection.
        public let awsLogicalDeviceId: Swift.String?
        /// The BGP peers configured on this virtual interface.
        public let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
        /// The ID of the connection.
        public let connectionId: Swift.String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: Swift.String?
        /// The customer router configuration.
        public let customerRouterConfig: Swift.String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: Swift.String?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Swift.Bool?
        /// The location of the connection.
        public let location: Swift.String?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Swift.Int?
        /// The ID of the account that owns the virtual interface.
        public let ownerAccount: Swift.String?
        /// The Region where the virtual interface is located.
        public let region: Swift.String?
        /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
        public let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
        /// The tags associated with the virtual interface.
        public let tags: [DirectConnectClientTypes.Tag]?
        /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
        public let virtualGatewayId: Swift.String?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: Swift.String?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        public let virtualInterfaceName: Swift.String?
        /// The state of the virtual interface. The following are the possible values:
        ///
        ///
        ///
        ///                   confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.
        ///
        ///
        ///
        ///                   verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.
        ///
        ///
        ///
        ///                   pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.
        ///
        ///
        ///
        ///                   available: A virtual interface that is able to forward traffic.
        ///
        ///
        ///
        ///                   down: A virtual interface that is BGP down.
        ///
        ///
        ///
        ///                   deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.
        ///
        ///
        ///
        ///                   deleted: A virtual interface that cannot forward traffic.
        ///
        ///
        ///
        ///                   rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.
        ///
        ///
        ///
        ///                   unknown: The state of the virtual interface is not available.
        ///
        ///
        public let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
        /// The type of virtual interface. The possible values are private and public.
        public let virtualInterfaceType: Swift.String?
        /// The ID of the VLAN.
        public let vlan: Swift.Int

        public init (
            addressFamily: DirectConnectClientTypes.AddressFamily? = nil,
            amazonAddress: Swift.String? = nil,
            amazonSideAsn: Swift.Int? = nil,
            asn: Swift.Int = 0,
            authKey: Swift.String? = nil,
            awsDeviceV2: Swift.String? = nil,
            awsLogicalDeviceId: Swift.String? = nil,
            bgpPeers: [DirectConnectClientTypes.BGPPeer]? = nil,
            connectionId: Swift.String? = nil,
            customerAddress: Swift.String? = nil,
            customerRouterConfig: Swift.String? = nil,
            directConnectGatewayId: Swift.String? = nil,
            jumboFrameCapable: Swift.Bool? = nil,
            location: Swift.String? = nil,
            mtu: Swift.Int? = nil,
            ownerAccount: Swift.String? = nil,
            region: Swift.String? = nil,
            routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]? = nil,
            tags: [DirectConnectClientTypes.Tag]? = nil,
            virtualGatewayId: Swift.String? = nil,
            virtualInterfaceId: Swift.String? = nil,
            virtualInterfaceName: Swift.String? = nil,
            virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState? = nil,
            virtualInterfaceType: Swift.String? = nil,
            vlan: Swift.Int = 0
        )
        {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.amazonSideAsn = amazonSideAsn
            self.asn = asn
            self.authKey = authKey
            self.awsDeviceV2 = awsDeviceV2
            self.awsLogicalDeviceId = awsLogicalDeviceId
            self.bgpPeers = bgpPeers
            self.connectionId = connectionId
            self.customerAddress = customerAddress
            self.customerRouterConfig = customerRouterConfig
            self.directConnectGatewayId = directConnectGatewayId
            self.jumboFrameCapable = jumboFrameCapable
            self.location = location
            self.mtu = mtu
            self.ownerAccount = ownerAccount
            self.region = region
            self.routeFilterPrefixes = routeFilterPrefixes
            self.tags = tags
            self.virtualGatewayId = virtualGatewayId
            self.virtualInterfaceId = virtualInterfaceId
            self.virtualInterfaceName = virtualInterfaceName
            self.virtualInterfaceState = virtualInterfaceState
            self.virtualInterfaceType = virtualInterfaceType
            self.vlan = vlan
        }
    }

}

extension DirectConnectClientTypes {
    public enum VirtualInterfaceState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case confirming
        case deleted
        case deleting
        case down
        case pending
        case rejected
        case unknown
        case verifying
        case sdkUnknown(Swift.String)

        public static var allCases: [VirtualInterfaceState] {
            return [
                .available,
                .confirming,
                .deleted,
                .deleting,
                .down,
                .pending,
                .rejected,
                .unknown,
                .verifying,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .confirming: return "confirming"
            case .deleted: return "deleted"
            case .deleting: return "deleting"
            case .down: return "down"
            case .pending: return "pending"
            case .rejected: return "rejected"
            case .unknown: return "unknown"
            case .verifying: return "verifying"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VirtualInterfaceState(rawValue: rawValue) ?? VirtualInterfaceState.sdkUnknown(rawValue)
        }
    }
}

extension DirectConnectClientTypes.VirtualInterfaceTestHistory: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bgpPeers
        case endTime
        case ownerAccount
        case startTime
        case status
        case testDurationInMinutes
        case testId
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bgpPeers = bgpPeers {
            var bgpPeersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bgpPeers)
            for bgppeeridlist0 in bgpPeers {
                try bgpPeersContainer.encode(bgppeeridlist0)
            }
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let testDurationInMinutes = testDurationInMinutes {
            try encodeContainer.encode(testDurationInMinutes, forKey: .testDurationInMinutes)
        }
        if let testId = testId {
            try encodeContainer.encode(testId, forKey: .testId)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let testIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testId)
        testId = testIdDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let bgpPeersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[Swift.String]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [Swift.String]()
            for string0 in bgpPeersContainer {
                if let string0 = string0 {
                    bgpPeersDecoded0?.append(string0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let testDurationInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .testDurationInMinutes)
        testDurationInMinutes = testDurationInMinutesDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension DirectConnectClientTypes.VirtualInterfaceTestHistory: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualInterfaceTestHistory(bgpPeers: \(Swift.String(describing: bgpPeers)), endTime: \(Swift.String(describing: endTime)), ownerAccount: \(Swift.String(describing: ownerAccount)), startTime: \(Swift.String(describing: startTime)), status: \(Swift.String(describing: status)), testDurationInMinutes: \(Swift.String(describing: testDurationInMinutes)), testId: \(Swift.String(describing: testId)), virtualInterfaceId: \(Swift.String(describing: virtualInterfaceId)))"}
}

extension DirectConnectClientTypes {
    /// Information about the virtual interface failover test.
    public struct VirtualInterfaceTestHistory: Swift.Equatable {
        /// The BGP peers that were put in the DOWN state as part of the virtual interface failover test.
        public let bgpPeers: [Swift.String]?
        /// The time that the virtual interface moves out of the DOWN state.
        public let endTime: ClientRuntime.Date?
        /// The owner ID of the tested virtual interface.
        public let ownerAccount: Swift.String?
        /// The time that the virtual interface moves to the DOWN state.
        public let startTime: ClientRuntime.Date?
        /// The status of the virtual interface failover test.
        public let status: Swift.String?
        /// The time that the virtual interface failover test ran in minutes.
        public let testDurationInMinutes: Swift.Int?
        /// The ID of the virtual interface failover test.
        public let testId: Swift.String?
        /// The ID of the tested virtual interface.
        public let virtualInterfaceId: Swift.String?

        public init (
            bgpPeers: [Swift.String]? = nil,
            endTime: ClientRuntime.Date? = nil,
            ownerAccount: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: Swift.String? = nil,
            testDurationInMinutes: Swift.Int? = nil,
            testId: Swift.String? = nil,
            virtualInterfaceId: Swift.String? = nil
        )
        {
            self.bgpPeers = bgpPeers
            self.endTime = endTime
            self.ownerAccount = ownerAccount
            self.startTime = startTime
            self.status = status
            self.testDurationInMinutes = testDurationInMinutes
            self.testId = testId
            self.virtualInterfaceId = virtualInterfaceId
        }
    }

}
