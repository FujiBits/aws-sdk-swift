// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateLagInputHeadersMiddleware: Middleware {
    public let id: String = "CreateLagInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLagInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLagInput>
    public typealias MOutput = OperationOutput<CreateLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLagOutputError>
}

public struct CreateLagInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateLagInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLagInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLagInput>
    public typealias MOutput = OperationOutput<CreateLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLagOutputError>
}

public struct CreateLagInputBodyMiddleware: Middleware {
    public let id: String = "CreateLagInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLagInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLagOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLagInput>
    public typealias MOutput = OperationOutput<CreateLagOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLagOutputError>
}

extension CreateLagInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childConnectionTags
        case connectionId
        case connectionsBandwidth
        case lagName
        case location
        case numberOfConnections
        case providerName
        case requestMACSec
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childConnectionTags = childConnectionTags {
            var childConnectionTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .childConnectionTags)
            for taglist0 in childConnectionTags {
                try childConnectionTagsContainer.encode(taglist0)
            }
        }
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let connectionsBandwidth = connectionsBandwidth {
            try encodeContainer.encode(connectionsBandwidth, forKey: .connectionsBandwidth)
        }
        if let lagName = lagName {
            try encodeContainer.encode(lagName, forKey: .lagName)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if numberOfConnections != 0 {
            try encodeContainer.encode(numberOfConnections, forKey: .numberOfConnections)
        }
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let requestMACSec = requestMACSec {
            try encodeContainer.encode(requestMACSec, forKey: .requestMACSec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
