// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateDirectConnectGatewayAssociationProposalInputHeadersMiddleware: Middleware {
    public let id: String = "CreateDirectConnectGatewayAssociationProposalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDirectConnectGatewayAssociationProposalOutputError>
}

public struct CreateDirectConnectGatewayAssociationProposalInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateDirectConnectGatewayAssociationProposalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDirectConnectGatewayAssociationProposalOutputError>
}

public struct CreateDirectConnectGatewayAssociationProposalInputBodyMiddleware: Middleware {
    public let id: String = "CreateDirectConnectGatewayAssociationProposalInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDirectConnectGatewayAssociationProposalInput>
    public typealias MOutput = OperationOutput<CreateDirectConnectGatewayAssociationProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDirectConnectGatewayAssociationProposalOutputError>
}

extension CreateDirectConnectGatewayAssociationProposalInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addAllowedPrefixesToDirectConnectGateway
        case directConnectGatewayId
        case directConnectGatewayOwnerAccount
        case gatewayId
        case removeAllowedPrefixesToDirectConnectGateway
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGateway {
            var addAllowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addAllowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in addAllowedPrefixesToDirectConnectGateway {
                try addAllowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccount {
            try encodeContainer.encode(directConnectGatewayOwnerAccount, forKey: .directConnectGatewayOwnerAccount)
        }
        if let gatewayId = gatewayId {
            try encodeContainer.encode(gatewayId, forKey: .gatewayId)
        }
        if let removeAllowedPrefixesToDirectConnectGateway = removeAllowedPrefixesToDirectConnectGateway {
            var removeAllowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removeAllowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in removeAllowedPrefixesToDirectConnectGateway {
                try removeAllowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
    }
}
