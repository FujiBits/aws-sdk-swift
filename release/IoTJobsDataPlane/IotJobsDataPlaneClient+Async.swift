// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension IotJobsDataPlaneClient {
    /// <p>Gets details of a job execution.</p>
    func describeJobExecution(input: DescribeJobExecutionInput) async throws -> DescribeJobExecutionOutputResponse
    {
        typealias describeJobExecutionContinuation = CheckedContinuation<DescribeJobExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeJobExecutionContinuation) in
            describeJobExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the list of all jobs for a thing that are not in a terminal status.</p>
    func getPendingJobExecutions(input: GetPendingJobExecutionsInput) async throws -> GetPendingJobExecutionsOutputResponse
    {
        typealias getPendingJobExecutionsContinuation = CheckedContinuation<GetPendingJobExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPendingJobExecutionsContinuation) in
            getPendingJobExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets and starts the next pending (status IN_PROGRESS or QUEUED) job execution for a thing.</p>
    func startNextPendingJobExecution(input: StartNextPendingJobExecutionInput) async throws -> StartNextPendingJobExecutionOutputResponse
    {
        typealias startNextPendingJobExecutionContinuation = CheckedContinuation<StartNextPendingJobExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startNextPendingJobExecutionContinuation) in
            startNextPendingJobExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the status of a job execution.</p>
    func updateJobExecution(input: UpdateJobExecutionInput) async throws -> UpdateJobExecutionOutputResponse
    {
        typealias updateJobExecutionContinuation = CheckedContinuation<UpdateJobExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateJobExecutionContinuation) in
            updateJobExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
