// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateFeatureGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateFeatureGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFeatureGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFeatureGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFeatureGroupInput>
    public typealias MOutput = OperationOutput<CreateFeatureGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFeatureGroupOutputError>
}

public struct CreateFeatureGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateFeatureGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFeatureGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFeatureGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFeatureGroupInput>
    public typealias MOutput = OperationOutput<CreateFeatureGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFeatureGroupOutputError>
}

public struct CreateFeatureGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateFeatureGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFeatureGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFeatureGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFeatureGroupInput>
    public typealias MOutput = OperationOutput<CreateFeatureGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFeatureGroupOutputError>
}

extension CreateFeatureGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case eventTimeFeatureName = "EventTimeFeatureName"
        case featureDefinitions = "FeatureDefinitions"
        case featureGroupName = "FeatureGroupName"
        case offlineStoreConfig = "OfflineStoreConfig"
        case onlineStoreConfig = "OnlineStoreConfig"
        case recordIdentifierFeatureName = "RecordIdentifierFeatureName"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eventTimeFeatureName = eventTimeFeatureName {
            try encodeContainer.encode(eventTimeFeatureName, forKey: .eventTimeFeatureName)
        }
        if let featureDefinitions = featureDefinitions {
            var featureDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .featureDefinitions)
            for featuredefinitions0 in featureDefinitions {
                try featureDefinitionsContainer.encode(featuredefinitions0)
            }
        }
        if let featureGroupName = featureGroupName {
            try encodeContainer.encode(featureGroupName, forKey: .featureGroupName)
        }
        if let offlineStoreConfig = offlineStoreConfig {
            try encodeContainer.encode(offlineStoreConfig, forKey: .offlineStoreConfig)
        }
        if let onlineStoreConfig = onlineStoreConfig {
            try encodeContainer.encode(onlineStoreConfig, forKey: .onlineStoreConfig)
        }
        if let recordIdentifierFeatureName = recordIdentifierFeatureName {
            try encodeContainer.encode(recordIdentifierFeatureName, forKey: .recordIdentifierFeatureName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
