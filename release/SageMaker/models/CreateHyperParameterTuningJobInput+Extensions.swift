// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateHyperParameterTuningJobInputHeadersMiddleware: Middleware {
    public let id: String = "CreateHyperParameterTuningJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHyperParameterTuningJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHyperParameterTuningJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHyperParameterTuningJobInput>
    public typealias MOutput = OperationOutput<CreateHyperParameterTuningJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHyperParameterTuningJobOutputError>
}

public struct CreateHyperParameterTuningJobInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateHyperParameterTuningJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHyperParameterTuningJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHyperParameterTuningJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHyperParameterTuningJobInput>
    public typealias MOutput = OperationOutput<CreateHyperParameterTuningJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHyperParameterTuningJobOutputError>
}

public struct CreateHyperParameterTuningJobInputBodyMiddleware: Middleware {
    public let id: String = "CreateHyperParameterTuningJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHyperParameterTuningJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHyperParameterTuningJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHyperParameterTuningJobInput>
    public typealias MOutput = OperationOutput<CreateHyperParameterTuningJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHyperParameterTuningJobOutputError>
}

extension CreateHyperParameterTuningJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hyperParameterTuningJobConfig = "HyperParameterTuningJobConfig"
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        case tags = "Tags"
        case trainingJobDefinition = "TrainingJobDefinition"
        case trainingJobDefinitions = "TrainingJobDefinitions"
        case warmStartConfig = "WarmStartConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hyperParameterTuningJobConfig = hyperParameterTuningJobConfig {
            try encodeContainer.encode(hyperParameterTuningJobConfig, forKey: .hyperParameterTuningJobConfig)
        }
        if let hyperParameterTuningJobName = hyperParameterTuningJobName {
            try encodeContainer.encode(hyperParameterTuningJobName, forKey: .hyperParameterTuningJobName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trainingJobDefinition = trainingJobDefinition {
            try encodeContainer.encode(trainingJobDefinition, forKey: .trainingJobDefinition)
        }
        if let trainingJobDefinitions = trainingJobDefinitions {
            var trainingJobDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trainingJobDefinitions)
            for hyperparametertrainingjobdefinitions0 in trainingJobDefinitions {
                try trainingJobDefinitionsContainer.encode(hyperparametertrainingjobdefinitions0)
            }
        }
        if let warmStartConfig = warmStartConfig {
            try encodeContainer.encode(warmStartConfig, forKey: .warmStartConfig)
        }
    }
}
