// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateFlowDefinitionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateFlowDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFlowDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFlowDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFlowDefinitionInput>
    public typealias MOutput = OperationOutput<CreateFlowDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFlowDefinitionOutputError>
}

public struct CreateFlowDefinitionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateFlowDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFlowDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFlowDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFlowDefinitionInput>
    public typealias MOutput = OperationOutput<CreateFlowDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFlowDefinitionOutputError>
}

public struct CreateFlowDefinitionInputBodyMiddleware: Middleware {
    public let id: String = "CreateFlowDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFlowDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFlowDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFlowDefinitionInput>
    public typealias MOutput = OperationOutput<CreateFlowDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFlowDefinitionOutputError>
}

extension CreateFlowDefinitionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case flowDefinitionName = "FlowDefinitionName"
        case humanLoopActivationConfig = "HumanLoopActivationConfig"
        case humanLoopConfig = "HumanLoopConfig"
        case humanLoopRequestSource = "HumanLoopRequestSource"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let flowDefinitionName = flowDefinitionName {
            try encodeContainer.encode(flowDefinitionName, forKey: .flowDefinitionName)
        }
        if let humanLoopActivationConfig = humanLoopActivationConfig {
            try encodeContainer.encode(humanLoopActivationConfig, forKey: .humanLoopActivationConfig)
        }
        if let humanLoopConfig = humanLoopConfig {
            try encodeContainer.encode(humanLoopConfig, forKey: .humanLoopConfig)
        }
        if let humanLoopRequestSource = humanLoopRequestSource {
            try encodeContainer.encode(humanLoopRequestSource, forKey: .humanLoopRequestSource)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
