// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateTrialComponentInputHeadersMiddleware: Middleware {
    public let id: String = "CreateTrialComponentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTrialComponentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTrialComponentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTrialComponentInput>
    public typealias MOutput = OperationOutput<CreateTrialComponentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTrialComponentOutputError>
}

public struct CreateTrialComponentInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateTrialComponentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTrialComponentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTrialComponentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTrialComponentInput>
    public typealias MOutput = OperationOutput<CreateTrialComponentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTrialComponentOutputError>
}

public struct CreateTrialComponentInputBodyMiddleware: Middleware {
    public let id: String = "CreateTrialComponentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTrialComponentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTrialComponentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTrialComponentInput>
    public typealias MOutput = OperationOutput<CreateTrialComponentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTrialComponentOutputError>
}

extension CreateTrialComponentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case displayName = "DisplayName"
        case endTime = "EndTime"
        case inputArtifacts = "InputArtifacts"
        case metadataProperties = "MetadataProperties"
        case outputArtifacts = "OutputArtifacts"
        case parameters = "Parameters"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
        case trialComponentName = "TrialComponentName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .inputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in inputArtifacts {
                try inputArtifactsContainer.encode(trialcomponentartifacts0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .outputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in outputArtifacts {
                try outputArtifactsContainer.encode(trialcomponentartifacts0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, trialcomponentparameters0) in parameters {
                try parametersContainer.encode(trialcomponentparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trialComponentName = trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
    }
}
