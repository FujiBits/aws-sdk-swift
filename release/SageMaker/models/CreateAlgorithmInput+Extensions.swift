// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateAlgorithmInputHeadersMiddleware: Middleware {
    public let id: String = "CreateAlgorithmInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAlgorithmInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAlgorithmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAlgorithmInput>
    public typealias MOutput = OperationOutput<CreateAlgorithmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAlgorithmOutputError>
}

public struct CreateAlgorithmInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateAlgorithmInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAlgorithmInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAlgorithmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAlgorithmInput>
    public typealias MOutput = OperationOutput<CreateAlgorithmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAlgorithmOutputError>
}

public struct CreateAlgorithmInputBodyMiddleware: Middleware {
    public let id: String = "CreateAlgorithmInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAlgorithmInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAlgorithmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAlgorithmInput>
    public typealias MOutput = OperationOutput<CreateAlgorithmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAlgorithmOutputError>
}

extension CreateAlgorithmInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithmDescription = "AlgorithmDescription"
        case algorithmName = "AlgorithmName"
        case certifyForMarketplace = "CertifyForMarketplace"
        case inferenceSpecification = "InferenceSpecification"
        case tags = "Tags"
        case trainingSpecification = "TrainingSpecification"
        case validationSpecification = "ValidationSpecification"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmDescription = algorithmDescription {
            try encodeContainer.encode(algorithmDescription, forKey: .algorithmDescription)
        }
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
        if certifyForMarketplace != false {
            try encodeContainer.encode(certifyForMarketplace, forKey: .certifyForMarketplace)
        }
        if let inferenceSpecification = inferenceSpecification {
            try encodeContainer.encode(inferenceSpecification, forKey: .inferenceSpecification)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trainingSpecification = trainingSpecification {
            try encodeContainer.encode(trainingSpecification, forKey: .trainingSpecification)
        }
        if let validationSpecification = validationSpecification {
            try encodeContainer.encode(validationSpecification, forKey: .validationSpecification)
        }
    }
}
