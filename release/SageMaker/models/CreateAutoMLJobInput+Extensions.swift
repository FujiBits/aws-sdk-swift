// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateAutoMLJobInputHeadersMiddleware: Middleware {
    public let id: String = "CreateAutoMLJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAutoMLJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAutoMLJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAutoMLJobInput>
    public typealias MOutput = OperationOutput<CreateAutoMLJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAutoMLJobOutputError>
}

public struct CreateAutoMLJobInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateAutoMLJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAutoMLJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAutoMLJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAutoMLJobInput>
    public typealias MOutput = OperationOutput<CreateAutoMLJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAutoMLJobOutputError>
}

public struct CreateAutoMLJobInputBodyMiddleware: Middleware {
    public let id: String = "CreateAutoMLJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAutoMLJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAutoMLJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAutoMLJobInput>
    public typealias MOutput = OperationOutput<CreateAutoMLJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAutoMLJobOutputError>
}

extension CreateAutoMLJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoMLJobConfig = "AutoMLJobConfig"
        case autoMLJobName = "AutoMLJobName"
        case autoMLJobObjective = "AutoMLJobObjective"
        case generateCandidateDefinitionsOnly = "GenerateCandidateDefinitionsOnly"
        case inputDataConfig = "InputDataConfig"
        case modelDeployConfig = "ModelDeployConfig"
        case outputDataConfig = "OutputDataConfig"
        case problemType = "ProblemType"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoMLJobConfig = autoMLJobConfig {
            try encodeContainer.encode(autoMLJobConfig, forKey: .autoMLJobConfig)
        }
        if let autoMLJobName = autoMLJobName {
            try encodeContainer.encode(autoMLJobName, forKey: .autoMLJobName)
        }
        if let autoMLJobObjective = autoMLJobObjective {
            try encodeContainer.encode(autoMLJobObjective, forKey: .autoMLJobObjective)
        }
        if generateCandidateDefinitionsOnly != false {
            try encodeContainer.encode(generateCandidateDefinitionsOnly, forKey: .generateCandidateDefinitionsOnly)
        }
        if let inputDataConfig = inputDataConfig {
            var inputDataConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDataConfig)
            for automlinputdataconfig0 in inputDataConfig {
                try inputDataConfigContainer.encode(automlinputdataconfig0)
            }
        }
        if let modelDeployConfig = modelDeployConfig {
            try encodeContainer.encode(modelDeployConfig, forKey: .modelDeployConfig)
        }
        if let outputDataConfig = outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let problemType = problemType {
            try encodeContainer.encode(problemType.rawValue, forKey: .problemType)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
