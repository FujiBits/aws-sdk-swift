// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RenderUiTemplateInputHeadersMiddleware: Middleware {
    public let id: String = "RenderUiTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RenderUiTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<RenderUiTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RenderUiTemplateInput>
    public typealias MOutput = OperationOutput<RenderUiTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RenderUiTemplateOutputError>
}

public struct RenderUiTemplateInputQueryItemMiddleware: Middleware {
    public let id: String = "RenderUiTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RenderUiTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<RenderUiTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RenderUiTemplateInput>
    public typealias MOutput = OperationOutput<RenderUiTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RenderUiTemplateOutputError>
}

public struct RenderUiTemplateInputBodyMiddleware: Middleware {
    public let id: String = "RenderUiTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RenderUiTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<RenderUiTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RenderUiTemplateInput>
    public typealias MOutput = OperationOutput<RenderUiTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RenderUiTemplateOutputError>
}

extension RenderUiTemplateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case humanTaskUiArn = "HumanTaskUiArn"
        case roleArn = "RoleArn"
        case task = "Task"
        case uiTemplate = "UiTemplate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanTaskUiArn = humanTaskUiArn {
            try encodeContainer.encode(humanTaskUiArn, forKey: .humanTaskUiArn)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let task = task {
            try encodeContainer.encode(task, forKey: .task)
        }
        if let uiTemplate = uiTemplate {
            try encodeContainer.encode(uiTemplate, forKey: .uiTemplate)
        }
    }
}
