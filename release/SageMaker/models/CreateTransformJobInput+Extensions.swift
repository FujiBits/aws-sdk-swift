// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateTransformJobInputHeadersMiddleware: Middleware {
    public let id: String = "CreateTransformJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTransformJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTransformJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTransformJobInput>
    public typealias MOutput = OperationOutput<CreateTransformJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTransformJobOutputError>
}

public struct CreateTransformJobInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateTransformJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTransformJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTransformJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTransformJobInput>
    public typealias MOutput = OperationOutput<CreateTransformJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTransformJobOutputError>
}

public struct CreateTransformJobInputBodyMiddleware: Middleware {
    public let id: String = "CreateTransformJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTransformJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTransformJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTransformJobInput>
    public typealias MOutput = OperationOutput<CreateTransformJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTransformJobOutputError>
}

extension CreateTransformJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case batchStrategy = "BatchStrategy"
        case dataProcessing = "DataProcessing"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case maxConcurrentTransforms = "MaxConcurrentTransforms"
        case maxPayloadInMB = "MaxPayloadInMB"
        case modelClientConfig = "ModelClientConfig"
        case modelName = "ModelName"
        case tags = "Tags"
        case transformInput = "TransformInput"
        case transformJobName = "TransformJobName"
        case transformOutput = "TransformOutput"
        case transformResources = "TransformResources"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchStrategy = batchStrategy {
            try encodeContainer.encode(batchStrategy.rawValue, forKey: .batchStrategy)
        }
        if let dataProcessing = dataProcessing {
            try encodeContainer.encode(dataProcessing, forKey: .dataProcessing)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .environment)
            for (dictKey0, transformenvironmentmap0) in environment {
                try environmentContainer.encode(transformenvironmentmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let experimentConfig = experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let maxConcurrentTransforms = maxConcurrentTransforms {
            try encodeContainer.encode(maxConcurrentTransforms, forKey: .maxConcurrentTransforms)
        }
        if let maxPayloadInMB = maxPayloadInMB {
            try encodeContainer.encode(maxPayloadInMB, forKey: .maxPayloadInMB)
        }
        if let modelClientConfig = modelClientConfig {
            try encodeContainer.encode(modelClientConfig, forKey: .modelClientConfig)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let transformInput = transformInput {
            try encodeContainer.encode(transformInput, forKey: .transformInput)
        }
        if let transformJobName = transformJobName {
            try encodeContainer.encode(transformJobName, forKey: .transformJobName)
        }
        if let transformOutput = transformOutput {
            try encodeContainer.encode(transformOutput, forKey: .transformOutput)
        }
        if let transformResources = transformResources {
            try encodeContainer.encode(transformResources, forKey: .transformResources)
        }
    }
}
