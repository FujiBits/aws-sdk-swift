// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateModelExplainabilityJobDefinitionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateModelExplainabilityJobDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateModelExplainabilityJobDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateModelExplainabilityJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateModelExplainabilityJobDefinitionInput>
    public typealias MOutput = OperationOutput<CreateModelExplainabilityJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateModelExplainabilityJobDefinitionOutputError>
}

public struct CreateModelExplainabilityJobDefinitionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateModelExplainabilityJobDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateModelExplainabilityJobDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateModelExplainabilityJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateModelExplainabilityJobDefinitionInput>
    public typealias MOutput = OperationOutput<CreateModelExplainabilityJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateModelExplainabilityJobDefinitionOutputError>
}

public struct CreateModelExplainabilityJobDefinitionInputBodyMiddleware: Middleware {
    public let id: String = "CreateModelExplainabilityJobDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateModelExplainabilityJobDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateModelExplainabilityJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateModelExplainabilityJobDefinitionInput>
    public typealias MOutput = OperationOutput<CreateModelExplainabilityJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateModelExplainabilityJobDefinitionOutputError>
}

extension CreateModelExplainabilityJobDefinitionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelExplainabilityAppSpecification = "ModelExplainabilityAppSpecification"
        case modelExplainabilityBaselineConfig = "ModelExplainabilityBaselineConfig"
        case modelExplainabilityJobInput = "ModelExplainabilityJobInput"
        case modelExplainabilityJobOutputConfig = "ModelExplainabilityJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let jobResources = jobResources {
            try encodeContainer.encode(jobResources, forKey: .jobResources)
        }
        if let modelExplainabilityAppSpecification = modelExplainabilityAppSpecification {
            try encodeContainer.encode(modelExplainabilityAppSpecification, forKey: .modelExplainabilityAppSpecification)
        }
        if let modelExplainabilityBaselineConfig = modelExplainabilityBaselineConfig {
            try encodeContainer.encode(modelExplainabilityBaselineConfig, forKey: .modelExplainabilityBaselineConfig)
        }
        if let modelExplainabilityJobInput = modelExplainabilityJobInput {
            try encodeContainer.encode(modelExplainabilityJobInput, forKey: .modelExplainabilityJobInput)
        }
        if let modelExplainabilityJobOutputConfig = modelExplainabilityJobOutputConfig {
            try encodeContainer.encode(modelExplainabilityJobOutputConfig, forKey: .modelExplainabilityJobOutputConfig)
        }
        if let networkConfig = networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
