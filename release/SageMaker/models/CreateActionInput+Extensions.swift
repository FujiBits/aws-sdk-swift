// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateActionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateActionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateActionInput>
    public typealias MOutput = OperationOutput<CreateActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateActionOutputError>
}

public struct CreateActionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateActionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateActionInput>
    public typealias MOutput = OperationOutput<CreateActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateActionOutputError>
}

public struct CreateActionInputBodyMiddleware: Middleware {
    public let id: String = "CreateActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateActionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateActionInput>
    public typealias MOutput = OperationOutput<CreateActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateActionOutputError>
}

extension CreateActionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionName = "ActionName"
        case actionType = "ActionType"
        case description = "Description"
        case metadataProperties = "MetadataProperties"
        case properties = "Properties"
        case source = "Source"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let actionType = actionType {
            try encodeContainer.encode(actionType, forKey: .actionType)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .properties)
            for (dictKey0, lineageentityparameters0) in properties {
                try propertiesContainer.encode(lineageentityparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
