// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateLabelingJobInputHeadersMiddleware: Middleware {
    public let id: String = "CreateLabelingJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLabelingJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLabelingJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLabelingJobInput>
    public typealias MOutput = OperationOutput<CreateLabelingJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLabelingJobOutputError>
}

public struct CreateLabelingJobInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateLabelingJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLabelingJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLabelingJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLabelingJobInput>
    public typealias MOutput = OperationOutput<CreateLabelingJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLabelingJobOutputError>
}

public struct CreateLabelingJobInputBodyMiddleware: Middleware {
    public let id: String = "CreateLabelingJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLabelingJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLabelingJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLabelingJobInput>
    public typealias MOutput = OperationOutput<CreateLabelingJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLabelingJobOutputError>
}

extension CreateLabelingJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case humanTaskConfig = "HumanTaskConfig"
        case inputConfig = "InputConfig"
        case labelAttributeName = "LabelAttributeName"
        case labelCategoryConfigS3Uri = "LabelCategoryConfigS3Uri"
        case labelingJobAlgorithmsConfig = "LabelingJobAlgorithmsConfig"
        case labelingJobName = "LabelingJobName"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingConditions = "StoppingConditions"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanTaskConfig = humanTaskConfig {
            try encodeContainer.encode(humanTaskConfig, forKey: .humanTaskConfig)
        }
        if let inputConfig = inputConfig {
            try encodeContainer.encode(inputConfig, forKey: .inputConfig)
        }
        if let labelAttributeName = labelAttributeName {
            try encodeContainer.encode(labelAttributeName, forKey: .labelAttributeName)
        }
        if let labelCategoryConfigS3Uri = labelCategoryConfigS3Uri {
            try encodeContainer.encode(labelCategoryConfigS3Uri, forKey: .labelCategoryConfigS3Uri)
        }
        if let labelingJobAlgorithmsConfig = labelingJobAlgorithmsConfig {
            try encodeContainer.encode(labelingJobAlgorithmsConfig, forKey: .labelingJobAlgorithmsConfig)
        }
        if let labelingJobName = labelingJobName {
            try encodeContainer.encode(labelingJobName, forKey: .labelingJobName)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingConditions = stoppingConditions {
            try encodeContainer.encode(stoppingConditions, forKey: .stoppingConditions)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
