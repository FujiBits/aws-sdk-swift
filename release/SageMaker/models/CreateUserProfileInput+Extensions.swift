// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateUserProfileInputHeadersMiddleware: Middleware {
    public let id: String = "CreateUserProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateUserProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateUserProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateUserProfileInput>
    public typealias MOutput = OperationOutput<CreateUserProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateUserProfileOutputError>
}

public struct CreateUserProfileInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateUserProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateUserProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateUserProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateUserProfileInput>
    public typealias MOutput = OperationOutput<CreateUserProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateUserProfileOutputError>
}

public struct CreateUserProfileInputBodyMiddleware: Middleware {
    public let id: String = "CreateUserProfileInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateUserProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateUserProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateUserProfileInput>
    public typealias MOutput = OperationOutput<CreateUserProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateUserProfileOutputError>
}

extension CreateUserProfileInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domainId = "DomainId"
        case singleSignOnUserIdentifier = "SingleSignOnUserIdentifier"
        case singleSignOnUserValue = "SingleSignOnUserValue"
        case tags = "Tags"
        case userProfileName = "UserProfileName"
        case userSettings = "UserSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let singleSignOnUserIdentifier = singleSignOnUserIdentifier {
            try encodeContainer.encode(singleSignOnUserIdentifier, forKey: .singleSignOnUserIdentifier)
        }
        if let singleSignOnUserValue = singleSignOnUserValue {
            try encodeContainer.encode(singleSignOnUserValue, forKey: .singleSignOnUserValue)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
        if let userSettings = userSettings {
            try encodeContainer.encode(userSettings, forKey: .userSettings)
        }
    }
}
