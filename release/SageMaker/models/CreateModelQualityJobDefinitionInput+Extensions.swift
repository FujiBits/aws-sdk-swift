// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateModelQualityJobDefinitionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateModelQualityJobDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateModelQualityJobDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateModelQualityJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateModelQualityJobDefinitionInput>
    public typealias MOutput = OperationOutput<CreateModelQualityJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateModelQualityJobDefinitionOutputError>
}

public struct CreateModelQualityJobDefinitionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateModelQualityJobDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateModelQualityJobDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateModelQualityJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateModelQualityJobDefinitionInput>
    public typealias MOutput = OperationOutput<CreateModelQualityJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateModelQualityJobDefinitionOutputError>
}

public struct CreateModelQualityJobDefinitionInputBodyMiddleware: Middleware {
    public let id: String = "CreateModelQualityJobDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateModelQualityJobDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateModelQualityJobDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateModelQualityJobDefinitionInput>
    public typealias MOutput = OperationOutput<CreateModelQualityJobDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateModelQualityJobDefinitionOutputError>
}

extension CreateModelQualityJobDefinitionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelQualityAppSpecification = "ModelQualityAppSpecification"
        case modelQualityBaselineConfig = "ModelQualityBaselineConfig"
        case modelQualityJobInput = "ModelQualityJobInput"
        case modelQualityJobOutputConfig = "ModelQualityJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let jobResources = jobResources {
            try encodeContainer.encode(jobResources, forKey: .jobResources)
        }
        if let modelQualityAppSpecification = modelQualityAppSpecification {
            try encodeContainer.encode(modelQualityAppSpecification, forKey: .modelQualityAppSpecification)
        }
        if let modelQualityBaselineConfig = modelQualityBaselineConfig {
            try encodeContainer.encode(modelQualityBaselineConfig, forKey: .modelQualityBaselineConfig)
        }
        if let modelQualityJobInput = modelQualityJobInput {
            try encodeContainer.encode(modelQualityJobInput, forKey: .modelQualityJobInput)
        }
        if let modelQualityJobOutputConfig = modelQualityJobOutputConfig {
            try encodeContainer.encode(modelQualityJobOutputConfig, forKey: .modelQualityJobOutputConfig)
        }
        if let networkConfig = networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
