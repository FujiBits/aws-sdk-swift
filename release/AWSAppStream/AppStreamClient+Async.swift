// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AppStreamClient {
    /// Associates the specified fleet with the specified stack.
    func associateFleet(input: AssociateFleetInput) async throws -> AssociateFleetOutputResponse
    {
        typealias associateFleetContinuation = CheckedContinuation<AssociateFleetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateFleetContinuation) in
            associateFleet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates the specified users with the specified stacks. Users in a user pool cannot be assigned to stacks with fleets that are joined to an Active Directory domain.
    func batchAssociateUserStack(input: BatchAssociateUserStackInput) async throws -> BatchAssociateUserStackOutputResponse
    {
        typealias batchAssociateUserStackContinuation = CheckedContinuation<BatchAssociateUserStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchAssociateUserStackContinuation) in
            batchAssociateUserStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the specified users from the specified stacks.
    func batchDisassociateUserStack(input: BatchDisassociateUserStackInput) async throws -> BatchDisassociateUserStackOutputResponse
    {
        typealias batchDisassociateUserStackContinuation = CheckedContinuation<BatchDisassociateUserStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDisassociateUserStackContinuation) in
            batchDisassociateUserStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Copies the image within the same region or to a new region within the same AWS account. Note that any tags you added to the image will not be copied.
    func copyImage(input: CopyImageInput) async throws -> CopyImageOutputResponse
    {
        typealias copyImageContinuation = CheckedContinuation<CopyImageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: copyImageContinuation) in
            copyImage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
    func createDirectoryConfig(input: CreateDirectoryConfigInput) async throws -> CreateDirectoryConfigOutputResponse
    {
        typealias createDirectoryConfigContinuation = CheckedContinuation<CreateDirectoryConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDirectoryConfigContinuation) in
            createDirectoryConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a fleet. A fleet consists of streaming instances that run a specified image.
    func createFleet(input: CreateFleetInput) async throws -> CreateFleetOutputResponse
    {
        typealias createFleetContinuation = CheckedContinuation<CreateFleetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFleetContinuation) in
            createFleet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an image builder. An image builder is a virtual machine that is used to create an image. The initial state of the builder is PENDING. When it is ready, the state is RUNNING.
    func createImageBuilder(input: CreateImageBuilderInput) async throws -> CreateImageBuilderOutputResponse
    {
        typealias createImageBuilderContinuation = CheckedContinuation<CreateImageBuilderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createImageBuilderContinuation) in
            createImageBuilder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a URL to start an image builder streaming session.
    func createImageBuilderStreamingURL(input: CreateImageBuilderStreamingURLInput) async throws -> CreateImageBuilderStreamingURLOutputResponse
    {
        typealias createImageBuilderStreamingURLContinuation = CheckedContinuation<CreateImageBuilderStreamingURLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createImageBuilderStreamingURLContinuation) in
            createImageBuilderStreamingURL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a stack to start streaming applications to users. A stack consists of an associated fleet, user access policies, and storage configurations.
    func createStack(input: CreateStackInput) async throws -> CreateStackOutputResponse
    {
        typealias createStackContinuation = CheckedContinuation<CreateStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStackContinuation) in
            createStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a temporary URL to start an AppStream 2.0 streaming session for the specified user. A streaming URL enables application streaming to be tested without user setup.
    func createStreamingURL(input: CreateStreamingURLInput) async throws -> CreateStreamingURLOutputResponse
    {
        typealias createStreamingURLContinuation = CheckedContinuation<CreateStreamingURLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStreamingURLContinuation) in
            createStreamingURL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new image with the latest Windows operating system updates, driver updates, and AppStream 2.0 agent software. For more information, see the "Update an Image by Using Managed AppStream 2.0 Image Updates" section in [Administer Your AppStream 2.0 Images](https://docs.aws.amazon.com/appstream2/latest/developerguide/administer-images.html), in the Amazon AppStream 2.0 Administration Guide.
    func createUpdatedImage(input: CreateUpdatedImageInput) async throws -> CreateUpdatedImageOutputResponse
    {
        typealias createUpdatedImageContinuation = CheckedContinuation<CreateUpdatedImageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUpdatedImageContinuation) in
            createUpdatedImage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a usage report subscription. Usage reports are generated daily.
    func createUsageReportSubscription(input: CreateUsageReportSubscriptionInput) async throws -> CreateUsageReportSubscriptionOutputResponse
    {
        typealias createUsageReportSubscriptionContinuation = CheckedContinuation<CreateUsageReportSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUsageReportSubscriptionContinuation) in
            createUsageReportSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new user in the user pool.
    func createUser(input: CreateUserInput) async throws -> CreateUserOutputResponse
    {
        typealias createUserContinuation = CheckedContinuation<CreateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserContinuation) in
            createUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified Directory Config object from AppStream 2.0. This object includes the information required to join streaming instances to an Active Directory domain.
    func deleteDirectoryConfig(input: DeleteDirectoryConfigInput) async throws -> DeleteDirectoryConfigOutputResponse
    {
        typealias deleteDirectoryConfigContinuation = CheckedContinuation<DeleteDirectoryConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDirectoryConfigContinuation) in
            deleteDirectoryConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified fleet.
    func deleteFleet(input: DeleteFleetInput) async throws -> DeleteFleetOutputResponse
    {
        typealias deleteFleetContinuation = CheckedContinuation<DeleteFleetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFleetContinuation) in
            deleteFleet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified image. You cannot delete an image when it is in use. After you delete an image, you cannot provision new capacity using the image.
    func deleteImage(input: DeleteImageInput) async throws -> DeleteImageOutputResponse
    {
        typealias deleteImageContinuation = CheckedContinuation<DeleteImageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteImageContinuation) in
            deleteImage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified image builder and releases the capacity.
    func deleteImageBuilder(input: DeleteImageBuilderInput) async throws -> DeleteImageBuilderOutputResponse
    {
        typealias deleteImageBuilderContinuation = CheckedContinuation<DeleteImageBuilderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteImageBuilderContinuation) in
            deleteImageBuilder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes permissions for the specified private image. After you delete permissions for an image, AWS accounts to which you previously granted these permissions can no longer use the image.
    func deleteImagePermissions(input: DeleteImagePermissionsInput) async throws -> DeleteImagePermissionsOutputResponse
    {
        typealias deleteImagePermissionsContinuation = CheckedContinuation<DeleteImagePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteImagePermissionsContinuation) in
            deleteImagePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified stack. After the stack is deleted, the application streaming environment provided by the stack is no longer available to users. Also, any reservations made for application streaming sessions for the stack are released.
    func deleteStack(input: DeleteStackInput) async throws -> DeleteStackOutputResponse
    {
        typealias deleteStackContinuation = CheckedContinuation<DeleteStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteStackContinuation) in
            deleteStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables usage report generation.
    func deleteUsageReportSubscription(input: DeleteUsageReportSubscriptionInput) async throws -> DeleteUsageReportSubscriptionOutputResponse
    {
        typealias deleteUsageReportSubscriptionContinuation = CheckedContinuation<DeleteUsageReportSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUsageReportSubscriptionContinuation) in
            deleteUsageReportSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a user from the user pool.
    func deleteUser(input: DeleteUserInput) async throws -> DeleteUserOutputResponse
    {
        typealias deleteUserContinuation = CheckedContinuation<DeleteUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserContinuation) in
            deleteUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list that describes one or more specified Directory Config objects for AppStream 2.0, if the names for these objects are provided. Otherwise, all Directory Config objects in the account are described. These objects include the configuration information required to join fleets and image builders to Microsoft Active Directory domains. Although the response syntax in this topic includes the account password, this password is not returned in the actual response.
    func describeDirectoryConfigs(input: DescribeDirectoryConfigsInput) async throws -> DescribeDirectoryConfigsOutputResponse
    {
        typealias describeDirectoryConfigsContinuation = CheckedContinuation<DescribeDirectoryConfigsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDirectoryConfigsContinuation) in
            describeDirectoryConfigs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list that describes one or more specified fleets, if the fleet names are provided. Otherwise, all fleets in the account are described.
    func describeFleets(input: DescribeFleetsInput) async throws -> DescribeFleetsOutputResponse
    {
        typealias describeFleetsContinuation = CheckedContinuation<DescribeFleetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeFleetsContinuation) in
            describeFleets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list that describes one or more specified image builders, if the image builder names are provided. Otherwise, all image builders in the account are described.
    func describeImageBuilders(input: DescribeImageBuildersInput) async throws -> DescribeImageBuildersOutputResponse
    {
        typealias describeImageBuildersContinuation = CheckedContinuation<DescribeImageBuildersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeImageBuildersContinuation) in
            describeImageBuilders(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list that describes the permissions for shared AWS account IDs on a private image that you own.
    func describeImagePermissions(input: DescribeImagePermissionsInput) async throws -> DescribeImagePermissionsOutputResponse
    {
        typealias describeImagePermissionsContinuation = CheckedContinuation<DescribeImagePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeImagePermissionsContinuation) in
            describeImagePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list that describes one or more specified images, if the image names or image ARNs are provided. Otherwise, all images in the account are described.
    func describeImages(input: DescribeImagesInput) async throws -> DescribeImagesOutputResponse
    {
        typealias describeImagesContinuation = CheckedContinuation<DescribeImagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeImagesContinuation) in
            describeImages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list that describes the streaming sessions for a specified stack and fleet. If a UserId is provided for the stack and fleet, only streaming sessions for that user are described. If an authentication type is not provided, the default is to authenticate users using a streaming URL.
    func describeSessions(input: DescribeSessionsInput) async throws -> DescribeSessionsOutputResponse
    {
        typealias describeSessionsContinuation = CheckedContinuation<DescribeSessionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSessionsContinuation) in
            describeSessions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list that describes one or more specified stacks, if the stack names are provided. Otherwise, all stacks in the account are described.
    func describeStacks(input: DescribeStacksInput) async throws -> DescribeStacksOutputResponse
    {
        typealias describeStacksContinuation = CheckedContinuation<DescribeStacksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStacksContinuation) in
            describeStacks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list that describes one or more usage report subscriptions.
    func describeUsageReportSubscriptions(input: DescribeUsageReportSubscriptionsInput) async throws -> DescribeUsageReportSubscriptionsOutputResponse
    {
        typealias describeUsageReportSubscriptionsContinuation = CheckedContinuation<DescribeUsageReportSubscriptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUsageReportSubscriptionsContinuation) in
            describeUsageReportSubscriptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list that describes the UserStackAssociation objects. You must specify either or both of the following:
    ///
    /// * The stack name
    ///
    /// * The user name (email address of the user associated with the stack) and the authentication type for the user
    func describeUserStackAssociations(input: DescribeUserStackAssociationsInput) async throws -> DescribeUserStackAssociationsOutputResponse
    {
        typealias describeUserStackAssociationsContinuation = CheckedContinuation<DescribeUserStackAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserStackAssociationsContinuation) in
            describeUserStackAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list that describes one or more specified users in the user pool.
    func describeUsers(input: DescribeUsersInput) async throws -> DescribeUsersOutputResponse
    {
        typealias describeUsersContinuation = CheckedContinuation<DescribeUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUsersContinuation) in
            describeUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables the specified user in the user pool. Users can't sign in to AppStream 2.0 until they are re-enabled. This action does not delete the user.
    func disableUser(input: DisableUserInput) async throws -> DisableUserOutputResponse
    {
        typealias disableUserContinuation = CheckedContinuation<DisableUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableUserContinuation) in
            disableUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the specified fleet from the specified stack.
    func disassociateFleet(input: DisassociateFleetInput) async throws -> DisassociateFleetOutputResponse
    {
        typealias disassociateFleetContinuation = CheckedContinuation<DisassociateFleetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateFleetContinuation) in
            disassociateFleet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables a user in the user pool. After being enabled, users can sign in to AppStream 2.0 and open applications from the stacks to which they are assigned.
    func enableUser(input: EnableUserInput) async throws -> EnableUserOutputResponse
    {
        typealias enableUserContinuation = CheckedContinuation<EnableUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableUserContinuation) in
            enableUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Immediately stops the specified streaming session.
    func expireSession(input: ExpireSessionInput) async throws -> ExpireSessionOutputResponse
    {
        typealias expireSessionContinuation = CheckedContinuation<ExpireSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: expireSessionContinuation) in
            expireSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the name of the fleet that is associated with the specified stack.
    func listAssociatedFleets(input: ListAssociatedFleetsInput) async throws -> ListAssociatedFleetsOutputResponse
    {
        typealias listAssociatedFleetsContinuation = CheckedContinuation<ListAssociatedFleetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssociatedFleetsContinuation) in
            listAssociatedFleets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the name of the stack with which the specified fleet is associated.
    func listAssociatedStacks(input: ListAssociatedStacksInput) async throws -> ListAssociatedStacksOutputResponse
    {
        typealias listAssociatedStacksContinuation = CheckedContinuation<ListAssociatedStacksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssociatedStacksContinuation) in
            listAssociatedStacks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of all tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks. For more information about tags, see [Tagging Your Resources](https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html) in the Amazon AppStream 2.0 Administration Guide.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts the specified fleet.
    func startFleet(input: StartFleetInput) async throws -> StartFleetOutputResponse
    {
        typealias startFleetContinuation = CheckedContinuation<StartFleetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startFleetContinuation) in
            startFleet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts the specified image builder.
    func startImageBuilder(input: StartImageBuilderInput) async throws -> StartImageBuilderOutputResponse
    {
        typealias startImageBuilderContinuation = CheckedContinuation<StartImageBuilderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startImageBuilderContinuation) in
            startImageBuilder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops the specified fleet.
    func stopFleet(input: StopFleetInput) async throws -> StopFleetOutputResponse
    {
        typealias stopFleetContinuation = CheckedContinuation<StopFleetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopFleetContinuation) in
            stopFleet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops the specified image builder.
    func stopImageBuilder(input: StopImageBuilderInput) async throws -> StopImageBuilderOutputResponse
    {
        typealias stopImageBuilderContinuation = CheckedContinuation<StopImageBuilderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopImageBuilderContinuation) in
            stopImageBuilder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or overwrites one or more tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks. Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value. To list the current tags for your resources, use [ListTagsForResource]. To disassociate tags from your resources, use [UntagResource]. For more information about tags, see [Tagging Your Resources](https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html) in the Amazon AppStream 2.0 Administration Guide.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates one or more specified tags from the specified AppStream 2.0 resource. To list the current tags for your resources, use [ListTagsForResource]. For more information about tags, see [Tagging Your Resources](https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html) in the Amazon AppStream 2.0 Administration Guide.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
    func updateDirectoryConfig(input: UpdateDirectoryConfigInput) async throws -> UpdateDirectoryConfigOutputResponse
    {
        typealias updateDirectoryConfigContinuation = CheckedContinuation<UpdateDirectoryConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDirectoryConfigContinuation) in
            updateDirectoryConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified fleet. If the fleet is in the STOPPED state, you can update any attribute except the fleet name. If the fleet is in the RUNNING state, you can update the DisplayName, ComputeCapacity, ImageARN, ImageName, IdleDisconnectTimeoutInSeconds, and DisconnectTimeoutInSeconds attributes. If the fleet is in the STARTING or STOPPING state, you can't update it.
    func updateFleet(input: UpdateFleetInput) async throws -> UpdateFleetOutputResponse
    {
        typealias updateFleetContinuation = CheckedContinuation<UpdateFleetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFleetContinuation) in
            updateFleet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or updates permissions for the specified private image.
    func updateImagePermissions(input: UpdateImagePermissionsInput) async throws -> UpdateImagePermissionsOutputResponse
    {
        typealias updateImagePermissionsContinuation = CheckedContinuation<UpdateImagePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateImagePermissionsContinuation) in
            updateImagePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified fields for the specified stack.
    func updateStack(input: UpdateStackInput) async throws -> UpdateStackOutputResponse
    {
        typealias updateStackContinuation = CheckedContinuation<UpdateStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateStackContinuation) in
            updateStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
