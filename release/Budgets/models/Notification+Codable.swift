// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Notification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case notificationState = "NotificationState"
        case notificationType = "NotificationType"
        case threshold = "Threshold"
        case thresholdType = "ThresholdType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let notificationState = notificationState {
            try encodeContainer.encode(notificationState.rawValue, forKey: .notificationState)
        }
        if let notificationType = notificationType {
            try encodeContainer.encode(notificationType.rawValue, forKey: .notificationType)
        }
        if threshold != 0.0 {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let thresholdType = thresholdType {
            try encodeContainer.encode(thresholdType.rawValue, forKey: .thresholdType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notificationTypeDecoded = try containerValues.decodeIfPresent(NotificationType.self, forKey: .notificationType)
        notificationType = notificationTypeDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let thresholdDecoded = try containerValues.decode(Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let thresholdTypeDecoded = try containerValues.decodeIfPresent(ThresholdType.self, forKey: .thresholdType)
        thresholdType = thresholdTypeDecoded
        let notificationStateDecoded = try containerValues.decodeIfPresent(NotificationState.self, forKey: .notificationState)
        notificationState = notificationStateDecoded
    }
}
