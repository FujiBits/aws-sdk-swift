// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNotificationInputBody: Equatable {
    public let accountId: String?
    public let budgetName: String?
    public let notification: Notification?
    public let subscribers: [Subscriber]?
}

extension CreateNotificationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case budgetName = "BudgetName"
        case notification = "Notification"
        case subscribers = "Subscribers"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let budgetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .budgetName)
        budgetName = budgetNameDecoded
        let notificationDecoded = try containerValues.decodeIfPresent(Notification.self, forKey: .notification)
        notification = notificationDecoded
        let subscribersContainer = try containerValues.decodeIfPresent([Subscriber?].self, forKey: .subscribers)
        var subscribersDecoded0:[Subscriber]? = nil
        if let subscribersContainer = subscribersContainer {
            subscribersDecoded0 = [Subscriber]()
            for structure0 in subscribersContainer {
                if let structure0 = structure0 {
                    subscribersDecoded0?.append(structure0)
                }
            }
        }
        subscribers = subscribersDecoded0
    }
}
