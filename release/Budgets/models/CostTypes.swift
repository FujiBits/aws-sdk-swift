// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The types of cost that are included in a <code>COST</code> budget, such as tax and subscriptions.</p>
/// 		       <p>
///             <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, and <code>SAVINGS_PLANS_COVERAGE</code> budgets do not have <code>CostTypes</code>.</p>
public struct CostTypes: Equatable {
    /// <p>Specifies whether a budget includes credits.</p>
    /// 		       <p>The default value is <code>true</code>.</p>
    public let includeCredit: Bool?
    /// <p>Specifies whether a budget includes discounts.</p>
    /// 		       <p>The default value is <code>true</code>.</p>
    public let includeDiscount: Bool?
    /// <p>Specifies whether a budget includes non-RI subscription costs.</p>
    /// 		       <p>The default value is <code>true</code>.</p>
    public let includeOtherSubscription: Bool?
    /// <p>Specifies whether a budget includes recurring fees such as monthly RI fees.</p>
    /// 		       <p>The default value is <code>true</code>.</p>
    public let includeRecurring: Bool?
    /// <p>Specifies whether a budget includes refunds.</p>
    /// 		       <p>The default value is <code>true</code>.</p>
    public let includeRefund: Bool?
    /// <p>Specifies whether a budget includes subscriptions.</p>
    /// 		       <p>The default value is <code>true</code>.</p>
    public let includeSubscription: Bool?
    /// <p>Specifies whether a budget includes support subscription fees.</p>
    /// 		       <p>The default value is <code>true</code>.</p>
    public let includeSupport: Bool?
    /// <p>Specifies whether a budget includes taxes.</p>
    /// 		       <p>The default value is <code>true</code>.</p>
    public let includeTax: Bool?
    /// <p>Specifies whether a budget includes upfront RI costs.</p>
    /// 		       <p>The default value is <code>true</code>.</p>
    public let includeUpfront: Bool?
    /// <p>Specifies whether a budget uses the amortized rate.</p>
    /// 		       <p>The default value is <code>false</code>.</p>
    public let useAmortized: Bool?
    /// <p>Specifies whether a budget uses a blended rate.</p>
    /// 		       <p>The default value is <code>false</code>.</p>
    public let useBlended: Bool?

    public init (
        includeCredit: Bool? = nil,
        includeDiscount: Bool? = nil,
        includeOtherSubscription: Bool? = nil,
        includeRecurring: Bool? = nil,
        includeRefund: Bool? = nil,
        includeSubscription: Bool? = nil,
        includeSupport: Bool? = nil,
        includeTax: Bool? = nil,
        includeUpfront: Bool? = nil,
        useAmortized: Bool? = nil,
        useBlended: Bool? = nil
    )
    {
        self.includeCredit = includeCredit
        self.includeDiscount = includeDiscount
        self.includeOtherSubscription = includeOtherSubscription
        self.includeRecurring = includeRecurring
        self.includeRefund = includeRefund
        self.includeSubscription = includeSubscription
        self.includeSupport = includeSupport
        self.includeTax = includeTax
        self.includeUpfront = includeUpfront
        self.useAmortized = useAmortized
        self.useBlended = useBlended
    }
}

extension CostTypes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CostTypes(includeCredit: \(String(describing: includeCredit)), includeDiscount: \(String(describing: includeDiscount)), includeOtherSubscription: \(String(describing: includeOtherSubscription)), includeRecurring: \(String(describing: includeRecurring)), includeRefund: \(String(describing: includeRefund)), includeSubscription: \(String(describing: includeSubscription)), includeSupport: \(String(describing: includeSupport)), includeTax: \(String(describing: includeTax)), includeUpfront: \(String(describing: includeUpfront)), useAmortized: \(String(describing: useAmortized)), useBlended: \(String(describing: useBlended)))"}
}
