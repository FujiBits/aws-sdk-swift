// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmActionDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionSubType = "ActionSubType"
        case instanceIds = "InstanceIds"
        case region = "Region"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionSubType = actionSubType {
            try encodeContainer.encode(actionSubType.rawValue, forKey: .actionSubType)
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceIds)
            for instanceids0 in instanceIds {
                try instanceIdsContainer.encode(instanceids0)
            }
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionSubTypeDecoded = try containerValues.decodeIfPresent(ActionSubType.self, forKey: .actionSubType)
        actionSubType = actionSubTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let instanceIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instanceIds)
        var instanceIdsDecoded0:[String]? = nil
        if let instanceIdsContainer = instanceIdsContainer {
            instanceIdsDecoded0 = [String]()
            for string0 in instanceIdsContainer {
                if let string0 = string0 {
                    instanceIdsDecoded0?.append(string0)
                }
            }
        }
        instanceIds = instanceIdsDecoded0
    }
}
