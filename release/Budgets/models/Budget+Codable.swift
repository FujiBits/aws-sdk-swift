// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Budget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case budgetLimit = "BudgetLimit"
        case budgetName = "BudgetName"
        case budgetType = "BudgetType"
        case calculatedSpend = "CalculatedSpend"
        case costFilters = "CostFilters"
        case costTypes = "CostTypes"
        case lastUpdatedTime = "LastUpdatedTime"
        case plannedBudgetLimits = "PlannedBudgetLimits"
        case timePeriod = "TimePeriod"
        case timeUnit = "TimeUnit"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let budgetLimit = budgetLimit {
            try encodeContainer.encode(budgetLimit, forKey: .budgetLimit)
        }
        if let budgetName = budgetName {
            try encodeContainer.encode(budgetName, forKey: .budgetName)
        }
        if let budgetType = budgetType {
            try encodeContainer.encode(budgetType.rawValue, forKey: .budgetType)
        }
        if let calculatedSpend = calculatedSpend {
            try encodeContainer.encode(calculatedSpend, forKey: .calculatedSpend)
        }
        if let costFilters = costFilters {
            var costFiltersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .costFilters)
            for (dictKey0, costfilters0) in costFilters {
                try costFiltersContainer.encode(costfilters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let costTypes = costTypes {
            try encodeContainer.encode(costTypes, forKey: .costTypes)
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let plannedBudgetLimits = plannedBudgetLimits {
            var plannedBudgetLimitsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .plannedBudgetLimits)
            for (dictKey0, plannedbudgetlimits0) in plannedBudgetLimits {
                try plannedBudgetLimitsContainer.encode(plannedbudgetlimits0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let timePeriod = timePeriod {
            try encodeContainer.encode(timePeriod, forKey: .timePeriod)
        }
        if let timeUnit = timeUnit {
            try encodeContainer.encode(timeUnit.rawValue, forKey: .timeUnit)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let budgetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .budgetName)
        budgetName = budgetNameDecoded
        let budgetLimitDecoded = try containerValues.decodeIfPresent(Spend.self, forKey: .budgetLimit)
        budgetLimit = budgetLimitDecoded
        let plannedBudgetLimitsContainer = try containerValues.decodeIfPresent([String: Spend?].self, forKey: .plannedBudgetLimits)
        var plannedBudgetLimitsDecoded0: [String:Spend]? = nil
        if let plannedBudgetLimitsContainer = plannedBudgetLimitsContainer {
            plannedBudgetLimitsDecoded0 = [String:Spend]()
            for (key0, spend0) in plannedBudgetLimitsContainer {
                if let spend0 = spend0 {
                    plannedBudgetLimitsDecoded0?[key0] = spend0
                }
            }
        }
        plannedBudgetLimits = plannedBudgetLimitsDecoded0
        let costFiltersContainer = try containerValues.decodeIfPresent([String: [String?]?].self, forKey: .costFilters)
        var costFiltersDecoded0: [String:[String]]? = nil
        if let costFiltersContainer = costFiltersContainer {
            costFiltersDecoded0 = [String:[String]]()
            for (key0, dimensionvalues0) in costFiltersContainer {
                var dimensionvalues0Decoded0: [String]? = nil
                if let dimensionvalues0 = dimensionvalues0 {
                    dimensionvalues0Decoded0 = [String]()
                    for string1 in dimensionvalues0 {
                        if let string1 = string1 {
                            dimensionvalues0Decoded0?.append(string1)
                        }
                    }
                }
                costFiltersDecoded0?[key0] = dimensionvalues0Decoded0
            }
        }
        costFilters = costFiltersDecoded0
        let costTypesDecoded = try containerValues.decodeIfPresent(CostTypes.self, forKey: .costTypes)
        costTypes = costTypesDecoded
        let timeUnitDecoded = try containerValues.decodeIfPresent(TimeUnit.self, forKey: .timeUnit)
        timeUnit = timeUnitDecoded
        let timePeriodDecoded = try containerValues.decodeIfPresent(TimePeriod.self, forKey: .timePeriod)
        timePeriod = timePeriodDecoded
        let calculatedSpendDecoded = try containerValues.decodeIfPresent(CalculatedSpend.self, forKey: .calculatedSpend)
        calculatedSpend = calculatedSpendDecoded
        let budgetTypeDecoded = try containerValues.decodeIfPresent(BudgetType.self, forKey: .budgetType)
        budgetType = budgetTypeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}
