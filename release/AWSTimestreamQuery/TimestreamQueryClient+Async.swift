// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension TimestreamQueryClient {
    /// Cancels a query that has been issued. Cancellation is provided only if the query has not completed running before the cancellation request was issued. Because cancellation is an idempotent operation, subsequent cancellation requests will return a CancellationMessage, indicating that the query has already been canceled. See [code sample](https://docs.aws.amazon.com/Timestream/latest/developerguide/code-samples.cancel-query.html) for details.
    func cancelQuery(input: CancelQueryInput) async throws -> CancelQueryOutputResponse
    {
        typealias cancelQueryContinuation = CheckedContinuation<CancelQueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelQueryContinuation) in
            cancelQuery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a scheduled query that will be run on your behalf at the configured schedule. Timestream assumes the execution role provided as part of the ScheduledQueryExecutionRoleArn parameter to run the query. You can use the NotificationConfiguration parameter to configure notification for your scheduled query operations.
    func createScheduledQuery(input: CreateScheduledQueryInput) async throws -> CreateScheduledQueryOutputResponse
    {
        typealias createScheduledQueryContinuation = CheckedContinuation<CreateScheduledQueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createScheduledQueryContinuation) in
            createScheduledQuery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a given scheduled query. This is an irreversible operation.
    func deleteScheduledQuery(input: DeleteScheduledQueryInput) async throws -> DeleteScheduledQueryOutputResponse
    {
        typealias deleteScheduledQueryContinuation = CheckedContinuation<DeleteScheduledQueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteScheduledQueryContinuation) in
            deleteScheduledQuery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// DescribeEndpoints returns a list of available endpoints to make Timestream API calls against. This API is available through both Write and Query. Because the Timestream SDKs are designed to transparently work with the serviceâ€™s architecture, including the management and mapping of the service endpoints, it is not recommended that you use this API unless:
    ///
    /// * You are using [VPC endpoints (Amazon Web Services PrivateLink) with Timestream ](https://docs.aws.amazon.com/Timestream/latest/developerguide/VPCEndpoints)
    ///
    /// * Your application uses a programming language that does not yet have SDK support
    ///
    /// * You require better control over the client-side implementation
    ///
    ///
    /// For detailed information on how and when to use and implement DescribeEndpoints, see [The Endpoint Discovery Pattern](https://docs.aws.amazon.com/Timestream/latest/developerguide/Using.API.html#Using-API.endpoint-discovery).
    func describeEndpoints(input: DescribeEndpointsInput) async throws -> DescribeEndpointsOutputResponse
    {
        typealias describeEndpointsContinuation = CheckedContinuation<DescribeEndpointsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEndpointsContinuation) in
            describeEndpoints(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides detailed information about a scheduled query.
    func describeScheduledQuery(input: DescribeScheduledQueryInput) async throws -> DescribeScheduledQueryOutputResponse
    {
        typealias describeScheduledQueryContinuation = CheckedContinuation<DescribeScheduledQueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeScheduledQueryContinuation) in
            describeScheduledQuery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// You can use this API to run a scheduled query manually.
    func executeScheduledQuery(input: ExecuteScheduledQueryInput) async throws -> ExecuteScheduledQueryOutputResponse
    {
        typealias executeScheduledQueryContinuation = CheckedContinuation<ExecuteScheduledQueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: executeScheduledQueryContinuation) in
            executeScheduledQuery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of all scheduled queries in the caller's Amazon account and Region. ListScheduledQueries is eventually consistent.
    func listScheduledQueries(input: ListScheduledQueriesInput) async throws -> ListScheduledQueriesOutputResponse
    {
        typealias listScheduledQueriesContinuation = CheckedContinuation<ListScheduledQueriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listScheduledQueriesContinuation) in
            listScheduledQueries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all tags on a Timestream query resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// A synchronous operation that allows you to submit a query with parameters to be stored by Timestream for later running. Timestream only supports using this operation with the PrepareQueryRequest$ValidateOnly set to true.
    func prepareQuery(input: PrepareQueryInput) async throws -> PrepareQueryOutputResponse
    {
        typealias prepareQueryContinuation = CheckedContinuation<PrepareQueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: prepareQueryContinuation) in
            prepareQuery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Query is a synchronous operation that enables you to run a query against your Amazon Timestream data. Query will time out after 60 seconds. You must update the default timeout in the SDK to support a timeout of 60 seconds. See the [code sample](https://docs.aws.amazon.com/Timestream/latest/developerguide/code-samples.run-query.html) for details. Your query request will fail in the following cases:
    ///
    /// * If you submit a Query request with the same client token outside of the 5-minute idempotency window.
    ///
    /// * If you submit a Query request with the same client token, but change other parameters, within the 5-minute idempotency window.
    ///
    /// * If the size of the row (including the query metadata) exceeds 1 MB, then the query will fail with the following error message: Query aborted as max page response size has been exceeded by the output result row
    ///
    /// * If the IAM principal of the query initiator and the result reader are not the same and/or the query initiator and the result reader do not have the same query string in the query requests, the query will fail with an Invalid pagination token error.
    func query(input: QueryInput) async throws -> QueryOutputResponse
    {
        typealias queryContinuation = CheckedContinuation<QueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: queryContinuation) in
            query(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associate a set of tags with a Timestream resource. You can then activate these user-defined tags so that they appear on the Billing and Cost Management console for cost allocation tracking.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the association of tags from a Timestream query resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update a scheduled query.
    func updateScheduledQuery(input: UpdateScheduledQueryInput) async throws -> UpdateScheduledQueryOutputResponse
    {
        typealias updateScheduledQueryContinuation = CheckedContinuation<UpdateScheduledQueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateScheduledQueryContinuation) in
            updateScheduledQuery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
