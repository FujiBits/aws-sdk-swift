// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Systems Manager Incident Manager is an incident management console designed to help users
///          mitigate and recover from incidents affecting their Amazon Web Services-hosted applications.
///          An incident is any unplanned interruption or reduction in quality of services.
///          Incident Manager increases incident resolution by notifying responders of impact,
///          highlighting relevant troubleshooting data, and providing collaboration tools to get
///          services back up and running. To achieve the primary goal of reducing the
///          time-to-resolution of critical incidents, Incident Manager automates response plans
///          and enables responder team escalation.
public protocol SsmContactsClientProtocol {
    /// Used to acknowledge an engagement to a contact channel during an incident.
    func acceptPage(input: AcceptPageInput, completion: @escaping (ClientRuntime.SdkResult<AcceptPageOutputResponse, AcceptPageOutputError>) -> Void)
    /// Activates a contact's contact channel. Incident Manager can't engage a contact until the
    ///          contact channel has been activated.
    func activateContactChannel(input: ActivateContactChannelInput, completion: @escaping (ClientRuntime.SdkResult<ActivateContactChannelOutputResponse, ActivateContactChannelOutputError>) -> Void)
    /// Contacts are either the contacts that Incident Manager engages during an incident or the
    ///          escalation plans that Incident Manager uses to engage contacts in phases during an
    ///          incident.
    func createContact(input: CreateContactInput, completion: @escaping (ClientRuntime.SdkResult<CreateContactOutputResponse, CreateContactOutputError>) -> Void)
    /// A contact channel is the method that Incident Manager uses to engage your contact.
    func createContactChannel(input: CreateContactChannelInput, completion: @escaping (ClientRuntime.SdkResult<CreateContactChannelOutputResponse, CreateContactChannelOutputError>) -> Void)
    /// To no longer receive Incident Manager engagements to a contact channel, you can deactivate
    ///          the channel.
    func deactivateContactChannel(input: DeactivateContactChannelInput, completion: @escaping (ClientRuntime.SdkResult<DeactivateContactChannelOutputResponse, DeactivateContactChannelOutputError>) -> Void)
    /// To remove a contact from Incident Manager, you can delete the contact. Deleting a contact
    ///          removes them from all escalation plans and related response plans. Deleting an escalation
    ///          plan removes it from all related response plans. You will have to recreate the contact and
    ///          its contact channels before you can use it again.
    func deleteContact(input: DeleteContactInput, completion: @escaping (ClientRuntime.SdkResult<DeleteContactOutputResponse, DeleteContactOutputError>) -> Void)
    /// To no longer receive engagements on a contact channel, you can delete the channel from a
    ///          contact. Deleting the contact channel removes it from the contact's engagement plan. If you
    ///          delete the only contact channel for a contact, you won't be able to engage that contact
    ///          during an incident.
    func deleteContactChannel(input: DeleteContactChannelInput, completion: @escaping (ClientRuntime.SdkResult<DeleteContactChannelOutputResponse, DeleteContactChannelOutputError>) -> Void)
    /// Incident Manager uses engagements to engage contacts and escalation plans during an incident.
    ///          Use this command to describe the engagement that occurred during an incident.
    func describeEngagement(input: DescribeEngagementInput, completion: @escaping (ClientRuntime.SdkResult<DescribeEngagementOutputResponse, DescribeEngagementOutputError>) -> Void)
    /// Lists details of the engagement to a contact channel.
    func describePage(input: DescribePageInput, completion: @escaping (ClientRuntime.SdkResult<DescribePageOutputResponse, DescribePageOutputError>) -> Void)
    /// Retrieves information about the specified contact or escalation plan.
    func getContact(input: GetContactInput, completion: @escaping (ClientRuntime.SdkResult<GetContactOutputResponse, GetContactOutputError>) -> Void)
    /// List details about a specific contact channel.
    func getContactChannel(input: GetContactChannelInput, completion: @escaping (ClientRuntime.SdkResult<GetContactChannelOutputResponse, GetContactChannelOutputError>) -> Void)
    /// Retrieves the resource policies attached to the specified contact or escalation
    ///          plan.
    func getContactPolicy(input: GetContactPolicyInput, completion: @escaping (ClientRuntime.SdkResult<GetContactPolicyOutputResponse, GetContactPolicyOutputError>) -> Void)
    /// Lists all contact channels for the specified contact.
    func listContactChannels(input: ListContactChannelsInput, completion: @escaping (ClientRuntime.SdkResult<ListContactChannelsOutputResponse, ListContactChannelsOutputError>) -> Void)
    /// Lists all contacts and escalation plans in Incident Manager.
    func listContacts(input: ListContactsInput, completion: @escaping (ClientRuntime.SdkResult<ListContactsOutputResponse, ListContactsOutputError>) -> Void)
    /// Lists all engagements that have happened in an incident.
    func listEngagements(input: ListEngagementsInput, completion: @escaping (ClientRuntime.SdkResult<ListEngagementsOutputResponse, ListEngagementsOutputError>) -> Void)
    /// Lists all of the engagements to contact channels that have been acknowledged.
    func listPageReceipts(input: ListPageReceiptsInput, completion: @escaping (ClientRuntime.SdkResult<ListPageReceiptsOutputResponse, ListPageReceiptsOutputError>) -> Void)
    /// Lists the engagements to a contact's contact channels.
    func listPagesByContact(input: ListPagesByContactInput, completion: @escaping (ClientRuntime.SdkResult<ListPagesByContactOutputResponse, ListPagesByContactOutputError>) -> Void)
    /// Lists the engagements to contact channels that occurred by engaging a contact.
    func listPagesByEngagement(input: ListPagesByEngagementInput, completion: @escaping (ClientRuntime.SdkResult<ListPagesByEngagementOutputResponse, ListPagesByEngagementOutputError>) -> Void)
    /// Lists the tags of an escalation plan or contact.
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// Adds a resource to the specified contact or escalation plan.
    func putContactPolicy(input: PutContactPolicyInput, completion: @escaping (ClientRuntime.SdkResult<PutContactPolicyOutputResponse, PutContactPolicyOutputError>) -> Void)
    /// Sends an activation code to a contact channel. The contact can use this code to activate
    ///          the contact channel in the console or with the ActivateChannel operation.
    ///          Incident Manager can't engage a contact channel until it has been activated.
    func sendActivationCode(input: SendActivationCodeInput, completion: @escaping (ClientRuntime.SdkResult<SendActivationCodeOutputResponse, SendActivationCodeOutputError>) -> Void)
    /// Starts an engagement to a contact or escalation plan. The engagement engages each
    ///          contact specified in the incident.
    func startEngagement(input: StartEngagementInput, completion: @escaping (ClientRuntime.SdkResult<StartEngagementOutputResponse, StartEngagementOutputError>) -> Void)
    /// Stops an engagement before it finishes the final stage of the escalation plan or
    ///          engagement plan. Further contacts aren't engaged.
    func stopEngagement(input: StopEngagementInput, completion: @escaping (ClientRuntime.SdkResult<StopEngagementOutputResponse, StopEngagementOutputError>) -> Void)
    /// Tags a contact or escalation plan. You can tag only contacts and escalation plans in the
    ///          first region of your replication set.
    func tagResource(input: TagResourceInput, completion: @escaping (ClientRuntime.SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// Removes tags from the specified resource.
    func untagResource(input: UntagResourceInput, completion: @escaping (ClientRuntime.SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// Updates the contact or escalation plan specified.
    func updateContact(input: UpdateContactInput, completion: @escaping (ClientRuntime.SdkResult<UpdateContactOutputResponse, UpdateContactOutputError>) -> Void)
    /// Updates a contact's contact channel.
    func updateContactChannel(input: UpdateContactChannelInput, completion: @escaping (ClientRuntime.SdkResult<UpdateContactChannelOutputResponse, UpdateContactChannelOutputError>) -> Void)
}

public enum SsmContactsClientTypes {}
