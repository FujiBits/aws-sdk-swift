// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension SsmContactsClient {
    /// Used to acknowledge an engagement to a contact channel during an incident.
    func acceptPage(input: AcceptPageInput) async throws -> AcceptPageOutputResponse
    {
        typealias acceptPageContinuation = CheckedContinuation<AcceptPageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptPageContinuation) in
            acceptPage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Activates a contact's contact channel. Incident Manager can't engage a contact until the contact channel has been activated.
    func activateContactChannel(input: ActivateContactChannelInput) async throws -> ActivateContactChannelOutputResponse
    {
        typealias activateContactChannelContinuation = CheckedContinuation<ActivateContactChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: activateContactChannelContinuation) in
            activateContactChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Contacts are either the contacts that Incident Manager engages during an incident or the escalation plans that Incident Manager uses to engage contacts in phases during an incident.
    func createContact(input: CreateContactInput) async throws -> CreateContactOutputResponse
    {
        typealias createContactContinuation = CheckedContinuation<CreateContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createContactContinuation) in
            createContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// A contact channel is the method that Incident Manager uses to engage your contact.
    func createContactChannel(input: CreateContactChannelInput) async throws -> CreateContactChannelOutputResponse
    {
        typealias createContactChannelContinuation = CheckedContinuation<CreateContactChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createContactChannelContinuation) in
            createContactChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// To no longer receive Incident Manager engagements to a contact channel, you can deactivate the channel.
    func deactivateContactChannel(input: DeactivateContactChannelInput) async throws -> DeactivateContactChannelOutputResponse
    {
        typealias deactivateContactChannelContinuation = CheckedContinuation<DeactivateContactChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deactivateContactChannelContinuation) in
            deactivateContactChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// To remove a contact from Incident Manager, you can delete the contact. Deleting a contact removes them from all escalation plans and related response plans. Deleting an escalation plan removes it from all related response plans. You will have to recreate the contact and its contact channels before you can use it again.
    func deleteContact(input: DeleteContactInput) async throws -> DeleteContactOutputResponse
    {
        typealias deleteContactContinuation = CheckedContinuation<DeleteContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteContactContinuation) in
            deleteContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// To no longer receive engagements on a contact channel, you can delete the channel from a contact. Deleting the contact channel removes it from the contact's engagement plan. If you delete the only contact channel for a contact, you won't be able to engage that contact during an incident.
    func deleteContactChannel(input: DeleteContactChannelInput) async throws -> DeleteContactChannelOutputResponse
    {
        typealias deleteContactChannelContinuation = CheckedContinuation<DeleteContactChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteContactChannelContinuation) in
            deleteContactChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Incident Manager uses engagements to engage contacts and escalation plans during an incident. Use this command to describe the engagement that occurred during an incident.
    func describeEngagement(input: DescribeEngagementInput) async throws -> DescribeEngagementOutputResponse
    {
        typealias describeEngagementContinuation = CheckedContinuation<DescribeEngagementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEngagementContinuation) in
            describeEngagement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists details of the engagement to a contact channel.
    func describePage(input: DescribePageInput) async throws -> DescribePageOutputResponse
    {
        typealias describePageContinuation = CheckedContinuation<DescribePageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePageContinuation) in
            describePage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about the specified contact or escalation plan.
    func getContact(input: GetContactInput) async throws -> GetContactOutputResponse
    {
        typealias getContactContinuation = CheckedContinuation<GetContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContactContinuation) in
            getContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List details about a specific contact channel.
    func getContactChannel(input: GetContactChannelInput) async throws -> GetContactChannelOutputResponse
    {
        typealias getContactChannelContinuation = CheckedContinuation<GetContactChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContactChannelContinuation) in
            getContactChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the resource policies attached to the specified contact or escalation plan.
    func getContactPolicy(input: GetContactPolicyInput) async throws -> GetContactPolicyOutputResponse
    {
        typealias getContactPolicyContinuation = CheckedContinuation<GetContactPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContactPolicyContinuation) in
            getContactPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all contact channels for the specified contact.
    func listContactChannels(input: ListContactChannelsInput) async throws -> ListContactChannelsOutputResponse
    {
        typealias listContactChannelsContinuation = CheckedContinuation<ListContactChannelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listContactChannelsContinuation) in
            listContactChannels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all contacts and escalation plans in Incident Manager.
    func listContacts(input: ListContactsInput) async throws -> ListContactsOutputResponse
    {
        typealias listContactsContinuation = CheckedContinuation<ListContactsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listContactsContinuation) in
            listContacts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all engagements that have happened in an incident.
    func listEngagements(input: ListEngagementsInput) async throws -> ListEngagementsOutputResponse
    {
        typealias listEngagementsContinuation = CheckedContinuation<ListEngagementsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEngagementsContinuation) in
            listEngagements(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all of the engagements to contact channels that have been acknowledged.
    func listPageReceipts(input: ListPageReceiptsInput) async throws -> ListPageReceiptsOutputResponse
    {
        typealias listPageReceiptsContinuation = CheckedContinuation<ListPageReceiptsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPageReceiptsContinuation) in
            listPageReceipts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the engagements to a contact's contact channels.
    func listPagesByContact(input: ListPagesByContactInput) async throws -> ListPagesByContactOutputResponse
    {
        typealias listPagesByContactContinuation = CheckedContinuation<ListPagesByContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPagesByContactContinuation) in
            listPagesByContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the engagements to contact channels that occurred by engaging a contact.
    func listPagesByEngagement(input: ListPagesByEngagementInput) async throws -> ListPagesByEngagementOutputResponse
    {
        typealias listPagesByEngagementContinuation = CheckedContinuation<ListPagesByEngagementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPagesByEngagementContinuation) in
            listPagesByEngagement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags of an escalation plan or contact.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a resource to the specified contact or escalation plan.
    func putContactPolicy(input: PutContactPolicyInput) async throws -> PutContactPolicyOutputResponse
    {
        typealias putContactPolicyContinuation = CheckedContinuation<PutContactPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putContactPolicyContinuation) in
            putContactPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends an activation code to a contact channel. The contact can use this code to activate the contact channel in the console or with the ActivateChannel operation. Incident Manager can't engage a contact channel until it has been activated.
    func sendActivationCode(input: SendActivationCodeInput) async throws -> SendActivationCodeOutputResponse
    {
        typealias sendActivationCodeContinuation = CheckedContinuation<SendActivationCodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendActivationCodeContinuation) in
            sendActivationCode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an engagement to a contact or escalation plan. The engagement engages each contact specified in the incident.
    func startEngagement(input: StartEngagementInput) async throws -> StartEngagementOutputResponse
    {
        typealias startEngagementContinuation = CheckedContinuation<StartEngagementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startEngagementContinuation) in
            startEngagement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops an engagement before it finishes the final stage of the escalation plan or engagement plan. Further contacts aren't engaged.
    func stopEngagement(input: StopEngagementInput) async throws -> StopEngagementOutputResponse
    {
        typealias stopEngagementContinuation = CheckedContinuation<StopEngagementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopEngagementContinuation) in
            stopEngagement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Tags a contact or escalation plan. You can tag only contacts and escalation plans in the first region of your replication set.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags from the specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the contact or escalation plan specified.
    func updateContact(input: UpdateContactInput) async throws -> UpdateContactOutputResponse
    {
        typealias updateContactContinuation = CheckedContinuation<UpdateContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateContactContinuation) in
            updateContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a contact's contact channel.
    func updateContactChannel(input: UpdateContactChannelInput) async throws -> UpdateContactChannelOutputResponse
    {
        typealias updateContactChannelContinuation = CheckedContinuation<UpdateContactChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateContactChannelContinuation) in
            updateContactChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
