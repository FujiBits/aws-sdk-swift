// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension WorkSpacesClient {
    /// <p>Associates the specified connection alias with the specified directory to enable cross-Region redirection.
    ///          For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html">
    ///             Cross-Region Redirection for Amazon WorkSpaces</a>.</p>
    ///
    ///          <note>
    ///             <p>Before performing this operation, call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html">
    ///             DescribeConnectionAliases</a> to make sure that the current state of the connection alias is <code>CREATED</code>.</p>
    ///          </note>
    func associateConnectionAlias(input: AssociateConnectionAliasInput) async throws -> AssociateConnectionAliasOutputResponse
    {
        typealias associateConnectionAliasContinuation = CheckedContinuation<AssociateConnectionAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateConnectionAliasContinuation) in
            associateConnectionAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates the specified IP access control group with the specified directory.</p>
    func associateIpGroups(input: AssociateIpGroupsInput) async throws -> AssociateIpGroupsOutputResponse
    {
        typealias associateIpGroupsContinuation = CheckedContinuation<AssociateIpGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateIpGroupsContinuation) in
            associateIpGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds one or more rules to the specified IP access control group.</p>
    ///          <p>This action gives users permission to access their WorkSpaces from the CIDR address
    ///          ranges specified in the rules.</p>
    func authorizeIpRules(input: AuthorizeIpRulesInput) async throws -> AuthorizeIpRulesOutputResponse
    {
        typealias authorizeIpRulesContinuation = CheckedContinuation<AuthorizeIpRulesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: authorizeIpRulesContinuation) in
            authorizeIpRules(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Copies the specified image from the specified Region to the current Region.
    ///          For more information about copying images, see
    ///          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/copy-custom-image.html">
    ///             Copy a Custom WorkSpaces Image</a>.</p>
    ///
    ///          <note>
    ///             <p>In the China (Ningxia) Region, you can copy images only within the same Region.</p>
    ///
    ///             <p>In the AWS GovCloud (US-West) Region, to copy images to and from other AWS Regions,
    ///             contact AWS Support.</p>
    ///          </note>
    ///
    ///          <important>
    ///             <p>Before copying a shared image, be sure to verify that it has been shared from the
    ///             correct AWS account. To determine if an image has been shared and to see the AWS
    ///             account ID that owns an image, use the <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImages.html">DescribeWorkSpaceImages</a> and <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImagePermissions.html">DescribeWorkspaceImagePermissions</a> API operations. </p>
    ///          </important>
    func copyWorkspaceImage(input: CopyWorkspaceImageInput) async throws -> CopyWorkspaceImageOutputResponse
    {
        typealias copyWorkspaceImageContinuation = CheckedContinuation<CopyWorkspaceImageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: copyWorkspaceImageContinuation) in
            copyWorkspaceImage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates the specified connection alias for use with cross-Region redirection. For more information, see
    ///          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html">
    ///          Cross-Region Redirection for Amazon WorkSpaces</a>.</p>
    func createConnectionAlias(input: CreateConnectionAliasInput) async throws -> CreateConnectionAliasOutputResponse
    {
        typealias createConnectionAliasContinuation = CheckedContinuation<CreateConnectionAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConnectionAliasContinuation) in
            createConnectionAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an IP access control group.</p>
    ///          <p>An IP access control group provides you with the ability to control the IP addresses
    ///          from which users are allowed to access their WorkSpaces. To specify the CIDR address
    ///          ranges, add rules to your IP access control group and then associate the group with your
    ///          directory. You can add rules when you create the group or at any time using <a>AuthorizeIpRules</a>.</p>
    ///
    ///          <p>There is a default IP access control group associated with your directory. If you don't
    ///          associate an IP access control group with your directory, the default group is used. The
    ///          default group includes a default rule that allows users to access their WorkSpaces from
    ///          anywhere. You cannot modify the default IP access control group for your directory.</p>
    func createIpGroup(input: CreateIpGroupInput) async throws -> CreateIpGroupOutputResponse
    {
        typealias createIpGroupContinuation = CheckedContinuation<CreateIpGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIpGroupContinuation) in
            createIpGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates the specified tags for the specified WorkSpaces resource.</p>
    func createTags(input: CreateTagsInput) async throws -> CreateTagsOutputResponse
    {
        typealias createTagsContinuation = CheckedContinuation<CreateTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTagsContinuation) in
            createTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates the specified WorkSpace bundle. For more information about creating WorkSpace bundles, see
    ///          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/create-custom-bundle.html">
    ///             Create a Custom WorkSpaces Image and Bundle</a>.</p>
    func createWorkspaceBundle(input: CreateWorkspaceBundleInput) async throws -> CreateWorkspaceBundleOutputResponse
    {
        typealias createWorkspaceBundleContinuation = CheckedContinuation<CreateWorkspaceBundleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWorkspaceBundleContinuation) in
            createWorkspaceBundle(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates one or more WorkSpaces.</p>
    ///          <p>This operation is asynchronous and returns before the WorkSpaces are created.</p>
    func createWorkspaces(input: CreateWorkspacesInput) async throws -> CreateWorkspacesOutputResponse
    {
        typealias createWorkspacesContinuation = CheckedContinuation<CreateWorkspacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWorkspacesContinuation) in
            createWorkspaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified connection alias. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html">
    ///          Cross-Region Redirection for Amazon WorkSpaces</a>.</p>
    ///
    ///          <important>
    ///             <p>
    ///                <b>If you will no longer be using a fully qualified domain name (FQDN) as the registration code
    ///             for your WorkSpaces users, you must take certain precautions to prevent potential security issues.</b>
    ///             For more information, see
    ///             <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html#cross-region-redirection-security-considerations">
    ///                Security Considerations if You Stop Using Cross-Region Redirection</a>.</p>
    ///          </important>
    ///
    ///          <note>
    ///             <p>To delete a connection alias that has been shared, the shared account must first disassociate the connection alias
    ///             from any directories it has been associated with. Then you must unshare the connection alias from the account it has
    ///             been shared with. You can delete a connection alias only after it is no longer shared with any accounts or
    ///             associated with any directories.</p>
    ///          </note>
    func deleteConnectionAlias(input: DeleteConnectionAliasInput) async throws -> DeleteConnectionAliasOutputResponse
    {
        typealias deleteConnectionAliasContinuation = CheckedContinuation<DeleteConnectionAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConnectionAliasContinuation) in
            deleteConnectionAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified IP access control group.</p>
    ///          <p>You cannot delete an IP access control group that is associated with a directory.</p>
    func deleteIpGroup(input: DeleteIpGroupInput) async throws -> DeleteIpGroupOutputResponse
    {
        typealias deleteIpGroupContinuation = CheckedContinuation<DeleteIpGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIpGroupContinuation) in
            deleteIpGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified tags from the specified WorkSpaces resource.</p>
    func deleteTags(input: DeleteTagsInput) async throws -> DeleteTagsOutputResponse
    {
        typealias deleteTagsContinuation = CheckedContinuation<DeleteTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTagsContinuation) in
            deleteTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified WorkSpace bundle. For more information about deleting WorkSpace bundles, see
    ///          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/delete_bundle.html">
    ///             Delete a Custom WorkSpaces Bundle or Image</a>.</p>
    func deleteWorkspaceBundle(input: DeleteWorkspaceBundleInput) async throws -> DeleteWorkspaceBundleOutputResponse
    {
        typealias deleteWorkspaceBundleContinuation = CheckedContinuation<DeleteWorkspaceBundleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWorkspaceBundleContinuation) in
            deleteWorkspaceBundle(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified image from your account. To delete an image, you must first delete
    ///          any bundles that are associated with the image and unshare the image if it is shared with
    ///          other accounts. </p>
    func deleteWorkspaceImage(input: DeleteWorkspaceImageInput) async throws -> DeleteWorkspaceImageOutputResponse
    {
        typealias deleteWorkspaceImageContinuation = CheckedContinuation<DeleteWorkspaceImageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWorkspaceImageContinuation) in
            deleteWorkspaceImage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deregisters the specified directory. This operation is asynchronous
    ///          and returns before the WorkSpace directory is deregistered. If any WorkSpaces are
    ///       registered to this directory, you must remove them before you can deregister the directory.</p>
    ///
    ///          <note>
    ///             <p>Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces.
    ///             If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30
    ///             consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces,
    ///             and you will be charged for this directory as per the
    ///             <a href="http://aws.amazon.com/directoryservice/pricing/">AWS Directory Services pricing terms</a>.</p>
    ///
    ///             <p>To delete empty directories, see
    ///             <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html">
    ///                Delete the Directory for Your WorkSpaces</a>. If you delete your
    ///             Simple AD or AD Connector directory, you can always create a new one when you want to start using
    ///             WorkSpaces again.</p>
    ///          </note>
    func deregisterWorkspaceDirectory(input: DeregisterWorkspaceDirectoryInput) async throws -> DeregisterWorkspaceDirectoryOutputResponse
    {
        typealias deregisterWorkspaceDirectoryContinuation = CheckedContinuation<DeregisterWorkspaceDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterWorkspaceDirectoryContinuation) in
            deregisterWorkspaceDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list that describes the configuration of Bring Your Own License (BYOL) for
    ///          the specified account.</p>
    func describeAccount(input: DescribeAccountInput) async throws -> DescribeAccountOutputResponse
    {
        typealias describeAccountContinuation = CheckedContinuation<DescribeAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountContinuation) in
            describeAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list that describes modifications to the configuration of Bring Your Own
    ///          License (BYOL) for the specified account.</p>
    func describeAccountModifications(input: DescribeAccountModificationsInput) async throws -> DescribeAccountModificationsOutputResponse
    {
        typealias describeAccountModificationsContinuation = CheckedContinuation<DescribeAccountModificationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountModificationsContinuation) in
            describeAccountModifications(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list that describes one or more specified Amazon WorkSpaces clients.</p>
    func describeClientProperties(input: DescribeClientPropertiesInput) async throws -> DescribeClientPropertiesOutputResponse
    {
        typealias describeClientPropertiesContinuation = CheckedContinuation<DescribeClientPropertiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeClientPropertiesContinuation) in
            describeClientProperties(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the permissions that the owner of a connection alias has granted to another AWS account for
    ///          the specified connection alias. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html">
    ///             Cross-Region Redirection for Amazon WorkSpaces</a>.</p>
    func describeConnectionAliasPermissions(input: DescribeConnectionAliasPermissionsInput) async throws -> DescribeConnectionAliasPermissionsOutputResponse
    {
        typealias describeConnectionAliasPermissionsContinuation = CheckedContinuation<DescribeConnectionAliasPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeConnectionAliasPermissionsContinuation) in
            describeConnectionAliasPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list that describes the connection aliases used for cross-Region redirection. For more information, see
    ///          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html">
    ///          Cross-Region Redirection for Amazon WorkSpaces</a>.</p>
    func describeConnectionAliases(input: DescribeConnectionAliasesInput) async throws -> DescribeConnectionAliasesOutputResponse
    {
        typealias describeConnectionAliasesContinuation = CheckedContinuation<DescribeConnectionAliasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeConnectionAliasesContinuation) in
            describeConnectionAliases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes one or more of your IP access control groups.</p>
    func describeIpGroups(input: DescribeIpGroupsInput) async throws -> DescribeIpGroupsOutputResponse
    {
        typealias describeIpGroupsContinuation = CheckedContinuation<DescribeIpGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeIpGroupsContinuation) in
            describeIpGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the specified tags for the specified WorkSpaces resource.</p>
    func describeTags(input: DescribeTagsInput) async throws -> DescribeTagsOutputResponse
    {
        typealias describeTagsContinuation = CheckedContinuation<DescribeTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTagsContinuation) in
            describeTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list that describes the available WorkSpace bundles.</p>
    ///          <p>You can filter the results using either bundle ID or owner, but not both.</p>
    func describeWorkspaceBundles(input: DescribeWorkspaceBundlesInput) async throws -> DescribeWorkspaceBundlesOutputResponse
    {
        typealias describeWorkspaceBundlesContinuation = CheckedContinuation<DescribeWorkspaceBundlesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkspaceBundlesContinuation) in
            describeWorkspaceBundles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the available directories that are registered with
    ///          Amazon WorkSpaces.</p>
    func describeWorkspaceDirectories(input: DescribeWorkspaceDirectoriesInput) async throws -> DescribeWorkspaceDirectoriesOutputResponse
    {
        typealias describeWorkspaceDirectoriesContinuation = CheckedContinuation<DescribeWorkspaceDirectoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkspaceDirectoriesContinuation) in
            describeWorkspaceDirectories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the permissions that the owner of an image has granted to other
    ///          AWS accounts for an image.</p>
    func describeWorkspaceImagePermissions(input: DescribeWorkspaceImagePermissionsInput) async throws -> DescribeWorkspaceImagePermissionsOutputResponse
    {
        typealias describeWorkspaceImagePermissionsContinuation = CheckedContinuation<DescribeWorkspaceImagePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkspaceImagePermissionsContinuation) in
            describeWorkspaceImagePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list that describes one or more specified images, if the image identifiers
    ///          are provided. Otherwise, all images in the account are described. </p>
    func describeWorkspaceImages(input: DescribeWorkspaceImagesInput) async throws -> DescribeWorkspaceImagesOutputResponse
    {
        typealias describeWorkspaceImagesContinuation = CheckedContinuation<DescribeWorkspaceImagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkspaceImagesContinuation) in
            describeWorkspaceImages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the snapshots for the specified WorkSpace.</p>
    func describeWorkspaceSnapshots(input: DescribeWorkspaceSnapshotsInput) async throws -> DescribeWorkspaceSnapshotsOutputResponse
    {
        typealias describeWorkspaceSnapshotsContinuation = CheckedContinuation<DescribeWorkspaceSnapshotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkspaceSnapshotsContinuation) in
            describeWorkspaceSnapshots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the specified WorkSpaces.</p>
    ///          <p>You can filter the results by using the bundle identifier, directory identifier, or
    ///          owner, but you can specify only one filter at a time.</p>
    func describeWorkspaces(input: DescribeWorkspacesInput) async throws -> DescribeWorkspacesOutputResponse
    {
        typealias describeWorkspacesContinuation = CheckedContinuation<DescribeWorkspacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkspacesContinuation) in
            describeWorkspaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the connection status of the specified WorkSpaces.</p>
    func describeWorkspacesConnectionStatus(input: DescribeWorkspacesConnectionStatusInput) async throws -> DescribeWorkspacesConnectionStatusOutputResponse
    {
        typealias describeWorkspacesConnectionStatusContinuation = CheckedContinuation<DescribeWorkspacesConnectionStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkspacesConnectionStatusContinuation) in
            describeWorkspacesConnectionStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates a connection alias from a directory. Disassociating a connection alias disables cross-Region
    ///          redirection between two directories in different AWS Regions. For more information, see
    ///          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html">
    ///             Cross-Region Redirection for Amazon WorkSpaces</a>.</p>
    ///
    ///          <note>
    ///             <p>Before performing this operation, call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html">
    ///             DescribeConnectionAliases</a> to make sure that the current state of the connection alias is <code>CREATED</code>.</p>
    ///          </note>
    func disassociateConnectionAlias(input: DisassociateConnectionAliasInput) async throws -> DisassociateConnectionAliasOutputResponse
    {
        typealias disassociateConnectionAliasContinuation = CheckedContinuation<DisassociateConnectionAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateConnectionAliasContinuation) in
            disassociateConnectionAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates the specified IP access control group from the specified directory.</p>
    func disassociateIpGroups(input: DisassociateIpGroupsInput) async throws -> DisassociateIpGroupsOutputResponse
    {
        typealias disassociateIpGroupsContinuation = CheckedContinuation<DisassociateIpGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateIpGroupsContinuation) in
            disassociateIpGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Imports the specified Windows 10 Bring Your Own License (BYOL) image into Amazon
    ///          WorkSpaces. The image must be an already licensed Amazon EC2 image that is in your AWS
    ///          account, and you must own the image. For more information about creating BYOL images, see
    ///             <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">
    ///             Bring Your Own Windows Desktop Licenses</a>.</p>
    func importWorkspaceImage(input: ImportWorkspaceImageInput) async throws -> ImportWorkspaceImageOutputResponse
    {
        typealias importWorkspaceImageContinuation = CheckedContinuation<ImportWorkspaceImageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importWorkspaceImageContinuation) in
            importWorkspaceImage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of IP address ranges, specified as IPv4 CIDR blocks, that you can use
    ///          for the network management interface when you enable Bring Your Own License (BYOL). </p>
    ///
    ///          <p>This operation can be run only by AWS accounts that are enabled for BYOL. If your account
    ///          isn't enabled for BYOL, you'll receive an <code>AccessDeniedException</code> error.</p>
    ///
    ///          <p>The management network interface is connected to a secure Amazon WorkSpaces management
    ///          network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces
    ///          clients, and to allow Amazon WorkSpaces to manage the WorkSpace.</p>
    func listAvailableManagementCidrRanges(input: ListAvailableManagementCidrRangesInput) async throws -> ListAvailableManagementCidrRangesOutputResponse
    {
        typealias listAvailableManagementCidrRangesContinuation = CheckedContinuation<ListAvailableManagementCidrRangesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAvailableManagementCidrRangesContinuation) in
            listAvailableManagementCidrRanges(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Migrates a WorkSpace from one operating system or bundle type to another, while retaining the data on the user volume.</p>
    ///
    ///          <p>The migration process recreates the WorkSpace by using a new root volume from the target bundle image and the user volume
    ///          from the last available snapshot of the original WorkSpace. During migration, the original <code>D:\Users\%USERNAME%</code>
    ///          user profile folder is renamed to <code>D:\Users\%USERNAME%MMddyyTHHmmss%.NotMigrated</code>. A new <code>D:\Users\%USERNAME%\</code>
    ///          folder is generated by the new OS. Certain files in the old user profile are moved to the new user profile.</p>
    ///
    ///          <p>For available migration scenarios, details about what happens during migration, and best practices, see
    ///          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/migrate-workspaces.html">Migrate a WorkSpace</a>.</p>
    func migrateWorkspace(input: MigrateWorkspaceInput) async throws -> MigrateWorkspaceOutputResponse
    {
        typealias migrateWorkspaceContinuation = CheckedContinuation<MigrateWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: migrateWorkspaceContinuation) in
            migrateWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies the configuration of Bring Your Own License (BYOL) for the specified
    ///          account.</p>
    func modifyAccount(input: ModifyAccountInput) async throws -> ModifyAccountOutputResponse
    {
        typealias modifyAccountContinuation = CheckedContinuation<ModifyAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyAccountContinuation) in
            modifyAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies the properties of the specified Amazon WorkSpaces clients.</p>
    func modifyClientProperties(input: ModifyClientPropertiesInput) async throws -> ModifyClientPropertiesOutputResponse
    {
        typealias modifyClientPropertiesContinuation = CheckedContinuation<ModifyClientPropertiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyClientPropertiesContinuation) in
            modifyClientProperties(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies the self-service WorkSpace management capabilities for your users. For more
    ///          information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html">Enable Self-Service WorkSpace Management Capabilities for Your Users</a>.</p>
    func modifySelfservicePermissions(input: ModifySelfservicePermissionsInput) async throws -> ModifySelfservicePermissionsOutputResponse
    {
        typealias modifySelfservicePermissionsContinuation = CheckedContinuation<ModifySelfservicePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifySelfservicePermissionsContinuation) in
            modifySelfservicePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Specifies which devices and operating systems users can use to access their WorkSpaces.
    ///          For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html#control-device-access">
    ///             Control Device Access</a>.</p>
    func modifyWorkspaceAccessProperties(input: ModifyWorkspaceAccessPropertiesInput) async throws -> ModifyWorkspaceAccessPropertiesOutputResponse
    {
        typealias modifyWorkspaceAccessPropertiesContinuation = CheckedContinuation<ModifyWorkspaceAccessPropertiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyWorkspaceAccessPropertiesContinuation) in
            modifyWorkspaceAccessProperties(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modify the default properties used to create WorkSpaces.</p>
    func modifyWorkspaceCreationProperties(input: ModifyWorkspaceCreationPropertiesInput) async throws -> ModifyWorkspaceCreationPropertiesOutputResponse
    {
        typealias modifyWorkspaceCreationPropertiesContinuation = CheckedContinuation<ModifyWorkspaceCreationPropertiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyWorkspaceCreationPropertiesContinuation) in
            modifyWorkspaceCreationProperties(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies the specified WorkSpace properties. For important information about how
    ///          to modify the size of the root and user volumes, see
    ///          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html">
    ///             Modify a WorkSpace</a>.
    ///       </p>
    func modifyWorkspaceProperties(input: ModifyWorkspacePropertiesInput) async throws -> ModifyWorkspacePropertiesOutputResponse
    {
        typealias modifyWorkspacePropertiesContinuation = CheckedContinuation<ModifyWorkspacePropertiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyWorkspacePropertiesContinuation) in
            modifyWorkspaceProperties(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets the state of the specified WorkSpace.</p>
    ///          <p>To maintain a WorkSpace without being interrupted, set the WorkSpace state to
    ///             <code>ADMIN_MAINTENANCE</code>. WorkSpaces in this state do not respond to requests to
    ///          reboot, stop, start, rebuild, or restore. An AutoStop WorkSpace in this state is not
    ///          stopped. Users cannot log into a WorkSpace in the <code>ADMIN_MAINTENANCE</code>
    ///          state.</p>
    func modifyWorkspaceState(input: ModifyWorkspaceStateInput) async throws -> ModifyWorkspaceStateOutputResponse
    {
        typealias modifyWorkspaceStateContinuation = CheckedContinuation<ModifyWorkspaceStateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyWorkspaceStateContinuation) in
            modifyWorkspaceState(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Reboots the specified WorkSpaces.</p>
    ///          <p>You cannot reboot a WorkSpace unless its state is <code>AVAILABLE</code> or
    ///             <code>UNHEALTHY</code>.</p>
    ///          <p>This operation is asynchronous and returns before the WorkSpaces have rebooted.</p>
    func rebootWorkspaces(input: RebootWorkspacesInput) async throws -> RebootWorkspacesOutputResponse
    {
        typealias rebootWorkspacesContinuation = CheckedContinuation<RebootWorkspacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rebootWorkspacesContinuation) in
            rebootWorkspaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Rebuilds the specified WorkSpace.</p>
    ///          <p>You cannot rebuild a WorkSpace unless its state is <code>AVAILABLE</code>,
    ///             <code>ERROR</code>, <code>UNHEALTHY</code>, <code>STOPPED</code>, or <code>REBOOTING</code>.</p>
    ///          <p>Rebuilding a WorkSpace is a potentially destructive action that can result in the loss
    ///          of data. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/reset-workspace.html">Rebuild a
    ///          WorkSpace</a>.</p>
    ///          <p>This operation is asynchronous and returns before the WorkSpaces have been completely
    ///          rebuilt.</p>
    func rebuildWorkspaces(input: RebuildWorkspacesInput) async throws -> RebuildWorkspacesOutputResponse
    {
        typealias rebuildWorkspacesContinuation = CheckedContinuation<RebuildWorkspacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rebuildWorkspacesContinuation) in
            rebuildWorkspaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Registers the specified directory. This operation is asynchronous
    ///          and returns before the WorkSpace directory is registered. If this is the first time you are
    ///          registering a directory, you will need to create the workspaces_DefaultRole role before you can
    ///          register a directory. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role">
    ///             Creating the workspaces_DefaultRole Role</a>.</p>
    func registerWorkspaceDirectory(input: RegisterWorkspaceDirectoryInput) async throws -> RegisterWorkspaceDirectoryOutputResponse
    {
        typealias registerWorkspaceDirectoryContinuation = CheckedContinuation<RegisterWorkspaceDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerWorkspaceDirectoryContinuation) in
            registerWorkspaceDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Restores the specified WorkSpace to its last known healthy state.</p>
    ///          <p>You cannot restore a WorkSpace unless its state is <code> AVAILABLE</code>,
    ///             <code>ERROR</code>, <code>UNHEALTHY</code>, or <code>STOPPED</code>.</p>
    ///          <p>Restoring a WorkSpace is a potentially destructive action that can result in the loss of
    ///          data. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/restore-workspace.html">Restore a
    ///          WorkSpace</a>.</p>
    ///          <p>This operation is asynchronous and returns before the WorkSpace is completely
    ///          restored.</p>
    func restoreWorkspace(input: RestoreWorkspaceInput) async throws -> RestoreWorkspaceOutputResponse
    {
        typealias restoreWorkspaceContinuation = CheckedContinuation<RestoreWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: restoreWorkspaceContinuation) in
            restoreWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes one or more rules from the specified IP access control group.</p>
    func revokeIpRules(input: RevokeIpRulesInput) async throws -> RevokeIpRulesOutputResponse
    {
        typealias revokeIpRulesContinuation = CheckedContinuation<RevokeIpRulesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: revokeIpRulesContinuation) in
            revokeIpRules(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts the specified WorkSpaces.</p>
    ///          <p>You cannot start a WorkSpace unless it has a running mode of <code>AutoStop</code> and a
    ///          state of <code>STOPPED</code>.</p>
    func startWorkspaces(input: StartWorkspacesInput) async throws -> StartWorkspacesOutputResponse
    {
        typealias startWorkspacesContinuation = CheckedContinuation<StartWorkspacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startWorkspacesContinuation) in
            startWorkspaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Stops the specified WorkSpaces.</p>
    ///          <p>You cannot stop a WorkSpace unless it has a running mode of <code>AutoStop</code> and a
    ///          state of <code>AVAILABLE</code>, <code>IMPAIRED</code>, <code>UNHEALTHY</code>, or
    ///             <code>ERROR</code>.</p>
    func stopWorkspaces(input: StopWorkspacesInput) async throws -> StopWorkspacesOutputResponse
    {
        typealias stopWorkspacesContinuation = CheckedContinuation<StopWorkspacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopWorkspacesContinuation) in
            stopWorkspaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Terminates the specified WorkSpaces.</p>
    ///
    ///          <important>
    ///             <p>Terminating a WorkSpace is a permanent action and cannot be undone. The user's data is
    ///             destroyed. If you need to archive any user data, contact AWS Support before
    ///             terminating the WorkSpace.</p>
    ///          </important>
    ///
    ///          <p>You can terminate a WorkSpace that is in any state except <code>SUSPENDED</code>.</p>
    ///          <p>This operation is asynchronous and returns before the WorkSpaces have been completely
    ///          terminated. After a WorkSpace is terminated, the <code>TERMINATED</code> state is returned
    ///          only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely
    ///          returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using
    ///          <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html">
    ///             DescribeWorkSpaces</a>. If the WorkSpace ID isn't returned, then the WorkSpace has
    ///          been successfully terminated.</p>
    ///
    ///          <note>
    ///             <p>Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces.
    ///             If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30
    ///             consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces,
    ///             and you will be charged for this directory as per the
    ///             <a href="http://aws.amazon.com/directoryservice/pricing/">AWS Directory Services pricing terms</a>.</p>
    ///
    ///             <p>To delete empty directories, see
    ///             <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html">
    ///                Delete the Directory for Your WorkSpaces</a>. If you delete your
    ///             Simple AD or AD Connector directory, you can always create a new one when you want to start using
    ///             WorkSpaces again.</p>
    ///          </note>
    func terminateWorkspaces(input: TerminateWorkspacesInput) async throws -> TerminateWorkspacesOutputResponse
    {
        typealias terminateWorkspacesContinuation = CheckedContinuation<TerminateWorkspacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: terminateWorkspacesContinuation) in
            terminateWorkspaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Shares or unshares a connection alias with one account by specifying whether that account has permission to
    ///          associate the connection alias with a directory. If the association permission is granted, the connection alias
    ///          is shared with that account. If the association permission is revoked, the connection alias is unshared with the
    ///          account. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html">
    ///             Cross-Region Redirection for Amazon WorkSpaces</a>.</p>
    ///
    ///          <note>
    ///             <ul>
    ///                <li>
    ///                   <p>Before performing this operation, call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html">
    ///                   DescribeConnectionAliases</a> to make sure that the current state of the connection alias is <code>CREATED</code>.</p>
    ///                </li>
    ///                <li>
    ///                   <p>To delete a connection alias that has been shared, the shared account must first disassociate the
    ///                   connection alias from any directories it has been associated with. Then you must unshare the connection
    ///                   alias from the account it has been shared with. You can delete a connection alias only after it is no
    ///                   longer shared with any accounts or associated with any directories.</p>
    ///                </li>
    ///             </ul>
    ///          </note>
    func updateConnectionAliasPermission(input: UpdateConnectionAliasPermissionInput) async throws -> UpdateConnectionAliasPermissionOutputResponse
    {
        typealias updateConnectionAliasPermissionContinuation = CheckedContinuation<UpdateConnectionAliasPermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConnectionAliasPermissionContinuation) in
            updateConnectionAliasPermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Replaces the current rules of the specified IP access control group with the specified
    ///          rules.</p>
    func updateRulesOfIpGroup(input: UpdateRulesOfIpGroupInput) async throws -> UpdateRulesOfIpGroupOutputResponse
    {
        typealias updateRulesOfIpGroupContinuation = CheckedContinuation<UpdateRulesOfIpGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRulesOfIpGroupContinuation) in
            updateRulesOfIpGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a WorkSpace bundle with a new image. For more information about updating WorkSpace bundles, see
    ///          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-custom-bundle.html">
    ///             Update a Custom WorkSpaces Bundle</a>.</p>
    ///
    ///          <important>
    ///             <p>Existing WorkSpaces aren't automatically updated when you update the bundle that they're
    ///             based on. To update existing WorkSpaces that are based on a bundle that you've updated, you
    ///             must either rebuild the WorkSpaces or delete and recreate them.</p>
    ///          </important>
    func updateWorkspaceBundle(input: UpdateWorkspaceBundleInput) async throws -> UpdateWorkspaceBundleOutputResponse
    {
        typealias updateWorkspaceBundleContinuation = CheckedContinuation<UpdateWorkspaceBundleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWorkspaceBundleContinuation) in
            updateWorkspaceBundle(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Shares or unshares an image with one account in the same AWS Region by specifying whether that account has
    ///          permission to copy the image. If the copy image permission is granted, the image is shared with that account.
    ///          If the copy image permission is revoked, the image is unshared with the account.</p>
    ///
    ///          <p>After an image has been shared, the recipient account can copy the image to other AWS Regions as needed.</p>
    ///
    ///          <note>
    ///             <p>In the China (Ningxia) Region, you can copy images only within the same Region.</p>
    ///
    ///             <p>In the AWS GovCloud (US-West) Region, to copy images to and from other AWS Regions,
    ///             contact AWS Support.</p>
    ///          </note>
    ///
    ///          <p>For more information about sharing images, see
    ///          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/share-custom-image.html">
    ///             Share or Unshare a Custom WorkSpaces Image</a>.</p>
    ///
    ///          <note>
    ///             <ul>
    ///                <li>
    ///                   <p>To delete an image that has been shared, you must unshare the image before you delete it.</p>
    ///                </li>
    ///                <li>
    ///                   <p>Sharing Bring Your Own License (BYOL) images across AWS accounts isn't supported at
    ///                   this time in the AWS GovCloud (US-West) Region. To share BYOL images across accounts in
    ///                   the AWS GovCloud (US-West) Region, contact AWS Support.</p>
    ///                </li>
    ///             </ul>
    ///          </note>
    func updateWorkspaceImagePermission(input: UpdateWorkspaceImagePermissionInput) async throws -> UpdateWorkspaceImagePermissionOutputResponse
    {
        typealias updateWorkspaceImagePermissionContinuation = CheckedContinuation<UpdateWorkspaceImagePermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWorkspaceImagePermissionContinuation) in
            updateWorkspaceImagePermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
