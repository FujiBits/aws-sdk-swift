// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ImportWorkspaceImageInputHeadersMiddleware: Middleware {
    public let id: String = "ImportWorkspaceImageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportWorkspaceImageInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportWorkspaceImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportWorkspaceImageInput>
    public typealias MOutput = OperationOutput<ImportWorkspaceImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportWorkspaceImageOutputError>
}

public struct ImportWorkspaceImageInputQueryItemMiddleware: Middleware {
    public let id: String = "ImportWorkspaceImageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportWorkspaceImageInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportWorkspaceImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportWorkspaceImageInput>
    public typealias MOutput = OperationOutput<ImportWorkspaceImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportWorkspaceImageOutputError>
}

public struct ImportWorkspaceImageInputBodyMiddleware: Middleware {
    public let id: String = "ImportWorkspaceImageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportWorkspaceImageInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportWorkspaceImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportWorkspaceImageInput>
    public typealias MOutput = OperationOutput<ImportWorkspaceImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportWorkspaceImageOutputError>
}

extension ImportWorkspaceImageInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applications = "Applications"
        case ec2ImageId = "Ec2ImageId"
        case imageDescription = "ImageDescription"
        case imageName = "ImageName"
        case ingestionProcess = "IngestionProcess"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applications = applications {
            var applicationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .applications)
            for applicationlist0 in applications {
                try applicationsContainer.encode(applicationlist0.rawValue)
            }
        }
        if let ec2ImageId = ec2ImageId {
            try encodeContainer.encode(ec2ImageId, forKey: .ec2ImageId)
        }
        if let imageDescription = imageDescription {
            try encodeContainer.encode(imageDescription, forKey: .imageDescription)
        }
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
        if let ingestionProcess = ingestionProcess {
            try encodeContainer.encode(ingestionProcess.rawValue, forKey: .ingestionProcess)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
