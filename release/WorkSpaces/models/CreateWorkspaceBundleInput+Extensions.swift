// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateWorkspaceBundleInputHeadersMiddleware: Middleware {
    public let id: String = "CreateWorkspaceBundleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateWorkspaceBundleInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateWorkspaceBundleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateWorkspaceBundleInput>
    public typealias MOutput = OperationOutput<CreateWorkspaceBundleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateWorkspaceBundleOutputError>
}

public struct CreateWorkspaceBundleInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateWorkspaceBundleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateWorkspaceBundleInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateWorkspaceBundleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateWorkspaceBundleInput>
    public typealias MOutput = OperationOutput<CreateWorkspaceBundleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateWorkspaceBundleOutputError>
}

public struct CreateWorkspaceBundleInputBodyMiddleware: Middleware {
    public let id: String = "CreateWorkspaceBundleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateWorkspaceBundleInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateWorkspaceBundleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateWorkspaceBundleInput>
    public typealias MOutput = OperationOutput<CreateWorkspaceBundleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateWorkspaceBundleOutputError>
}

extension CreateWorkspaceBundleInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bundleDescription = "BundleDescription"
        case bundleName = "BundleName"
        case computeType = "ComputeType"
        case imageId = "ImageId"
        case rootStorage = "RootStorage"
        case tags = "Tags"
        case userStorage = "UserStorage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleDescription = bundleDescription {
            try encodeContainer.encode(bundleDescription, forKey: .bundleDescription)
        }
        if let bundleName = bundleName {
            try encodeContainer.encode(bundleName, forKey: .bundleName)
        }
        if let computeType = computeType {
            try encodeContainer.encode(computeType, forKey: .computeType)
        }
        if let imageId = imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let rootStorage = rootStorage {
            try encodeContainer.encode(rootStorage, forKey: .rootStorage)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let userStorage = userStorage {
            try encodeContainer.encode(userStorage, forKey: .userStorage)
        }
    }
}
