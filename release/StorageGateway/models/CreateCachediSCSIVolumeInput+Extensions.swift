// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateCachediSCSIVolumeInputHeadersMiddleware: Middleware {
    public let id: String = "CreateCachediSCSIVolumeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCachediSCSIVolumeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCachediSCSIVolumeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCachediSCSIVolumeInput>
    public typealias MOutput = OperationOutput<CreateCachediSCSIVolumeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCachediSCSIVolumeOutputError>
}

public struct CreateCachediSCSIVolumeInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateCachediSCSIVolumeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCachediSCSIVolumeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCachediSCSIVolumeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCachediSCSIVolumeInput>
    public typealias MOutput = OperationOutput<CreateCachediSCSIVolumeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCachediSCSIVolumeOutputError>
}

public struct CreateCachediSCSIVolumeInputBodyMiddleware: Middleware {
    public let id: String = "CreateCachediSCSIVolumeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCachediSCSIVolumeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCachediSCSIVolumeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCachediSCSIVolumeInput>
    public typealias MOutput = OperationOutput<CreateCachediSCSIVolumeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCachediSCSIVolumeOutputError>
}

extension CreateCachediSCSIVolumeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case gatewayARN = "GatewayARN"
        case kMSEncrypted = "KMSEncrypted"
        case kMSKey = "KMSKey"
        case networkInterfaceId = "NetworkInterfaceId"
        case snapshotId = "SnapshotId"
        case sourceVolumeARN = "SourceVolumeARN"
        case tags = "Tags"
        case targetName = "TargetName"
        case volumeSizeInBytes = "VolumeSizeInBytes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let gatewayARN = gatewayARN {
            try encodeContainer.encode(gatewayARN, forKey: .gatewayARN)
        }
        if let kMSEncrypted = kMSEncrypted {
            try encodeContainer.encode(kMSEncrypted, forKey: .kMSEncrypted)
        }
        if let kMSKey = kMSKey {
            try encodeContainer.encode(kMSKey, forKey: .kMSKey)
        }
        if let networkInterfaceId = networkInterfaceId {
            try encodeContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
        }
        if let snapshotId = snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
        if let sourceVolumeARN = sourceVolumeARN {
            try encodeContainer.encode(sourceVolumeARN, forKey: .sourceVolumeARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let targetName = targetName {
            try encodeContainer.encode(targetName, forKey: .targetName)
        }
        if volumeSizeInBytes != 0 {
            try encodeContainer.encode(volumeSizeInBytes, forKey: .volumeSizeInBytes)
        }
    }
}
