// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateTapeWithBarcodeInputHeadersMiddleware: Middleware {
    public let id: String = "CreateTapeWithBarcodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTapeWithBarcodeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTapeWithBarcodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTapeWithBarcodeInput>
    public typealias MOutput = OperationOutput<CreateTapeWithBarcodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTapeWithBarcodeOutputError>
}

public struct CreateTapeWithBarcodeInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateTapeWithBarcodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTapeWithBarcodeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTapeWithBarcodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTapeWithBarcodeInput>
    public typealias MOutput = OperationOutput<CreateTapeWithBarcodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTapeWithBarcodeOutputError>
}

public struct CreateTapeWithBarcodeInputBodyMiddleware: Middleware {
    public let id: String = "CreateTapeWithBarcodeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTapeWithBarcodeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTapeWithBarcodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTapeWithBarcodeInput>
    public typealias MOutput = OperationOutput<CreateTapeWithBarcodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTapeWithBarcodeOutputError>
}

extension CreateTapeWithBarcodeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gatewayARN = "GatewayARN"
        case kMSEncrypted = "KMSEncrypted"
        case kMSKey = "KMSKey"
        case poolId = "PoolId"
        case tags = "Tags"
        case tapeBarcode = "TapeBarcode"
        case tapeSizeInBytes = "TapeSizeInBytes"
        case worm = "Worm"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gatewayARN = gatewayARN {
            try encodeContainer.encode(gatewayARN, forKey: .gatewayARN)
        }
        if let kMSEncrypted = kMSEncrypted {
            try encodeContainer.encode(kMSEncrypted, forKey: .kMSEncrypted)
        }
        if let kMSKey = kMSKey {
            try encodeContainer.encode(kMSKey, forKey: .kMSKey)
        }
        if let poolId = poolId {
            try encodeContainer.encode(poolId, forKey: .poolId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let tapeBarcode = tapeBarcode {
            try encodeContainer.encode(tapeBarcode, forKey: .tapeBarcode)
        }
        if let tapeSizeInBytes = tapeSizeInBytes {
            try encodeContainer.encode(tapeSizeInBytes, forKey: .tapeSizeInBytes)
        }
        if worm != false {
            try encodeContainer.encode(worm, forKey: .worm)
        }
    }
}
