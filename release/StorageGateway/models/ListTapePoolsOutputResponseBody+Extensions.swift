// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTapePoolsOutputResponseBody: Equatable {
    public let poolInfos: [PoolInfo]?
    public let marker: String?
}

extension ListTapePoolsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case poolInfos = "PoolInfos"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolInfosContainer = try containerValues.decodeIfPresent([PoolInfo?].self, forKey: .poolInfos)
        var poolInfosDecoded0:[PoolInfo]? = nil
        if let poolInfosContainer = poolInfosContainer {
            poolInfosDecoded0 = [PoolInfo]()
            for structure0 in poolInfosContainer {
                if let structure0 = structure0 {
                    poolInfosDecoded0?.append(structure0)
                }
            }
        }
        poolInfos = poolInfosDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
