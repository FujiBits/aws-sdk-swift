// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateBandwidthRateLimitInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateBandwidthRateLimitInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateBandwidthRateLimitInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateBandwidthRateLimitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateBandwidthRateLimitInput>
    public typealias MOutput = OperationOutput<UpdateBandwidthRateLimitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateBandwidthRateLimitOutputError>
}

public struct UpdateBandwidthRateLimitInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateBandwidthRateLimitInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateBandwidthRateLimitInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateBandwidthRateLimitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateBandwidthRateLimitInput>
    public typealias MOutput = OperationOutput<UpdateBandwidthRateLimitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateBandwidthRateLimitOutputError>
}

public struct UpdateBandwidthRateLimitInputBodyMiddleware: Middleware {
    public let id: String = "UpdateBandwidthRateLimitInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateBandwidthRateLimitInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateBandwidthRateLimitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateBandwidthRateLimitInput>
    public typealias MOutput = OperationOutput<UpdateBandwidthRateLimitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateBandwidthRateLimitOutputError>
}

extension UpdateBandwidthRateLimitInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case averageDownloadRateLimitInBitsPerSec = "AverageDownloadRateLimitInBitsPerSec"
        case averageUploadRateLimitInBitsPerSec = "AverageUploadRateLimitInBitsPerSec"
        case gatewayARN = "GatewayARN"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec {
            try encodeContainer.encode(averageDownloadRateLimitInBitsPerSec, forKey: .averageDownloadRateLimitInBitsPerSec)
        }
        if let averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec {
            try encodeContainer.encode(averageUploadRateLimitInBitsPerSec, forKey: .averageUploadRateLimitInBitsPerSec)
        }
        if let gatewayARN = gatewayARN {
            try encodeContainer.encode(gatewayARN, forKey: .gatewayARN)
        }
    }
}
