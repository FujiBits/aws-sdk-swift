// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AthenaClient {
    /// Returns the details of a single named query or a list of up to 50 queries, which you
    ///             provide as an array of query ID strings. Requires you to have access to the workgroup in
    ///             which the queries were saved. Use ListNamedQueriesInput to get the
    ///             list of named query IDs in the specified workgroup. If information could not be
    ///             retrieved for a submitted query ID, information about the query ID submitted is listed
    ///             under UnprocessedNamedQueryId. Named queries differ from executed
    ///             queries. Use BatchGetQueryExecutionInput to get details about each
    ///             unique query execution, and ListQueryExecutionsInput to get a list of
    ///             query execution IDs.
    func batchGetNamedQuery(input: BatchGetNamedQueryInput) async throws -> BatchGetNamedQueryOutputResponse
    {
        typealias batchGetNamedQueryContinuation = CheckedContinuation<BatchGetNamedQueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchGetNamedQueryContinuation) in
            batchGetNamedQuery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the details of a single query execution or a list of up to 50 query
    ///             executions, which you provide as an array of query execution ID strings. Requires you to
    ///             have access to the workgroup in which the queries ran. To get a list of query execution
    ///             IDs, use ListQueryExecutionsInput$WorkGroup. Query executions differ
    ///             from named (saved) queries. Use BatchGetNamedQueryInput to get details
    ///             about named queries.
    func batchGetQueryExecution(input: BatchGetQueryExecutionInput) async throws -> BatchGetQueryExecutionOutputResponse
    {
        typealias batchGetQueryExecutionContinuation = CheckedContinuation<BatchGetQueryExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchGetQueryExecutionContinuation) in
            batchGetQueryExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates (registers) a data catalog with the specified name and properties. Catalogs
    ///             created are visible to all users of the same Amazon Web Services account.
    func createDataCatalog(input: CreateDataCatalogInput) async throws -> CreateDataCatalogOutputResponse
    {
        typealias createDataCatalogContinuation = CheckedContinuation<CreateDataCatalogOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDataCatalogContinuation) in
            createDataCatalog(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a named query in the specified workgroup. Requires that you have access to the
    ///             workgroup.
    ///         For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples in the Amazon Athena User
    ///             Guide.
    func createNamedQuery(input: CreateNamedQueryInput) async throws -> CreateNamedQueryOutputResponse
    {
        typealias createNamedQueryContinuation = CheckedContinuation<CreateNamedQueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createNamedQueryContinuation) in
            createNamedQuery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a prepared statement for use with SQL queries in Athena.
    func createPreparedStatement(input: CreatePreparedStatementInput) async throws -> CreatePreparedStatementOutputResponse
    {
        typealias createPreparedStatementContinuation = CheckedContinuation<CreatePreparedStatementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPreparedStatementContinuation) in
            createPreparedStatement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a workgroup with the specified name.
    func createWorkGroup(input: CreateWorkGroupInput) async throws -> CreateWorkGroupOutputResponse
    {
        typealias createWorkGroupContinuation = CheckedContinuation<CreateWorkGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWorkGroupContinuation) in
            createWorkGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a data catalog.
    func deleteDataCatalog(input: DeleteDataCatalogInput) async throws -> DeleteDataCatalogOutputResponse
    {
        typealias deleteDataCatalogContinuation = CheckedContinuation<DeleteDataCatalogOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDataCatalogContinuation) in
            deleteDataCatalog(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the named query if you have access to the workgroup in which the query was
    ///             saved.
    ///         For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples in the Amazon Athena User
    ///             Guide.
    func deleteNamedQuery(input: DeleteNamedQueryInput) async throws -> DeleteNamedQueryOutputResponse
    {
        typealias deleteNamedQueryContinuation = CheckedContinuation<DeleteNamedQueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteNamedQueryContinuation) in
            deleteNamedQuery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the prepared statement with the specified name from the specified
    ///             workgroup.
    func deletePreparedStatement(input: DeletePreparedStatementInput) async throws -> DeletePreparedStatementOutputResponse
    {
        typealias deletePreparedStatementContinuation = CheckedContinuation<DeletePreparedStatementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePreparedStatementContinuation) in
            deletePreparedStatement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the workgroup with the specified name. The primary workgroup cannot be
    ///             deleted.
    func deleteWorkGroup(input: DeleteWorkGroupInput) async throws -> DeleteWorkGroupOutputResponse
    {
        typealias deleteWorkGroupContinuation = CheckedContinuation<DeleteWorkGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWorkGroupContinuation) in
            deleteWorkGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the specified data catalog.
    func getDataCatalog(input: GetDataCatalogInput) async throws -> GetDataCatalogOutputResponse
    {
        typealias getDataCatalogContinuation = CheckedContinuation<GetDataCatalogOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDataCatalogContinuation) in
            getDataCatalog(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a database object for the specified database and data catalog.
    func getDatabase(input: GetDatabaseInput) async throws -> GetDatabaseOutputResponse
    {
        typealias getDatabaseContinuation = CheckedContinuation<GetDatabaseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDatabaseContinuation) in
            getDatabase(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a single query. Requires that you have access to the
    ///             workgroup in which the query was saved.
    func getNamedQuery(input: GetNamedQueryInput) async throws -> GetNamedQueryOutputResponse
    {
        typealias getNamedQueryContinuation = CheckedContinuation<GetNamedQueryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNamedQueryContinuation) in
            getNamedQuery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the prepared statement with the specified name from the specified
    ///             workgroup.
    func getPreparedStatement(input: GetPreparedStatementInput) async throws -> GetPreparedStatementOutputResponse
    {
        typealias getPreparedStatementContinuation = CheckedContinuation<GetPreparedStatementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPreparedStatementContinuation) in
            getPreparedStatement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a single execution of a query if you have access to the
    ///             workgroup in which the query ran. Each time a query executes, information about the
    ///             query execution is saved with a unique ID.
    func getQueryExecution(input: GetQueryExecutionInput) async throws -> GetQueryExecutionOutputResponse
    {
        typealias getQueryExecutionContinuation = CheckedContinuation<GetQueryExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getQueryExecutionContinuation) in
            getQueryExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Streams the results of a single query execution specified by
    ///                 QueryExecutionId from the Athena query results location in
    ///                 Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results in the Amazon Athena User Guide. This request does not execute the query
    ///             but returns results. Use StartQueryExecution to run a query.
    ///         To stream query results successfully, the IAM principal with permission to call
    ///                 GetQueryResults also must have permissions to the Amazon S3
    ///             GetObject action for the Athena query results location.
    ///
    ///             IAM principals with permission to the Amazon S3
    ///                 GetObject action for the query results location are able to retrieve
    ///                 query results from Amazon S3 even if permission to the
    ///                     GetQueryResults action is denied. To restrict user or role access,
    ///                 ensure that Amazon S3 permissions to the Athena query location
    ///                 are denied.
    ///
    func getQueryResults(input: GetQueryResultsInput) async throws -> GetQueryResultsOutputResponse
    {
        typealias getQueryResultsContinuation = CheckedContinuation<GetQueryResultsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getQueryResultsContinuation) in
            getQueryResults(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns table metadata for the specified catalog, database, and table.
    func getTableMetadata(input: GetTableMetadataInput) async throws -> GetTableMetadataOutputResponse
    {
        typealias getTableMetadataContinuation = CheckedContinuation<GetTableMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTableMetadataContinuation) in
            getTableMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the workgroup with the specified name.
    func getWorkGroup(input: GetWorkGroupInput) async throws -> GetWorkGroupOutputResponse
    {
        typealias getWorkGroupContinuation = CheckedContinuation<GetWorkGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWorkGroupContinuation) in
            getWorkGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the data catalogs in the current Amazon Web Services account.
    func listDataCatalogs(input: ListDataCatalogsInput) async throws -> ListDataCatalogsOutputResponse
    {
        typealias listDataCatalogsContinuation = CheckedContinuation<ListDataCatalogsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDataCatalogsContinuation) in
            listDataCatalogs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the databases in the specified data catalog.
    func listDatabases(input: ListDatabasesInput) async throws -> ListDatabasesOutputResponse
    {
        typealias listDatabasesContinuation = CheckedContinuation<ListDatabasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDatabasesContinuation) in
            listDatabases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of engine versions that are available to choose from, including the
    ///             Auto option.
    func listEngineVersions(input: ListEngineVersionsInput) async throws -> ListEngineVersionsOutputResponse
    {
        typealias listEngineVersionsContinuation = CheckedContinuation<ListEngineVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEngineVersionsContinuation) in
            listEngineVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides a list of available query IDs only for queries saved in the specified
    ///             workgroup. Requires that you have access to the specified workgroup. If a workgroup is
    ///             not specified, lists the saved queries for the primary workgroup.
    ///         For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples in the Amazon Athena User
    ///             Guide.
    func listNamedQueries(input: ListNamedQueriesInput) async throws -> ListNamedQueriesOutputResponse
    {
        typealias listNamedQueriesContinuation = CheckedContinuation<ListNamedQueriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNamedQueriesContinuation) in
            listNamedQueries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the prepared statements in the specfied workgroup.
    func listPreparedStatements(input: ListPreparedStatementsInput) async throws -> ListPreparedStatementsOutputResponse
    {
        typealias listPreparedStatementsContinuation = CheckedContinuation<ListPreparedStatementsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPreparedStatementsContinuation) in
            listPreparedStatements(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides a list of available query execution IDs for the queries in the specified
    ///             workgroup. If a workgroup is not specified, returns a list of query execution IDs for
    ///             the primary workgroup. Requires you to have access to the workgroup in which the queries
    ///             ran.
    ///         For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples in the Amazon Athena User
    ///             Guide.
    func listQueryExecutions(input: ListQueryExecutionsInput) async throws -> ListQueryExecutionsOutputResponse
    {
        typealias listQueryExecutionsContinuation = CheckedContinuation<ListQueryExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listQueryExecutionsContinuation) in
            listQueryExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the metadata for the tables in the specified data catalog database.
    func listTableMetadata(input: ListTableMetadataInput) async throws -> ListTableMetadataOutputResponse
    {
        typealias listTableMetadataContinuation = CheckedContinuation<ListTableMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTableMetadataContinuation) in
            listTableMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags associated with an Athena workgroup or data catalog
    ///             resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists available workgroups for the account.
    func listWorkGroups(input: ListWorkGroupsInput) async throws -> ListWorkGroupsOutputResponse
    {
        typealias listWorkGroupsContinuation = CheckedContinuation<ListWorkGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWorkGroupsContinuation) in
            listWorkGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Runs the SQL query statements contained in the Query. Requires you to
    ///             have access to the workgroup in which the query ran. Running queries against an external
    ///             catalog requires GetDataCatalog permission to the catalog. For code
    ///             samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples in the Amazon Athena User
    ///             Guide.
    func startQueryExecution(input: StartQueryExecutionInput) async throws -> StartQueryExecutionOutputResponse
    {
        typealias startQueryExecutionContinuation = CheckedContinuation<StartQueryExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startQueryExecutionContinuation) in
            startQueryExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a query execution. Requires you to have access to the workgroup in which the
    ///             query ran.
    ///         For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
    ///                 Code Samples in the Amazon Athena User
    ///             Guide.
    func stopQueryExecution(input: StopQueryExecutionInput) async throws -> StopQueryExecutionOutputResponse
    {
        typealias stopQueryExecutionContinuation = CheckedContinuation<StopQueryExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopQueryExecutionContinuation) in
            stopQueryExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds one or more tags to an Athena resource. A tag is a label that you
    ///             assign to a resource. In Athena, a resource can be a workgroup or data
    ///             catalog. Each tag consists of a key and an optional value, both of which you define. For
    ///             example, you can use tags to categorize Athena workgroups or data catalogs
    ///             by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to
    ///             search and filter workgroups or data catalogs in your account. For best practices, see
    ///                 <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Tagging Best Practices. Tag keys can be from 1 to 128 UTF-8 Unicode
    ///             characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use
    ///             letters and numbers representable in UTF-8, and the following characters: + - = . _ : /
    ///             @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you
    ///             specify more than one tag, separate them by commas.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes one or more tags from a data catalog or workgroup resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the data catalog that has the specified name.
    func updateDataCatalog(input: UpdateDataCatalogInput) async throws -> UpdateDataCatalogOutputResponse
    {
        typealias updateDataCatalogContinuation = CheckedContinuation<UpdateDataCatalogOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDataCatalogContinuation) in
            updateDataCatalog(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a prepared statement.
    func updatePreparedStatement(input: UpdatePreparedStatementInput) async throws -> UpdatePreparedStatementOutputResponse
    {
        typealias updatePreparedStatementContinuation = CheckedContinuation<UpdatePreparedStatementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePreparedStatementContinuation) in
            updatePreparedStatement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the workgroup with the specified name. The workgroup's name cannot be
    ///             changed.
    func updateWorkGroup(input: UpdateWorkGroupInput) async throws -> UpdateWorkGroupOutputResponse
    {
        typealias updateWorkGroupContinuation = CheckedContinuation<UpdateWorkGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWorkGroupContinuation) in
            updateWorkGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
