// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// AWS Panorama Overview This is the AWS Panorama API Reference. For an introduction to the service, see [What is AWS Panorama?](https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html) in the AWS Panorama Developer Guide.
public protocol PanoramaClientProtocol {
    /// Creates an application instance and deploys it to a device.
    func createApplicationInstance(input: CreateApplicationInstanceInput, completion: @escaping (ClientRuntime.SdkResult<CreateApplicationInstanceOutputResponse, CreateApplicationInstanceOutputError>) -> Void)
    /// Creates a job to run on one or more devices.
    func createJobForDevices(input: CreateJobForDevicesInput, completion: @escaping (ClientRuntime.SdkResult<CreateJobForDevicesOutputResponse, CreateJobForDevicesOutputError>) -> Void)
    /// Creates a camera stream node.
    func createNodeFromTemplateJob(input: CreateNodeFromTemplateJobInput, completion: @escaping (ClientRuntime.SdkResult<CreateNodeFromTemplateJobOutputResponse, CreateNodeFromTemplateJobOutputError>) -> Void)
    /// Creates a package and storage location in an Amazon S3 access point.
    func createPackage(input: CreatePackageInput, completion: @escaping (ClientRuntime.SdkResult<CreatePackageOutputResponse, CreatePackageOutputError>) -> Void)
    /// Imports a node package.
    func createPackageImportJob(input: CreatePackageImportJobInput, completion: @escaping (ClientRuntime.SdkResult<CreatePackageImportJobOutputResponse, CreatePackageImportJobOutputError>) -> Void)
    /// Deletes a device.
    func deleteDevice(input: DeleteDeviceInput, completion: @escaping (ClientRuntime.SdkResult<DeleteDeviceOutputResponse, DeleteDeviceOutputError>) -> Void)
    /// Deletes a package.
    func deletePackage(input: DeletePackageInput, completion: @escaping (ClientRuntime.SdkResult<DeletePackageOutputResponse, DeletePackageOutputError>) -> Void)
    /// Deregisters a package version.
    func deregisterPackageVersion(input: DeregisterPackageVersionInput, completion: @escaping (ClientRuntime.SdkResult<DeregisterPackageVersionOutputResponse, DeregisterPackageVersionOutputError>) -> Void)
    /// Returns information about an application instance on a device.
    func describeApplicationInstance(input: DescribeApplicationInstanceInput, completion: @escaping (ClientRuntime.SdkResult<DescribeApplicationInstanceOutputResponse, DescribeApplicationInstanceOutputError>) -> Void)
    /// Returns information about an application instance's configuration manifest.
    func describeApplicationInstanceDetails(input: DescribeApplicationInstanceDetailsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeApplicationInstanceDetailsOutputResponse, DescribeApplicationInstanceDetailsOutputError>) -> Void)
    /// Returns information about a device.
    func describeDevice(input: DescribeDeviceInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDeviceOutputResponse, DescribeDeviceOutputError>) -> Void)
    /// Returns information about a device job.
    func describeDeviceJob(input: DescribeDeviceJobInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDeviceJobOutputResponse, DescribeDeviceJobOutputError>) -> Void)
    /// Returns information about a node.
    func describeNode(input: DescribeNodeInput, completion: @escaping (ClientRuntime.SdkResult<DescribeNodeOutputResponse, DescribeNodeOutputError>) -> Void)
    /// Returns information about a job to create a camera stream node.
    func describeNodeFromTemplateJob(input: DescribeNodeFromTemplateJobInput, completion: @escaping (ClientRuntime.SdkResult<DescribeNodeFromTemplateJobOutputResponse, DescribeNodeFromTemplateJobOutputError>) -> Void)
    /// Returns information about a package.
    func describePackage(input: DescribePackageInput, completion: @escaping (ClientRuntime.SdkResult<DescribePackageOutputResponse, DescribePackageOutputError>) -> Void)
    /// Returns information about a package import job.
    func describePackageImportJob(input: DescribePackageImportJobInput, completion: @escaping (ClientRuntime.SdkResult<DescribePackageImportJobOutputResponse, DescribePackageImportJobOutputError>) -> Void)
    /// Returns information about a package version.
    func describePackageVersion(input: DescribePackageVersionInput, completion: @escaping (ClientRuntime.SdkResult<DescribePackageVersionOutputResponse, DescribePackageVersionOutputError>) -> Void)
    /// Returns a list of application instance dependencies.
    func listApplicationInstanceDependencies(input: ListApplicationInstanceDependenciesInput, completion: @escaping (ClientRuntime.SdkResult<ListApplicationInstanceDependenciesOutputResponse, ListApplicationInstanceDependenciesOutputError>) -> Void)
    /// Returns a list of application node instances.
    func listApplicationInstanceNodeInstances(input: ListApplicationInstanceNodeInstancesInput, completion: @escaping (ClientRuntime.SdkResult<ListApplicationInstanceNodeInstancesOutputResponse, ListApplicationInstanceNodeInstancesOutputError>) -> Void)
    /// Returns a list of application instances.
    func listApplicationInstances(input: ListApplicationInstancesInput, completion: @escaping (ClientRuntime.SdkResult<ListApplicationInstancesOutputResponse, ListApplicationInstancesOutputError>) -> Void)
    /// Returns a list of devices.
    func listDevices(input: ListDevicesInput, completion: @escaping (ClientRuntime.SdkResult<ListDevicesOutputResponse, ListDevicesOutputError>) -> Void)
    /// Returns a list of jobs.
    func listDevicesJobs(input: ListDevicesJobsInput, completion: @escaping (ClientRuntime.SdkResult<ListDevicesJobsOutputResponse, ListDevicesJobsOutputError>) -> Void)
    /// Returns a list of camera stream node jobs.
    func listNodeFromTemplateJobs(input: ListNodeFromTemplateJobsInput, completion: @escaping (ClientRuntime.SdkResult<ListNodeFromTemplateJobsOutputResponse, ListNodeFromTemplateJobsOutputError>) -> Void)
    /// Returns a list of nodes.
    func listNodes(input: ListNodesInput, completion: @escaping (ClientRuntime.SdkResult<ListNodesOutputResponse, ListNodesOutputError>) -> Void)
    /// Returns a list of package import jobs.
    func listPackageImportJobs(input: ListPackageImportJobsInput, completion: @escaping (ClientRuntime.SdkResult<ListPackageImportJobsOutputResponse, ListPackageImportJobsOutputError>) -> Void)
    /// Returns a list of packages.
    func listPackages(input: ListPackagesInput, completion: @escaping (ClientRuntime.SdkResult<ListPackagesOutputResponse, ListPackagesOutputError>) -> Void)
    /// Returns a list of tags for a resource.
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// Creates a device and returns a configuration archive. The configuration archive is a ZIP file that contains a provisioning certificate that is valid for 5 minutes. Transfer the configuration archive to the device with the included USB storage device within 5 minutes.
    func provisionDevice(input: ProvisionDeviceInput, completion: @escaping (ClientRuntime.SdkResult<ProvisionDeviceOutputResponse, ProvisionDeviceOutputError>) -> Void)
    /// Registers a package version.
    func registerPackageVersion(input: RegisterPackageVersionInput, completion: @escaping (ClientRuntime.SdkResult<RegisterPackageVersionOutputResponse, RegisterPackageVersionOutputError>) -> Void)
    /// Removes an application instance.
    func removeApplicationInstance(input: RemoveApplicationInstanceInput, completion: @escaping (ClientRuntime.SdkResult<RemoveApplicationInstanceOutputResponse, RemoveApplicationInstanceOutputError>) -> Void)
    /// Tags a resource.
    func tagResource(input: TagResourceInput, completion: @escaping (ClientRuntime.SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// Removes tags from a resource.
    func untagResource(input: UntagResourceInput, completion: @escaping (ClientRuntime.SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// Updates a device's metadata.
    func updateDeviceMetadata(input: UpdateDeviceMetadataInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDeviceMetadataOutputResponse, UpdateDeviceMetadataOutputError>) -> Void)
}

public enum PanoramaClientTypes {}
