// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ApplicationInsightsClient {
    /// Adds an application that is created from a resource group.
    func createApplication(input: CreateApplicationInput) async throws -> CreateApplicationOutputResponse
    {
        typealias createApplicationContinuation = CheckedContinuation<CreateApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createApplicationContinuation) in
            createApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a custom component by grouping similar standalone instances to monitor.
    func createComponent(input: CreateComponentInput) async throws -> CreateComponentOutputResponse
    {
        typealias createComponentContinuation = CheckedContinuation<CreateComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createComponentContinuation) in
            createComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds an log pattern to a LogPatternSet.
    func createLogPattern(input: CreateLogPatternInput) async throws -> CreateLogPatternOutputResponse
    {
        typealias createLogPatternContinuation = CheckedContinuation<CreateLogPatternOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createLogPatternContinuation) in
            createLogPattern(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified application from monitoring. Does not delete the application.
    func deleteApplication(input: DeleteApplicationInput) async throws -> DeleteApplicationOutputResponse
    {
        typealias deleteApplicationContinuation = CheckedContinuation<DeleteApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApplicationContinuation) in
            deleteApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Ungroups a custom component. When you ungroup custom components, all applicable monitors that are set up for the component are removed and the instances revert to their standalone status.
    func deleteComponent(input: DeleteComponentInput) async throws -> DeleteComponentOutputResponse
    {
        typealias deleteComponentContinuation = CheckedContinuation<DeleteComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteComponentContinuation) in
            deleteComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified log pattern from a LogPatternSet.
    func deleteLogPattern(input: DeleteLogPatternInput) async throws -> DeleteLogPatternOutputResponse
    {
        typealias deleteLogPatternContinuation = CheckedContinuation<DeleteLogPatternOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLogPatternContinuation) in
            deleteLogPattern(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the application.
    func describeApplication(input: DescribeApplicationInput) async throws -> DescribeApplicationOutputResponse
    {
        typealias describeApplicationContinuation = CheckedContinuation<DescribeApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeApplicationContinuation) in
            describeApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a component and lists the resources that are grouped together in a component.
    func describeComponent(input: DescribeComponentInput) async throws -> DescribeComponentOutputResponse
    {
        typealias describeComponentContinuation = CheckedContinuation<DescribeComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeComponentContinuation) in
            describeComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the monitoring configuration of the component.
    func describeComponentConfiguration(input: DescribeComponentConfigurationInput) async throws -> DescribeComponentConfigurationOutputResponse
    {
        typealias describeComponentConfigurationContinuation = CheckedContinuation<DescribeComponentConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeComponentConfigurationContinuation) in
            describeComponentConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the recommended monitoring configuration of the component.
    func describeComponentConfigurationRecommendation(input: DescribeComponentConfigurationRecommendationInput) async throws -> DescribeComponentConfigurationRecommendationOutputResponse
    {
        typealias describeComponentConfigurationRecommendationContinuation = CheckedContinuation<DescribeComponentConfigurationRecommendationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeComponentConfigurationRecommendationContinuation) in
            describeComponentConfigurationRecommendation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe a specific log pattern from a LogPatternSet.
    func describeLogPattern(input: DescribeLogPatternInput) async throws -> DescribeLogPatternOutputResponse
    {
        typealias describeLogPatternContinuation = CheckedContinuation<DescribeLogPatternOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeLogPatternContinuation) in
            describeLogPattern(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an anomaly or error with the application.
    func describeObservation(input: DescribeObservationInput) async throws -> DescribeObservationOutputResponse
    {
        typealias describeObservationContinuation = CheckedContinuation<DescribeObservationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeObservationContinuation) in
            describeObservation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an application problem.
    func describeProblem(input: DescribeProblemInput) async throws -> DescribeProblemOutputResponse
    {
        typealias describeProblemContinuation = CheckedContinuation<DescribeProblemOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProblemContinuation) in
            describeProblem(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the anomalies or errors associated with the problem.
    func describeProblemObservations(input: DescribeProblemObservationsInput) async throws -> DescribeProblemObservationsOutputResponse
    {
        typealias describeProblemObservationsContinuation = CheckedContinuation<DescribeProblemObservationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProblemObservationsContinuation) in
            describeProblemObservations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the IDs of the applications that you are monitoring.
    func listApplications(input: ListApplicationsInput) async throws -> ListApplicationsOutputResponse
    {
        typealias listApplicationsContinuation = CheckedContinuation<ListApplicationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listApplicationsContinuation) in
            listApplications(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the auto-grouped, standalone, and custom components of the application.
    func listComponents(input: ListComponentsInput) async throws -> ListComponentsOutputResponse
    {
        typealias listComponentsContinuation = CheckedContinuation<ListComponentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listComponentsContinuation) in
            listComponents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the INFO, WARN, and ERROR events for periodic configuration updates performed by Application Insights. Examples of events represented are:
    ///
    /// * INFO: creating a new alarm or updating an alarm threshold.
    ///
    /// * WARN: alarm not created due to insufficient data points used to predict thresholds.
    ///
    /// * ERROR: alarm not created due to permission errors or exceeding quotas.
    func listConfigurationHistory(input: ListConfigurationHistoryInput) async throws -> ListConfigurationHistoryOutputResponse
    {
        typealias listConfigurationHistoryContinuation = CheckedContinuation<ListConfigurationHistoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConfigurationHistoryContinuation) in
            listConfigurationHistory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the log pattern sets in the specific application.
    func listLogPatternSets(input: ListLogPatternSetsInput) async throws -> ListLogPatternSetsOutputResponse
    {
        typealias listLogPatternSetsContinuation = CheckedContinuation<ListLogPatternSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLogPatternSetsContinuation) in
            listLogPatternSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the log patterns in the specific log LogPatternSet.
    func listLogPatterns(input: ListLogPatternsInput) async throws -> ListLogPatternsOutputResponse
    {
        typealias listLogPatternsContinuation = CheckedContinuation<ListLogPatternsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLogPatternsContinuation) in
            listLogPatterns(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the problems with your application.
    func listProblems(input: ListProblemsInput) async throws -> ListProblemsOutputResponse
    {
        typealias listProblemsContinuation = CheckedContinuation<ListProblemsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProblemsContinuation) in
            listProblems(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a list of the tags (keys and values) that are associated with a specified application. A tag is a label that you optionally define and associate with an application. Each tag consists of a required tag key and an optional associated tag value. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Add one or more tags (keys and values) to a specified application. A tag is a label that you optionally define and associate with an application. Tags can help you categorize and manage application in different ways, such as by purpose, owner, environment, or other criteria. Each tag consists of a required tag key and an associated tag value, both of which you define. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Remove one or more tags (keys and values) from a specified application.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the application.
    func updateApplication(input: UpdateApplicationInput) async throws -> UpdateApplicationOutputResponse
    {
        typealias updateApplicationContinuation = CheckedContinuation<UpdateApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApplicationContinuation) in
            updateApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the custom component name and/or the list of resources that make up the component.
    func updateComponent(input: UpdateComponentInput) async throws -> UpdateComponentOutputResponse
    {
        typealias updateComponentContinuation = CheckedContinuation<UpdateComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateComponentContinuation) in
            updateComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the monitoring configurations for the component. The configuration input parameter is an escaped JSON of the configuration and should match the schema of what is returned by DescribeComponentConfigurationRecommendation.
    func updateComponentConfiguration(input: UpdateComponentConfigurationInput) async throws -> UpdateComponentConfigurationOutputResponse
    {
        typealias updateComponentConfigurationContinuation = CheckedContinuation<UpdateComponentConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateComponentConfigurationContinuation) in
            updateComponentConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a log pattern to a LogPatternSet.
    func updateLogPattern(input: UpdateLogPatternInput) async throws -> UpdateLogPatternOutputResponse
    {
        typealias updateLogPatternContinuation = CheckedContinuation<UpdateLogPatternOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLogPatternContinuation) in
            updateLogPattern(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
