// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListHandshakesForOrganizationOutputResponseBody: Equatable {
    public let handshakes: [Handshake]?
    public let nextToken: String?
}

extension ListHandshakesForOrganizationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshakes = "Handshakes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakesContainer = try containerValues.decodeIfPresent([Handshake?].self, forKey: .handshakes)
        var handshakesDecoded0:[Handshake]? = nil
        if let handshakesContainer = handshakesContainer {
            handshakesDecoded0 = [Handshake]()
            for structure0 in handshakesContainer {
                if let structure0 = structure0 {
                    handshakesDecoded0?.append(structure0)
                }
            }
        }
        handshakes = handshakesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
