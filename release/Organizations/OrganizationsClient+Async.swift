// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension OrganizationsClient {
    /// Sends a response to the originator of a handshake agreeing to the action proposed by
    ///             the handshake request.
    ///         This operation can be called only by the following principals when they also have the
    ///             relevant IAM permissions:
    ///
    ///
    ///
    ///                   Invitation to join or Approve all features request handshakes: only a principal from
    ///                     the member account.
    ///                 The user who calls the API for an invitation to join must have the
    ///                         organizations:AcceptHandshake permission. If you enabled all
    ///                     features in the organization, the user must also have the
    ///                         iam:CreateServiceLinkedRole permission so that AWS Organizations can
    ///                     create the required service-linked role named AWSServiceRoleForOrganizations. For
    ///                     more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integration_services.html#orgs_integration_service-linked-roles">AWS Organizations and Service-Linked Roles in the
    ///                         AWS Organizations User Guide.
    ///
    ///
    ///
    ///                   Enable all features final confirmation
    ///                     handshake: only a principal from the management account.
    ///                 For more information about invitations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html">Inviting an AWS Account to Join Your Organization in the
    ///                         AWS Organizations User Guide. For more information about requests to
    ///                     enable all features in the organization, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features in Your Organization in
    ///                     the AWS Organizations User Guide.
    ///
    ///
    ///
    ///         After you accept a handshake, it continues to appear in the results of relevant APIs
    ///             for only 30 days. After that, it's deleted.
    func acceptHandshake(input: AcceptHandshakeInput) async throws -> AcceptHandshakeOutputResponse
    {
        typealias acceptHandshakeContinuation = CheckedContinuation<AcceptHandshakeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptHandshakeContinuation) in
            acceptHandshake(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Attaches a policy to a root, an organizational unit (OU), or an individual account.
    ///             How the policy affects accounts depends on the type of policy. Refer to the
    ///                 AWS Organizations User Guide for information about each policy type:
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY
    ///
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY
    ///
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY
    ///
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY
    ///
    ///
    ///
    ///         This operation can be called only from the organization's management account.
    func attachPolicy(input: AttachPolicyInput) async throws -> AttachPolicyOutputResponse
    {
        typealias attachPolicyContinuation = CheckedContinuation<AttachPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachPolicyContinuation) in
            attachPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels a handshake. Canceling a handshake sets the handshake state to
    ///                 CANCELED.
    ///         This operation can be called only from the account that originated the handshake. The recipient of the handshake can't cancel it, but can use DeclineHandshake instead. After a handshake is canceled, the recipient
    ///             can no longer respond to that handshake.
    ///         After you cancel a handshake, it continues to appear in the results of relevant APIs
    ///             for only 30 days. After that, it's deleted.
    func cancelHandshake(input: CancelHandshakeInput) async throws -> CancelHandshakeOutputResponse
    {
        typealias cancelHandshakeContinuation = CheckedContinuation<CancelHandshakeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelHandshakeContinuation) in
            cancelHandshake(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an AWS account that is automatically a member of the organization whose
    ///             credentials made the request. This is an asynchronous request that AWS performs in the
    ///             background. Because CreateAccount operates asynchronously, it can return a
    ///             successful completion message even though account initialization might still be in
    ///             progress. You might need to wait a few minutes before you can successfully access the
    ///             account. To check the status of the request, do one of the following:
    ///
    ///
    ///                 Use the Id member of the CreateAccountStatus
    ///                     response element from this operation to provide as a parameter to the DescribeCreateAccountStatus operation.
    ///
    ///
    ///                 Check the AWS CloudTrail log for the CreateAccountResult event. For
    ///                     information on using AWS CloudTrail with AWS Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_security_incident-response.html#orgs_cloudtrail-integration">Logging and monitoring in AWS Organizations in the
    ///                         AWS Organizations User Guide.
    ///
    ///
    ///
    ///         The user who calls the API to create an account must have the
    ///                 organizations:CreateAccount permission. If you enabled all features in
    ///             the organization, AWS Organizations creates the required service-linked role named
    ///                 AWSServiceRoleForOrganizations. For more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs">AWS Organizations and Service-Linked Roles in the
    ///                 AWS Organizations User Guide.
    ///         If the request includes tags, then the requester must have the
    ///                 organizations:TagResource permission.
    ///         AWS Organizations preconfigures the new member account with a role (named
    ///                 OrganizationAccountAccessRole by default) that grants users in the
    ///             management account administrator permissions in the new member account. Principals in
    ///             the management account can assume the role. AWS Organizations clones the company name and address
    ///             information for the new account from the organization's management account.
    ///         This operation can be called only from the organization's management account.
    ///         For more information about creating accounts, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html">Creating
    ///                 an AWS Account in Your Organization in the
    ///                 AWS Organizations User Guide.
    ///
    ///
    ///
    ///
    ///                     When you create an account in an organization using the AWS Organizations console,
    ///                         API, or CLI commands, the information required for the account to operate as
    ///                         a standalone account, such as a payment method and signing the end user
    ///                         license agreement (EULA) is not automatically
    ///                         collected. If you must remove an account from your organization later, you
    ///                         can do so only after you provide the missing information. Follow the steps
    ///                         at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization as a member account in the
    ///                             AWS Organizations User Guide.
    ///
    ///
    ///                     If you get an exception that indicates that you exceeded your account
    ///                         limits for the organization, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support.
    ///
    ///
    ///                     If you get an exception that indicates that the operation failed because
    ///                         your organization is still initializing, wait one hour and then try again.
    ///                         If the error persists, contact <a href="https://console.aws.amazon.com/support/home#/">AWS
    ///                             Support.
    ///
    ///
    ///                     Using CreateAccount to create multiple temporary accounts
    ///                         isn't recommended. You can only close an account from the Billing and Cost
    ///                         Management Console, and you must be signed in as the root user. For
    ///                         information on the requirements and process for closing an account, see
    ///                             <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html">Closing an
    ///                             AWS Account in the
    ///                         AWS Organizations User Guide.
    ///
    ///
    ///
    ///
    ///             When you create a member account with this operation, you can choose whether to
    ///                 create the account with the IAM User and Role Access to
    ///                     Billing Information switch enabled. If you enable it, IAM users and
    ///                 roles that have appropriate permissions can view billing information for the
    ///                 account. If you disable it, only the account root user can access billing
    ///                 information. For information about how to disable this switch for an account, see
    ///                     <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html">Granting
    ///                     Access to Your Billing Information and Tools.
    ///
    func createAccount(input: CreateAccountInput) async throws -> CreateAccountOutputResponse
    {
        typealias createAccountContinuation = CheckedContinuation<CreateAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAccountContinuation) in
            createAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This action is available if all of the following are true:
    ///
    ///
    ///                 You're authorized to create accounts in the AWS GovCloud (US) Region. For
    ///                     more information on the AWS GovCloud (US) Region, see the <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/welcome.html">
    ///                      AWS GovCloud User Guide.
    ///
    ///
    ///
    ///                 You already have an account in the AWS GovCloud (US) Region that is paired
    ///                     with a management account of an organization in the commercial Region.
    ///
    ///
    ///                 You call this action from the management account of your organization in the
    ///                     commercial Region.
    ///
    ///
    ///                 You have the organizations:CreateGovCloudAccount permission.
    ///
    ///
    ///
    ///         AWS Organizations automatically creates the required service-linked role named
    ///                 AWSServiceRoleForOrganizations. For more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs">AWS Organizations and Service-Linked Roles in the
    ///                 AWS Organizations User Guide.
    ///
    ///         AWS automatically enables AWS CloudTrail for AWS GovCloud (US) accounts, but you should also
    ///             do the following:
    ///
    ///
    ///                 Verify that AWS CloudTrail is enabled to store logs.
    ///
    ///
    ///                 Create an S3 bucket for AWS CloudTrail log storage.
    ///                 For more information, see <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/verifying-cloudtrail.html">Verifying AWS CloudTrail Is
    ///                         Enabled in the AWS GovCloud User Guide.
    ///
    ///
    ///
    ///         If the request includes tags, then the requester must have the
    ///                 organizations:TagResource permission. The tags are attached to the
    ///             commercial account associated with the GovCloud account, rather than the GovCloud
    ///             account itself. To add tags to the GovCloud account, call the TagResource operation in the GovCloud Region after the new GovCloud
    ///             account exists.
    ///         You call this action from the management account of your organization in the
    ///             commercial Region to create a standalone AWS account in the AWS GovCloud (US)
    ///             Region. After the account is created, the management account of an organization in the
    ///             AWS GovCloud (US) Region can invite it to that organization. For more information on
    ///             inviting standalone accounts in the AWS GovCloud (US) to join an organization, see
    ///                 <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html">AWS Organizations in
    ///             the AWS GovCloud User Guide.
    ///
    ///         Calling CreateGovCloudAccount is an asynchronous request that AWS
    ///             performs in the background. Because CreateGovCloudAccount operates
    ///             asynchronously, it can return a successful completion message even though account
    ///             initialization might still be in progress. You might need to wait a few minutes before
    ///             you can successfully access the account. To check the status of the request, do one of
    ///             the following:
    ///
    ///
    ///                 Use the OperationId response element from this operation to
    ///                     provide as a parameter to the DescribeCreateAccountStatus
    ///                     operation.
    ///
    ///
    ///                 Check the AWS CloudTrail log for the CreateAccountResult event. For
    ///                     information on using AWS CloudTrail with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html">Monitoring the Activity in Your
    ///                         Organization in the AWS Organizations User Guide.
    ///
    ///
    ///
    ///
    ///         When you call the CreateGovCloudAccount action, you create two accounts:
    ///             a standalone account in the AWS GovCloud (US) Region and an associated account in the
    ///             commercial Region for billing and support purposes. The account in the commercial Region
    ///             is automatically a member of the organization whose credentials made the request. Both
    ///             accounts are associated with the same email address.
    ///         A role is created in the new account in the commercial Region that allows the
    ///             management account in the organization in the commercial Region to assume it. An AWS
    ///             GovCloud (US) account is then created and associated with the commercial account that
    ///             you just created. A role is also created in the new AWS GovCloud (US) account that can
    ///             be assumed by the AWS GovCloud (US) account that is associated with the management
    ///             account of the commercial organization. For more information and to view a diagram that
    ///             explains how account access works, see <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html">AWS Organizations in the
    ///                 AWS GovCloud User Guide.
    ///
    ///
    ///
    ///         For more information about creating accounts, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html">Creating
    ///                 an AWS Account in Your Organization in the
    ///                 AWS Organizations User Guide.
    ///
    ///
    ///
    ///
    ///                     When you create an account in an organization using the AWS Organizations console,
    ///                         API, or CLI commands, the information required for the account to operate as
    ///                         a standalone account is not automatically collected.
    ///                         This includes a payment method and signing the end user license agreement
    ///                         (EULA). If you must remove an account from your organization later, you can
    ///                         do so only after you provide the missing information. Follow the steps at
    ///                             <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization as a member account in the
    ///                             AWS Organizations User Guide.
    ///
    ///
    ///
    ///                     If you get an exception that indicates that you exceeded your account
    ///                         limits for the organization, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support.
    ///
    ///
    ///                     If you get an exception that indicates that the operation failed because
    ///                         your organization is still initializing, wait one hour and then try again.
    ///                         If the error persists, contact <a href="https://console.aws.amazon.com/support/home#/">AWS
    ///                             Support.
    ///
    ///
    ///                     Using CreateGovCloudAccount to create multiple temporary
    ///                         accounts isn't recommended. You can only close an account from the AWS
    ///                         Billing and Cost Management console, and you must be signed in as the root
    ///                         user. For information on the requirements and process for closing an
    ///                         account, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html">Closing an AWS Account in the
    ///                             AWS Organizations User Guide.
    ///
    ///
    ///
    ///
    ///             When you create a member account with this operation, you can choose whether to
    ///                 create the account with the IAM User and Role Access to
    ///                     Billing Information switch enabled. If you enable it, IAM users and
    ///                 roles that have appropriate permissions can view billing information for the
    ///                 account. If you disable it, only the account root user can access billing
    ///                 information. For information about how to disable this switch for an account, see
    ///                     <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html">Granting
    ///                     Access to Your Billing Information and Tools.
    ///
    func createGovCloudAccount(input: CreateGovCloudAccountInput) async throws -> CreateGovCloudAccountOutputResponse
    {
        typealias createGovCloudAccountContinuation = CheckedContinuation<CreateGovCloudAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createGovCloudAccountContinuation) in
            createGovCloudAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an AWS organization. The account whose user is calling the
    ///                 CreateOrganization operation automatically becomes the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account">management account of the new organization.
    ///         This operation must be called using credentials from the account that is to become the
    ///             new organization's management account. The principal must also have the relevant IAM
    ///             permissions.
    ///         By default (or if you set the FeatureSet parameter to ALL),
    ///             the new organization is created with all features enabled and service control policies
    ///             automatically enabled in the root. If you instead choose to create the organization
    ///             supporting only the consolidated billing features by setting the FeatureSet
    ///             parameter to CONSOLIDATED_BILLING", no policy types are enabled by default,
    ///             and you can't use organization policies
    func createOrganization(input: CreateOrganizationInput) async throws -> CreateOrganizationOutputResponse
    {
        typealias createOrganizationContinuation = CheckedContinuation<CreateOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createOrganizationContinuation) in
            createOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an organizational unit (OU) within a root or parent OU. An OU is a container
    ///             for accounts that enables you to organize your accounts to apply policies according to
    ///             your business requirements. The number of levels deep that you can nest OUs is dependent
    ///             upon the policy types enabled for that root. For service control policies, the limit is
    ///             five.
    ///         For more information about OUs, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html">Managing Organizational Units in the
    ///                 AWS Organizations User Guide.
    ///
    ///         If the request includes tags, then the requester must have the
    ///                 organizations:TagResource permission.
    ///         This operation can be called only from the organization's management account.
    func createOrganizationalUnit(input: CreateOrganizationalUnitInput) async throws -> CreateOrganizationalUnitOutputResponse
    {
        typealias createOrganizationalUnitContinuation = CheckedContinuation<CreateOrganizationalUnitOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createOrganizationalUnitContinuation) in
            createOrganizationalUnit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a policy of a specified type that you can attach to a root, an organizational
    ///             unit (OU), or an individual AWS account.
    ///         For more information about policies and their use, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html">Managing
    ///                 Organization Policies.
    ///         If the request includes tags, then the requester must have the
    ///                 organizations:TagResource permission.
    ///         This operation can be called only from the organization's management account.
    func createPolicy(input: CreatePolicyInput) async throws -> CreatePolicyOutputResponse
    {
        typealias createPolicyContinuation = CheckedContinuation<CreatePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPolicyContinuation) in
            createPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Declines a handshake request. This sets the handshake state to DECLINED
    ///             and effectively deactivates the request.
    ///         This operation can be called only from the account that received the handshake. The originator of the handshake can use CancelHandshake
    ///             instead. The originator can't reactivate a declined request, but can reinitiate the
    ///             process with a new handshake request.
    ///         After you decline a handshake, it continues to appear in the results of relevant APIs
    ///             for only 30 days. After that, it's deleted.
    func declineHandshake(input: DeclineHandshakeInput) async throws -> DeclineHandshakeOutputResponse
    {
        typealias declineHandshakeContinuation = CheckedContinuation<DeclineHandshakeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: declineHandshakeContinuation) in
            declineHandshake(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the organization. You can delete an organization only by using credentials
    ///             from the management account. The organization must be empty of member accounts.
    func deleteOrganization(input: DeleteOrganizationInput) async throws -> DeleteOrganizationOutputResponse
    {
        typealias deleteOrganizationContinuation = CheckedContinuation<DeleteOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteOrganizationContinuation) in
            deleteOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an organizational unit (OU) from a root or another OU. You must first remove
    ///             all accounts and child OUs from the OU that you want to delete.
    ///         This operation can be called only from the organization's management account.
    func deleteOrganizationalUnit(input: DeleteOrganizationalUnitInput) async throws -> DeleteOrganizationalUnitOutputResponse
    {
        typealias deleteOrganizationalUnitContinuation = CheckedContinuation<DeleteOrganizationalUnitOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteOrganizationalUnitContinuation) in
            deleteOrganizationalUnit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified policy from your organization. Before you perform this
    ///             operation, you must first detach the policy from all organizational units (OUs), roots,
    ///             and accounts.
    ///         This operation can be called only from the organization's management account.
    func deletePolicy(input: DeletePolicyInput) async throws -> DeletePolicyOutputResponse
    {
        typealias deletePolicyContinuation = CheckedContinuation<DeletePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePolicyContinuation) in
            deletePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified member AWS account as a delegated administrator for the
    ///             specified AWS service.
    ///
    ///             Deregistering a delegated administrator can have unintended impacts on the
    ///                 functionality of the enabled AWS service. See the documentation for the enabled
    ///                 service before you deregister a delegated administrator so that you understand any
    ///                 potential impacts.
    ///
    ///         You can run this action only for AWS services that support this
    ///     feature. For a current list of services that support it, see the column Supports
    ///     Delegated Administrator in the table at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html">AWS Services that you can use with
    ///     AWS Organizations in the AWS Organizations User Guide.
    ///
    ///         This operation can be called only from the organization's management account.
    func deregisterDelegatedAdministrator(input: DeregisterDelegatedAdministratorInput) async throws -> DeregisterDelegatedAdministratorOutputResponse
    {
        typealias deregisterDelegatedAdministratorContinuation = CheckedContinuation<DeregisterDelegatedAdministratorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterDelegatedAdministratorContinuation) in
            deregisterDelegatedAdministrator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves AWS Organizations-related information about the specified account.
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func describeAccount(input: DescribeAccountInput) async throws -> DescribeAccountOutputResponse
    {
        typealias describeAccountContinuation = CheckedContinuation<DescribeAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountContinuation) in
            describeAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the current status of an asynchronous request to create an account.
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func describeCreateAccountStatus(input: DescribeCreateAccountStatusInput) async throws -> DescribeCreateAccountStatusOutputResponse
    {
        typealias describeCreateAccountStatusContinuation = CheckedContinuation<DescribeCreateAccountStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCreateAccountStatusContinuation) in
            describeCreateAccountStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the contents of the effective policy for specified policy type and account.
    ///             The effective policy is the aggregation of any policies of the specified type that the
    ///             account inherits, plus any policy of that type that is directly attached to the
    ///             account.
    ///         This operation applies only to policy types other than service
    ///             control policies (SCPs).
    ///         For more information about policy inheritance, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies-inheritance.html">How Policy Inheritance
    ///                 Works in the AWS Organizations User Guide.
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func describeEffectivePolicy(input: DescribeEffectivePolicyInput) async throws -> DescribeEffectivePolicyOutputResponse
    {
        typealias describeEffectivePolicyContinuation = CheckedContinuation<DescribeEffectivePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEffectivePolicyContinuation) in
            describeEffectivePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about a previously requested handshake. The handshake ID comes
    ///             from the response to the original InviteAccountToOrganization
    ///             operation that generated the handshake.
    ///         You can access handshakes that are ACCEPTED, DECLINED, or
    ///                 CANCELED for only 30 days after they change to that state. They're then
    ///             deleted and no longer accessible.
    ///         This operation can be called from any account in the organization.
    func describeHandshake(input: DescribeHandshakeInput) async throws -> DescribeHandshakeOutputResponse
    {
        typealias describeHandshakeContinuation = CheckedContinuation<DescribeHandshakeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeHandshakeContinuation) in
            describeHandshake(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about the organization that the user's account belongs
    ///             to.
    ///         This operation can be called from any account in the organization.
    ///
    ///             Even if a policy type is shown as available in the organization, you can disable
    ///                 it separately at the root level with DisablePolicyType. Use ListRoots to see the status of policy types for a specified
    ///                 root.
    ///
    func describeOrganization(input: DescribeOrganizationInput) async throws -> DescribeOrganizationOutputResponse
    {
        typealias describeOrganizationContinuation = CheckedContinuation<DescribeOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOrganizationContinuation) in
            describeOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about an organizational unit (OU).
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func describeOrganizationalUnit(input: DescribeOrganizationalUnitInput) async throws -> DescribeOrganizationalUnitOutputResponse
    {
        typealias describeOrganizationalUnitContinuation = CheckedContinuation<DescribeOrganizationalUnitOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOrganizationalUnitContinuation) in
            describeOrganizationalUnit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about a policy.
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func describePolicy(input: DescribePolicyInput) async throws -> DescribePolicyOutputResponse
    {
        typealias describePolicyContinuation = CheckedContinuation<DescribePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePolicyContinuation) in
            describePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Detaches a policy from a target root, organizational unit (OU), or account.
    ///
    ///             If the policy being detached is a service control policy (SCP), the changes to
    ///                 permissions for AWS Identity and Access Management (IAM) users and roles in affected accounts are
    ///                 immediate.
    ///
    ///         Every root, OU, and account must have at least one SCP attached. If you want to
    ///             replace the default FullAWSAccess policy with an SCP that limits the
    ///             permissions that can be delegated, you must attach the replacement SCP before you can
    ///             remove the default SCP. This is the authorization strategy of an "<a href="https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_allowlist">allow list". If you instead attach a second SCP and
    ///             leave the FullAWSAccess SCP still attached, and specify "Effect":
    ///                 "Deny" in the second SCP to override the "Effect": "Allow" in
    ///             the FullAWSAccess policy (or any other attached SCP), you're using the
    ///             authorization strategy of a "<a href="https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_denylist">deny list".
    ///         This operation can be called only from the organization's management account.
    func detachPolicy(input: DetachPolicyInput) async throws -> DetachPolicyOutputResponse
    {
        typealias detachPolicyContinuation = CheckedContinuation<DetachPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachPolicyContinuation) in
            detachPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables the integration of an AWS service (the service that is specified by
    ///                 ServicePrincipal) with AWS Organizations. When you disable integration, the
    ///             specified service no longer can create a <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">service-linked role in
    ///                 new accounts in your organization. This means the service can't
    ///             perform operations on your behalf on any new accounts in your organization. The service
    ///             can still perform operations in older accounts until the service completes its clean-up
    ///             from AWS Organizations.
    ///
    ///             We
    ///                   strongly recommend
    ///                 that
    ///                 you don't use this command to disable integration between AWS Organizations and the specified
    ///                 AWS service. Instead, use the console or commands that are provided by the
    ///                 specified service. This lets the trusted service perform any required initialization
    ///                 when enabling trusted access, such as creating any required resources and any
    ///                 required clean up of resources when disabling trusted access.
    ///             For information about how to disable trusted service access to your organization
    ///                 using the trusted service, see the Learn more link
    ///                 under the Supports Trusted Access column at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html">AWS services that you can use with AWS Organizations. on this page.
    ///             If you disable access by using this command, it causes the following actions to
    ///                 occur:
    ///
    ///
    ///                     The service can no longer create a service-linked role in the accounts in
    ///                         your organization. This means that the service can't perform operations on
    ///                         your behalf on any new accounts in your organization. The service can still
    ///                         perform operations in older accounts until the service completes its
    ///                         clean-up from AWS Organizations.
    ///
    ///
    ///                     The service can no longer perform tasks in the member accounts in the
    ///                         organization, unless those operations are explicitly permitted by the IAM
    ///                         policies that are attached to your roles. This includes any data aggregation
    ///                         from the member accounts to the management account, or to a delegated
    ///                         administrator account, where relevant.
    ///
    ///
    ///                     Some services detect this and clean up any remaining data or resources
    ///                         related to the integration, while other services stop accessing the
    ///                         organization but leave any historical data and configuration in place to
    ///                         support a possible re-enabling of the integration.
    ///
    ///
    ///             Using the other service's console or commands to disable the integration ensures
    ///                 that the other service is aware that it can clean up any resources that are required
    ///                 only for the integration. How the service cleans up its resources in the
    ///                 organization's accounts depends on that service. For more information, see the
    ///                 documentation for the other AWS service.
    ///
    ///         After you perform the DisableAWSServiceAccess operation, the specified
    ///             service can no longer perform operations in your organization's accounts
    ///         For more information about integrating other services with AWS Organizations, including the
    ///             list of services that work with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating AWS Organizations with Other
    ///                 AWS Services in the AWS Organizations User Guide.
    ///
    ///         This operation can be called only from the organization's management account.
    func disableAWSServiceAccess(input: DisableAWSServiceAccessInput) async throws -> DisableAWSServiceAccessOutputResponse
    {
        typealias disableAWSServiceAccessContinuation = CheckedContinuation<DisableAWSServiceAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableAWSServiceAccessContinuation) in
            disableAWSServiceAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables an organizational policy type in a root. A policy of a certain type can be
    ///             attached to entities in a root only if that type is enabled in the root. After you
    ///             perform this operation, you no longer can attach policies of the specified type to that
    ///             root or to any organizational unit (OU) or account in that root. You can undo this by
    ///             using the EnablePolicyType operation.
    ///         This is an asynchronous request that AWS performs in the background. If you disable
    ///             a policy type for a root, it still appears enabled for the organization if <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all features are enabled for the organization. AWS recommends that you
    ///             first use ListRoots to see the status of policy types for a specified
    ///             root, and then use this operation.
    ///         This operation can be called only from the organization's management account.
    ///          To view the status of available policy types in the organization, use DescribeOrganization.
    func disablePolicyType(input: DisablePolicyTypeInput) async throws -> DisablePolicyTypeOutputResponse
    {
        typealias disablePolicyTypeContinuation = CheckedContinuation<DisablePolicyTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disablePolicyTypeContinuation) in
            disablePolicyType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables the integration of an AWS service (the service that is specified by
    ///                 ServicePrincipal) with AWS Organizations. When you enable integration, you allow
    ///             the specified service to create a <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">service-linked role in
    ///             all the accounts in your organization. This allows the service to perform operations on
    ///             your behalf in your organization and its accounts.
    ///
    ///             We recommend that you enable integration between AWS Organizations and the specified AWS
    ///                 service by using the console or commands that are provided by the specified service.
    ///                 Doing so ensures that the service is aware that it can create the resources that are
    ///                 required for the integration. How the service creates those resources in the
    ///                 organization's accounts depends on that service. For more information, see the
    ///                 documentation for the other AWS service.
    ///
    ///         For more information about enabling services to integrate with AWS Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating AWS Organizations with Other
    ///                 AWS Services in the AWS Organizations User Guide.
    ///
    ///         This operation can be called only from the organization's management account and only
    ///             if the organization has <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">enabled all
    ///                 features.
    func enableAWSServiceAccess(input: EnableAWSServiceAccessInput) async throws -> EnableAWSServiceAccessOutputResponse
    {
        typealias enableAWSServiceAccessContinuation = CheckedContinuation<EnableAWSServiceAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableAWSServiceAccessContinuation) in
            enableAWSServiceAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables all features in an organization. This enables the use of organization policies
    ///             that can restrict the services and actions that can be called in each account. Until you
    ///             enable all features, you have access only to consolidated billing, and you can't use any
    ///             of the advanced account administration features that AWS Organizations supports. For more
    ///             information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features in Your Organization in the
    ///                 AWS Organizations User Guide.
    ///
    ///
    ///             This operation is required only for organizations that were created explicitly
    ///                 with only the consolidated billing features enabled. Calling this operation sends a
    ///                 handshake to every invited account in the organization. The feature set change can
    ///                 be finalized and the additional features enabled only after all administrators in
    ///                 the invited accounts approve the change by accepting the handshake.
    ///
    ///         After you enable all features, you can separately enable or disable individual policy
    ///             types in a root using EnablePolicyType and DisablePolicyType. To see the status of policy types in a root, use
    ///                 ListRoots.
    ///         After all invited member accounts accept the handshake, you finalize the feature set
    ///             change by accepting the handshake that contains "Action":
    ///                 "ENABLE_ALL_FEATURES". This completes the change.
    ///         After you enable all features in your organization, the management account in the
    ///             organization can apply policies on all member accounts. These policies can restrict what
    ///             users and even administrators in those accounts can do. The management account can apply
    ///             policies that prevent accounts from leaving the organization. Ensure that your account
    ///             administrators are aware of this.
    ///         This operation can be called only from the organization's management account.
    func enableAllFeatures(input: EnableAllFeaturesInput) async throws -> EnableAllFeaturesOutputResponse
    {
        typealias enableAllFeaturesContinuation = CheckedContinuation<EnableAllFeaturesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableAllFeaturesContinuation) in
            enableAllFeatures(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables a policy type in a root. After you enable a policy type in a root, you can
    ///             attach policies of that type to the root, any organizational unit (OU), or account in
    ///             that root. You can undo this by using the DisablePolicyType
    ///             operation.
    ///         This is an asynchronous request that AWS performs in the background. AWS
    ///             recommends that you first use ListRoots to see the status of policy
    ///             types for a specified root, and then use this operation.
    ///         This operation can be called only from the organization's management account.
    ///         You can enable a policy type in a root only if that policy type is available in the
    ///             organization. To view the status of available policy types in the organization, use
    ///                 DescribeOrganization.
    func enablePolicyType(input: EnablePolicyTypeInput) async throws -> EnablePolicyTypeOutputResponse
    {
        typealias enablePolicyTypeContinuation = CheckedContinuation<EnablePolicyTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enablePolicyTypeContinuation) in
            enablePolicyType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends an invitation to another account to join your organization as a member account.
    ///             AWS Organizations sends email on your behalf to the email address that is associated with the
    ///             other account's owner. The invitation is implemented as a Handshake
    ///             whose details are in the response.
    ///
    ///
    ///
    ///                     You can invite AWS accounts only from the same seller as the management
    ///                         account. For example, if your organization's management account was created
    ///                         by Amazon Internet Services Pvt. Ltd (AISPL), an AWS seller in India, you
    ///                         can invite only other AISPL accounts to your organization. You can't combine
    ///                         accounts from AISPL and AWS or from any other AWS seller. For more
    ///                         information, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/useconsolidatedbilliing-India.html">Consolidated
    ///                             Billing in India.
    ///
    ///
    ///                     If you receive an exception that indicates that you exceeded your account
    ///                         limits for the organization or that the operation failed because your
    ///                         organization is still initializing, wait one hour and then try again. If the
    ///                         error persists after an hour, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support.
    ///
    ///
    ///
    ///         If the request includes tags, then the requester must have the
    ///                 organizations:TagResource permission.
    ///         This operation can be called only from the organization's management account.
    func inviteAccountToOrganization(input: InviteAccountToOrganizationInput) async throws -> InviteAccountToOrganizationOutputResponse
    {
        typealias inviteAccountToOrganizationContinuation = CheckedContinuation<InviteAccountToOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: inviteAccountToOrganizationContinuation) in
            inviteAccountToOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a member account from its parent organization. This version of the operation
    ///             is performed by the account that wants to leave. To remove a member account as a user in
    ///             the management account, use RemoveAccountFromOrganization
    ///             instead.
    ///         This operation can be called only from a member account in the organization.
    ///
    ///
    ///
    ///                     The management account in an organization with all features enabled can
    ///                         set service control policies (SCPs) that can restrict what administrators of
    ///                         member accounts can do. This includes preventing them from successfully
    ///                         calling LeaveOrganization and leaving the organization.
    ///
    ///
    ///                     You can leave an organization as a member account only if the account is
    ///                         configured with the information required to operate as a standalone account.
    ///                         When you create an account in an organization using the AWS Organizations console,
    ///                         API, or CLI commands, the information required of standalone accounts is
    ///                             not automatically collected. For each account that
    ///                         you want to make standalone, you must perform the following steps. If any of
    ///                         the steps are already completed for this account, that step doesn't
    ///                         appear.
    ///
    ///
    ///                             Choose a support plan
    ///
    ///
    ///                             Provide and verify the required contact information
    ///
    ///
    ///                             Provide a current payment method
    ///
    ///
    ///                     AWS uses the payment method to charge for any billable (not free tier)
    ///                         AWS activity that occurs while the account isn't attached to an
    ///                         organization. Follow the steps at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization when all required account information has not
    ///                             yet been provided in the
    ///                         AWS Organizations User Guide.
    ///
    ///
    ///
    ///                     The account that you want to leave must not be a delegated administrator
    ///                         account for any AWS service enabled for your organization. If the account
    ///                         is a delegated administrator, you must first change the delegated
    ///                         administrator account to another account that is remaining in the
    ///                         organization.
    ///
    ///
    ///                     You can leave an organization only after you enable IAM user access to
    ///                         billing in your account. For more information, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate">Activating Access to the Billing and Cost Management Console in
    ///                         the AWS Billing and Cost Management User Guide.
    ///
    ///
    ///
    ///                     After the account leaves the organization, all tags that were attached to
    ///                         the account object in the organization are deleted. AWS accounts outside
    ///                         of an organization do not support tags.
    ///
    ///
    ///                     A newly created account has a waiting period before it can be removed from
    ///                         its organization. If you get an error that indicates that a wait period is
    ///                         required, then try again in a few days.
    ///
    ///
    ///
    func leaveOrganization(input: LeaveOrganizationInput) async throws -> LeaveOrganizationOutputResponse
    {
        typealias leaveOrganizationContinuation = CheckedContinuation<LeaveOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: leaveOrganizationContinuation) in
            leaveOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the AWS services that you enabled to integrate with your
    ///             organization. After a service on this list creates the resources that it requires for
    ///             the integration, it can perform operations on your organization and its accounts.
    ///         For more information about integrating other services with AWS Organizations, including the
    ///             list of services that currently work with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating AWS Organizations with Other
    ///                 AWS Services in the AWS Organizations User Guide.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listAWSServiceAccessForOrganization(input: ListAWSServiceAccessForOrganizationInput) async throws -> ListAWSServiceAccessForOrganizationOutputResponse
    {
        typealias listAWSServiceAccessForOrganizationContinuation = CheckedContinuation<ListAWSServiceAccessForOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAWSServiceAccessForOrganizationContinuation) in
            listAWSServiceAccessForOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all the accounts in the organization. To request only the accounts in a
    ///             specified root or organizational unit (OU), use the ListAccountsForParent operation instead.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listAccounts(input: ListAccountsInput) async throws -> ListAccountsOutputResponse
    {
        typealias listAccountsContinuation = CheckedContinuation<ListAccountsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAccountsContinuation) in
            listAccounts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the accounts in an organization that are contained by the specified target root
    ///             or organizational unit (OU). If you specify the root, you get a list of all the accounts
    ///             that aren't in any OU. If you specify an OU, you get a list of all the accounts in only
    ///             that OU and not in any child OUs. To get a list of all accounts in the organization, use
    ///             the ListAccounts operation.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listAccountsForParent(input: ListAccountsForParentInput) async throws -> ListAccountsForParentOutputResponse
    {
        typealias listAccountsForParentContinuation = CheckedContinuation<ListAccountsForParentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAccountsForParentContinuation) in
            listAccountsForParent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all of the organizational units (OUs) or accounts that are contained in the
    ///             specified parent OU or root. This operation, along with ListParents
    ///             enables you to traverse the tree structure that makes up this root.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listChildren(input: ListChildrenInput) async throws -> ListChildrenOutputResponse
    {
        typealias listChildrenContinuation = CheckedContinuation<ListChildrenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChildrenContinuation) in
            listChildren(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the account creation requests that match the specified status that is currently
    ///             being tracked for the organization.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listCreateAccountStatus(input: ListCreateAccountStatusInput) async throws -> ListCreateAccountStatusOutputResponse
    {
        typealias listCreateAccountStatusContinuation = CheckedContinuation<ListCreateAccountStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCreateAccountStatusContinuation) in
            listCreateAccountStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the AWS accounts that are designated as delegated administrators in this
    ///             organization.
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listDelegatedAdministrators(input: ListDelegatedAdministratorsInput) async throws -> ListDelegatedAdministratorsOutputResponse
    {
        typealias listDelegatedAdministratorsContinuation = CheckedContinuation<ListDelegatedAdministratorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDelegatedAdministratorsContinuation) in
            listDelegatedAdministrators(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List the AWS services for which the specified account is a delegated
    ///             administrator.
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listDelegatedServicesForAccount(input: ListDelegatedServicesForAccountInput) async throws -> ListDelegatedServicesForAccountOutputResponse
    {
        typealias listDelegatedServicesForAccountContinuation = CheckedContinuation<ListDelegatedServicesForAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDelegatedServicesForAccountContinuation) in
            listDelegatedServicesForAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the current handshakes that are associated with the account of the requesting
    ///             user.
    ///         Handshakes that are ACCEPTED, DECLINED, or
    ///                 CANCELED appear in the results of this API for only 30 days after
    ///             changing to that state. After that, they're deleted and no longer accessible.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called from any account in the organization.
    func listHandshakesForAccount(input: ListHandshakesForAccountInput) async throws -> ListHandshakesForAccountOutputResponse
    {
        typealias listHandshakesForAccountContinuation = CheckedContinuation<ListHandshakesForAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listHandshakesForAccountContinuation) in
            listHandshakesForAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the handshakes that are associated with the organization that the requesting
    ///             user is part of. The ListHandshakesForOrganization operation returns a list
    ///             of handshake structures. Each structure contains details and status about a
    ///             handshake.
    ///         Handshakes that are ACCEPTED, DECLINED, or
    ///                 CANCELED appear in the results of this API for only 30 days after
    ///             changing to that state. After that, they're deleted and no longer accessible.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listHandshakesForOrganization(input: ListHandshakesForOrganizationInput) async throws -> ListHandshakesForOrganizationOutputResponse
    {
        typealias listHandshakesForOrganizationContinuation = CheckedContinuation<ListHandshakesForOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listHandshakesForOrganizationContinuation) in
            listHandshakesForOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the organizational units (OUs) in a parent organizational unit or root.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listOrganizationalUnitsForParent(input: ListOrganizationalUnitsForParentInput) async throws -> ListOrganizationalUnitsForParentOutputResponse
    {
        typealias listOrganizationalUnitsForParentContinuation = CheckedContinuation<ListOrganizationalUnitsForParentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOrganizationalUnitsForParentContinuation) in
            listOrganizationalUnitsForParent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the root or organizational units (OUs) that serve as the immediate parent of the
    ///             specified child OU or account. This operation, along with ListChildren
    ///             enables you to traverse the tree structure that makes up this root.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    ///
    ///             In the current release, a child can have only a single parent.
    ///
    func listParents(input: ListParentsInput) async throws -> ListParentsOutputResponse
    {
        typealias listParentsContinuation = CheckedContinuation<ListParentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listParentsContinuation) in
            listParents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the list of all policies in an organization of a specified type.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listPolicies(input: ListPoliciesInput) async throws -> ListPoliciesOutputResponse
    {
        typealias listPoliciesContinuation = CheckedContinuation<ListPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPoliciesContinuation) in
            listPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the policies that are directly attached to the specified target root,
    ///             organizational unit (OU), or account. You must specify the policy type that you want
    ///             included in the returned list.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listPoliciesForTarget(input: ListPoliciesForTargetInput) async throws -> ListPoliciesForTargetOutputResponse
    {
        typealias listPoliciesForTargetContinuation = CheckedContinuation<ListPoliciesForTargetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPoliciesForTargetContinuation) in
            listPoliciesForTarget(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the roots that are defined in the current organization.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    ///
    ///             Policy types can be enabled and disabled in roots. This is distinct from whether
    ///                 they're available in the organization. When you enable all features, you make policy
    ///                 types available for use in that organization. Individual policy types can then be
    ///                 enabled and disabled in a root. To see the availability of a policy type in an
    ///                 organization, use DescribeOrganization.
    ///
    func listRoots(input: ListRootsInput) async throws -> ListRootsOutputResponse
    {
        typealias listRootsContinuation = CheckedContinuation<ListRootsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRootsContinuation) in
            listRoots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists tags that are attached to the specified resource.
    ///         You can attach tags to the following resources in AWS Organizations.
    ///
    ///
    ///                 AWS account
    ///
    ///
    ///                 Organization root
    ///
    ///
    ///                 Organizational unit (OU)
    ///
    ///
    ///                 Policy (any type)
    ///
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all the roots, organizational units (OUs), and accounts that the specified
    ///             policy is attached to.
    ///
    ///             Always check the NextToken response parameter
    /// for a null value when calling a List* operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// NextToken response parameter value is null
    ///                only
    /// when there are no more results to display.
    ///
    ///         This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.
    func listTargetsForPolicy(input: ListTargetsForPolicyInput) async throws -> ListTargetsForPolicyOutputResponse
    {
        typealias listTargetsForPolicyContinuation = CheckedContinuation<ListTargetsForPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTargetsForPolicyContinuation) in
            listTargetsForPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Moves an account from its current source parent root or organizational unit (OU) to
    ///             the specified destination parent root or OU.
    ///         This operation can be called only from the organization's management account.
    func moveAccount(input: MoveAccountInput) async throws -> MoveAccountOutputResponse
    {
        typealias moveAccountContinuation = CheckedContinuation<MoveAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: moveAccountContinuation) in
            moveAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables the specified member account to administer the Organizations features of the specified
    ///             AWS service. It grants read-only access to AWS Organizations service data. The account still
    ///             requires IAM permissions to access and administer the AWS service.
    ///         You can run this action only for AWS services that support this
    ///     feature. For a current list of services that support it, see the column Supports
    ///     Delegated Administrator in the table at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html">AWS Services that you can use with
    ///     AWS Organizations in the AWS Organizations User Guide.
    ///
    ///         This operation can be called only from the organization's management account.
    func registerDelegatedAdministrator(input: RegisterDelegatedAdministratorInput) async throws -> RegisterDelegatedAdministratorOutputResponse
    {
        typealias registerDelegatedAdministratorContinuation = CheckedContinuation<RegisterDelegatedAdministratorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerDelegatedAdministratorContinuation) in
            registerDelegatedAdministrator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified account from the organization.
    ///         The removed account becomes a standalone account that isn't a member of any
    ///             organization. It's no longer subject to any policies and is responsible for its own bill
    ///             payments. The organization's management account is no longer charged for any expenses
    ///             accrued by the member account after it's removed from the organization.
    ///         This operation can be called only from the organization's management account. Member accounts can remove themselves with LeaveOrganization instead.
    ///
    ///
    ///
    ///                     You can remove an account from your organization only if the account is
    ///                         configured with the information required to operate as a standalone account.
    ///                         When you create an account in an organization using the AWS Organizations console,
    ///                         API, or CLI commands, the information required of standalone accounts is
    ///                             not automatically collected. For an account that
    ///                         you want to make standalone, you must choose a support plan, provide and
    ///                         verify the required contact information, and provide a current payment
    ///                         method. AWS uses the payment method to charge for any billable (not free
    ///                         tier) AWS activity that occurs while the account isn't attached to an
    ///                         organization. To remove an account that doesn't yet have this information,
    ///                         you must sign in as the member account and follow the steps at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization when all required account information has not
    ///                             yet been provided in the
    ///                         AWS Organizations User Guide.
    ///
    ///
    ///
    ///                     The account that you want to leave must not be a delegated administrator
    ///                         account for any AWS service enabled for your organization. If the account
    ///                         is a delegated administrator, you must first change the delegated
    ///                         administrator account to another account that is remaining in the
    ///                         organization.
    ///
    ///
    ///                     After the account leaves the organization, all tags that were attached to
    ///                         the account object in the organization are deleted. AWS accounts outside
    ///                         of an organization do not support tags.
    ///
    ///
    ///
    func removeAccountFromOrganization(input: RemoveAccountFromOrganizationInput) async throws -> RemoveAccountFromOrganizationOutputResponse
    {
        typealias removeAccountFromOrganizationContinuation = CheckedContinuation<RemoveAccountFromOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeAccountFromOrganizationContinuation) in
            removeAccountFromOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds one or more tags to the specified resource.
    ///         Currently, you can attach tags to the following resources in AWS Organizations.
    ///
    ///
    ///                 AWS account
    ///
    ///
    ///                 Organization root
    ///
    ///
    ///                 Organizational unit (OU)
    ///
    ///
    ///                 Policy (any type)
    ///
    ///
    ///         This operation can be called only from the organization's management account.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes any tags with the specified keys from the specified resource.
    ///         You can attach tags to the following resources in AWS Organizations.
    ///
    ///
    ///                 AWS account
    ///
    ///
    ///                 Organization root
    ///
    ///
    ///                 Organizational unit (OU)
    ///
    ///
    ///                 Policy (any type)
    ///
    ///
    ///         This operation can be called only from the organization's management account.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Renames the specified organizational unit (OU). The ID and ARN don't change. The child
    ///             OUs and accounts remain in place, and any attached policies of the OU remain
    ///             attached.
    ///         This operation can be called only from the organization's management account.
    func updateOrganizationalUnit(input: UpdateOrganizationalUnitInput) async throws -> UpdateOrganizationalUnitOutputResponse
    {
        typealias updateOrganizationalUnitContinuation = CheckedContinuation<UpdateOrganizationalUnitOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateOrganizationalUnitContinuation) in
            updateOrganizationalUnit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing policy with a new name, description, or content. If you don't
    ///             supply any parameter, that value remains unchanged. You can't change a policy's
    ///             type.
    ///         This operation can be called only from the organization's management account.
    func updatePolicy(input: UpdatePolicyInput) async throws -> UpdatePolicyOutputResponse
    {
        typealias updatePolicyContinuation = CheckedContinuation<UpdatePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePolicyContinuation) in
            updatePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
