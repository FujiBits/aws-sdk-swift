// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFunctionsOutputResponseBody: Equatable {
    public let functions: [FunctionConfiguration]?
    public let nextToken: String?
}

extension ListFunctionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case functions
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionsContainer = try containerValues.decodeIfPresent([FunctionConfiguration?].self, forKey: .functions)
        var functionsDecoded0:[FunctionConfiguration]? = nil
        if let functionsContainer = functionsContainer {
            functionsDecoded0 = [FunctionConfiguration]()
            for structure0 in functionsContainer {
                if let structure0 = structure0 {
                    functionsDecoded0?.append(structure0)
                }
            }
        }
        functions = functionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
