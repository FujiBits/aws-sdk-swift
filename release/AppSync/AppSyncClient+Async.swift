// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AppSyncClient {
    /// <p>Creates a cache for the GraphQL API.</p>
    func createApiCache(input: CreateApiCacheInput) async throws -> CreateApiCacheOutputResponse
    {
        typealias createApiCacheContinuation = CheckedContinuation<CreateApiCacheOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createApiCacheContinuation) in
            createApiCache(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a unique key that you can distribute to clients who are executing your
    ///          API.</p>
    func createApiKey(input: CreateApiKeyInput) async throws -> CreateApiKeyOutputResponse
    {
        typealias createApiKeyContinuation = CheckedContinuation<CreateApiKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createApiKeyContinuation) in
            createApiKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a <code>DataSource</code> object.</p>
    func createDataSource(input: CreateDataSourceInput) async throws -> CreateDataSourceOutputResponse
    {
        typealias createDataSourceContinuation = CheckedContinuation<CreateDataSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDataSourceContinuation) in
            createDataSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a <code>Function</code> object.</p>
    ///          <p>A function is a reusable entity. Multiple functions can be used to compose the resolver
    ///          logic.</p>
    func createFunction(input: CreateFunctionInput) async throws -> CreateFunctionOutputResponse
    {
        typealias createFunctionContinuation = CheckedContinuation<CreateFunctionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFunctionContinuation) in
            createFunction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a <code>GraphqlApi</code> object.</p>
    func createGraphqlApi(input: CreateGraphqlApiInput) async throws -> CreateGraphqlApiOutputResponse
    {
        typealias createGraphqlApiContinuation = CheckedContinuation<CreateGraphqlApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createGraphqlApiContinuation) in
            createGraphqlApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a <code>Resolver</code> object.</p>
    ///          <p>A resolver converts incoming requests into a format that a data source can understand
    ///          and converts the data source's responses into GraphQL.</p>
    func createResolver(input: CreateResolverInput) async throws -> CreateResolverOutputResponse
    {
        typealias createResolverContinuation = CheckedContinuation<CreateResolverOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createResolverContinuation) in
            createResolver(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a <code>Type</code> object.</p>
    func createType(input: CreateTypeInput) async throws -> CreateTypeOutputResponse
    {
        typealias createTypeContinuation = CheckedContinuation<CreateTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTypeContinuation) in
            createType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an <code>ApiCache</code> object.</p>
    func deleteApiCache(input: DeleteApiCacheInput) async throws -> DeleteApiCacheOutputResponse
    {
        typealias deleteApiCacheContinuation = CheckedContinuation<DeleteApiCacheOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApiCacheContinuation) in
            deleteApiCache(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an API key.</p>
    func deleteApiKey(input: DeleteApiKeyInput) async throws -> DeleteApiKeyOutputResponse
    {
        typealias deleteApiKeyContinuation = CheckedContinuation<DeleteApiKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApiKeyContinuation) in
            deleteApiKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a <code>DataSource</code> object.</p>
    func deleteDataSource(input: DeleteDataSourceInput) async throws -> DeleteDataSourceOutputResponse
    {
        typealias deleteDataSourceContinuation = CheckedContinuation<DeleteDataSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDataSourceContinuation) in
            deleteDataSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a <code>Function</code>.</p>
    func deleteFunction(input: DeleteFunctionInput) async throws -> DeleteFunctionOutputResponse
    {
        typealias deleteFunctionContinuation = CheckedContinuation<DeleteFunctionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFunctionContinuation) in
            deleteFunction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a <code>GraphqlApi</code> object.</p>
    func deleteGraphqlApi(input: DeleteGraphqlApiInput) async throws -> DeleteGraphqlApiOutputResponse
    {
        typealias deleteGraphqlApiContinuation = CheckedContinuation<DeleteGraphqlApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGraphqlApiContinuation) in
            deleteGraphqlApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a <code>Resolver</code> object.</p>
    func deleteResolver(input: DeleteResolverInput) async throws -> DeleteResolverOutputResponse
    {
        typealias deleteResolverContinuation = CheckedContinuation<DeleteResolverOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteResolverContinuation) in
            deleteResolver(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a <code>Type</code> object.</p>
    func deleteType(input: DeleteTypeInput) async throws -> DeleteTypeOutputResponse
    {
        typealias deleteTypeContinuation = CheckedContinuation<DeleteTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTypeContinuation) in
            deleteType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Flushes an <code>ApiCache</code> object.</p>
    func flushApiCache(input: FlushApiCacheInput) async throws -> FlushApiCacheOutputResponse
    {
        typealias flushApiCacheContinuation = CheckedContinuation<FlushApiCacheOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: flushApiCacheContinuation) in
            flushApiCache(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves an <code>ApiCache</code> object.</p>
    func getApiCache(input: GetApiCacheInput) async throws -> GetApiCacheOutputResponse
    {
        typealias getApiCacheContinuation = CheckedContinuation<GetApiCacheOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApiCacheContinuation) in
            getApiCache(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a <code>DataSource</code> object.</p>
    func getDataSource(input: GetDataSourceInput) async throws -> GetDataSourceOutputResponse
    {
        typealias getDataSourceContinuation = CheckedContinuation<GetDataSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDataSourceContinuation) in
            getDataSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Get a <code>Function</code>.</p>
    func getFunction(input: GetFunctionInput) async throws -> GetFunctionOutputResponse
    {
        typealias getFunctionContinuation = CheckedContinuation<GetFunctionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFunctionContinuation) in
            getFunction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a <code>GraphqlApi</code> object.</p>
    func getGraphqlApi(input: GetGraphqlApiInput) async throws -> GetGraphqlApiOutputResponse
    {
        typealias getGraphqlApiContinuation = CheckedContinuation<GetGraphqlApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getGraphqlApiContinuation) in
            getGraphqlApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the introspection schema for a GraphQL API.</p>
    func getIntrospectionSchema(input: GetIntrospectionSchemaInput) async throws -> GetIntrospectionSchemaOutputResponse
    {
        typealias getIntrospectionSchemaContinuation = CheckedContinuation<GetIntrospectionSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIntrospectionSchemaContinuation) in
            getIntrospectionSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a <code>Resolver</code> object.</p>
    func getResolver(input: GetResolverInput) async throws -> GetResolverOutputResponse
    {
        typealias getResolverContinuation = CheckedContinuation<GetResolverOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResolverContinuation) in
            getResolver(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the current status of a schema creation operation.</p>
    func getSchemaCreationStatus(input: GetSchemaCreationStatusInput) async throws -> GetSchemaCreationStatusOutputResponse
    {
        typealias getSchemaCreationStatusContinuation = CheckedContinuation<GetSchemaCreationStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSchemaCreationStatusContinuation) in
            getSchemaCreationStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a <code>Type</code> object.</p>
    func getType(input: GetTypeInput) async throws -> GetTypeOutputResponse
    {
        typealias getTypeContinuation = CheckedContinuation<GetTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTypeContinuation) in
            getType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the API keys for a given API.</p>
    ///          <note>
    ///             <p>API keys are deleted automatically 60 days after they expire. However, they may
    ///             still be included in the response until they have actually been deleted. You can safely
    ///             call <code>DeleteApiKey</code> to manually delete a key before it's automatically
    ///             deleted.</p>
    ///          </note>
    func listApiKeys(input: ListApiKeysInput) async throws -> ListApiKeysOutputResponse
    {
        typealias listApiKeysContinuation = CheckedContinuation<ListApiKeysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listApiKeysContinuation) in
            listApiKeys(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the data sources for a given API.</p>
    func listDataSources(input: ListDataSourcesInput) async throws -> ListDataSourcesOutputResponse
    {
        typealias listDataSourcesContinuation = CheckedContinuation<ListDataSourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDataSourcesContinuation) in
            listDataSources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List multiple functions.</p>
    func listFunctions(input: ListFunctionsInput) async throws -> ListFunctionsOutputResponse
    {
        typealias listFunctionsContinuation = CheckedContinuation<ListFunctionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFunctionsContinuation) in
            listFunctions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists your GraphQL APIs.</p>
    func listGraphqlApis(input: ListGraphqlApisInput) async throws -> ListGraphqlApisOutputResponse
    {
        typealias listGraphqlApisContinuation = CheckedContinuation<ListGraphqlApisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listGraphqlApisContinuation) in
            listGraphqlApis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the resolvers for a given API and type.</p>
    func listResolvers(input: ListResolversInput) async throws -> ListResolversOutputResponse
    {
        typealias listResolversContinuation = CheckedContinuation<ListResolversOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResolversContinuation) in
            listResolvers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the resolvers that are associated with a specific function.</p>
    func listResolversByFunction(input: ListResolversByFunctionInput) async throws -> ListResolversByFunctionOutputResponse
    {
        typealias listResolversByFunctionContinuation = CheckedContinuation<ListResolversByFunctionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResolversByFunctionContinuation) in
            listResolversByFunction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the tags for a resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the types for a given API.</p>
    func listTypes(input: ListTypesInput) async throws -> ListTypesOutputResponse
    {
        typealias listTypesContinuation = CheckedContinuation<ListTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTypesContinuation) in
            listTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds a new schema to your GraphQL API.</p>
    ///          <p>This operation is asynchronous. Use  to
    ///          determine when it has completed.</p>
    func startSchemaCreation(input: StartSchemaCreationInput) async throws -> StartSchemaCreationOutputResponse
    {
        typealias startSchemaCreationContinuation = CheckedContinuation<StartSchemaCreationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startSchemaCreationContinuation) in
            startSchemaCreation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Tags a resource with user-supplied tags.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Untags a resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the cache for the GraphQL API.</p>
    func updateApiCache(input: UpdateApiCacheInput) async throws -> UpdateApiCacheOutputResponse
    {
        typealias updateApiCacheContinuation = CheckedContinuation<UpdateApiCacheOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApiCacheContinuation) in
            updateApiCache(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an API key. The key can be updated while it is not deleted.</p>
    func updateApiKey(input: UpdateApiKeyInput) async throws -> UpdateApiKeyOutputResponse
    {
        typealias updateApiKeyContinuation = CheckedContinuation<UpdateApiKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApiKeyContinuation) in
            updateApiKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a <code>DataSource</code> object.</p>
    func updateDataSource(input: UpdateDataSourceInput) async throws -> UpdateDataSourceOutputResponse
    {
        typealias updateDataSourceContinuation = CheckedContinuation<UpdateDataSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDataSourceContinuation) in
            updateDataSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a <code>Function</code> object.</p>
    func updateFunction(input: UpdateFunctionInput) async throws -> UpdateFunctionOutputResponse
    {
        typealias updateFunctionContinuation = CheckedContinuation<UpdateFunctionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFunctionContinuation) in
            updateFunction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a <code>GraphqlApi</code> object.</p>
    func updateGraphqlApi(input: UpdateGraphqlApiInput) async throws -> UpdateGraphqlApiOutputResponse
    {
        typealias updateGraphqlApiContinuation = CheckedContinuation<UpdateGraphqlApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGraphqlApiContinuation) in
            updateGraphqlApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a <code>Resolver</code> object.</p>
    func updateResolver(input: UpdateResolverInput) async throws -> UpdateResolverOutputResponse
    {
        typealias updateResolverContinuation = CheckedContinuation<UpdateResolverOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateResolverContinuation) in
            updateResolver(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a <code>Type</code> object.</p>
    func updateType(input: UpdateTypeInput) async throws -> UpdateTypeOutputResponse
    {
        typealias updateTypeContinuation = CheckedContinuation<UpdateTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTypeContinuation) in
            updateType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
