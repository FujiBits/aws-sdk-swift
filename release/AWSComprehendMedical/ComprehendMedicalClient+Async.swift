// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ComprehendMedicalClient {
    /// Gets the properties associated with a medical entities detection job. Use this operation to get the status of a detection job.
    func describeEntitiesDetectionV2Job(input: DescribeEntitiesDetectionV2JobInput) async throws -> DescribeEntitiesDetectionV2JobOutputResponse
    {
        typealias describeEntitiesDetectionV2JobContinuation = CheckedContinuation<DescribeEntitiesDetectionV2JobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEntitiesDetectionV2JobContinuation) in
            describeEntitiesDetectionV2Job(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with an InferICD10CM job. Use this operation to get the status of an inference job.
    func describeICD10CMInferenceJob(input: DescribeICD10CMInferenceJobInput) async throws -> DescribeICD10CMInferenceJobOutputResponse
    {
        typealias describeICD10CMInferenceJobContinuation = CheckedContinuation<DescribeICD10CMInferenceJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeICD10CMInferenceJobContinuation) in
            describeICD10CMInferenceJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with a protected health information (PHI) detection job. Use this operation to get the status of a detection job.
    func describePHIDetectionJob(input: DescribePHIDetectionJobInput) async throws -> DescribePHIDetectionJobOutputResponse
    {
        typealias describePHIDetectionJobContinuation = CheckedContinuation<DescribePHIDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePHIDetectionJobContinuation) in
            describePHIDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with an InferRxNorm job. Use this operation to get the status of an inference job.
    func describeRxNormInferenceJob(input: DescribeRxNormInferenceJobInput) async throws -> DescribeRxNormInferenceJobOutputResponse
    {
        typealias describeRxNormInferenceJobContinuation = CheckedContinuation<DescribeRxNormInferenceJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRxNormInferenceJobContinuation) in
            describeRxNormInferenceJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// The DetectEntities operation is deprecated. You should use the [DetectEntitiesV2] operation instead. Inspects the clinical text for a variety of medical entities and returns specific information about them such as entity category, location, and confidence score on that information .
    @available(*, deprecated, message: "This operation is deprecated, use DetectEntitiesV2 instead.")
    func detectEntities(input: DetectEntitiesInput) async throws -> DetectEntitiesOutputResponse
    {
        typealias detectEntitiesContinuation = CheckedContinuation<DetectEntitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectEntitiesContinuation) in
            detectEntities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Inspects the clinical text for a variety of medical entities and returns specific information about them such as entity category, location, and confidence score on that information. Amazon Comprehend Medical only detects medical entities in English language texts. The DetectEntitiesV2 operation replaces the [DetectEntities] operation. This new action uses a different model for determining the entities in your medical text and changes the way that some entities are returned in the output. You should use the DetectEntitiesV2 operation in all new applications. The DetectEntitiesV2 operation returns the Acuity and Direction entities as attributes instead of types.
    func detectEntitiesV2(input: DetectEntitiesV2Input) async throws -> DetectEntitiesV2OutputResponse
    {
        typealias detectEntitiesV2Continuation = CheckedContinuation<DetectEntitiesV2OutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectEntitiesV2Continuation) in
            detectEntitiesV2(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Inspects the clinical text for protected health information (PHI) entities and returns the entity category, location, and confidence score for each entity. Amazon Comprehend Medical only detects entities in English language texts.
    func detectPHI(input: DetectPHIInput) async throws -> DetectPHIOutputResponse
    {
        typealias detectPHIContinuation = CheckedContinuation<DetectPHIOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectPHIContinuation) in
            detectPHI(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// InferICD10CM detects medical conditions as entities listed in a patient record and links those entities to normalized concept identifiers in the ICD-10-CM knowledge base from the Centers for Disease Control. Amazon Comprehend Medical only detects medical entities in English language texts.
    func inferICD10CM(input: InferICD10CMInput) async throws -> InferICD10CMOutputResponse
    {
        typealias inferICD10CMContinuation = CheckedContinuation<InferICD10CMOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: inferICD10CMContinuation) in
            inferICD10CM(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// InferRxNorm detects medications as entities listed in a patient record and links to the normalized concept identifiers in the RxNorm database from the National Library of Medicine. Amazon Comprehend Medical only detects medical entities in English language texts.
    func inferRxNorm(input: InferRxNormInput) async throws -> InferRxNormOutputResponse
    {
        typealias inferRxNormContinuation = CheckedContinuation<InferRxNormOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: inferRxNormContinuation) in
            inferRxNorm(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of medical entity detection jobs that you have submitted.
    func listEntitiesDetectionV2Jobs(input: ListEntitiesDetectionV2JobsInput) async throws -> ListEntitiesDetectionV2JobsOutputResponse
    {
        typealias listEntitiesDetectionV2JobsContinuation = CheckedContinuation<ListEntitiesDetectionV2JobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEntitiesDetectionV2JobsContinuation) in
            listEntitiesDetectionV2Jobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of InferICD10CM jobs that you have submitted.
    func listICD10CMInferenceJobs(input: ListICD10CMInferenceJobsInput) async throws -> ListICD10CMInferenceJobsOutputResponse
    {
        typealias listICD10CMInferenceJobsContinuation = CheckedContinuation<ListICD10CMInferenceJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listICD10CMInferenceJobsContinuation) in
            listICD10CMInferenceJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of protected health information (PHI) detection jobs that you have submitted.
    func listPHIDetectionJobs(input: ListPHIDetectionJobsInput) async throws -> ListPHIDetectionJobsOutputResponse
    {
        typealias listPHIDetectionJobsContinuation = CheckedContinuation<ListPHIDetectionJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPHIDetectionJobsContinuation) in
            listPHIDetectionJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of InferRxNorm jobs that you have submitted.
    func listRxNormInferenceJobs(input: ListRxNormInferenceJobsInput) async throws -> ListRxNormInferenceJobsOutputResponse
    {
        typealias listRxNormInferenceJobsContinuation = CheckedContinuation<ListRxNormInferenceJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRxNormInferenceJobsContinuation) in
            listRxNormInferenceJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous medical entity detection job for a collection of documents. Use the DescribeEntitiesDetectionV2Job operation to track the status of a job.
    func startEntitiesDetectionV2Job(input: StartEntitiesDetectionV2JobInput) async throws -> StartEntitiesDetectionV2JobOutputResponse
    {
        typealias startEntitiesDetectionV2JobContinuation = CheckedContinuation<StartEntitiesDetectionV2JobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startEntitiesDetectionV2JobContinuation) in
            startEntitiesDetectionV2Job(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous job to detect medical conditions and link them to the ICD-10-CM ontology. Use the DescribeICD10CMInferenceJob operation to track the status of a job.
    func startICD10CMInferenceJob(input: StartICD10CMInferenceJobInput) async throws -> StartICD10CMInferenceJobOutputResponse
    {
        typealias startICD10CMInferenceJobContinuation = CheckedContinuation<StartICD10CMInferenceJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startICD10CMInferenceJobContinuation) in
            startICD10CMInferenceJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous job to detect protected health information (PHI). Use the DescribePHIDetectionJob operation to track the status of a job.
    func startPHIDetectionJob(input: StartPHIDetectionJobInput) async throws -> StartPHIDetectionJobOutputResponse
    {
        typealias startPHIDetectionJobContinuation = CheckedContinuation<StartPHIDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startPHIDetectionJobContinuation) in
            startPHIDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous job to detect medication entities and link them to the RxNorm ontology. Use the DescribeRxNormInferenceJob operation to track the status of a job.
    func startRxNormInferenceJob(input: StartRxNormInferenceJobInput) async throws -> StartRxNormInferenceJobOutputResponse
    {
        typealias startRxNormInferenceJobContinuation = CheckedContinuation<StartRxNormInferenceJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startRxNormInferenceJobContinuation) in
            startRxNormInferenceJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a medical entities detection job in progress.
    func stopEntitiesDetectionV2Job(input: StopEntitiesDetectionV2JobInput) async throws -> StopEntitiesDetectionV2JobOutputResponse
    {
        typealias stopEntitiesDetectionV2JobContinuation = CheckedContinuation<StopEntitiesDetectionV2JobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopEntitiesDetectionV2JobContinuation) in
            stopEntitiesDetectionV2Job(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops an InferICD10CM inference job in progress.
    func stopICD10CMInferenceJob(input: StopICD10CMInferenceJobInput) async throws -> StopICD10CMInferenceJobOutputResponse
    {
        typealias stopICD10CMInferenceJobContinuation = CheckedContinuation<StopICD10CMInferenceJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopICD10CMInferenceJobContinuation) in
            stopICD10CMInferenceJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a protected health information (PHI) detection job in progress.
    func stopPHIDetectionJob(input: StopPHIDetectionJobInput) async throws -> StopPHIDetectionJobOutputResponse
    {
        typealias stopPHIDetectionJobContinuation = CheckedContinuation<StopPHIDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopPHIDetectionJobContinuation) in
            stopPHIDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops an InferRxNorm inference job in progress.
    func stopRxNormInferenceJob(input: StopRxNormInferenceJobInput) async throws -> StopRxNormInferenceJobOutputResponse
    {
        typealias stopRxNormInferenceJobContinuation = CheckedContinuation<StopRxNormInferenceJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopRxNormInferenceJobContinuation) in
            stopRxNormInferenceJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
