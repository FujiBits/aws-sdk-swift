// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct BatchDeleteInputHeadersMiddleware: Middleware {
    public let id: String = "BatchDeleteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeleteInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeleteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeleteInput>
    public typealias MOutput = OperationOutput<BatchDeleteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeleteOutputError>
}

public struct BatchDeleteInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchDeleteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeleteInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeleteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeleteInput>
    public typealias MOutput = OperationOutput<BatchDeleteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeleteOutputError>
}

public struct BatchDeleteInputBodyMiddleware: Middleware {
    public let id: String = "BatchDeleteInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeleteInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeleteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeleteInput>
    public typealias MOutput = OperationOutput<BatchDeleteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeleteOutputError>
}

extension BatchDeleteInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelIds = "channelIds"
        case inputIds = "inputIds"
        case inputSecurityGroupIds = "inputSecurityGroupIds"
        case multiplexIds = "multiplexIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelIds = channelIds {
            var channelIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelIds)
            for __listof__string0 in channelIds {
                try channelIdsContainer.encode(__listof__string0)
            }
        }
        if let inputIds = inputIds {
            var inputIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputIds)
            for __listof__string0 in inputIds {
                try inputIdsContainer.encode(__listof__string0)
            }
        }
        if let inputSecurityGroupIds = inputSecurityGroupIds {
            var inputSecurityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputSecurityGroupIds)
            for __listof__string0 in inputSecurityGroupIds {
                try inputSecurityGroupIdsContainer.encode(__listof__string0)
            }
        }
        if let multiplexIds = multiplexIds {
            var multiplexIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .multiplexIds)
            for __listof__string0 in multiplexIds {
                try multiplexIdsContainer.encode(__listof__string0)
            }
        }
    }
}
