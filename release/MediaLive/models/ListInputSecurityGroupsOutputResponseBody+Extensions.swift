// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInputSecurityGroupsOutputResponseBody: Equatable {
    public let inputSecurityGroups: [InputSecurityGroup]?
    public let nextToken: String?
}

extension ListInputSecurityGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inputSecurityGroups = "inputSecurityGroups"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputSecurityGroupsContainer = try containerValues.decodeIfPresent([InputSecurityGroup?].self, forKey: .inputSecurityGroups)
        var inputSecurityGroupsDecoded0:[InputSecurityGroup]? = nil
        if let inputSecurityGroupsContainer = inputSecurityGroupsContainer {
            inputSecurityGroupsDecoded0 = [InputSecurityGroup]()
            for structure0 in inputSecurityGroupsContainer {
                if let structure0 = structure0 {
                    inputSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        inputSecurityGroups = inputSecurityGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
