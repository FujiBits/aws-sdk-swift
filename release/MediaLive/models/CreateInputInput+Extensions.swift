// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateInputInputHeadersMiddleware: Middleware {
    public let id: String = "CreateInputInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInputInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInputInput>
    public typealias MOutput = OperationOutput<CreateInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInputOutputError>
}

public struct CreateInputInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateInputInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInputInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInputInput>
    public typealias MOutput = OperationOutput<CreateInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInputOutputError>
}

public struct CreateInputInputBodyMiddleware: Middleware {
    public let id: String = "CreateInputInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInputInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInputInput>
    public typealias MOutput = OperationOutput<CreateInputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInputOutputError>
}

extension CreateInputInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case requestId = "requestId"
        case roleArn = "roleArn"
        case sources = "sources"
        case tags = "tags"
        case type = "type"
        case vpc = "vpc"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofinputdestinationrequest0 in destinations {
                try destinationsContainer.encode(__listofinputdestinationrequest0)
            }
        }
        if let inputDevices = inputDevices {
            var inputDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDevices)
            for __listofinputdevicesettings0 in inputDevices {
                try inputDevicesContainer.encode(__listofinputdevicesettings0)
            }
        }
        if let inputSecurityGroups = inputSecurityGroups {
            var inputSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputSecurityGroups)
            for __listof__string0 in inputSecurityGroups {
                try inputSecurityGroupsContainer.encode(__listof__string0)
            }
        }
        if let mediaConnectFlows = mediaConnectFlows {
            var mediaConnectFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConnectFlows)
            for __listofmediaconnectflowrequest0 in mediaConnectFlows {
                try mediaConnectFlowsContainer.encode(__listofmediaconnectflowrequest0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestId = requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for __listofinputsourcerequest0 in sources {
                try sourcesContainer.encode(__listofinputsourcerequest0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let vpc = vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }
}
