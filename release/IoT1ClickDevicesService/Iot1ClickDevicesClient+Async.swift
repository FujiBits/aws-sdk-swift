// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension Iot1ClickDevicesClient {
    /// <p>Adds device(s) to your account (i.e., claim one or more devices) if and only if you
    ///  received a claim code with the device(s).</p>
    func claimDevicesByClaimCode(input: ClaimDevicesByClaimCodeInput) async throws -> ClaimDevicesByClaimCodeOutputResponse
    {
        typealias claimDevicesByClaimCodeContinuation = CheckedContinuation<ClaimDevicesByClaimCodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: claimDevicesByClaimCodeContinuation) in
            claimDevicesByClaimCode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Given a device ID, returns a DescribeDeviceResponse object describing the
    ///  details of the device.</p>
    func describeDevice(input: DescribeDeviceInput) async throws -> DescribeDeviceOutputResponse
    {
        typealias describeDeviceContinuation = CheckedContinuation<DescribeDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDeviceContinuation) in
            describeDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Given a device ID, finalizes the claim request for the associated device.</p><note>
    ///  <p>Claiming a device consists of initiating a claim, then publishing a device event,
    ///  and finalizing the claim. For a device of type button, a device event can
    ///  be published by simply clicking the device.</p>
    ///  </note>
    func finalizeDeviceClaim(input: FinalizeDeviceClaimInput) async throws -> FinalizeDeviceClaimOutputResponse
    {
        typealias finalizeDeviceClaimContinuation = CheckedContinuation<FinalizeDeviceClaimOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: finalizeDeviceClaimContinuation) in
            finalizeDeviceClaim(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Given a device ID, returns the invokable methods associated with the device.</p>
    func getDeviceMethods(input: GetDeviceMethodsInput) async throws -> GetDeviceMethodsOutputResponse
    {
        typealias getDeviceMethodsContinuation = CheckedContinuation<GetDeviceMethodsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeviceMethodsContinuation) in
            getDeviceMethods(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Given a device ID, initiates a claim request for the associated device.</p><note>
    ///  <p>Claiming a device consists of initiating a claim, then publishing a device event,
    ///  and finalizing the claim. For a device of type button, a device event can
    ///  be published by simply clicking the device.</p>
    ///  </note>
    func initiateDeviceClaim(input: InitiateDeviceClaimInput) async throws -> InitiateDeviceClaimOutputResponse
    {
        typealias initiateDeviceClaimContinuation = CheckedContinuation<InitiateDeviceClaimOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: initiateDeviceClaimContinuation) in
            initiateDeviceClaim(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Given a device ID, issues a request to invoke a named device method (with possible
    ///  parameters). See the "Example POST" code snippet below.</p>
    func invokeDeviceMethod(input: InvokeDeviceMethodInput) async throws -> InvokeDeviceMethodOutputResponse
    {
        typealias invokeDeviceMethodContinuation = CheckedContinuation<InvokeDeviceMethodOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: invokeDeviceMethodContinuation) in
            invokeDeviceMethod(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Using a device ID, returns a DeviceEventsResponse object containing an
    ///  array of events for the device.</p>
    func listDeviceEvents(input: ListDeviceEventsInput) async throws -> ListDeviceEventsOutputResponse
    {
        typealias listDeviceEventsContinuation = CheckedContinuation<ListDeviceEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDeviceEventsContinuation) in
            listDeviceEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the 1-Click compatible devices associated with your AWS account.</p>
    func listDevices(input: ListDevicesInput) async throws -> ListDevicesOutputResponse
    {
        typealias listDevicesContinuation = CheckedContinuation<ListDevicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDevicesContinuation) in
            listDevices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the tags associated with the specified resource ARN.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds or updates the tags associated with the resource ARN. See <a href="https://docs.aws.amazon.com/iot-1-click/latest/developerguide/1click-appendix.html#1click-limits">AWS IoT 1-Click Service Limits</a> for the maximum number of tags allowed per
    ///  resource.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates a device from your AWS account using its device ID.</p>
    func unclaimDevice(input: UnclaimDeviceInput) async throws -> UnclaimDeviceOutputResponse
    {
        typealias unclaimDeviceContinuation = CheckedContinuation<UnclaimDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: unclaimDeviceContinuation) in
            unclaimDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Using tag keys, deletes the tags (key/value pairs) associated with the specified
    ///  resource ARN.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Using a Boolean value (true or false), this operation
    ///  enables or disables the device given a device ID.</p>
    func updateDeviceState(input: UpdateDeviceStateInput) async throws -> UpdateDeviceStateOutputResponse
    {
        typealias updateDeviceStateContinuation = CheckedContinuation<UpdateDeviceStateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDeviceStateContinuation) in
            updateDeviceState(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
