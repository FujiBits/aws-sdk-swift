// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension EvidentlyClient {
    /// This operation assigns feature variation to user sessions. For each user session, you pass in an entityID that represents the user. Evidently then checks the evaluation rules and assigns the variation. The first rules that are evaluated are the override rules. If the user's entityID matches an override rule, the user is served the variation specified by that rule. Next, if there is a launch of the feature, the user might be assigned to a variation in the launch. The chance of this depends on the percentage of users that are allocated to that launch. If the user is enrolled in the launch, the variation they are served depends on the allocation of the various feature variations used for the launch. If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might be assigned to a variation in the experiment. The chance of this depends on the percentage of users that are allocated to that experiment. If the user is enrolled in the experiment, the variation they are served depends on the allocation of the various feature variations used for the experiment. If the user is not assigned to a launch or experiment, they are served the default variation.
    func batchEvaluateFeature(input: BatchEvaluateFeatureInput) async throws -> BatchEvaluateFeatureOutputResponse
    {
        typealias batchEvaluateFeatureContinuation = CheckedContinuation<BatchEvaluateFeatureOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchEvaluateFeatureContinuation) in
            batchEvaluateFeature(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an Evidently experiment. Before you create an experiment, you must create the feature to use for the experiment. An experiment helps you make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it by statistical methods, and provides clear recommendations about which variations perform better. Don't use this operation to update an existing experiment. Instead, use [UpdateExperiment](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateExperiment.html).
    func createExperiment(input: CreateExperimentInput) async throws -> CreateExperimentOutputResponse
    {
        typealias createExperimentContinuation = CheckedContinuation<CreateExperimentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createExperimentContinuation) in
            createExperiment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an Evidently feature that you want to launch or test. You can define up to five variations of a feature, and use these variations in your launches and experiments. A feature must be created in a project. For information about creating a project, see [CreateProject](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html). Don't use this operation to update an existing feature. Instead, use [UpdateFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateFeature.html).
    func createFeature(input: CreateFeatureInput) async throws -> CreateFeatureOutputResponse
    {
        typealias createFeatureContinuation = CheckedContinuation<CreateFeatureOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFeatureContinuation) in
            createFeature(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a launch of a given feature. Before you create a launch, you must create the feature to use for the launch. You can use a launch to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to more users. This helps you reduce risk and identify unintended consequences before you fully launch the feature. Don't use this operation to update an existing launch. Instead, use [UpdateLaunch](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateLaunch.html).
    func createLaunch(input: CreateLaunchInput) async throws -> CreateLaunchOutputResponse
    {
        typealias createLaunchContinuation = CheckedContinuation<CreateLaunchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createLaunchContinuation) in
            createLaunch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a project, which is the logical object in Evidently that can contain features, launches, and experiments. Use projects to group similar features together. To update an existing project, use [UpdateProject](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProject.html).
    func createProject(input: CreateProjectInput) async throws -> CreateProjectOutputResponse
    {
        typealias createProjectContinuation = CheckedContinuation<CreateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProjectContinuation) in
            createProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an Evidently experiment. The feature used for the experiment is not deleted. To stop an experiment without deleting it, use [StopExperiment](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopExperiment.html).
    func deleteExperiment(input: DeleteExperimentInput) async throws -> DeleteExperimentOutputResponse
    {
        typealias deleteExperimentContinuation = CheckedContinuation<DeleteExperimentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteExperimentContinuation) in
            deleteExperiment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an Evidently feature.
    func deleteFeature(input: DeleteFeatureInput) async throws -> DeleteFeatureOutputResponse
    {
        typealias deleteFeatureContinuation = CheckedContinuation<DeleteFeatureOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFeatureContinuation) in
            deleteFeature(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an Evidently launch. The feature used for the launch is not deleted. To stop a launch without deleting it, use [StopLaunch](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopLaunch.html).
    func deleteLaunch(input: DeleteLaunchInput) async throws -> DeleteLaunchOutputResponse
    {
        typealias deleteLaunchContinuation = CheckedContinuation<DeleteLaunchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLaunchContinuation) in
            deleteLaunch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an Evidently project. Before you can delete a project, you must delete all the features that the project contains. To delete a feature, use [DeleteFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_DeleteFeature.html).
    func deleteProject(input: DeleteProjectInput) async throws -> DeleteProjectOutputResponse
    {
        typealias deleteProjectContinuation = CheckedContinuation<DeleteProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProjectContinuation) in
            deleteProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation assigns a feature variation to one given user session. You pass in an entityID that represents the user. Evidently then checks the evaluation rules and assigns the variation. The first rules that are evaluated are the override rules. If the user's entityID matches an override rule, the user is served the variation specified by that rule. Next, if there is a launch of the feature, the user might be assigned to a variation in the launch. The chance of this depends on the percentage of users that are allocated to that launch. If the user is enrolled in the launch, the variation they are served depends on the allocation of the various feature variations used for the launch. If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might be assigned to a variation in the experiment. The chance of this depends on the percentage of users that are allocated to that experiment. If the user is enrolled in the experiment, the variation they are served depends on the allocation of the various feature variations used for the experiment. If the user is not assigned to a launch or experiment, they are served the default variation.
    func evaluateFeature(input: EvaluateFeatureInput) async throws -> EvaluateFeatureOutputResponse
    {
        typealias evaluateFeatureContinuation = CheckedContinuation<EvaluateFeatureOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: evaluateFeatureContinuation) in
            evaluateFeature(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the details about one experiment. You must already know the experiment name. To retrieve a list of experiments in your account, use [ListExperiments](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListExperiments.html).
    func getExperiment(input: GetExperimentInput) async throws -> GetExperimentOutputResponse
    {
        typealias getExperimentContinuation = CheckedContinuation<GetExperimentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getExperimentContinuation) in
            getExperiment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the results of a running or completed experiment.
    func getExperimentResults(input: GetExperimentResultsInput) async throws -> GetExperimentResultsOutputResponse
    {
        typealias getExperimentResultsContinuation = CheckedContinuation<GetExperimentResultsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getExperimentResultsContinuation) in
            getExperimentResults(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the details about one feature. You must already know the feature name. To retrieve a list of features in your account, use [ListFeatures](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListFeatures.html).
    func getFeature(input: GetFeatureInput) async throws -> GetFeatureOutputResponse
    {
        typealias getFeatureContinuation = CheckedContinuation<GetFeatureOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFeatureContinuation) in
            getFeature(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the details about one launch. You must already know the launch name. To retrieve a list of launches in your account, use [ListLaunches](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListLaunches.html).
    func getLaunch(input: GetLaunchInput) async throws -> GetLaunchOutputResponse
    {
        typealias getLaunchContinuation = CheckedContinuation<GetLaunchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLaunchContinuation) in
            getLaunch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the details about one launch. You must already know the project name. To retrieve a list of projects in your account, use [ListProjects](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListProjects.html).
    func getProject(input: GetProjectInput) async throws -> GetProjectOutputResponse
    {
        typealias getProjectContinuation = CheckedContinuation<GetProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getProjectContinuation) in
            getProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns configuration details about all the experiments in the specified project.
    func listExperiments(input: ListExperimentsInput) async throws -> ListExperimentsOutputResponse
    {
        typealias listExperimentsContinuation = CheckedContinuation<ListExperimentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listExperimentsContinuation) in
            listExperiments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns configuration details about all the features in the specified project.
    func listFeatures(input: ListFeaturesInput) async throws -> ListFeaturesOutputResponse
    {
        typealias listFeaturesContinuation = CheckedContinuation<ListFeaturesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFeaturesContinuation) in
            listFeatures(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns configuration details about all the launches in the specified project.
    func listLaunches(input: ListLaunchesInput) async throws -> ListLaunchesOutputResponse
    {
        typealias listLaunchesContinuation = CheckedContinuation<ListLaunchesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLaunchesContinuation) in
            listLaunches(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns configuration details about all the projects in the current Region in your account.
    func listProjects(input: ListProjectsInput) async throws -> ListProjectsOutputResponse
    {
        typealias listProjectsContinuation = CheckedContinuation<ListProjectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProjectsContinuation) in
            listProjects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays the tags associated with an Evidently resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends performance events to Evidently. These events can be used to evaluate a launch or an experiment.
    func putProjectEvents(input: PutProjectEventsInput) async throws -> PutProjectEventsOutputResponse
    {
        typealias putProjectEventsContinuation = CheckedContinuation<PutProjectEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putProjectEventsContinuation) in
            putProjectEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an existing experiment. To create an experiment, use [CreateExperiment](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateExperiment.html).
    func startExperiment(input: StartExperimentInput) async throws -> StartExperimentOutputResponse
    {
        typealias startExperimentContinuation = CheckedContinuation<StartExperimentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startExperimentContinuation) in
            startExperiment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an existing launch. To create a launch, use [CreateLaunch](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateLaunch.html).
    func startLaunch(input: StartLaunchInput) async throws -> StartLaunchOutputResponse
    {
        typealias startLaunchContinuation = CheckedContinuation<StartLaunchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startLaunchContinuation) in
            startLaunch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops an experiment that is currently running. If you stop an experiment, you can't resume it or restart it.
    func stopExperiment(input: StopExperimentInput) async throws -> StopExperimentOutputResponse
    {
        typealias stopExperimentContinuation = CheckedContinuation<StopExperimentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopExperimentContinuation) in
            stopExperiment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a launch that is currently running. After you stop a launch, you will not be able to resume it or restart it. Also, it will not be evaluated as a rule for traffic allocation, and the traffic that was allocated to the launch will instead be available to the feature's experiment, if there is one. Otherwise, all traffic will be served the default variation after the launch is stopped.
    func stopLaunch(input: StopLaunchInput) async throws -> StopLaunchOutputResponse
    {
        typealias stopLaunchContinuation = CheckedContinuation<StopLaunchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopLaunchContinuation) in
            stopLaunch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Assigns one or more tags (key-value pairs) to the specified CloudWatch Evidently resource. Projects, features, launches, and experiments can be tagged. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can use the TagResource action with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag. You can associate as many as 50 tags with a resource. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes one or more tags from the specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an Evidently experiment. Don't use this operation to update an experiment's tag. Instead, use [TagResource](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html).
    func updateExperiment(input: UpdateExperimentInput) async throws -> UpdateExperimentOutputResponse
    {
        typealias updateExperimentContinuation = CheckedContinuation<UpdateExperimentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateExperimentContinuation) in
            updateExperiment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing feature. You can't use this operation to update the tags of an existing feature. Instead, use [TagResource](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html).
    func updateFeature(input: UpdateFeatureInput) async throws -> UpdateFeatureOutputResponse
    {
        typealias updateFeatureContinuation = CheckedContinuation<UpdateFeatureOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFeatureContinuation) in
            updateFeature(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a launch of a given feature. Don't use this operation to update the tags of an existing launch. Instead, use [TagResource](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html).
    func updateLaunch(input: UpdateLaunchInput) async throws -> UpdateLaunchOutputResponse
    {
        typealias updateLaunchContinuation = CheckedContinuation<UpdateLaunchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLaunchContinuation) in
            updateLaunch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the description of an existing project. To create a new project, use [CreateProject](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html). Don't use this operation to update the data storage options of a project. Instead, use [UpdateProjectDataDelivery](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProjectDataDelivery.html). Don't use this operation to update the tags of a project. Instead, use [TagResource](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html).
    func updateProject(input: UpdateProjectInput) async throws -> UpdateProjectOutputResponse
    {
        typealias updateProjectContinuation = CheckedContinuation<UpdateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProjectContinuation) in
            updateProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the data storage options for this project. If you store evaluation events, you an keep them and analyze them on your own. If you choose not to store evaluation events, Evidently deletes them after using them to produce metrics and other experiment results that you can view. You can't specify both cloudWatchLogs and s3Destination in the same operation.
    func updateProjectDataDelivery(input: UpdateProjectDataDeliveryInput) async throws -> UpdateProjectDataDeliveryOutputResponse
    {
        typealias updateProjectDataDeliveryContinuation = CheckedContinuation<UpdateProjectDataDeliveryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProjectDataDeliveryContinuation) in
            updateProjectDataDelivery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
