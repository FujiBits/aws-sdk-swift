// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension PinpointEmailClient {
    /// Create a configuration set. Configuration sets are groups of
    ///             rules that you can apply to the emails you send using Amazon Pinpoint. You apply a configuration
    ///             set to an email by including a reference to the configuration set in the headers of the
    ///             email. When you apply a configuration set to an email, all of the rules in that
    ///             configuration set are applied to the email.
    func createConfigurationSet(input: CreateConfigurationSetInput) async throws -> CreateConfigurationSetOutputResponse
    {
        typealias createConfigurationSetContinuation = CheckedContinuation<CreateConfigurationSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConfigurationSetContinuation) in
            createConfigurationSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create an event destination. In Amazon Pinpoint, events include message
    ///             sends, deliveries, opens, clicks, bounces, and complaints. Event
    ///                 destinations are places that you can send information about these events
    ///             to. For example, you can send event data to Amazon SNS to receive notifications when you
    ///             receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term
    ///             storage.
    ///         A single configuration set can include more than one event destination.
    func createConfigurationSetEventDestination(input: CreateConfigurationSetEventDestinationInput) async throws -> CreateConfigurationSetEventDestinationOutputResponse
    {
        typealias createConfigurationSetEventDestinationContinuation = CheckedContinuation<CreateConfigurationSetEventDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConfigurationSetEventDestinationContinuation) in
            createConfigurationSetEventDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a new pool of dedicated IP addresses. A pool can include one or more dedicated
    ///             IP addresses that are associated with your Amazon Pinpoint account. You can associate a pool with
    ///             a configuration set. When you send an email that uses that configuration set, Amazon Pinpoint
    ///             sends it using only the IP addresses in the associated pool.
    func createDedicatedIpPool(input: CreateDedicatedIpPoolInput) async throws -> CreateDedicatedIpPoolOutputResponse
    {
        typealias createDedicatedIpPoolContinuation = CheckedContinuation<CreateDedicatedIpPoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDedicatedIpPoolContinuation) in
            createDedicatedIpPool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a new predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled
    ///             by various email providers around the world. When you perform a predictive inbox placement test, you provide a
    ///             sample message that contains the content that you plan to send to your customers. Amazon Pinpoint
    ///             then sends that message to special email addresses spread across several major email
    ///             providers. After about 24 hours, the test is complete, and you can use the
    ///                 GetDeliverabilityTestReport operation to view the results of the
    ///             test.
    func createDeliverabilityTestReport(input: CreateDeliverabilityTestReportInput) async throws -> CreateDeliverabilityTestReportOutputResponse
    {
        typealias createDeliverabilityTestReportContinuation = CheckedContinuation<CreateDeliverabilityTestReportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDeliverabilityTestReportContinuation) in
            createDeliverabilityTestReport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Verifies an email identity for use with Amazon Pinpoint. In Amazon Pinpoint, an identity is an email
    ///             address or domain that you use when you send email. Before you can use an identity to
    ///             send email with Amazon Pinpoint, you first have to verify it. By verifying an address, you
    ///             demonstrate that you're the owner of the address, and that you've given Amazon Pinpoint permission
    ///             to send email from the address.
    ///         When you verify an email address, Amazon Pinpoint sends an email to the address. Your email
    ///             address is verified as soon as you follow the link in the verification email.
    ///
    ///
    ///         When you verify a domain, this operation provides a set of DKIM tokens, which you can
    ///             convert into CNAME tokens. You add these CNAME tokens to the DNS configuration for your
    ///             domain. Your domain is verified when Amazon Pinpoint detects these records in the DNS
    ///             configuration for your domain. It usually takes around 72 hours to complete the domain
    ///             verification process.
    func createEmailIdentity(input: CreateEmailIdentityInput) async throws -> CreateEmailIdentityOutputResponse
    {
        typealias createEmailIdentityContinuation = CheckedContinuation<CreateEmailIdentityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEmailIdentityContinuation) in
            createEmailIdentity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete an existing configuration set.
    ///         In Amazon Pinpoint, configuration sets are groups of rules that you can
    ///             apply to the emails you send. You apply a configuration set to an email by including a
    ///             reference to the configuration set in the headers of the email. When you apply a
    ///             configuration set to an email, all of the rules in that configuration set are applied to
    ///             the email.
    func deleteConfigurationSet(input: DeleteConfigurationSetInput) async throws -> DeleteConfigurationSetOutputResponse
    {
        typealias deleteConfigurationSetContinuation = CheckedContinuation<DeleteConfigurationSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConfigurationSetContinuation) in
            deleteConfigurationSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete an event destination.
    ///         In Amazon Pinpoint, events include message sends, deliveries, opens,
    ///             clicks, bounces, and complaints. Event destinations are places that
    ///             you can send information about these events to. For example, you can send event data to
    ///             Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
    ///             Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.
    func deleteConfigurationSetEventDestination(input: DeleteConfigurationSetEventDestinationInput) async throws -> DeleteConfigurationSetEventDestinationOutputResponse
    {
        typealias deleteConfigurationSetEventDestinationContinuation = CheckedContinuation<DeleteConfigurationSetEventDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConfigurationSetEventDestinationContinuation) in
            deleteConfigurationSetEventDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete a dedicated IP pool.
    func deleteDedicatedIpPool(input: DeleteDedicatedIpPoolInput) async throws -> DeleteDedicatedIpPoolOutputResponse
    {
        typealias deleteDedicatedIpPoolContinuation = CheckedContinuation<DeleteDedicatedIpPoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDedicatedIpPoolContinuation) in
            deleteDedicatedIpPool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an email identity that you previously verified for use with Amazon Pinpoint. An identity
    ///             can be either an email address or a domain name.
    func deleteEmailIdentity(input: DeleteEmailIdentityInput) async throws -> DeleteEmailIdentityOutputResponse
    {
        typealias deleteEmailIdentityContinuation = CheckedContinuation<DeleteEmailIdentityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEmailIdentityContinuation) in
            deleteEmailIdentity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Obtain information about the email-sending status and capabilities of your Amazon Pinpoint
    ///             account in the current AWS Region.
    func getAccount(input: GetAccountInput) async throws -> GetAccountOutputResponse
    {
        typealias getAccountContinuation = CheckedContinuation<GetAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAccountContinuation) in
            getAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a list of the blacklists that your dedicated IP addresses appear on.
    func getBlacklistReports(input: GetBlacklistReportsInput) async throws -> GetBlacklistReportsOutputResponse
    {
        typealias getBlacklistReportsContinuation = CheckedContinuation<GetBlacklistReportsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBlacklistReportsContinuation) in
            getBlacklistReports(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get information about an existing configuration set, including the dedicated IP pool
    ///             that it's associated with, whether or not it's enabled for sending email, and
    ///             more.
    ///         In Amazon Pinpoint, configuration sets are groups of rules that you can
    ///             apply to the emails you send. You apply a configuration set to an email by including a
    ///             reference to the configuration set in the headers of the email. When you apply a
    ///             configuration set to an email, all of the rules in that configuration set are applied to
    ///             the email.
    func getConfigurationSet(input: GetConfigurationSetInput) async throws -> GetConfigurationSetOutputResponse
    {
        typealias getConfigurationSetContinuation = CheckedContinuation<GetConfigurationSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConfigurationSetContinuation) in
            getConfigurationSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a list of event destinations that are associated with a configuration
    ///             set.
    ///         In Amazon Pinpoint, events include message sends, deliveries, opens,
    ///             clicks, bounces, and complaints. Event destinations are places that
    ///             you can send information about these events to. For example, you can send event data to
    ///             Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
    ///             Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.
    func getConfigurationSetEventDestinations(input: GetConfigurationSetEventDestinationsInput) async throws -> GetConfigurationSetEventDestinationsOutputResponse
    {
        typealias getConfigurationSetEventDestinationsContinuation = CheckedContinuation<GetConfigurationSetEventDestinationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConfigurationSetEventDestinationsContinuation) in
            getConfigurationSetEventDestinations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get information about a dedicated IP address, including the name of the dedicated IP
    ///             pool that it's associated with, as well information about the automatic warm-up process
    ///             for the address.
    func getDedicatedIp(input: GetDedicatedIpInput) async throws -> GetDedicatedIpOutputResponse
    {
        typealias getDedicatedIpContinuation = CheckedContinuation<GetDedicatedIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDedicatedIpContinuation) in
            getDedicatedIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List the dedicated IP addresses that are associated with your Amazon Pinpoint
    ///             account.
    func getDedicatedIps(input: GetDedicatedIpsInput) async throws -> GetDedicatedIpsOutputResponse
    {
        typealias getDedicatedIpsContinuation = CheckedContinuation<GetDedicatedIpsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDedicatedIpsContinuation) in
            getDedicatedIps(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve information about the status of the Deliverability dashboard for your Amazon Pinpoint account.
    ///             When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and
    ///             other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the
    ///             ability to perform predictive inbox placement tests.
    ///         When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
    ///             to any other fees that you accrue by using Amazon Pinpoint. For more information about the
    ///             features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing.
    func getDeliverabilityDashboardOptions(input: GetDeliverabilityDashboardOptionsInput) async throws -> GetDeliverabilityDashboardOptionsOutputResponse
    {
        typealias getDeliverabilityDashboardOptionsContinuation = CheckedContinuation<GetDeliverabilityDashboardOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeliverabilityDashboardOptionsContinuation) in
            getDeliverabilityDashboardOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve the results of a predictive inbox placement test.
    func getDeliverabilityTestReport(input: GetDeliverabilityTestReportInput) async throws -> GetDeliverabilityTestReportOutputResponse
    {
        typealias getDeliverabilityTestReportContinuation = CheckedContinuation<GetDeliverabilityTestReportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeliverabilityTestReportContinuation) in
            getDeliverabilityTestReport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve all the deliverability data for a specific campaign. This data is available
    ///             for a campaign only if the campaign sent email by using a domain that the
    ///             Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption
    ///             operation).
    func getDomainDeliverabilityCampaign(input: GetDomainDeliverabilityCampaignInput) async throws -> GetDomainDeliverabilityCampaignOutputResponse
    {
        typealias getDomainDeliverabilityCampaignContinuation = CheckedContinuation<GetDomainDeliverabilityCampaignOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainDeliverabilityCampaignContinuation) in
            getDomainDeliverabilityCampaign(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve inbox placement and engagement rates for the domains that you use to send
    ///             email.
    func getDomainStatisticsReport(input: GetDomainStatisticsReportInput) async throws -> GetDomainStatisticsReportOutputResponse
    {
        typealias getDomainStatisticsReportContinuation = CheckedContinuation<GetDomainStatisticsReportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainStatisticsReportContinuation) in
            getDomainStatisticsReport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides information about a specific identity associated with your Amazon Pinpoint account,
    ///             including the identity's verification status, its DKIM authentication status, and its
    ///             custom Mail-From settings.
    func getEmailIdentity(input: GetEmailIdentityInput) async throws -> GetEmailIdentityOutputResponse
    {
        typealias getEmailIdentityContinuation = CheckedContinuation<GetEmailIdentityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEmailIdentityContinuation) in
            getEmailIdentity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all of the configuration sets associated with your Amazon Pinpoint account in the current
    ///             region.
    ///         In Amazon Pinpoint, configuration sets are groups of rules that you can
    ///             apply to the emails you send. You apply a configuration set to an email by including a
    ///             reference to the configuration set in the headers of the email. When you apply a
    ///             configuration set to an email, all of the rules in that configuration set are applied to
    ///             the email.
    func listConfigurationSets(input: ListConfigurationSetsInput) async throws -> ListConfigurationSetsOutputResponse
    {
        typealias listConfigurationSetsContinuation = CheckedContinuation<ListConfigurationSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConfigurationSetsContinuation) in
            listConfigurationSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all of the dedicated IP pools that exist in your Amazon Pinpoint account in the current
    ///             AWS Region.
    func listDedicatedIpPools(input: ListDedicatedIpPoolsInput) async throws -> ListDedicatedIpPoolsOutputResponse
    {
        typealias listDedicatedIpPoolsContinuation = CheckedContinuation<ListDedicatedIpPoolsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDedicatedIpPoolsContinuation) in
            listDedicatedIpPools(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Show a list of the predictive inbox placement tests that you've performed, regardless of their statuses. For
    ///             predictive inbox placement tests that are complete, you can use the GetDeliverabilityTestReport
    ///             operation to view the results.
    func listDeliverabilityTestReports(input: ListDeliverabilityTestReportsInput) async throws -> ListDeliverabilityTestReportsOutputResponse
    {
        typealias listDeliverabilityTestReportsContinuation = CheckedContinuation<ListDeliverabilityTestReportsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDeliverabilityTestReportsContinuation) in
            listDeliverabilityTestReports(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve deliverability data for all the campaigns that used a specific domain to send
    ///             email during a specified time range. This data is available for a domain only if you
    ///             enabled the Deliverability dashboard (PutDeliverabilityDashboardOption operation)
    ///             for the domain.
    func listDomainDeliverabilityCampaigns(input: ListDomainDeliverabilityCampaignsInput) async throws -> ListDomainDeliverabilityCampaignsOutputResponse
    {
        typealias listDomainDeliverabilityCampaignsContinuation = CheckedContinuation<ListDomainDeliverabilityCampaignsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDomainDeliverabilityCampaignsContinuation) in
            listDomainDeliverabilityCampaigns(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all of the email identities that are associated with your Amazon Pinpoint
    ///             account. An identity can be either an email address or a domain. This operation returns
    ///             identities that are verified as well as those that aren't.
    func listEmailIdentities(input: ListEmailIdentitiesInput) async throws -> ListEmailIdentitiesOutputResponse
    {
        typealias listEmailIdentitiesContinuation = CheckedContinuation<ListEmailIdentitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEmailIdentitiesContinuation) in
            listEmailIdentities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a list of the tags (keys and values) that are associated with a specified
    ///             resource. A tag is a label that you optionally define and associate
    ///             with a resource in Amazon Pinpoint. Each tag consists of a required tag
    ///                 key and an optional associated tag value. A tag key
    ///             is a general label that acts as a category for more specific tag values. A tag value
    ///             acts as a descriptor within a tag key.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enable or disable the automatic warm-up feature for dedicated IP addresses.
    func putAccountDedicatedIpWarmupAttributes(input: PutAccountDedicatedIpWarmupAttributesInput) async throws -> PutAccountDedicatedIpWarmupAttributesOutputResponse
    {
        typealias putAccountDedicatedIpWarmupAttributesContinuation = CheckedContinuation<PutAccountDedicatedIpWarmupAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putAccountDedicatedIpWarmupAttributesContinuation) in
            putAccountDedicatedIpWarmupAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enable or disable the ability of your account to send email.
    func putAccountSendingAttributes(input: PutAccountSendingAttributesInput) async throws -> PutAccountSendingAttributesOutputResponse
    {
        typealias putAccountSendingAttributesContinuation = CheckedContinuation<PutAccountSendingAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putAccountSendingAttributesContinuation) in
            putAccountSendingAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associate a configuration set with a dedicated IP pool. You can use dedicated IP pools
    ///             to create groups of dedicated IP addresses for sending specific types of email.
    func putConfigurationSetDeliveryOptions(input: PutConfigurationSetDeliveryOptionsInput) async throws -> PutConfigurationSetDeliveryOptionsOutputResponse
    {
        typealias putConfigurationSetDeliveryOptionsContinuation = CheckedContinuation<PutConfigurationSetDeliveryOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putConfigurationSetDeliveryOptionsContinuation) in
            putConfigurationSetDeliveryOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enable or disable collection of reputation metrics for emails that you send using a
    ///             particular configuration set in a specific AWS Region.
    func putConfigurationSetReputationOptions(input: PutConfigurationSetReputationOptionsInput) async throws -> PutConfigurationSetReputationOptionsOutputResponse
    {
        typealias putConfigurationSetReputationOptionsContinuation = CheckedContinuation<PutConfigurationSetReputationOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putConfigurationSetReputationOptionsContinuation) in
            putConfigurationSetReputationOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enable or disable email sending for messages that use a particular configuration set
    ///             in a specific AWS Region.
    func putConfigurationSetSendingOptions(input: PutConfigurationSetSendingOptionsInput) async throws -> PutConfigurationSetSendingOptionsOutputResponse
    {
        typealias putConfigurationSetSendingOptionsContinuation = CheckedContinuation<PutConfigurationSetSendingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putConfigurationSetSendingOptionsContinuation) in
            putConfigurationSetSendingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Specify a custom domain to use for open and click tracking elements in email that you
    ///             send using Amazon Pinpoint.
    func putConfigurationSetTrackingOptions(input: PutConfigurationSetTrackingOptionsInput) async throws -> PutConfigurationSetTrackingOptionsOutputResponse
    {
        typealias putConfigurationSetTrackingOptionsContinuation = CheckedContinuation<PutConfigurationSetTrackingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putConfigurationSetTrackingOptionsContinuation) in
            putConfigurationSetTrackingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Move a dedicated IP address to an existing dedicated IP pool.
    ///
    ///             The dedicated IP address that you specify must already exist, and must be
    ///                 associated with your Amazon Pinpoint account.
    ///
    ///
    ///             The dedicated IP pool you specify must already exist. You can create a new pool by
    ///                 using the CreateDedicatedIpPool operation.
    ///
    ///
    func putDedicatedIpInPool(input: PutDedicatedIpInPoolInput) async throws -> PutDedicatedIpInPoolOutputResponse
    {
        typealias putDedicatedIpInPoolContinuation = CheckedContinuation<PutDedicatedIpInPoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putDedicatedIpInPoolContinuation) in
            putDedicatedIpInPool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    func putDedicatedIpWarmupAttributes(input: PutDedicatedIpWarmupAttributesInput) async throws -> PutDedicatedIpWarmupAttributesOutputResponse
    {
        typealias putDedicatedIpWarmupAttributesContinuation = CheckedContinuation<PutDedicatedIpWarmupAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putDedicatedIpWarmupAttributesContinuation) in
            putDedicatedIpWarmupAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enable or disable the Deliverability dashboard for your Amazon Pinpoint account. When you enable the
    ///             Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for
    ///             the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform
    ///             predictive inbox placement tests.
    ///         When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
    ///             to any other fees that you accrue by using Amazon Pinpoint. For more information about the
    ///             features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing.
    func putDeliverabilityDashboardOption(input: PutDeliverabilityDashboardOptionInput) async throws -> PutDeliverabilityDashboardOptionOutputResponse
    {
        typealias putDeliverabilityDashboardOptionContinuation = CheckedContinuation<PutDeliverabilityDashboardOptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putDeliverabilityDashboardOptionContinuation) in
            putDeliverabilityDashboardOption(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used to enable or disable DKIM authentication for an email identity.
    func putEmailIdentityDkimAttributes(input: PutEmailIdentityDkimAttributesInput) async throws -> PutEmailIdentityDkimAttributesOutputResponse
    {
        typealias putEmailIdentityDkimAttributesContinuation = CheckedContinuation<PutEmailIdentityDkimAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putEmailIdentityDkimAttributesContinuation) in
            putEmailIdentityDkimAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used to enable or disable feedback forwarding for an identity. This setting determines
    ///             what happens when an identity is used to send an email that results in a bounce or
    ///             complaint event.
    ///         When you enable feedback forwarding, Amazon Pinpoint sends you email notifications when bounce
    ///             or complaint events occur. Amazon Pinpoint sends this notification to the address that you
    ///             specified in the Return-Path header of the original email.
    ///         When you disable feedback forwarding, Amazon Pinpoint sends notifications through other
    ///             mechanisms, such as by notifying an Amazon SNS topic. You're required to have a method of
    ///             tracking bounces and complaints. If you haven't set up another mechanism for receiving
    ///             bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events
    ///             occur (even if this setting is disabled).
    func putEmailIdentityFeedbackAttributes(input: PutEmailIdentityFeedbackAttributesInput) async throws -> PutEmailIdentityFeedbackAttributesOutputResponse
    {
        typealias putEmailIdentityFeedbackAttributesContinuation = CheckedContinuation<PutEmailIdentityFeedbackAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putEmailIdentityFeedbackAttributesContinuation) in
            putEmailIdentityFeedbackAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used to enable or disable the custom Mail-From domain configuration for an email
    ///             identity.
    func putEmailIdentityMailFromAttributes(input: PutEmailIdentityMailFromAttributesInput) async throws -> PutEmailIdentityMailFromAttributesOutputResponse
    {
        typealias putEmailIdentityMailFromAttributesContinuation = CheckedContinuation<PutEmailIdentityMailFromAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putEmailIdentityMailFromAttributesContinuation) in
            putEmailIdentityMailFromAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends an email message. You can use the Amazon Pinpoint Email API to send two types of
    ///             messages:
    ///
    ///
    ///
    ///                   Simple – A standard email message. When
    ///                     you create this type of message, you specify the sender, the recipient, and the
    ///                     message body, and Amazon Pinpoint assembles the message for you.
    ///
    ///
    ///
    ///                   Raw –  A raw, MIME-formatted email
    ///                     message. When you send this type of email, you have to specify all of the
    ///                     message headers, as well as the message body. You can use this message type to
    ///                     send messages that contain attachments. The message that you specify has to be a
    ///                     valid MIME message.
    ///
    ///
    func sendEmail(input: SendEmailInput) async throws -> SendEmailOutputResponse
    {
        typealias sendEmailContinuation = CheckedContinuation<SendEmailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendEmailContinuation) in
            sendEmail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Add one or more tags (keys and values) to a specified resource. A
    ///                 tag is a label that you optionally define and associate with a
    ///             resource in Amazon Pinpoint. Tags can help you categorize and manage resources in different ways,
    ///             such as by purpose, owner, environment, or other criteria. A resource can have as many
    ///             as 50 tags.
    ///         Each tag consists of a required tag key and an
    ///                 associated tag value, both of which you define. A tag key is a
    ///             general label that acts as a category for more specific tag values. A tag value acts as
    ///             a descriptor within a tag key.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Remove one or more tags (keys and values) from a specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update the configuration of an event destination for a configuration set.
    ///         In Amazon Pinpoint, events include message sends, deliveries, opens,
    ///             clicks, bounces, and complaints. Event destinations are places that
    ///             you can send information about these events to. For example, you can send event data to
    ///             Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
    ///             Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.
    func updateConfigurationSetEventDestination(input: UpdateConfigurationSetEventDestinationInput) async throws -> UpdateConfigurationSetEventDestinationOutputResponse
    {
        typealias updateConfigurationSetEventDestinationContinuation = CheckedContinuation<UpdateConfigurationSetEventDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConfigurationSetEventDestinationContinuation) in
            updateConfigurationSetEventDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
