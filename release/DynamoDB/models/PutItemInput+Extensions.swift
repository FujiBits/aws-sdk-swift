// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutItemInputHeadersMiddleware: Middleware {
    public let id: String = "PutItemInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutItemInput>,
                  next: H) -> Swift.Result<OperationOutput<PutItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutItemInput>
    public typealias MOutput = OperationOutput<PutItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutItemOutputError>
}

public struct PutItemInputQueryItemMiddleware: Middleware {
    public let id: String = "PutItemInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutItemInput>,
                  next: H) -> Swift.Result<OperationOutput<PutItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutItemInput>
    public typealias MOutput = OperationOutput<PutItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutItemOutputError>
}

public struct PutItemInputBodyMiddleware: Middleware {
    public let id: String = "PutItemInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutItemInput>,
                  next: H) -> Swift.Result<OperationOutput<PutItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutItemInput>
    public typealias MOutput = OperationOutput<PutItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutItemOutputError>
}

extension PutItemInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case item = "Item"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let conditionalOperator = conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let expected = expected {
            var expectedContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expected)
            for (dictKey0, expectedattributemap0) in expected {
                try expectedContainer.encode(expectedattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .item)
            for (dictKey0, putiteminputattributemap0) in item {
                try itemContainer.encode(putiteminputattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
        if let returnValues = returnValues {
            try encodeContainer.encode(returnValues.rawValue, forKey: .returnValues)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}
