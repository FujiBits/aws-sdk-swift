// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateGlobalTableSettingsInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateGlobalTableSettingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGlobalTableSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGlobalTableSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGlobalTableSettingsInput>
    public typealias MOutput = OperationOutput<UpdateGlobalTableSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGlobalTableSettingsOutputError>
}

public struct UpdateGlobalTableSettingsInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateGlobalTableSettingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGlobalTableSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGlobalTableSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGlobalTableSettingsInput>
    public typealias MOutput = OperationOutput<UpdateGlobalTableSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGlobalTableSettingsOutputError>
}

public struct UpdateGlobalTableSettingsInputBodyMiddleware: Middleware {
    public let id: String = "UpdateGlobalTableSettingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGlobalTableSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGlobalTableSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGlobalTableSettingsInput>
    public typealias MOutput = OperationOutput<UpdateGlobalTableSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGlobalTableSettingsOutputError>
}

extension UpdateGlobalTableSettingsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalTableBillingMode = "GlobalTableBillingMode"
        case globalTableGlobalSecondaryIndexSettingsUpdate = "GlobalTableGlobalSecondaryIndexSettingsUpdate"
        case globalTableName = "GlobalTableName"
        case globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = "GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate"
        case globalTableProvisionedWriteCapacityUnits = "GlobalTableProvisionedWriteCapacityUnits"
        case replicaSettingsUpdate = "ReplicaSettingsUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableBillingMode = globalTableBillingMode {
            try encodeContainer.encode(globalTableBillingMode.rawValue, forKey: .globalTableBillingMode)
        }
        if let globalTableGlobalSecondaryIndexSettingsUpdate = globalTableGlobalSecondaryIndexSettingsUpdate {
            var globalTableGlobalSecondaryIndexSettingsUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalTableGlobalSecondaryIndexSettingsUpdate)
            for globaltableglobalsecondaryindexsettingsupdatelist0 in globalTableGlobalSecondaryIndexSettingsUpdate {
                try globalTableGlobalSecondaryIndexSettingsUpdateContainer.encode(globaltableglobalsecondaryindexsettingsupdatelist0)
            }
        }
        if let globalTableName = globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate {
            try encodeContainer.encode(globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate, forKey: .globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate)
        }
        if let globalTableProvisionedWriteCapacityUnits = globalTableProvisionedWriteCapacityUnits {
            try encodeContainer.encode(globalTableProvisionedWriteCapacityUnits, forKey: .globalTableProvisionedWriteCapacityUnits)
        }
        if let replicaSettingsUpdate = replicaSettingsUpdate {
            var replicaSettingsUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaSettingsUpdate)
            for replicasettingsupdatelist0 in replicaSettingsUpdate {
                try replicaSettingsUpdateContainer.encode(replicasettingsupdatelist0)
            }
        }
    }
}
