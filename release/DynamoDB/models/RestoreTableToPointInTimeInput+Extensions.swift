// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RestoreTableToPointInTimeInputHeadersMiddleware: Middleware {
    public let id: String = "RestoreTableToPointInTimeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RestoreTableToPointInTimeInput>,
                  next: H) -> Swift.Result<OperationOutput<RestoreTableToPointInTimeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RestoreTableToPointInTimeInput>
    public typealias MOutput = OperationOutput<RestoreTableToPointInTimeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RestoreTableToPointInTimeOutputError>
}

public struct RestoreTableToPointInTimeInputQueryItemMiddleware: Middleware {
    public let id: String = "RestoreTableToPointInTimeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RestoreTableToPointInTimeInput>,
                  next: H) -> Swift.Result<OperationOutput<RestoreTableToPointInTimeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RestoreTableToPointInTimeInput>
    public typealias MOutput = OperationOutput<RestoreTableToPointInTimeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RestoreTableToPointInTimeOutputError>
}

public struct RestoreTableToPointInTimeInputBodyMiddleware: Middleware {
    public let id: String = "RestoreTableToPointInTimeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RestoreTableToPointInTimeInput>,
                  next: H) -> Swift.Result<OperationOutput<RestoreTableToPointInTimeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RestoreTableToPointInTimeInput>
    public typealias MOutput = OperationOutput<RestoreTableToPointInTimeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RestoreTableToPointInTimeOutputError>
}

extension RestoreTableToPointInTimeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case billingModeOverride = "BillingModeOverride"
        case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
        case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case restoreDateTime = "RestoreDateTime"
        case sSESpecificationOverride = "SSESpecificationOverride"
        case sourceTableArn = "SourceTableArn"
        case sourceTableName = "SourceTableName"
        case targetTableName = "TargetTableName"
        case useLatestRestorableTime = "UseLatestRestorableTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingModeOverride = billingModeOverride {
            try encodeContainer.encode(billingModeOverride.rawValue, forKey: .billingModeOverride)
        }
        if let globalSecondaryIndexOverride = globalSecondaryIndexOverride {
            var globalSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexOverride)
            for globalsecondaryindexlist0 in globalSecondaryIndexOverride {
                try globalSecondaryIndexOverrideContainer.encode(globalsecondaryindexlist0)
            }
        }
        if let localSecondaryIndexOverride = localSecondaryIndexOverride {
            var localSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexOverride)
            for localsecondaryindexlist0 in localSecondaryIndexOverride {
                try localSecondaryIndexOverrideContainer.encode(localsecondaryindexlist0)
            }
        }
        if let provisionedThroughputOverride = provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let restoreDateTime = restoreDateTime {
            try encodeContainer.encode(restoreDateTime.timeIntervalSince1970, forKey: .restoreDateTime)
        }
        if let sSESpecificationOverride = sSESpecificationOverride {
            try encodeContainer.encode(sSESpecificationOverride, forKey: .sSESpecificationOverride)
        }
        if let sourceTableArn = sourceTableArn {
            try encodeContainer.encode(sourceTableArn, forKey: .sourceTableArn)
        }
        if let sourceTableName = sourceTableName {
            try encodeContainer.encode(sourceTableName, forKey: .sourceTableName)
        }
        if let targetTableName = targetTableName {
            try encodeContainer.encode(targetTableName, forKey: .targetTableName)
        }
        if let useLatestRestorableTime = useLatestRestorableTime {
            try encodeContainer.encode(useLatestRestorableTime, forKey: .useLatestRestorableTime)
        }
    }
}
