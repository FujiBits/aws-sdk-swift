// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListContributorInsightsOutputResponseBody: Equatable {
    public let contributorInsightsSummaries: [ContributorInsightsSummary]?
    public let nextToken: String?
}

extension ListContributorInsightsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case contributorInsightsSummaries = "ContributorInsightsSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contributorInsightsSummariesContainer = try containerValues.decodeIfPresent([ContributorInsightsSummary?].self, forKey: .contributorInsightsSummaries)
        var contributorInsightsSummariesDecoded0:[ContributorInsightsSummary]? = nil
        if let contributorInsightsSummariesContainer = contributorInsightsSummariesContainer {
            contributorInsightsSummariesDecoded0 = [ContributorInsightsSummary]()
            for structure0 in contributorInsightsSummariesContainer {
                if let structure0 = structure0 {
                    contributorInsightsSummariesDecoded0?.append(structure0)
                }
            }
        }
        contributorInsightsSummaries = contributorInsightsSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
