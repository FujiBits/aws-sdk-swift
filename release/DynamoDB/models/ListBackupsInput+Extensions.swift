// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListBackupsInputHeadersMiddleware: Middleware {
    public let id: String = "ListBackupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBackupsInput>
    public typealias MOutput = OperationOutput<ListBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBackupsOutputError>
}

public struct ListBackupsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListBackupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBackupsInput>
    public typealias MOutput = OperationOutput<ListBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBackupsOutputError>
}

public struct ListBackupsInputBodyMiddleware: Middleware {
    public let id: String = "ListBackupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBackupsInput>
    public typealias MOutput = OperationOutput<ListBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBackupsOutputError>
}

extension ListBackupsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupType = "BackupType"
        case exclusiveStartBackupArn = "ExclusiveStartBackupArn"
        case limit = "Limit"
        case tableName = "TableName"
        case timeRangeLowerBound = "TimeRangeLowerBound"
        case timeRangeUpperBound = "TimeRangeUpperBound"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupType = backupType {
            try encodeContainer.encode(backupType.rawValue, forKey: .backupType)
        }
        if let exclusiveStartBackupArn = exclusiveStartBackupArn {
            try encodeContainer.encode(exclusiveStartBackupArn, forKey: .exclusiveStartBackupArn)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let timeRangeLowerBound = timeRangeLowerBound {
            try encodeContainer.encode(timeRangeLowerBound.timeIntervalSince1970, forKey: .timeRangeLowerBound)
        }
        if let timeRangeUpperBound = timeRangeUpperBound {
            try encodeContainer.encode(timeRangeUpperBound.timeIntervalSince1970, forKey: .timeRangeUpperBound)
        }
    }
}
