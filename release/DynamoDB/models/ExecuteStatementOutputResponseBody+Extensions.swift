// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ExecuteStatementOutputResponseBody: Equatable {
    public let items: [[String:AttributeValue]]?
    public let nextToken: String?
}

extension ExecuteStatementOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case items = "Items"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([[String: AttributeValue?]?].self, forKey: .items)
        var itemsDecoded0:[[String:AttributeValue]]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [[String:AttributeValue]]()
            for map0 in itemsContainer {
                var itemsContainerDecoded0: [String: AttributeValue]? = nil
                if let map0 = map0 {
                    itemsContainerDecoded0 = [String: AttributeValue]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            itemsContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let itemsContainerDecoded0 = itemsContainerDecoded0 {
                    itemsDecoded0?.append(itemsContainerDecoded0)
                }
            }
        }
        items = itemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
