// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateTableReplicaAutoScalingInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateTableReplicaAutoScalingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTableReplicaAutoScalingInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTableReplicaAutoScalingInput>
    public typealias MOutput = OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTableReplicaAutoScalingOutputError>
}

public struct UpdateTableReplicaAutoScalingInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateTableReplicaAutoScalingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTableReplicaAutoScalingInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTableReplicaAutoScalingInput>
    public typealias MOutput = OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTableReplicaAutoScalingOutputError>
}

public struct UpdateTableReplicaAutoScalingInputBodyMiddleware: Middleware {
    public let id: String = "UpdateTableReplicaAutoScalingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTableReplicaAutoScalingInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTableReplicaAutoScalingInput>
    public typealias MOutput = OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTableReplicaAutoScalingOutputError>
}

extension UpdateTableReplicaAutoScalingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedWriteCapacityAutoScalingUpdate = "ProvisionedWriteCapacityAutoScalingUpdate"
        case replicaUpdates = "ReplicaUpdates"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexUpdates = globalSecondaryIndexUpdates {
            var globalSecondaryIndexUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexUpdates)
            for globalsecondaryindexautoscalingupdatelist0 in globalSecondaryIndexUpdates {
                try globalSecondaryIndexUpdatesContainer.encode(globalsecondaryindexautoscalingupdatelist0)
            }
        }
        if let provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdate {
            try encodeContainer.encode(provisionedWriteCapacityAutoScalingUpdate, forKey: .provisionedWriteCapacityAutoScalingUpdate)
        }
        if let replicaUpdates = replicaUpdates {
            var replicaUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaUpdates)
            for replicaautoscalingupdatelist0 in replicaUpdates {
                try replicaUpdatesContainer.encode(replicaautoscalingupdatelist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}
