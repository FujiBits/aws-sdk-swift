// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension MediaStoreClientTypes.Container: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case accessLoggingEnabled = "AccessLoggingEnabled"
        case creationTime = "CreationTime"
        case endpoint = "Endpoint"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let accessLoggingEnabled = accessLoggingEnabled {
            try encodeContainer.encode(accessLoggingEnabled, forKey: .accessLoggingEnabled)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MediaStoreClientTypes.ContainerStatus.self, forKey: .status)
        status = statusDecoded
        let accessLoggingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .accessLoggingEnabled)
        accessLoggingEnabled = accessLoggingEnabledDecoded
    }
}

extension MediaStoreClientTypes.Container: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Container(aRN: \(Swift.String(describing: aRN)), accessLoggingEnabled: \(Swift.String(describing: accessLoggingEnabled)), creationTime: \(Swift.String(describing: creationTime)), endpoint: \(Swift.String(describing: endpoint)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)))"}
}

extension MediaStoreClientTypes {
    /// <p>This section describes operations that you can perform on an AWS Elemental MediaStore
    ///          container.</p>
    public struct Container: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the container. The ARN has the following
        ///          format:</p>
        ///          <p>arn:aws:<region>:<account that owns this container>:container/<name of
        ///          container> </p>
        ///          <p>For example: arn:aws:mediastore:us-west-2:111122223333:container/movies </p>
        public let aRN: Swift.String?
        /// <p>The state of access logging on the container. This value is <code>false</code> by default, indicating that AWS Elemental MediaStore does not send access logs to Amazon CloudWatch Logs. When you enable access logging on the container, MediaStore changes this value to <code>true</code>, indicating that the service delivers access logs for objects stored in that container to CloudWatch Logs.</p>
        public let accessLoggingEnabled: Swift.Bool?
        /// <p>Unix timestamp.</p>
        public let creationTime: ClientRuntime.Date?
        /// <p>The DNS endpoint of the container. Use the endpoint to identify the specific
        ///          container when sending requests to the data plane. The service assigns this value when the
        ///          container is created. Once the value has been assigned, it does not change.</p>
        public let endpoint: Swift.String?
        /// <p>The name of the container.</p>
        public let name: Swift.String?
        /// <p>The status of container creation or deletion. The status is one of the following:
        ///             <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service
        ///          is creating the container, the status is <code>CREATING</code>. When the endpoint is
        ///          available, the status changes to <code>ACTIVE</code>.</p>
        public let status: MediaStoreClientTypes.ContainerStatus?

        public init (
            aRN: Swift.String? = nil,
            accessLoggingEnabled: Swift.Bool? = nil,
            creationTime: ClientRuntime.Date? = nil,
            endpoint: Swift.String? = nil,
            name: Swift.String? = nil,
            status: MediaStoreClientTypes.ContainerStatus? = nil
        )
        {
            self.aRN = aRN
            self.accessLoggingEnabled = accessLoggingEnabled
            self.creationTime = creationTime
            self.endpoint = endpoint
            self.name = name
            self.status = status
        }
    }

}

extension ContainerInUseException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerInUseException(message: \(Swift.String(describing: message)))"}
}

extension ContainerInUseException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ContainerInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The container that you specified in the request already exists or is being
///          updated.</p>
public struct ContainerInUseException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ContainerInUseExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ContainerInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MediaStoreClientTypes {
    public enum ContainerLevelMetrics: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerLevelMetrics] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerLevelMetrics(rawValue: rawValue) ?? ContainerLevelMetrics.sdkUnknown(rawValue)
        }
    }
}

extension ContainerNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ContainerNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ContainerNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The container that you specified in the request does not exist.</p>
public struct ContainerNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ContainerNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ContainerNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MediaStoreClientTypes {
    public enum ContainerStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerStatus(rawValue: rawValue) ?? ContainerStatus.sdkUnknown(rawValue)
        }
    }
}

extension CorsPolicyNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CorsPolicyNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension CorsPolicyNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CorsPolicyNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The CORS policy that you specified in the request does not exist.</p>
public struct CorsPolicyNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CorsPolicyNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension CorsPolicyNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MediaStoreClientTypes.CorsRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedHeaders = "AllowedHeaders"
        case allowedMethods = "AllowedMethods"
        case allowedOrigins = "AllowedOrigins"
        case exposeHeaders = "ExposeHeaders"
        case maxAgeSeconds = "MaxAgeSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedHeaders = allowedHeaders {
            var allowedHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedHeaders)
            for allowedheaders0 in allowedHeaders {
                try allowedHeadersContainer.encode(allowedheaders0)
            }
        }
        if let allowedMethods = allowedMethods {
            var allowedMethodsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedMethods)
            for allowedmethods0 in allowedMethods {
                try allowedMethodsContainer.encode(allowedmethods0.rawValue)
            }
        }
        if let allowedOrigins = allowedOrigins {
            var allowedOriginsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOrigins)
            for allowedorigins0 in allowedOrigins {
                try allowedOriginsContainer.encode(allowedorigins0)
            }
        }
        if let exposeHeaders = exposeHeaders {
            var exposeHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exposeHeaders)
            for exposeheaders0 in exposeHeaders {
                try exposeHeadersContainer.encode(exposeheaders0)
            }
        }
        if maxAgeSeconds != 0 {
            try encodeContainer.encode(maxAgeSeconds, forKey: .maxAgeSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedOriginsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedOrigins)
        var allowedOriginsDecoded0:[Swift.String]? = nil
        if let allowedOriginsContainer = allowedOriginsContainer {
            allowedOriginsDecoded0 = [Swift.String]()
            for string0 in allowedOriginsContainer {
                if let string0 = string0 {
                    allowedOriginsDecoded0?.append(string0)
                }
            }
        }
        allowedOrigins = allowedOriginsDecoded0
        let allowedMethodsContainer = try containerValues.decodeIfPresent([MediaStoreClientTypes.MethodName?].self, forKey: .allowedMethods)
        var allowedMethodsDecoded0:[MediaStoreClientTypes.MethodName]? = nil
        if let allowedMethodsContainer = allowedMethodsContainer {
            allowedMethodsDecoded0 = [MediaStoreClientTypes.MethodName]()
            for string0 in allowedMethodsContainer {
                if let string0 = string0 {
                    allowedMethodsDecoded0?.append(string0)
                }
            }
        }
        allowedMethods = allowedMethodsDecoded0
        let allowedHeadersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedHeaders)
        var allowedHeadersDecoded0:[Swift.String]? = nil
        if let allowedHeadersContainer = allowedHeadersContainer {
            allowedHeadersDecoded0 = [Swift.String]()
            for string0 in allowedHeadersContainer {
                if let string0 = string0 {
                    allowedHeadersDecoded0?.append(string0)
                }
            }
        }
        allowedHeaders = allowedHeadersDecoded0
        let maxAgeSecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxAgeSeconds)
        maxAgeSeconds = maxAgeSecondsDecoded
        let exposeHeadersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exposeHeaders)
        var exposeHeadersDecoded0:[Swift.String]? = nil
        if let exposeHeadersContainer = exposeHeadersContainer {
            exposeHeadersDecoded0 = [Swift.String]()
            for string0 in exposeHeadersContainer {
                if let string0 = string0 {
                    exposeHeadersDecoded0?.append(string0)
                }
            }
        }
        exposeHeaders = exposeHeadersDecoded0
    }
}

extension MediaStoreClientTypes.CorsRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CorsRule(allowedHeaders: \(Swift.String(describing: allowedHeaders)), allowedMethods: \(Swift.String(describing: allowedMethods)), allowedOrigins: \(Swift.String(describing: allowedOrigins)), exposeHeaders: \(Swift.String(describing: exposeHeaders)), maxAgeSeconds: \(Swift.String(describing: maxAgeSeconds)))"}
}

extension MediaStoreClientTypes {
    /// <p>A rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than
    ///          one rule applies, the service uses the first applicable rule listed.</p>
    public struct CorsRule: Swift.Equatable {
        /// <p>Specifies which headers are allowed in a preflight <code>OPTIONS</code> request
        ///          through the <code>Access-Control-Request-Headers</code> header. Each header name that is
        ///          specified in <code>Access-Control-Request-Headers</code> must have a corresponding entry in
        ///          the rule. Only the headers that were requested are sent back. </p>
        ///          <p>This element can contain only one wildcard character (*).</p>
        public let allowedHeaders: [Swift.String]?
        /// <p>Identifies an HTTP method that the origin that is specified in the rule is allowed to
        ///          execute.</p>
        ///          <p>Each CORS rule must contain at least one <code>AllowedMethods</code> and one
        ///             <code>AllowedOrigins</code> element.</p>
        public let allowedMethods: [MediaStoreClientTypes.MethodName]?
        /// <p>One or more response headers that you want users to be able to access from their
        ///          applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p>
        ///          <p>Each CORS rule must have at least one <code>AllowedOrigins</code> element. The string
        ///          value can include only one wildcard character (*), for example, http://*.example.com.
        ///          Additionally, you can specify only one wildcard character to allow cross-origin access for
        ///          all origins.</p>
        public let allowedOrigins: [Swift.String]?
        /// <p>One or more headers in the response that you want users to be able to access from
        ///          their applications (for example, from a JavaScript <code>XMLHttpRequest</code>
        ///          object).</p>
        ///          <p>This element is optional for each rule.</p>
        public let exposeHeaders: [Swift.String]?
        /// <p>The time in seconds that your browser caches the preflight response for the specified
        ///          resource.</p>
        ///          <p>A CORS rule can have only one <code>MaxAgeSeconds</code> element.</p>
        public let maxAgeSeconds: Swift.Int

        public init (
            allowedHeaders: [Swift.String]? = nil,
            allowedMethods: [MediaStoreClientTypes.MethodName]? = nil,
            allowedOrigins: [Swift.String]? = nil,
            exposeHeaders: [Swift.String]? = nil,
            maxAgeSeconds: Swift.Int = 0
        )
        {
            self.allowedHeaders = allowedHeaders
            self.allowedMethods = allowedMethods
            self.allowedOrigins = allowedOrigins
            self.exposeHeaders = exposeHeaders
            self.maxAgeSeconds = maxAgeSeconds
        }
    }

}

public struct CreateContainerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContainerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContainerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContainerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContainerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContainerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContainerOutputError>
}

extension CreateContainerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContainerInput(containerName: \(Swift.String(describing: containerName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateContainerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateContainerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContainerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContainerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContainerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContainerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContainerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContainerOutputError>
}

public struct CreateContainerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContainerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContainerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContainerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContainerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContainerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContainerOutputError>
}

public struct CreateContainerInput: Swift.Equatable {
    /// <p>The name for the container. The name must be from 1 to 255 characters. Container
    ///          names must be unique to your AWS account within a specific region. As an example, you could
    ///          create a container named <code>movies</code> in every region, as long as you don’t have an
    ///          existing container with that name.</p>
    public let containerName: Swift.String?
    /// <p>An array of key:value pairs that you define. These values can be anything that you want. Typically, the tag key represents a category (such as
    ///            "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50
    ///            tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html">Tagging Resources in MediaStore</a>.</p>
    public let tags: [MediaStoreClientTypes.Tag]?

    public init (
        containerName: Swift.String? = nil,
        tags: [MediaStoreClientTypes.Tag]? = nil
    )
    {
        self.containerName = containerName
        self.tags = tags
    }
}

struct CreateContainerInputBody: Swift.Equatable {
    public let containerName: Swift.String?
    public let tags: [MediaStoreClientTypes.Tag]?
}

extension CreateContainerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([MediaStoreClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[MediaStoreClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [MediaStoreClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateContainerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContainerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateContainerOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case internalServerError(InternalServerError)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContainerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContainerOutputResponse(container: \(Swift.String(describing: container)))"}
}

extension CreateContainerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateContainerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.container = output.container
        } else {
            self.container = nil
        }
    }
}

public struct CreateContainerOutputResponse: Swift.Equatable {
    /// <p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN
    ///          has the following format: arn:aws:<region>:<account that owns this
    ///          container>:container/<name of container>. For example:
    ///          arn:aws:mediastore:us-west-2:111122223333:container/movies </p>
    ///          <p>ContainerName: The container name as specified in the request.</p>
    ///          <p>CreationTime: Unix time stamp.</p>
    ///          <p>Status: The status of container creation or deletion. The status is one of the
    ///          following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the
    ///          service is creating the container, the status is <code>CREATING</code>. When an endpoint is
    ///          available, the status changes to <code>ACTIVE</code>.</p>
    ///          <p>The return value does not include the container's endpoint. To make downstream
    ///          requests, you must obtain this value by using <a>DescribeContainer</a> or <a>ListContainers</a>.</p>
    public let container: MediaStoreClientTypes.Container?

    public init (
        container: MediaStoreClientTypes.Container? = nil
    )
    {
        self.container = container
    }
}

struct CreateContainerOutputResponseBody: Swift.Equatable {
    public let container: MediaStoreClientTypes.Container?
}

extension CreateContainerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case container = "Container"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerDecoded = try containerValues.decodeIfPresent(MediaStoreClientTypes.Container.self, forKey: .container)
        container = containerDecoded
    }
}

public struct DeleteContainerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContainerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContainerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContainerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContainerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContainerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContainerOutputError>
}

extension DeleteContainerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContainerInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension DeleteContainerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct DeleteContainerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContainerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContainerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContainerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContainerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContainerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContainerOutputError>
}

public struct DeleteContainerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContainerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContainerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContainerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContainerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContainerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContainerOutputError>
}

public struct DeleteContainerInput: Swift.Equatable {
    /// <p>The name of the container to delete. </p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct DeleteContainerInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension DeleteContainerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension DeleteContainerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContainerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteContainerOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContainerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContainerOutputResponse()"}
}

extension DeleteContainerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteContainerOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteContainerOutputResponseBody: Swift.Equatable {
}

extension DeleteContainerOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteContainerPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContainerPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContainerPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContainerPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContainerPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContainerPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContainerPolicyOutputError>
}

extension DeleteContainerPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContainerPolicyInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension DeleteContainerPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct DeleteContainerPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContainerPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContainerPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContainerPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContainerPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContainerPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContainerPolicyOutputError>
}

public struct DeleteContainerPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContainerPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContainerPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContainerPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContainerPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContainerPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContainerPolicyOutputError>
}

public struct DeleteContainerPolicyInput: Swift.Equatable {
    /// <p>The name of the container that holds the policy.</p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct DeleteContainerPolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension DeleteContainerPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension DeleteContainerPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContainerPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteContainerPolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case policyNotFoundException(PolicyNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContainerPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContainerPolicyOutputResponse()"}
}

extension DeleteContainerPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteContainerPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteContainerPolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteContainerPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteCorsPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCorsPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCorsPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCorsPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCorsPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCorsPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCorsPolicyOutputError>
}

extension DeleteCorsPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCorsPolicyInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension DeleteCorsPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct DeleteCorsPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCorsPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCorsPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCorsPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCorsPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCorsPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCorsPolicyOutputError>
}

public struct DeleteCorsPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCorsPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCorsPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCorsPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCorsPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCorsPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCorsPolicyOutputError>
}

public struct DeleteCorsPolicyInput: Swift.Equatable {
    /// <p>The name of the container to remove the policy from.</p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct DeleteCorsPolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension DeleteCorsPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension DeleteCorsPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCorsPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CorsPolicyNotFoundException" : self = .corsPolicyNotFoundException(try CorsPolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCorsPolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case corsPolicyNotFoundException(CorsPolicyNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCorsPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCorsPolicyOutputResponse()"}
}

extension DeleteCorsPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCorsPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteCorsPolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteCorsPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteLifecyclePolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLifecyclePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLifecyclePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLifecyclePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLifecyclePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLifecyclePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLifecyclePolicyOutputError>
}

extension DeleteLifecyclePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLifecyclePolicyInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension DeleteLifecyclePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct DeleteLifecyclePolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLifecyclePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLifecyclePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLifecyclePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLifecyclePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLifecyclePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLifecyclePolicyOutputError>
}

public struct DeleteLifecyclePolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLifecyclePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLifecyclePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLifecyclePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLifecyclePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLifecyclePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLifecyclePolicyOutputError>
}

public struct DeleteLifecyclePolicyInput: Swift.Equatable {
    /// <p>The name of the container that holds the object lifecycle policy.</p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct DeleteLifecyclePolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension DeleteLifecyclePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension DeleteLifecyclePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLifecyclePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLifecyclePolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case policyNotFoundException(PolicyNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLifecyclePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLifecyclePolicyOutputResponse()"}
}

extension DeleteLifecyclePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLifecyclePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteLifecyclePolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteLifecyclePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteMetricPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMetricPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMetricPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMetricPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMetricPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMetricPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMetricPolicyOutputError>
}

extension DeleteMetricPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMetricPolicyInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension DeleteMetricPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct DeleteMetricPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMetricPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMetricPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMetricPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMetricPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMetricPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMetricPolicyOutputError>
}

public struct DeleteMetricPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMetricPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMetricPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMetricPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMetricPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMetricPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMetricPolicyOutputError>
}

public struct DeleteMetricPolicyInput: Swift.Equatable {
    /// <p>The name of the container that is associated with the metric policy that you want to delete.</p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct DeleteMetricPolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension DeleteMetricPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension DeleteMetricPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMetricPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMetricPolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case policyNotFoundException(PolicyNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMetricPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMetricPolicyOutputResponse()"}
}

extension DeleteMetricPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMetricPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteMetricPolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteMetricPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeContainerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeContainerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeContainerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeContainerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeContainerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeContainerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeContainerOutputError>
}

extension DescribeContainerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeContainerInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension DescribeContainerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct DescribeContainerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeContainerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeContainerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeContainerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeContainerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeContainerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeContainerOutputError>
}

public struct DescribeContainerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeContainerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeContainerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeContainerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeContainerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeContainerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeContainerOutputError>
}

public struct DescribeContainerInput: Swift.Equatable {
    /// <p>The name of the container to query.</p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct DescribeContainerInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension DescribeContainerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension DescribeContainerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeContainerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeContainerOutputError: Swift.Error, Swift.Equatable {
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeContainerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeContainerOutputResponse(container: \(Swift.String(describing: container)))"}
}

extension DescribeContainerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeContainerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.container = output.container
        } else {
            self.container = nil
        }
    }
}

public struct DescribeContainerOutputResponse: Swift.Equatable {
    /// <p>The name of the queried container.</p>
    public let container: MediaStoreClientTypes.Container?

    public init (
        container: MediaStoreClientTypes.Container? = nil
    )
    {
        self.container = container
    }
}

struct DescribeContainerOutputResponseBody: Swift.Equatable {
    public let container: MediaStoreClientTypes.Container?
}

extension DescribeContainerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case container = "Container"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerDecoded = try containerValues.decodeIfPresent(MediaStoreClientTypes.Container.self, forKey: .container)
        container = containerDecoded
    }
}

public struct GetContainerPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerPolicyOutputError>
}

extension GetContainerPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerPolicyInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension GetContainerPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct GetContainerPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerPolicyOutputError>
}

public struct GetContainerPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerPolicyOutputError>
}

public struct GetContainerPolicyInput: Swift.Equatable {
    /// <p>The name of the container. </p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct GetContainerPolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension GetContainerPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension GetContainerPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContainerPolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case policyNotFoundException(PolicyNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerPolicyOutputResponse(policy: \(Swift.String(describing: policy)))"}
}

extension GetContainerPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContainerPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct GetContainerPolicyOutputResponse: Swift.Equatable {
    /// <p>The contents of the access policy.</p>
    public let policy: Swift.String?

    public init (
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

struct GetContainerPolicyOutputResponseBody: Swift.Equatable {
    public let policy: Swift.String?
}

extension GetContainerPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

public struct GetCorsPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCorsPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCorsPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCorsPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCorsPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCorsPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCorsPolicyOutputError>
}

extension GetCorsPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCorsPolicyInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension GetCorsPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct GetCorsPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCorsPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCorsPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCorsPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCorsPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCorsPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCorsPolicyOutputError>
}

public struct GetCorsPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCorsPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCorsPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCorsPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCorsPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCorsPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCorsPolicyOutputError>
}

public struct GetCorsPolicyInput: Swift.Equatable {
    /// <p>The name of the container that the policy is assigned to.</p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct GetCorsPolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension GetCorsPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension GetCorsPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCorsPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CorsPolicyNotFoundException" : self = .corsPolicyNotFoundException(try CorsPolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCorsPolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case corsPolicyNotFoundException(CorsPolicyNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCorsPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCorsPolicyOutputResponse(corsPolicy: \(Swift.String(describing: corsPolicy)))"}
}

extension GetCorsPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCorsPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.corsPolicy = output.corsPolicy
        } else {
            self.corsPolicy = nil
        }
    }
}

public struct GetCorsPolicyOutputResponse: Swift.Equatable {
    /// <p>The CORS policy assigned to the container.</p>
    public let corsPolicy: [MediaStoreClientTypes.CorsRule]?

    public init (
        corsPolicy: [MediaStoreClientTypes.CorsRule]? = nil
    )
    {
        self.corsPolicy = corsPolicy
    }
}

struct GetCorsPolicyOutputResponseBody: Swift.Equatable {
    public let corsPolicy: [MediaStoreClientTypes.CorsRule]?
}

extension GetCorsPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case corsPolicy = "CorsPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let corsPolicyContainer = try containerValues.decodeIfPresent([MediaStoreClientTypes.CorsRule?].self, forKey: .corsPolicy)
        var corsPolicyDecoded0:[MediaStoreClientTypes.CorsRule]? = nil
        if let corsPolicyContainer = corsPolicyContainer {
            corsPolicyDecoded0 = [MediaStoreClientTypes.CorsRule]()
            for structure0 in corsPolicyContainer {
                if let structure0 = structure0 {
                    corsPolicyDecoded0?.append(structure0)
                }
            }
        }
        corsPolicy = corsPolicyDecoded0
    }
}

public struct GetLifecyclePolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLifecyclePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLifecyclePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLifecyclePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLifecyclePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLifecyclePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLifecyclePolicyOutputError>
}

extension GetLifecyclePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLifecyclePolicyInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension GetLifecyclePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct GetLifecyclePolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLifecyclePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLifecyclePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLifecyclePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLifecyclePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLifecyclePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLifecyclePolicyOutputError>
}

public struct GetLifecyclePolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLifecyclePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLifecyclePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLifecyclePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLifecyclePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLifecyclePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLifecyclePolicyOutputError>
}

public struct GetLifecyclePolicyInput: Swift.Equatable {
    /// <p>The name of the container that the object lifecycle policy is assigned to.</p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct GetLifecyclePolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension GetLifecyclePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension GetLifecyclePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLifecyclePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLifecyclePolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case policyNotFoundException(PolicyNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLifecyclePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLifecyclePolicyOutputResponse(lifecyclePolicy: \(Swift.String(describing: lifecyclePolicy)))"}
}

extension GetLifecyclePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetLifecyclePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lifecyclePolicy = output.lifecyclePolicy
        } else {
            self.lifecyclePolicy = nil
        }
    }
}

public struct GetLifecyclePolicyOutputResponse: Swift.Equatable {
    /// <p>The object lifecycle policy that is assigned to the container.</p>
    public let lifecyclePolicy: Swift.String?

    public init (
        lifecyclePolicy: Swift.String? = nil
    )
    {
        self.lifecyclePolicy = lifecyclePolicy
    }
}

struct GetLifecyclePolicyOutputResponseBody: Swift.Equatable {
    public let lifecyclePolicy: Swift.String?
}

extension GetLifecyclePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecyclePolicy = "LifecyclePolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecyclePolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecyclePolicy)
        lifecyclePolicy = lifecyclePolicyDecoded
    }
}

public struct GetMetricPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricPolicyOutputError>
}

extension GetMetricPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricPolicyInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension GetMetricPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct GetMetricPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricPolicyOutputError>
}

public struct GetMetricPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricPolicyOutputError>
}

public struct GetMetricPolicyInput: Swift.Equatable {
    /// <p>The name of the container that is associated with the metric policy.</p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct GetMetricPolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension GetMetricPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension GetMetricPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMetricPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMetricPolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case policyNotFoundException(PolicyNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMetricPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricPolicyOutputResponse(metricPolicy: \(Swift.String(describing: metricPolicy)))"}
}

extension GetMetricPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMetricPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricPolicy = output.metricPolicy
        } else {
            self.metricPolicy = nil
        }
    }
}

public struct GetMetricPolicyOutputResponse: Swift.Equatable {
    /// <p>The metric policy that is associated with the specific container.</p>
    public let metricPolicy: MediaStoreClientTypes.MetricPolicy?

    public init (
        metricPolicy: MediaStoreClientTypes.MetricPolicy? = nil
    )
    {
        self.metricPolicy = metricPolicy
    }
}

struct GetMetricPolicyOutputResponseBody: Swift.Equatable {
    public let metricPolicy: MediaStoreClientTypes.MetricPolicy?
}

extension GetMetricPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricPolicy = "MetricPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricPolicyDecoded = try containerValues.decodeIfPresent(MediaStoreClientTypes.MetricPolicy.self, forKey: .metricPolicy)
        metricPolicy = metricPolicyDecoded
    }
}

extension InternalServerError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServerError(message: \(Swift.String(describing: message)))"}
}

extension InternalServerError: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServerErrorBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service is temporarily unavailable.</p>
public struct InternalServerError: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerErrorBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServerErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A service limit has been exceeded.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListContainersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListContainersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListContainersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListContainersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListContainersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListContainersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListContainersOutputError>
}

extension ListContainersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListContainersInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListContainersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListContainersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListContainersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListContainersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListContainersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListContainersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListContainersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListContainersOutputError>
}

public struct ListContainersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListContainersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListContainersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListContainersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListContainersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListContainersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListContainersOutputError>
}

public struct ListContainersInput: Swift.Equatable {
    /// <p>Enter the maximum number of containers in the response. Use from 1 to 255 characters.
    ///       </p>
    public let maxResults: Swift.Int?
    /// <p>Only if you used <code>MaxResults</code> in the first command, enter the token (which
    ///          was included in the previous response) to obtain the next set of containers. This token is
    ///          included in a response only if there actually are more containers to list.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListContainersInputBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
}

extension ListContainersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListContainersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListContainersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListContainersOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListContainersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListContainersOutputResponse(containers: \(Swift.String(describing: containers)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListContainersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListContainersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containers = output.containers
            self.nextToken = output.nextToken
        } else {
            self.containers = nil
            self.nextToken = nil
        }
    }
}

public struct ListContainersOutputResponse: Swift.Equatable {
    /// <p>The names of the containers.</p>
    public let containers: [MediaStoreClientTypes.Container]?
    /// <p>
    ///             <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>.
    ///          This token is returned only if you included the <code>MaxResults</code> tag in the original
    ///          command, and only if there are still containers to return. </p>
    public let nextToken: Swift.String?

    public init (
        containers: [MediaStoreClientTypes.Container]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.containers = containers
        self.nextToken = nextToken
    }
}

struct ListContainersOutputResponseBody: Swift.Equatable {
    public let containers: [MediaStoreClientTypes.Container]?
    public let nextToken: Swift.String?
}

extension ListContainersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers = "Containers"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containersContainer = try containerValues.decodeIfPresent([MediaStoreClientTypes.Container?].self, forKey: .containers)
        var containersDecoded0:[MediaStoreClientTypes.Container]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [MediaStoreClientTypes.Container]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTagsForResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resource: \(Swift.String(describing: resource)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resource = "Resource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resource = resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) for the container.</p>
    public let resource: Swift.String?

    public init (
        resource: Swift.String? = nil
    )
    {
        self.resource = resource
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    public let resource: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resource = "Resource"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// <p>An array of key:value pairs that are assigned to the container.</p>
    public let tags: [MediaStoreClientTypes.Tag]?

    public init (
        tags: [MediaStoreClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [MediaStoreClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([MediaStoreClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[MediaStoreClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [MediaStoreClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension MediaStoreClientTypes {
    public enum MethodName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case `get`
        case head
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [MethodName] {
            return [
                .delete,
                .get,
                .head,
                .put,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .get: return "GET"
            case .head: return "HEAD"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MethodName(rawValue: rawValue) ?? MethodName.sdkUnknown(rawValue)
        }
    }
}

extension MediaStoreClientTypes.MetricPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerLevelMetrics = "ContainerLevelMetrics"
        case metricPolicyRules = "MetricPolicyRules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerLevelMetrics = containerLevelMetrics {
            try encodeContainer.encode(containerLevelMetrics.rawValue, forKey: .containerLevelMetrics)
        }
        if let metricPolicyRules = metricPolicyRules {
            var metricPolicyRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricPolicyRules)
            for metricpolicyrules0 in metricPolicyRules {
                try metricPolicyRulesContainer.encode(metricpolicyrules0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerLevelMetricsDecoded = try containerValues.decodeIfPresent(MediaStoreClientTypes.ContainerLevelMetrics.self, forKey: .containerLevelMetrics)
        containerLevelMetrics = containerLevelMetricsDecoded
        let metricPolicyRulesContainer = try containerValues.decodeIfPresent([MediaStoreClientTypes.MetricPolicyRule?].self, forKey: .metricPolicyRules)
        var metricPolicyRulesDecoded0:[MediaStoreClientTypes.MetricPolicyRule]? = nil
        if let metricPolicyRulesContainer = metricPolicyRulesContainer {
            metricPolicyRulesDecoded0 = [MediaStoreClientTypes.MetricPolicyRule]()
            for structure0 in metricPolicyRulesContainer {
                if let structure0 = structure0 {
                    metricPolicyRulesDecoded0?.append(structure0)
                }
            }
        }
        metricPolicyRules = metricPolicyRulesDecoded0
    }
}

extension MediaStoreClientTypes.MetricPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricPolicy(containerLevelMetrics: \(Swift.String(describing: containerLevelMetrics)), metricPolicyRules: \(Swift.String(describing: metricPolicyRules)))"}
}

extension MediaStoreClientTypes {
    /// <p>The metric policy that is associated with the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include rules to define groups of objects that you want MediaStore to send object-level metrics for.</p>
    ///          <p>To view examples of how to construct a metric policy for your use case, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/policies-metric-examples.html">Example Metric Policies</a>.</p>
    public struct MetricPolicy: Swift.Equatable {
        /// <p>A setting to enable or disable metrics at the container level.</p>
        public let containerLevelMetrics: MediaStoreClientTypes.ContainerLevelMetrics?
        /// <p>A parameter that holds an array of rules that enable metrics at the object level. This parameter is optional, but if you choose to include it, you must also include at least one rule. By default, you can include up to five rules. You can also <a href="https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas">request a quota increase</a> to allow up to 300 rules per policy.</p>
        public let metricPolicyRules: [MediaStoreClientTypes.MetricPolicyRule]?

        public init (
            containerLevelMetrics: MediaStoreClientTypes.ContainerLevelMetrics? = nil,
            metricPolicyRules: [MediaStoreClientTypes.MetricPolicyRule]? = nil
        )
        {
            self.containerLevelMetrics = containerLevelMetrics
            self.metricPolicyRules = metricPolicyRules
        }
    }

}

extension MediaStoreClientTypes.MetricPolicyRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectGroup = "ObjectGroup"
        case objectGroupName = "ObjectGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let objectGroup = objectGroup {
            try encodeContainer.encode(objectGroup, forKey: .objectGroup)
        }
        if let objectGroupName = objectGroupName {
            try encodeContainer.encode(objectGroupName, forKey: .objectGroupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectGroup)
        objectGroup = objectGroupDecoded
        let objectGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectGroupName)
        objectGroupName = objectGroupNameDecoded
    }
}

extension MediaStoreClientTypes.MetricPolicyRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricPolicyRule(objectGroup: \(Swift.String(describing: objectGroup)), objectGroupName: \(Swift.String(describing: objectGroupName)))"}
}

extension MediaStoreClientTypes {
    /// <p>A setting that enables metrics at the object level. Each rule contains an object group and an object group name. If the policy includes the MetricPolicyRules parameter, you must include at least one rule. Each metric policy can include up to five rules by default. You can also <a href="https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas">request a quota increase</a> to allow up to 300 rules per policy.</p>
    public struct MetricPolicyRule: Swift.Equatable {
        /// <p>A path or file name that defines which objects to include in the group. Wildcards (*) are acceptable.</p>
        public let objectGroup: Swift.String?
        /// <p>A name that allows you to refer to the object group.</p>
        public let objectGroupName: Swift.String?

        public init (
            objectGroup: Swift.String? = nil,
            objectGroupName: Swift.String? = nil
        )
        {
            self.objectGroup = objectGroup
            self.objectGroupName = objectGroupName
        }
    }

}

extension PolicyNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension PolicyNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PolicyNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The policy that you specified in the request does not exist.</p>
public struct PolicyNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension PolicyNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct PutContainerPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutContainerPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutContainerPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutContainerPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutContainerPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutContainerPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutContainerPolicyOutputError>
}

extension PutContainerPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutContainerPolicyInput(containerName: \(Swift.String(describing: containerName)), policy: \(Swift.String(describing: policy)))"}
}

extension PutContainerPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
        case policy = "Policy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let policy = policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
    }
}

public struct PutContainerPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutContainerPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutContainerPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutContainerPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutContainerPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutContainerPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutContainerPolicyOutputError>
}

public struct PutContainerPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutContainerPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutContainerPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutContainerPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutContainerPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutContainerPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutContainerPolicyOutputError>
}

public struct PutContainerPolicyInput: Swift.Equatable {
    /// <p>The name of the container.</p>
    public let containerName: Swift.String?
    /// <p>The contents of the policy, which includes the following: </p>
    ///          <ul>
    ///             <li>
    ///                <p>One <code>Version</code> tag</p>
    ///             </li>
    ///             <li>
    ///                <p>One <code>Statement</code> tag that contains the standard tags for the
    ///                policy.</p>
    ///             </li>
    ///          </ul>
    public let policy: Swift.String?

    public init (
        containerName: Swift.String? = nil,
        policy: Swift.String? = nil
    )
    {
        self.containerName = containerName
        self.policy = policy
    }
}

struct PutContainerPolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
    public let policy: Swift.String?
}

extension PutContainerPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension PutContainerPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutContainerPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutContainerPolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutContainerPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutContainerPolicyOutputResponse()"}
}

extension PutContainerPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutContainerPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutContainerPolicyOutputResponseBody: Swift.Equatable {
}

extension PutContainerPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutCorsPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutCorsPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutCorsPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutCorsPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutCorsPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutCorsPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutCorsPolicyOutputError>
}

extension PutCorsPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutCorsPolicyInput(containerName: \(Swift.String(describing: containerName)), corsPolicy: \(Swift.String(describing: corsPolicy)))"}
}

extension PutCorsPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
        case corsPolicy = "CorsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let corsPolicy = corsPolicy {
            var corsPolicyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .corsPolicy)
            for corspolicy0 in corsPolicy {
                try corsPolicyContainer.encode(corspolicy0)
            }
        }
    }
}

public struct PutCorsPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutCorsPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutCorsPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutCorsPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutCorsPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutCorsPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutCorsPolicyOutputError>
}

public struct PutCorsPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutCorsPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutCorsPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutCorsPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutCorsPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutCorsPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutCorsPolicyOutputError>
}

public struct PutCorsPolicyInput: Swift.Equatable {
    /// <p>The name of the container that you want to assign the CORS policy to.</p>
    public let containerName: Swift.String?
    /// <p>The CORS policy to apply to the container.  </p>
    public let corsPolicy: [MediaStoreClientTypes.CorsRule]?

    public init (
        containerName: Swift.String? = nil,
        corsPolicy: [MediaStoreClientTypes.CorsRule]? = nil
    )
    {
        self.containerName = containerName
        self.corsPolicy = corsPolicy
    }
}

struct PutCorsPolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
    public let corsPolicy: [MediaStoreClientTypes.CorsRule]?
}

extension PutCorsPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
        case corsPolicy = "CorsPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let corsPolicyContainer = try containerValues.decodeIfPresent([MediaStoreClientTypes.CorsRule?].self, forKey: .corsPolicy)
        var corsPolicyDecoded0:[MediaStoreClientTypes.CorsRule]? = nil
        if let corsPolicyContainer = corsPolicyContainer {
            corsPolicyDecoded0 = [MediaStoreClientTypes.CorsRule]()
            for structure0 in corsPolicyContainer {
                if let structure0 = structure0 {
                    corsPolicyDecoded0?.append(structure0)
                }
            }
        }
        corsPolicy = corsPolicyDecoded0
    }
}

extension PutCorsPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutCorsPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutCorsPolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutCorsPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutCorsPolicyOutputResponse()"}
}

extension PutCorsPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutCorsPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutCorsPolicyOutputResponseBody: Swift.Equatable {
}

extension PutCorsPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutLifecyclePolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLifecyclePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLifecyclePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLifecyclePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLifecyclePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLifecyclePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLifecyclePolicyOutputError>
}

extension PutLifecyclePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutLifecyclePolicyInput(containerName: \(Swift.String(describing: containerName)), lifecyclePolicy: \(Swift.String(describing: lifecyclePolicy)))"}
}

extension PutLifecyclePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
        case lifecyclePolicy = "LifecyclePolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let lifecyclePolicy = lifecyclePolicy {
            try encodeContainer.encode(lifecyclePolicy, forKey: .lifecyclePolicy)
        }
    }
}

public struct PutLifecyclePolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLifecyclePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLifecyclePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLifecyclePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLifecyclePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLifecyclePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLifecyclePolicyOutputError>
}

public struct PutLifecyclePolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLifecyclePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLifecyclePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLifecyclePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLifecyclePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLifecyclePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLifecyclePolicyOutputError>
}

public struct PutLifecyclePolicyInput: Swift.Equatable {
    /// <p>The name of the container that you want to assign the object lifecycle policy to.</p>
    public let containerName: Swift.String?
    /// <p>The object lifecycle policy to apply to the container.</p>
    public let lifecyclePolicy: Swift.String?

    public init (
        containerName: Swift.String? = nil,
        lifecyclePolicy: Swift.String? = nil
    )
    {
        self.containerName = containerName
        self.lifecyclePolicy = lifecyclePolicy
    }
}

struct PutLifecyclePolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
    public let lifecyclePolicy: Swift.String?
}

extension PutLifecyclePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
        case lifecyclePolicy = "LifecyclePolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let lifecyclePolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecyclePolicy)
        lifecyclePolicy = lifecyclePolicyDecoded
    }
}

extension PutLifecyclePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutLifecyclePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutLifecyclePolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLifecyclePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutLifecyclePolicyOutputResponse()"}
}

extension PutLifecyclePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutLifecyclePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutLifecyclePolicyOutputResponseBody: Swift.Equatable {
}

extension PutLifecyclePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutMetricPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricPolicyOutputError>
}

extension PutMetricPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutMetricPolicyInput(containerName: \(Swift.String(describing: containerName)), metricPolicy: \(Swift.String(describing: metricPolicy)))"}
}

extension PutMetricPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
        case metricPolicy = "MetricPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let metricPolicy = metricPolicy {
            try encodeContainer.encode(metricPolicy, forKey: .metricPolicy)
        }
    }
}

public struct PutMetricPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricPolicyOutputError>
}

public struct PutMetricPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutMetricPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutMetricPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutMetricPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutMetricPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutMetricPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutMetricPolicyOutputError>
}

public struct PutMetricPolicyInput: Swift.Equatable {
    /// <p>The name of the container that you want to add the metric policy to.</p>
    public let containerName: Swift.String?
    /// <p>The metric policy that you want to associate with the container. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include up to five rules to define groups of objects that you want MediaStore to send object-level metrics for.  If you include rules in the policy, construct each rule with both of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>An object group that defines which objects to include in the group. The definition can be a path or a file name, but it can't have more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _ (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde), / (forward slash), and * (asterisk). Wildcards (*) are acceptable.</p>
    ///             </li>
    ///             <li>
    ///                <p>An object group name that allows you to refer to the object group. The name can't have more than 30 characters. Valid characters are: a-z, A-Z, 0-9, and _ (underscore).</p>
    ///             </li>
    ///          </ul>
    public let metricPolicy: MediaStoreClientTypes.MetricPolicy?

    public init (
        containerName: Swift.String? = nil,
        metricPolicy: MediaStoreClientTypes.MetricPolicy? = nil
    )
    {
        self.containerName = containerName
        self.metricPolicy = metricPolicy
    }
}

struct PutMetricPolicyInputBody: Swift.Equatable {
    public let containerName: Swift.String?
    public let metricPolicy: MediaStoreClientTypes.MetricPolicy?
}

extension PutMetricPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
        case metricPolicy = "MetricPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let metricPolicyDecoded = try containerValues.decodeIfPresent(MediaStoreClientTypes.MetricPolicy.self, forKey: .metricPolicy)
        metricPolicy = metricPolicyDecoded
    }
}

extension PutMetricPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutMetricPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutMetricPolicyOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutMetricPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutMetricPolicyOutputResponse()"}
}

extension PutMetricPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutMetricPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutMetricPolicyOutputResponseBody: Swift.Equatable {
}

extension PutMetricPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct StartAccessLoggingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartAccessLoggingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartAccessLoggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartAccessLoggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartAccessLoggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartAccessLoggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartAccessLoggingOutputError>
}

extension StartAccessLoggingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartAccessLoggingInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension StartAccessLoggingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct StartAccessLoggingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartAccessLoggingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartAccessLoggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartAccessLoggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartAccessLoggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartAccessLoggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartAccessLoggingOutputError>
}

public struct StartAccessLoggingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartAccessLoggingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartAccessLoggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartAccessLoggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartAccessLoggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartAccessLoggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartAccessLoggingOutputError>
}

public struct StartAccessLoggingInput: Swift.Equatable {
    /// <p>The name of the container that you want to start access logging on.</p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct StartAccessLoggingInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension StartAccessLoggingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension StartAccessLoggingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartAccessLoggingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartAccessLoggingOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartAccessLoggingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartAccessLoggingOutputResponse()"}
}

extension StartAccessLoggingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartAccessLoggingOutputResponse: Swift.Equatable {

    public init() {}
}

struct StartAccessLoggingOutputResponseBody: Swift.Equatable {
}

extension StartAccessLoggingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct StopAccessLoggingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopAccessLoggingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopAccessLoggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopAccessLoggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopAccessLoggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopAccessLoggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopAccessLoggingOutputError>
}

extension StopAccessLoggingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopAccessLoggingInput(containerName: \(Swift.String(describing: containerName)))"}
}

extension StopAccessLoggingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
    }
}

public struct StopAccessLoggingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopAccessLoggingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopAccessLoggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopAccessLoggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopAccessLoggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopAccessLoggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopAccessLoggingOutputError>
}

public struct StopAccessLoggingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopAccessLoggingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopAccessLoggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopAccessLoggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopAccessLoggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopAccessLoggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopAccessLoggingOutputError>
}

public struct StopAccessLoggingInput: Swift.Equatable {
    /// <p>The name of the container that you want to stop access logging on.</p>
    public let containerName: Swift.String?

    public init (
        containerName: Swift.String? = nil
    )
    {
        self.containerName = containerName
    }
}

struct StopAccessLoggingInputBody: Swift.Equatable {
    public let containerName: Swift.String?
}

extension StopAccessLoggingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName = "ContainerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
    }
}

extension StopAccessLoggingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopAccessLoggingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopAccessLoggingOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopAccessLoggingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopAccessLoggingOutputResponse()"}
}

extension StopAccessLoggingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopAccessLoggingOutputResponse: Swift.Equatable {

    public init() {}
}

struct StopAccessLoggingOutputResponseBody: Swift.Equatable {
}

extension StopAccessLoggingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaStoreClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension MediaStoreClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension MediaStoreClientTypes {
    /// <p>A collection of tags associated with a container. Each tag consists of a key:value pair, which can be anything you define. Typically, the tag key
    ///             represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or
    ///             "production"). You can add up to 50
    ///             tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html">Tagging Resources in MediaStore</a>.</p>
    public struct Tag: Swift.Equatable {
        /// <p>Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are
        ///             case-sensitive.</p>
        public let key: Swift.String?
        /// <p>Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or
        ///             "companyB." Tag values are case-sensitive.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resource: \(Swift.String(describing: resource)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resource = "Resource"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resource = resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) for the container. </p>
    public let resource: Swift.String?
    /// <p>An array of key:value pairs that you want to add to the container. You need to specify only the tags that you want to add or update. For example,
    ///             suppose a container already has two tags (customer:CompanyA and priority:High). You want to change the priority tag and also add a third tag
    ///             (type:Contract). For TagResource, you specify the following tags: priority:Medium, type:Contract. The result is that your container has three tags:
    ///             customer:CompanyA, priority:Medium, and type:Contract.</p>
    public let tags: [MediaStoreClientTypes.Tag]?

    public init (
        resource: Swift.String? = nil,
        tags: [MediaStoreClientTypes.Tag]? = nil
    )
    {
        self.resource = resource
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let resource: Swift.String?
    public let tags: [MediaStoreClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resource = "Resource"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let tagsContainer = try containerValues.decodeIfPresent([MediaStoreClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[MediaStoreClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [MediaStoreClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UntagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resource: \(Swift.String(describing: resource)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resource = "Resource"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resource = resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) for the container.</p>
    public let resource: Swift.String?
    /// <p>A comma-separated list of keys for tags that you want to remove from the container. For example, if your container has two tags (customer:CompanyA
    ///             and priority:High) and you want to remove one of the tags (priority:High), you specify the key for the tag that you want to remove
    ///             (priority).</p>
    public let tagKeys: [Swift.String]?

    public init (
        resource: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resource = resource
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    public let resource: Swift.String?
    public let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resource = "Resource"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContainerInUseException" : self = .containerInUseException(try ContainerInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContainerNotFoundException" : self = .containerNotFoundException(try ContainerNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case containerInUseException(ContainerInUseException)
    case containerNotFoundException(ContainerNotFoundException)
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}
