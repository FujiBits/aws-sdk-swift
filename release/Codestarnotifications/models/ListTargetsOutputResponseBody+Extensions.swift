// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTargetsOutputResponseBody: Equatable {
    public let targets: [TargetSummary]?
    public let nextToken: String?
}

extension ListTargetsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case targets = "Targets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetsContainer = try containerValues.decodeIfPresent([TargetSummary?].self, forKey: .targets)
        var targetsDecoded0:[TargetSummary]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [TargetSummary]()
            for structure0 in targetsContainer {
                if let structure0 = structure0 {
                    targetsDecoded0?.append(structure0)
                }
            }
        }
        targets = targetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
