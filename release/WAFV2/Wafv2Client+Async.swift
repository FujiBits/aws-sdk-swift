// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension Wafv2Client {
    /// <p>Associates a Web ACL with a regional application resource, to protect the resource. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>For AWS CloudFront, don't use this call. Instead, use your CloudFront distribution configuration. To associate a Web ACL, in the CloudFront call <code>UpdateDistribution</code>, set the web ACL ID to the Amazon Resource Name (ARN) of the Web ACL. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html">UpdateDistribution</a>.</p>
    func associateWebACL(input: AssociateWebACLInput) async throws -> AssociateWebACLOutputResponse
    {
        typealias associateWebACLContinuation = CheckedContinuation<AssociateWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWebACLContinuation) in
            associateWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the web ACL capacity unit (WCU) requirements for a specified scope and set of rules.
    ///          You can use this to check the capacity requirements for the rules you want to use in a
    ///          <a>RuleGroup</a> or <a>WebACL</a>.
    ///          </p>
    ///          <p>AWS WAF uses WCUs to calculate and control the operating
    ///          resources that are used to run your rules, rule groups, and web ACLs. AWS WAF
    ///          calculates capacity differently for each rule type, to reflect the relative cost of each rule.
    ///          Simple rules that cost little to run use fewer WCUs than more complex rules
    /// 				that use more processing power.
    /// 				Rule group capacity is fixed at creation, which helps users plan their
    ///          web ACL WCU usage when they use a rule group.
    ///          The WCU limit for web ACLs is 1,500.  </p>
    func checkCapacity(input: CheckCapacityInput) async throws -> CheckCapacityOutputResponse
    {
        typealias checkCapacityContinuation = CheckedContinuation<CheckCapacityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: checkCapacityContinuation) in
            checkCapacity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an <a>IPSet</a>, which you use to identify web requests that originate from specific IP addresses or ranges of IP addresses. For example, if you're receiving a lot of requests from a ranges of IP addresses, you can configure AWS WAF to block them using an IPSet that lists those IP addresses. </p>
    func createIPSet(input: CreateIPSetInput) async throws -> CreateIPSetOutputResponse
    {
        typealias createIPSetContinuation = CheckedContinuation<CreateIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIPSetContinuation) in
            createIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a <a>RegexPatternSet</a>, which you reference in a <a>RegexPatternSetReferenceStatement</a>, to have AWS WAF inspect a web request component for the specified patterns.</p>
    func createRegexPatternSet(input: CreateRegexPatternSetInput) async throws -> CreateRegexPatternSetOutputResponse
    {
        typealias createRegexPatternSetContinuation = CheckedContinuation<CreateRegexPatternSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRegexPatternSetContinuation) in
            createRegexPatternSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a <a>RuleGroup</a> per the specifications provided. </p>
    ///          <p> A rule group defines a collection of rules to inspect and control web requests that you can use in a <a>WebACL</a>. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements. </p>
    func createRuleGroup(input: CreateRuleGroupInput) async throws -> CreateRuleGroupOutputResponse
    {
        typealias createRuleGroupContinuation = CheckedContinuation<CreateRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRuleGroupContinuation) in
            createRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a <a>WebACL</a> per the specifications provided.</p>
    ///          <p> A Web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the Web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a Web ACL can be a combination of the types <a>Rule</a>, <a>RuleGroup</a>, and managed rule group. You can associate a Web ACL with one or more AWS resources to protect. The resources can be Amazon CloudFront, an Amazon API Gateway REST API, an Application Load Balancer, or an AWS AppSync GraphQL API.  </p>
    func createWebACL(input: CreateWebACLInput) async throws -> CreateWebACLOutputResponse
    {
        typealias createWebACLContinuation = CheckedContinuation<CreateWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWebACLContinuation) in
            createWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes all rule groups that are managed by AWS Firewall Manager for the specified web ACL. </p>
    ///          <p>You can only use this if <code>ManagedByFirewallManager</code> is false in the specified <a>WebACL</a>.  </p>
    func deleteFirewallManagerRuleGroups(input: DeleteFirewallManagerRuleGroupsInput) async throws -> DeleteFirewallManagerRuleGroupsOutputResponse
    {
        typealias deleteFirewallManagerRuleGroupsContinuation = CheckedContinuation<DeleteFirewallManagerRuleGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFirewallManagerRuleGroupsContinuation) in
            deleteFirewallManagerRuleGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified <a>IPSet</a>. </p>
    func deleteIPSet(input: DeleteIPSetInput) async throws -> DeleteIPSetOutputResponse
    {
        typealias deleteIPSetContinuation = CheckedContinuation<DeleteIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIPSetContinuation) in
            deleteIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the <a>LoggingConfiguration</a> from the specified web
    ///          ACL.</p>
    func deleteLoggingConfiguration(input: DeleteLoggingConfigurationInput) async throws -> DeleteLoggingConfigurationOutputResponse
    {
        typealias deleteLoggingConfigurationContinuation = CheckedContinuation<DeleteLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLoggingConfigurationContinuation) in
            deleteLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Permanently deletes an IAM policy from the specified rule group.</p>
    ///         <p>You must be the owner of the rule group to perform this operation.</p>
    func deletePermissionPolicy(input: DeletePermissionPolicyInput) async throws -> DeletePermissionPolicyOutputResponse
    {
        typealias deletePermissionPolicyContinuation = CheckedContinuation<DeletePermissionPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePermissionPolicyContinuation) in
            deletePermissionPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified <a>RegexPatternSet</a>.</p>
    func deleteRegexPatternSet(input: DeleteRegexPatternSetInput) async throws -> DeleteRegexPatternSetOutputResponse
    {
        typealias deleteRegexPatternSetContinuation = CheckedContinuation<DeleteRegexPatternSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRegexPatternSetContinuation) in
            deleteRegexPatternSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified <a>RuleGroup</a>.</p>
    func deleteRuleGroup(input: DeleteRuleGroupInput) async throws -> DeleteRuleGroupOutputResponse
    {
        typealias deleteRuleGroupContinuation = CheckedContinuation<DeleteRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRuleGroupContinuation) in
            deleteRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified <a>WebACL</a>.</p>
    ///          <p>You can only use this if <code>ManagedByFirewallManager</code> is false in the specified <a>WebACL</a>.  </p>
    func deleteWebACL(input: DeleteWebACLInput) async throws -> DeleteWebACLOutputResponse
    {
        typealias deleteWebACLContinuation = CheckedContinuation<DeleteWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWebACLContinuation) in
            deleteWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides high-level information for a managed rule group, including descriptions of the rules. </p>
    func describeManagedRuleGroup(input: DescribeManagedRuleGroupInput) async throws -> DescribeManagedRuleGroupOutputResponse
    {
        typealias describeManagedRuleGroupContinuation = CheckedContinuation<DescribeManagedRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeManagedRuleGroupContinuation) in
            describeManagedRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates a Web ACL from a regional application resource. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>For AWS CloudFront, don't use this call. Instead, use your CloudFront distribution configuration. To disassociate a Web ACL, provide an empty web ACL ID in the CloudFront call <code>UpdateDistribution</code>. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html">UpdateDistribution</a>.</p>
    func disassociateWebACL(input: DisassociateWebACLInput) async throws -> DisassociateWebACLOutputResponse
    {
        typealias disassociateWebACLContinuation = CheckedContinuation<DisassociateWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWebACLContinuation) in
            disassociateWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the specified <a>IPSet</a>.</p>
    func getIPSet(input: GetIPSetInput) async throws -> GetIPSetOutputResponse
    {
        typealias getIPSetContinuation = CheckedContinuation<GetIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIPSetContinuation) in
            getIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the <a>LoggingConfiguration</a> for the specified web ACL.</p>
    func getLoggingConfiguration(input: GetLoggingConfigurationInput) async throws -> GetLoggingConfigurationOutputResponse
    {
        typealias getLoggingConfigurationContinuation = CheckedContinuation<GetLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLoggingConfigurationContinuation) in
            getLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the IAM policy that is attached to the specified rule group.</p>
    ///         <p>You must be the owner of the rule group to perform this operation.</p>
    func getPermissionPolicy(input: GetPermissionPolicyInput) async throws -> GetPermissionPolicyOutputResponse
    {
        typealias getPermissionPolicyContinuation = CheckedContinuation<GetPermissionPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPermissionPolicyContinuation) in
            getPermissionPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the keys that are currently blocked by a rate-based rule. The maximum number of managed keys that can be blocked for a single rate-based rule is 10,000. If more than 10,000 addresses exceed the rate limit, those with the highest rates are blocked.</p>
    func getRateBasedStatementManagedKeys(input: GetRateBasedStatementManagedKeysInput) async throws -> GetRateBasedStatementManagedKeysOutputResponse
    {
        typealias getRateBasedStatementManagedKeysContinuation = CheckedContinuation<GetRateBasedStatementManagedKeysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRateBasedStatementManagedKeysContinuation) in
            getRateBasedStatementManagedKeys(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the specified <a>RegexPatternSet</a>.</p>
    func getRegexPatternSet(input: GetRegexPatternSetInput) async throws -> GetRegexPatternSetOutputResponse
    {
        typealias getRegexPatternSetContinuation = CheckedContinuation<GetRegexPatternSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRegexPatternSetContinuation) in
            getRegexPatternSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the specified <a>RuleGroup</a>.</p>
    func getRuleGroup(input: GetRuleGroupInput) async throws -> GetRuleGroupOutputResponse
    {
        typealias getRuleGroupContinuation = CheckedContinuation<GetRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRuleGroupContinuation) in
            getRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets detailed information about a specified number of requests--a sample--that AWS WAF randomly selects from among the first 5,000 requests that your AWS resource received during a time range that you choose. You can specify a sample size of up to 500 requests, and you can specify any time range in the previous three hours.</p>
    ///          <p>
    ///             <code>GetSampledRequests</code> returns a time range, which is usually the time range that you specified. However, if your resource
    ///          (such as a CloudFront distribution) received 5,000 requests before the specified time range elapsed, <code>GetSampledRequests</code>
    ///          returns an updated time range. This new time range indicates the actual period during which AWS WAF selected the requests in the sample.</p>
    func getSampledRequests(input: GetSampledRequestsInput) async throws -> GetSampledRequestsOutputResponse
    {
        typealias getSampledRequestsContinuation = CheckedContinuation<GetSampledRequestsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSampledRequestsContinuation) in
            getSampledRequests(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the specified <a>WebACL</a>.</p>
    func getWebACL(input: GetWebACLInput) async throws -> GetWebACLOutputResponse
    {
        typealias getWebACLContinuation = CheckedContinuation<GetWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWebACLContinuation) in
            getWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the <a>WebACL</a> for the specified resource. </p>
    func getWebACLForResource(input: GetWebACLForResourceInput) async throws -> GetWebACLForResourceOutputResponse
    {
        typealias getWebACLForResourceContinuation = CheckedContinuation<GetWebACLForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWebACLForResourceContinuation) in
            getWebACLForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves an array of managed rule groups that are available for you to use. This list includes all AWS Managed Rules rule groups and the AWS Marketplace managed rule groups that you're subscribed to.</p>
    func listAvailableManagedRuleGroups(input: ListAvailableManagedRuleGroupsInput) async throws -> ListAvailableManagedRuleGroupsOutputResponse
    {
        typealias listAvailableManagedRuleGroupsContinuation = CheckedContinuation<ListAvailableManagedRuleGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAvailableManagedRuleGroupsContinuation) in
            listAvailableManagedRuleGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves an array of <a>IPSetSummary</a> objects for the IP sets that you manage.</p>
    func listIPSets(input: ListIPSetsInput) async throws -> ListIPSetsOutputResponse
    {
        typealias listIPSetsContinuation = CheckedContinuation<ListIPSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIPSetsContinuation) in
            listIPSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves an array of your <a>LoggingConfiguration</a> objects.</p>
    func listLoggingConfigurations(input: ListLoggingConfigurationsInput) async throws -> ListLoggingConfigurationsOutputResponse
    {
        typealias listLoggingConfigurationsContinuation = CheckedContinuation<ListLoggingConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLoggingConfigurationsContinuation) in
            listLoggingConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves an array of <a>RegexPatternSetSummary</a> objects for the regex pattern sets that you manage.</p>
    func listRegexPatternSets(input: ListRegexPatternSetsInput) async throws -> ListRegexPatternSetsOutputResponse
    {
        typealias listRegexPatternSetsContinuation = CheckedContinuation<ListRegexPatternSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRegexPatternSetsContinuation) in
            listRegexPatternSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves an array of the Amazon Resource Names (ARNs) for the regional resources that are associated with the specified web ACL. If you want the list of AWS CloudFront resources, use the AWS CloudFront call <code>ListDistributionsByWebACLId</code>. </p>
    func listResourcesForWebACL(input: ListResourcesForWebACLInput) async throws -> ListResourcesForWebACLOutputResponse
    {
        typealias listResourcesForWebACLContinuation = CheckedContinuation<ListResourcesForWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourcesForWebACLContinuation) in
            listResourcesForWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves an array of <a>RuleGroupSummary</a> objects for the rule groups that you manage. </p>
    func listRuleGroups(input: ListRuleGroupsInput) async throws -> ListRuleGroupsOutputResponse
    {
        typealias listRuleGroupsContinuation = CheckedContinuation<ListRuleGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRuleGroupsContinuation) in
            listRuleGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the <a>TagInfoForResource</a> for the specified resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.</p>
    ///         <p>You can tag the AWS resources that you manage through AWS WAF: web ACLs, rule groups, IP
    ///   sets, and regex pattern sets. You can't manage or view tags through the AWS WAF console. </p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves an array of <a>WebACLSummary</a> objects for the web ACLs that you manage.</p>
    func listWebACLs(input: ListWebACLsInput) async throws -> ListWebACLsOutputResponse
    {
        typealias listWebACLsContinuation = CheckedContinuation<ListWebACLsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWebACLsContinuation) in
            listWebACLs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the specified <a>LoggingConfiguration</a>, to start logging from a web ACL, according to the configuration provided.</p>
    ///          <p>You can access information about all traffic that AWS WAF inspects using the following
    ///          steps:</p>
    ///          <ol>
    ///             <li>
    ///                <p>Create an Amazon Kinesis Data
    ///             Firehose. </p>
    ///                <p>Create the data firehose with a PUT source and in the Region that you are operating. If you are capturing logs for Amazon CloudFront, always create the firehose in US East (N. Virginia). </p>
    ///                <p>Give the data firehose a name that starts with the prefix <code>aws-waf-logs-</code>. For example, <code>aws-waf-logs-us-east-2-analytics</code>.</p>
    ///                <note>
    ///                   <p>Do not create the data firehose using a <code>Kinesis stream</code> as your source.</p>
    ///                </note>
    ///             </li>
    ///             <li>
    ///                <p>Associate that firehose to your web ACL using a <code>PutLoggingConfiguration</code> request.</p>
    ///             </li>
    ///          </ol>
    ///
    ///          <p>When you successfully enable logging using a <code>PutLoggingConfiguration</code> request, AWS WAF will create a service linked role with the necessary permissions to write logs to the Amazon Kinesis Data Firehose.  For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/logging.html">Logging Web ACL Traffic Information</a> in the <i>AWS WAF Developer Guide</i>.</p>
    func putLoggingConfiguration(input: PutLoggingConfigurationInput) async throws -> PutLoggingConfigurationOutputResponse
    {
        typealias putLoggingConfigurationContinuation = CheckedContinuation<PutLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putLoggingConfigurationContinuation) in
            putLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches an IAM policy to the specified resource. Use this to share a rule group across accounts.</p>
    ///         <p>You must be the owner of the rule group to perform this operation.</p>
    ///          <p>This action is subject to the following restrictions:</p>
    ///          <ul>
    ///             <li>
    ///                <p>You can attach only one policy with each <code>PutPermissionPolicy</code> request.</p>
    ///             </li>
    ///             <li>
    ///                <p>The ARN in the request must be a valid WAF <a>RuleGroup</a> ARN and the rule group must exist in the same region.</p>
    ///             </li>
    ///             <li>
    ///                <p>The user making the request must be the owner of the rule group.</p>
    ///             </li>
    ///          </ul>
    func putPermissionPolicy(input: PutPermissionPolicyInput) async throws -> PutPermissionPolicyOutputResponse
    {
        typealias putPermissionPolicyContinuation = CheckedContinuation<PutPermissionPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putPermissionPolicyContinuation) in
            putPermissionPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates tags with the specified AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.</p>
    ///         <p>You can tag the AWS resources that you manage through AWS WAF: web ACLs, rule groups, IP
    ///   sets, and regex pattern sets. You can't manage or view tags through the AWS WAF console. </p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates tags from an AWS resource. Tags are key:value pairs that you can associate with AWS resources. For example, the tag key might be "customer" and the tag value might be "companyA." You can specify one or more tags to add to each container. You can add up to 50 tags to each AWS resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the specified <a>IPSet</a>. </p>
    ///          <note>
    ///             <p>This operation completely replaces any IP address specifications that you already have in the IP set with the ones that you provide to this call. If you want to add to or modify the addresses that are already in the IP set, retrieve those by calling <a>GetIPSet</a>, update them, and provide the complete updated array of IP addresses to this call.</p>
    ///          </note>
    func updateIPSet(input: UpdateIPSetInput) async throws -> UpdateIPSetOutputResponse
    {
        typealias updateIPSetContinuation = CheckedContinuation<UpdateIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIPSetContinuation) in
            updateIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the specified <a>RegexPatternSet</a>.</p>
    func updateRegexPatternSet(input: UpdateRegexPatternSetInput) async throws -> UpdateRegexPatternSetOutputResponse
    {
        typealias updateRegexPatternSetContinuation = CheckedContinuation<UpdateRegexPatternSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRegexPatternSetContinuation) in
            updateRegexPatternSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the specified <a>RuleGroup</a>.</p>
    ///          <p> A rule group defines a collection of rules to inspect and control web requests that you can use in a <a>WebACL</a>. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements. </p>
    func updateRuleGroup(input: UpdateRuleGroupInput) async throws -> UpdateRuleGroupOutputResponse
    {
        typealias updateRuleGroupContinuation = CheckedContinuation<UpdateRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRuleGroupContinuation) in
            updateRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the specified <a>WebACL</a>.</p>
    ///          <p> A Web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the Web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a Web ACL can be a combination of the types <a>Rule</a>, <a>RuleGroup</a>, and managed rule group. You can associate a Web ACL with one or more AWS resources to protect. The resources can be Amazon CloudFront, an Amazon API Gateway REST API, an Application Load Balancer, or an AWS AppSync GraphQL API.  </p>
    func updateWebACL(input: UpdateWebACLInput) async throws -> UpdateWebACLOutputResponse
    {
        typealias updateWebACLContinuation = CheckedContinuation<UpdateWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWebACLContinuation) in
            updateWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
