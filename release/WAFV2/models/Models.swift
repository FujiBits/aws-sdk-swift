// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension Wafv2ClientTypes.ActionCondition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ActionValue.self, forKey: .action)
        action = actionDecoded
    }
}

extension Wafv2ClientTypes.ActionCondition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActionCondition(action: \(Swift.String(describing: action)))"}
}

extension Wafv2ClientTypes {
    /// <p>A single action condition for a <a>Condition</a> in a logging filter.</p>
    public struct ActionCondition: Swift.Equatable {
        /// <p>The action setting that a log record must contain in order to meet the condition. </p>
        public let action: Wafv2ClientTypes.ActionValue?

        public init (
            action: Wafv2ClientTypes.ActionValue? = nil
        )
        {
            self.action = action
        }
    }

}

extension Wafv2ClientTypes {
    public enum ActionValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case block
        case count
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionValue] {
            return [
                .allow,
                .block,
                .count,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .block: return "BLOCK"
            case .count: return "COUNT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionValue(rawValue: rawValue) ?? ActionValue.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.All: Swift.Codable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Wafv2ClientTypes.All: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "All()"}
}

extension Wafv2ClientTypes {
    /// <p>Inspect all of the elements that AWS WAF has parsed and extracted from the web request JSON body that are within the <a>JsonBody</a>
    ///             <code>MatchScope</code>. This is used with the <a>FieldToMatch</a> option <code>JsonBody</code>.  </p>
    ///          <p>This is used only to indicate the web request component for AWS WAF to inspect, in the <a>FieldToMatch</a> specification. </p>
    public struct All: Swift.Equatable {

        public init() {}
    }

}

extension Wafv2ClientTypes.AllQueryArguments: Swift.Codable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Wafv2ClientTypes.AllQueryArguments: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllQueryArguments()"}
}

extension Wafv2ClientTypes {
    /// <p>All query arguments of a web request. </p>
    ///            <p>This is used only to indicate the web request component for AWS WAF to inspect, in the <a>FieldToMatch</a> specification. </p>
    public struct AllQueryArguments: Swift.Equatable {

        public init() {}
    }

}

extension Wafv2ClientTypes.AllowAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRequestHandling = "CustomRequestHandling"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRequestHandling = customRequestHandling {
            try encodeContainer.encode(customRequestHandling, forKey: .customRequestHandling)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRequestHandlingDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.CustomRequestHandling.self, forKey: .customRequestHandling)
        customRequestHandling = customRequestHandlingDecoded
    }
}

extension Wafv2ClientTypes.AllowAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllowAction(customRequestHandling: \(Swift.String(describing: customRequestHandling)))"}
}

extension Wafv2ClientTypes {
    /// <p>Specifies that AWS WAF should allow the request and optionally defines additional custom handling for the request.</p>
    ///            <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p>
    public struct AllowAction: Swift.Equatable {
        /// <p>Defines custom handling for the web request.</p>
        ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
        ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
        public let customRequestHandling: Wafv2ClientTypes.CustomRequestHandling?

        public init (
            customRequestHandling: Wafv2ClientTypes.CustomRequestHandling? = nil
        )
        {
            self.customRequestHandling = customRequestHandling
        }
    }

}

extension Wafv2ClientTypes.AndStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statements = "Statements"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statements = statements {
            var statementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statements)
            for statements0 in statements {
                try statementsContainer.encode(statements0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Statement?].self, forKey: .statements)
        var statementsDecoded0:[Wafv2ClientTypes.Statement]? = nil
        if let statementsContainer = statementsContainer {
            statementsDecoded0 = [Wafv2ClientTypes.Statement]()
            for structure0 in statementsContainer {
                if let structure0 = structure0 {
                    statementsDecoded0?.append(structure0)
                }
            }
        }
        statements = statementsDecoded0
    }
}

extension Wafv2ClientTypes.AndStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AndStatement(statements: \(Swift.String(describing: statements)))"}
}

extension Wafv2ClientTypes {
    /// <p>A logical rule statement used to combine other rule statements with AND logic. You provide more than one <a>Statement</a> within the <code>AndStatement</code>. </p>
    public struct AndStatement: Swift.Equatable {
        /// <p>The statements to combine with AND logic. You can use any statements that can be nested. </p>
        public let statements: [Wafv2ClientTypes.Statement]?

        public init (
            statements: [Wafv2ClientTypes.Statement]? = nil
        )
        {
            self.statements = statements
        }
    }

}

public struct AssociateWebACLInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateWebACLInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateWebACLOutputError>
}

extension AssociateWebACLInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateWebACLInput(resourceArn: \(Swift.String(describing: resourceArn)), webACLArn: \(Swift.String(describing: webACLArn)))"}
}

extension AssociateWebACLInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case webACLArn = "WebACLArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let webACLArn = webACLArn {
            try encodeContainer.encode(webACLArn, forKey: .webACLArn)
        }
    }
}

public struct AssociateWebACLInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateWebACLInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateWebACLOutputError>
}

public struct AssociateWebACLInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateWebACLInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateWebACLOutputError>
}

public struct AssociateWebACLInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource to associate with the web ACL. </p>
    ///
    ///          <p>The ARN must be in one of the following formats:</p>
    ///          <ul>
    ///             <li>
    ///                <p>For an Application Load Balancer: <code>arn:aws:elasticloadbalancing:<i>region</i>:<i>account-id</i>:loadbalancer/app/<i>load-balancer-name</i>/<i>load-balancer-id</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>For an API Gateway REST API: <code>arn:aws:apigateway:<i>region</i>::/restapis/<i>api-id</i>/stages/<i>stage-name</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>For an AppSync GraphQL API: <code>arn:aws:appsync:<i>region</i>:<i>account-id</i>:apis/<i>GraphQLApiId</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let resourceArn: Swift.String?
    /// <p>The Amazon Resource Name (ARN) of the Web ACL that you want to associate with the resource.</p>
    public let webACLArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil,
        webACLArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
        self.webACLArn = webACLArn
    }
}

struct AssociateWebACLInputBody: Swift.Equatable {
    public let webACLArn: Swift.String?
    public let resourceArn: Swift.String?
}

extension AssociateWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case webACLArn = "WebACLArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLArn)
        webACLArn = webACLArnDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension AssociateWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateWebACLOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateWebACLOutputResponse()"}
}

extension AssociateWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AssociateWebACLOutputResponse: Swift.Equatable {

    public init() {}
}

struct AssociateWebACLOutputResponseBody: Swift.Equatable {
}

extension AssociateWebACLOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Wafv2ClientTypes.BlockAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponse = "CustomResponse"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customResponse = customResponse {
            try encodeContainer.encode(customResponse, forKey: .customResponse)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customResponseDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.CustomResponse.self, forKey: .customResponse)
        customResponse = customResponseDecoded
    }
}

extension Wafv2ClientTypes.BlockAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BlockAction(customResponse: \(Swift.String(describing: customResponse)))"}
}

extension Wafv2ClientTypes {
    /// <p>Specifies that AWS WAF should block the request and optionally defines additional custom handling for the response to the web request.</p>
    ///            <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p>
    public struct BlockAction: Swift.Equatable {
        /// <p>Defines a custom response for the web request.</p>
        ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
        ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
        public let customResponse: Wafv2ClientTypes.CustomResponse?

        public init (
            customResponse: Wafv2ClientTypes.CustomResponse? = nil
        )
        {
            self.customResponse = customResponse
        }
    }

}

extension Wafv2ClientTypes.Body: Swift.Codable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Wafv2ClientTypes.Body: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Body()"}
}

extension Wafv2ClientTypes {
    /// <p>The body of a web request. This immediately follows the request headers.</p>
    ///            <p>This is used only to indicate the web request component for AWS WAF to inspect, in the <a>FieldToMatch</a> specification. </p>
    public struct Body: Swift.Equatable {

        public init() {}
    }

}

extension Wafv2ClientTypes {
    public enum BodyParsingFallbackBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case evaluateAsString
        case match
        case noMatch
        case sdkUnknown(Swift.String)

        public static var allCases: [BodyParsingFallbackBehavior] {
            return [
                .evaluateAsString,
                .match,
                .noMatch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .evaluateAsString: return "EVALUATE_AS_STRING"
            case .match: return "MATCH"
            case .noMatch: return "NO_MATCH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BodyParsingFallbackBehavior(rawValue: rawValue) ?? BodyParsingFallbackBehavior.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.ByteMatchStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case positionalConstraint = "PositionalConstraint"
        case searchString = "SearchString"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let positionalConstraint = positionalConstraint {
            try encodeContainer.encode(positionalConstraint.rawValue, forKey: .positionalConstraint)
        }
        if let searchString = searchString {
            try encodeContainer.encode(searchString.base64EncodedString(), forKey: .searchString)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformations0 in textTransformations {
                try textTransformationsContainer.encode(texttransformations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let searchStringDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .searchString)
        searchString = searchStringDecoded
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[Wafv2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [Wafv2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
        let positionalConstraintDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.PositionalConstraint.self, forKey: .positionalConstraint)
        positionalConstraint = positionalConstraintDecoded
    }
}

extension Wafv2ClientTypes.ByteMatchStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ByteMatchStatement(fieldToMatch: \(Swift.String(describing: fieldToMatch)), positionalConstraint: \(Swift.String(describing: positionalConstraint)), searchString: \(Swift.String(describing: searchString)), textTransformations: \(Swift.String(describing: textTransformations)))"}
}

extension Wafv2ClientTypes {
    /// <p>A rule statement that defines a string match search for AWS WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want AWS WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the AWS WAF console and the developer guide, this is refered to as a string match statement.</p>
    public struct ByteMatchStatement: Swift.Equatable {
        /// <p>The part of a web request that you want AWS WAF to inspect. For more information, see <a>FieldToMatch</a>. </p>
        public let fieldToMatch: Wafv2ClientTypes.FieldToMatch?
        /// <p>The area within the portion of a web request that you want AWS WAF to search for <code>SearchString</code>. Valid values include the following:</p>
        ///          <p>
        ///             <b>CONTAINS</b>
        ///          </p>
        ///          <p>The specified part of the web request must include the value of <code>SearchString</code>, but the location doesn't matter.</p>		
        ///          <p>
        ///             <b>CONTAINS_WORD</b>
        ///          </p>
        ///          <p>The specified part of the web request must include the value of <code>SearchString</code>, and
        ///          <code>SearchString</code> must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition,
        ///          <code>SearchString</code> must be a word, which means that both of the following are true:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>SearchString</code> is at the beginning of the specified part of the web request or is
        ///                   preceded by a character other than an alphanumeric character or underscore (_).
        ///                   Examples include the value of a header and <code>;BadBot</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SearchString</code> is at the end of the specified part of the web request or is
        ///                   followed by a character other than an alphanumeric character or underscore (_), for example,
        ///                   <code>BadBot;</code> and <code>-BadBot;</code>.</p>
        ///             </li>
        ///          </ul>
        ///          <p>
        ///             <b>EXACTLY</b>
        ///          </p>
        ///          <p>The value of the specified part of the web request must exactly match the value of <code>SearchString</code>.</p>
        ///          <p>
        ///             <b>STARTS_WITH</b>
        ///          </p>
        ///          <p>The value of <code>SearchString</code> must appear at the beginning of the specified part of the web request.</p>		
        ///          <p>
        ///             <b>ENDS_WITH</b>
        ///          </p>
        ///          <p>The value of <code>SearchString</code> must appear at the end of the specified part of the web request.</p>
        public let positionalConstraint: Wafv2ClientTypes.PositionalConstraint?
        /// <p>A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in <a>FieldToMatch</a>. The maximum length of the value is 50 bytes.</p>
        ///          <p>Valid values depend on the component that you specify for inspection in <code>FieldToMatch</code>:</p>		
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>Method</code>: The HTTP method that you want AWS WAF to search for. This indicates the type of operation specified in the request. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UriPath</code>: The value that you want AWS WAF to search for in the URI path,
        ///                for example, <code>/images/daily-ad.jpg</code>. </p>
        ///             </li>
        ///          </ul>
        ///
        ///          <p>If <code>SearchString</code> includes alphabetic characters A-Z and a-z, note that the value is case sensitive.</p>
        ///          <p>
        ///             <b>If you're using the AWS WAF API</b>
        ///          </p>
        ///          <p>Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.</p>
        ///          <p>For example, suppose the value of <code>Type</code> is <code>HEADER</code> and the
        ///          value of <code>Data</code> is <code>User-Agent</code>. If you want to search the
        ///          <code>User-Agent</code> header for the value <code>BadBot</code>, you base64-encode
        ///          <code>BadBot</code> using MIME
        ///          base64-encoding
        ///          and include the resulting value, <code>QmFkQm90</code>, in the value of
        ///          <code>SearchString</code>.</p>
        ///          <p>
        ///             <b>If you're using the AWS CLI or one of the AWS SDKs</b>
        ///          </p>
        ///          <p>The value that you want AWS WAF to search for. The SDK automatically base64 encodes the value.</p>
        public let searchString: ClientRuntime.Data?
        /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
        ///          If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the
        ///          content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
        public let textTransformations: [Wafv2ClientTypes.TextTransformation]?

        public init (
            fieldToMatch: Wafv2ClientTypes.FieldToMatch? = nil,
            positionalConstraint: Wafv2ClientTypes.PositionalConstraint? = nil,
            searchString: ClientRuntime.Data? = nil,
            textTransformations: [Wafv2ClientTypes.TextTransformation]? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.positionalConstraint = positionalConstraint
            self.searchString = searchString
            self.textTransformations = textTransformations
        }
    }

}

public struct CheckCapacityInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CheckCapacityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CheckCapacityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CheckCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CheckCapacityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CheckCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CheckCapacityOutputError>
}

extension CheckCapacityInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CheckCapacityInput(rules: \(Swift.String(describing: rules)), scope: \(Swift.String(describing: scope)))"}
}

extension CheckCapacityInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rules"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rules0 in rules {
                try rulesContainer.encode(rules0)
            }
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct CheckCapacityInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CheckCapacityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CheckCapacityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CheckCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CheckCapacityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CheckCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CheckCapacityOutputError>
}

public struct CheckCapacityInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CheckCapacityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CheckCapacityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CheckCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CheckCapacityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CheckCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CheckCapacityOutputError>
}

public struct CheckCapacityInput: Swift.Equatable {
    /// <p>An array of <a>Rule</a> that you're configuring to use in a rule group or web ACL. </p>
    public let rules: [Wafv2ClientTypes.Rule]?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        rules: [Wafv2ClientTypes.Rule]? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.rules = rules
        self.scope = scope
    }
}

struct CheckCapacityInputBody: Swift.Equatable {
    public let scope: Wafv2ClientTypes.Scope?
    public let rules: [Wafv2ClientTypes.Rule]?
}

extension CheckCapacityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rules"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[Wafv2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Wafv2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
    }
}

extension CheckCapacityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CheckCapacityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidResourceException" : self = .wAFInvalidResourceException(try WAFInvalidResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFSubscriptionNotFoundException" : self = .wAFSubscriptionNotFoundException(try WAFSubscriptionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CheckCapacityOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFInvalidResourceException(WAFInvalidResourceException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFSubscriptionNotFoundException(WAFSubscriptionNotFoundException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CheckCapacityOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CheckCapacityOutputResponse(capacity: \(Swift.String(describing: capacity)))"}
}

extension CheckCapacityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CheckCapacityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capacity = output.capacity
        } else {
            self.capacity = 0
        }
    }
}

public struct CheckCapacityOutputResponse: Swift.Equatable {
    /// <p>The capacity required by the rules and scope.</p>
    public let capacity: Swift.Int

    public init (
        capacity: Swift.Int = 0
    )
    {
        self.capacity = capacity
    }
}

struct CheckCapacityOutputResponseBody: Swift.Equatable {
    public let capacity: Swift.Int
}

extension CheckCapacityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityDecoded = try containerValues.decode(Swift.Int.self, forKey: .capacity)
        capacity = capacityDecoded
    }
}

extension Wafv2ClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case eq
        case ge
        case gt
        case le
        case lt
        case ne
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .eq,
                .ge,
                .gt,
                .le,
                .lt,
                .ne,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .eq: return "EQ"
            case .ge: return "GE"
            case .gt: return "GT"
            case .le: return "LE"
            case .lt: return "LT"
            case .ne: return "NE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.Condition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionCondition = "ActionCondition"
        case labelNameCondition = "LabelNameCondition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionCondition = actionCondition {
            try encodeContainer.encode(actionCondition, forKey: .actionCondition)
        }
        if let labelNameCondition = labelNameCondition {
            try encodeContainer.encode(labelNameCondition, forKey: .labelNameCondition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionConditionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ActionCondition.self, forKey: .actionCondition)
        actionCondition = actionConditionDecoded
        let labelNameConditionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.LabelNameCondition.self, forKey: .labelNameCondition)
        labelNameCondition = labelNameConditionDecoded
    }
}

extension Wafv2ClientTypes.Condition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Condition(actionCondition: \(Swift.String(describing: actionCondition)), labelNameCondition: \(Swift.String(describing: labelNameCondition)))"}
}

extension Wafv2ClientTypes {
    /// <p>A single match condition for a <a>Filter</a>.</p>
    public struct Condition: Swift.Equatable {
        /// <p>A single action condition.</p>
        public let actionCondition: Wafv2ClientTypes.ActionCondition?
        /// <p>A single label name condition.</p>
        public let labelNameCondition: Wafv2ClientTypes.LabelNameCondition?

        public init (
            actionCondition: Wafv2ClientTypes.ActionCondition? = nil,
            labelNameCondition: Wafv2ClientTypes.LabelNameCondition? = nil
        )
        {
            self.actionCondition = actionCondition
            self.labelNameCondition = labelNameCondition
        }
    }

}

extension Wafv2ClientTypes.CountAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRequestHandling = "CustomRequestHandling"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRequestHandling = customRequestHandling {
            try encodeContainer.encode(customRequestHandling, forKey: .customRequestHandling)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRequestHandlingDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.CustomRequestHandling.self, forKey: .customRequestHandling)
        customRequestHandling = customRequestHandlingDecoded
    }
}

extension Wafv2ClientTypes.CountAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CountAction(customRequestHandling: \(Swift.String(describing: customRequestHandling)))"}
}

extension Wafv2ClientTypes {
    /// <p>Specifies that AWS WAF should count the request. Optionally defines additional custom handling for the request.</p>
    ///            <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p>
    public struct CountAction: Swift.Equatable {
        /// <p>Defines custom handling for the web request.</p>
        ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
        ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
        public let customRequestHandling: Wafv2ClientTypes.CustomRequestHandling?

        public init (
            customRequestHandling: Wafv2ClientTypes.CustomRequestHandling? = nil
        )
        {
            self.customRequestHandling = customRequestHandling
        }
    }

}

extension Wafv2ClientTypes {
    public enum CountryCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ad
        case ae
        case af
        case ag
        case ai
        case al
        case am
        case ao
        case aq
        case ar
        case `as`
        case at
        case au
        case aw
        case ax
        case az
        case ba
        case bb
        case bd
        case be
        case bf
        case bg
        case bh
        case bi
        case bj
        case bl
        case bm
        case bn
        case bo
        case bq
        case br
        case bs
        case bt
        case bv
        case bw
        case by
        case bz
        case ca
        case cc
        case cd
        case cf
        case cg
        case ch
        case ci
        case ck
        case cl
        case cm
        case cn
        case co
        case cr
        case cu
        case cv
        case cw
        case cx
        case cy
        case cz
        case de
        case dj
        case dk
        case dm
        case `do`
        case dz
        case ec
        case ee
        case eg
        case eh
        case er
        case es
        case et
        case fi
        case fj
        case fk
        case fm
        case fo
        case fr
        case ga
        case gb
        case gd
        case ge
        case gf
        case gg
        case gh
        case gi
        case gl
        case gm
        case gn
        case gp
        case gq
        case gr
        case gs
        case gt
        case gu
        case gw
        case gy
        case hk
        case hm
        case hn
        case hr
        case ht
        case hu
        case id
        case ie
        case il
        case im
        case `in`
        case io
        case iq
        case ir
        case `is`
        case it
        case je
        case jm
        case jo
        case jp
        case ke
        case kg
        case kh
        case ki
        case km
        case kn
        case kp
        case kr
        case kw
        case ky
        case kz
        case la
        case lb
        case lc
        case li
        case lk
        case lr
        case ls
        case lt
        case lu
        case lv
        case ly
        case ma
        case mc
        case md
        case me
        case mf
        case mg
        case mh
        case mk
        case ml
        case mm
        case mn
        case mo
        case mp
        case mq
        case mr
        case ms
        case mt
        case mu
        case mv
        case mw
        case mx
        case my
        case mz
        case na
        case nc
        case ne
        case nf
        case ng
        case ni
        case nl
        case no
        case np
        case nr
        case nu
        case nz
        case om
        case pa
        case pe
        case pf
        case pg
        case ph
        case pk
        case pl
        case pm
        case pn
        case pr
        case ps
        case pt
        case pw
        case py
        case qa
        case re
        case ro
        case rs
        case ru
        case rw
        case sa
        case sb
        case sc
        case sd
        case se
        case sg
        case sh
        case si
        case sj
        case sk
        case sl
        case sm
        case sn
        case so
        case sr
        case ss
        case st
        case sv
        case sx
        case sy
        case sz
        case tc
        case td
        case tf
        case tg
        case th
        case tj
        case tk
        case tl
        case tm
        case tn
        case to
        case tr
        case tt
        case tv
        case tw
        case tz
        case ua
        case ug
        case um
        case us
        case uy
        case uz
        case va
        case vc
        case ve
        case vg
        case vi
        case vn
        case vu
        case wf
        case ws
        case ye
        case yt
        case za
        case zm
        case zw
        case sdkUnknown(Swift.String)

        public static var allCases: [CountryCode] {
            return [
                .ad,
                .ae,
                .af,
                .ag,
                .ai,
                .al,
                .am,
                .ao,
                .aq,
                .ar,
                .as,
                .at,
                .au,
                .aw,
                .ax,
                .az,
                .ba,
                .bb,
                .bd,
                .be,
                .bf,
                .bg,
                .bh,
                .bi,
                .bj,
                .bl,
                .bm,
                .bn,
                .bo,
                .bq,
                .br,
                .bs,
                .bt,
                .bv,
                .bw,
                .by,
                .bz,
                .ca,
                .cc,
                .cd,
                .cf,
                .cg,
                .ch,
                .ci,
                .ck,
                .cl,
                .cm,
                .cn,
                .co,
                .cr,
                .cu,
                .cv,
                .cw,
                .cx,
                .cy,
                .cz,
                .de,
                .dj,
                .dk,
                .dm,
                .do,
                .dz,
                .ec,
                .ee,
                .eg,
                .eh,
                .er,
                .es,
                .et,
                .fi,
                .fj,
                .fk,
                .fm,
                .fo,
                .fr,
                .ga,
                .gb,
                .gd,
                .ge,
                .gf,
                .gg,
                .gh,
                .gi,
                .gl,
                .gm,
                .gn,
                .gp,
                .gq,
                .gr,
                .gs,
                .gt,
                .gu,
                .gw,
                .gy,
                .hk,
                .hm,
                .hn,
                .hr,
                .ht,
                .hu,
                .id,
                .ie,
                .il,
                .im,
                .in,
                .io,
                .iq,
                .ir,
                .is,
                .it,
                .je,
                .jm,
                .jo,
                .jp,
                .ke,
                .kg,
                .kh,
                .ki,
                .km,
                .kn,
                .kp,
                .kr,
                .kw,
                .ky,
                .kz,
                .la,
                .lb,
                .lc,
                .li,
                .lk,
                .lr,
                .ls,
                .lt,
                .lu,
                .lv,
                .ly,
                .ma,
                .mc,
                .md,
                .me,
                .mf,
                .mg,
                .mh,
                .mk,
                .ml,
                .mm,
                .mn,
                .mo,
                .mp,
                .mq,
                .mr,
                .ms,
                .mt,
                .mu,
                .mv,
                .mw,
                .mx,
                .my,
                .mz,
                .na,
                .nc,
                .ne,
                .nf,
                .ng,
                .ni,
                .nl,
                .no,
                .np,
                .nr,
                .nu,
                .nz,
                .om,
                .pa,
                .pe,
                .pf,
                .pg,
                .ph,
                .pk,
                .pl,
                .pm,
                .pn,
                .pr,
                .ps,
                .pt,
                .pw,
                .py,
                .qa,
                .re,
                .ro,
                .rs,
                .ru,
                .rw,
                .sa,
                .sb,
                .sc,
                .sd,
                .se,
                .sg,
                .sh,
                .si,
                .sj,
                .sk,
                .sl,
                .sm,
                .sn,
                .so,
                .sr,
                .ss,
                .st,
                .sv,
                .sx,
                .sy,
                .sz,
                .tc,
                .td,
                .tf,
                .tg,
                .th,
                .tj,
                .tk,
                .tl,
                .tm,
                .tn,
                .to,
                .tr,
                .tt,
                .tv,
                .tw,
                .tz,
                .ua,
                .ug,
                .um,
                .us,
                .uy,
                .uz,
                .va,
                .vc,
                .ve,
                .vg,
                .vi,
                .vn,
                .vu,
                .wf,
                .ws,
                .ye,
                .yt,
                .za,
                .zm,
                .zw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ad: return "AD"
            case .ae: return "AE"
            case .af: return "AF"
            case .ag: return "AG"
            case .ai: return "AI"
            case .al: return "AL"
            case .am: return "AM"
            case .ao: return "AO"
            case .aq: return "AQ"
            case .ar: return "AR"
            case .as: return "AS"
            case .at: return "AT"
            case .au: return "AU"
            case .aw: return "AW"
            case .ax: return "AX"
            case .az: return "AZ"
            case .ba: return "BA"
            case .bb: return "BB"
            case .bd: return "BD"
            case .be: return "BE"
            case .bf: return "BF"
            case .bg: return "BG"
            case .bh: return "BH"
            case .bi: return "BI"
            case .bj: return "BJ"
            case .bl: return "BL"
            case .bm: return "BM"
            case .bn: return "BN"
            case .bo: return "BO"
            case .bq: return "BQ"
            case .br: return "BR"
            case .bs: return "BS"
            case .bt: return "BT"
            case .bv: return "BV"
            case .bw: return "BW"
            case .by: return "BY"
            case .bz: return "BZ"
            case .ca: return "CA"
            case .cc: return "CC"
            case .cd: return "CD"
            case .cf: return "CF"
            case .cg: return "CG"
            case .ch: return "CH"
            case .ci: return "CI"
            case .ck: return "CK"
            case .cl: return "CL"
            case .cm: return "CM"
            case .cn: return "CN"
            case .co: return "CO"
            case .cr: return "CR"
            case .cu: return "CU"
            case .cv: return "CV"
            case .cw: return "CW"
            case .cx: return "CX"
            case .cy: return "CY"
            case .cz: return "CZ"
            case .de: return "DE"
            case .dj: return "DJ"
            case .dk: return "DK"
            case .dm: return "DM"
            case .do: return "DO"
            case .dz: return "DZ"
            case .ec: return "EC"
            case .ee: return "EE"
            case .eg: return "EG"
            case .eh: return "EH"
            case .er: return "ER"
            case .es: return "ES"
            case .et: return "ET"
            case .fi: return "FI"
            case .fj: return "FJ"
            case .fk: return "FK"
            case .fm: return "FM"
            case .fo: return "FO"
            case .fr: return "FR"
            case .ga: return "GA"
            case .gb: return "GB"
            case .gd: return "GD"
            case .ge: return "GE"
            case .gf: return "GF"
            case .gg: return "GG"
            case .gh: return "GH"
            case .gi: return "GI"
            case .gl: return "GL"
            case .gm: return "GM"
            case .gn: return "GN"
            case .gp: return "GP"
            case .gq: return "GQ"
            case .gr: return "GR"
            case .gs: return "GS"
            case .gt: return "GT"
            case .gu: return "GU"
            case .gw: return "GW"
            case .gy: return "GY"
            case .hk: return "HK"
            case .hm: return "HM"
            case .hn: return "HN"
            case .hr: return "HR"
            case .ht: return "HT"
            case .hu: return "HU"
            case .id: return "ID"
            case .ie: return "IE"
            case .il: return "IL"
            case .im: return "IM"
            case .in: return "IN"
            case .io: return "IO"
            case .iq: return "IQ"
            case .ir: return "IR"
            case .is: return "IS"
            case .it: return "IT"
            case .je: return "JE"
            case .jm: return "JM"
            case .jo: return "JO"
            case .jp: return "JP"
            case .ke: return "KE"
            case .kg: return "KG"
            case .kh: return "KH"
            case .ki: return "KI"
            case .km: return "KM"
            case .kn: return "KN"
            case .kp: return "KP"
            case .kr: return "KR"
            case .kw: return "KW"
            case .ky: return "KY"
            case .kz: return "KZ"
            case .la: return "LA"
            case .lb: return "LB"
            case .lc: return "LC"
            case .li: return "LI"
            case .lk: return "LK"
            case .lr: return "LR"
            case .ls: return "LS"
            case .lt: return "LT"
            case .lu: return "LU"
            case .lv: return "LV"
            case .ly: return "LY"
            case .ma: return "MA"
            case .mc: return "MC"
            case .md: return "MD"
            case .me: return "ME"
            case .mf: return "MF"
            case .mg: return "MG"
            case .mh: return "MH"
            case .mk: return "MK"
            case .ml: return "ML"
            case .mm: return "MM"
            case .mn: return "MN"
            case .mo: return "MO"
            case .mp: return "MP"
            case .mq: return "MQ"
            case .mr: return "MR"
            case .ms: return "MS"
            case .mt: return "MT"
            case .mu: return "MU"
            case .mv: return "MV"
            case .mw: return "MW"
            case .mx: return "MX"
            case .my: return "MY"
            case .mz: return "MZ"
            case .na: return "NA"
            case .nc: return "NC"
            case .ne: return "NE"
            case .nf: return "NF"
            case .ng: return "NG"
            case .ni: return "NI"
            case .nl: return "NL"
            case .no: return "NO"
            case .np: return "NP"
            case .nr: return "NR"
            case .nu: return "NU"
            case .nz: return "NZ"
            case .om: return "OM"
            case .pa: return "PA"
            case .pe: return "PE"
            case .pf: return "PF"
            case .pg: return "PG"
            case .ph: return "PH"
            case .pk: return "PK"
            case .pl: return "PL"
            case .pm: return "PM"
            case .pn: return "PN"
            case .pr: return "PR"
            case .ps: return "PS"
            case .pt: return "PT"
            case .pw: return "PW"
            case .py: return "PY"
            case .qa: return "QA"
            case .re: return "RE"
            case .ro: return "RO"
            case .rs: return "RS"
            case .ru: return "RU"
            case .rw: return "RW"
            case .sa: return "SA"
            case .sb: return "SB"
            case .sc: return "SC"
            case .sd: return "SD"
            case .se: return "SE"
            case .sg: return "SG"
            case .sh: return "SH"
            case .si: return "SI"
            case .sj: return "SJ"
            case .sk: return "SK"
            case .sl: return "SL"
            case .sm: return "SM"
            case .sn: return "SN"
            case .so: return "SO"
            case .sr: return "SR"
            case .ss: return "SS"
            case .st: return "ST"
            case .sv: return "SV"
            case .sx: return "SX"
            case .sy: return "SY"
            case .sz: return "SZ"
            case .tc: return "TC"
            case .td: return "TD"
            case .tf: return "TF"
            case .tg: return "TG"
            case .th: return "TH"
            case .tj: return "TJ"
            case .tk: return "TK"
            case .tl: return "TL"
            case .tm: return "TM"
            case .tn: return "TN"
            case .to: return "TO"
            case .tr: return "TR"
            case .tt: return "TT"
            case .tv: return "TV"
            case .tw: return "TW"
            case .tz: return "TZ"
            case .ua: return "UA"
            case .ug: return "UG"
            case .um: return "UM"
            case .us: return "US"
            case .uy: return "UY"
            case .uz: return "UZ"
            case .va: return "VA"
            case .vc: return "VC"
            case .ve: return "VE"
            case .vg: return "VG"
            case .vi: return "VI"
            case .vn: return "VN"
            case .vu: return "VU"
            case .wf: return "WF"
            case .ws: return "WS"
            case .ye: return "YE"
            case .yt: return "YT"
            case .za: return "ZA"
            case .zm: return "ZM"
            case .zw: return "ZW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CountryCode(rawValue: rawValue) ?? CountryCode.sdkUnknown(rawValue)
        }
    }
}

public struct CreateIPSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateIPSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateIPSetOutputError>
}

extension CreateIPSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateIPSetInput(addresses: \(Swift.String(describing: addresses)), description: \(Swift.String(describing: description)), iPAddressVersion: \(Swift.String(describing: iPAddressVersion)), name: \(Swift.String(describing: name)), scope: \(Swift.String(describing: scope)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateIPSetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case description = "Description"
        case iPAddressVersion = "IPAddressVersion"
        case name = "Name"
        case scope = "Scope"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addresses)
            for ipaddresses0 in addresses {
                try addressesContainer.encode(ipaddresses0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let iPAddressVersion = iPAddressVersion {
            try encodeContainer.encode(iPAddressVersion.rawValue, forKey: .iPAddressVersion)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateIPSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateIPSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateIPSetOutputError>
}

public struct CreateIPSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateIPSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateIPSetOutputError>
}

public struct CreateIPSetInput: Swift.Equatable {
    /// <p>Contains an array of strings that specify one or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. AWS WAF supports all IPv4 and IPv6 CIDR ranges except for /0. </p>
    ///          <p>Examples: </p>
    ///          <ul>
    ///             <li>
    ///                <p>To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify <code>192.0.2.44/32</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify
    ///                <code>192.0.2.0/24</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify <code>1111:0000:0000:0000:0000:0000:0000:0111/128</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify <code>1111:0000:0000:0000:0000:0000:0000:0000/64</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless
    ///          Inter-Domain Routing</a>.</p>
    public let addresses: [Swift.String]?
    /// <p>A description of the IP set that helps with identification. </p>
    public let description: Swift.String?
    /// <p>Specify IPV4 or IPV6. </p>
    public let iPAddressVersion: Wafv2ClientTypes.IPAddressVersion?
    /// <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
    public let name: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?
    /// <p>An array of key:value pairs to associate with the resource.</p>
    public let tags: [Wafv2ClientTypes.Tag]?

    public init (
        addresses: [Swift.String]? = nil,
        description: Swift.String? = nil,
        iPAddressVersion: Wafv2ClientTypes.IPAddressVersion? = nil,
        name: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil,
        tags: [Wafv2ClientTypes.Tag]? = nil
    )
    {
        self.addresses = addresses
        self.description = description
        self.iPAddressVersion = iPAddressVersion
        self.name = name
        self.scope = scope
        self.tags = tags
    }
}

struct CreateIPSetInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let description: Swift.String?
    public let iPAddressVersion: Wafv2ClientTypes.IPAddressVersion?
    public let addresses: [Swift.String]?
    public let tags: [Wafv2ClientTypes.Tag]?
}

extension CreateIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case description = "Description"
        case iPAddressVersion = "IPAddressVersion"
        case name = "Name"
        case scope = "Scope"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let iPAddressVersionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.IPAddressVersion.self, forKey: .iPAddressVersion)
        iPAddressVersion = iPAddressVersionDecoded
        let addressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addresses)
        var addressesDecoded0:[Swift.String]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [Swift.String]()
            for string0 in addressesContainer {
                if let string0 = string0 {
                    addressesDecoded0?.append(string0)
                }
            }
        }
        addresses = addressesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[Wafv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Wafv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateIPSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateIPSetOutputResponse(summary: \(Swift.String(describing: summary)))"}
}

extension CreateIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateIPSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.summary = output.summary
        } else {
            self.summary = nil
        }
    }
}

public struct CreateIPSetOutputResponse: Swift.Equatable {
    /// <p>High-level information about an <a>IPSet</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage an <code>IPSet</code>, and the ARN, that you provide to the <a>IPSetReferenceStatement</a> to use the address set in a <a>Rule</a>.</p>
    public let summary: Wafv2ClientTypes.IPSetSummary?

    public init (
        summary: Wafv2ClientTypes.IPSetSummary? = nil
    )
    {
        self.summary = summary
    }
}

struct CreateIPSetOutputResponseBody: Swift.Equatable {
    public let summary: Wafv2ClientTypes.IPSetSummary?
}

extension CreateIPSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case summary = "Summary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.IPSetSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}

public struct CreateRegexPatternSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRegexPatternSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRegexPatternSetOutputError>
}

extension CreateRegexPatternSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRegexPatternSetInput(description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), regularExpressionList: \(Swift.String(describing: regularExpressionList)), scope: \(Swift.String(describing: scope)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateRegexPatternSetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
        case scope = "Scope"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regularExpressionList = regularExpressionList {
            var regularExpressionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regularExpressionList)
            for regularexpressionlist0 in regularExpressionList {
                try regularExpressionListContainer.encode(regularexpressionlist0)
            }
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateRegexPatternSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRegexPatternSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRegexPatternSetOutputError>
}

public struct CreateRegexPatternSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRegexPatternSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRegexPatternSetOutputError>
}

public struct CreateRegexPatternSetInput: Swift.Equatable {
    /// <p>A description of the set that helps with identification. </p>
    public let description: Swift.String?
    /// <p>The name of the set. You cannot change the name after you create the set.</p>
    public let name: Swift.String?
    /// <p>Array of regular expression strings. </p>
    public let regularExpressionList: [Wafv2ClientTypes.Regex]?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?
    /// <p>An array of key:value pairs to associate with the resource.</p>
    public let tags: [Wafv2ClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        regularExpressionList: [Wafv2ClientTypes.Regex]? = nil,
        scope: Wafv2ClientTypes.Scope? = nil,
        tags: [Wafv2ClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.name = name
        self.regularExpressionList = regularExpressionList
        self.scope = scope
        self.tags = tags
    }
}

struct CreateRegexPatternSetInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let description: Swift.String?
    public let regularExpressionList: [Wafv2ClientTypes.Regex]?
    public let tags: [Wafv2ClientTypes.Tag]?
}

extension CreateRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
        case scope = "Scope"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let regularExpressionListContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Regex?].self, forKey: .regularExpressionList)
        var regularExpressionListDecoded0:[Wafv2ClientTypes.Regex]? = nil
        if let regularExpressionListContainer = regularExpressionListContainer {
            regularExpressionListDecoded0 = [Wafv2ClientTypes.Regex]()
            for structure0 in regularExpressionListContainer {
                if let structure0 = structure0 {
                    regularExpressionListDecoded0?.append(structure0)
                }
            }
        }
        regularExpressionList = regularExpressionListDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[Wafv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Wafv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRegexPatternSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRegexPatternSetOutputResponse(summary: \(Swift.String(describing: summary)))"}
}

extension CreateRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateRegexPatternSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.summary = output.summary
        } else {
            self.summary = nil
        }
    }
}

public struct CreateRegexPatternSetOutputResponse: Swift.Equatable {
    /// <p>High-level information about a <a>RegexPatternSet</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>RegexPatternSet</code>, and the ARN, that you provide to the <a>RegexPatternSetReferenceStatement</a> to use the pattern set in a <a>Rule</a>.</p>
    public let summary: Wafv2ClientTypes.RegexPatternSetSummary?

    public init (
        summary: Wafv2ClientTypes.RegexPatternSetSummary? = nil
    )
    {
        self.summary = summary
    }
}

struct CreateRegexPatternSetOutputResponseBody: Swift.Equatable {
    public let summary: Wafv2ClientTypes.RegexPatternSetSummary?
}

extension CreateRegexPatternSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case summary = "Summary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RegexPatternSetSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}

public struct CreateRuleGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRuleGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRuleGroupOutputError>
}

extension CreateRuleGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRuleGroupInput(capacity: \(Swift.String(describing: capacity)), customResponseBodies: \(Swift.String(describing: customResponseBodies)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), rules: \(Swift.String(describing: rules)), scope: \(Swift.String(describing: scope)), tags: \(Swift.String(describing: tags)), visibilityConfig: \(Swift.String(describing: visibilityConfig)))"}
}

extension CreateRuleGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case customResponseBodies = "CustomResponseBodies"
        case description = "Description"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case tags = "Tags"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if capacity != 0 {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customresponsebodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customresponsebodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rules0 in rules {
                try rulesContainer.encode(rules0)
            }
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let visibilityConfig = visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }
}

public struct CreateRuleGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRuleGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRuleGroupOutputError>
}

public struct CreateRuleGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRuleGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRuleGroupOutputError>
}

public struct CreateRuleGroupInput: Swift.Equatable {
    /// <p>The web ACL capacity units (WCUs) required for this rule group.</p>
    ///           <p>When you create your own rule group, you define this, and you cannot change it after creation.
    ///           When you add or modify the rules in a rule group, AWS WAF enforces this limit. You can check the capacity
    ///           for a set of rules using <a>CheckCapacity</a>.</p>
    ///           <p>AWS WAF uses WCUs to calculate and control the operating
    ///          resources that are used to run your rules, rule groups, and web ACLs. AWS WAF
    ///          calculates capacity differently for each rule type, to reflect the relative cost of each rule.
    ///          Simple rules that cost little to run use fewer WCUs than more complex rules
    /// 				that use more processing power.
    /// 				Rule group capacity is fixed at creation, which helps users plan their
    ///          web ACL WCU usage when they use a rule group.
    ///          The WCU limit for web ACLs is 1,500.  </p>
    public let capacity: Swift.Int
    /// <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. </p>
    ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    ///          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">AWS WAF quotas</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    public let customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
    /// <p>A description of the rule group that helps with identification. </p>
    public let description: Swift.String?
    /// <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
    public let name: Swift.String?
    /// <p>The <a>Rule</a> statements used to identify the web requests that you
    ///          want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching
    ///          web requests, and parameters that govern how AWS WAF handles them.
    ///       </p>
    public let rules: [Wafv2ClientTypes.Rule]?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?
    /// <p>An array of key:value pairs to associate with the resource.</p>
    public let tags: [Wafv2ClientTypes.Tag]?
    /// <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
    public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?

    public init (
        capacity: Swift.Int = 0,
        customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [Wafv2ClientTypes.Rule]? = nil,
        scope: Wafv2ClientTypes.Scope? = nil,
        tags: [Wafv2ClientTypes.Tag]? = nil,
        visibilityConfig: Wafv2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.capacity = capacity
        self.customResponseBodies = customResponseBodies
        self.description = description
        self.name = name
        self.rules = rules
        self.scope = scope
        self.tags = tags
        self.visibilityConfig = visibilityConfig
    }
}

struct CreateRuleGroupInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let capacity: Swift.Int
    public let description: Swift.String?
    public let rules: [Wafv2ClientTypes.Rule]?
    public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?
    public let tags: [Wafv2ClientTypes.Tag]?
    public let customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
}

extension CreateRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case customResponseBodies = "CustomResponseBodies"
        case description = "Description"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case tags = "Tags"
        case visibilityConfig = "VisibilityConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let capacityDecoded = try containerValues.decode(Swift.Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[Wafv2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Wafv2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[Wafv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Wafv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: Wafv2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:Wafv2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
    }
}

extension CreateRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFSubscriptionNotFoundException" : self = .wAFSubscriptionNotFoundException(try WAFSubscriptionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFSubscriptionNotFoundException(WAFSubscriptionNotFoundException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRuleGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRuleGroupOutputResponse(summary: \(Swift.String(describing: summary)))"}
}

extension CreateRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.summary = output.summary
        } else {
            self.summary = nil
        }
    }
}

public struct CreateRuleGroupOutputResponse: Swift.Equatable {
    /// <p>High-level information about a <a>RuleGroup</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>RuleGroup</code>, and the ARN, that you provide to the <a>RuleGroupReferenceStatement</a> to use the rule group in a <a>Rule</a>.</p>
    public let summary: Wafv2ClientTypes.RuleGroupSummary?

    public init (
        summary: Wafv2ClientTypes.RuleGroupSummary? = nil
    )
    {
        self.summary = summary
    }
}

struct CreateRuleGroupOutputResponseBody: Swift.Equatable {
    public let summary: Wafv2ClientTypes.RuleGroupSummary?
}

extension CreateRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case summary = "Summary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RuleGroupSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}

public struct CreateWebACLInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateWebACLInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateWebACLOutputError>
}

extension CreateWebACLInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateWebACLInput(customResponseBodies: \(Swift.String(describing: customResponseBodies)), defaultAction: \(Swift.String(describing: defaultAction)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), rules: \(Swift.String(describing: rules)), scope: \(Swift.String(describing: scope)), tags: \(Swift.String(describing: tags)), visibilityConfig: \(Swift.String(describing: visibilityConfig)))"}
}

extension CreateWebACLInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case tags = "Tags"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customresponsebodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customresponsebodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let defaultAction = defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rules0 in rules {
                try rulesContainer.encode(rules0)
            }
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let visibilityConfig = visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }
}

public struct CreateWebACLInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateWebACLInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateWebACLOutputError>
}

public struct CreateWebACLInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateWebACLInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateWebACLOutputError>
}

public struct CreateWebACLInput: Swift.Equatable {
    /// <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. </p>
    ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    ///          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">AWS WAF quotas</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    public let customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
    /// <p>The action to perform if none of the <code>Rules</code> contained in the <code>WebACL</code> match. </p>
    public let defaultAction: Wafv2ClientTypes.DefaultAction?
    /// <p>A description of the Web ACL that helps with identification. </p>
    public let description: Swift.String?
    /// <p>The name of the Web ACL. You cannot change the name of a Web ACL after you create it.</p>
    public let name: Swift.String?
    /// <p>The <a>Rule</a> statements used to identify the web requests that you
    ///          want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching
    ///          web requests, and parameters that govern how AWS WAF handles them.
    ///       </p>
    public let rules: [Wafv2ClientTypes.Rule]?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?
    /// <p>An array of key:value pairs to associate with the resource.</p>
    public let tags: [Wafv2ClientTypes.Tag]?
    /// <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
    public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?

    public init (
        customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil,
        defaultAction: Wafv2ClientTypes.DefaultAction? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [Wafv2ClientTypes.Rule]? = nil,
        scope: Wafv2ClientTypes.Scope? = nil,
        tags: [Wafv2ClientTypes.Tag]? = nil,
        visibilityConfig: Wafv2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.customResponseBodies = customResponseBodies
        self.defaultAction = defaultAction
        self.description = description
        self.name = name
        self.rules = rules
        self.scope = scope
        self.tags = tags
        self.visibilityConfig = visibilityConfig
    }
}

struct CreateWebACLInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let defaultAction: Wafv2ClientTypes.DefaultAction?
    public let description: Swift.String?
    public let rules: [Wafv2ClientTypes.Rule]?
    public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?
    public let tags: [Wafv2ClientTypes.Tag]?
    public let customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
}

extension CreateWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case tags = "Tags"
        case visibilityConfig = "VisibilityConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let defaultActionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.DefaultAction.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[Wafv2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Wafv2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[Wafv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Wafv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: Wafv2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:Wafv2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
    }
}

extension CreateWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidResourceException" : self = .wAFInvalidResourceException(try WAFInvalidResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFSubscriptionNotFoundException" : self = .wAFSubscriptionNotFoundException(try WAFSubscriptionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFInvalidResourceException(WAFInvalidResourceException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFSubscriptionNotFoundException(WAFSubscriptionNotFoundException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateWebACLOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateWebACLOutputResponse(summary: \(Swift.String(describing: summary)))"}
}

extension CreateWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.summary = output.summary
        } else {
            self.summary = nil
        }
    }
}

public struct CreateWebACLOutputResponse: Swift.Equatable {
    /// <p>High-level information about a <a>WebACL</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>WebACL</code>, and the ARN, that you provide to operations like <a>AssociateWebACL</a>.</p>
    public let summary: Wafv2ClientTypes.WebACLSummary?

    public init (
        summary: Wafv2ClientTypes.WebACLSummary? = nil
    )
    {
        self.summary = summary
    }
}

struct CreateWebACLOutputResponseBody: Swift.Equatable {
    public let summary: Wafv2ClientTypes.WebACLSummary?
}

extension CreateWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case summary = "Summary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.WebACLSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}

extension Wafv2ClientTypes.CustomHTTPHeader: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Wafv2ClientTypes.CustomHTTPHeader: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomHTTPHeader(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension Wafv2ClientTypes {
    /// <p>A custom header for custom request and response handling. This is used in <a>CustomResponse</a> and <a>CustomRequestHandling</a>.</p>
    public struct CustomHTTPHeader: Swift.Equatable {
        /// <p>The name of the custom header. </p>
        ///          <p>For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name <code>x-amzn-waf-</code>, to avoid confusion with the headers that are already in the request. For example, for the header name <code>sample</code>, AWS WAF inserts the header <code>x-amzn-waf-sample</code>.</p>
        public let name: Swift.String?
        /// <p>The value of the custom header.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension Wafv2ClientTypes.CustomRequestHandling: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insertHeaders = "InsertHeaders"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let insertHeaders = insertHeaders {
            var insertHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .insertHeaders)
            for customhttpheaders0 in insertHeaders {
                try insertHeadersContainer.encode(customhttpheaders0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insertHeadersContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.CustomHTTPHeader?].self, forKey: .insertHeaders)
        var insertHeadersDecoded0:[Wafv2ClientTypes.CustomHTTPHeader]? = nil
        if let insertHeadersContainer = insertHeadersContainer {
            insertHeadersDecoded0 = [Wafv2ClientTypes.CustomHTTPHeader]()
            for structure0 in insertHeadersContainer {
                if let structure0 = structure0 {
                    insertHeadersDecoded0?.append(structure0)
                }
            }
        }
        insertHeaders = insertHeadersDecoded0
    }
}

extension Wafv2ClientTypes.CustomRequestHandling: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomRequestHandling(insertHeaders: \(Swift.String(describing: insertHeaders)))"}
}

extension Wafv2ClientTypes {
    /// <p>Custom request handling behavior that inserts custom headers into a web request. You can add custom request handling for the rule actions allow and count. </p>
    ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    public struct CustomRequestHandling: Swift.Equatable {
        /// <p>The HTTP headers to insert into the request. Duplicate header names are not allowed. </p>
        ///          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">AWS WAF quotas</a> in the
        ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
        public let insertHeaders: [Wafv2ClientTypes.CustomHTTPHeader]?

        public init (
            insertHeaders: [Wafv2ClientTypes.CustomHTTPHeader]? = nil
        )
        {
            self.insertHeaders = insertHeaders
        }
    }

}

extension Wafv2ClientTypes.CustomResponse: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponseBodyKey = "CustomResponseBodyKey"
        case responseCode = "ResponseCode"
        case responseHeaders = "ResponseHeaders"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customResponseBodyKey = customResponseBodyKey {
            try encodeContainer.encode(customResponseBodyKey, forKey: .customResponseBodyKey)
        }
        if let responseCode = responseCode {
            try encodeContainer.encode(responseCode, forKey: .responseCode)
        }
        if let responseHeaders = responseHeaders {
            var responseHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .responseHeaders)
            for customhttpheaders0 in responseHeaders {
                try responseHeadersContainer.encode(customhttpheaders0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responseCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .responseCode)
        responseCode = responseCodeDecoded
        let customResponseBodyKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customResponseBodyKey)
        customResponseBodyKey = customResponseBodyKeyDecoded
        let responseHeadersContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.CustomHTTPHeader?].self, forKey: .responseHeaders)
        var responseHeadersDecoded0:[Wafv2ClientTypes.CustomHTTPHeader]? = nil
        if let responseHeadersContainer = responseHeadersContainer {
            responseHeadersDecoded0 = [Wafv2ClientTypes.CustomHTTPHeader]()
            for structure0 in responseHeadersContainer {
                if let structure0 = structure0 {
                    responseHeadersDecoded0?.append(structure0)
                }
            }
        }
        responseHeaders = responseHeadersDecoded0
    }
}

extension Wafv2ClientTypes.CustomResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomResponse(customResponseBodyKey: \(Swift.String(describing: customResponseBodyKey)), responseCode: \(Swift.String(describing: responseCode)), responseHeaders: \(Swift.String(describing: responseHeaders)))"}
}

extension Wafv2ClientTypes {
    /// <p>A custom response to send to the client. You can define a custom response for rule actions and default web ACL actions that are set to <a>BlockAction</a>. </p>
    ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    public struct CustomResponse: Swift.Equatable {
        /// <p>References the response body that you want AWS WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first
        ///        define the response body key and value in the <code>CustomResponseBodies</code> setting for the <a>WebACL</a> or <a>RuleGroup</a> where you want to use it. Then, in the rule action or web ACL default action <code>BlockAction</code> setting, you reference
        ///        the response body using this key. </p>
        public let customResponseBodyKey: Swift.String?
        /// <p>The HTTP status code to return to the client. </p>
        ///          <p>For a list of status codes that you can use in your custom reqponses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html">Supported status codes for custom response</a> in the
        ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
        public let responseCode: Swift.Int?
        /// <p>The HTTP headers to use in the response. Duplicate header names are not allowed. </p>
        ///          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">AWS WAF quotas</a> in the
        ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
        public let responseHeaders: [Wafv2ClientTypes.CustomHTTPHeader]?

        public init (
            customResponseBodyKey: Swift.String? = nil,
            responseCode: Swift.Int? = nil,
            responseHeaders: [Wafv2ClientTypes.CustomHTTPHeader]? = nil
        )
        {
            self.customResponseBodyKey = customResponseBodyKey
            self.responseCode = responseCode
            self.responseHeaders = responseHeaders
        }
    }

}

extension Wafv2ClientTypes.CustomResponseBody: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case contentType = "ContentType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType.rawValue, forKey: .contentType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentTypeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ResponseContentType.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
    }
}

extension Wafv2ClientTypes.CustomResponseBody: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomResponseBody(content: \(Swift.String(describing: content)), contentType: \(Swift.String(describing: contentType)))"}
}

extension Wafv2ClientTypes {
    /// <p>The response body to use in a custom response to a web request. This is referenced by key from <a>CustomResponse</a>
    ///             <code>CustomResponseBodyKey</code>.</p>
    public struct CustomResponseBody: Swift.Equatable {
        /// <p>The payload of the custom response. </p>
        ///          <p>You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the <code>ContentType</code> setting. </p>
        ///          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">AWS WAF quotas</a> in the
        ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
        public let content: Swift.String?
        /// <p>The type of content in the payload that you are defining in the <code>Content</code> string.</p>
        public let contentType: Wafv2ClientTypes.ResponseContentType?

        public init (
            content: Swift.String? = nil,
            contentType: Wafv2ClientTypes.ResponseContentType? = nil
        )
        {
            self.content = content
            self.contentType = contentType
        }
    }

}

extension Wafv2ClientTypes.DefaultAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allow = "Allow"
        case block = "Block"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allow = allow {
            try encodeContainer.encode(allow, forKey: .allow)
        }
        if let block = block {
            try encodeContainer.encode(block, forKey: .block)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.BlockAction.self, forKey: .block)
        block = blockDecoded
        let allowDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.AllowAction.self, forKey: .allow)
        allow = allowDecoded
    }
}

extension Wafv2ClientTypes.DefaultAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DefaultAction(allow: \(Swift.String(describing: allow)), block: \(Swift.String(describing: block)))"}
}

extension Wafv2ClientTypes {
    /// <p>In a <a>WebACL</a>, this is the action that you want AWS WAF
    ///          to perform when a web request doesn't match any of the rules in the <code>WebACL</code>. The default action must be a terminating action, so you can't use count.</p>
    public struct DefaultAction: Swift.Equatable {
        /// <p>Specifies that AWS WAF should allow requests by default.</p>
        public let allow: Wafv2ClientTypes.AllowAction?
        /// <p>Specifies that AWS WAF should block requests by default. </p>
        public let block: Wafv2ClientTypes.BlockAction?

        public init (
            allow: Wafv2ClientTypes.AllowAction? = nil,
            block: Wafv2ClientTypes.BlockAction? = nil
        )
        {
            self.allow = allow
            self.block = block
        }
    }

}

public struct DeleteFirewallManagerRuleGroupsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteFirewallManagerRuleGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteFirewallManagerRuleGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteFirewallManagerRuleGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteFirewallManagerRuleGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteFirewallManagerRuleGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteFirewallManagerRuleGroupsOutputError>
}

extension DeleteFirewallManagerRuleGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteFirewallManagerRuleGroupsInput(webACLArn: \(Swift.String(describing: webACLArn)), webACLLockToken: \(Swift.String(describing: webACLLockToken)))"}
}

extension DeleteFirewallManagerRuleGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webACLArn = "WebACLArn"
        case webACLLockToken = "WebACLLockToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let webACLArn = webACLArn {
            try encodeContainer.encode(webACLArn, forKey: .webACLArn)
        }
        if let webACLLockToken = webACLLockToken {
            try encodeContainer.encode(webACLLockToken, forKey: .webACLLockToken)
        }
    }
}

public struct DeleteFirewallManagerRuleGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteFirewallManagerRuleGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteFirewallManagerRuleGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteFirewallManagerRuleGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteFirewallManagerRuleGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteFirewallManagerRuleGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteFirewallManagerRuleGroupsOutputError>
}

public struct DeleteFirewallManagerRuleGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteFirewallManagerRuleGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteFirewallManagerRuleGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteFirewallManagerRuleGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteFirewallManagerRuleGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteFirewallManagerRuleGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteFirewallManagerRuleGroupsOutputError>
}

public struct DeleteFirewallManagerRuleGroupsInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the web ACL.</p>
    public let webACLArn: Swift.String?
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let webACLLockToken: Swift.String?

    public init (
        webACLArn: Swift.String? = nil,
        webACLLockToken: Swift.String? = nil
    )
    {
        self.webACLArn = webACLArn
        self.webACLLockToken = webACLLockToken
    }
}

struct DeleteFirewallManagerRuleGroupsInputBody: Swift.Equatable {
    public let webACLArn: Swift.String?
    public let webACLLockToken: Swift.String?
}

extension DeleteFirewallManagerRuleGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webACLArn = "WebACLArn"
        case webACLLockToken = "WebACLLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLArn)
        webACLArn = webACLArnDecoded
        let webACLLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLLockToken)
        webACLLockToken = webACLLockTokenDecoded
    }
}

extension DeleteFirewallManagerRuleGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFirewallManagerRuleGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteFirewallManagerRuleGroupsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFirewallManagerRuleGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteFirewallManagerRuleGroupsOutputResponse(nextWebACLLockToken: \(Swift.String(describing: nextWebACLLockToken)))"}
}

extension DeleteFirewallManagerRuleGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteFirewallManagerRuleGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextWebACLLockToken = output.nextWebACLLockToken
        } else {
            self.nextWebACLLockToken = nil
        }
    }
}

public struct DeleteFirewallManagerRuleGroupsOutputResponse: Swift.Equatable {
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let nextWebACLLockToken: Swift.String?

    public init (
        nextWebACLLockToken: Swift.String? = nil
    )
    {
        self.nextWebACLLockToken = nextWebACLLockToken
    }
}

struct DeleteFirewallManagerRuleGroupsOutputResponseBody: Swift.Equatable {
    public let nextWebACLLockToken: Swift.String?
}

extension DeleteFirewallManagerRuleGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextWebACLLockToken = "NextWebACLLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextWebACLLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextWebACLLockToken)
        nextWebACLLockToken = nextWebACLLockTokenDecoded
    }
}

public struct DeleteIPSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIPSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIPSetOutputError>
}

extension DeleteIPSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIPSetInput(id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)), scope: \(Swift.String(describing: scope)))"}
}

extension DeleteIPSetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct DeleteIPSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIPSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIPSetOutputError>
}

public struct DeleteIPSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIPSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIPSetOutputError>
}

public struct DeleteIPSetInput: Swift.Equatable {
    /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?
    /// <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
    public let name: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

struct DeleteIPSetInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
    public let lockToken: Swift.String?
}

extension DeleteIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension DeleteIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFAssociatedItemException" : self = .wAFAssociatedItemException(try WAFAssociatedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFAssociatedItemException(WAFAssociatedItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIPSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIPSetOutputResponse()"}
}

extension DeleteIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteIPSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteIPSetOutputResponseBody: Swift.Equatable {
}

extension DeleteIPSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteLoggingConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLoggingConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLoggingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLoggingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLoggingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLoggingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLoggingConfigurationOutputError>
}

extension DeleteLoggingConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLoggingConfigurationInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension DeleteLoggingConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct DeleteLoggingConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLoggingConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLoggingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLoggingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLoggingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLoggingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLoggingConfigurationOutputError>
}

public struct DeleteLoggingConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLoggingConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLoggingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLoggingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLoggingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLoggingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLoggingConfigurationOutputError>
}

public struct DeleteLoggingConfigurationInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the web ACL from which you want to delete the <a>LoggingConfiguration</a>.</p>
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DeleteLoggingConfigurationInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
}

extension DeleteLoggingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DeleteLoggingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLoggingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLoggingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLoggingConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLoggingConfigurationOutputResponse()"}
}

extension DeleteLoggingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLoggingConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteLoggingConfigurationOutputResponseBody: Swift.Equatable {
}

extension DeleteLoggingConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeletePermissionPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePermissionPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePermissionPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePermissionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePermissionPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePermissionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePermissionPolicyOutputError>
}

extension DeletePermissionPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePermissionPolicyInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension DeletePermissionPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct DeletePermissionPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePermissionPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePermissionPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePermissionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePermissionPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePermissionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePermissionPolicyOutputError>
}

public struct DeletePermissionPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePermissionPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePermissionPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePermissionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePermissionPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePermissionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePermissionPolicyOutputError>
}

public struct DeletePermissionPolicyInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the rule group from which you want to delete the policy.</p>
    ///         <p>You must be the owner of the rule group to perform this operation.</p>
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DeletePermissionPolicyInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
}

extension DeletePermissionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DeletePermissionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePermissionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePermissionPolicyOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePermissionPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePermissionPolicyOutputResponse()"}
}

extension DeletePermissionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePermissionPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeletePermissionPolicyOutputResponseBody: Swift.Equatable {
}

extension DeletePermissionPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteRegexPatternSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRegexPatternSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRegexPatternSetOutputError>
}

extension DeleteRegexPatternSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRegexPatternSetInput(id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)), scope: \(Swift.String(describing: scope)))"}
}

extension DeleteRegexPatternSetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct DeleteRegexPatternSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRegexPatternSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRegexPatternSetOutputError>
}

public struct DeleteRegexPatternSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRegexPatternSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRegexPatternSetOutputError>
}

public struct DeleteRegexPatternSetInput: Swift.Equatable {
    /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?
    /// <p>The name of the set. You cannot change the name after you create the set.</p>
    public let name: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

struct DeleteRegexPatternSetInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
    public let lockToken: Swift.String?
}

extension DeleteRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension DeleteRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFAssociatedItemException" : self = .wAFAssociatedItemException(try WAFAssociatedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFAssociatedItemException(WAFAssociatedItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRegexPatternSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRegexPatternSetOutputResponse()"}
}

extension DeleteRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRegexPatternSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteRegexPatternSetOutputResponseBody: Swift.Equatable {
}

extension DeleteRegexPatternSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteRuleGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRuleGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRuleGroupOutputError>
}

extension DeleteRuleGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRuleGroupInput(id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)), scope: \(Swift.String(describing: scope)))"}
}

extension DeleteRuleGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct DeleteRuleGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRuleGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRuleGroupOutputError>
}

public struct DeleteRuleGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRuleGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRuleGroupOutputError>
}

public struct DeleteRuleGroupInput: Swift.Equatable {
    /// <p>A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?
    /// <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
    public let name: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

struct DeleteRuleGroupInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
    public let lockToken: Swift.String?
}

extension DeleteRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension DeleteRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFAssociatedItemException" : self = .wAFAssociatedItemException(try WAFAssociatedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFAssociatedItemException(WAFAssociatedItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRuleGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRuleGroupOutputResponse()"}
}

extension DeleteRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRuleGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteRuleGroupOutputResponseBody: Swift.Equatable {
}

extension DeleteRuleGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteWebACLInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteWebACLInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteWebACLOutputError>
}

extension DeleteWebACLInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteWebACLInput(id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)), scope: \(Swift.String(describing: scope)))"}
}

extension DeleteWebACLInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct DeleteWebACLInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteWebACLInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteWebACLOutputError>
}

public struct DeleteWebACLInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteWebACLInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteWebACLOutputError>
}

public struct DeleteWebACLInput: Swift.Equatable {
    /// <p>The unique identifier for the Web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?
    /// <p>The name of the Web ACL. You cannot change the name of a Web ACL after you create it.</p>
    public let name: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

struct DeleteWebACLInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
    public let lockToken: Swift.String?
}

extension DeleteWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension DeleteWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFAssociatedItemException" : self = .wAFAssociatedItemException(try WAFAssociatedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFAssociatedItemException(WAFAssociatedItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWebACLOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteWebACLOutputResponse()"}
}

extension DeleteWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteWebACLOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteWebACLOutputResponseBody: Swift.Equatable {
}

extension DeleteWebACLOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeManagedRuleGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeManagedRuleGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeManagedRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeManagedRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeManagedRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeManagedRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeManagedRuleGroupOutputError>
}

extension DescribeManagedRuleGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeManagedRuleGroupInput(name: \(Swift.String(describing: name)), scope: \(Swift.String(describing: scope)), vendorName: \(Swift.String(describing: vendorName)))"}
}

extension DescribeManagedRuleGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case scope = "Scope"
        case vendorName = "VendorName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let vendorName = vendorName {
            try encodeContainer.encode(vendorName, forKey: .vendorName)
        }
    }
}

public struct DescribeManagedRuleGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeManagedRuleGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeManagedRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeManagedRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeManagedRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeManagedRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeManagedRuleGroupOutputError>
}

public struct DescribeManagedRuleGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeManagedRuleGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeManagedRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeManagedRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeManagedRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeManagedRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeManagedRuleGroupOutputError>
}

public struct DescribeManagedRuleGroupInput: Swift.Equatable {
    /// <p>The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.</p>
    public let name: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?
    /// <p>The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.</p>
    public let vendorName: Swift.String?

    public init (
        name: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil,
        vendorName: Swift.String? = nil
    )
    {
        self.name = name
        self.scope = scope
        self.vendorName = vendorName
    }
}

struct DescribeManagedRuleGroupInputBody: Swift.Equatable {
    public let vendorName: Swift.String?
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
}

extension DescribeManagedRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case scope = "Scope"
        case vendorName = "VendorName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vendorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendorName)
        vendorName = vendorNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
    }
}

extension DescribeManagedRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeManagedRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidResourceException" : self = .wAFInvalidResourceException(try WAFInvalidResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeManagedRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFInvalidResourceException(WAFInvalidResourceException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeManagedRuleGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeManagedRuleGroupOutputResponse(availableLabels: \(Swift.String(describing: availableLabels)), capacity: \(Swift.String(describing: capacity)), consumedLabels: \(Swift.String(describing: consumedLabels)), labelNamespace: \(Swift.String(describing: labelNamespace)), rules: \(Swift.String(describing: rules)))"}
}

extension DescribeManagedRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeManagedRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.availableLabels = output.availableLabels
            self.capacity = output.capacity
            self.consumedLabels = output.consumedLabels
            self.labelNamespace = output.labelNamespace
            self.rules = output.rules
        } else {
            self.availableLabels = nil
            self.capacity = 0
            self.consumedLabels = nil
            self.labelNamespace = nil
            self.rules = nil
        }
    }
}

public struct DescribeManagedRuleGroupOutputResponse: Swift.Equatable {
    /// <p>The labels that one or more rules in this rule group add to matching web ACLs. These labels are defined in the <code>RuleLabels</code> for a <a>Rule</a>.</p>
    public let availableLabels: [Wafv2ClientTypes.LabelSummary]?
    /// <p>The web ACL capacity units (WCUs) required for this rule group.
    ///          AWS WAF uses web ACL capacity units (WCU) to calculate and control the operating
    ///          resources that are used to run your rules, rule groups, and web ACLs. AWS WAF
    ///          calculates capacity differently for each rule type, to reflect each rule's relative
    ///          cost. Rule group capacity is fixed at creation, so users can plan their
    ///          web ACL WCU usage when they use a rule group.
    ///          The WCU limit for web ACLs is 1,500.  </p>
    public let capacity: Swift.Int
    /// <p>The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a <code>LabelMatchStatement</code> specification, in the <a>Statement</a> definition of a rule.  </p>
    public let consumedLabels: [Wafv2ClientTypes.LabelSummary]?
    /// <p>The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix. </p>
    ///          <ul>
    ///             <li>
    ///                <p>The syntax for the label namespace prefix for a managed rule group is the following: </p>
    ///                <p>
    ///                   <code>awswaf:managed:<vendor>:<rule group name></code>:</p>
    ///             </li>
    ///             <li>
    ///                <p>When a rule with a label matches a web request, AWS WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p>
    ///                <p>
    ///                   <code><label namespace>:<label from rule></code>
    ///                </p>
    ///
    ///             </li>
    ///          </ul>
    public let labelNamespace: Swift.String?
    /// <p></p>
    public let rules: [Wafv2ClientTypes.RuleSummary]?

    public init (
        availableLabels: [Wafv2ClientTypes.LabelSummary]? = nil,
        capacity: Swift.Int = 0,
        consumedLabels: [Wafv2ClientTypes.LabelSummary]? = nil,
        labelNamespace: Swift.String? = nil,
        rules: [Wafv2ClientTypes.RuleSummary]? = nil
    )
    {
        self.availableLabels = availableLabels
        self.capacity = capacity
        self.consumedLabels = consumedLabels
        self.labelNamespace = labelNamespace
        self.rules = rules
    }
}

struct DescribeManagedRuleGroupOutputResponseBody: Swift.Equatable {
    public let capacity: Swift.Int
    public let rules: [Wafv2ClientTypes.RuleSummary]?
    public let labelNamespace: Swift.String?
    public let availableLabels: [Wafv2ClientTypes.LabelSummary]?
    public let consumedLabels: [Wafv2ClientTypes.LabelSummary]?
}

extension DescribeManagedRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availableLabels = "AvailableLabels"
        case capacity = "Capacity"
        case consumedLabels = "ConsumedLabels"
        case labelNamespace = "LabelNamespace"
        case rules = "Rules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityDecoded = try containerValues.decode(Swift.Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.RuleSummary?].self, forKey: .rules)
        var rulesDecoded0:[Wafv2ClientTypes.RuleSummary]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Wafv2ClientTypes.RuleSummary]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
        let availableLabelsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.LabelSummary?].self, forKey: .availableLabels)
        var availableLabelsDecoded0:[Wafv2ClientTypes.LabelSummary]? = nil
        if let availableLabelsContainer = availableLabelsContainer {
            availableLabelsDecoded0 = [Wafv2ClientTypes.LabelSummary]()
            for structure0 in availableLabelsContainer {
                if let structure0 = structure0 {
                    availableLabelsDecoded0?.append(structure0)
                }
            }
        }
        availableLabels = availableLabelsDecoded0
        let consumedLabelsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.LabelSummary?].self, forKey: .consumedLabels)
        var consumedLabelsDecoded0:[Wafv2ClientTypes.LabelSummary]? = nil
        if let consumedLabelsContainer = consumedLabelsContainer {
            consumedLabelsDecoded0 = [Wafv2ClientTypes.LabelSummary]()
            for structure0 in consumedLabelsContainer {
                if let structure0 = structure0 {
                    consumedLabelsDecoded0?.append(structure0)
                }
            }
        }
        consumedLabels = consumedLabelsDecoded0
    }
}

public struct DisassociateWebACLInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateWebACLInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateWebACLOutputError>
}

extension DisassociateWebACLInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateWebACLInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension DisassociateWebACLInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct DisassociateWebACLInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateWebACLInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateWebACLOutputError>
}

public struct DisassociateWebACLInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateWebACLInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateWebACLOutputError>
}

public struct DisassociateWebACLInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource to disassociate from the web ACL. </p>
    ///
    ///          <p>The ARN must be in one of the following formats:</p>
    ///          <ul>
    ///             <li>
    ///                <p>For an Application Load Balancer: <code>arn:aws:elasticloadbalancing:<i>region</i>:<i>account-id</i>:loadbalancer/app/<i>load-balancer-name</i>/<i>load-balancer-id</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>For an API Gateway REST API: <code>arn:aws:apigateway:<i>region</i>::/restapis/<i>api-id</i>/stages/<i>stage-name</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>For an AppSync GraphQL API: <code>arn:aws:appsync:<i>region</i>:<i>account-id</i>:apis/<i>GraphQLApiId</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DisassociateWebACLInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
}

extension DisassociateWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DisassociateWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateWebACLOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateWebACLOutputResponse()"}
}

extension DisassociateWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateWebACLOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateWebACLOutputResponseBody: Swift.Equatable {
}

extension DisassociateWebACLOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Wafv2ClientTypes.ExcludedRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension Wafv2ClientTypes.ExcludedRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExcludedRule(name: \(Swift.String(describing: name)))"}
}

extension Wafv2ClientTypes {
    /// <p>Specifies a single rule to exclude from the rule group. Excluding a rule overrides
    ///          its action setting for the rule group in the web ACL, setting it to <code>COUNT</code>.
    ///          This effectively excludes the rule from acting on web requests.  </p>
    public struct ExcludedRule: Swift.Equatable {
        /// <p>The name of the rule to exclude.</p>
        public let name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension Wafv2ClientTypes {
    public enum FallbackBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case match
        case noMatch
        case sdkUnknown(Swift.String)

        public static var allCases: [FallbackBehavior] {
            return [
                .match,
                .noMatch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .match: return "MATCH"
            case .noMatch: return "NO_MATCH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FallbackBehavior(rawValue: rawValue) ?? FallbackBehavior.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.FieldToMatch: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allQueryArguments = "AllQueryArguments"
        case body = "Body"
        case jsonBody = "JsonBody"
        case method = "Method"
        case queryString = "QueryString"
        case singleHeader = "SingleHeader"
        case singleQueryArgument = "SingleQueryArgument"
        case uriPath = "UriPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allQueryArguments = allQueryArguments {
            try encodeContainer.encode(allQueryArguments, forKey: .allQueryArguments)
        }
        if let body = body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let jsonBody = jsonBody {
            try encodeContainer.encode(jsonBody, forKey: .jsonBody)
        }
        if let method = method {
            try encodeContainer.encode(method, forKey: .method)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let singleHeader = singleHeader {
            try encodeContainer.encode(singleHeader, forKey: .singleHeader)
        }
        if let singleQueryArgument = singleQueryArgument {
            try encodeContainer.encode(singleQueryArgument, forKey: .singleQueryArgument)
        }
        if let uriPath = uriPath {
            try encodeContainer.encode(uriPath, forKey: .uriPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let singleHeaderDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.SingleHeader.self, forKey: .singleHeader)
        singleHeader = singleHeaderDecoded
        let singleQueryArgumentDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.SingleQueryArgument.self, forKey: .singleQueryArgument)
        singleQueryArgument = singleQueryArgumentDecoded
        let allQueryArgumentsDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.AllQueryArguments.self, forKey: .allQueryArguments)
        allQueryArguments = allQueryArgumentsDecoded
        let uriPathDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.UriPath.self, forKey: .uriPath)
        uriPath = uriPathDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.QueryString.self, forKey: .queryString)
        queryString = queryStringDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Body.self, forKey: .body)
        body = bodyDecoded
        let methodDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Method.self, forKey: .method)
        method = methodDecoded
        let jsonBodyDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.JsonBody.self, forKey: .jsonBody)
        jsonBody = jsonBodyDecoded
    }
}

extension Wafv2ClientTypes.FieldToMatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FieldToMatch(allQueryArguments: \(Swift.String(describing: allQueryArguments)), body: \(Swift.String(describing: body)), jsonBody: \(Swift.String(describing: jsonBody)), method: \(Swift.String(describing: method)), queryString: \(Swift.String(describing: queryString)), singleHeader: \(Swift.String(describing: singleHeader)), singleQueryArgument: \(Swift.String(describing: singleQueryArgument)), uriPath: \(Swift.String(describing: uriPath)))"}
}

extension Wafv2ClientTypes {
    /// <p>The part of a web request that you want AWS WAF to inspect. Include the single <code>FieldToMatch</code> type that you want to inspect, with additional specifications as needed, according to the type. You specify a single request component in <code>FieldToMatch</code> for each rule statement that requires it. To inspect more than one component of a web request, create a separate rule statement for each component.</p>
    public struct FieldToMatch: Swift.Equatable {
        /// <p>Inspect all query arguments. </p>
        public let allQueryArguments: Wafv2ClientTypes.AllQueryArguments?
        /// <p>Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any
        ///          additional data that you want to send to your web server as the HTTP request body, such as data from a form. </p>
        ///          <p>Note that only the first 8 KB (8192 bytes) of the request body are forwarded to AWS WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as <a>ByteMatchStatement</a> or <a>RegexPatternSetReferenceStatement</a>, with a <a>SizeConstraintStatement</a> that enforces an 8 KB size limit on the body of the request. AWS WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.</p>
        public let body: Wafv2ClientTypes.Body?
        /// <p>Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any
        ///          additional data that you want to send to your web server as the HTTP request body, such as data from a form. </p>
        ///          <p>Note that only the first 8 KB (8192 bytes) of the request body are forwarded to AWS WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as <a>ByteMatchStatement</a> or <a>RegexPatternSetReferenceStatement</a>, with a <a>SizeConstraintStatement</a> that enforces an 8 KB size limit on the body of the request. AWS WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.</p>
        public let jsonBody: Wafv2ClientTypes.JsonBody?
        /// <p>Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. </p>
        public let method: Wafv2ClientTypes.Method?
        /// <p>Inspect the query string. This is the part of a URL that appears after a <code>?</code> character, if any.</p>
        public let queryString: Wafv2ClientTypes.QueryString?
        /// <p>Inspect a single header. Provide the name of the header to inspect, for example, <code>User-Agent</code> or <code>Referer</code>. This setting isn't case sensitive.</p>
        ///          <p>Example JSON: <code>"SingleHeader": { "Name": "haystack" }</code>
        ///          </p>
        public let singleHeader: Wafv2ClientTypes.SingleHeader?
        /// <p>Inspect a single query argument. Provide the name of the query argument to inspect, such as <i>UserName</i> or <i>SalesRegion</i>. The name can be up to 30 characters long and isn't case sensitive. </p>
        ///            <p>This is used only to indicate the web request component for AWS WAF to inspect, in the <a>FieldToMatch</a> specification. </p>
        ///          <p>Example JSON: <code>"SingleQueryArgument": { "Name": "myArgument" }</code>
        ///          </p>
        public let singleQueryArgument: Wafv2ClientTypes.SingleQueryArgument?
        /// <p>Inspect the request URI path. This is the part of a web request that identifies a resource, for example, <code>/images/daily-ad.jpg</code>.</p>
        public let uriPath: Wafv2ClientTypes.UriPath?

        public init (
            allQueryArguments: Wafv2ClientTypes.AllQueryArguments? = nil,
            body: Wafv2ClientTypes.Body? = nil,
            jsonBody: Wafv2ClientTypes.JsonBody? = nil,
            method: Wafv2ClientTypes.Method? = nil,
            queryString: Wafv2ClientTypes.QueryString? = nil,
            singleHeader: Wafv2ClientTypes.SingleHeader? = nil,
            singleQueryArgument: Wafv2ClientTypes.SingleQueryArgument? = nil,
            uriPath: Wafv2ClientTypes.UriPath? = nil
        )
        {
            self.allQueryArguments = allQueryArguments
            self.body = body
            self.jsonBody = jsonBody
            self.method = method
            self.queryString = queryString
            self.singleHeader = singleHeader
            self.singleQueryArgument = singleQueryArgument
            self.uriPath = uriPath
        }
    }

}

extension Wafv2ClientTypes.Filter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behavior = "Behavior"
        case conditions = "Conditions"
        case requirement = "Requirement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behavior = behavior {
            try encodeContainer.encode(behavior.rawValue, forKey: .behavior)
        }
        if let conditions = conditions {
            var conditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conditions)
            for conditions0 in conditions {
                try conditionsContainer.encode(conditions0)
            }
        }
        if let requirement = requirement {
            try encodeContainer.encode(requirement.rawValue, forKey: .requirement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let behaviorDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FilterBehavior.self, forKey: .behavior)
        behavior = behaviorDecoded
        let requirementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FilterRequirement.self, forKey: .requirement)
        requirement = requirementDecoded
        let conditionsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Condition?].self, forKey: .conditions)
        var conditionsDecoded0:[Wafv2ClientTypes.Condition]? = nil
        if let conditionsContainer = conditionsContainer {
            conditionsDecoded0 = [Wafv2ClientTypes.Condition]()
            for structure0 in conditionsContainer {
                if let structure0 = structure0 {
                    conditionsDecoded0?.append(structure0)
                }
            }
        }
        conditions = conditionsDecoded0
    }
}

extension Wafv2ClientTypes.Filter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Filter(behavior: \(Swift.String(describing: behavior)), conditions: \(Swift.String(describing: conditions)), requirement: \(Swift.String(describing: requirement)))"}
}

extension Wafv2ClientTypes {
    /// <p>A single logging filter, used in <a>LoggingFilter</a>. </p>
    public struct Filter: Swift.Equatable {
        /// <p>How to handle logs that satisfy the filter's conditions and requirement. </p>
        public let behavior: Wafv2ClientTypes.FilterBehavior?
        /// <p>Match conditions for the filter.</p>
        public let conditions: [Wafv2ClientTypes.Condition]?
        /// <p>Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.</p>
        public let requirement: Wafv2ClientTypes.FilterRequirement?

        public init (
            behavior: Wafv2ClientTypes.FilterBehavior? = nil,
            conditions: [Wafv2ClientTypes.Condition]? = nil,
            requirement: Wafv2ClientTypes.FilterRequirement? = nil
        )
        {
            self.behavior = behavior
            self.conditions = conditions
            self.requirement = requirement
        }
    }

}

extension Wafv2ClientTypes {
    public enum FilterBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case drop
        case keep
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterBehavior] {
            return [
                .drop,
                .keep,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .drop: return "DROP"
            case .keep: return "KEEP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterBehavior(rawValue: rawValue) ?? FilterBehavior.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes {
    public enum FilterRequirement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case meetsAll
        case meetsAny
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterRequirement] {
            return [
                .meetsAll,
                .meetsAny,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .meetsAll: return "MEETS_ALL"
            case .meetsAny: return "MEETS_ANY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterRequirement(rawValue: rawValue) ?? FilterRequirement.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.FirewallManagerRuleGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallManagerStatement = "FirewallManagerStatement"
        case name = "Name"
        case overrideAction = "OverrideAction"
        case priority = "Priority"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallManagerStatement = firewallManagerStatement {
            try encodeContainer.encode(firewallManagerStatement, forKey: .firewallManagerStatement)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let overrideAction = overrideAction {
            try encodeContainer.encode(overrideAction, forKey: .overrideAction)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let visibilityConfig = visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let priorityDecoded = try containerValues.decode(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let firewallManagerStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FirewallManagerStatement.self, forKey: .firewallManagerStatement)
        firewallManagerStatement = firewallManagerStatementDecoded
        let overrideActionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.OverrideAction.self, forKey: .overrideAction)
        overrideAction = overrideActionDecoded
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
    }
}

extension Wafv2ClientTypes.FirewallManagerRuleGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FirewallManagerRuleGroup(firewallManagerStatement: \(Swift.String(describing: firewallManagerStatement)), name: \(Swift.String(describing: name)), overrideAction: \(Swift.String(describing: overrideAction)), priority: \(Swift.String(describing: priority)), visibilityConfig: \(Swift.String(describing: visibilityConfig)))"}
}

extension Wafv2ClientTypes {
    /// <p>A rule group that's defined for an AWS Firewall Manager WAF policy.</p>
    public struct FirewallManagerRuleGroup: Swift.Equatable {
        /// <p>The processing guidance for an AWS Firewall Manager rule. This is like a regular rule <a>Statement</a>, but it can only contain a rule group reference.</p>
        public let firewallManagerStatement: Wafv2ClientTypes.FirewallManagerStatement?
        /// <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
        public let name: Swift.String?
        /// <p>The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group,
        ///            like <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p>
        ///         <p>Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. </p>
        ///         <p>In a <a>Rule</a>, you must specify either this <code>OverrideAction</code> setting or the rule <code>Action</code> setting, but not both:</p>
        ///          <ul>
        ///             <li>
        ///                <p>If the rule statement references a rule group, use this override action setting and not the action setting.  </p>
        ///             </li>
        ///             <li>
        ///                <p>If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting. </p>
        ///             </li>
        ///          </ul>
        public let overrideAction: Wafv2ClientTypes.OverrideAction?
        /// <p>If you define more than one rule group in the first or last Firewall Manager rule groups,
        ///           AWS WAF evaluates each request against the rule groups in order, starting from the lowest priority setting.
        ///          The priorities don't need to be consecutive, but they must all be different.</p>
        public let priority: Swift.Int
        /// <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
        public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?

        public init (
            firewallManagerStatement: Wafv2ClientTypes.FirewallManagerStatement? = nil,
            name: Swift.String? = nil,
            overrideAction: Wafv2ClientTypes.OverrideAction? = nil,
            priority: Swift.Int = 0,
            visibilityConfig: Wafv2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.firewallManagerStatement = firewallManagerStatement
            self.name = name
            self.overrideAction = overrideAction
            self.priority = priority
            self.visibilityConfig = visibilityConfig
        }
    }

}

extension Wafv2ClientTypes.FirewallManagerStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedRuleGroupStatement = "ManagedRuleGroupStatement"
        case ruleGroupReferenceStatement = "RuleGroupReferenceStatement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let managedRuleGroupStatement = managedRuleGroupStatement {
            try encodeContainer.encode(managedRuleGroupStatement, forKey: .managedRuleGroupStatement)
        }
        if let ruleGroupReferenceStatement = ruleGroupReferenceStatement {
            try encodeContainer.encode(ruleGroupReferenceStatement, forKey: .ruleGroupReferenceStatement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let managedRuleGroupStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ManagedRuleGroupStatement.self, forKey: .managedRuleGroupStatement)
        managedRuleGroupStatement = managedRuleGroupStatementDecoded
        let ruleGroupReferenceStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RuleGroupReferenceStatement.self, forKey: .ruleGroupReferenceStatement)
        ruleGroupReferenceStatement = ruleGroupReferenceStatementDecoded
    }
}

extension Wafv2ClientTypes.FirewallManagerStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FirewallManagerStatement(managedRuleGroupStatement: \(Swift.String(describing: managedRuleGroupStatement)), ruleGroupReferenceStatement: \(Swift.String(describing: ruleGroupReferenceStatement)))"}
}

extension Wafv2ClientTypes {
    /// <p>The processing guidance for an AWS Firewall Manager rule. This is like a regular rule <a>Statement</a>, but it can only contain a rule group reference.</p>
    public struct FirewallManagerStatement: Swift.Equatable {
        /// <p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <a>ListAvailableManagedRuleGroups</a>.</p>
        ///          <p>You can't nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p>
        public let managedRuleGroupStatement: Wafv2ClientTypes.ManagedRuleGroupStatement?
        /// <p>A rule statement used to run the rules that are defined in a <a>RuleGroup</a>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p>
        ///          <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p>
        public let ruleGroupReferenceStatement: Wafv2ClientTypes.RuleGroupReferenceStatement?

        public init (
            managedRuleGroupStatement: Wafv2ClientTypes.ManagedRuleGroupStatement? = nil,
            ruleGroupReferenceStatement: Wafv2ClientTypes.RuleGroupReferenceStatement? = nil
        )
        {
            self.managedRuleGroupStatement = managedRuleGroupStatement
            self.ruleGroupReferenceStatement = ruleGroupReferenceStatement
        }
    }

}

extension Wafv2ClientTypes.ForwardedIPConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fallbackBehavior = "FallbackBehavior"
        case headerName = "HeaderName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fallbackBehavior = fallbackBehavior {
            try encodeContainer.encode(fallbackBehavior.rawValue, forKey: .fallbackBehavior)
        }
        if let headerName = headerName {
            try encodeContainer.encode(headerName, forKey: .headerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let headerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .headerName)
        headerName = headerNameDecoded
        let fallbackBehaviorDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FallbackBehavior.self, forKey: .fallbackBehavior)
        fallbackBehavior = fallbackBehaviorDecoded
    }
}

extension Wafv2ClientTypes.ForwardedIPConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ForwardedIPConfig(fallbackBehavior: \(Swift.String(describing: fallbackBehavior)), headerName: \(Swift.String(describing: headerName)))"}
}

extension Wafv2ClientTypes {
    /// <p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p>
    ///
    ///          <note>
    ///             <p>If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.</p>
    ///          </note>
    ///
    ///
    ///          <p>This configuration is used for <a>GeoMatchStatement</a> and <a>RateBasedStatement</a>.
    ///            For <a>IPSetReferenceStatement</a>, use <a>IPSetForwardedIPConfig</a> instead.  </p>
    ///          <p>AWS WAF only evaluates the first IP address found in the specified HTTP header. </p>
    public struct ForwardedIPConfig: Swift.Equatable {
        /// <p>The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.</p>
        ///
        ///          <note>
        ///             <p>If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.</p>
        ///          </note>
        ///
        ///          <p>You can specify the following fallback behaviors:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>MATCH</code> - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p>
        ///             </li>
        ///          </ul>
        public let fallbackBehavior: Wafv2ClientTypes.FallbackBehavior?
        /// <p>The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to <code>X-Forwarded-For</code>.</p>
        ///
        ///          <note>
        ///             <p>If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.</p>
        ///          </note>
        public let headerName: Swift.String?

        public init (
            fallbackBehavior: Wafv2ClientTypes.FallbackBehavior? = nil,
            headerName: Swift.String? = nil
        )
        {
            self.fallbackBehavior = fallbackBehavior
            self.headerName = headerName
        }
    }

}

extension Wafv2ClientTypes {
    public enum ForwardedIPPosition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case any
        case first
        case last
        case sdkUnknown(Swift.String)

        public static var allCases: [ForwardedIPPosition] {
            return [
                .any,
                .first,
                .last,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .any: return "ANY"
            case .first: return "FIRST"
            case .last: return "LAST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ForwardedIPPosition(rawValue: rawValue) ?? ForwardedIPPosition.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.GeoMatchStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case countryCodes = "CountryCodes"
        case forwardedIPConfig = "ForwardedIPConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let countryCodes = countryCodes {
            var countryCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .countryCodes)
            for countrycodes0 in countryCodes {
                try countryCodesContainer.encode(countrycodes0.rawValue)
            }
        }
        if let forwardedIPConfig = forwardedIPConfig {
            try encodeContainer.encode(forwardedIPConfig, forKey: .forwardedIPConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countryCodesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.CountryCode?].self, forKey: .countryCodes)
        var countryCodesDecoded0:[Wafv2ClientTypes.CountryCode]? = nil
        if let countryCodesContainer = countryCodesContainer {
            countryCodesDecoded0 = [Wafv2ClientTypes.CountryCode]()
            for string0 in countryCodesContainer {
                if let string0 = string0 {
                    countryCodesDecoded0?.append(string0)
                }
            }
        }
        countryCodes = countryCodesDecoded0
        let forwardedIPConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ForwardedIPConfig.self, forKey: .forwardedIPConfig)
        forwardedIPConfig = forwardedIPConfigDecoded
    }
}

extension Wafv2ClientTypes.GeoMatchStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GeoMatchStatement(countryCodes: \(Swift.String(describing: countryCodes)), forwardedIPConfig: \(Swift.String(describing: forwardedIPConfig)))"}
}

extension Wafv2ClientTypes {
    /// <p>A rule statement used to identify web requests based on country of origin.  </p>
    public struct GeoMatchStatement: Swift.Equatable {
        /// <p>An array of two-character country codes, for example, <code>[ "US", "CN" ]</code>, from the alpha-2 country ISO codes of the ISO 3166 international standard. </p>
        public let countryCodes: [Wafv2ClientTypes.CountryCode]?
        /// <p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p>
        ///
        ///          <note>
        ///             <p>If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.</p>
        ///          </note>
        public let forwardedIPConfig: Wafv2ClientTypes.ForwardedIPConfig?

        public init (
            countryCodes: [Wafv2ClientTypes.CountryCode]? = nil,
            forwardedIPConfig: Wafv2ClientTypes.ForwardedIPConfig? = nil
        )
        {
            self.countryCodes = countryCodes
            self.forwardedIPConfig = forwardedIPConfig
        }
    }

}

public struct GetIPSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIPSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIPSetOutputError>
}

extension GetIPSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIPSetInput(id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), scope: \(Swift.String(describing: scope)))"}
}

extension GetIPSetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct GetIPSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIPSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIPSetOutputError>
}

public struct GetIPSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIPSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIPSetOutputError>
}

public struct GetIPSetInput: Swift.Equatable {
    /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
    public let name: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

struct GetIPSetInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
}

extension GetIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension GetIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIPSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIPSetOutputResponse(iPSet: \(Swift.String(describing: iPSet)), lockToken: \(Swift.String(describing: lockToken)))"}
}

extension GetIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetIPSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.iPSet = output.iPSet
            self.lockToken = output.lockToken
        } else {
            self.iPSet = nil
            self.lockToken = nil
        }
    }
}

public struct GetIPSetOutputResponse: Swift.Equatable {
    /// <p></p>
    public let iPSet: Wafv2ClientTypes.IPSet?
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?

    public init (
        iPSet: Wafv2ClientTypes.IPSet? = nil,
        lockToken: Swift.String? = nil
    )
    {
        self.iPSet = iPSet
        self.lockToken = lockToken
    }
}

struct GetIPSetOutputResponseBody: Swift.Equatable {
    public let iPSet: Wafv2ClientTypes.IPSet?
    public let lockToken: Swift.String?
}

extension GetIPSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iPSet = "IPSet"
        case lockToken = "LockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iPSetDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.IPSet.self, forKey: .iPSet)
        iPSet = iPSetDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

public struct GetLoggingConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoggingConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoggingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoggingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoggingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoggingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoggingConfigurationOutputError>
}

extension GetLoggingConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoggingConfigurationInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension GetLoggingConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct GetLoggingConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoggingConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoggingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoggingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoggingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoggingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoggingConfigurationOutputError>
}

public struct GetLoggingConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoggingConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoggingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoggingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoggingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoggingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoggingConfigurationOutputError>
}

public struct GetLoggingConfigurationInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the web ACL for which you want to get the <a>LoggingConfiguration</a>.</p>
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetLoggingConfigurationInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
}

extension GetLoggingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetLoggingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoggingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLoggingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoggingConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoggingConfigurationOutputResponse(loggingConfiguration: \(Swift.String(describing: loggingConfiguration)))"}
}

extension GetLoggingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetLoggingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loggingConfiguration = output.loggingConfiguration
        } else {
            self.loggingConfiguration = nil
        }
    }
}

public struct GetLoggingConfigurationOutputResponse: Swift.Equatable {
    /// <p>The <a>LoggingConfiguration</a> for the specified web ACL.</p>
    public let loggingConfiguration: Wafv2ClientTypes.LoggingConfiguration?

    public init (
        loggingConfiguration: Wafv2ClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

struct GetLoggingConfigurationOutputResponseBody: Swift.Equatable {
    public let loggingConfiguration: Wafv2ClientTypes.LoggingConfiguration?
}

extension GetLoggingConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

public struct GetPermissionPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPermissionPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPermissionPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPermissionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPermissionPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPermissionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPermissionPolicyOutputError>
}

extension GetPermissionPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPermissionPolicyInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension GetPermissionPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct GetPermissionPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPermissionPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPermissionPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPermissionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPermissionPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPermissionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPermissionPolicyOutputError>
}

public struct GetPermissionPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPermissionPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPermissionPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPermissionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPermissionPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPermissionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPermissionPolicyOutputError>
}

public struct GetPermissionPolicyInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the rule group for which you want to get the policy.</p>
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetPermissionPolicyInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
}

extension GetPermissionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetPermissionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPermissionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPermissionPolicyOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPermissionPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPermissionPolicyOutputResponse(policy: \(Swift.String(describing: policy)))"}
}

extension GetPermissionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPermissionPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct GetPermissionPolicyOutputResponse: Swift.Equatable {
    /// <p>The IAM policy that is attached to the specified rule group.</p>
    public let policy: Swift.String?

    public init (
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

struct GetPermissionPolicyOutputResponseBody: Swift.Equatable {
    public let policy: Swift.String?
}

extension GetPermissionPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

public struct GetRateBasedStatementManagedKeysInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRateBasedStatementManagedKeysInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRateBasedStatementManagedKeysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRateBasedStatementManagedKeysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRateBasedStatementManagedKeysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRateBasedStatementManagedKeysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRateBasedStatementManagedKeysOutputError>
}

extension GetRateBasedStatementManagedKeysInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRateBasedStatementManagedKeysInput(ruleName: \(Swift.String(describing: ruleName)), scope: \(Swift.String(describing: scope)), webACLId: \(Swift.String(describing: webACLId)), webACLName: \(Swift.String(describing: webACLName)))"}
}

extension GetRateBasedStatementManagedKeysInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleName = "RuleName"
        case scope = "Scope"
        case webACLId = "WebACLId"
        case webACLName = "WebACLName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleName = ruleName {
            try encodeContainer.encode(ruleName, forKey: .ruleName)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let webACLId = webACLId {
            try encodeContainer.encode(webACLId, forKey: .webACLId)
        }
        if let webACLName = webACLName {
            try encodeContainer.encode(webACLName, forKey: .webACLName)
        }
    }
}

public struct GetRateBasedStatementManagedKeysInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRateBasedStatementManagedKeysInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRateBasedStatementManagedKeysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRateBasedStatementManagedKeysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRateBasedStatementManagedKeysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRateBasedStatementManagedKeysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRateBasedStatementManagedKeysOutputError>
}

public struct GetRateBasedStatementManagedKeysInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRateBasedStatementManagedKeysInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRateBasedStatementManagedKeysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRateBasedStatementManagedKeysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRateBasedStatementManagedKeysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRateBasedStatementManagedKeysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRateBasedStatementManagedKeysOutputError>
}

public struct GetRateBasedStatementManagedKeysInput: Swift.Equatable {
    /// <p>The name of the rate-based rule to get the keys for.</p>
    public let ruleName: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?
    /// <p>The unique identifier for the Web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let webACLId: Swift.String?
    /// <p>The name of the Web ACL. You cannot change the name of a Web ACL after you create it.</p>
    public let webACLName: Swift.String?

    public init (
        ruleName: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil,
        webACLId: Swift.String? = nil,
        webACLName: Swift.String? = nil
    )
    {
        self.ruleName = ruleName
        self.scope = scope
        self.webACLId = webACLId
        self.webACLName = webACLName
    }
}

struct GetRateBasedStatementManagedKeysInputBody: Swift.Equatable {
    public let scope: Wafv2ClientTypes.Scope?
    public let webACLName: Swift.String?
    public let webACLId: Swift.String?
    public let ruleName: Swift.String?
}

extension GetRateBasedStatementManagedKeysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleName = "RuleName"
        case scope = "Scope"
        case webACLId = "WebACLId"
        case webACLName = "WebACLName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let webACLNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLName)
        webACLName = webACLNameDecoded
        let webACLIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLId)
        webACLId = webACLIdDecoded
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
    }
}

extension GetRateBasedStatementManagedKeysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRateBasedStatementManagedKeysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRateBasedStatementManagedKeysOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRateBasedStatementManagedKeysOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRateBasedStatementManagedKeysOutputResponse(managedKeysIPV4: \(Swift.String(describing: managedKeysIPV4)), managedKeysIPV6: \(Swift.String(describing: managedKeysIPV6)))"}
}

extension GetRateBasedStatementManagedKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRateBasedStatementManagedKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.managedKeysIPV4 = output.managedKeysIPV4
            self.managedKeysIPV6 = output.managedKeysIPV6
        } else {
            self.managedKeysIPV4 = nil
            self.managedKeysIPV6 = nil
        }
    }
}

public struct GetRateBasedStatementManagedKeysOutputResponse: Swift.Equatable {
    /// <p>The keys that are of Internet Protocol version 4 (IPv4). </p>
    public let managedKeysIPV4: Wafv2ClientTypes.RateBasedStatementManagedKeysIPSet?
    /// <p>The keys that are of Internet Protocol version 6 (IPv6). </p>
    public let managedKeysIPV6: Wafv2ClientTypes.RateBasedStatementManagedKeysIPSet?

    public init (
        managedKeysIPV4: Wafv2ClientTypes.RateBasedStatementManagedKeysIPSet? = nil,
        managedKeysIPV6: Wafv2ClientTypes.RateBasedStatementManagedKeysIPSet? = nil
    )
    {
        self.managedKeysIPV4 = managedKeysIPV4
        self.managedKeysIPV6 = managedKeysIPV6
    }
}

struct GetRateBasedStatementManagedKeysOutputResponseBody: Swift.Equatable {
    public let managedKeysIPV4: Wafv2ClientTypes.RateBasedStatementManagedKeysIPSet?
    public let managedKeysIPV6: Wafv2ClientTypes.RateBasedStatementManagedKeysIPSet?
}

extension GetRateBasedStatementManagedKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedKeysIPV4 = "ManagedKeysIPV4"
        case managedKeysIPV6 = "ManagedKeysIPV6"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let managedKeysIPV4Decoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RateBasedStatementManagedKeysIPSet.self, forKey: .managedKeysIPV4)
        managedKeysIPV4 = managedKeysIPV4Decoded
        let managedKeysIPV6Decoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RateBasedStatementManagedKeysIPSet.self, forKey: .managedKeysIPV6)
        managedKeysIPV6 = managedKeysIPV6Decoded
    }
}

public struct GetRegexPatternSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRegexPatternSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRegexPatternSetOutputError>
}

extension GetRegexPatternSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRegexPatternSetInput(id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), scope: \(Swift.String(describing: scope)))"}
}

extension GetRegexPatternSetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct GetRegexPatternSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRegexPatternSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRegexPatternSetOutputError>
}

public struct GetRegexPatternSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRegexPatternSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRegexPatternSetOutputError>
}

public struct GetRegexPatternSetInput: Swift.Equatable {
    /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>The name of the set. You cannot change the name after you create the set.</p>
    public let name: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

struct GetRegexPatternSetInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
}

extension GetRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension GetRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRegexPatternSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRegexPatternSetOutputResponse(lockToken: \(Swift.String(describing: lockToken)), regexPatternSet: \(Swift.String(describing: regexPatternSet)))"}
}

extension GetRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRegexPatternSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lockToken = output.lockToken
            self.regexPatternSet = output.regexPatternSet
        } else {
            self.lockToken = nil
            self.regexPatternSet = nil
        }
    }
}

public struct GetRegexPatternSetOutputResponse: Swift.Equatable {
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?
    /// <p></p>
    public let regexPatternSet: Wafv2ClientTypes.RegexPatternSet?

    public init (
        lockToken: Swift.String? = nil,
        regexPatternSet: Wafv2ClientTypes.RegexPatternSet? = nil
    )
    {
        self.lockToken = lockToken
        self.regexPatternSet = regexPatternSet
    }
}

struct GetRegexPatternSetOutputResponseBody: Swift.Equatable {
    public let regexPatternSet: Wafv2ClientTypes.RegexPatternSet?
    public let lockToken: Swift.String?
}

extension GetRegexPatternSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lockToken = "LockToken"
        case regexPatternSet = "RegexPatternSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexPatternSetDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RegexPatternSet.self, forKey: .regexPatternSet)
        regexPatternSet = regexPatternSetDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

public struct GetRuleGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRuleGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRuleGroupOutputError>
}

extension GetRuleGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRuleGroupInput(id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), scope: \(Swift.String(describing: scope)))"}
}

extension GetRuleGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct GetRuleGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRuleGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRuleGroupOutputError>
}

public struct GetRuleGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRuleGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRuleGroupOutputError>
}

public struct GetRuleGroupInput: Swift.Equatable {
    /// <p>A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
    public let name: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

struct GetRuleGroupInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
}

extension GetRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension GetRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRuleGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRuleGroupOutputResponse(lockToken: \(Swift.String(describing: lockToken)), ruleGroup: \(Swift.String(describing: ruleGroup)))"}
}

extension GetRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lockToken = output.lockToken
            self.ruleGroup = output.ruleGroup
        } else {
            self.lockToken = nil
            self.ruleGroup = nil
        }
    }
}

public struct GetRuleGroupOutputResponse: Swift.Equatable {
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?
    /// <p></p>
    public let ruleGroup: Wafv2ClientTypes.RuleGroup?

    public init (
        lockToken: Swift.String? = nil,
        ruleGroup: Wafv2ClientTypes.RuleGroup? = nil
    )
    {
        self.lockToken = lockToken
        self.ruleGroup = ruleGroup
    }
}

struct GetRuleGroupOutputResponseBody: Swift.Equatable {
    public let ruleGroup: Wafv2ClientTypes.RuleGroup?
    public let lockToken: Swift.String?
}

extension GetRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lockToken = "LockToken"
        case ruleGroup = "RuleGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RuleGroup.self, forKey: .ruleGroup)
        ruleGroup = ruleGroupDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

public struct GetSampledRequestsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSampledRequestsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSampledRequestsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSampledRequestsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSampledRequestsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSampledRequestsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSampledRequestsOutputError>
}

extension GetSampledRequestsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSampledRequestsInput(maxItems: \(Swift.String(describing: maxItems)), ruleMetricName: \(Swift.String(describing: ruleMetricName)), scope: \(Swift.String(describing: scope)), timeWindow: \(Swift.String(describing: timeWindow)), webAclArn: \(Swift.String(describing: webAclArn)))"}
}

extension GetSampledRequestsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxItems = "MaxItems"
        case ruleMetricName = "RuleMetricName"
        case scope = "Scope"
        case timeWindow = "TimeWindow"
        case webAclArn = "WebAclArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxItems != 0 {
            try encodeContainer.encode(maxItems, forKey: .maxItems)
        }
        if let ruleMetricName = ruleMetricName {
            try encodeContainer.encode(ruleMetricName, forKey: .ruleMetricName)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let timeWindow = timeWindow {
            try encodeContainer.encode(timeWindow, forKey: .timeWindow)
        }
        if let webAclArn = webAclArn {
            try encodeContainer.encode(webAclArn, forKey: .webAclArn)
        }
    }
}

public struct GetSampledRequestsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSampledRequestsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSampledRequestsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSampledRequestsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSampledRequestsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSampledRequestsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSampledRequestsOutputError>
}

public struct GetSampledRequestsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSampledRequestsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSampledRequestsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSampledRequestsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSampledRequestsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSampledRequestsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSampledRequestsOutputError>
}

public struct GetSampledRequestsInput: Swift.Equatable {
    /// <p>The number of requests that you want AWS WAF to return from among the first 5,000 requests that your AWS resource received
    ///          during the time range. If your resource received fewer requests than the value of <code>MaxItems</code>, <code>GetSampledRequests</code>
    ///          returns information about all of them. </p>
    public let maxItems: Swift.Int
    /// <p>The metric name assigned to the <code>Rule</code> or <code>RuleGroup</code> for which you want a sample of requests.</p>
    public let ruleMetricName: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?
    /// <p>The start date and time and the end date and time of the range for which you want <code>GetSampledRequests</code> to return a
    ///           sample of requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, <code>Z</code>. For example, <code>"2016-09-27T14:50Z"</code>. You can specify any time range in the previous three hours. If you specify a start time that's earlier than three hours ago, AWS WAF sets it to three hours ago.</p>
    public let timeWindow: Wafv2ClientTypes.TimeWindow?
    /// <p>The Amazon resource name (ARN) of the <code>WebACL</code> for which you want a sample of requests.</p>
    public let webAclArn: Swift.String?

    public init (
        maxItems: Swift.Int = 0,
        ruleMetricName: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil,
        timeWindow: Wafv2ClientTypes.TimeWindow? = nil,
        webAclArn: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.ruleMetricName = ruleMetricName
        self.scope = scope
        self.timeWindow = timeWindow
        self.webAclArn = webAclArn
    }
}

struct GetSampledRequestsInputBody: Swift.Equatable {
    public let webAclArn: Swift.String?
    public let ruleMetricName: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let timeWindow: Wafv2ClientTypes.TimeWindow?
    public let maxItems: Swift.Int
}

extension GetSampledRequestsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxItems = "MaxItems"
        case ruleMetricName = "RuleMetricName"
        case scope = "Scope"
        case timeWindow = "TimeWindow"
        case webAclArn = "WebAclArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webAclArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webAclArn)
        webAclArn = webAclArnDecoded
        let ruleMetricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleMetricName)
        ruleMetricName = ruleMetricNameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let timeWindowDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.TimeWindow.self, forKey: .timeWindow)
        timeWindow = timeWindowDecoded
        let maxItemsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension GetSampledRequestsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSampledRequestsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSampledRequestsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSampledRequestsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSampledRequestsOutputResponse(populationSize: \(Swift.String(describing: populationSize)), sampledRequests: \(Swift.String(describing: sampledRequests)), timeWindow: \(Swift.String(describing: timeWindow)))"}
}

extension GetSampledRequestsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSampledRequestsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.populationSize = output.populationSize
            self.sampledRequests = output.sampledRequests
            self.timeWindow = output.timeWindow
        } else {
            self.populationSize = 0
            self.sampledRequests = nil
            self.timeWindow = nil
        }
    }
}

public struct GetSampledRequestsOutputResponse: Swift.Equatable {
    /// <p>The total number of requests from which <code>GetSampledRequests</code> got a sample of <code>MaxItems</code> requests.
    ///          If <code>PopulationSize</code> is less than <code>MaxItems</code>, the sample includes every request that your AWS resource
    ///          received during the specified time range.</p>
    public let populationSize: Swift.Int
    /// <p>A complex type that contains detailed information about each of the requests in the sample.</p>
    public let sampledRequests: [Wafv2ClientTypes.SampledHTTPRequest]?
    /// <p>Usually, <code>TimeWindow</code> is the time range that you specified in the <code>GetSampledRequests</code> request.
    ///             However, if your AWS resource received more than 5,000 requests during the time range that you specified in the request,
    ///          <code>GetSampledRequests</code> returns the time range for the first 5,000 requests. Times are in Coordinated Universal Time (UTC) format.</p>
    public let timeWindow: Wafv2ClientTypes.TimeWindow?

    public init (
        populationSize: Swift.Int = 0,
        sampledRequests: [Wafv2ClientTypes.SampledHTTPRequest]? = nil,
        timeWindow: Wafv2ClientTypes.TimeWindow? = nil
    )
    {
        self.populationSize = populationSize
        self.sampledRequests = sampledRequests
        self.timeWindow = timeWindow
    }
}

struct GetSampledRequestsOutputResponseBody: Swift.Equatable {
    public let sampledRequests: [Wafv2ClientTypes.SampledHTTPRequest]?
    public let populationSize: Swift.Int
    public let timeWindow: Wafv2ClientTypes.TimeWindow?
}

extension GetSampledRequestsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case populationSize = "PopulationSize"
        case sampledRequests = "SampledRequests"
        case timeWindow = "TimeWindow"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sampledRequestsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.SampledHTTPRequest?].self, forKey: .sampledRequests)
        var sampledRequestsDecoded0:[Wafv2ClientTypes.SampledHTTPRequest]? = nil
        if let sampledRequestsContainer = sampledRequestsContainer {
            sampledRequestsDecoded0 = [Wafv2ClientTypes.SampledHTTPRequest]()
            for structure0 in sampledRequestsContainer {
                if let structure0 = structure0 {
                    sampledRequestsDecoded0?.append(structure0)
                }
            }
        }
        sampledRequests = sampledRequestsDecoded0
        let populationSizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .populationSize)
        populationSize = populationSizeDecoded
        let timeWindowDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.TimeWindow.self, forKey: .timeWindow)
        timeWindow = timeWindowDecoded
    }
}

public struct GetWebACLForResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetWebACLForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetWebACLForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetWebACLForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetWebACLForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetWebACLForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetWebACLForResourceOutputError>
}

extension GetWebACLForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetWebACLForResourceInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension GetWebACLForResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct GetWebACLForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetWebACLForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetWebACLForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetWebACLForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetWebACLForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetWebACLForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetWebACLForResourceOutputError>
}

public struct GetWebACLForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetWebACLForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetWebACLForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetWebACLForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetWebACLForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetWebACLForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetWebACLForResourceOutputError>
}

public struct GetWebACLForResourceInput: Swift.Equatable {
    /// <p>The ARN (Amazon Resource Name) of the resource.</p>
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetWebACLForResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
}

extension GetWebACLForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetWebACLForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetWebACLForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetWebACLForResourceOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetWebACLForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetWebACLForResourceOutputResponse(webACL: \(Swift.String(describing: webACL)))"}
}

extension GetWebACLForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetWebACLForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.webACL = output.webACL
        } else {
            self.webACL = nil
        }
    }
}

public struct GetWebACLForResourceOutputResponse: Swift.Equatable {
    /// <p>The Web ACL that is associated with the resource. If there is no associated resource, AWS WAF returns a null Web ACL.</p>
    public let webACL: Wafv2ClientTypes.WebACL?

    public init (
        webACL: Wafv2ClientTypes.WebACL? = nil
    )
    {
        self.webACL = webACL
    }
}

struct GetWebACLForResourceOutputResponseBody: Swift.Equatable {
    public let webACL: Wafv2ClientTypes.WebACL?
}

extension GetWebACLForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webACL = "WebACL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.WebACL.self, forKey: .webACL)
        webACL = webACLDecoded
    }
}

public struct GetWebACLInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetWebACLInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetWebACLOutputError>
}

extension GetWebACLInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetWebACLInput(id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), scope: \(Swift.String(describing: scope)))"}
}

extension GetWebACLInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct GetWebACLInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetWebACLInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetWebACLOutputError>
}

public struct GetWebACLInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetWebACLInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetWebACLOutputError>
}

public struct GetWebACLInput: Swift.Equatable {
    /// <p>The unique identifier for the Web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>The name of the Web ACL. You cannot change the name of a Web ACL after you create it.</p>
    public let name: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

struct GetWebACLInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
}

extension GetWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension GetWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetWebACLOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetWebACLOutputResponse(lockToken: \(Swift.String(describing: lockToken)), webACL: \(Swift.String(describing: webACL)))"}
}

extension GetWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lockToken = output.lockToken
            self.webACL = output.webACL
        } else {
            self.lockToken = nil
            self.webACL = nil
        }
    }
}

public struct GetWebACLOutputResponse: Swift.Equatable {
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?
    /// <p>The Web ACL specification. You can modify the settings in this Web ACL and use it to update this Web ACL or create a new one.</p>
    public let webACL: Wafv2ClientTypes.WebACL?

    public init (
        lockToken: Swift.String? = nil,
        webACL: Wafv2ClientTypes.WebACL? = nil
    )
    {
        self.lockToken = lockToken
        self.webACL = webACL
    }
}

struct GetWebACLOutputResponseBody: Swift.Equatable {
    public let webACL: Wafv2ClientTypes.WebACL?
    public let lockToken: Swift.String?
}

extension GetWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lockToken = "LockToken"
        case webACL = "WebACL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.WebACL.self, forKey: .webACL)
        webACL = webACLDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension Wafv2ClientTypes.HTTPHeader: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Wafv2ClientTypes.HTTPHeader: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HTTPHeader(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension Wafv2ClientTypes {
    /// <p>Part of the response from <a>GetSampledRequests</a>. This is a complex type that
    ///          appears as <code>Headers</code> in the response syntax. <code>HTTPHeader</code> contains the names and values of
    ///          all of the headers that appear in one of the web requests. </p>
    public struct HTTPHeader: Swift.Equatable {
        /// <p>The name of the HTTP header.</p>
        public let name: Swift.String?
        /// <p>The value of the HTTP header.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension Wafv2ClientTypes.HTTPRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientIP = "ClientIP"
        case country = "Country"
        case hTTPVersion = "HTTPVersion"
        case headers = "Headers"
        case method = "Method"
        case uRI = "URI"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientIP = clientIP {
            try encodeContainer.encode(clientIP, forKey: .clientIP)
        }
        if let country = country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let hTTPVersion = hTTPVersion {
            try encodeContainer.encode(hTTPVersion, forKey: .hTTPVersion)
        }
        if let headers = headers {
            var headersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headers)
            for httpheaders0 in headers {
                try headersContainer.encode(httpheaders0)
            }
        }
        if let method = method {
            try encodeContainer.encode(method, forKey: .method)
        }
        if let uRI = uRI {
            try encodeContainer.encode(uRI, forKey: .uRI)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIPDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientIP)
        clientIP = clientIPDecoded
        let countryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .country)
        country = countryDecoded
        let uRIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uRI)
        uRI = uRIDecoded
        let methodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .method)
        method = methodDecoded
        let hTTPVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hTTPVersion)
        hTTPVersion = hTTPVersionDecoded
        let headersContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.HTTPHeader?].self, forKey: .headers)
        var headersDecoded0:[Wafv2ClientTypes.HTTPHeader]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [Wafv2ClientTypes.HTTPHeader]()
            for structure0 in headersContainer {
                if let structure0 = structure0 {
                    headersDecoded0?.append(structure0)
                }
            }
        }
        headers = headersDecoded0
    }
}

extension Wafv2ClientTypes.HTTPRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HTTPRequest(clientIP: \(Swift.String(describing: clientIP)), country: \(Swift.String(describing: country)), hTTPVersion: \(Swift.String(describing: hTTPVersion)), headers: \(Swift.String(describing: headers)), method: \(Swift.String(describing: method)), uRI: \(Swift.String(describing: uRI)))"}
}

extension Wafv2ClientTypes {
    /// <p>Part of the response from <a>GetSampledRequests</a>.  This is a complex type that
    ///          appears as <code>Request</code> in the response syntax. <code>HTTPRequest</code> contains information about
    ///          one of the web requests. </p>
    public struct HTTPRequest: Swift.Equatable {
        /// <p>The IP address that the request originated from. If the web ACL is associated with a CloudFront distribution,
        ///          this is the value of one of the following fields in CloudFront access logs:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>c-ip</code>, if the viewer did not use an HTTP proxy or a load balancer to send the request</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>x-forwarded-for</code>, if the viewer did use an HTTP proxy or a load balancer to send the request</p>
        ///             </li>
        ///          </ul>
        public let clientIP: Swift.String?
        /// <p>The two-letter country code for the country that the request originated from. For a current list of country codes,
        ///          see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>.</p>
        public let country: Swift.String?
        /// <p>The HTTP version specified in the sampled web request, for example, <code>HTTP/1.1</code>.</p>
        public let hTTPVersion: Swift.String?
        /// <p>A complex type that contains the name and value for each header in the sampled web request.</p>
        public let headers: [Wafv2ClientTypes.HTTPHeader]?
        /// <p>The HTTP method specified in the sampled web request. </p>
        public let method: Swift.String?
        /// <p>The URI path of the request, which identifies the resource, for example, <code>/images/daily-ad.jpg</code>.</p>
        public let uRI: Swift.String?

        public init (
            clientIP: Swift.String? = nil,
            country: Swift.String? = nil,
            hTTPVersion: Swift.String? = nil,
            headers: [Wafv2ClientTypes.HTTPHeader]? = nil,
            method: Swift.String? = nil,
            uRI: Swift.String? = nil
        )
        {
            self.clientIP = clientIP
            self.country = country
            self.hTTPVersion = hTTPVersion
            self.headers = headers
            self.method = method
            self.uRI = uRI
        }
    }

}

extension Wafv2ClientTypes {
    public enum IPAddressVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [IPAddressVersion] {
            return [
                .ipv4,
                .ipv6,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ipv4: return "IPV4"
            case .ipv6: return "IPV6"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IPAddressVersion(rawValue: rawValue) ?? IPAddressVersion.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.IPSet: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case addresses = "Addresses"
        case description = "Description"
        case iPAddressVersion = "IPAddressVersion"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addresses)
            for ipaddresses0 in addresses {
                try addressesContainer.encode(ipaddresses0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let iPAddressVersion = iPAddressVersion {
            try encodeContainer.encode(iPAddressVersion.rawValue, forKey: .iPAddressVersion)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let iPAddressVersionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.IPAddressVersion.self, forKey: .iPAddressVersion)
        iPAddressVersion = iPAddressVersionDecoded
        let addressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addresses)
        var addressesDecoded0:[Swift.String]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [Swift.String]()
            for string0 in addressesContainer {
                if let string0 = string0 {
                    addressesDecoded0?.append(string0)
                }
            }
        }
        addresses = addressesDecoded0
    }
}

extension Wafv2ClientTypes.IPSet: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IPSet(aRN: \(Swift.String(describing: aRN)), addresses: \(Swift.String(describing: addresses)), description: \(Swift.String(describing: description)), iPAddressVersion: \(Swift.String(describing: iPAddressVersion)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)))"}
}

extension Wafv2ClientTypes {
    /// <p>Contains one or more IP addresses or blocks of IP addresses specified in Classless Inter-Domain Routing (CIDR) notation. AWS WAF supports all IPv4 and IPv6 CIDR ranges except for /0. For information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless
    ///             Inter-Domain Routing</a>. </p>
    ///          <p>AWS WAF assigns an ARN to each <code>IPSet</code> that you create. To use an IP set in a rule, you provide the ARN to the <a>Rule</a> statement <a>IPSetReferenceStatement</a>. </p>
    public struct IPSet: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the entity.</p>
        public let aRN: Swift.String?
        /// <p>Contains an array of strings that specify one or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. AWS WAF supports all IPv4 and IPv6 CIDR ranges except for /0. </p>
        ///          <p>Examples: </p>
        ///          <ul>
        ///             <li>
        ///                <p>To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify <code>192.0.2.44/32</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify
        ///                <code>192.0.2.0/24</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify <code>1111:0000:0000:0000:0000:0000:0000:0111/128</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify <code>1111:0000:0000:0000:0000:0000:0000:0000/64</code>.</p>
        ///             </li>
        ///          </ul>
        ///          <p>For more information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless
        ///          Inter-Domain Routing</a>.</p>
        public let addresses: [Swift.String]?
        /// <p>A description of the IP set that helps with identification. </p>
        public let description: Swift.String?
        /// <p>Specify IPV4 or IPV6. </p>
        public let iPAddressVersion: Wafv2ClientTypes.IPAddressVersion?
        /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
        public let id: Swift.String?
        /// <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
        public let name: Swift.String?

        public init (
            aRN: Swift.String? = nil,
            addresses: [Swift.String]? = nil,
            description: Swift.String? = nil,
            iPAddressVersion: Wafv2ClientTypes.IPAddressVersion? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.aRN = aRN
            self.addresses = addresses
            self.description = description
            self.iPAddressVersion = iPAddressVersion
            self.id = id
            self.name = name
        }
    }

}

extension Wafv2ClientTypes.IPSetForwardedIPConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fallbackBehavior = "FallbackBehavior"
        case headerName = "HeaderName"
        case position = "Position"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fallbackBehavior = fallbackBehavior {
            try encodeContainer.encode(fallbackBehavior.rawValue, forKey: .fallbackBehavior)
        }
        if let headerName = headerName {
            try encodeContainer.encode(headerName, forKey: .headerName)
        }
        if let position = position {
            try encodeContainer.encode(position.rawValue, forKey: .position)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let headerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .headerName)
        headerName = headerNameDecoded
        let fallbackBehaviorDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FallbackBehavior.self, forKey: .fallbackBehavior)
        fallbackBehavior = fallbackBehaviorDecoded
        let positionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ForwardedIPPosition.self, forKey: .position)
        position = positionDecoded
    }
}

extension Wafv2ClientTypes.IPSetForwardedIPConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IPSetForwardedIPConfig(fallbackBehavior: \(Swift.String(describing: fallbackBehavior)), headerName: \(Swift.String(describing: headerName)), position: \(Swift.String(describing: position)))"}
}

extension Wafv2ClientTypes {
    /// <p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p>
    ///
    ///          <note>
    ///             <p>If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.</p>
    ///          </note>
    ///
    ///
    ///          <p>This configuration is used only for <a>IPSetReferenceStatement</a>. For <a>GeoMatchStatement</a> and <a>RateBasedStatement</a>, use <a>ForwardedIPConfig</a> instead.  </p>
    public struct IPSetForwardedIPConfig: Swift.Equatable {
        /// <p>The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.</p>
        ///
        ///          <note>
        ///             <p>If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.</p>
        ///          </note>
        ///
        ///          <p>You can specify the following fallback behaviors:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>MATCH</code> - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p>
        ///             </li>
        ///          </ul>
        public let fallbackBehavior: Wafv2ClientTypes.FallbackBehavior?
        /// <p>The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to <code>X-Forwarded-For</code>.</p>
        ///
        ///          <note>
        ///             <p>If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.</p>
        ///          </note>
        public let headerName: Swift.String?
        /// <p>The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be <code>10.1.1.1, 127.0.0.0, 10.10.10.10</code> where the first IP address identifies the original client and the rest identify proxies that the request went through. </p>
        ///          <p>The options for this setting are the following: </p>
        ///          <ul>
        ///             <li>
        ///                <p>FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP.</p>
        ///             </li>
        ///             <li>
        ///                <p>LAST - Inspect the last IP address in the list of IP addresses in the header.</p>
        ///             </li>
        ///             <li>
        ///                <p>ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, AWS WAF inspects the last 10.</p>
        ///             </li>
        ///          </ul>
        public let position: Wafv2ClientTypes.ForwardedIPPosition?

        public init (
            fallbackBehavior: Wafv2ClientTypes.FallbackBehavior? = nil,
            headerName: Swift.String? = nil,
            position: Wafv2ClientTypes.ForwardedIPPosition? = nil
        )
        {
            self.fallbackBehavior = fallbackBehavior
            self.headerName = headerName
            self.position = position
        }
    }

}

extension Wafv2ClientTypes.IPSetReferenceStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case iPSetForwardedIPConfig = "IPSetForwardedIPConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let iPSetForwardedIPConfig = iPSetForwardedIPConfig {
            try encodeContainer.encode(iPSetForwardedIPConfig, forKey: .iPSetForwardedIPConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let iPSetForwardedIPConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.IPSetForwardedIPConfig.self, forKey: .iPSetForwardedIPConfig)
        iPSetForwardedIPConfig = iPSetForwardedIPConfigDecoded
    }
}

extension Wafv2ClientTypes.IPSetReferenceStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IPSetReferenceStatement(aRN: \(Swift.String(describing: aRN)), iPSetForwardedIPConfig: \(Swift.String(describing: iPSetForwardedIPConfig)))"}
}

extension Wafv2ClientTypes {
    /// <p>A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an <a>IPSet</a> that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see <a>CreateIPSet</a>.</p>
    ///          <p>Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.</p>
    public struct IPSetReferenceStatement: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the <a>IPSet</a> that this statement references.</p>
        public let aRN: Swift.String?
        /// <p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p>
        ///
        ///          <note>
        ///             <p>If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.</p>
        ///          </note>
        public let iPSetForwardedIPConfig: Wafv2ClientTypes.IPSetForwardedIPConfig?

        public init (
            aRN: Swift.String? = nil,
            iPSetForwardedIPConfig: Wafv2ClientTypes.IPSetForwardedIPConfig? = nil
        )
        {
            self.aRN = aRN
            self.iPSetForwardedIPConfig = iPSetForwardedIPConfig
        }
    }

}

extension Wafv2ClientTypes.IPSetSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension Wafv2ClientTypes.IPSetSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IPSetSummary(aRN: \(Swift.String(describing: aRN)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)))"}
}

extension Wafv2ClientTypes {
    /// <p>High-level information about an <a>IPSet</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage an <code>IPSet</code>, and the ARN, that you provide to the <a>IPSetReferenceStatement</a> to use the address set in a <a>Rule</a>.</p>
    public struct IPSetSummary: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the entity.</p>
        public let aRN: Swift.String?
        /// <p>A description of the IP set that helps with identification. </p>
        public let description: Swift.String?
        /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
        public let id: Swift.String?
        /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
        public let lockToken: Swift.String?
        /// <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
        public let name: Swift.String?

        public init (
            aRN: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.aRN = aRN
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

extension Wafv2ClientTypes.JsonBody: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invalidFallbackBehavior = "InvalidFallbackBehavior"
        case matchPattern = "MatchPattern"
        case matchScope = "MatchScope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invalidFallbackBehavior = invalidFallbackBehavior {
            try encodeContainer.encode(invalidFallbackBehavior.rawValue, forKey: .invalidFallbackBehavior)
        }
        if let matchPattern = matchPattern {
            try encodeContainer.encode(matchPattern, forKey: .matchPattern)
        }
        if let matchScope = matchScope {
            try encodeContainer.encode(matchScope.rawValue, forKey: .matchScope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchPatternDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.JsonMatchPattern.self, forKey: .matchPattern)
        matchPattern = matchPatternDecoded
        let matchScopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.JsonMatchScope.self, forKey: .matchScope)
        matchScope = matchScopeDecoded
        let invalidFallbackBehaviorDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.BodyParsingFallbackBehavior.self, forKey: .invalidFallbackBehavior)
        invalidFallbackBehavior = invalidFallbackBehaviorDecoded
    }
}

extension Wafv2ClientTypes.JsonBody: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JsonBody(invalidFallbackBehavior: \(Swift.String(describing: invalidFallbackBehavior)), matchPattern: \(Swift.String(describing: matchPattern)), matchScope: \(Swift.String(describing: matchScope)))"}
}

extension Wafv2ClientTypes {
    /// <p>The body of a web request, inspected as JSON. The body immediately follows the request headers. This is used in the <a>FieldToMatch</a> specification.</p>
    ///          <p>Use the specifications in this object to indicate which parts of the JSON body to inspect using the rule's inspection criteria. AWS WAF inspects only the parts of the JSON that result from the matches that you indicate.  </p>
    public struct JsonBody: Swift.Equatable {
        /// <p>What AWS WAF should do if it fails to completely parse the JSON body. The options are the following:</p>
        ///           <ul>
        ///             <li>
        ///           		   <p>
        ///                   <code>EVALUATE_AS_STRING</code> - Inspect the body as
        ///           			plain text. AWS WAF applies the text transformations and
        ///           			inspection criteria that you defined for the JSON inspection to
        ///           			the body text string.</p>
        ///           	</li>
        ///             <li>
        ///           		   <p>
        ///                   <code>MATCH</code> - Treat the web request as matching
        ///           			the rule statement. AWS WAF applies the rule action to the
        ///           			request.</p>
        ///           	</li>
        ///             <li>
        ///           		   <p>
        ///                   <code>NO_MATCH</code> - Treat the web request as not
        ///           			matching the rule statement.</p>
        ///           	</li>
        ///          </ul>
        ///           <p>If you don't provide this setting, AWS WAF parses and evaluates the content only up to the first parsing failure that it encounters. </p>
        ///           <p>AWS WAF does its best to parse the entire JSON body, but might be forced
        ///           	to stop for reasons such as invalid characters, duplicate keys,
        ///           	truncation, and any content whose root node isn't an object or an array. </p>
        ///           <p>AWS WAF parses the JSON in the following examples as two valid key,
        ///           	value pairs: </p>
        ///           <ul>
        ///             <li>
        ///           		   <p>Missing comma:
        ///           			<code>{"key1":"value1""key2":"value2"}</code>
        ///                </p>
        ///           	</li>
        ///             <li>
        ///           		   <p>Missing colon:
        ///           			<code>{"key1":"value1","key2""value2"}</code>
        ///                </p>
        ///           	</li>
        ///             <li>
        ///           		   <p>Extra colons:
        ///           			<code>{"key1"::"value1","key2""value2"}</code>
        ///                </p>
        ///           	</li>
        ///          </ul>
        public let invalidFallbackBehavior: Wafv2ClientTypes.BodyParsingFallbackBehavior?
        /// <p>The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria. </p>
        public let matchPattern: Wafv2ClientTypes.JsonMatchPattern?
        /// <p>The parts of the JSON to match against using the <code>MatchPattern</code>. If you specify <code>All</code>, AWS WAF matches against keys and values. </p>
        public let matchScope: Wafv2ClientTypes.JsonMatchScope?

        public init (
            invalidFallbackBehavior: Wafv2ClientTypes.BodyParsingFallbackBehavior? = nil,
            matchPattern: Wafv2ClientTypes.JsonMatchPattern? = nil,
            matchScope: Wafv2ClientTypes.JsonMatchScope? = nil
        )
        {
            self.invalidFallbackBehavior = invalidFallbackBehavior
            self.matchPattern = matchPattern
            self.matchScope = matchScope
        }
    }

}

extension Wafv2ClientTypes.JsonMatchPattern: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case all = "All"
        case includedPaths = "IncludedPaths"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let all = all {
            try encodeContainer.encode(all, forKey: .all)
        }
        if let includedPaths = includedPaths {
            var includedPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includedPaths)
            for jsonpointerpaths0 in includedPaths {
                try includedPathsContainer.encode(jsonpointerpaths0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.All.self, forKey: .all)
        all = allDecoded
        let includedPathsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includedPaths)
        var includedPathsDecoded0:[Swift.String]? = nil
        if let includedPathsContainer = includedPathsContainer {
            includedPathsDecoded0 = [Swift.String]()
            for string0 in includedPathsContainer {
                if let string0 = string0 {
                    includedPathsDecoded0?.append(string0)
                }
            }
        }
        includedPaths = includedPathsDecoded0
    }
}

extension Wafv2ClientTypes.JsonMatchPattern: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JsonMatchPattern(all: \(Swift.String(describing: all)), includedPaths: \(Swift.String(describing: includedPaths)))"}
}

extension Wafv2ClientTypes {
    /// <p>The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria. This is used with the <a>FieldToMatch</a> option <code>JsonBody</code>. </p>
    public struct JsonMatchPattern: Swift.Equatable {
        /// <p>Match all of the elements. See also <code>MatchScope</code> in <a>JsonBody</a>. </p>
        ///         <p>You must specify either this setting or the <code>IncludedPaths</code> setting, but not both.</p>
        public let all: Wafv2ClientTypes.All?
        /// <p>Match only the specified include paths. See also <code>MatchScope</code> in <a>JsonBody</a>. </p>
        ///          <p>Provide the include paths using JSON Pointer syntax. For example, <code>"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]</code>. For information about this syntax, see the Internet Engineering Task Force (IETF) documentation
        ///        <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p>
        ///          <p>You must specify either this setting or the <code>All</code> setting, but not both.</p>
        ///          <note>
        ///             <p>Don't use this option to include all paths. Instead, use the <code>All</code> setting. </p>
        ///          </note>
        public let includedPaths: [Swift.String]?

        public init (
            all: Wafv2ClientTypes.All? = nil,
            includedPaths: [Swift.String]? = nil
        )
        {
            self.all = all
            self.includedPaths = includedPaths
        }
    }

}

extension Wafv2ClientTypes {
    public enum JsonMatchScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case key
        case value
        case sdkUnknown(Swift.String)

        public static var allCases: [JsonMatchScope] {
            return [
                .all,
                .key,
                .value,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .key: return "KEY"
            case .value: return "VALUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JsonMatchScope(rawValue: rawValue) ?? JsonMatchScope.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.Label: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension Wafv2ClientTypes.Label: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Label(name: \(Swift.String(describing: name)))"}
}

extension Wafv2ClientTypes {
    /// <p>A single label container. This is used as an element of a label array in multiple contexts, for example, in <code>RuleLabels</code> inside a <a>Rule</a> and in <code>Labels</code> inside a <a>SampledHTTPRequest</a>. </p>
    public struct Label: Swift.Equatable {
        /// <p>The label string. </p>
        public let name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension Wafv2ClientTypes {
    public enum LabelMatchScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case label
        case namespace
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelMatchScope] {
            return [
                .label,
                .namespace,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .label: return "LABEL"
            case .namespace: return "NAMESPACE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LabelMatchScope(rawValue: rawValue) ?? LabelMatchScope.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.LabelMatchStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.LabelMatchScope.self, forKey: .scope)
        scope = scopeDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
    }
}

extension Wafv2ClientTypes.LabelMatchStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LabelMatchStatement(key: \(Swift.String(describing: key)), scope: \(Swift.String(describing: scope)))"}
}

extension Wafv2ClientTypes {
    /// <p>A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. </p>
    ///          <p>The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.  If you do not provide the fully qualified name in your label match string, AWS WAF performs the search for labels that were added in the same context as the label match statement. </p>
    public struct LabelMatchStatement: Swift.Equatable {
        /// <p>The string to match against. The setting you provide for this depends on the match statement's <code>Scope</code> settings: </p>
        ///          <ul>
        ///             <li>
        ///                <p>If the <code>Scope</code> indicates <code>LABEL</code>, then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name. </p>
        ///             </li>
        ///             <li>
        ///                <p>If the <code>Scope</code> indicates <code>NAMESPACE</code>, then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates.</p>
        ///             </li>
        ///          </ul>
        ///          <p>Labels are case sensitive and components of a label must be separated by colon, for example <code>NS1:NS2:name</code>.</p>
        public let key: Swift.String?
        /// <p>Specify whether you want to match using the label name or just the namespace. </p>
        public let scope: Wafv2ClientTypes.LabelMatchScope?

        public init (
            key: Swift.String? = nil,
            scope: Wafv2ClientTypes.LabelMatchScope? = nil
        )
        {
            self.key = key
            self.scope = scope
        }
    }

}

extension Wafv2ClientTypes.LabelNameCondition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelName = "LabelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelName = labelName {
            try encodeContainer.encode(labelName, forKey: .labelName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelName)
        labelName = labelNameDecoded
    }
}

extension Wafv2ClientTypes.LabelNameCondition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LabelNameCondition(labelName: \(Swift.String(describing: labelName)))"}
}

extension Wafv2ClientTypes {
    /// <p>A single label name condition for a <a>Condition</a> in a logging filter.</p>
    public struct LabelNameCondition: Swift.Equatable {
        /// <p>The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.  </p>
        public let labelName: Swift.String?

        public init (
            labelName: Swift.String? = nil
        )
        {
            self.labelName = labelName
        }
    }

}

extension Wafv2ClientTypes.LabelSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension Wafv2ClientTypes.LabelSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LabelSummary(name: \(Swift.String(describing: name)))"}
}

extension Wafv2ClientTypes {
    /// <p>List of labels used by one or more of the rules of a <a>RuleGroup</a>. This summary object is used for the following rule group lists: </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AvailableLabels</code> - Labels that rules add to matching requests. These labels are defined in the <code>RuleLabels</code> for a <a>Rule</a>. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ConsumedLabels</code> - Labels that rules match against. These labels are defined in a <code>LabelMatchStatement</code> specification, in the <a>Statement</a> definition of a rule.  </p>
    ///             </li>
    ///          </ul>
    public struct LabelSummary: Swift.Equatable {
        /// <p>An individual label specification.</p>
        public let name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

public struct ListAvailableManagedRuleGroupsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAvailableManagedRuleGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAvailableManagedRuleGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAvailableManagedRuleGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAvailableManagedRuleGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAvailableManagedRuleGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAvailableManagedRuleGroupsOutputError>
}

extension ListAvailableManagedRuleGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAvailableManagedRuleGroupsInput(limit: \(Swift.String(describing: limit)), nextMarker: \(Swift.String(describing: nextMarker)), scope: \(Swift.String(describing: scope)))"}
}

extension ListAvailableManagedRuleGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct ListAvailableManagedRuleGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAvailableManagedRuleGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAvailableManagedRuleGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAvailableManagedRuleGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAvailableManagedRuleGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAvailableManagedRuleGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAvailableManagedRuleGroupsOutputError>
}

public struct ListAvailableManagedRuleGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAvailableManagedRuleGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAvailableManagedRuleGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAvailableManagedRuleGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAvailableManagedRuleGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAvailableManagedRuleGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAvailableManagedRuleGroupsOutputError>
}

public struct ListAvailableManagedRuleGroupsInput: Swift.Equatable {
    /// <p>The maximum number of objects that you want AWS WAF to return for this request. If more
    ///           objects are available, in the response, AWS WAF provides a
    ///          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
    public let limit: Swift.Int?
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListAvailableManagedRuleGroupsInputBody: Swift.Equatable {
    public let scope: Wafv2ClientTypes.Scope?
    public let nextMarker: Swift.String?
    public let limit: Swift.Int?
}

extension ListAvailableManagedRuleGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListAvailableManagedRuleGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAvailableManagedRuleGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAvailableManagedRuleGroupsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAvailableManagedRuleGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAvailableManagedRuleGroupsOutputResponse(managedRuleGroups: \(Swift.String(describing: managedRuleGroups)), nextMarker: \(Swift.String(describing: nextMarker)))"}
}

extension ListAvailableManagedRuleGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAvailableManagedRuleGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.managedRuleGroups = output.managedRuleGroups
            self.nextMarker = output.nextMarker
        } else {
            self.managedRuleGroups = nil
            self.nextMarker = nil
        }
    }
}

public struct ListAvailableManagedRuleGroupsOutputResponse: Swift.Equatable {
    /// <p></p>
    public let managedRuleGroups: [Wafv2ClientTypes.ManagedRuleGroupSummary]?
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?

    public init (
        managedRuleGroups: [Wafv2ClientTypes.ManagedRuleGroupSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.managedRuleGroups = managedRuleGroups
        self.nextMarker = nextMarker
    }
}

struct ListAvailableManagedRuleGroupsOutputResponseBody: Swift.Equatable {
    public let nextMarker: Swift.String?
    public let managedRuleGroups: [Wafv2ClientTypes.ManagedRuleGroupSummary]?
}

extension ListAvailableManagedRuleGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedRuleGroups = "ManagedRuleGroups"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let managedRuleGroupsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.ManagedRuleGroupSummary?].self, forKey: .managedRuleGroups)
        var managedRuleGroupsDecoded0:[Wafv2ClientTypes.ManagedRuleGroupSummary]? = nil
        if let managedRuleGroupsContainer = managedRuleGroupsContainer {
            managedRuleGroupsDecoded0 = [Wafv2ClientTypes.ManagedRuleGroupSummary]()
            for structure0 in managedRuleGroupsContainer {
                if let structure0 = structure0 {
                    managedRuleGroupsDecoded0?.append(structure0)
                }
            }
        }
        managedRuleGroups = managedRuleGroupsDecoded0
    }
}

public struct ListIPSetsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIPSetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIPSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIPSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIPSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIPSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIPSetsOutputError>
}

extension ListIPSetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIPSetsInput(limit: \(Swift.String(describing: limit)), nextMarker: \(Swift.String(describing: nextMarker)), scope: \(Swift.String(describing: scope)))"}
}

extension ListIPSetsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct ListIPSetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIPSetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIPSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIPSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIPSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIPSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIPSetsOutputError>
}

public struct ListIPSetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIPSetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIPSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIPSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIPSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIPSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIPSetsOutputError>
}

public struct ListIPSetsInput: Swift.Equatable {
    /// <p>The maximum number of objects that you want AWS WAF to return for this request. If more
    ///           objects are available, in the response, AWS WAF provides a
    ///          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
    public let limit: Swift.Int?
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListIPSetsInputBody: Swift.Equatable {
    public let scope: Wafv2ClientTypes.Scope?
    public let nextMarker: Swift.String?
    public let limit: Swift.Int?
}

extension ListIPSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListIPSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListIPSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListIPSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIPSetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIPSetsOutputResponse(iPSets: \(Swift.String(describing: iPSets)), nextMarker: \(Swift.String(describing: nextMarker)))"}
}

extension ListIPSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListIPSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.iPSets = output.iPSets
            self.nextMarker = output.nextMarker
        } else {
            self.iPSets = nil
            self.nextMarker = nil
        }
    }
}

public struct ListIPSetsOutputResponse: Swift.Equatable {
    /// <p>Array of IPSets. This may not be the full list of IPSets that you have defined. See the <code>Limit</code> specification for this request.</p>
    public let iPSets: [Wafv2ClientTypes.IPSetSummary]?
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?

    public init (
        iPSets: [Wafv2ClientTypes.IPSetSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.iPSets = iPSets
        self.nextMarker = nextMarker
    }
}

struct ListIPSetsOutputResponseBody: Swift.Equatable {
    public let nextMarker: Swift.String?
    public let iPSets: [Wafv2ClientTypes.IPSetSummary]?
}

extension ListIPSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iPSets = "IPSets"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let iPSetsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.IPSetSummary?].self, forKey: .iPSets)
        var iPSetsDecoded0:[Wafv2ClientTypes.IPSetSummary]? = nil
        if let iPSetsContainer = iPSetsContainer {
            iPSetsDecoded0 = [Wafv2ClientTypes.IPSetSummary]()
            for structure0 in iPSetsContainer {
                if let structure0 = structure0 {
                    iPSetsDecoded0?.append(structure0)
                }
            }
        }
        iPSets = iPSetsDecoded0
    }
}

public struct ListLoggingConfigurationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLoggingConfigurationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLoggingConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLoggingConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLoggingConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLoggingConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLoggingConfigurationsOutputError>
}

extension ListLoggingConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLoggingConfigurationsInput(limit: \(Swift.String(describing: limit)), nextMarker: \(Swift.String(describing: nextMarker)), scope: \(Swift.String(describing: scope)))"}
}

extension ListLoggingConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct ListLoggingConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLoggingConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLoggingConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLoggingConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLoggingConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLoggingConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLoggingConfigurationsOutputError>
}

public struct ListLoggingConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLoggingConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLoggingConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLoggingConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLoggingConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLoggingConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLoggingConfigurationsOutputError>
}

public struct ListLoggingConfigurationsInput: Swift.Equatable {
    /// <p>The maximum number of objects that you want AWS WAF to return for this request. If more
    ///           objects are available, in the response, AWS WAF provides a
    ///          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
    public let limit: Swift.Int?
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListLoggingConfigurationsInputBody: Swift.Equatable {
    public let scope: Wafv2ClientTypes.Scope?
    public let nextMarker: Swift.String?
    public let limit: Swift.Int?
}

extension ListLoggingConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListLoggingConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLoggingConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListLoggingConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLoggingConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLoggingConfigurationsOutputResponse(loggingConfigurations: \(Swift.String(describing: loggingConfigurations)), nextMarker: \(Swift.String(describing: nextMarker)))"}
}

extension ListLoggingConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListLoggingConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loggingConfigurations = output.loggingConfigurations
            self.nextMarker = output.nextMarker
        } else {
            self.loggingConfigurations = nil
            self.nextMarker = nil
        }
    }
}

public struct ListLoggingConfigurationsOutputResponse: Swift.Equatable {
    /// <p></p>
    public let loggingConfigurations: [Wafv2ClientTypes.LoggingConfiguration]?
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?

    public init (
        loggingConfigurations: [Wafv2ClientTypes.LoggingConfiguration]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.loggingConfigurations = loggingConfigurations
        self.nextMarker = nextMarker
    }
}

struct ListLoggingConfigurationsOutputResponseBody: Swift.Equatable {
    public let loggingConfigurations: [Wafv2ClientTypes.LoggingConfiguration]?
    public let nextMarker: Swift.String?
}

extension ListLoggingConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfigurations = "LoggingConfigurations"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.LoggingConfiguration?].self, forKey: .loggingConfigurations)
        var loggingConfigurationsDecoded0:[Wafv2ClientTypes.LoggingConfiguration]? = nil
        if let loggingConfigurationsContainer = loggingConfigurationsContainer {
            loggingConfigurationsDecoded0 = [Wafv2ClientTypes.LoggingConfiguration]()
            for structure0 in loggingConfigurationsContainer {
                if let structure0 = structure0 {
                    loggingConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        loggingConfigurations = loggingConfigurationsDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

public struct ListRegexPatternSetsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRegexPatternSetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRegexPatternSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRegexPatternSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRegexPatternSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRegexPatternSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRegexPatternSetsOutputError>
}

extension ListRegexPatternSetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRegexPatternSetsInput(limit: \(Swift.String(describing: limit)), nextMarker: \(Swift.String(describing: nextMarker)), scope: \(Swift.String(describing: scope)))"}
}

extension ListRegexPatternSetsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct ListRegexPatternSetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRegexPatternSetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRegexPatternSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRegexPatternSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRegexPatternSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRegexPatternSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRegexPatternSetsOutputError>
}

public struct ListRegexPatternSetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRegexPatternSetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRegexPatternSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRegexPatternSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRegexPatternSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRegexPatternSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRegexPatternSetsOutputError>
}

public struct ListRegexPatternSetsInput: Swift.Equatable {
    /// <p>The maximum number of objects that you want AWS WAF to return for this request. If more
    ///           objects are available, in the response, AWS WAF provides a
    ///          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
    public let limit: Swift.Int?
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListRegexPatternSetsInputBody: Swift.Equatable {
    public let scope: Wafv2ClientTypes.Scope?
    public let nextMarker: Swift.String?
    public let limit: Swift.Int?
}

extension ListRegexPatternSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListRegexPatternSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRegexPatternSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRegexPatternSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRegexPatternSetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRegexPatternSetsOutputResponse(nextMarker: \(Swift.String(describing: nextMarker)), regexPatternSets: \(Swift.String(describing: regexPatternSets)))"}
}

extension ListRegexPatternSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRegexPatternSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.regexPatternSets = output.regexPatternSets
        } else {
            self.nextMarker = nil
            self.regexPatternSets = nil
        }
    }
}

public struct ListRegexPatternSetsOutputResponse: Swift.Equatable {
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?
    /// <p></p>
    public let regexPatternSets: [Wafv2ClientTypes.RegexPatternSetSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        regexPatternSets: [Wafv2ClientTypes.RegexPatternSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.regexPatternSets = regexPatternSets
    }
}

struct ListRegexPatternSetsOutputResponseBody: Swift.Equatable {
    public let nextMarker: Swift.String?
    public let regexPatternSets: [Wafv2ClientTypes.RegexPatternSetSummary]?
}

extension ListRegexPatternSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case regexPatternSets = "RegexPatternSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let regexPatternSetsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.RegexPatternSetSummary?].self, forKey: .regexPatternSets)
        var regexPatternSetsDecoded0:[Wafv2ClientTypes.RegexPatternSetSummary]? = nil
        if let regexPatternSetsContainer = regexPatternSetsContainer {
            regexPatternSetsDecoded0 = [Wafv2ClientTypes.RegexPatternSetSummary]()
            for structure0 in regexPatternSetsContainer {
                if let structure0 = structure0 {
                    regexPatternSetsDecoded0?.append(structure0)
                }
            }
        }
        regexPatternSets = regexPatternSetsDecoded0
    }
}

public struct ListResourcesForWebACLInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListResourcesForWebACLInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListResourcesForWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListResourcesForWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListResourcesForWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListResourcesForWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListResourcesForWebACLOutputError>
}

extension ListResourcesForWebACLInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListResourcesForWebACLInput(resourceType: \(Swift.String(describing: resourceType)), webACLArn: \(Swift.String(describing: webACLArn)))"}
}

extension ListResourcesForWebACLInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceType = "ResourceType"
        case webACLArn = "WebACLArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let webACLArn = webACLArn {
            try encodeContainer.encode(webACLArn, forKey: .webACLArn)
        }
    }
}

public struct ListResourcesForWebACLInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListResourcesForWebACLInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListResourcesForWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListResourcesForWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListResourcesForWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListResourcesForWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListResourcesForWebACLOutputError>
}

public struct ListResourcesForWebACLInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListResourcesForWebACLInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListResourcesForWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListResourcesForWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListResourcesForWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListResourcesForWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListResourcesForWebACLOutputError>
}

public struct ListResourcesForWebACLInput: Swift.Equatable {
    /// <p>Used for web ACLs that are scoped for regional applications. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API. </p>
    public let resourceType: Wafv2ClientTypes.ResourceType?
    /// <p>The Amazon Resource Name (ARN) of the Web ACL.</p>
    public let webACLArn: Swift.String?

    public init (
        resourceType: Wafv2ClientTypes.ResourceType? = nil,
        webACLArn: Swift.String? = nil
    )
    {
        self.resourceType = resourceType
        self.webACLArn = webACLArn
    }
}

struct ListResourcesForWebACLInputBody: Swift.Equatable {
    public let webACLArn: Swift.String?
    public let resourceType: Wafv2ClientTypes.ResourceType?
}

extension ListResourcesForWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceType = "ResourceType"
        case webACLArn = "WebACLArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLArn)
        webACLArn = webACLArnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension ListResourcesForWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListResourcesForWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListResourcesForWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListResourcesForWebACLOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListResourcesForWebACLOutputResponse(resourceArns: \(Swift.String(describing: resourceArns)))"}
}

extension ListResourcesForWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListResourcesForWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceArns = output.resourceArns
        } else {
            self.resourceArns = nil
        }
    }
}

public struct ListResourcesForWebACLOutputResponse: Swift.Equatable {
    /// <p>The array of Amazon Resource Names (ARNs) of the associated resources.</p>
    public let resourceArns: [Swift.String]?

    public init (
        resourceArns: [Swift.String]? = nil
    )
    {
        self.resourceArns = resourceArns
    }
}

struct ListResourcesForWebACLOutputResponseBody: Swift.Equatable {
    public let resourceArns: [Swift.String]?
}

extension ListResourcesForWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArns = "ResourceArns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceArns)
        var resourceArnsDecoded0:[Swift.String]? = nil
        if let resourceArnsContainer = resourceArnsContainer {
            resourceArnsDecoded0 = [Swift.String]()
            for string0 in resourceArnsContainer {
                if let string0 = string0 {
                    resourceArnsDecoded0?.append(string0)
                }
            }
        }
        resourceArns = resourceArnsDecoded0
    }
}

public struct ListRuleGroupsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRuleGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRuleGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRuleGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRuleGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRuleGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRuleGroupsOutputError>
}

extension ListRuleGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRuleGroupsInput(limit: \(Swift.String(describing: limit)), nextMarker: \(Swift.String(describing: nextMarker)), scope: \(Swift.String(describing: scope)))"}
}

extension ListRuleGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct ListRuleGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRuleGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRuleGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRuleGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRuleGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRuleGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRuleGroupsOutputError>
}

public struct ListRuleGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRuleGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRuleGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRuleGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRuleGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRuleGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRuleGroupsOutputError>
}

public struct ListRuleGroupsInput: Swift.Equatable {
    /// <p>The maximum number of objects that you want AWS WAF to return for this request. If more
    ///           objects are available, in the response, AWS WAF provides a
    ///          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
    public let limit: Swift.Int?
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListRuleGroupsInputBody: Swift.Equatable {
    public let scope: Wafv2ClientTypes.Scope?
    public let nextMarker: Swift.String?
    public let limit: Swift.Int?
}

extension ListRuleGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListRuleGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRuleGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRuleGroupsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRuleGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRuleGroupsOutputResponse(nextMarker: \(Swift.String(describing: nextMarker)), ruleGroups: \(Swift.String(describing: ruleGroups)))"}
}

extension ListRuleGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRuleGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.ruleGroups = output.ruleGroups
        } else {
            self.nextMarker = nil
            self.ruleGroups = nil
        }
    }
}

public struct ListRuleGroupsOutputResponse: Swift.Equatable {
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?
    /// <p></p>
    public let ruleGroups: [Wafv2ClientTypes.RuleGroupSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        ruleGroups: [Wafv2ClientTypes.RuleGroupSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.ruleGroups = ruleGroups
    }
}

struct ListRuleGroupsOutputResponseBody: Swift.Equatable {
    public let nextMarker: Swift.String?
    public let ruleGroups: [Wafv2ClientTypes.RuleGroupSummary]?
}

extension ListRuleGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case ruleGroups = "RuleGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let ruleGroupsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.RuleGroupSummary?].self, forKey: .ruleGroups)
        var ruleGroupsDecoded0:[Wafv2ClientTypes.RuleGroupSummary]? = nil
        if let ruleGroupsContainer = ruleGroupsContainer {
            ruleGroupsDecoded0 = [Wafv2ClientTypes.RuleGroupSummary]()
            for structure0 in ruleGroupsContainer {
                if let structure0 = structure0 {
                    ruleGroupsDecoded0?.append(structure0)
                }
            }
        }
        ruleGroups = ruleGroupsDecoded0
    }
}

public struct ListTagsForResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(limit: \(Swift.String(describing: limit)), nextMarker: \(Swift.String(describing: nextMarker)), resourceARN: \(Swift.String(describing: resourceARN)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case resourceARN = "ResourceARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// <p>The maximum number of objects that you want AWS WAF to return for this request. If more
    ///           objects are available, in the response, AWS WAF provides a
    ///          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
    public let limit: Swift.Int?
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    public let resourceARN: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.resourceARN = resourceARN
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    public let nextMarker: Swift.String?
    public let limit: Swift.Int?
    public let resourceARN: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(nextMarker: \(Swift.String(describing: nextMarker)), tagInfoForResource: \(Swift.String(describing: tagInfoForResource)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.tagInfoForResource = output.tagInfoForResource
        } else {
            self.nextMarker = nil
            self.tagInfoForResource = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?
    /// <p>The collection of tagging definitions for the resource. </p>
    public let tagInfoForResource: Wafv2ClientTypes.TagInfoForResource?

    public init (
        nextMarker: Swift.String? = nil,
        tagInfoForResource: Wafv2ClientTypes.TagInfoForResource? = nil
    )
    {
        self.nextMarker = nextMarker
        self.tagInfoForResource = tagInfoForResource
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let nextMarker: Swift.String?
    public let tagInfoForResource: Wafv2ClientTypes.TagInfoForResource?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case tagInfoForResource = "TagInfoForResource"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let tagInfoForResourceDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.TagInfoForResource.self, forKey: .tagInfoForResource)
        tagInfoForResource = tagInfoForResourceDecoded
    }
}

public struct ListWebACLsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListWebACLsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListWebACLsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListWebACLsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListWebACLsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListWebACLsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListWebACLsOutputError>
}

extension ListWebACLsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListWebACLsInput(limit: \(Swift.String(describing: limit)), nextMarker: \(Swift.String(describing: nextMarker)), scope: \(Swift.String(describing: scope)))"}
}

extension ListWebACLsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct ListWebACLsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListWebACLsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListWebACLsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListWebACLsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListWebACLsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListWebACLsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListWebACLsOutputError>
}

public struct ListWebACLsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListWebACLsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListWebACLsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListWebACLsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListWebACLsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListWebACLsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListWebACLsOutputError>
}

public struct ListWebACLsInput: Swift.Equatable {
    /// <p>The maximum number of objects that you want AWS WAF to return for this request. If more
    ///           objects are available, in the response, AWS WAF provides a
    ///          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
    public let limit: Swift.Int?
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListWebACLsInputBody: Swift.Equatable {
    public let scope: Wafv2ClientTypes.Scope?
    public let nextMarker: Swift.String?
    public let limit: Swift.Int?
}

extension ListWebACLsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListWebACLsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListWebACLsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListWebACLsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListWebACLsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListWebACLsOutputResponse(nextMarker: \(Swift.String(describing: nextMarker)), webACLs: \(Swift.String(describing: webACLs)))"}
}

extension ListWebACLsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListWebACLsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.webACLs = output.webACLs
        } else {
            self.nextMarker = nil
            self.webACLs = nil
        }
    }
}

public struct ListWebACLsOutputResponse: Swift.Equatable {
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
    ///          for retrieval exceeds the limit, AWS WAF returns a <code>NextMarker</code>
    ///          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    public let nextMarker: Swift.String?
    /// <p></p>
    public let webACLs: [Wafv2ClientTypes.WebACLSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        webACLs: [Wafv2ClientTypes.WebACLSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.webACLs = webACLs
    }
}

struct ListWebACLsOutputResponseBody: Swift.Equatable {
    public let nextMarker: Swift.String?
    public let webACLs: [Wafv2ClientTypes.WebACLSummary]?
}

extension ListWebACLsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case webACLs = "WebACLs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let webACLsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.WebACLSummary?].self, forKey: .webACLs)
        var webACLsDecoded0:[Wafv2ClientTypes.WebACLSummary]? = nil
        if let webACLsContainer = webACLsContainer {
            webACLsDecoded0 = [Wafv2ClientTypes.WebACLSummary]()
            for structure0 in webACLsContainer {
                if let structure0 = structure0 {
                    webACLsDecoded0?.append(structure0)
                }
            }
        }
        webACLs = webACLsDecoded0
    }
}

extension Wafv2ClientTypes.LoggingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logDestinationConfigs = "LogDestinationConfigs"
        case loggingFilter = "LoggingFilter"
        case managedByFirewallManager = "ManagedByFirewallManager"
        case redactedFields = "RedactedFields"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDestinationConfigs = logDestinationConfigs {
            var logDestinationConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logDestinationConfigs)
            for logdestinationconfigs0 in logDestinationConfigs {
                try logDestinationConfigsContainer.encode(logdestinationconfigs0)
            }
        }
        if let loggingFilter = loggingFilter {
            try encodeContainer.encode(loggingFilter, forKey: .loggingFilter)
        }
        if managedByFirewallManager != false {
            try encodeContainer.encode(managedByFirewallManager, forKey: .managedByFirewallManager)
        }
        if let redactedFields = redactedFields {
            var redactedFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .redactedFields)
            for redactedfields0 in redactedFields {
                try redactedFieldsContainer.encode(redactedfields0)
            }
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let logDestinationConfigsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logDestinationConfigs)
        var logDestinationConfigsDecoded0:[Swift.String]? = nil
        if let logDestinationConfigsContainer = logDestinationConfigsContainer {
            logDestinationConfigsDecoded0 = [Swift.String]()
            for string0 in logDestinationConfigsContainer {
                if let string0 = string0 {
                    logDestinationConfigsDecoded0?.append(string0)
                }
            }
        }
        logDestinationConfigs = logDestinationConfigsDecoded0
        let redactedFieldsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.FieldToMatch?].self, forKey: .redactedFields)
        var redactedFieldsDecoded0:[Wafv2ClientTypes.FieldToMatch]? = nil
        if let redactedFieldsContainer = redactedFieldsContainer {
            redactedFieldsDecoded0 = [Wafv2ClientTypes.FieldToMatch]()
            for structure0 in redactedFieldsContainer {
                if let structure0 = structure0 {
                    redactedFieldsDecoded0?.append(structure0)
                }
            }
        }
        redactedFields = redactedFieldsDecoded0
        let managedByFirewallManagerDecoded = try containerValues.decode(Swift.Bool.self, forKey: .managedByFirewallManager)
        managedByFirewallManager = managedByFirewallManagerDecoded
        let loggingFilterDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.LoggingFilter.self, forKey: .loggingFilter)
        loggingFilter = loggingFilterDecoded
    }
}

extension Wafv2ClientTypes.LoggingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoggingConfiguration(logDestinationConfigs: \(Swift.String(describing: logDestinationConfigs)), loggingFilter: \(Swift.String(describing: loggingFilter)), managedByFirewallManager: \(Swift.String(describing: managedByFirewallManager)), redactedFields: \(Swift.String(describing: redactedFields)), resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension Wafv2ClientTypes {
    /// <p>Defines an association between Amazon Kinesis Data Firehose destinations and a web ACL resource, for
    ///          logging from AWS WAF.
    ///       As part of the association, you can specify parts of the standard logging fields to keep out of the logs and you
    ///       can specify filters so that you log only a subset of the logging records. </p>
    public struct LoggingConfiguration: Swift.Equatable {
        /// <p>The Amazon Kinesis Data Firehose Amazon Resource Name (ARNs) that you want to associate with the web ACL.</p>
        public let logDestinationConfigs: [Swift.String]?
        /// <p>Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.  </p>
        public let loggingFilter: Wafv2ClientTypes.LoggingFilter?
        /// <p>Indicates whether the logging configuration was created by AWS Firewall Manager, as part of an AWS WAF policy configuration. If true, only
        ///    Firewall Manager can modify or delete the configuration. </p>
        public let managedByFirewallManager: Swift.Bool
        /// <p>The parts of the request that you want to keep out of the logs. For
        ///           example, if you redact the <code>HEADER</code> field, the <code>HEADER</code> field in the firehose will be <code>xxx</code>. </p>
        ///          <note>
        ///            <p>You must use one of the following values: <code>URI</code>, <code>QUERY_STRING</code>, <code>HEADER</code>, or <code>METHOD</code>.</p>
        ///         </note>
        public let redactedFields: [Wafv2ClientTypes.FieldToMatch]?
        /// <p>The Amazon Resource Name (ARN) of the web ACL that you want to associate with
        ///          <code>LogDestinationConfigs</code>.</p>
        public let resourceArn: Swift.String?

        public init (
            logDestinationConfigs: [Swift.String]? = nil,
            loggingFilter: Wafv2ClientTypes.LoggingFilter? = nil,
            managedByFirewallManager: Swift.Bool = false,
            redactedFields: [Wafv2ClientTypes.FieldToMatch]? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.logDestinationConfigs = logDestinationConfigs
            self.loggingFilter = loggingFilter
            self.managedByFirewallManager = managedByFirewallManager
            self.redactedFields = redactedFields
            self.resourceArn = resourceArn
        }
    }

}

extension Wafv2ClientTypes.LoggingFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultBehavior = "DefaultBehavior"
        case filters = "Filters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultBehavior = defaultBehavior {
            try encodeContainer.encode(defaultBehavior.rawValue, forKey: .defaultBehavior)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filters0 in filters {
                try filtersContainer.encode(filters0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[Wafv2ClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [Wafv2ClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let defaultBehaviorDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FilterBehavior.self, forKey: .defaultBehavior)
        defaultBehavior = defaultBehaviorDecoded
    }
}

extension Wafv2ClientTypes.LoggingFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoggingFilter(defaultBehavior: \(Swift.String(describing: defaultBehavior)), filters: \(Swift.String(describing: filters)))"}
}

extension Wafv2ClientTypes {
    /// <p>Filtering that specifies which web requests are kept in the logs and which are dropped, defined for a web ACL's <a>LoggingConfiguration</a>. </p>
    ///          <p>You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.  </p>
    public struct LoggingFilter: Swift.Equatable {
        /// <p>Default handling for logs that don't match any of the specified filtering conditions. </p>
        public let defaultBehavior: Wafv2ClientTypes.FilterBehavior?
        /// <p>The filters that you want to apply to the logs. </p>
        public let filters: [Wafv2ClientTypes.Filter]?

        public init (
            defaultBehavior: Wafv2ClientTypes.FilterBehavior? = nil,
            filters: [Wafv2ClientTypes.Filter]? = nil
        )
        {
            self.defaultBehavior = defaultBehavior
            self.filters = filters
        }
    }

}

extension Wafv2ClientTypes.ManagedRuleGroupStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludedRules = "ExcludedRules"
        case name = "Name"
        case scopeDownStatement = "ScopeDownStatement"
        case vendorName = "VendorName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excludedRules = excludedRules {
            var excludedRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedRules)
            for excludedrules0 in excludedRules {
                try excludedRulesContainer.encode(excludedrules0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scopeDownStatement = scopeDownStatement {
            try encodeContainer.encode(scopeDownStatement.value, forKey: .scopeDownStatement)
        }
        if let vendorName = vendorName {
            try encodeContainer.encode(vendorName, forKey: .vendorName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vendorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendorName)
        vendorName = vendorNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let excludedRulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.ExcludedRule?].self, forKey: .excludedRules)
        var excludedRulesDecoded0:[Wafv2ClientTypes.ExcludedRule]? = nil
        if let excludedRulesContainer = excludedRulesContainer {
            excludedRulesDecoded0 = [Wafv2ClientTypes.ExcludedRule]()
            for structure0 in excludedRulesContainer {
                if let structure0 = structure0 {
                    excludedRulesDecoded0?.append(structure0)
                }
            }
        }
        excludedRules = excludedRulesDecoded0
        let scopeDownStatementDecoded = try containerValues.decodeIfPresent(Box<Wafv2ClientTypes.Statement>.self, forKey: .scopeDownStatement)
        scopeDownStatement = scopeDownStatementDecoded
    }
}

extension Wafv2ClientTypes.ManagedRuleGroupStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ManagedRuleGroupStatement(excludedRules: \(Swift.String(describing: excludedRules)), name: \(Swift.String(describing: name)), scopeDownStatement: \(Swift.String(describing: scopeDownStatement)), vendorName: \(Swift.String(describing: vendorName)))"}
}

extension Wafv2ClientTypes {
    /// <p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <a>ListAvailableManagedRuleGroups</a>.</p>
    ///          <p>You can't nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p>
    public struct ManagedRuleGroupStatement: Swift.Equatable {
        /// <p>The rules whose actions are set to <code>COUNT</code> by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests.  </p>
        public let excludedRules: [Wafv2ClientTypes.ExcludedRule]?
        /// <p>The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.</p>
        public let name: Swift.String?
        /// <p>The processing guidance for a <a>Rule</a>, used by AWS WAF to determine whether a web request matches the rule. </p>
        public let scopeDownStatement: Box<Wafv2ClientTypes.Statement>?
        /// <p>The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.</p>
        public let vendorName: Swift.String?

        public init (
            excludedRules: [Wafv2ClientTypes.ExcludedRule]? = nil,
            name: Swift.String? = nil,
            scopeDownStatement: Box<Wafv2ClientTypes.Statement>? = nil,
            vendorName: Swift.String? = nil
        )
        {
            self.excludedRules = excludedRules
            self.name = name
            self.scopeDownStatement = scopeDownStatement
            self.vendorName = vendorName
        }
    }

}

extension Wafv2ClientTypes.ManagedRuleGroupSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case vendorName = "VendorName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let vendorName = vendorName {
            try encodeContainer.encode(vendorName, forKey: .vendorName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vendorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendorName)
        vendorName = vendorNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension Wafv2ClientTypes.ManagedRuleGroupSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ManagedRuleGroupSummary(description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), vendorName: \(Swift.String(describing: vendorName)))"}
}

extension Wafv2ClientTypes {
    /// <p>High-level information about a managed rule group, returned by <a>ListAvailableManagedRuleGroups</a>. This provides information like the name and vendor name, that you provide when you add a <a>ManagedRuleGroupStatement</a> to a web ACL. Managed rule groups include AWS Managed Rules rule groups, which are free of charge to AWS WAF customers, and AWS Marketplace managed rule groups, which you can subscribe to through AWS Marketplace. </p>
    public struct ManagedRuleGroupSummary: Swift.Equatable {
        /// <p>The description of the managed rule group, provided by AWS Managed Rules or the AWS Marketplace seller who manages it.</p>
        public let description: Swift.String?
        /// <p>The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.</p>
        public let name: Swift.String?
        /// <p>The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.</p>
        public let vendorName: Swift.String?

        public init (
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            vendorName: Swift.String? = nil
        )
        {
            self.description = description
            self.name = name
            self.vendorName = vendorName
        }
    }

}

extension Wafv2ClientTypes.Method: Swift.Codable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Wafv2ClientTypes.Method: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Method()"}
}

extension Wafv2ClientTypes {
    /// <p>The HTTP method of a web request. The method indicates the type of operation that the request is asking the origin to perform. </p>
    ///            <p>This is used only to indicate the web request component for AWS WAF to inspect, in the <a>FieldToMatch</a> specification. </p>
    public struct Method: Swift.Equatable {

        public init() {}
    }

}

extension Wafv2ClientTypes.NoneAction: Swift.Codable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Wafv2ClientTypes.NoneAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoneAction()"}
}

extension Wafv2ClientTypes {
    /// <p>Specifies that AWS WAF should do nothing. This is generally used to try out a rule without performing any actions. You set the <code>OverrideAction</code> on the <a>Rule</a>. </p>
    ///            <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p>
    public struct NoneAction: Swift.Equatable {

        public init() {}
    }

}

extension Wafv2ClientTypes.NotStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statement = "Statement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statement = statement {
            try encodeContainer.encode(statement.value, forKey: .statement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementDecoded = try containerValues.decodeIfPresent(Box<Wafv2ClientTypes.Statement>.self, forKey: .statement)
        statement = statementDecoded
    }
}

extension Wafv2ClientTypes.NotStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotStatement(statement: \(Swift.String(describing: statement)))"}
}

extension Wafv2ClientTypes {
    /// <p>A logical rule statement used to negate the results of another rule statement. You provide one <a>Statement</a> within the <code>NotStatement</code>.</p>
    public struct NotStatement: Swift.Equatable {
        /// <p>The statement to negate. You can use any statement that can be nested.</p>
        public let statement: Box<Wafv2ClientTypes.Statement>?

        public init (
            statement: Box<Wafv2ClientTypes.Statement>? = nil
        )
        {
            self.statement = statement
        }
    }

}

extension Wafv2ClientTypes.OrStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statements = "Statements"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statements = statements {
            var statementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statements)
            for statements0 in statements {
                try statementsContainer.encode(statements0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Statement?].self, forKey: .statements)
        var statementsDecoded0:[Wafv2ClientTypes.Statement]? = nil
        if let statementsContainer = statementsContainer {
            statementsDecoded0 = [Wafv2ClientTypes.Statement]()
            for structure0 in statementsContainer {
                if let structure0 = structure0 {
                    statementsDecoded0?.append(structure0)
                }
            }
        }
        statements = statementsDecoded0
    }
}

extension Wafv2ClientTypes.OrStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrStatement(statements: \(Swift.String(describing: statements)))"}
}

extension Wafv2ClientTypes {
    /// <p>A logical rule statement used to combine other rule statements with OR logic. You provide more than one <a>Statement</a> within the <code>OrStatement</code>. </p>
    public struct OrStatement: Swift.Equatable {
        /// <p>The statements to combine with OR logic. You can use any statements that can be nested.</p>
        public let statements: [Wafv2ClientTypes.Statement]?

        public init (
            statements: [Wafv2ClientTypes.Statement]? = nil
        )
        {
            self.statements = statements
        }
    }

}

extension Wafv2ClientTypes.OverrideAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case `none` = "None"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let count = count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let `none` = `none` {
            try encodeContainer.encode(`none`, forKey: .`none`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.CountAction.self, forKey: .count)
        count = countDecoded
        let noneDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.NoneAction.self, forKey: .none)
        `none` = noneDecoded
    }
}

extension Wafv2ClientTypes.OverrideAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OverrideAction(count: \(Swift.String(describing: count)), none: \(Swift.String(describing: `none`)))"}
}

extension Wafv2ClientTypes {
    /// <p>The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group,
    ///            like <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p>
    ///         <p>Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. </p>
    ///         <p>In a <a>Rule</a>, you must specify either this <code>OverrideAction</code> setting or the rule <code>Action</code> setting, but not both:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If the rule statement references a rule group, use this override action setting and not the action setting.  </p>
    ///             </li>
    ///             <li>
    ///                <p>If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting. </p>
    ///             </li>
    ///          </ul>
    public struct OverrideAction: Swift.Equatable {
        /// <p>Don't override the rule action setting.</p>
        public let `none`: Wafv2ClientTypes.NoneAction?
        /// <p>Override the rule action setting to count.</p>
        public let count: Wafv2ClientTypes.CountAction?

        public init (
            `none`: Wafv2ClientTypes.NoneAction? = nil,
            count: Wafv2ClientTypes.CountAction? = nil
        )
        {
            self.`none` = `none`
            self.count = count
        }
    }

}

extension Wafv2ClientTypes {
    public enum ParameterExceptionField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case andStatement
        case bodyParsingFallbackBehavior
        case byteMatchStatement
        case customRequestHandling
        case customResponse
        case customResponseBody
        case defaultAction
        case entityLimit
        case excludedRule
        case fallbackBehavior
        case fieldToMatch
        case filterCondition
        case firewallManagerStatement
        case forwardedIpConfig
        case geoMatchStatement
        case headerName
        case ipAddress
        case ipAddressVersion
        case ipSet
        case ipSetForwardedIpConfig
        case ipSetReferenceStatement
        case jsonMatchPattern
        case jsonMatchScope
        case labelMatchStatement
        case loggingFilter
        case managedRuleSet
        case managedRuleSetStatement
        case metricName
        case notStatement
        case orStatement
        case overrideAction
        case position
        case rateBasedStatement
        case regexPatternReferenceStatement
        case regexPatternSet
        case resourceArn
        case resourceType
        case responseContentType
        case rule
        case ruleAction
        case ruleGroup
        case ruleGroupReferenceStatement
        case scopeValue
        case singleHeader
        case singleQueryArgument
        case sizeConstraintStatement
        case sqliMatchStatement
        case statement
        case tags
        case tagKeys
        case textTransformation
        case webAcl
        case xssMatchStatement
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterExceptionField] {
            return [
                .andStatement,
                .bodyParsingFallbackBehavior,
                .byteMatchStatement,
                .customRequestHandling,
                .customResponse,
                .customResponseBody,
                .defaultAction,
                .entityLimit,
                .excludedRule,
                .fallbackBehavior,
                .fieldToMatch,
                .filterCondition,
                .firewallManagerStatement,
                .forwardedIpConfig,
                .geoMatchStatement,
                .headerName,
                .ipAddress,
                .ipAddressVersion,
                .ipSet,
                .ipSetForwardedIpConfig,
                .ipSetReferenceStatement,
                .jsonMatchPattern,
                .jsonMatchScope,
                .labelMatchStatement,
                .loggingFilter,
                .managedRuleSet,
                .managedRuleSetStatement,
                .metricName,
                .notStatement,
                .orStatement,
                .overrideAction,
                .position,
                .rateBasedStatement,
                .regexPatternReferenceStatement,
                .regexPatternSet,
                .resourceArn,
                .resourceType,
                .responseContentType,
                .rule,
                .ruleAction,
                .ruleGroup,
                .ruleGroupReferenceStatement,
                .scopeValue,
                .singleHeader,
                .singleQueryArgument,
                .sizeConstraintStatement,
                .sqliMatchStatement,
                .statement,
                .tags,
                .tagKeys,
                .textTransformation,
                .webAcl,
                .xssMatchStatement,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .andStatement: return "AND_STATEMENT"
            case .bodyParsingFallbackBehavior: return "BODY_PARSING_FALLBACK_BEHAVIOR"
            case .byteMatchStatement: return "BYTE_MATCH_STATEMENT"
            case .customRequestHandling: return "CUSTOM_REQUEST_HANDLING"
            case .customResponse: return "CUSTOM_RESPONSE"
            case .customResponseBody: return "CUSTOM_RESPONSE_BODY"
            case .defaultAction: return "DEFAULT_ACTION"
            case .entityLimit: return "ENTITY_LIMIT"
            case .excludedRule: return "EXCLUDED_RULE"
            case .fallbackBehavior: return "FALLBACK_BEHAVIOR"
            case .fieldToMatch: return "FIELD_TO_MATCH"
            case .filterCondition: return "FILTER_CONDITION"
            case .firewallManagerStatement: return "FIREWALL_MANAGER_STATEMENT"
            case .forwardedIpConfig: return "FORWARDED_IP_CONFIG"
            case .geoMatchStatement: return "GEO_MATCH_STATEMENT"
            case .headerName: return "HEADER_NAME"
            case .ipAddress: return "IP_ADDRESS"
            case .ipAddressVersion: return "IP_ADDRESS_VERSION"
            case .ipSet: return "IP_SET"
            case .ipSetForwardedIpConfig: return "IP_SET_FORWARDED_IP_CONFIG"
            case .ipSetReferenceStatement: return "IP_SET_REFERENCE_STATEMENT"
            case .jsonMatchPattern: return "JSON_MATCH_PATTERN"
            case .jsonMatchScope: return "JSON_MATCH_SCOPE"
            case .labelMatchStatement: return "LABEL_MATCH_STATEMENT"
            case .loggingFilter: return "LOGGING_FILTER"
            case .managedRuleSet: return "MANAGED_RULE_SET"
            case .managedRuleSetStatement: return "MANAGED_RULE_SET_STATEMENT"
            case .metricName: return "METRIC_NAME"
            case .notStatement: return "NOT_STATEMENT"
            case .orStatement: return "OR_STATEMENT"
            case .overrideAction: return "OVERRIDE_ACTION"
            case .position: return "POSITION"
            case .rateBasedStatement: return "RATE_BASED_STATEMENT"
            case .regexPatternReferenceStatement: return "REGEX_PATTERN_REFERENCE_STATEMENT"
            case .regexPatternSet: return "REGEX_PATTERN_SET"
            case .resourceArn: return "RESOURCE_ARN"
            case .resourceType: return "RESOURCE_TYPE"
            case .responseContentType: return "RESPONSE_CONTENT_TYPE"
            case .rule: return "RULE"
            case .ruleAction: return "RULE_ACTION"
            case .ruleGroup: return "RULE_GROUP"
            case .ruleGroupReferenceStatement: return "RULE_GROUP_REFERENCE_STATEMENT"
            case .scopeValue: return "SCOPE_VALUE"
            case .singleHeader: return "SINGLE_HEADER"
            case .singleQueryArgument: return "SINGLE_QUERY_ARGUMENT"
            case .sizeConstraintStatement: return "SIZE_CONSTRAINT_STATEMENT"
            case .sqliMatchStatement: return "SQLI_MATCH_STATEMENT"
            case .statement: return "STATEMENT"
            case .tags: return "TAGS"
            case .tagKeys: return "TAG_KEYS"
            case .textTransformation: return "TEXT_TRANSFORMATION"
            case .webAcl: return "WEB_ACL"
            case .xssMatchStatement: return "XSS_MATCH_STATEMENT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ParameterExceptionField(rawValue: rawValue) ?? ParameterExceptionField.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes {
    public enum PositionalConstraint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case contains
        case containsWord
        case endsWith
        case exactly
        case startsWith
        case sdkUnknown(Swift.String)

        public static var allCases: [PositionalConstraint] {
            return [
                .contains,
                .containsWord,
                .endsWith,
                .exactly,
                .startsWith,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CONTAINS"
            case .containsWord: return "CONTAINS_WORD"
            case .endsWith: return "ENDS_WITH"
            case .exactly: return "EXACTLY"
            case .startsWith: return "STARTS_WITH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PositionalConstraint(rawValue: rawValue) ?? PositionalConstraint.sdkUnknown(rawValue)
        }
    }
}

public struct PutLoggingConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLoggingConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLoggingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLoggingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLoggingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLoggingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLoggingConfigurationOutputError>
}

extension PutLoggingConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutLoggingConfigurationInput(loggingConfiguration: \(Swift.String(describing: loggingConfiguration)))"}
}

extension PutLoggingConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loggingConfiguration = loggingConfiguration {
            try encodeContainer.encode(loggingConfiguration, forKey: .loggingConfiguration)
        }
    }
}

public struct PutLoggingConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLoggingConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLoggingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLoggingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLoggingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLoggingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLoggingConfigurationOutputError>
}

public struct PutLoggingConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLoggingConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLoggingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLoggingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLoggingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLoggingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLoggingConfigurationOutputError>
}

public struct PutLoggingConfigurationInput: Swift.Equatable {
    /// <p></p>
    public let loggingConfiguration: Wafv2ClientTypes.LoggingConfiguration?

    public init (
        loggingConfiguration: Wafv2ClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

struct PutLoggingConfigurationInputBody: Swift.Equatable {
    public let loggingConfiguration: Wafv2ClientTypes.LoggingConfiguration?
}

extension PutLoggingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

extension PutLoggingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutLoggingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFServiceLinkedRoleErrorException" : self = .wAFServiceLinkedRoleErrorException(try WAFServiceLinkedRoleErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutLoggingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFServiceLinkedRoleErrorException(WAFServiceLinkedRoleErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLoggingConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutLoggingConfigurationOutputResponse(loggingConfiguration: \(Swift.String(describing: loggingConfiguration)))"}
}

extension PutLoggingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutLoggingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loggingConfiguration = output.loggingConfiguration
        } else {
            self.loggingConfiguration = nil
        }
    }
}

public struct PutLoggingConfigurationOutputResponse: Swift.Equatable {
    /// <p></p>
    public let loggingConfiguration: Wafv2ClientTypes.LoggingConfiguration?

    public init (
        loggingConfiguration: Wafv2ClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

struct PutLoggingConfigurationOutputResponseBody: Swift.Equatable {
    public let loggingConfiguration: Wafv2ClientTypes.LoggingConfiguration?
}

extension PutLoggingConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

public struct PutPermissionPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutPermissionPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutPermissionPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutPermissionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutPermissionPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutPermissionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutPermissionPolicyOutputError>
}

extension PutPermissionPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutPermissionPolicyInput(policy: \(Swift.String(describing: policy)), resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension PutPermissionPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policy = policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct PutPermissionPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutPermissionPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutPermissionPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutPermissionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutPermissionPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutPermissionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutPermissionPolicyOutputError>
}

public struct PutPermissionPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutPermissionPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutPermissionPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutPermissionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutPermissionPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutPermissionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutPermissionPolicyOutputError>
}

public struct PutPermissionPolicyInput: Swift.Equatable {
    /// <p>The policy to attach to the specified rule group. </p>
    ///
    ///          <p>The policy specifications must conform to the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>The policy must be composed using IAM Policy version 2012-10-17 or version 2015-01-01.</p>
    ///             </li>
    ///             <li>
    ///                <p>The policy must include specifications for <code>Effect</code>, <code>Action</code>, and <code>Principal</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Effect</code> must specify <code>Allow</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Action</code> must specify <code>wafv2:CreateWebACL</code>, <code>wafv2:UpdateWebACL</code>, and <code>wafv2:PutFirewallManagerRuleGroups</code>. AWS WAF rejects any extra actions or wildcard actions in the policy.</p>
    ///             </li>
    ///             <li>
    ///                <p>The policy must not include a <code>Resource</code> parameter.</p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">IAM Policies</a>.  </p>
    public let policy: Swift.String?
    /// <p>The Amazon Resource Name (ARN) of the <a>RuleGroup</a> to which you want to attach the policy.</p>
    public let resourceArn: Swift.String?

    public init (
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

struct PutPermissionPolicyInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let policy: Swift.String?
}

extension PutPermissionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension PutPermissionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutPermissionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidPermissionPolicyException" : self = .wAFInvalidPermissionPolicyException(try WAFInvalidPermissionPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutPermissionPolicyOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFInvalidPermissionPolicyException(WAFInvalidPermissionPolicyException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutPermissionPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutPermissionPolicyOutputResponse()"}
}

extension PutPermissionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutPermissionPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutPermissionPolicyOutputResponseBody: Swift.Equatable {
}

extension PutPermissionPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Wafv2ClientTypes.QueryString: Swift.Codable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Wafv2ClientTypes.QueryString: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueryString()"}
}

extension Wafv2ClientTypes {
    /// <p>The query string of a web request. This is the part of a URL that appears after a <code>?</code> character, if any.</p>
    ///            <p>This is used only to indicate the web request component for AWS WAF to inspect, in the <a>FieldToMatch</a> specification. </p>
    public struct QueryString: Swift.Equatable {

        public init() {}
    }

}

extension Wafv2ClientTypes.RateBasedStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateKeyType = "AggregateKeyType"
        case forwardedIPConfig = "ForwardedIPConfig"
        case limit = "Limit"
        case scopeDownStatement = "ScopeDownStatement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregateKeyType = aggregateKeyType {
            try encodeContainer.encode(aggregateKeyType.rawValue, forKey: .aggregateKeyType)
        }
        if let forwardedIPConfig = forwardedIPConfig {
            try encodeContainer.encode(forwardedIPConfig, forKey: .forwardedIPConfig)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let scopeDownStatement = scopeDownStatement {
            try encodeContainer.encode(scopeDownStatement.value, forKey: .scopeDownStatement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let aggregateKeyTypeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RateBasedStatementAggregateKeyType.self, forKey: .aggregateKeyType)
        aggregateKeyType = aggregateKeyTypeDecoded
        let scopeDownStatementDecoded = try containerValues.decodeIfPresent(Box<Wafv2ClientTypes.Statement>.self, forKey: .scopeDownStatement)
        scopeDownStatement = scopeDownStatementDecoded
        let forwardedIPConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ForwardedIPConfig.self, forKey: .forwardedIPConfig)
        forwardedIPConfig = forwardedIPConfigDecoded
    }
}

extension Wafv2ClientTypes.RateBasedStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RateBasedStatement(aggregateKeyType: \(Swift.String(describing: aggregateKeyType)), forwardedIPConfig: \(Swift.String(describing: forwardedIPConfig)), limit: \(Swift.String(describing: limit)), scopeDownStatement: \(Swift.String(describing: scopeDownStatement)))"}
}

extension Wafv2ClientTypes {
    /// <p>A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.</p>
    ///          <p>When the rule action triggers, AWS WAF blocks additional requests from the IP address until the request rate falls below the limit.</p>
    ///          <p>You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:</p>
    ///          <ul>
    ///             <li>
    ///                <p>An IP match statement with an IP set that specified the address 192.0.2.44.</p>
    ///             </li>
    ///             <li>
    ///                <p>A string match statement that searches in the User-Agent header for the string BadBot.</p>
    ///             </li>
    ///          </ul>
    ///          <p>In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.</p>
    ///          <p>You cannot nest a <code>RateBasedStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p>
    public struct RateBasedStatement: Swift.Equatable {
        /// <p>Setting that indicates how to aggregate the request counts. The options are the following:</p>
        ///          <ul>
        ///             <li>
        ///                <p>IP - Aggregate the request counts on the IP address from the web request origin.</p>
        ///             </li>
        ///             <li>
        ///                <p>FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the <code>ForwardedIPConfig</code>, to specify the header to use. </p>
        ///             </li>
        ///          </ul>
        public let aggregateKeyType: Wafv2ClientTypes.RateBasedStatementAggregateKeyType?
        /// <p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p>
        ///
        ///          <note>
        ///             <p>If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.</p>
        ///          </note>
        ///
        ///
        ///          <p>This is required if <code>AggregateKeyType</code> is set to <code>FORWARDED_IP</code>.</p>
        public let forwardedIPConfig: Wafv2ClientTypes.ForwardedIPConfig?
        /// <p>The limit on requests per 5-minute period for a single originating IP address. If the statement includes a <code>ScopeDownStatement</code>, this limit is applied only to the requests that match the statement.</p>
        public let limit: Swift.Int
        /// <p>An optional nested statement that narrows the scope of the rate-based statement to matching web requests. This can be any nestable statement, and you can nest statements at any level below this scope-down statement.</p>
        public let scopeDownStatement: Box<Wafv2ClientTypes.Statement>?

        public init (
            aggregateKeyType: Wafv2ClientTypes.RateBasedStatementAggregateKeyType? = nil,
            forwardedIPConfig: Wafv2ClientTypes.ForwardedIPConfig? = nil,
            limit: Swift.Int = 0,
            scopeDownStatement: Box<Wafv2ClientTypes.Statement>? = nil
        )
        {
            self.aggregateKeyType = aggregateKeyType
            self.forwardedIPConfig = forwardedIPConfig
            self.limit = limit
            self.scopeDownStatement = scopeDownStatement
        }
    }

}

extension Wafv2ClientTypes {
    public enum RateBasedStatementAggregateKeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case forwardedIp
        case ip
        case sdkUnknown(Swift.String)

        public static var allCases: [RateBasedStatementAggregateKeyType] {
            return [
                .forwardedIp,
                .ip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .forwardedIp: return "FORWARDED_IP"
            case .ip: return "IP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RateBasedStatementAggregateKeyType(rawValue: rawValue) ?? RateBasedStatementAggregateKeyType.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.RateBasedStatementManagedKeysIPSet: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case iPAddressVersion = "IPAddressVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addresses)
            for ipaddresses0 in addresses {
                try addressesContainer.encode(ipaddresses0)
            }
        }
        if let iPAddressVersion = iPAddressVersion {
            try encodeContainer.encode(iPAddressVersion.rawValue, forKey: .iPAddressVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iPAddressVersionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.IPAddressVersion.self, forKey: .iPAddressVersion)
        iPAddressVersion = iPAddressVersionDecoded
        let addressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addresses)
        var addressesDecoded0:[Swift.String]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [Swift.String]()
            for string0 in addressesContainer {
                if let string0 = string0 {
                    addressesDecoded0?.append(string0)
                }
            }
        }
        addresses = addressesDecoded0
    }
}

extension Wafv2ClientTypes.RateBasedStatementManagedKeysIPSet: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RateBasedStatementManagedKeysIPSet(addresses: \(Swift.String(describing: addresses)), iPAddressVersion: \(Swift.String(describing: iPAddressVersion)))"}
}

extension Wafv2ClientTypes {
    /// <p>The set of IP addresses that are currently blocked for a rate-based statement.</p>
    public struct RateBasedStatementManagedKeysIPSet: Swift.Equatable {
        /// <p>The IP addresses that are currently blocked.</p>
        public let addresses: [Swift.String]?
        public let iPAddressVersion: Wafv2ClientTypes.IPAddressVersion?

        public init (
            addresses: [Swift.String]? = nil,
            iPAddressVersion: Wafv2ClientTypes.IPAddressVersion? = nil
        )
        {
            self.addresses = addresses
            self.iPAddressVersion = iPAddressVersion
        }
    }

}

extension Wafv2ClientTypes.Regex: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regexString = "RegexString"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regexString = regexString {
            try encodeContainer.encode(regexString, forKey: .regexString)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexString)
        regexString = regexStringDecoded
    }
}

extension Wafv2ClientTypes.Regex: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Regex(regexString: \(Swift.String(describing: regexString)))"}
}

extension Wafv2ClientTypes {
    /// <p>A single regular expression. This is used in a <a>RegexPatternSet</a>.</p>
    public struct Regex: Swift.Equatable {
        /// <p>The string representing the regular expression.</p>
        public let regexString: Swift.String?

        public init (
            regexString: Swift.String? = nil
        )
        {
            self.regexString = regexString
        }
    }

}

extension Wafv2ClientTypes.RegexPatternSet: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case description = "Description"
        case id = "Id"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regularExpressionList = regularExpressionList {
            var regularExpressionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regularExpressionList)
            for regularexpressionlist0 in regularExpressionList {
                try regularExpressionListContainer.encode(regularexpressionlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let regularExpressionListContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Regex?].self, forKey: .regularExpressionList)
        var regularExpressionListDecoded0:[Wafv2ClientTypes.Regex]? = nil
        if let regularExpressionListContainer = regularExpressionListContainer {
            regularExpressionListDecoded0 = [Wafv2ClientTypes.Regex]()
            for structure0 in regularExpressionListContainer {
                if let structure0 = structure0 {
                    regularExpressionListDecoded0?.append(structure0)
                }
            }
        }
        regularExpressionList = regularExpressionListDecoded0
    }
}

extension Wafv2ClientTypes.RegexPatternSet: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegexPatternSet(aRN: \(Swift.String(describing: aRN)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), regularExpressionList: \(Swift.String(describing: regularExpressionList)))"}
}

extension Wafv2ClientTypes {
    /// <p>Contains one or more regular expressions. </p>
    ///          <p>AWS WAF assigns an ARN to each <code>RegexPatternSet</code> that you create. To use a set in a rule, you provide the ARN to the <a>Rule</a> statement <a>RegexPatternSetReferenceStatement</a>. </p>
    public struct RegexPatternSet: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the entity.</p>
        public let aRN: Swift.String?
        /// <p>A description of the set that helps with identification. </p>
        public let description: Swift.String?
        /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
        public let id: Swift.String?
        /// <p>The name of the set. You cannot change the name after you create the set.</p>
        public let name: Swift.String?
        /// <p>The regular expression patterns in the set.</p>
        public let regularExpressionList: [Wafv2ClientTypes.Regex]?

        public init (
            aRN: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            regularExpressionList: [Wafv2ClientTypes.Regex]? = nil
        )
        {
            self.aRN = aRN
            self.description = description
            self.id = id
            self.name = name
            self.regularExpressionList = regularExpressionList
        }
    }

}

extension Wafv2ClientTypes.RegexPatternSetReferenceStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case fieldToMatch = "FieldToMatch"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let fieldToMatch = fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformations0 in textTransformations {
                try textTransformationsContainer.encode(texttransformations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[Wafv2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [Wafv2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
    }
}

extension Wafv2ClientTypes.RegexPatternSetReferenceStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegexPatternSetReferenceStatement(aRN: \(Swift.String(describing: aRN)), fieldToMatch: \(Swift.String(describing: fieldToMatch)), textTransformations: \(Swift.String(describing: textTransformations)))"}
}

extension Wafv2ClientTypes {
    /// <p>A rule statement used to search web request components for matches with regular expressions. To use this, create a <a>RegexPatternSet</a> that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see <a>CreateRegexPatternSet</a>.</p>
    ///          <p>Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.</p>
    public struct RegexPatternSetReferenceStatement: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the <a>RegexPatternSet</a> that this statement references.</p>
        public let aRN: Swift.String?
        /// <p>The part of a web request that you want AWS WAF to inspect. For more information, see <a>FieldToMatch</a>. </p>
        public let fieldToMatch: Wafv2ClientTypes.FieldToMatch?
        /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
        ///          If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the
        ///          content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
        public let textTransformations: [Wafv2ClientTypes.TextTransformation]?

        public init (
            aRN: Swift.String? = nil,
            fieldToMatch: Wafv2ClientTypes.FieldToMatch? = nil,
            textTransformations: [Wafv2ClientTypes.TextTransformation]? = nil
        )
        {
            self.aRN = aRN
            self.fieldToMatch = fieldToMatch
            self.textTransformations = textTransformations
        }
    }

}

extension Wafv2ClientTypes.RegexPatternSetSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension Wafv2ClientTypes.RegexPatternSetSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegexPatternSetSummary(aRN: \(Swift.String(describing: aRN)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)))"}
}

extension Wafv2ClientTypes {
    /// <p>High-level information about a <a>RegexPatternSet</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>RegexPatternSet</code>, and the ARN, that you provide to the <a>RegexPatternSetReferenceStatement</a> to use the pattern set in a <a>Rule</a>.</p>
    public struct RegexPatternSetSummary: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the entity.</p>
        public let aRN: Swift.String?
        /// <p>A description of the set that helps with identification. </p>
        public let description: Swift.String?
        /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
        public let id: Swift.String?
        /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
        public let lockToken: Swift.String?
        /// <p>The name of the data type instance. You cannot change the name after you create the instance.</p>
        public let name: Swift.String?

        public init (
            aRN: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.aRN = aRN
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

extension Wafv2ClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case apiGateway
        case applicationLoadBalancer
        case appsync
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .apiGateway,
                .applicationLoadBalancer,
                .appsync,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .apiGateway: return "API_GATEWAY"
            case .applicationLoadBalancer: return "APPLICATION_LOAD_BALANCER"
            case .appsync: return "APPSYNC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes {
    public enum ResponseContentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case applicationJson
        case textHtml
        case textPlain
        case sdkUnknown(Swift.String)

        public static var allCases: [ResponseContentType] {
            return [
                .applicationJson,
                .textHtml,
                .textPlain,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .applicationJson: return "APPLICATION_JSON"
            case .textHtml: return "TEXT_HTML"
            case .textPlain: return "TEXT_PLAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResponseContentType(rawValue: rawValue) ?? ResponseContentType.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.Rule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case name = "Name"
        case overrideAction = "OverrideAction"
        case priority = "Priority"
        case ruleLabels = "RuleLabels"
        case statement = "Statement"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let overrideAction = overrideAction {
            try encodeContainer.encode(overrideAction, forKey: .overrideAction)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let ruleLabels = ruleLabels {
            var ruleLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ruleLabels)
            for labels0 in ruleLabels {
                try ruleLabelsContainer.encode(labels0)
            }
        }
        if let statement = statement {
            try encodeContainer.encode(statement, forKey: .statement)
        }
        if let visibilityConfig = visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let priorityDecoded = try containerValues.decode(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let statementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Statement.self, forKey: .statement)
        statement = statementDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RuleAction.self, forKey: .action)
        action = actionDecoded
        let overrideActionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.OverrideAction.self, forKey: .overrideAction)
        overrideAction = overrideActionDecoded
        let ruleLabelsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Label?].self, forKey: .ruleLabels)
        var ruleLabelsDecoded0:[Wafv2ClientTypes.Label]? = nil
        if let ruleLabelsContainer = ruleLabelsContainer {
            ruleLabelsDecoded0 = [Wafv2ClientTypes.Label]()
            for structure0 in ruleLabelsContainer {
                if let structure0 = structure0 {
                    ruleLabelsDecoded0?.append(structure0)
                }
            }
        }
        ruleLabels = ruleLabelsDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
    }
}

extension Wafv2ClientTypes.Rule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Rule(action: \(Swift.String(describing: action)), name: \(Swift.String(describing: name)), overrideAction: \(Swift.String(describing: overrideAction)), priority: \(Swift.String(describing: priority)), ruleLabels: \(Swift.String(describing: ruleLabels)), statement: \(Swift.String(describing: statement)), visibilityConfig: \(Swift.String(describing: visibilityConfig)))"}
}

extension Wafv2ClientTypes {
    /// <p>A single rule, which you can use in a <a>WebACL</a> or <a>RuleGroup</a> to identify
    ///          web requests that you want to allow, block, or count.
    ///          Each rule includes one top-level <a>Statement</a> that AWS WAF uses to identify matching
    ///          web requests, and parameters that govern how AWS WAF handles them. </p>
    public struct Rule: Swift.Equatable {
        /// <p>The action that AWS WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. </p>
        ///         <p>This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p>
        ///          <p>You must specify either this <code>Action</code> setting or the rule <code>OverrideAction</code> setting, but not both:</p>
        ///          <ul>
        ///             <li>
        ///                <p>If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting. </p>
        ///             </li>
        ///             <li>
        ///                <p>If the rule statement references a rule group, use the override action setting and not this action setting.  </p>
        ///             </li>
        ///          </ul>
        public let action: Wafv2ClientTypes.RuleAction?
        /// <p>The name of the rule. You can't change the name of a <code>Rule</code> after you create it. </p>
        public let name: Swift.String?
        /// <p>The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group,
        ///            like <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p>
        ///         <p>Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. </p>
        ///         <p>In a <a>Rule</a>, you must specify either this <code>OverrideAction</code> setting or the rule <code>Action</code> setting, but not both:</p>
        ///          <ul>
        ///             <li>
        ///                <p>If the rule statement references a rule group, use this override action setting and not the action setting.  </p>
        ///             </li>
        ///             <li>
        ///                <p>If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting. </p>
        ///             </li>
        ///          </ul>
        public let overrideAction: Wafv2ClientTypes.OverrideAction?
        /// <p>If you define more than one <code>Rule</code> in a
        ///          <code>WebACL</code>, AWS WAF evaluates each request against the <code>Rules</code>
        ///          in order based on the value of <code>Priority</code>.
        ///          AWS WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.</p>
        public let priority: Swift.Int
        /// <p>Labels to apply to web requests that match the rule match statement. AWS WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. </p>
        ///          <p>Rules that run after this rule in the web ACL can match against these labels using a <code>LabelMatchStatement</code>.</p>
        ///          <p>For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:</p>
        ///          <ul>
        ///             <li>
        ///                <p>Separate each component of the label with a colon. </p>
        ///             </li>
        ///             <li>
        ///                <p>Each namespace or name can have up to 128 characters.</p>
        ///             </li>
        ///             <li>
        ///                <p>You can specify up to 5 namespaces in a label.</p>
        ///             </li>
        ///             <li>
        ///                <p>Don't use the following reserved words in your label specification: <code>aws</code>, <code>waf</code>, <code>managed</code>, <code>rulegroup</code>, <code>webacl</code>, <code>regexpatternset</code>, or <code>ipset</code>.</p>
        ///             </li>
        ///          </ul>
        ///          <p>For example, <code>myLabelName</code> or <code>nameSpace1:nameSpace2:myLabelName</code>.  </p>
        public let ruleLabels: [Wafv2ClientTypes.Label]?
        /// <p>The AWS WAF processing statement for the rule, for example <a>ByteMatchStatement</a> or <a>SizeConstraintStatement</a>. </p>
        public let statement: Wafv2ClientTypes.Statement?
        /// <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
        public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?

        public init (
            action: Wafv2ClientTypes.RuleAction? = nil,
            name: Swift.String? = nil,
            overrideAction: Wafv2ClientTypes.OverrideAction? = nil,
            priority: Swift.Int = 0,
            ruleLabels: [Wafv2ClientTypes.Label]? = nil,
            statement: Wafv2ClientTypes.Statement? = nil,
            visibilityConfig: Wafv2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.action = action
            self.name = name
            self.overrideAction = overrideAction
            self.priority = priority
            self.ruleLabels = ruleLabels
            self.statement = statement
            self.visibilityConfig = visibilityConfig
        }
    }

}

extension Wafv2ClientTypes.RuleAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allow = "Allow"
        case block = "Block"
        case count = "Count"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allow = allow {
            try encodeContainer.encode(allow, forKey: .allow)
        }
        if let block = block {
            try encodeContainer.encode(block, forKey: .block)
        }
        if let count = count {
            try encodeContainer.encode(count, forKey: .count)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.BlockAction.self, forKey: .block)
        block = blockDecoded
        let allowDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.AllowAction.self, forKey: .allow)
        allow = allowDecoded
        let countDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.CountAction.self, forKey: .count)
        count = countDecoded
    }
}

extension Wafv2ClientTypes.RuleAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RuleAction(allow: \(Swift.String(describing: allow)), block: \(Swift.String(describing: block)), count: \(Swift.String(describing: count)))"}
}

extension Wafv2ClientTypes {
    /// <p>The action that AWS WAF should take on a web request when it matches a rule's statement. Settings at the web ACL level can override the rule action setting. </p>
    public struct RuleAction: Swift.Equatable {
        /// <p>Instructs AWS WAF to allow the web request.</p>
        public let allow: Wafv2ClientTypes.AllowAction?
        /// <p>Instructs AWS WAF to block the web request.</p>
        public let block: Wafv2ClientTypes.BlockAction?
        /// <p>Instructs AWS WAF to count the web request and allow it.</p>
        public let count: Wafv2ClientTypes.CountAction?

        public init (
            allow: Wafv2ClientTypes.AllowAction? = nil,
            block: Wafv2ClientTypes.BlockAction? = nil,
            count: Wafv2ClientTypes.CountAction? = nil
        )
        {
            self.allow = allow
            self.block = block
            self.count = count
        }
    }

}

extension Wafv2ClientTypes.RuleGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case availableLabels = "AvailableLabels"
        case capacity = "Capacity"
        case consumedLabels = "ConsumedLabels"
        case customResponseBodies = "CustomResponseBodies"
        case description = "Description"
        case id = "Id"
        case labelNamespace = "LabelNamespace"
        case name = "Name"
        case rules = "Rules"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let availableLabels = availableLabels {
            var availableLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availableLabels)
            for labelsummaries0 in availableLabels {
                try availableLabelsContainer.encode(labelsummaries0)
            }
        }
        if capacity != 0 {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let consumedLabels = consumedLabels {
            var consumedLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .consumedLabels)
            for labelsummaries0 in consumedLabels {
                try consumedLabelsContainer.encode(labelsummaries0)
            }
        }
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customresponsebodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customresponsebodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let labelNamespace = labelNamespace {
            try encodeContainer.encode(labelNamespace, forKey: .labelNamespace)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rules0 in rules {
                try rulesContainer.encode(rules0)
            }
        }
        if let visibilityConfig = visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let capacityDecoded = try containerValues.decode(Swift.Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[Wafv2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Wafv2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: Wafv2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:Wafv2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
        let availableLabelsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.LabelSummary?].self, forKey: .availableLabels)
        var availableLabelsDecoded0:[Wafv2ClientTypes.LabelSummary]? = nil
        if let availableLabelsContainer = availableLabelsContainer {
            availableLabelsDecoded0 = [Wafv2ClientTypes.LabelSummary]()
            for structure0 in availableLabelsContainer {
                if let structure0 = structure0 {
                    availableLabelsDecoded0?.append(structure0)
                }
            }
        }
        availableLabels = availableLabelsDecoded0
        let consumedLabelsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.LabelSummary?].self, forKey: .consumedLabels)
        var consumedLabelsDecoded0:[Wafv2ClientTypes.LabelSummary]? = nil
        if let consumedLabelsContainer = consumedLabelsContainer {
            consumedLabelsDecoded0 = [Wafv2ClientTypes.LabelSummary]()
            for structure0 in consumedLabelsContainer {
                if let structure0 = structure0 {
                    consumedLabelsDecoded0?.append(structure0)
                }
            }
        }
        consumedLabels = consumedLabelsDecoded0
    }
}

extension Wafv2ClientTypes.RuleGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RuleGroup(aRN: \(Swift.String(describing: aRN)), availableLabels: \(Swift.String(describing: availableLabels)), capacity: \(Swift.String(describing: capacity)), consumedLabels: \(Swift.String(describing: consumedLabels)), customResponseBodies: \(Swift.String(describing: customResponseBodies)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), labelNamespace: \(Swift.String(describing: labelNamespace)), name: \(Swift.String(describing: name)), rules: \(Swift.String(describing: rules)), visibilityConfig: \(Swift.String(describing: visibilityConfig)))"}
}

extension Wafv2ClientTypes {
    /// <p> A rule group defines a collection of rules to inspect and control web requests that you can use in a <a>WebACL</a>. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements. </p>
    public struct RuleGroup: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the entity.</p>
        public let aRN: Swift.String?
        /// <p>The labels that one or more rules in this rule group add to matching web ACLs. These labels are defined in the <code>RuleLabels</code> for a <a>Rule</a>.</p>
        public let availableLabels: [Wafv2ClientTypes.LabelSummary]?
        /// <p>The web ACL capacity units (WCUs) required for this rule group.</p>
        ///           <p>When you create your own rule group, you define this, and you cannot change it after creation.
        ///           When you add or modify the rules in a rule group, AWS WAF enforces this limit. You can check the capacity
        ///           for a set of rules using <a>CheckCapacity</a>.</p>
        ///           <p>AWS WAF uses WCUs to calculate and control the operating
        ///          resources that are used to run your rules, rule groups, and web ACLs. AWS WAF
        ///          calculates capacity differently for each rule type, to reflect the relative cost of each rule.
        ///          Simple rules that cost little to run use fewer WCUs than more complex rules
        /// 				that use more processing power.
        /// 				Rule group capacity is fixed at creation, which helps users plan their
        ///          web ACL WCU usage when they use a rule group.
        ///          The WCU limit for web ACLs is 1,500.  </p>
        public let capacity: Swift.Int
        /// <p>The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a <code>LabelMatchStatement</code> specification, in the <a>Statement</a> definition of a rule.  </p>
        public let consumedLabels: [Wafv2ClientTypes.LabelSummary]?
        /// <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. </p>
        ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
        ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
        ///          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">AWS WAF quotas</a> in the
        ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
        public let customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
        /// <p>A description of the rule group that helps with identification. </p>
        public let description: Swift.String?
        /// <p>A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
        public let id: Swift.String?
        /// <p>The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix. </p>
        ///          <ul>
        ///             <li>
        ///                <p>The syntax for the label namespace prefix for your rule groups is the following: </p>
        ///                <p>
        ///                   <code>awswaf:<account ID>:rulegroup:<rule group name>:</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>When a rule with a label matches a web request, AWS WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p>
        ///                <p>
        ///                   <code><label namespace>:<label from rule></code>
        ///                </p>
        ///
        ///             </li>
        ///          </ul>
        public let labelNamespace: Swift.String?
        /// <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
        public let name: Swift.String?
        /// <p>The <a>Rule</a> statements used to identify the web requests that you
        ///          want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching
        ///          web requests, and parameters that govern how AWS WAF handles them.
        ///       </p>
        public let rules: [Wafv2ClientTypes.Rule]?
        /// <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
        public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?

        public init (
            aRN: Swift.String? = nil,
            availableLabels: [Wafv2ClientTypes.LabelSummary]? = nil,
            capacity: Swift.Int = 0,
            consumedLabels: [Wafv2ClientTypes.LabelSummary]? = nil,
            customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            labelNamespace: Swift.String? = nil,
            name: Swift.String? = nil,
            rules: [Wafv2ClientTypes.Rule]? = nil,
            visibilityConfig: Wafv2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.aRN = aRN
            self.availableLabels = availableLabels
            self.capacity = capacity
            self.consumedLabels = consumedLabels
            self.customResponseBodies = customResponseBodies
            self.description = description
            self.id = id
            self.labelNamespace = labelNamespace
            self.name = name
            self.rules = rules
            self.visibilityConfig = visibilityConfig
        }
    }

}

extension Wafv2ClientTypes.RuleGroupReferenceStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case excludedRules = "ExcludedRules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let excludedRules = excludedRules {
            var excludedRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedRules)
            for excludedrules0 in excludedRules {
                try excludedRulesContainer.encode(excludedrules0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let excludedRulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.ExcludedRule?].self, forKey: .excludedRules)
        var excludedRulesDecoded0:[Wafv2ClientTypes.ExcludedRule]? = nil
        if let excludedRulesContainer = excludedRulesContainer {
            excludedRulesDecoded0 = [Wafv2ClientTypes.ExcludedRule]()
            for structure0 in excludedRulesContainer {
                if let structure0 = structure0 {
                    excludedRulesDecoded0?.append(structure0)
                }
            }
        }
        excludedRules = excludedRulesDecoded0
    }
}

extension Wafv2ClientTypes.RuleGroupReferenceStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RuleGroupReferenceStatement(aRN: \(Swift.String(describing: aRN)), excludedRules: \(Swift.String(describing: excludedRules)))"}
}

extension Wafv2ClientTypes {
    /// <p>A rule statement used to run the rules that are defined in a <a>RuleGroup</a>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p>
    ///          <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p>
    public struct RuleGroupReferenceStatement: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the entity.</p>
        public let aRN: Swift.String?
        /// <p>The names of rules that are in the referenced rule group, but that you want AWS WAF to exclude from processing for this rule statement. </p>
        public let excludedRules: [Wafv2ClientTypes.ExcludedRule]?

        public init (
            aRN: Swift.String? = nil,
            excludedRules: [Wafv2ClientTypes.ExcludedRule]? = nil
        )
        {
            self.aRN = aRN
            self.excludedRules = excludedRules
        }
    }

}

extension Wafv2ClientTypes.RuleGroupSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension Wafv2ClientTypes.RuleGroupSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RuleGroupSummary(aRN: \(Swift.String(describing: aRN)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)))"}
}

extension Wafv2ClientTypes {
    /// <p>High-level information about a <a>RuleGroup</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>RuleGroup</code>, and the ARN, that you provide to the <a>RuleGroupReferenceStatement</a> to use the rule group in a <a>Rule</a>.</p>
    public struct RuleGroupSummary: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the entity.</p>
        public let aRN: Swift.String?
        /// <p>A description of the rule group that helps with identification. </p>
        public let description: Swift.String?
        /// <p>A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
        public let id: Swift.String?
        /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
        public let lockToken: Swift.String?
        /// <p>The name of the data type instance. You cannot change the name after you create the instance.</p>
        public let name: Swift.String?

        public init (
            aRN: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.aRN = aRN
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

extension Wafv2ClientTypes.RuleSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RuleAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension Wafv2ClientTypes.RuleSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RuleSummary(action: \(Swift.String(describing: action)), name: \(Swift.String(describing: name)))"}
}

extension Wafv2ClientTypes {
    /// <p>High-level information about a <a>Rule</a>, returned by operations like <a>DescribeManagedRuleGroup</a>. This provides information like the ID, that you can use to retrieve and manage a <code>RuleGroup</code>, and the ARN, that you provide to the <a>RuleGroupReferenceStatement</a> to use the rule group in a <a>Rule</a>.</p>
    public struct RuleSummary: Swift.Equatable {
        /// <p>The action that AWS WAF should take on a web request when it matches a rule's statement. Settings at the web ACL level can override the rule action setting. </p>
        public let action: Wafv2ClientTypes.RuleAction?
        /// <p>The name of the rule. </p>
        public let name: Swift.String?

        public init (
            action: Wafv2ClientTypes.RuleAction? = nil,
            name: Swift.String? = nil
        )
        {
            self.action = action
            self.name = name
        }
    }

}

extension Wafv2ClientTypes.SampledHTTPRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case labels = "Labels"
        case request = "Request"
        case requestHeadersInserted = "RequestHeadersInserted"
        case responseCodeSent = "ResponseCodeSent"
        case ruleNameWithinRuleGroup = "RuleNameWithinRuleGroup"
        case timestamp = "Timestamp"
        case weight = "Weight"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labels)
            for labels0 in labels {
                try labelsContainer.encode(labels0)
            }
        }
        if let request = request {
            try encodeContainer.encode(request, forKey: .request)
        }
        if let requestHeadersInserted = requestHeadersInserted {
            var requestHeadersInsertedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestHeadersInserted)
            for httpheaders0 in requestHeadersInserted {
                try requestHeadersInsertedContainer.encode(httpheaders0)
            }
        }
        if let responseCodeSent = responseCodeSent {
            try encodeContainer.encode(responseCodeSent, forKey: .responseCodeSent)
        }
        if let ruleNameWithinRuleGroup = ruleNameWithinRuleGroup {
            try encodeContainer.encode(ruleNameWithinRuleGroup, forKey: .ruleNameWithinRuleGroup)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
        if weight != 0 {
            try encodeContainer.encode(weight, forKey: .weight)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.HTTPRequest.self, forKey: .request)
        request = requestDecoded
        let weightDecoded = try containerValues.decode(Swift.Int.self, forKey: .weight)
        weight = weightDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .action)
        action = actionDecoded
        let ruleNameWithinRuleGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleNameWithinRuleGroup)
        ruleNameWithinRuleGroup = ruleNameWithinRuleGroupDecoded
        let requestHeadersInsertedContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.HTTPHeader?].self, forKey: .requestHeadersInserted)
        var requestHeadersInsertedDecoded0:[Wafv2ClientTypes.HTTPHeader]? = nil
        if let requestHeadersInsertedContainer = requestHeadersInsertedContainer {
            requestHeadersInsertedDecoded0 = [Wafv2ClientTypes.HTTPHeader]()
            for structure0 in requestHeadersInsertedContainer {
                if let structure0 = structure0 {
                    requestHeadersInsertedDecoded0?.append(structure0)
                }
            }
        }
        requestHeadersInserted = requestHeadersInsertedDecoded0
        let responseCodeSentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .responseCodeSent)
        responseCodeSent = responseCodeSentDecoded
        let labelsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Label?].self, forKey: .labels)
        var labelsDecoded0:[Wafv2ClientTypes.Label]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Wafv2ClientTypes.Label]()
            for structure0 in labelsContainer {
                if let structure0 = structure0 {
                    labelsDecoded0?.append(structure0)
                }
            }
        }
        labels = labelsDecoded0
    }
}

extension Wafv2ClientTypes.SampledHTTPRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SampledHTTPRequest(action: \(Swift.String(describing: action)), labels: \(Swift.String(describing: labels)), request: \(Swift.String(describing: request)), requestHeadersInserted: \(Swift.String(describing: requestHeadersInserted)), responseCodeSent: \(Swift.String(describing: responseCodeSent)), ruleNameWithinRuleGroup: \(Swift.String(describing: ruleNameWithinRuleGroup)), timestamp: \(Swift.String(describing: timestamp)), weight: \(Swift.String(describing: weight)))"}
}

extension Wafv2ClientTypes {
    /// <p>Represents a single sampled web request. The response from <a>GetSampledRequests</a> includes a <code>SampledHTTPRequests</code> complex type that
    ///          appears as <code>SampledRequests</code> in the response syntax. <code>SampledHTTPRequests</code> contains an array of <code>SampledHTTPRequest</code> objects.</p>
    public struct SampledHTTPRequest: Swift.Equatable {
        /// <p>The action for the <code>Rule</code> that the request matched: <code>ALLOW</code>, <code>BLOCK</code>, or <code>COUNT</code>.</p>
        public let action: Swift.String?
        /// <p>Labels applied to the web request by matching rules. AWS WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. </p>
        ///          <p>For example, <code>awswaf:111122223333:myRuleGroup:testRules:testNS1:testNS2:labelNameA</code> or <code>awswaf:managed:aws:managed-rule-set:header:encoding:utf8</code>.  </p>
        public let labels: [Wafv2ClientTypes.Label]?
        /// <p>A complex type that contains detailed information about the request.</p>
        public let request: Wafv2ClientTypes.HTTPRequest?
        /// <p>Custom request headers inserted by AWS WAF into the request, according to the custom request configuration for the matching rule action.</p>
        public let requestHeadersInserted: [Wafv2ClientTypes.HTTPHeader]?
        /// <p>The response code that was sent for the request.</p>
        public let responseCodeSent: Swift.Int?
        /// <p>The name of the <code>Rule</code> that the request matched. For managed rule groups, the format for this name is <code><vendor name>#<managed rule group name>#<rule name></code>. For your own rule
        ///          groups, the format for this name is <code><rule group name>#<rule name></code>. If the rule is not in a rule group, this field is absent. </p>
        public let ruleNameWithinRuleGroup: Swift.String?
        /// <p>The time at which AWS WAF received the request from your AWS resource, in Unix time format (in seconds).</p>
        public let timestamp: ClientRuntime.Date?
        /// <p>A value that indicates how one result in the response relates
        ///          proportionally to other results in the response.
        ///          For example, a result that has a weight of <code>2</code> represents roughly twice
        ///          as many web requests as a result
        ///          that has a weight of <code>1</code>.</p>
        public let weight: Swift.Int

        public init (
            action: Swift.String? = nil,
            labels: [Wafv2ClientTypes.Label]? = nil,
            request: Wafv2ClientTypes.HTTPRequest? = nil,
            requestHeadersInserted: [Wafv2ClientTypes.HTTPHeader]? = nil,
            responseCodeSent: Swift.Int? = nil,
            ruleNameWithinRuleGroup: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil,
            weight: Swift.Int = 0
        )
        {
            self.action = action
            self.labels = labels
            self.request = request
            self.requestHeadersInserted = requestHeadersInserted
            self.responseCodeSent = responseCodeSent
            self.ruleNameWithinRuleGroup = ruleNameWithinRuleGroup
            self.timestamp = timestamp
            self.weight = weight
        }
    }

}

extension Wafv2ClientTypes {
    public enum Scope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudfront
        case regional
        case sdkUnknown(Swift.String)

        public static var allCases: [Scope] {
            return [
                .cloudfront,
                .regional,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudfront: return "CLOUDFRONT"
            case .regional: return "REGIONAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scope(rawValue: rawValue) ?? Scope.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.SingleHeader: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension Wafv2ClientTypes.SingleHeader: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SingleHeader(name: \(Swift.String(describing: name)))"}
}

extension Wafv2ClientTypes {
    /// <p>One of the headers in a web request, identified by name, for example, <code>User-Agent</code> or <code>Referer</code>. This setting isn't case sensitive.</p>
    ///            <p>This is used only to indicate the web request component for AWS WAF to inspect, in the <a>FieldToMatch</a> specification. </p>
    public struct SingleHeader: Swift.Equatable {
        /// <p>The name of the query header to inspect.</p>
        public let name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension Wafv2ClientTypes.SingleQueryArgument: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension Wafv2ClientTypes.SingleQueryArgument: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SingleQueryArgument(name: \(Swift.String(describing: name)))"}
}

extension Wafv2ClientTypes {
    /// <p>One query argument in a web request, identified by name, for example <i>UserName</i> or <i>SalesRegion</i>. The name can be up to 30 characters long and isn't case sensitive. </p>
    public struct SingleQueryArgument: Swift.Equatable {
        /// <p>The name of the query argument to inspect.</p>
        public let name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension Wafv2ClientTypes.SizeConstraintStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case fieldToMatch = "FieldToMatch"
        case size = "Size"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let fieldToMatch = fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformations0 in textTransformations {
                try textTransformationsContainer.encode(texttransformations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[Wafv2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [Wafv2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
    }
}

extension Wafv2ClientTypes.SizeConstraintStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SizeConstraintStatement(comparisonOperator: \(Swift.String(describing: comparisonOperator)), fieldToMatch: \(Swift.String(describing: fieldToMatch)), size: \(Swift.String(describing: size)), textTransformations: \(Swift.String(describing: textTransformations)))"}
}

extension Wafv2ClientTypes {
    /// <p>A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. </p>
    ///          <p>If you configure AWS WAF to inspect the request body, AWS WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.</p>
    ///          <p>If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI <code>/logo.jpg</code> is nine characters long.</p>
    public struct SizeConstraintStatement: Swift.Equatable {
        /// <p>The operator to use to compare the request part to the size setting. </p>
        public let comparisonOperator: Wafv2ClientTypes.ComparisonOperator?
        /// <p>The part of a web request that you want AWS WAF to inspect. For more information, see <a>FieldToMatch</a>. </p>
        public let fieldToMatch: Wafv2ClientTypes.FieldToMatch?
        /// <p>The size, in byte, to compare to the request part, after any transformations.</p>
        public let size: Swift.Int
        /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
        ///          If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the
        ///          content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
        public let textTransformations: [Wafv2ClientTypes.TextTransformation]?

        public init (
            comparisonOperator: Wafv2ClientTypes.ComparisonOperator? = nil,
            fieldToMatch: Wafv2ClientTypes.FieldToMatch? = nil,
            size: Swift.Int = 0,
            textTransformations: [Wafv2ClientTypes.TextTransformation]? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.fieldToMatch = fieldToMatch
            self.size = size
            self.textTransformations = textTransformations
        }
    }

}

extension Wafv2ClientTypes.SqliMatchStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformations0 in textTransformations {
                try textTransformationsContainer.encode(texttransformations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[Wafv2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [Wafv2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
    }
}

extension Wafv2ClientTypes.SqliMatchStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SqliMatchStatement(fieldToMatch: \(Swift.String(describing: fieldToMatch)), textTransformations: \(Swift.String(describing: textTransformations)))"}
}

extension Wafv2ClientTypes {
    /// <p>Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.</p>
    public struct SqliMatchStatement: Swift.Equatable {
        /// <p>The part of a web request that you want AWS WAF to inspect. For more information, see <a>FieldToMatch</a>. </p>
        public let fieldToMatch: Wafv2ClientTypes.FieldToMatch?
        /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
        ///          If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the
        ///          content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
        public let textTransformations: [Wafv2ClientTypes.TextTransformation]?

        public init (
            fieldToMatch: Wafv2ClientTypes.FieldToMatch? = nil,
            textTransformations: [Wafv2ClientTypes.TextTransformation]? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.textTransformations = textTransformations
        }
    }

}

extension Wafv2ClientTypes.Statement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case andStatement = "AndStatement"
        case byteMatchStatement = "ByteMatchStatement"
        case geoMatchStatement = "GeoMatchStatement"
        case iPSetReferenceStatement = "IPSetReferenceStatement"
        case labelMatchStatement = "LabelMatchStatement"
        case managedRuleGroupStatement = "ManagedRuleGroupStatement"
        case notStatement = "NotStatement"
        case orStatement = "OrStatement"
        case rateBasedStatement = "RateBasedStatement"
        case regexPatternSetReferenceStatement = "RegexPatternSetReferenceStatement"
        case ruleGroupReferenceStatement = "RuleGroupReferenceStatement"
        case sizeConstraintStatement = "SizeConstraintStatement"
        case sqliMatchStatement = "SqliMatchStatement"
        case xssMatchStatement = "XssMatchStatement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let andStatement = andStatement {
            try encodeContainer.encode(andStatement, forKey: .andStatement)
        }
        if let byteMatchStatement = byteMatchStatement {
            try encodeContainer.encode(byteMatchStatement, forKey: .byteMatchStatement)
        }
        if let geoMatchStatement = geoMatchStatement {
            try encodeContainer.encode(geoMatchStatement, forKey: .geoMatchStatement)
        }
        if let iPSetReferenceStatement = iPSetReferenceStatement {
            try encodeContainer.encode(iPSetReferenceStatement, forKey: .iPSetReferenceStatement)
        }
        if let labelMatchStatement = labelMatchStatement {
            try encodeContainer.encode(labelMatchStatement, forKey: .labelMatchStatement)
        }
        if let managedRuleGroupStatement = managedRuleGroupStatement {
            try encodeContainer.encode(managedRuleGroupStatement, forKey: .managedRuleGroupStatement)
        }
        if let notStatement = notStatement {
            try encodeContainer.encode(notStatement, forKey: .notStatement)
        }
        if let orStatement = orStatement {
            try encodeContainer.encode(orStatement, forKey: .orStatement)
        }
        if let rateBasedStatement = rateBasedStatement {
            try encodeContainer.encode(rateBasedStatement, forKey: .rateBasedStatement)
        }
        if let regexPatternSetReferenceStatement = regexPatternSetReferenceStatement {
            try encodeContainer.encode(regexPatternSetReferenceStatement, forKey: .regexPatternSetReferenceStatement)
        }
        if let ruleGroupReferenceStatement = ruleGroupReferenceStatement {
            try encodeContainer.encode(ruleGroupReferenceStatement, forKey: .ruleGroupReferenceStatement)
        }
        if let sizeConstraintStatement = sizeConstraintStatement {
            try encodeContainer.encode(sizeConstraintStatement, forKey: .sizeConstraintStatement)
        }
        if let sqliMatchStatement = sqliMatchStatement {
            try encodeContainer.encode(sqliMatchStatement, forKey: .sqliMatchStatement)
        }
        if let xssMatchStatement = xssMatchStatement {
            try encodeContainer.encode(xssMatchStatement, forKey: .xssMatchStatement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let byteMatchStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ByteMatchStatement.self, forKey: .byteMatchStatement)
        byteMatchStatement = byteMatchStatementDecoded
        let sqliMatchStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.SqliMatchStatement.self, forKey: .sqliMatchStatement)
        sqliMatchStatement = sqliMatchStatementDecoded
        let xssMatchStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.XssMatchStatement.self, forKey: .xssMatchStatement)
        xssMatchStatement = xssMatchStatementDecoded
        let sizeConstraintStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.SizeConstraintStatement.self, forKey: .sizeConstraintStatement)
        sizeConstraintStatement = sizeConstraintStatementDecoded
        let geoMatchStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.GeoMatchStatement.self, forKey: .geoMatchStatement)
        geoMatchStatement = geoMatchStatementDecoded
        let ruleGroupReferenceStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RuleGroupReferenceStatement.self, forKey: .ruleGroupReferenceStatement)
        ruleGroupReferenceStatement = ruleGroupReferenceStatementDecoded
        let iPSetReferenceStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.IPSetReferenceStatement.self, forKey: .iPSetReferenceStatement)
        iPSetReferenceStatement = iPSetReferenceStatementDecoded
        let regexPatternSetReferenceStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RegexPatternSetReferenceStatement.self, forKey: .regexPatternSetReferenceStatement)
        regexPatternSetReferenceStatement = regexPatternSetReferenceStatementDecoded
        let rateBasedStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RateBasedStatement.self, forKey: .rateBasedStatement)
        rateBasedStatement = rateBasedStatementDecoded
        let andStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.AndStatement.self, forKey: .andStatement)
        andStatement = andStatementDecoded
        let orStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.OrStatement.self, forKey: .orStatement)
        orStatement = orStatementDecoded
        let notStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.NotStatement.self, forKey: .notStatement)
        notStatement = notStatementDecoded
        let managedRuleGroupStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ManagedRuleGroupStatement.self, forKey: .managedRuleGroupStatement)
        managedRuleGroupStatement = managedRuleGroupStatementDecoded
        let labelMatchStatementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.LabelMatchStatement.self, forKey: .labelMatchStatement)
        labelMatchStatement = labelMatchStatementDecoded
    }
}

extension Wafv2ClientTypes.Statement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Statement(andStatement: \(Swift.String(describing: andStatement)), byteMatchStatement: \(Swift.String(describing: byteMatchStatement)), geoMatchStatement: \(Swift.String(describing: geoMatchStatement)), iPSetReferenceStatement: \(Swift.String(describing: iPSetReferenceStatement)), labelMatchStatement: \(Swift.String(describing: labelMatchStatement)), managedRuleGroupStatement: \(Swift.String(describing: managedRuleGroupStatement)), notStatement: \(Swift.String(describing: notStatement)), orStatement: \(Swift.String(describing: orStatement)), rateBasedStatement: \(Swift.String(describing: rateBasedStatement)), regexPatternSetReferenceStatement: \(Swift.String(describing: regexPatternSetReferenceStatement)), ruleGroupReferenceStatement: \(Swift.String(describing: ruleGroupReferenceStatement)), sizeConstraintStatement: \(Swift.String(describing: sizeConstraintStatement)), sqliMatchStatement: \(Swift.String(describing: sqliMatchStatement)), xssMatchStatement: \(Swift.String(describing: xssMatchStatement)))"}
}

extension Wafv2ClientTypes {
    /// <p>The processing guidance for a <a>Rule</a>, used by AWS WAF to determine whether a web request matches the rule. </p>
    public struct Statement: Swift.Equatable {
        /// <p>A logical rule statement used to combine other rule statements with AND logic. You provide more than one <a>Statement</a> within the <code>AndStatement</code>. </p>
        public let andStatement: Wafv2ClientTypes.AndStatement?
        /// <p>A rule statement that defines a string match search for AWS WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want AWS WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the AWS WAF console and the developer guide, this is refered to as a string match statement.</p>
        public let byteMatchStatement: Wafv2ClientTypes.ByteMatchStatement?
        /// <p>A rule statement used to identify web requests based on country of origin.  </p>
        public let geoMatchStatement: Wafv2ClientTypes.GeoMatchStatement?
        /// <p>A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an <a>IPSet</a> that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see <a>CreateIPSet</a>.</p>
        ///          <p>Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.</p>
        public let iPSetReferenceStatement: Wafv2ClientTypes.IPSetReferenceStatement?
        /// <p>A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. </p>
        ///          <p>The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.  If you do not provide the fully qualified name in your label match string, AWS WAF performs the search for labels that were added in the same context as the label match statement. </p>
        public let labelMatchStatement: Wafv2ClientTypes.LabelMatchStatement?
        /// <p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <a>ListAvailableManagedRuleGroups</a>.</p>
        ///          <p>You can't nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p>
        public let managedRuleGroupStatement: Wafv2ClientTypes.ManagedRuleGroupStatement?
        /// <p>A logical rule statement used to negate the results of another rule statement. You provide one <a>Statement</a> within the <code>NotStatement</code>.</p>
        public let notStatement: Wafv2ClientTypes.NotStatement?
        /// <p>A logical rule statement used to combine other rule statements with OR logic. You provide more than one <a>Statement</a> within the <code>OrStatement</code>. </p>
        public let orStatement: Wafv2ClientTypes.OrStatement?
        /// <p>A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.</p>
        ///          <p>When the rule action triggers, AWS WAF blocks additional requests from the IP address until the request rate falls below the limit.</p>
        ///          <p>You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:</p>
        ///          <ul>
        ///             <li>
        ///                <p>An IP match statement with an IP set that specified the address 192.0.2.44.</p>
        ///             </li>
        ///             <li>
        ///                <p>A string match statement that searches in the User-Agent header for the string BadBot.</p>
        ///             </li>
        ///          </ul>
        ///          <p>In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.</p>
        ///          <p>You cannot nest a <code>RateBasedStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p>
        public let rateBasedStatement: Wafv2ClientTypes.RateBasedStatement?
        /// <p>A rule statement used to search web request components for matches with regular expressions. To use this, create a <a>RegexPatternSet</a> that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see <a>CreateRegexPatternSet</a>.</p>
        ///          <p>Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.</p>
        public let regexPatternSetReferenceStatement: Wafv2ClientTypes.RegexPatternSetReferenceStatement?
        /// <p>A rule statement used to run the rules that are defined in a <a>RuleGroup</a>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p>
        ///          <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p>
        public let ruleGroupReferenceStatement: Wafv2ClientTypes.RuleGroupReferenceStatement?
        /// <p>A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. </p>
        ///          <p>If you configure AWS WAF to inspect the request body, AWS WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.</p>
        ///          <p>If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI <code>/logo.jpg</code> is nine characters long.</p>
        public let sizeConstraintStatement: Wafv2ClientTypes.SizeConstraintStatement?
        /// <p>Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.</p>
        public let sqliMatchStatement: Wafv2ClientTypes.SqliMatchStatement?
        /// <p>A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests.
        ///          XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious
        ///          client-site scripts into other legitimate web browsers.
        ///          The XSS match statement provides the location in requests that you want AWS WAF to search and text transformations
        ///          to use on the search area before AWS WAF searches for character sequences that are likely to be malicious strings. </p>
        public let xssMatchStatement: Wafv2ClientTypes.XssMatchStatement?

        public init (
            andStatement: Wafv2ClientTypes.AndStatement? = nil,
            byteMatchStatement: Wafv2ClientTypes.ByteMatchStatement? = nil,
            geoMatchStatement: Wafv2ClientTypes.GeoMatchStatement? = nil,
            iPSetReferenceStatement: Wafv2ClientTypes.IPSetReferenceStatement? = nil,
            labelMatchStatement: Wafv2ClientTypes.LabelMatchStatement? = nil,
            managedRuleGroupStatement: Wafv2ClientTypes.ManagedRuleGroupStatement? = nil,
            notStatement: Wafv2ClientTypes.NotStatement? = nil,
            orStatement: Wafv2ClientTypes.OrStatement? = nil,
            rateBasedStatement: Wafv2ClientTypes.RateBasedStatement? = nil,
            regexPatternSetReferenceStatement: Wafv2ClientTypes.RegexPatternSetReferenceStatement? = nil,
            ruleGroupReferenceStatement: Wafv2ClientTypes.RuleGroupReferenceStatement? = nil,
            sizeConstraintStatement: Wafv2ClientTypes.SizeConstraintStatement? = nil,
            sqliMatchStatement: Wafv2ClientTypes.SqliMatchStatement? = nil,
            xssMatchStatement: Wafv2ClientTypes.XssMatchStatement? = nil
        )
        {
            self.andStatement = andStatement
            self.byteMatchStatement = byteMatchStatement
            self.geoMatchStatement = geoMatchStatement
            self.iPSetReferenceStatement = iPSetReferenceStatement
            self.labelMatchStatement = labelMatchStatement
            self.managedRuleGroupStatement = managedRuleGroupStatement
            self.notStatement = notStatement
            self.orStatement = orStatement
            self.rateBasedStatement = rateBasedStatement
            self.regexPatternSetReferenceStatement = regexPatternSetReferenceStatement
            self.ruleGroupReferenceStatement = ruleGroupReferenceStatement
            self.sizeConstraintStatement = sizeConstraintStatement
            self.sqliMatchStatement = sqliMatchStatement
            self.xssMatchStatement = xssMatchStatement
        }
    }

}

extension Wafv2ClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Wafv2ClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension Wafv2ClientTypes {
    /// <p>A tag associated with an AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a
    ///   specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.</p>
    ///         <p>You can tag the AWS resources that you manage through AWS WAF: web ACLs, rule groups, IP
    ///   sets, and regex pattern sets. You can't manage or view tags through the AWS WAF console. </p>
    public struct Tag: Swift.Equatable {
        /// <p>Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.</p>
        public let key: Swift.String?
        /// <p>Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension Wafv2ClientTypes.TagInfoForResource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagList = "TagList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagListContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[Wafv2ClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [Wafv2ClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}

extension Wafv2ClientTypes.TagInfoForResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagInfoForResource(resourceARN: \(Swift.String(describing: resourceARN)), tagList: \(Swift.String(describing: tagList)))"}
}

extension Wafv2ClientTypes {
    /// <p>The collection of tagging definitions for an AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a
    ///   specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.</p>
    ///         <p>You can tag the AWS resources that you manage through AWS WAF: web ACLs, rule groups, IP
    ///   sets, and regex pattern sets. You can't manage or view tags through the AWS WAF console. </p>
    public struct TagInfoForResource: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the resource.</p>
        public let resourceARN: Swift.String?
        /// <p>The array of <a>Tag</a> objects defined for the resource. </p>
        public let tagList: [Wafv2ClientTypes.Tag]?

        public init (
            resourceARN: Swift.String? = nil,
            tagList: [Wafv2ClientTypes.Tag]? = nil
        )
        {
            self.resourceARN = resourceARN
            self.tagList = tagList
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceARN: \(Swift.String(describing: resourceARN)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    public let resourceARN: Swift.String?
    /// <p>An array of key:value pairs to associate with the resource.</p>
    public let tags: [Wafv2ClientTypes.Tag]?

    public init (
        resourceARN: Swift.String? = nil,
        tags: [Wafv2ClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let resourceARN: Swift.String?
    public let tags: [Wafv2ClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[Wafv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Wafv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Wafv2ClientTypes.TextTransformation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case priority = "Priority"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priorityDecoded = try containerValues.decode(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.TextTransformationType.self, forKey: .type)
        type = typeDecoded
    }
}

extension Wafv2ClientTypes.TextTransformation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TextTransformation(priority: \(Swift.String(describing: priority)), type: \(Swift.String(describing: type)))"}
}

extension Wafv2ClientTypes {
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
    ///          </p>
    public struct TextTransformation: Swift.Equatable {
        /// <p>Sets the relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all
        ///          transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. </p>
        public let priority: Swift.Int
        /// <p>You can specify the following transformation types:</p>
        ///          <p>
        ///             <b>CMD_LINE</b>
        ///          </p>
        ///          <p>When you're concerned that attackers are injecting an operating system command line
        ///          command and using unusual formatting to disguise some or all of the command, use this
        ///          option to perform the following transformations:</p>
        ///          <ul>
        ///             <li>
        ///                <p>Delete the following characters: \ " ' ^</p>
        ///             </li>
        ///             <li>
        ///                <p>Delete spaces before the following characters: / (</p>
        ///             </li>
        ///             <li>
        ///                <p>Replace the following characters with a space: , ;</p>
        ///             </li>
        ///             <li>
        ///                <p>Replace multiple spaces with one space</p>
        ///             </li>
        ///             <li>
        ///                <p>Convert uppercase letters (A-Z) to lowercase (a-z)</p>
        ///             </li>
        ///          </ul>
        ///
        ///          <p>
        ///             <b>COMPRESS_WHITE_SPACE</b>
        ///          </p>
        ///          <p>Use this option to replace the following characters with a space character (decimal 32):</p>
        ///          <ul>
        ///             <li>
        ///                <p>\f, formfeed, decimal 12</p>
        ///             </li>
        ///             <li>
        ///                <p>\t, tab, decimal 9</p>
        ///             </li>
        ///             <li>
        ///                <p>\n, newline, decimal 10</p>
        ///             </li>
        ///             <li>
        ///                <p>\r, carriage return, decimal 13</p>
        ///             </li>
        ///             <li>
        ///                <p>\v, vertical tab, decimal 11</p>
        ///             </li>
        ///             <li>
        ///                <p>non-breaking space, decimal 160</p>
        ///             </li>
        ///          </ul>
        ///          <p>
        ///             <code>COMPRESS_WHITE_SPACE</code> also replaces multiple spaces with one space.</p>		
        ///          <p>
        ///             <b>HTML_ENTITY_DECODE</b>
        ///          </p>
        ///          <p>Use this option to replace HTML-encoded characters with unencoded characters. <code>HTML_ENTITY_DECODE</code> performs
        ///          the following operations:</p>
        ///          <ul>
        ///             <li>
        ///                <p>Replaces <code>(ampersand)quot;</code> with <code>"</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>Replaces <code>(ampersand)nbsp;</code> with a non-breaking space, decimal 160</p>
        ///             </li>
        ///             <li>
        ///                <p>Replaces <code>(ampersand)lt;</code> with a "less than" symbol</p>
        ///             </li>
        ///             <li>
        ///                <p>Replaces <code>(ampersand)gt;</code> with <code>></code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>Replaces characters that are represented in hexadecimal format, <code>(ampersand)#xhhhh;</code>, with the corresponding characters</p>
        ///             </li>
        ///             <li>
        ///                <p>Replaces characters that are represented in decimal format, <code>(ampersand)#nnnn;</code>, with the corresponding
        ///                characters</p>
        ///             </li>
        ///          </ul>		
        ///          <p>
        ///             <b>LOWERCASE</b>
        ///          </p>
        ///          <p>Use this option to convert uppercase letters (A-Z) to lowercase (a-z).</p>		
        ///          <p>
        ///             <b>URL_DECODE</b>
        ///          </p>
        ///          <p>Use this option to decode a URL-encoded value.</p>		
        ///          <p>
        ///             <b>NONE</b>
        ///          </p>
        ///          <p>Specify <code>NONE</code> if you don't want any text transformations.</p>
        public let type: Wafv2ClientTypes.TextTransformationType?

        public init (
            priority: Swift.Int = 0,
            type: Wafv2ClientTypes.TextTransformationType? = nil
        )
        {
            self.priority = priority
            self.type = type
        }
    }

}

extension Wafv2ClientTypes {
    public enum TextTransformationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cmdLine
        case compressWhiteSpace
        case htmlEntityDecode
        case lowercase
        case `none`
        case urlDecode
        case sdkUnknown(Swift.String)

        public static var allCases: [TextTransformationType] {
            return [
                .cmdLine,
                .compressWhiteSpace,
                .htmlEntityDecode,
                .lowercase,
                .none,
                .urlDecode,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cmdLine: return "CMD_LINE"
            case .compressWhiteSpace: return "COMPRESS_WHITE_SPACE"
            case .htmlEntityDecode: return "HTML_ENTITY_DECODE"
            case .lowercase: return "LOWERCASE"
            case .none: return "NONE"
            case .urlDecode: return "URL_DECODE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TextTransformationType(rawValue: rawValue) ?? TextTransformationType.sdkUnknown(rawValue)
        }
    }
}

extension Wafv2ClientTypes.TimeWindow: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension Wafv2ClientTypes.TimeWindow: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TimeWindow(endTime: \(Swift.String(describing: endTime)), startTime: \(Swift.String(describing: startTime)))"}
}

extension Wafv2ClientTypes {
    /// <p>In a <a>GetSampledRequests</a> request, the <code>StartTime</code> and <code>EndTime</code> objects specify the time range
    ///          for which you want AWS WAF to return a sample of web requests.</p>
    ///          <p>You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, <code>Z</code>. For example, <code>"2016-09-27T14:50Z"</code>. You can specify any time range in the previous three hours.</p>
    ///          <p>In a <a>GetSampledRequests</a> response, the <code>StartTime</code> and <code>EndTime</code> objects specify the time range
    ///          for which AWS WAF actually returned a sample of web requests. AWS WAF gets the specified number of requests from among the first
    ///          5,000 requests that your AWS resource receives during the specified time period. If your resource receives more than 5,000
    ///          requests during that period, AWS WAF stops sampling after the 5,000th request. In that case, <code>EndTime</code>
    ///          is the time that AWS WAF received the 5,000th request.</p>
    public struct TimeWindow: Swift.Equatable {
        /// <p>The end of the time range from which you want <code>GetSampledRequests</code> to return a sample of the requests that your
        ///          AWS resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, <code>Z</code>. For example, <code>"2016-09-27T14:50Z"</code>. You can specify any time range in the previous three hours.</p>
        public let endTime: ClientRuntime.Date?
        /// <p>The beginning of the time range from which you want <code>GetSampledRequests</code> to return a sample of the requests that your
        ///          AWS resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, <code>Z</code>. For example, <code>"2016-09-27T14:50Z"</code>. You can specify any time range in the previous three hours.</p>
        public let startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

public struct UntagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceARN: \(Swift.String(describing: resourceARN)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    public let resourceARN: Swift.String?
    /// <p>An array of keys identifying the tags to disassociate from the resource.</p>
    public let tagKeys: [Swift.String]?

    public init (
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    public let resourceARN: Swift.String?
    public let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateIPSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateIPSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateIPSetOutputError>
}

extension UpdateIPSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateIPSetInput(addresses: \(Swift.String(describing: addresses)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)), scope: \(Swift.String(describing: scope)))"}
}

extension UpdateIPSetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addresses)
            for ipaddresses0 in addresses {
                try addressesContainer.encode(ipaddresses0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct UpdateIPSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateIPSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateIPSetOutputError>
}

public struct UpdateIPSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateIPSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateIPSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateIPSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateIPSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateIPSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateIPSetOutputError>
}

public struct UpdateIPSetInput: Swift.Equatable {
    /// <p>Contains an array of strings that specify one or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. AWS WAF supports all IPv4 and IPv6 CIDR ranges except for /0. </p>
    ///          <p>Examples: </p>
    ///          <ul>
    ///             <li>
    ///                <p>To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify <code>192.0.2.44/32</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify
    ///                <code>192.0.2.0/24</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify <code>1111:0000:0000:0000:0000:0000:0000:0111/128</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify <code>1111:0000:0000:0000:0000:0000:0000:0000/64</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless
    ///          Inter-Domain Routing</a>.</p>
    public let addresses: [Swift.String]?
    /// <p>A description of the IP set that helps with identification. </p>
    public let description: Swift.String?
    /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?
    /// <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
    public let name: Swift.String?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        addresses: [Swift.String]? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.addresses = addresses
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

struct UpdateIPSetInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
    public let description: Swift.String?
    public let addresses: [Swift.String]?
    public let lockToken: Swift.String?
}

extension UpdateIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let addressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addresses)
        var addressesDecoded0:[Swift.String]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [Swift.String]()
            for string0 in addressesContainer {
                if let string0 = string0 {
                    addressesDecoded0?.append(string0)
                }
            }
        }
        addresses = addressesDecoded0
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension UpdateIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateIPSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateIPSetOutputResponse(nextLockToken: \(Swift.String(describing: nextLockToken)))"}
}

extension UpdateIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateIPSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextLockToken = output.nextLockToken
        } else {
            self.nextLockToken = nil
        }
    }
}

public struct UpdateIPSetOutputResponse: Swift.Equatable {
    /// <p>A token used for optimistic locking. AWS WAF returns this token to your update requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
    public let nextLockToken: Swift.String?

    public init (
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

struct UpdateIPSetOutputResponseBody: Swift.Equatable {
    public let nextLockToken: Swift.String?
}

extension UpdateIPSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextLockToken = "NextLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextLockToken)
        nextLockToken = nextLockTokenDecoded
    }
}

public struct UpdateRegexPatternSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRegexPatternSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRegexPatternSetOutputError>
}

extension UpdateRegexPatternSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRegexPatternSetInput(description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)), regularExpressionList: \(Swift.String(describing: regularExpressionList)), scope: \(Swift.String(describing: scope)))"}
}

extension UpdateRegexPatternSetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regularExpressionList = regularExpressionList {
            var regularExpressionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regularExpressionList)
            for regularexpressionlist0 in regularExpressionList {
                try regularExpressionListContainer.encode(regularexpressionlist0)
            }
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

public struct UpdateRegexPatternSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRegexPatternSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRegexPatternSetOutputError>
}

public struct UpdateRegexPatternSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRegexPatternSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRegexPatternSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRegexPatternSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRegexPatternSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRegexPatternSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRegexPatternSetOutputError>
}

public struct UpdateRegexPatternSetInput: Swift.Equatable {
    /// <p>A description of the set that helps with identification. </p>
    public let description: Swift.String?
    /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?
    /// <p>The name of the set. You cannot change the name after you create the set.</p>
    public let name: Swift.String?
    /// <p></p>
    public let regularExpressionList: [Wafv2ClientTypes.Regex]?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?

    public init (
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        regularExpressionList: [Wafv2ClientTypes.Regex]? = nil,
        scope: Wafv2ClientTypes.Scope? = nil
    )
    {
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.regularExpressionList = regularExpressionList
        self.scope = scope
    }
}

struct UpdateRegexPatternSetInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
    public let description: Swift.String?
    public let regularExpressionList: [Wafv2ClientTypes.Regex]?
    public let lockToken: Swift.String?
}

extension UpdateRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let regularExpressionListContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Regex?].self, forKey: .regularExpressionList)
        var regularExpressionListDecoded0:[Wafv2ClientTypes.Regex]? = nil
        if let regularExpressionListContainer = regularExpressionListContainer {
            regularExpressionListDecoded0 = [Wafv2ClientTypes.Regex]()
            for structure0 in regularExpressionListContainer {
                if let structure0 = structure0 {
                    regularExpressionListDecoded0?.append(structure0)
                }
            }
        }
        regularExpressionList = regularExpressionListDecoded0
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension UpdateRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRegexPatternSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRegexPatternSetOutputResponse(nextLockToken: \(Swift.String(describing: nextLockToken)))"}
}

extension UpdateRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateRegexPatternSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextLockToken = output.nextLockToken
        } else {
            self.nextLockToken = nil
        }
    }
}

public struct UpdateRegexPatternSetOutputResponse: Swift.Equatable {
    /// <p>A token used for optimistic locking. AWS WAF returns this token to your update requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
    public let nextLockToken: Swift.String?

    public init (
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

struct UpdateRegexPatternSetOutputResponseBody: Swift.Equatable {
    public let nextLockToken: Swift.String?
}

extension UpdateRegexPatternSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextLockToken = "NextLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextLockToken)
        nextLockToken = nextLockTokenDecoded
    }
}

public struct UpdateRuleGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRuleGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRuleGroupOutputError>
}

extension UpdateRuleGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRuleGroupInput(customResponseBodies: \(Swift.String(describing: customResponseBodies)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)), rules: \(Swift.String(describing: rules)), scope: \(Swift.String(describing: scope)), visibilityConfig: \(Swift.String(describing: visibilityConfig)))"}
}

extension UpdateRuleGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponseBodies = "CustomResponseBodies"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customresponsebodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customresponsebodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rules0 in rules {
                try rulesContainer.encode(rules0)
            }
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let visibilityConfig = visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }
}

public struct UpdateRuleGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRuleGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRuleGroupOutputError>
}

public struct UpdateRuleGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRuleGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRuleGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRuleGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRuleGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRuleGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRuleGroupOutputError>
}

public struct UpdateRuleGroupInput: Swift.Equatable {
    /// <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. </p>
    ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    ///          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">AWS WAF quotas</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    public let customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
    /// <p>A description of the rule group that helps with identification. </p>
    public let description: Swift.String?
    /// <p>A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?
    /// <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
    public let name: Swift.String?
    /// <p>The <a>Rule</a> statements used to identify the web requests that you
    ///          want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching
    ///          web requests, and parameters that govern how AWS WAF handles them.
    ///       </p>
    public let rules: [Wafv2ClientTypes.Rule]?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?
    /// <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
    public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?

    public init (
        customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [Wafv2ClientTypes.Rule]? = nil,
        scope: Wafv2ClientTypes.Scope? = nil,
        visibilityConfig: Wafv2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.customResponseBodies = customResponseBodies
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.rules = rules
        self.scope = scope
        self.visibilityConfig = visibilityConfig
    }
}

struct UpdateRuleGroupInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
    public let description: Swift.String?
    public let rules: [Wafv2ClientTypes.Rule]?
    public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?
    public let lockToken: Swift.String?
    public let customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
}

extension UpdateRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponseBodies = "CustomResponseBodies"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case visibilityConfig = "VisibilityConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[Wafv2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Wafv2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: Wafv2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:Wafv2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
    }
}

extension UpdateRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFSubscriptionNotFoundException" : self = .wAFSubscriptionNotFoundException(try WAFSubscriptionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFSubscriptionNotFoundException(WAFSubscriptionNotFoundException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRuleGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRuleGroupOutputResponse(nextLockToken: \(Swift.String(describing: nextLockToken)))"}
}

extension UpdateRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextLockToken = output.nextLockToken
        } else {
            self.nextLockToken = nil
        }
    }
}

public struct UpdateRuleGroupOutputResponse: Swift.Equatable {
    /// <p>A token used for optimistic locking. AWS WAF returns this token to your update requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
    public let nextLockToken: Swift.String?

    public init (
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

struct UpdateRuleGroupOutputResponseBody: Swift.Equatable {
    public let nextLockToken: Swift.String?
}

extension UpdateRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextLockToken = "NextLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextLockToken)
        nextLockToken = nextLockTokenDecoded
    }
}

public struct UpdateWebACLInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateWebACLInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateWebACLOutputError>
}

extension UpdateWebACLInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateWebACLInput(customResponseBodies: \(Swift.String(describing: customResponseBodies)), defaultAction: \(Swift.String(describing: defaultAction)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)), rules: \(Swift.String(describing: rules)), scope: \(Swift.String(describing: scope)), visibilityConfig: \(Swift.String(describing: visibilityConfig)))"}
}

extension UpdateWebACLInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customresponsebodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customresponsebodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let defaultAction = defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rules0 in rules {
                try rulesContainer.encode(rules0)
            }
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let visibilityConfig = visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }
}

public struct UpdateWebACLInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateWebACLInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateWebACLOutputError>
}

public struct UpdateWebACLInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateWebACLInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateWebACLInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateWebACLInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateWebACLOutputError>
}

public struct UpdateWebACLInput: Swift.Equatable {
    /// <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. </p>
    ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    ///          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">AWS WAF quotas</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    public let customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
    /// <p>The action to perform if none of the <code>Rules</code> contained in the <code>WebACL</code> match. </p>
    public let defaultAction: Wafv2ClientTypes.DefaultAction?
    /// <p>A description of the Web ACL that helps with identification. </p>
    public let description: Swift.String?
    /// <p>The unique identifier for the Web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: Swift.String?
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: Swift.String?
    /// <p>The name of the Web ACL. You cannot change the name of a Web ACL after you create it.</p>
    public let name: Swift.String?
    /// <p>The <a>Rule</a> statements used to identify the web requests that you
    ///          want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching
    ///          web requests, and parameters that govern how AWS WAF handles them.
    ///       </p>
    public let rules: [Wafv2ClientTypes.Rule]?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Wafv2ClientTypes.Scope?
    /// <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
    public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?

    public init (
        customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil,
        defaultAction: Wafv2ClientTypes.DefaultAction? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [Wafv2ClientTypes.Rule]? = nil,
        scope: Wafv2ClientTypes.Scope? = nil,
        visibilityConfig: Wafv2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.customResponseBodies = customResponseBodies
        self.defaultAction = defaultAction
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.rules = rules
        self.scope = scope
        self.visibilityConfig = visibilityConfig
    }
}

struct UpdateWebACLInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let scope: Wafv2ClientTypes.Scope?
    public let id: Swift.String?
    public let defaultAction: Wafv2ClientTypes.DefaultAction?
    public let description: Swift.String?
    public let rules: [Wafv2ClientTypes.Rule]?
    public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?
    public let lockToken: Swift.String?
    public let customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
}

extension UpdateWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case visibilityConfig = "VisibilityConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let defaultActionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.DefaultAction.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[Wafv2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Wafv2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: Wafv2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:Wafv2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
    }
}

extension UpdateWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidResourceException" : self = .wAFInvalidResourceException(try WAFInvalidResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFSubscriptionNotFoundException" : self = .wAFSubscriptionNotFoundException(try WAFSubscriptionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFInvalidResourceException(WAFInvalidResourceException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFSubscriptionNotFoundException(WAFSubscriptionNotFoundException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateWebACLOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateWebACLOutputResponse(nextLockToken: \(Swift.String(describing: nextLockToken)))"}
}

extension UpdateWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextLockToken = output.nextLockToken
        } else {
            self.nextLockToken = nil
        }
    }
}

public struct UpdateWebACLOutputResponse: Swift.Equatable {
    /// <p>A token used for optimistic locking. AWS WAF returns this token to your update requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
    public let nextLockToken: Swift.String?

    public init (
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

struct UpdateWebACLOutputResponseBody: Swift.Equatable {
    public let nextLockToken: Swift.String?
}

extension UpdateWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextLockToken = "NextLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextLockToken)
        nextLockToken = nextLockTokenDecoded
    }
}

extension Wafv2ClientTypes.UriPath: Swift.Codable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Wafv2ClientTypes.UriPath: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UriPath()"}
}

extension Wafv2ClientTypes {
    /// <p>The path component of the URI of a web request. This is the part of a web request that identifies a resource, for example, <code>/images/daily-ad.jpg</code>.</p>
    ///          <p>This is used only to indicate the web request component for AWS WAF to inspect, in the <a>FieldToMatch</a> specification. </p>
    public struct UriPath: Swift.Equatable {

        public init() {}
    }

}

extension Wafv2ClientTypes.VisibilityConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchMetricsEnabled = "CloudWatchMetricsEnabled"
        case metricName = "MetricName"
        case sampledRequestsEnabled = "SampledRequestsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cloudWatchMetricsEnabled != false {
            try encodeContainer.encode(cloudWatchMetricsEnabled, forKey: .cloudWatchMetricsEnabled)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if sampledRequestsEnabled != false {
            try encodeContainer.encode(sampledRequestsEnabled, forKey: .sampledRequestsEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sampledRequestsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .sampledRequestsEnabled)
        sampledRequestsEnabled = sampledRequestsEnabledDecoded
        let cloudWatchMetricsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .cloudWatchMetricsEnabled)
        cloudWatchMetricsEnabled = cloudWatchMetricsEnabledDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
    }
}

extension Wafv2ClientTypes.VisibilityConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VisibilityConfig(cloudWatchMetricsEnabled: \(Swift.String(describing: cloudWatchMetricsEnabled)), metricName: \(Swift.String(describing: metricName)), sampledRequestsEnabled: \(Swift.String(describing: sampledRequestsEnabled)))"}
}

extension Wafv2ClientTypes {
    /// <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
    public struct VisibilityConfig: Swift.Equatable {
        /// <p>A boolean indicating whether the associated resource sends metrics to CloudWatch. For the list of available metrics, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics">AWS WAF Metrics</a>.</p>
        public let cloudWatchMetricsEnabled: Swift.Bool
        /// <p>A name of the CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain
        ///          whitespace or metric names reserved for AWS WAF, for example "All" and "Default_Action." </p>
        public let metricName: Swift.String?
        /// <p>A boolean indicating whether AWS WAF should store a sampling of the web
        ///            requests that match the rules. You can view the sampled requests through the
        ///            AWS WAF console. </p>
        public let sampledRequestsEnabled: Swift.Bool

        public init (
            cloudWatchMetricsEnabled: Swift.Bool = false,
            metricName: Swift.String? = nil,
            sampledRequestsEnabled: Swift.Bool = false
        )
        {
            self.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled
            self.metricName = metricName
            self.sampledRequestsEnabled = sampledRequestsEnabled
        }
    }

}

extension WAFAssociatedItemException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFAssociatedItemException(message: \(Swift.String(describing: message)))"}
}

extension WAFAssociatedItemException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFAssociatedItemExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>AWS WAF couldn’t perform the operation because your resource is being used by another resource or it’s associated with another resource. </p>
public struct WAFAssociatedItemException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFAssociatedItemExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFAssociatedItemExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFDuplicateItemException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFDuplicateItemException(message: \(Swift.String(describing: message)))"}
}

extension WAFDuplicateItemException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFDuplicateItemExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>AWS WAF couldn’t perform the operation because the resource that you tried to save is a duplicate of an existing one.</p>
public struct WAFDuplicateItemException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFDuplicateItemExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFDuplicateItemExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFInternalErrorException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFInternalErrorException(message: \(Swift.String(describing: message)))"}
}

extension WAFInternalErrorException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFInternalErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Your request is valid, but AWS WAF couldn’t perform the operation because of a system problem. Retry your request. </p>
public struct WAFInternalErrorException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInternalErrorExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFInternalErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFInvalidOperationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFInvalidOperationException(message: \(Swift.String(describing: message)))"}
}

extension WAFInvalidOperationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFInvalidOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation isn't valid. </p>
public struct WAFInvalidOperationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInvalidOperationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFInvalidOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFInvalidParameterException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFInvalidParameterException(field: \(Swift.String(describing: field)), parameter: \(Swift.String(describing: parameter)), reason: \(Swift.String(describing: reason)), message: \(Swift.String(describing: message)))"}
}

extension WAFInvalidParameterException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFInvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.field = output.field
            self.message = output.message
            self.parameter = output.parameter
            self.reason = output.reason
        } else {
            self.field = nil
            self.parameter = nil
            self.reason = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation failed because AWS WAF didn't recognize a parameter in the request. For example: </p>
///          <ul>
///             <li>
///                <p>You specified an invalid parameter name or value.</p>
///             </li>
///             <li>
///                <p>Your nested statement isn't valid. You might have tried to nest a statement that can’t be nested. </p>
///             </li>
///             <li>
///                <p>You tried to update a <code>WebACL</code> with a <code>DefaultAction</code> that isn't among the types
///                available at <a>DefaultAction</a>.</p>
///             </li>
///             <li>
///                <p>Your request references an ARN that is malformed, or corresponds to a resource with which a Web ACL cannot be associated.</p>
///             </li>
///          </ul>
public struct WAFInvalidParameterException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var field: Wafv2ClientTypes.ParameterExceptionField?
    public var message: Swift.String?
    public var parameter: Swift.String?
    public var reason: Swift.String?

    public init (
        field: Wafv2ClientTypes.ParameterExceptionField? = nil,
        message: Swift.String? = nil,
        parameter: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.field = field
        self.message = message
        self.parameter = parameter
        self.reason = reason
    }
}

struct WAFInvalidParameterExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let field: Wafv2ClientTypes.ParameterExceptionField?
    public let parameter: Swift.String?
    public let reason: Swift.String?
}

extension WAFInvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case field = "Field"
        case parameter = "Parameter"
        case reason = "Reason"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let fieldDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.ParameterExceptionField.self, forKey: .field)
        field = fieldDecoded
        let parameterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameter)
        parameter = parameterDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension WAFInvalidPermissionPolicyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFInvalidPermissionPolicyException(message: \(Swift.String(describing: message)))"}
}

extension WAFInvalidPermissionPolicyException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFInvalidPermissionPolicyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation failed because the specified policy isn't in the proper format. </p>
///
///          <p>The policy specifications must conform to the following:</p>
///          <ul>
///             <li>
///                <p>The policy must be composed using IAM Policy version 2012-10-17 or version 2015-01-01.</p>
///             </li>
///             <li>
///                <p>The policy must include specifications for <code>Effect</code>, <code>Action</code>, and <code>Principal</code>.</p>
///             </li>
///             <li>
///                <p>
///                   <code>Effect</code> must specify <code>Allow</code>.</p>
///             </li>
///             <li>
///                <p>
///                   <code>Action</code> must specify <code>wafv2:CreateWebACL</code>, <code>wafv2:UpdateWebACL</code>, and <code>wafv2:PutFirewallManagerRuleGroups</code>. AWS WAF rejects any extra actions or wildcard actions in the policy.</p>
///             </li>
///             <li>
///                <p>The policy must not include a <code>Resource</code> parameter.</p>
///             </li>
///          </ul>
///          <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">IAM Policies</a>.  </p>
public struct WAFInvalidPermissionPolicyException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInvalidPermissionPolicyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFInvalidPermissionPolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFInvalidResourceException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFInvalidResourceException(message: \(Swift.String(describing: message)))"}
}

extension WAFInvalidResourceException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFInvalidResourceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>AWS WAF couldn’t perform the operation because the resource that you requested isn’t valid. Check the resource, and try again.</p>
public struct WAFInvalidResourceException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInvalidResourceExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFInvalidResourceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFLimitsExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFLimitsExceededException(message: \(Swift.String(describing: message)))"}
}

extension WAFLimitsExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFLimitsExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>AWS WAF couldn’t perform the operation because you exceeded your resource limit. For example, the maximum number of <code>WebACL</code> objects that you can create
///          for an AWS account. For more information, see
///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">Limits</a> in the <i>AWS WAF Developer Guide</i>.</p>
public struct WAFLimitsExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFLimitsExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFLimitsExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFNonexistentItemException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFNonexistentItemException(message: \(Swift.String(describing: message)))"}
}

extension WAFNonexistentItemException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFNonexistentItemExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>AWS WAF couldn’t perform the operation because your resource doesn’t exist. </p>
public struct WAFNonexistentItemException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFNonexistentItemExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFNonexistentItemExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFOptimisticLockException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFOptimisticLockException(message: \(Swift.String(describing: message)))"}
}

extension WAFOptimisticLockException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFOptimisticLockExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>AWS WAF couldn’t save your changes because you tried to update or delete a resource that has changed since you last retrieved it. Get the resource again, make any changes you need to make to the new copy, and retry your operation. </p>
public struct WAFOptimisticLockException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFOptimisticLockExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFOptimisticLockExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFServiceLinkedRoleErrorException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFServiceLinkedRoleErrorException(message: \(Swift.String(describing: message)))"}
}

extension WAFServiceLinkedRoleErrorException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFServiceLinkedRoleErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>AWS WAF is not able to access the service linked role. This can be caused by a previous <code>PutLoggingConfiguration</code> request, which can lock the service linked role for about 20 seconds. Please try your request again. The service linked role can also be locked by a previous <code>DeleteServiceLinkedRole</code> request, which can lock the role for 15 minutes or more. If you recently made a call to <code>DeleteServiceLinkedRole</code>, wait at least 15 minutes and try the request again. If you receive this same exception again, you will have to wait additional time until the role is unlocked.</p>
public struct WAFServiceLinkedRoleErrorException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFServiceLinkedRoleErrorExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFServiceLinkedRoleErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFSubscriptionNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFSubscriptionNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension WAFSubscriptionNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFSubscriptionNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You tried to use a managed rule group that's available by subscription, but you aren't subscribed to it yet. </p>
public struct WAFSubscriptionNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFSubscriptionNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFSubscriptionNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFTagOperationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFTagOperationException(message: \(Swift.String(describing: message)))"}
}

extension WAFTagOperationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFTagOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An error occurred during the tagging operation. Retry your request.</p>
public struct WAFTagOperationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFTagOperationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFTagOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFTagOperationInternalErrorException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFTagOperationInternalErrorException(message: \(Swift.String(describing: message)))"}
}

extension WAFTagOperationInternalErrorException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFTagOperationInternalErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>AWS WAF couldn’t perform your tagging operation because of an internal error. Retry your request.</p>
public struct WAFTagOperationInternalErrorException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFTagOperationInternalErrorExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFTagOperationInternalErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFUnavailableEntityException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WAFUnavailableEntityException(message: \(Swift.String(describing: message)))"}
}

extension WAFUnavailableEntityException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: WAFUnavailableEntityExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>AWS WAF couldn’t retrieve the resource that you requested. Retry your request.</p>
public struct WAFUnavailableEntityException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFUnavailableEntityExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension WAFUnavailableEntityExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Wafv2ClientTypes.WebACL: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case capacity = "Capacity"
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case id = "Id"
        case labelNamespace = "LabelNamespace"
        case managedByFirewallManager = "ManagedByFirewallManager"
        case name = "Name"
        case postProcessFirewallManagerRuleGroups = "PostProcessFirewallManagerRuleGroups"
        case preProcessFirewallManagerRuleGroups = "PreProcessFirewallManagerRuleGroups"
        case rules = "Rules"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if capacity != 0 {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customresponsebodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customresponsebodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let defaultAction = defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let labelNamespace = labelNamespace {
            try encodeContainer.encode(labelNamespace, forKey: .labelNamespace)
        }
        if managedByFirewallManager != false {
            try encodeContainer.encode(managedByFirewallManager, forKey: .managedByFirewallManager)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let postProcessFirewallManagerRuleGroups = postProcessFirewallManagerRuleGroups {
            var postProcessFirewallManagerRuleGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .postProcessFirewallManagerRuleGroups)
            for firewallmanagerrulegroups0 in postProcessFirewallManagerRuleGroups {
                try postProcessFirewallManagerRuleGroupsContainer.encode(firewallmanagerrulegroups0)
            }
        }
        if let preProcessFirewallManagerRuleGroups = preProcessFirewallManagerRuleGroups {
            var preProcessFirewallManagerRuleGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .preProcessFirewallManagerRuleGroups)
            for firewallmanagerrulegroups0 in preProcessFirewallManagerRuleGroups {
                try preProcessFirewallManagerRuleGroupsContainer.encode(firewallmanagerrulegroups0)
            }
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rules0 in rules {
                try rulesContainer.encode(rules0)
            }
        }
        if let visibilityConfig = visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let defaultActionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.DefaultAction.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[Wafv2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Wafv2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let capacityDecoded = try containerValues.decode(Swift.Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let preProcessFirewallManagerRuleGroupsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.FirewallManagerRuleGroup?].self, forKey: .preProcessFirewallManagerRuleGroups)
        var preProcessFirewallManagerRuleGroupsDecoded0:[Wafv2ClientTypes.FirewallManagerRuleGroup]? = nil
        if let preProcessFirewallManagerRuleGroupsContainer = preProcessFirewallManagerRuleGroupsContainer {
            preProcessFirewallManagerRuleGroupsDecoded0 = [Wafv2ClientTypes.FirewallManagerRuleGroup]()
            for structure0 in preProcessFirewallManagerRuleGroupsContainer {
                if let structure0 = structure0 {
                    preProcessFirewallManagerRuleGroupsDecoded0?.append(structure0)
                }
            }
        }
        preProcessFirewallManagerRuleGroups = preProcessFirewallManagerRuleGroupsDecoded0
        let postProcessFirewallManagerRuleGroupsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.FirewallManagerRuleGroup?].self, forKey: .postProcessFirewallManagerRuleGroups)
        var postProcessFirewallManagerRuleGroupsDecoded0:[Wafv2ClientTypes.FirewallManagerRuleGroup]? = nil
        if let postProcessFirewallManagerRuleGroupsContainer = postProcessFirewallManagerRuleGroupsContainer {
            postProcessFirewallManagerRuleGroupsDecoded0 = [Wafv2ClientTypes.FirewallManagerRuleGroup]()
            for structure0 in postProcessFirewallManagerRuleGroupsContainer {
                if let structure0 = structure0 {
                    postProcessFirewallManagerRuleGroupsDecoded0?.append(structure0)
                }
            }
        }
        postProcessFirewallManagerRuleGroups = postProcessFirewallManagerRuleGroupsDecoded0
        let managedByFirewallManagerDecoded = try containerValues.decode(Swift.Bool.self, forKey: .managedByFirewallManager)
        managedByFirewallManager = managedByFirewallManagerDecoded
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: Wafv2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:Wafv2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
    }
}

extension Wafv2ClientTypes.WebACL: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WebACL(aRN: \(Swift.String(describing: aRN)), capacity: \(Swift.String(describing: capacity)), customResponseBodies: \(Swift.String(describing: customResponseBodies)), defaultAction: \(Swift.String(describing: defaultAction)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), labelNamespace: \(Swift.String(describing: labelNamespace)), managedByFirewallManager: \(Swift.String(describing: managedByFirewallManager)), name: \(Swift.String(describing: name)), postProcessFirewallManagerRuleGroups: \(Swift.String(describing: postProcessFirewallManagerRuleGroups)), preProcessFirewallManagerRuleGroups: \(Swift.String(describing: preProcessFirewallManagerRuleGroups)), rules: \(Swift.String(describing: rules)), visibilityConfig: \(Swift.String(describing: visibilityConfig)))"}
}

extension Wafv2ClientTypes {
    /// <p> A Web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the Web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a Web ACL can be a combination of the types <a>Rule</a>, <a>RuleGroup</a>, and managed rule group. You can associate a Web ACL with one or more AWS resources to protect. The resources can be Amazon CloudFront, an Amazon API Gateway REST API, an Application Load Balancer, or an AWS AppSync GraphQL API.  </p>
    public struct WebACL: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the Web ACL that you want to associate with the resource.</p>
        public let aRN: Swift.String?
        /// <p>The web ACL capacity units (WCUs) currently being used by this web ACL. </p>
        ///          <p>AWS WAF uses WCUs to calculate and control the operating
        ///          resources that are used to run your rules, rule groups, and web ACLs. AWS WAF
        ///          calculates capacity differently for each rule type, to reflect the relative cost of each rule.
        ///          Simple rules that cost little to run use fewer WCUs than more complex rules
        /// 				that use more processing power.
        /// 				Rule group capacity is fixed at creation, which helps users plan their
        ///          web ACL WCU usage when they use a rule group.
        ///          The WCU limit for web ACLs is 1,500.  </p>
        public let capacity: Swift.Int
        /// <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. </p>
        ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
        ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
        ///          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">AWS WAF quotas</a> in the
        ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
        public let customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
        /// <p>The action to perform if none of the <code>Rules</code> contained in the <code>WebACL</code> match. </p>
        public let defaultAction: Wafv2ClientTypes.DefaultAction?
        /// <p>A description of the Web ACL that helps with identification. </p>
        public let description: Swift.String?
        /// <p>A unique identifier for the <code>WebACL</code>. This ID is returned in the responses to create and list commands. You use this ID to do things like get, update, and delete a <code>WebACL</code>.</p>
        public let id: Swift.String?
        /// <p>The label namespace prefix for this web ACL. All labels added by rules in this web ACL have this prefix. </p>
        ///          <ul>
        ///             <li>
        ///                <p>The syntax for the label namespace prefix for a web ACL is the following: </p>
        ///                <p>
        ///                   <code>awswaf:<account ID>:webacl:<web ACL name>:</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>When a rule with a label matches a web request, AWS WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p>
        ///                <p>
        ///                   <code><label namespace>:<label from rule></code>
        ///                </p>
        ///
        ///             </li>
        ///          </ul>
        public let labelNamespace: Swift.String?
        /// <p>Indicates whether this web ACL is managed by AWS Firewall Manager. If true, then only AWS Firewall Manager can delete the web ACL or any Firewall Manager rule groups in the web ACL. </p>
        public let managedByFirewallManager: Swift.Bool
        /// <p>The name of the Web ACL. You cannot change the name of a Web ACL after you create it.</p>
        public let name: Swift.String?
        /// <p>The last set of rules for AWS WAF to process in the web ACL. This is defined in an AWS Firewall Manager WAF policy and
        ///            contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are
        ///            prioritized before these. </p>
        ///          <p>In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL
        ///            and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to
        ///           determine their relative processing order.</p>
        public let postProcessFirewallManagerRuleGroups: [Wafv2ClientTypes.FirewallManagerRuleGroup]?
        /// <p>The first set of rules for AWS WAF to process in the web ACL. This is defined in an AWS Firewall Manager WAF policy and
        ///            contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are
        ///            prioritized after these. </p>
        ///          <p>In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL
        ///            and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to
        ///           determine their relative processing order.</p>
        public let preProcessFirewallManagerRuleGroups: [Wafv2ClientTypes.FirewallManagerRuleGroup]?
        /// <p>The <a>Rule</a> statements used to identify the web requests that you
        ///          want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching
        ///          web requests, and parameters that govern how AWS WAF handles them.
        ///       </p>
        public let rules: [Wafv2ClientTypes.Rule]?
        /// <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
        public let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?

        public init (
            aRN: Swift.String? = nil,
            capacity: Swift.Int = 0,
            customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil,
            defaultAction: Wafv2ClientTypes.DefaultAction? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            labelNamespace: Swift.String? = nil,
            managedByFirewallManager: Swift.Bool = false,
            name: Swift.String? = nil,
            postProcessFirewallManagerRuleGroups: [Wafv2ClientTypes.FirewallManagerRuleGroup]? = nil,
            preProcessFirewallManagerRuleGroups: [Wafv2ClientTypes.FirewallManagerRuleGroup]? = nil,
            rules: [Wafv2ClientTypes.Rule]? = nil,
            visibilityConfig: Wafv2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.aRN = aRN
            self.capacity = capacity
            self.customResponseBodies = customResponseBodies
            self.defaultAction = defaultAction
            self.description = description
            self.id = id
            self.labelNamespace = labelNamespace
            self.managedByFirewallManager = managedByFirewallManager
            self.name = name
            self.postProcessFirewallManagerRuleGroups = postProcessFirewallManagerRuleGroups
            self.preProcessFirewallManagerRuleGroups = preProcessFirewallManagerRuleGroups
            self.rules = rules
            self.visibilityConfig = visibilityConfig
        }
    }

}

extension Wafv2ClientTypes.WebACLSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension Wafv2ClientTypes.WebACLSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WebACLSummary(aRN: \(Swift.String(describing: aRN)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), lockToken: \(Swift.String(describing: lockToken)), name: \(Swift.String(describing: name)))"}
}

extension Wafv2ClientTypes {
    /// <p>High-level information about a <a>WebACL</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>WebACL</code>, and the ARN, that you provide to operations like <a>AssociateWebACL</a>.</p>
    public struct WebACLSummary: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the entity.</p>
        public let aRN: Swift.String?
        /// <p>A description of the Web ACL that helps with identification. </p>
        public let description: Swift.String?
        /// <p>The unique identifier for the Web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
        public let id: Swift.String?
        /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
        public let lockToken: Swift.String?
        /// <p>The name of the Web ACL. You cannot change the name of a Web ACL after you create it.</p>
        public let name: Swift.String?

        public init (
            aRN: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.aRN = aRN
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

extension Wafv2ClientTypes.XssMatchStatement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformations0 in textTransformations {
                try textTransformationsContainer.encode(texttransformations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[Wafv2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [Wafv2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
    }
}

extension Wafv2ClientTypes.XssMatchStatement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "XssMatchStatement(fieldToMatch: \(Swift.String(describing: fieldToMatch)), textTransformations: \(Swift.String(describing: textTransformations)))"}
}

extension Wafv2ClientTypes {
    /// <p>A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests.
    ///          XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious
    ///          client-site scripts into other legitimate web browsers.
    ///          The XSS match statement provides the location in requests that you want AWS WAF to search and text transformations
    ///          to use on the search area before AWS WAF searches for character sequences that are likely to be malicious strings. </p>
    public struct XssMatchStatement: Swift.Equatable {
        /// <p>The part of a web request that you want AWS WAF to inspect. For more information, see <a>FieldToMatch</a>. </p>
        public let fieldToMatch: Wafv2ClientTypes.FieldToMatch?
        /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
        ///          If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the
        ///          content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
        public let textTransformations: [Wafv2ClientTypes.TextTransformation]?

        public init (
            fieldToMatch: Wafv2ClientTypes.FieldToMatch? = nil,
            textTransformations: [Wafv2ClientTypes.TextTransformation]? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.textTransformations = textTransformations
        }
    }

}
