// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateWebACLInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateWebACLInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateWebACLInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateWebACLInput>
    public typealias MOutput = OperationOutput<UpdateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateWebACLOutputError>
}

public struct UpdateWebACLInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateWebACLInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateWebACLInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateWebACLInput>
    public typealias MOutput = OperationOutput<UpdateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateWebACLOutputError>
}

public struct UpdateWebACLInputBodyMiddleware: Middleware {
    public let id: String = "UpdateWebACLInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateWebACLInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateWebACLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateWebACLInput>
    public typealias MOutput = OperationOutput<UpdateWebACLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateWebACLOutputError>
}

extension UpdateWebACLInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .customResponseBodies)
            for (dictKey0, customresponsebodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customresponsebodies0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let defaultAction = defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rules0 in rules {
                try rulesContainer.encode(rules0)
            }
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let visibilityConfig = visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }
}
