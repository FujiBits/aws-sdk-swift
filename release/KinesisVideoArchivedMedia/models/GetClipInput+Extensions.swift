// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetClipInputHeadersMiddleware: Middleware {
    public let id: String = "GetClipInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetClipInput>,
                  next: H) -> Swift.Result<OperationOutput<GetClipOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetClipInput>
    public typealias MOutput = OperationOutput<GetClipOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetClipOutputError>
}

public struct GetClipInputQueryItemMiddleware: Middleware {
    public let id: String = "GetClipInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetClipInput>,
                  next: H) -> Swift.Result<OperationOutput<GetClipOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetClipInput>
    public typealias MOutput = OperationOutput<GetClipOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetClipOutputError>
}

public struct GetClipInputBodyMiddleware: Middleware {
    public let id: String = "GetClipInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetClipInput>,
                  next: H) -> Swift.Result<OperationOutput<GetClipOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetClipInput>
    public typealias MOutput = OperationOutput<GetClipOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetClipOutputError>
}

extension GetClipInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clipFragmentSelector = "ClipFragmentSelector"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clipFragmentSelector = clipFragmentSelector {
            try encodeContainer.encode(clipFragmentSelector, forKey: .clipFragmentSelector)
        }
        if let streamARN = streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}
