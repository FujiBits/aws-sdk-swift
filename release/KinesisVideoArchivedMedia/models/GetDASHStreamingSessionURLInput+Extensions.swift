// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetDASHStreamingSessionURLInputHeadersMiddleware: Middleware {
    public let id: String = "GetDASHStreamingSessionURLInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDASHStreamingSessionURLInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDASHStreamingSessionURLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDASHStreamingSessionURLInput>
    public typealias MOutput = OperationOutput<GetDASHStreamingSessionURLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDASHStreamingSessionURLOutputError>
}

public struct GetDASHStreamingSessionURLInputQueryItemMiddleware: Middleware {
    public let id: String = "GetDASHStreamingSessionURLInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDASHStreamingSessionURLInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDASHStreamingSessionURLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDASHStreamingSessionURLInput>
    public typealias MOutput = OperationOutput<GetDASHStreamingSessionURLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDASHStreamingSessionURLOutputError>
}

public struct GetDASHStreamingSessionURLInputBodyMiddleware: Middleware {
    public let id: String = "GetDASHStreamingSessionURLInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDASHStreamingSessionURLInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDASHStreamingSessionURLOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDASHStreamingSessionURLInput>
    public typealias MOutput = OperationOutput<GetDASHStreamingSessionURLOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDASHStreamingSessionURLOutputError>
}

extension GetDASHStreamingSessionURLInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dASHFragmentSelector = "DASHFragmentSelector"
        case displayFragmentNumber = "DisplayFragmentNumber"
        case displayFragmentTimestamp = "DisplayFragmentTimestamp"
        case expires = "Expires"
        case maxManifestFragmentResults = "MaxManifestFragmentResults"
        case playbackMode = "PlaybackMode"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dASHFragmentSelector = dASHFragmentSelector {
            try encodeContainer.encode(dASHFragmentSelector, forKey: .dASHFragmentSelector)
        }
        if let displayFragmentNumber = displayFragmentNumber {
            try encodeContainer.encode(displayFragmentNumber.rawValue, forKey: .displayFragmentNumber)
        }
        if let displayFragmentTimestamp = displayFragmentTimestamp {
            try encodeContainer.encode(displayFragmentTimestamp.rawValue, forKey: .displayFragmentTimestamp)
        }
        if let expires = expires {
            try encodeContainer.encode(expires, forKey: .expires)
        }
        if let maxManifestFragmentResults = maxManifestFragmentResults {
            try encodeContainer.encode(maxManifestFragmentResults, forKey: .maxManifestFragmentResults)
        }
        if let playbackMode = playbackMode {
            try encodeContainer.encode(playbackMode.rawValue, forKey: .playbackMode)
        }
        if let streamARN = streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}
