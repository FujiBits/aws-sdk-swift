// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateDomainAssociationInputHeadersMiddleware: Middleware {
    public let id: String = "CreateDomainAssociationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDomainAssociationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDomainAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDomainAssociationInput>
    public typealias MOutput = OperationOutput<CreateDomainAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDomainAssociationOutputError>
}

public struct CreateDomainAssociationInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateDomainAssociationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDomainAssociationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDomainAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDomainAssociationInput>
    public typealias MOutput = OperationOutput<CreateDomainAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDomainAssociationOutputError>
}

public struct CreateDomainAssociationInputBodyMiddleware: Middleware {
    public let id: String = "CreateDomainAssociationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDomainAssociationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDomainAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDomainAssociationInput>
    public typealias MOutput = OperationOutput<CreateDomainAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDomainAssociationOutputError>
}

extension CreateDomainAssociationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoSubDomainCreationPatterns
        case autoSubDomainIAMRole
        case domainName
        case enableAutoSubDomain
        case subDomainSettings
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoSubDomainCreationPatterns = autoSubDomainCreationPatterns {
            var autoSubDomainCreationPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoSubDomainCreationPatterns)
            for autosubdomaincreationpatterns0 in autoSubDomainCreationPatterns {
                try autoSubDomainCreationPatternsContainer.encode(autosubdomaincreationpatterns0)
            }
        }
        if let autoSubDomainIAMRole = autoSubDomainIAMRole {
            try encodeContainer.encode(autoSubDomainIAMRole, forKey: .autoSubDomainIAMRole)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let enableAutoSubDomain = enableAutoSubDomain {
            try encodeContainer.encode(enableAutoSubDomain, forKey: .enableAutoSubDomain)
        }
        if let subDomainSettings = subDomainSettings {
            var subDomainSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subDomainSettings)
            for subdomainsettings0 in subDomainSettings {
                try subDomainSettingsContainer.encode(subdomainsettings0)
            }
        }
    }
}
