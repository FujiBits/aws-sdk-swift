// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SendSSHPublicKeyInputHeadersMiddleware: Middleware {
    public let id: String = "SendSSHPublicKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendSSHPublicKeyInput>,
                  next: H) -> Swift.Result<OperationOutput<SendSSHPublicKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendSSHPublicKeyInput>
    public typealias MOutput = OperationOutput<SendSSHPublicKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendSSHPublicKeyOutputError>
}

public struct SendSSHPublicKeyInputQueryItemMiddleware: Middleware {
    public let id: String = "SendSSHPublicKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendSSHPublicKeyInput>,
                  next: H) -> Swift.Result<OperationOutput<SendSSHPublicKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendSSHPublicKeyInput>
    public typealias MOutput = OperationOutput<SendSSHPublicKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendSSHPublicKeyOutputError>
}

public struct SendSSHPublicKeyInputBodyMiddleware: Middleware {
    public let id: String = "SendSSHPublicKeyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendSSHPublicKeyInput>,
                  next: H) -> Swift.Result<OperationOutput<SendSSHPublicKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendSSHPublicKeyInput>
    public typealias MOutput = OperationOutput<SendSSHPublicKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendSSHPublicKeyOutputError>
}

extension SendSSHPublicKeyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "AvailabilityZone"
        case instanceId = "InstanceId"
        case instanceOSUser = "InstanceOSUser"
        case sSHPublicKey = "SSHPublicKey"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let instanceOSUser = instanceOSUser {
            try encodeContainer.encode(instanceOSUser, forKey: .instanceOSUser)
        }
        if let sSHPublicKey = sSHPublicKey {
            try encodeContainer.encode(sSHPublicKey, forKey: .sSHPublicKey)
        }
    }
}
