// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AuthException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuthException(message: \(Swift.String(describing: message)))"}
}

extension AuthException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AuthExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Either your AWS credentials are not valid or you do not have access to the EC2 instance.</p>
public struct AuthException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AuthExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AuthExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EC2InstanceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EC2InstanceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension EC2InstanceNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EC2InstanceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified instance was not found.</p>
public struct EC2InstanceNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct EC2InstanceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension EC2InstanceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EC2InstanceTypeInvalidException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EC2InstanceTypeInvalidException(message: \(Swift.String(describing: message)))"}
}

extension EC2InstanceTypeInvalidException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EC2InstanceTypeInvalidExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The instance type is not supported for connecting via the serial console. Only Nitro
///             instance types are currently supported.</p>
public struct EC2InstanceTypeInvalidException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct EC2InstanceTypeInvalidExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension EC2InstanceTypeInvalidExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidArgsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidArgsException(message: \(Swift.String(describing: message)))"}
}

extension InvalidArgsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidArgsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>One of the parameters is not valid.</p>
public struct InvalidArgsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidArgsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidArgsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct SendSSHPublicKeyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendSSHPublicKeyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendSSHPublicKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendSSHPublicKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendSSHPublicKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendSSHPublicKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendSSHPublicKeyOutputError>
}

extension SendSSHPublicKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendSSHPublicKeyInput(availabilityZone: \(Swift.String(describing: availabilityZone)), instanceId: \(Swift.String(describing: instanceId)), instanceOSUser: \(Swift.String(describing: instanceOSUser)), sSHPublicKey: \(Swift.String(describing: sSHPublicKey)))"}
}

extension SendSSHPublicKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case instanceId = "InstanceId"
        case instanceOSUser = "InstanceOSUser"
        case sSHPublicKey = "SSHPublicKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let instanceOSUser = instanceOSUser {
            try encodeContainer.encode(instanceOSUser, forKey: .instanceOSUser)
        }
        if let sSHPublicKey = sSHPublicKey {
            try encodeContainer.encode(sSHPublicKey, forKey: .sSHPublicKey)
        }
    }
}

public struct SendSSHPublicKeyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendSSHPublicKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendSSHPublicKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendSSHPublicKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendSSHPublicKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendSSHPublicKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendSSHPublicKeyOutputError>
}

public struct SendSSHPublicKeyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendSSHPublicKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendSSHPublicKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendSSHPublicKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendSSHPublicKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendSSHPublicKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendSSHPublicKeyOutputError>
}

public struct SendSSHPublicKeyInput: Swift.Equatable {
    /// <p>The Availability Zone in which the EC2 instance was launched.</p>
    public let availabilityZone: Swift.String?
    /// <p>The ID of the EC2 instance.</p>
    public let instanceId: Swift.String?
    /// <p>The OS user on the EC2 instance for whom the key can be used to authenticate.</p>
    public let instanceOSUser: Swift.String?
    /// <p>The public key material. To use the public key, you must have the matching private key.</p>
    public let sSHPublicKey: Swift.String?

    public init (
        availabilityZone: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        instanceOSUser: Swift.String? = nil,
        sSHPublicKey: Swift.String? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.instanceId = instanceId
        self.instanceOSUser = instanceOSUser
        self.sSHPublicKey = sSHPublicKey
    }
}

struct SendSSHPublicKeyInputBody: Swift.Equatable {
    public let instanceId: Swift.String?
    public let instanceOSUser: Swift.String?
    public let sSHPublicKey: Swift.String?
    public let availabilityZone: Swift.String?
}

extension SendSSHPublicKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case instanceId = "InstanceId"
        case instanceOSUser = "InstanceOSUser"
        case sSHPublicKey = "SSHPublicKey"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceOSUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceOSUser)
        instanceOSUser = instanceOSUserDecoded
        let sSHPublicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sSHPublicKey)
        sSHPublicKey = sSHPublicKeyDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
    }
}

extension SendSSHPublicKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendSSHPublicKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AuthException" : self = .authException(try AuthException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EC2InstanceNotFoundException" : self = .eC2InstanceNotFoundException(try EC2InstanceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArgsException" : self = .invalidArgsException(try InvalidArgsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendSSHPublicKeyOutputError: Swift.Error, Swift.Equatable {
    case authException(AuthException)
    case eC2InstanceNotFoundException(EC2InstanceNotFoundException)
    case invalidArgsException(InvalidArgsException)
    case serviceException(ServiceException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendSSHPublicKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendSSHPublicKeyOutputResponse(requestId: \(Swift.String(describing: requestId)), success: \(Swift.String(describing: success)))"}
}

extension SendSSHPublicKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendSSHPublicKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.requestId = output.requestId
            self.success = output.success
        } else {
            self.requestId = nil
            self.success = false
        }
    }
}

public struct SendSSHPublicKeyOutputResponse: Swift.Equatable {
    /// <p>The ID of the request. Please provide this ID when contacting AWS Support for assistance.</p>
    public let requestId: Swift.String?
    /// <p>Is true if the request succeeds and an error otherwise.</p>
    public let success: Swift.Bool

    public init (
        requestId: Swift.String? = nil,
        success: Swift.Bool = false
    )
    {
        self.requestId = requestId
        self.success = success
    }
}

struct SendSSHPublicKeyOutputResponseBody: Swift.Equatable {
    public let requestId: Swift.String?
    public let success: Swift.Bool
}

extension SendSSHPublicKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestId = "RequestId"
        case success = "Success"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let successDecoded = try containerValues.decode(Swift.Bool.self, forKey: .success)
        success = successDecoded
    }
}

public struct SendSerialConsoleSSHPublicKeyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendSerialConsoleSSHPublicKeyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendSerialConsoleSSHPublicKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendSerialConsoleSSHPublicKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendSerialConsoleSSHPublicKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendSerialConsoleSSHPublicKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendSerialConsoleSSHPublicKeyOutputError>
}

extension SendSerialConsoleSSHPublicKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendSerialConsoleSSHPublicKeyInput(instanceId: \(Swift.String(describing: instanceId)), sSHPublicKey: \(Swift.String(describing: sSHPublicKey)), serialPort: \(Swift.String(describing: serialPort)))"}
}

extension SendSerialConsoleSSHPublicKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceId = "InstanceId"
        case sSHPublicKey = "SSHPublicKey"
        case serialPort = "SerialPort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let sSHPublicKey = sSHPublicKey {
            try encodeContainer.encode(sSHPublicKey, forKey: .sSHPublicKey)
        }
        if serialPort != 0 {
            try encodeContainer.encode(serialPort, forKey: .serialPort)
        }
    }
}

public struct SendSerialConsoleSSHPublicKeyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendSerialConsoleSSHPublicKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendSerialConsoleSSHPublicKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendSerialConsoleSSHPublicKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendSerialConsoleSSHPublicKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendSerialConsoleSSHPublicKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendSerialConsoleSSHPublicKeyOutputError>
}

public struct SendSerialConsoleSSHPublicKeyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendSerialConsoleSSHPublicKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendSerialConsoleSSHPublicKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendSerialConsoleSSHPublicKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendSerialConsoleSSHPublicKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendSerialConsoleSSHPublicKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendSerialConsoleSSHPublicKeyOutputError>
}

public struct SendSerialConsoleSSHPublicKeyInput: Swift.Equatable {
    /// <p>The ID of the EC2 instance.</p>
    public let instanceId: Swift.String?
    /// <p>The public key material. To use the public key, you must have the matching private
    ///             key. For information about the supported key formats and lengths, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws">Requirements for key pairs</a> in the <i>Amazon EC2 User
    ///             Guide</i>.</p>
    public let sSHPublicKey: Swift.String?
    /// <p>The serial port of the EC2 instance. Currently only port 0 is supported.</p>
    ///         <p>Default: 0</p>
    public let serialPort: Swift.Int

    public init (
        instanceId: Swift.String? = nil,
        sSHPublicKey: Swift.String? = nil,
        serialPort: Swift.Int = 0
    )
    {
        self.instanceId = instanceId
        self.sSHPublicKey = sSHPublicKey
        self.serialPort = serialPort
    }
}

struct SendSerialConsoleSSHPublicKeyInputBody: Swift.Equatable {
    public let instanceId: Swift.String?
    public let serialPort: Swift.Int
    public let sSHPublicKey: Swift.String?
}

extension SendSerialConsoleSSHPublicKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceId = "InstanceId"
        case sSHPublicKey = "SSHPublicKey"
        case serialPort = "SerialPort"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let serialPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .serialPort)
        serialPort = serialPortDecoded
        let sSHPublicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sSHPublicKey)
        sSHPublicKey = sSHPublicKeyDecoded
    }
}

extension SendSerialConsoleSSHPublicKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendSerialConsoleSSHPublicKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AuthException" : self = .authException(try AuthException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EC2InstanceNotFoundException" : self = .eC2InstanceNotFoundException(try EC2InstanceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EC2InstanceTypeInvalidException" : self = .eC2InstanceTypeInvalidException(try EC2InstanceTypeInvalidException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArgsException" : self = .invalidArgsException(try InvalidArgsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SerialConsoleAccessDisabledException" : self = .serialConsoleAccessDisabledException(try SerialConsoleAccessDisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SerialConsoleSessionLimitExceededException" : self = .serialConsoleSessionLimitExceededException(try SerialConsoleSessionLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SerialConsoleSessionUnavailableException" : self = .serialConsoleSessionUnavailableException(try SerialConsoleSessionUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendSerialConsoleSSHPublicKeyOutputError: Swift.Error, Swift.Equatable {
    case authException(AuthException)
    case eC2InstanceNotFoundException(EC2InstanceNotFoundException)
    case eC2InstanceTypeInvalidException(EC2InstanceTypeInvalidException)
    case invalidArgsException(InvalidArgsException)
    case serialConsoleAccessDisabledException(SerialConsoleAccessDisabledException)
    case serialConsoleSessionLimitExceededException(SerialConsoleSessionLimitExceededException)
    case serialConsoleSessionUnavailableException(SerialConsoleSessionUnavailableException)
    case serviceException(ServiceException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendSerialConsoleSSHPublicKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendSerialConsoleSSHPublicKeyOutputResponse(requestId: \(Swift.String(describing: requestId)), success: \(Swift.String(describing: success)))"}
}

extension SendSerialConsoleSSHPublicKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendSerialConsoleSSHPublicKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.requestId = output.requestId
            self.success = output.success
        } else {
            self.requestId = nil
            self.success = false
        }
    }
}

public struct SendSerialConsoleSSHPublicKeyOutputResponse: Swift.Equatable {
    /// <p>The ID of the request. Please provide this ID when contacting AWS Support for assistance.</p>
    public let requestId: Swift.String?
    /// <p>Is true if the request succeeds and an error otherwise.</p>
    public let success: Swift.Bool

    public init (
        requestId: Swift.String? = nil,
        success: Swift.Bool = false
    )
    {
        self.requestId = requestId
        self.success = success
    }
}

struct SendSerialConsoleSSHPublicKeyOutputResponseBody: Swift.Equatable {
    public let requestId: Swift.String?
    public let success: Swift.Bool
}

extension SendSerialConsoleSSHPublicKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestId = "RequestId"
        case success = "Success"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let successDecoded = try containerValues.decode(Swift.Bool.self, forKey: .success)
        success = successDecoded
    }
}

extension SerialConsoleAccessDisabledException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SerialConsoleAccessDisabledException(message: \(Swift.String(describing: message)))"}
}

extension SerialConsoleAccessDisabledException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SerialConsoleAccessDisabledExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Your account is not authorized to use the EC2 Serial Console. To authorize your
///             account, run the EnableSerialConsoleAccess API. For more information, see
///             <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_EnableSerialConsoleAccess.html">EnableSerialConsoleAccess</a> in the <i>Amazon EC2 API Reference</i>.</p>
public struct SerialConsoleAccessDisabledException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SerialConsoleAccessDisabledExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension SerialConsoleAccessDisabledExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SerialConsoleSessionLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SerialConsoleSessionLimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension SerialConsoleSessionLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SerialConsoleSessionLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The instance currently has 1 active serial console session. Only 1 session is supported at a time.</p>
public struct SerialConsoleSessionLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SerialConsoleSessionLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension SerialConsoleSessionLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SerialConsoleSessionUnavailableException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SerialConsoleSessionUnavailableException(message: \(Swift.String(describing: message)))"}
}

extension SerialConsoleSessionUnavailableException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SerialConsoleSessionUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Unable to start a serial console session. Please try again.</p>
public struct SerialConsoleSessionUnavailableException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SerialConsoleSessionUnavailableExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension SerialConsoleSessionUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServiceException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceException(message: \(Swift.String(describing: message)))"}
}

extension ServiceException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service encountered an error. Follow the instructions in the error message and try again.</p>
public struct ServiceException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ThrottlingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThrottlingException(message: \(Swift.String(describing: message)))"}
}

extension ThrottlingException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requests were made too frequently and have been throttled. Wait a while and try again.
///             To increase the limit on your request frequency, contact AWS Support.</p>
public struct ThrottlingException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
