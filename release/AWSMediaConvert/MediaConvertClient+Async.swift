// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension MediaConvertClient {
    /// Associates an AWS Certificate Manager (ACM) Amazon Resource Name (ARN) with AWS Elemental MediaConvert.
    func associateCertificate(input: AssociateCertificateInput) async throws -> AssociateCertificateOutputResponse
    {
        typealias associateCertificateContinuation = CheckedContinuation<AssociateCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateCertificateContinuation) in
            associateCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Permanently cancel a job. Once you have canceled a job, you can't start it again.
    func cancelJob(input: CancelJobInput) async throws -> CancelJobOutputResponse
    {
        typealias cancelJobContinuation = CheckedContinuation<CancelJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelJobContinuation) in
            cancelJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a new transcoding job. For information about jobs and job settings, see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    func createJob(input: CreateJobInput) async throws -> CreateJobOutputResponse
    {
        typealias createJobContinuation = CheckedContinuation<CreateJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createJobContinuation) in
            createJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a new job template. For information about job templates see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    func createJobTemplate(input: CreateJobTemplateInput) async throws -> CreateJobTemplateOutputResponse
    {
        typealias createJobTemplateContinuation = CheckedContinuation<CreateJobTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createJobTemplateContinuation) in
            createJobTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a new preset. For information about job templates see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    func createPreset(input: CreatePresetInput) async throws -> CreatePresetOutputResponse
    {
        typealias createPresetContinuation = CheckedContinuation<CreatePresetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPresetContinuation) in
            createPreset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a new transcoding queue. For information about queues, see Working With Queues in the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html
    func createQueue(input: CreateQueueInput) async throws -> CreateQueueOutputResponse
    {
        typealias createQueueContinuation = CheckedContinuation<CreateQueueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createQueueContinuation) in
            createQueue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Permanently delete a job template you have created.
    func deleteJobTemplate(input: DeleteJobTemplateInput) async throws -> DeleteJobTemplateOutputResponse
    {
        typealias deleteJobTemplateContinuation = CheckedContinuation<DeleteJobTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteJobTemplateContinuation) in
            deleteJobTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Permanently delete a preset you have created.
    func deletePreset(input: DeletePresetInput) async throws -> DeletePresetOutputResponse
    {
        typealias deletePresetContinuation = CheckedContinuation<DeletePresetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePresetContinuation) in
            deletePreset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Permanently delete a queue you have created.
    func deleteQueue(input: DeleteQueueInput) async throws -> DeleteQueueOutputResponse
    {
        typealias deleteQueueContinuation = CheckedContinuation<DeleteQueueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteQueueContinuation) in
            deleteQueue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Send an request with an empty body to the regional API endpoint to get your account API endpoint.
    func describeEndpoints(input: DescribeEndpointsInput) async throws -> DescribeEndpointsOutputResponse
    {
        typealias describeEndpointsContinuation = CheckedContinuation<DescribeEndpointsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEndpointsContinuation) in
            describeEndpoints(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes an association between the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate and an AWS Elemental MediaConvert resource.
    func disassociateCertificate(input: DisassociateCertificateInput) async throws -> DisassociateCertificateOutputResponse
    {
        typealias disassociateCertificateContinuation = CheckedContinuation<DisassociateCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateCertificateContinuation) in
            disassociateCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve the JSON for a specific completed transcoding job.
    func getJob(input: GetJobInput) async throws -> GetJobOutputResponse
    {
        typealias getJobContinuation = CheckedContinuation<GetJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getJobContinuation) in
            getJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve the JSON for a specific job template.
    func getJobTemplate(input: GetJobTemplateInput) async throws -> GetJobTemplateOutputResponse
    {
        typealias getJobTemplateContinuation = CheckedContinuation<GetJobTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getJobTemplateContinuation) in
            getJobTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve the JSON for a specific preset.
    func getPreset(input: GetPresetInput) async throws -> GetPresetOutputResponse
    {
        typealias getPresetContinuation = CheckedContinuation<GetPresetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPresetContinuation) in
            getPreset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve the JSON for a specific queue.
    func getQueue(input: GetQueueInput) async throws -> GetQueueOutputResponse
    {
        typealias getQueueContinuation = CheckedContinuation<GetQueueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getQueueContinuation) in
            getQueue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a JSON array of up to twenty of your job templates. This will return the templates themselves, not just a list of them. To retrieve the next twenty templates, use the nextToken string returned with the array
    func listJobTemplates(input: ListJobTemplatesInput) async throws -> ListJobTemplatesOutputResponse
    {
        typealias listJobTemplatesContinuation = CheckedContinuation<ListJobTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobTemplatesContinuation) in
            listJobTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a JSON array of up to twenty of your most recently created jobs. This array includes in-process, completed, and errored jobs. This will return the jobs themselves, not just a list of the jobs. To retrieve the twenty next most recent jobs, use the nextToken string returned with the array.
    func listJobs(input: ListJobsInput) async throws -> ListJobsOutputResponse
    {
        typealias listJobsContinuation = CheckedContinuation<ListJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobsContinuation) in
            listJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a JSON array of up to twenty of your presets. This will return the presets themselves, not just a list of them. To retrieve the next twenty presets, use the nextToken string returned with the array.
    func listPresets(input: ListPresetsInput) async throws -> ListPresetsOutputResponse
    {
        typealias listPresetsContinuation = CheckedContinuation<ListPresetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPresetsContinuation) in
            listPresets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a JSON array of up to twenty of your queues. This will return the queues themselves, not just a list of them. To retrieve the next twenty queues, use the nextToken string returned with the array.
    func listQueues(input: ListQueuesInput) async throws -> ListQueuesOutputResponse
    {
        typealias listQueuesContinuation = CheckedContinuation<ListQueuesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listQueuesContinuation) in
            listQueues(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve the tags for a MediaConvert resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Add tags to a MediaConvert queue, preset, or job template. For information about tagging, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/tagging-resources.html
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Remove tags from a MediaConvert queue, preset, or job template. For information about tagging, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/tagging-resources.html
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modify one of your existing job templates.
    func updateJobTemplate(input: UpdateJobTemplateInput) async throws -> UpdateJobTemplateOutputResponse
    {
        typealias updateJobTemplateContinuation = CheckedContinuation<UpdateJobTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateJobTemplateContinuation) in
            updateJobTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modify one of your existing presets.
    func updatePreset(input: UpdatePresetInput) async throws -> UpdatePresetOutputResponse
    {
        typealias updatePresetContinuation = CheckedContinuation<UpdatePresetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePresetContinuation) in
            updatePreset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modify one of your existing queues.
    func updateQueue(input: UpdateQueueInput) async throws -> UpdateQueueOutputResponse
    {
        typealias updateQueueContinuation = CheckedContinuation<UpdateQueueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateQueueContinuation) in
            updateQueue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
