// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension DeleteLexiconInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLexiconInput(name: \(Swift.String(describing: name)))"}
}

extension DeleteLexiconInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteLexiconInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLexiconInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLexiconInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLexiconInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLexiconOutputError>
}

public struct DeleteLexiconInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLexiconInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLexiconInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLexiconInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLexiconOutputError>
}

public struct DeleteLexiconInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLexiconInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteLexiconInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteLexiconInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLexiconOutputError>
}

public struct DeleteLexiconInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLexiconInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteLexiconInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/v1/lexicons/\(name.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteLexiconInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLexiconOutputError>
}

public struct DeleteLexiconInput: Swift.Equatable {
    /// The name of the lexicon to delete. Must be an existing lexicon in the region.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteLexiconInputBody: Swift.Equatable {
}

extension DeleteLexiconInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteLexiconOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLexiconOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LexiconNotFoundException" : self = .lexiconNotFoundException(try LexiconNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailureException" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLexiconOutputError: Swift.Error, Swift.Equatable {
    case lexiconNotFoundException(LexiconNotFoundException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLexiconOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLexiconOutputResponse()"}
}

extension DeleteLexiconOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLexiconOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteLexiconOutputResponseBody: Swift.Equatable {
}

extension DeleteLexiconOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeVoicesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVoicesInput(engine: \(Swift.String(describing: engine)), includeAdditionalLanguageCodes: \(Swift.String(describing: includeAdditionalLanguageCodes)), languageCode: \(Swift.String(describing: languageCode)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeVoicesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeVoicesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVoicesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVoicesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVoicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVoicesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVoicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVoicesOutputError>
}

public struct DescribeVoicesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVoicesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVoicesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVoicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let languageCode = input.operationInput.languageCode {
            let languageCodeQueryItem = ClientRuntime.URLQueryItem(name: "LanguageCode".urlPercentEncoding(), value: Swift.String(languageCode.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(languageCodeQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let engine = input.operationInput.engine {
            let engineQueryItem = ClientRuntime.URLQueryItem(name: "Engine".urlPercentEncoding(), value: Swift.String(engine.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(engineQueryItem)
        }
        if input.operationInput.includeAdditionalLanguageCodes != false {
            let includeAdditionalLanguageCodesQueryItem = ClientRuntime.URLQueryItem(name: "IncludeAdditionalLanguageCodes".urlPercentEncoding(), value: Swift.String(input.operationInput.includeAdditionalLanguageCodes).urlPercentEncoding())
            input.builder.withQueryItem(includeAdditionalLanguageCodesQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVoicesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVoicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVoicesOutputError>
}

public struct DescribeVoicesInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVoicesInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeVoicesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVoicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeVoicesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVoicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVoicesOutputError>
}

public struct DescribeVoicesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVoicesInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeVoicesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVoicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/v1/voices"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeVoicesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVoicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVoicesOutputError>
}

public struct DescribeVoicesInput: Swift.Equatable {
    /// Specifies the engine (standard or neural) used by Amazon Polly when processing input text for speech synthesis.
    public var engine: PollyClientTypes.Engine?
    /// Boolean value indicating whether to return any bilingual voices that use the specified language as an additional language. For instance, if you request all languages that use US English (es-US), and there is an Italian voice that speaks both Italian (it-IT) and US English, that voice will be included if you specify yes but not if you specify no.
    public var includeAdditionalLanguageCodes: Swift.Bool
    /// The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don't specify this optional parameter, all available voices are returned.
    public var languageCode: PollyClientTypes.LanguageCode?
    /// An opaque pagination token returned from the previous DescribeVoices operation. If present, this indicates where to continue the listing.
    public var nextToken: Swift.String?

    public init (
        engine: PollyClientTypes.Engine? = nil,
        includeAdditionalLanguageCodes: Swift.Bool = false,
        languageCode: PollyClientTypes.LanguageCode? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.engine = engine
        self.includeAdditionalLanguageCodes = includeAdditionalLanguageCodes
        self.languageCode = languageCode
        self.nextToken = nextToken
    }
}

struct DescribeVoicesInputBody: Swift.Equatable {
}

extension DescribeVoicesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeVoicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVoicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailureException" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeVoicesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVoicesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVoicesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), voices: \(Swift.String(describing: voices)))"}
}

extension DescribeVoicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeVoicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.voices = output.voices
        } else {
            self.nextToken = nil
            self.voices = nil
        }
    }
}

public struct DescribeVoicesOutputResponse: Swift.Equatable {
    /// The pagination token to use in the next request to continue the listing of voices. NextToken is returned only if the response is truncated.
    public var nextToken: Swift.String?
    /// A list of voices with their properties.
    public var voices: [PollyClientTypes.Voice]?

    public init (
        nextToken: Swift.String? = nil,
        voices: [PollyClientTypes.Voice]? = nil
    )
    {
        self.nextToken = nextToken
        self.voices = voices
    }
}

struct DescribeVoicesOutputResponseBody: Swift.Equatable {
    public let voices: [PollyClientTypes.Voice]?
    public let nextToken: Swift.String?
}

extension DescribeVoicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case voices = "Voices"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voicesContainer = try containerValues.decodeIfPresent([PollyClientTypes.Voice?].self, forKey: .voices)
        var voicesDecoded0:[PollyClientTypes.Voice]? = nil
        if let voicesContainer = voicesContainer {
            voicesDecoded0 = [PollyClientTypes.Voice]()
            for structure0 in voicesContainer {
                if let structure0 = structure0 {
                    voicesDecoded0?.append(structure0)
                }
            }
        }
        voices = voicesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension PollyClientTypes {
    public enum Engine: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case neural
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [Engine] {
            return [
                .neural,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .neural: return "neural"
            case .standard: return "standard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Engine(rawValue: rawValue) ?? Engine.sdkUnknown(rawValue)
        }
    }
}

extension EngineNotSupportedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EngineNotSupportedException(message: \(Swift.String(describing: message)))"}
}

extension EngineNotSupportedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EngineNotSupportedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This engine is not compatible with the voice that you have designated. Choose a new voice that is compatible with the engine or change the engine and restart the operation.
public struct EngineNotSupportedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct EngineNotSupportedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension EngineNotSupportedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PollyClientTypes {
    public enum Gender: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case female
        case male
        case sdkUnknown(Swift.String)

        public static var allCases: [Gender] {
            return [
                .female,
                .male,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .female: return "Female"
            case .male: return "Male"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Gender(rawValue: rawValue) ?? Gender.sdkUnknown(rawValue)
        }
    }
}

extension GetLexiconInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLexiconInput(name: \(Swift.String(describing: name)))"}
}

extension GetLexiconInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetLexiconInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLexiconInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLexiconInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLexiconInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLexiconOutputError>
}

public struct GetLexiconInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLexiconInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLexiconInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLexiconInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLexiconOutputError>
}

public struct GetLexiconInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLexiconInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetLexiconInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetLexiconInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLexiconOutputError>
}

public struct GetLexiconInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLexiconInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetLexiconInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/v1/lexicons/\(name.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetLexiconInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLexiconOutputError>
}

public struct GetLexiconInput: Swift.Equatable {
    /// Name of the lexicon.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct GetLexiconInputBody: Swift.Equatable {
}

extension GetLexiconInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetLexiconOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLexiconOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LexiconNotFoundException" : self = .lexiconNotFoundException(try LexiconNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailureException" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLexiconOutputError: Swift.Error, Swift.Equatable {
    case lexiconNotFoundException(LexiconNotFoundException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLexiconOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLexiconOutputResponse(lexicon: \(Swift.String(describing: lexicon)), lexiconAttributes: \(Swift.String(describing: lexiconAttributes)))"}
}

extension GetLexiconOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetLexiconOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lexicon = output.lexicon
            self.lexiconAttributes = output.lexiconAttributes
        } else {
            self.lexicon = nil
            self.lexiconAttributes = nil
        }
    }
}

public struct GetLexiconOutputResponse: Swift.Equatable {
    /// Lexicon object that provides name and the string content of the lexicon.
    public var lexicon: PollyClientTypes.Lexicon?
    /// Metadata of the lexicon, including phonetic alphabetic used, language code, lexicon ARN, number of lexemes defined in the lexicon, and size of lexicon in bytes.
    public var lexiconAttributes: PollyClientTypes.LexiconAttributes?

    public init (
        lexicon: PollyClientTypes.Lexicon? = nil,
        lexiconAttributes: PollyClientTypes.LexiconAttributes? = nil
    )
    {
        self.lexicon = lexicon
        self.lexiconAttributes = lexiconAttributes
    }
}

struct GetLexiconOutputResponseBody: Swift.Equatable {
    public let lexicon: PollyClientTypes.Lexicon?
    public let lexiconAttributes: PollyClientTypes.LexiconAttributes?
}

extension GetLexiconOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexicon = "Lexicon"
        case lexiconAttributes = "LexiconAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lexiconDecoded = try containerValues.decodeIfPresent(PollyClientTypes.Lexicon.self, forKey: .lexicon)
        lexicon = lexiconDecoded
        let lexiconAttributesDecoded = try containerValues.decodeIfPresent(PollyClientTypes.LexiconAttributes.self, forKey: .lexiconAttributes)
        lexiconAttributes = lexiconAttributesDecoded
    }
}

extension GetSpeechSynthesisTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSpeechSynthesisTaskInput(taskId: \(Swift.String(describing: taskId)))"}
}

extension GetSpeechSynthesisTaskInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetSpeechSynthesisTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSpeechSynthesisTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSpeechSynthesisTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSpeechSynthesisTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSpeechSynthesisTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSpeechSynthesisTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSpeechSynthesisTaskOutputError>
}

public struct GetSpeechSynthesisTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSpeechSynthesisTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSpeechSynthesisTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSpeechSynthesisTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSpeechSynthesisTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSpeechSynthesisTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSpeechSynthesisTaskOutputError>
}

public struct GetSpeechSynthesisTaskInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSpeechSynthesisTaskInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetSpeechSynthesisTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSpeechSynthesisTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetSpeechSynthesisTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetSpeechSynthesisTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSpeechSynthesisTaskOutputError>
}

public struct GetSpeechSynthesisTaskInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSpeechSynthesisTaskInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetSpeechSynthesisTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSpeechSynthesisTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let taskId = input.taskId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("taskId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/v1/synthesisTasks/\(taskId.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetSpeechSynthesisTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetSpeechSynthesisTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSpeechSynthesisTaskOutputError>
}

public struct GetSpeechSynthesisTaskInput: Swift.Equatable {
    /// The Amazon Polly generated identifier for a speech synthesis task.
    /// This member is required.
    public var taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct GetSpeechSynthesisTaskInputBody: Swift.Equatable {
}

extension GetSpeechSynthesisTaskInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSpeechSynthesisTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSpeechSynthesisTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidTaskIdException" : self = .invalidTaskIdException(try InvalidTaskIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailureException" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SynthesisTaskNotFoundException" : self = .synthesisTaskNotFoundException(try SynthesisTaskNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSpeechSynthesisTaskOutputError: Swift.Error, Swift.Equatable {
    case invalidTaskIdException(InvalidTaskIdException)
    case serviceFailureException(ServiceFailureException)
    case synthesisTaskNotFoundException(SynthesisTaskNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSpeechSynthesisTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSpeechSynthesisTaskOutputResponse(synthesisTask: \(Swift.String(describing: synthesisTask)))"}
}

extension GetSpeechSynthesisTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSpeechSynthesisTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.synthesisTask = output.synthesisTask
        } else {
            self.synthesisTask = nil
        }
    }
}

public struct GetSpeechSynthesisTaskOutputResponse: Swift.Equatable {
    /// SynthesisTask object that provides information from the requested task, including output format, creation time, task status, and so on.
    public var synthesisTask: PollyClientTypes.SynthesisTask?

    public init (
        synthesisTask: PollyClientTypes.SynthesisTask? = nil
    )
    {
        self.synthesisTask = synthesisTask
    }
}

struct GetSpeechSynthesisTaskOutputResponseBody: Swift.Equatable {
    public let synthesisTask: PollyClientTypes.SynthesisTask?
}

extension GetSpeechSynthesisTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case synthesisTask = "SynthesisTask"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let synthesisTaskDecoded = try containerValues.decodeIfPresent(PollyClientTypes.SynthesisTask.self, forKey: .synthesisTask)
        synthesisTask = synthesisTaskDecoded
    }
}

extension InvalidLexiconException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidLexiconException(message: \(Swift.String(describing: message)))"}
}

extension InvalidLexiconException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidLexiconExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Polly can't find the specified lexicon. Verify that the lexicon's name is spelled correctly, and then try again.
public struct InvalidLexiconException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidLexiconExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidLexiconExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNextTokenException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidNextTokenException(message: \(Swift.String(describing: message)))"}
}

extension InvalidNextTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidNextTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The NextToken is invalid. Verify that it's spelled correctly, and then try again.
public struct InvalidNextTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidNextTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidS3BucketException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidS3BucketException(message: \(Swift.String(describing: message)))"}
}

extension InvalidS3BucketException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidS3BucketExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided Amazon S3 bucket name is invalid. Please check your input with S3 bucket naming requirements and try again.
public struct InvalidS3BucketException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidS3BucketExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidS3BucketExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidS3KeyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidS3KeyException(message: \(Swift.String(describing: message)))"}
}

extension InvalidS3KeyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidS3KeyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided Amazon S3 key prefix is invalid. Please provide a valid S3 object key name.
public struct InvalidS3KeyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidS3KeyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidS3KeyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSampleRateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidSampleRateException(message: \(Swift.String(describing: message)))"}
}

extension InvalidSampleRateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidSampleRateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified sample rate is not valid.
public struct InvalidSampleRateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSampleRateExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidSampleRateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSnsTopicArnException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidSnsTopicArnException(message: \(Swift.String(describing: message)))"}
}

extension InvalidSnsTopicArnException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidSnsTopicArnExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided SNS topic ARN is invalid. Please provide a valid SNS topic ARN and try again.
public struct InvalidSnsTopicArnException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSnsTopicArnExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidSnsTopicArnExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSsmlException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidSsmlException(message: \(Swift.String(describing: message)))"}
}

extension InvalidSsmlException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidSsmlExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The SSML you provided is invalid. Verify the SSML syntax, spelling of tags and values, and then try again.
public struct InvalidSsmlException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSsmlExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidSsmlExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTaskIdException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidTaskIdException(message: \(Swift.String(describing: message)))"}
}

extension InvalidTaskIdException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidTaskIdExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided Task ID is not valid. Please provide a valid Task ID and try again.
public struct InvalidTaskIdException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTaskIdExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidTaskIdExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PollyClientTypes {
    public enum LanguageCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case arb
        case cmnCn
        case cyGb
        case daDk
        case deDe
        case enAu
        case enGb
        case enGbWls
        case enIn
        case enNz
        case enUs
        case enZa
        case esEs
        case esMx
        case esUs
        case frCa
        case frFr
        case hiIn
        case isIs
        case itIt
        case jaJp
        case koKr
        case nbNo
        case nlNl
        case plPl
        case ptBr
        case ptPt
        case roRo
        case ruRu
        case svSe
        case trTr
        case sdkUnknown(Swift.String)

        public static var allCases: [LanguageCode] {
            return [
                .arb,
                .cmnCn,
                .cyGb,
                .daDk,
                .deDe,
                .enAu,
                .enGb,
                .enGbWls,
                .enIn,
                .enNz,
                .enUs,
                .enZa,
                .esEs,
                .esMx,
                .esUs,
                .frCa,
                .frFr,
                .hiIn,
                .isIs,
                .itIt,
                .jaJp,
                .koKr,
                .nbNo,
                .nlNl,
                .plPl,
                .ptBr,
                .ptPt,
                .roRo,
                .ruRu,
                .svSe,
                .trTr,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .arb: return "arb"
            case .cmnCn: return "cmn-CN"
            case .cyGb: return "cy-GB"
            case .daDk: return "da-DK"
            case .deDe: return "de-DE"
            case .enAu: return "en-AU"
            case .enGb: return "en-GB"
            case .enGbWls: return "en-GB-WLS"
            case .enIn: return "en-IN"
            case .enNz: return "en-NZ"
            case .enUs: return "en-US"
            case .enZa: return "en-ZA"
            case .esEs: return "es-ES"
            case .esMx: return "es-MX"
            case .esUs: return "es-US"
            case .frCa: return "fr-CA"
            case .frFr: return "fr-FR"
            case .hiIn: return "hi-IN"
            case .isIs: return "is-IS"
            case .itIt: return "it-IT"
            case .jaJp: return "ja-JP"
            case .koKr: return "ko-KR"
            case .nbNo: return "nb-NO"
            case .nlNl: return "nl-NL"
            case .plPl: return "pl-PL"
            case .ptBr: return "pt-BR"
            case .ptPt: return "pt-PT"
            case .roRo: return "ro-RO"
            case .ruRu: return "ru-RU"
            case .svSe: return "sv-SE"
            case .trTr: return "tr-TR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LanguageCode(rawValue: rawValue) ?? LanguageCode.sdkUnknown(rawValue)
        }
    }
}

extension LanguageNotSupportedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LanguageNotSupportedException(message: \(Swift.String(describing: message)))"}
}

extension LanguageNotSupportedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LanguageNotSupportedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The language specified is not currently supported by Amazon Polly in this capacity.
public struct LanguageNotSupportedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LanguageNotSupportedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LanguageNotSupportedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PollyClientTypes.Lexicon: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension PollyClientTypes.Lexicon: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Lexicon(content: \(Swift.String(describing: content)), name: \(Swift.String(describing: name)))"}
}

extension PollyClientTypes {
    /// Provides lexicon name and lexicon content in string format. For more information, see [Pronunciation Lexicon Specification (PLS) Version 1.0](https://www.w3.org/TR/pronunciation-lexicon/).
    public struct Lexicon: Swift.Equatable {
        /// Lexicon content in string format. The content of a lexicon must be in PLS format.
        public var content: Swift.String?
        /// Name of the lexicon.
        public var name: Swift.String?

        public init (
            content: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.content = content
            self.name = name
        }
    }

}

extension PollyClientTypes.LexiconAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alphabet = "Alphabet"
        case languageCode = "LanguageCode"
        case lastModified = "LastModified"
        case lexemesCount = "LexemesCount"
        case lexiconArn = "LexiconArn"
        case size = "Size"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alphabet = alphabet {
            try encodeContainer.encode(alphabet, forKey: .alphabet)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lastModified = lastModified {
            try encodeContainer.encode(lastModified.timeIntervalSince1970, forKey: .lastModified)
        }
        if lexemesCount != 0 {
            try encodeContainer.encode(lexemesCount, forKey: .lexemesCount)
        }
        if let lexiconArn = lexiconArn {
            try encodeContainer.encode(lexiconArn, forKey: .lexiconArn)
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alphabetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alphabet)
        alphabet = alphabetDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(PollyClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let lexiconArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lexiconArn)
        lexiconArn = lexiconArnDecoded
        let lexemesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .lexemesCount)
        lexemesCount = lexemesCountDecoded
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
    }
}

extension PollyClientTypes.LexiconAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LexiconAttributes(alphabet: \(Swift.String(describing: alphabet)), languageCode: \(Swift.String(describing: languageCode)), lastModified: \(Swift.String(describing: lastModified)), lexemesCount: \(Swift.String(describing: lexemesCount)), lexiconArn: \(Swift.String(describing: lexiconArn)), size: \(Swift.String(describing: size)))"}
}

extension PollyClientTypes {
    /// Contains metadata describing the lexicon such as the number of lexemes, language code, and so on. For more information, see [Managing Lexicons](https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html).
    public struct LexiconAttributes: Swift.Equatable {
        /// Phonetic alphabet used in the lexicon. Valid values are ipa and x-sampa.
        public var alphabet: Swift.String?
        /// Language code that the lexicon applies to. A lexicon with a language code such as "en" would be applied to all English languages (en-GB, en-US, en-AUS, en-WLS, and so on.
        public var languageCode: PollyClientTypes.LanguageCode?
        /// Date lexicon was last modified (a timestamp value).
        public var lastModified: ClientRuntime.Date?
        /// Number of lexemes in the lexicon.
        public var lexemesCount: Swift.Int
        /// Amazon Resource Name (ARN) of the lexicon.
        public var lexiconArn: Swift.String?
        /// Total size of the lexicon, in characters.
        public var size: Swift.Int

        public init (
            alphabet: Swift.String? = nil,
            languageCode: PollyClientTypes.LanguageCode? = nil,
            lastModified: ClientRuntime.Date? = nil,
            lexemesCount: Swift.Int = 0,
            lexiconArn: Swift.String? = nil,
            size: Swift.Int = 0
        )
        {
            self.alphabet = alphabet
            self.languageCode = languageCode
            self.lastModified = lastModified
            self.lexemesCount = lexemesCount
            self.lexiconArn = lexiconArn
            self.size = size
        }
    }

}

extension PollyClientTypes.LexiconDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            try encodeContainer.encode(attributes, forKey: .attributes)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let attributesDecoded = try containerValues.decodeIfPresent(PollyClientTypes.LexiconAttributes.self, forKey: .attributes)
        attributes = attributesDecoded
    }
}

extension PollyClientTypes.LexiconDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LexiconDescription(attributes: \(Swift.String(describing: attributes)), name: \(Swift.String(describing: name)))"}
}

extension PollyClientTypes {
    /// Describes the content of the lexicon.
    public struct LexiconDescription: Swift.Equatable {
        /// Provides lexicon metadata.
        public var attributes: PollyClientTypes.LexiconAttributes?
        /// Name of the lexicon.
        public var name: Swift.String?

        public init (
            attributes: PollyClientTypes.LexiconAttributes? = nil,
            name: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.name = name
        }
    }

}

extension LexiconNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LexiconNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension LexiconNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LexiconNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Polly can't find the specified lexicon. This could be caused by a lexicon that is missing, its name is misspelled or specifying a lexicon that is in a different region. Verify that the lexicon exists, is in the region (see [ListLexicons]) and that you spelled its name is spelled correctly. Then try again.
public struct LexiconNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LexiconNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LexiconNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LexiconSizeExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LexiconSizeExceededException(message: \(Swift.String(describing: message)))"}
}

extension LexiconSizeExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LexiconSizeExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum size of the specified lexicon would be exceeded by this operation.
public struct LexiconSizeExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LexiconSizeExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LexiconSizeExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListLexiconsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLexiconsInput(nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListLexiconsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListLexiconsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLexiconsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLexiconsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLexiconsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLexiconsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLexiconsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLexiconsOutputError>
}

public struct ListLexiconsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLexiconsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLexiconsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLexiconsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLexiconsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLexiconsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLexiconsOutputError>
}

public struct ListLexiconsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLexiconsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListLexiconsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLexiconsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListLexiconsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListLexiconsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLexiconsOutputError>
}

public struct ListLexiconsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLexiconsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListLexiconsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLexiconsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/v1/lexicons"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListLexiconsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListLexiconsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLexiconsOutputError>
}

public struct ListLexiconsInput: Swift.Equatable {
    /// An opaque pagination token returned from previous ListLexicons operation. If present, indicates where to continue the list of lexicons.
    public var nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListLexiconsInputBody: Swift.Equatable {
}

extension ListLexiconsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListLexiconsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLexiconsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailureException" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListLexiconsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLexiconsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLexiconsOutputResponse(lexicons: \(Swift.String(describing: lexicons)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListLexiconsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListLexiconsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lexicons = output.lexicons
            self.nextToken = output.nextToken
        } else {
            self.lexicons = nil
            self.nextToken = nil
        }
    }
}

public struct ListLexiconsOutputResponse: Swift.Equatable {
    /// A list of lexicon names and attributes.
    public var lexicons: [PollyClientTypes.LexiconDescription]?
    /// The pagination token to use in the next request to continue the listing of lexicons. NextToken is returned only if the response is truncated.
    public var nextToken: Swift.String?

    public init (
        lexicons: [PollyClientTypes.LexiconDescription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.lexicons = lexicons
        self.nextToken = nextToken
    }
}

struct ListLexiconsOutputResponseBody: Swift.Equatable {
    public let lexicons: [PollyClientTypes.LexiconDescription]?
    public let nextToken: Swift.String?
}

extension ListLexiconsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexicons = "Lexicons"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lexiconsContainer = try containerValues.decodeIfPresent([PollyClientTypes.LexiconDescription?].self, forKey: .lexicons)
        var lexiconsDecoded0:[PollyClientTypes.LexiconDescription]? = nil
        if let lexiconsContainer = lexiconsContainer {
            lexiconsDecoded0 = [PollyClientTypes.LexiconDescription]()
            for structure0 in lexiconsContainer {
                if let structure0 = structure0 {
                    lexiconsDecoded0?.append(structure0)
                }
            }
        }
        lexicons = lexiconsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSpeechSynthesisTasksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSpeechSynthesisTasksInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListSpeechSynthesisTasksInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListSpeechSynthesisTasksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSpeechSynthesisTasksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSpeechSynthesisTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSpeechSynthesisTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSpeechSynthesisTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSpeechSynthesisTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSpeechSynthesisTasksOutputError>
}

public struct ListSpeechSynthesisTasksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSpeechSynthesisTasksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSpeechSynthesisTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSpeechSynthesisTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let status = input.operationInput.status {
            let statusQueryItem = ClientRuntime.URLQueryItem(name: "Status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSpeechSynthesisTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSpeechSynthesisTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSpeechSynthesisTasksOutputError>
}

public struct ListSpeechSynthesisTasksInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSpeechSynthesisTasksInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListSpeechSynthesisTasksInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSpeechSynthesisTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListSpeechSynthesisTasksInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListSpeechSynthesisTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSpeechSynthesisTasksOutputError>
}

public struct ListSpeechSynthesisTasksInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSpeechSynthesisTasksInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListSpeechSynthesisTasksInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSpeechSynthesisTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/v1/synthesisTasks"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListSpeechSynthesisTasksInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListSpeechSynthesisTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSpeechSynthesisTasksOutputError>
}

public struct ListSpeechSynthesisTasksInput: Swift.Equatable {
    /// Maximum number of speech synthesis tasks returned in a List operation.
    public var maxResults: Swift.Int?
    /// The pagination token to use in the next request to continue the listing of speech synthesis tasks.
    public var nextToken: Swift.String?
    /// Status of the speech synthesis tasks returned in a List operation
    public var status: PollyClientTypes.TaskStatus?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: PollyClientTypes.TaskStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListSpeechSynthesisTasksInputBody: Swift.Equatable {
}

extension ListSpeechSynthesisTasksInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListSpeechSynthesisTasksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSpeechSynthesisTasksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailureException" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSpeechSynthesisTasksOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case serviceFailureException(ServiceFailureException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSpeechSynthesisTasksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSpeechSynthesisTasksOutputResponse(nextToken: \(Swift.String(describing: nextToken)), synthesisTasks: \(Swift.String(describing: synthesisTasks)))"}
}

extension ListSpeechSynthesisTasksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSpeechSynthesisTasksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.synthesisTasks = output.synthesisTasks
        } else {
            self.nextToken = nil
            self.synthesisTasks = nil
        }
    }
}

public struct ListSpeechSynthesisTasksOutputResponse: Swift.Equatable {
    /// An opaque pagination token returned from the previous List operation in this request. If present, this indicates where to continue the listing.
    public var nextToken: Swift.String?
    /// List of SynthesisTask objects that provides information from the specified task in the list request, including output format, creation time, task status, and so on.
    public var synthesisTasks: [PollyClientTypes.SynthesisTask]?

    public init (
        nextToken: Swift.String? = nil,
        synthesisTasks: [PollyClientTypes.SynthesisTask]? = nil
    )
    {
        self.nextToken = nextToken
        self.synthesisTasks = synthesisTasks
    }
}

struct ListSpeechSynthesisTasksOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let synthesisTasks: [PollyClientTypes.SynthesisTask]?
}

extension ListSpeechSynthesisTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case synthesisTasks = "SynthesisTasks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let synthesisTasksContainer = try containerValues.decodeIfPresent([PollyClientTypes.SynthesisTask?].self, forKey: .synthesisTasks)
        var synthesisTasksDecoded0:[PollyClientTypes.SynthesisTask]? = nil
        if let synthesisTasksContainer = synthesisTasksContainer {
            synthesisTasksDecoded0 = [PollyClientTypes.SynthesisTask]()
            for structure0 in synthesisTasksContainer {
                if let structure0 = structure0 {
                    synthesisTasksDecoded0?.append(structure0)
                }
            }
        }
        synthesisTasks = synthesisTasksDecoded0
    }
}

extension MarksNotSupportedForFormatException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MarksNotSupportedForFormatException(message: \(Swift.String(describing: message)))"}
}

extension MarksNotSupportedForFormatException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MarksNotSupportedForFormatExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Speech marks are not supported for the OutputFormat selected. Speech marks are only available for content in json format.
public struct MarksNotSupportedForFormatException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MarksNotSupportedForFormatExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MarksNotSupportedForFormatExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MaxLexemeLengthExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MaxLexemeLengthExceededException(message: \(Swift.String(describing: message)))"}
}

extension MaxLexemeLengthExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MaxLexemeLengthExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum size of the lexeme would be exceeded by this operation.
public struct MaxLexemeLengthExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MaxLexemeLengthExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MaxLexemeLengthExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MaxLexiconsNumberExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MaxLexiconsNumberExceededException(message: \(Swift.String(describing: message)))"}
}

extension MaxLexiconsNumberExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MaxLexiconsNumberExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum number of lexicons would be exceeded by this operation.
public struct MaxLexiconsNumberExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MaxLexiconsNumberExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MaxLexiconsNumberExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PollyClientTypes {
    public enum OutputFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case json
        case mp3
        case oggVorbis
        case pcm
        case sdkUnknown(Swift.String)

        public static var allCases: [OutputFormat] {
            return [
                .json,
                .mp3,
                .oggVorbis,
                .pcm,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .json: return "json"
            case .mp3: return "mp3"
            case .oggVorbis: return "ogg_vorbis"
            case .pcm: return "pcm"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OutputFormat(rawValue: rawValue) ?? OutputFormat.sdkUnknown(rawValue)
        }
    }
}

public struct PutLexiconInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLexiconInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLexiconInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLexiconInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLexiconOutputError>
}

extension PutLexiconInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutLexiconInput(content: \(Swift.String(describing: content)), name: \(Swift.String(describing: name)))"}
}

extension PutLexiconInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
    }
}

public struct PutLexiconInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLexiconInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLexiconInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLexiconInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLexiconOutputError>
}

public struct PutLexiconInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLexiconInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLexiconInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLexiconInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLexiconOutputError>
}

public struct PutLexiconInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLexiconInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: PutLexiconInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutLexiconInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLexiconOutputError>
}

public struct PutLexiconInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLexiconInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: PutLexiconInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLexiconOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/v1/lexicons/\(name.urlPercentEncoding())"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutLexiconInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutLexiconOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLexiconOutputError>
}

public struct PutLexiconInput: Swift.Equatable {
    /// Content of the PLS lexicon as string data.
    /// This member is required.
    public var content: Swift.String?
    /// Name of the lexicon. The name must follow the regular express format [0-9A-Za-z]{1,20}. That is, the name is a case-sensitive alphanumeric string up to 20 characters long.
    /// This member is required.
    public var name: Swift.String?

    public init (
        content: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.content = content
        self.name = name
    }
}

struct PutLexiconInputBody: Swift.Equatable {
    public let content: Swift.String?
}

extension PutLexiconInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
    }
}

extension PutLexiconOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutLexiconOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLexiconException" : self = .invalidLexiconException(try InvalidLexiconException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LexiconSizeExceededException" : self = .lexiconSizeExceededException(try LexiconSizeExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaxLexemeLengthExceededException" : self = .maxLexemeLengthExceededException(try MaxLexemeLengthExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaxLexiconsNumberExceededException" : self = .maxLexiconsNumberExceededException(try MaxLexiconsNumberExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailureException" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedPlsAlphabetException" : self = .unsupportedPlsAlphabetException(try UnsupportedPlsAlphabetException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedPlsLanguageException" : self = .unsupportedPlsLanguageException(try UnsupportedPlsLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutLexiconOutputError: Swift.Error, Swift.Equatable {
    case invalidLexiconException(InvalidLexiconException)
    case lexiconSizeExceededException(LexiconSizeExceededException)
    case maxLexemeLengthExceededException(MaxLexemeLengthExceededException)
    case maxLexiconsNumberExceededException(MaxLexiconsNumberExceededException)
    case serviceFailureException(ServiceFailureException)
    case unsupportedPlsAlphabetException(UnsupportedPlsAlphabetException)
    case unsupportedPlsLanguageException(UnsupportedPlsLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLexiconOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutLexiconOutputResponse()"}
}

extension PutLexiconOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutLexiconOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutLexiconOutputResponseBody: Swift.Equatable {
}

extension PutLexiconOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ServiceFailureException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceFailureException(message: \(Swift.String(describing: message)))"}
}

extension ServiceFailureException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceFailureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An unknown condition has caused a service failure.
public struct ServiceFailureException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceFailureExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PollyClientTypes {
    public enum SpeechMarkType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sentence
        case ssml
        case viseme
        case word
        case sdkUnknown(Swift.String)

        public static var allCases: [SpeechMarkType] {
            return [
                .sentence,
                .ssml,
                .viseme,
                .word,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sentence: return "sentence"
            case .ssml: return "ssml"
            case .viseme: return "viseme"
            case .word: return "word"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SpeechMarkType(rawValue: rawValue) ?? SpeechMarkType.sdkUnknown(rawValue)
        }
    }
}

extension SsmlMarksNotSupportedForTextTypeException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SsmlMarksNotSupportedForTextTypeException(message: \(Swift.String(describing: message)))"}
}

extension SsmlMarksNotSupportedForTextTypeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SsmlMarksNotSupportedForTextTypeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// SSML speech marks are not supported for plain text-type input.
public struct SsmlMarksNotSupportedForTextTypeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SsmlMarksNotSupportedForTextTypeExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension SsmlMarksNotSupportedForTextTypeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct StartSpeechSynthesisTaskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartSpeechSynthesisTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartSpeechSynthesisTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartSpeechSynthesisTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartSpeechSynthesisTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartSpeechSynthesisTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartSpeechSynthesisTaskOutputError>
}

extension StartSpeechSynthesisTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartSpeechSynthesisTaskInput(engine: \(Swift.String(describing: engine)), languageCode: \(Swift.String(describing: languageCode)), lexiconNames: \(Swift.String(describing: lexiconNames)), outputFormat: \(Swift.String(describing: outputFormat)), outputS3BucketName: \(Swift.String(describing: outputS3BucketName)), outputS3KeyPrefix: \(Swift.String(describing: outputS3KeyPrefix)), sampleRate: \(Swift.String(describing: sampleRate)), snsTopicArn: \(Swift.String(describing: snsTopicArn)), speechMarkTypes: \(Swift.String(describing: speechMarkTypes)), text: \(Swift.String(describing: text)), textType: \(Swift.String(describing: textType)), voiceId: \(Swift.String(describing: voiceId)))"}
}

extension StartSpeechSynthesisTaskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engine = "Engine"
        case languageCode = "LanguageCode"
        case lexiconNames = "LexiconNames"
        case outputFormat = "OutputFormat"
        case outputS3BucketName = "OutputS3BucketName"
        case outputS3KeyPrefix = "OutputS3KeyPrefix"
        case sampleRate = "SampleRate"
        case snsTopicArn = "SnsTopicArn"
        case speechMarkTypes = "SpeechMarkTypes"
        case text = "Text"
        case textType = "TextType"
        case voiceId = "VoiceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let engine = engine {
            try encodeContainer.encode(engine.rawValue, forKey: .engine)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lexiconNames = lexiconNames {
            var lexiconNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lexiconNames)
            for lexiconnamelist0 in lexiconNames {
                try lexiconNamesContainer.encode(lexiconnamelist0)
            }
        }
        if let outputFormat = outputFormat {
            try encodeContainer.encode(outputFormat.rawValue, forKey: .outputFormat)
        }
        if let outputS3BucketName = outputS3BucketName {
            try encodeContainer.encode(outputS3BucketName, forKey: .outputS3BucketName)
        }
        if let outputS3KeyPrefix = outputS3KeyPrefix {
            try encodeContainer.encode(outputS3KeyPrefix, forKey: .outputS3KeyPrefix)
        }
        if let sampleRate = sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let snsTopicArn = snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
        if let speechMarkTypes = speechMarkTypes {
            var speechMarkTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .speechMarkTypes)
            for speechmarktypelist0 in speechMarkTypes {
                try speechMarkTypesContainer.encode(speechmarktypelist0.rawValue)
            }
        }
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let textType = textType {
            try encodeContainer.encode(textType.rawValue, forKey: .textType)
        }
        if let voiceId = voiceId {
            try encodeContainer.encode(voiceId.rawValue, forKey: .voiceId)
        }
    }
}

public struct StartSpeechSynthesisTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartSpeechSynthesisTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartSpeechSynthesisTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartSpeechSynthesisTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartSpeechSynthesisTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartSpeechSynthesisTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartSpeechSynthesisTaskOutputError>
}

public struct StartSpeechSynthesisTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartSpeechSynthesisTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartSpeechSynthesisTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartSpeechSynthesisTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartSpeechSynthesisTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartSpeechSynthesisTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartSpeechSynthesisTaskOutputError>
}

public struct StartSpeechSynthesisTaskInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartSpeechSynthesisTaskInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: StartSpeechSynthesisTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartSpeechSynthesisTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartSpeechSynthesisTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartSpeechSynthesisTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartSpeechSynthesisTaskOutputError>
}

public struct StartSpeechSynthesisTaskInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartSpeechSynthesisTaskInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: StartSpeechSynthesisTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartSpeechSynthesisTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/v1/synthesisTasks"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartSpeechSynthesisTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartSpeechSynthesisTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartSpeechSynthesisTaskOutputError>
}

public struct StartSpeechSynthesisTaskInput: Swift.Equatable {
    /// Specifies the engine (standard or neural) for Amazon Polly to use when processing input text for speech synthesis. Using a voice that is not supported for the engine selected will result in an error.
    public var engine: PollyClientTypes.Engine?
    /// Optional language code for the Speech Synthesis request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the [DescribeVoices](https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html) operation for the LanguageCode parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.
    public var languageCode: PollyClientTypes.LanguageCode?
    /// List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice.
    public var lexiconNames: [Swift.String]?
    /// The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json.
    /// This member is required.
    public var outputFormat: PollyClientTypes.OutputFormat?
    /// Amazon S3 bucket name to which the output file will be saved.
    /// This member is required.
    public var outputS3BucketName: Swift.String?
    /// The Amazon S3 key prefix for the output speech file.
    public var outputS3KeyPrefix: Swift.String?
    /// The audio frequency specified in Hz. The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050", and "24000". The default value for standard voices is "22050". The default value for neural voices is "24000". Valid values for pcm are "8000" and "16000" The default value is "16000".
    public var sampleRate: Swift.String?
    /// ARN for the SNS topic optionally used for providing status notification for a speech synthesis task.
    public var snsTopicArn: Swift.String?
    /// The type of speech marks returned for the input text.
    public var speechMarkTypes: [PollyClientTypes.SpeechMarkType]?
    /// The input text to synthesize. If you specify ssml as the TextType, follow the SSML format for the input text.
    /// This member is required.
    public var text: Swift.String?
    /// Specifies whether the input text is plain text or SSML. The default value is plain text.
    public var textType: PollyClientTypes.TextType?
    /// Voice ID to use for the synthesis.
    /// This member is required.
    public var voiceId: PollyClientTypes.VoiceId?

    public init (
        engine: PollyClientTypes.Engine? = nil,
        languageCode: PollyClientTypes.LanguageCode? = nil,
        lexiconNames: [Swift.String]? = nil,
        outputFormat: PollyClientTypes.OutputFormat? = nil,
        outputS3BucketName: Swift.String? = nil,
        outputS3KeyPrefix: Swift.String? = nil,
        sampleRate: Swift.String? = nil,
        snsTopicArn: Swift.String? = nil,
        speechMarkTypes: [PollyClientTypes.SpeechMarkType]? = nil,
        text: Swift.String? = nil,
        textType: PollyClientTypes.TextType? = nil,
        voiceId: PollyClientTypes.VoiceId? = nil
    )
    {
        self.engine = engine
        self.languageCode = languageCode
        self.lexiconNames = lexiconNames
        self.outputFormat = outputFormat
        self.outputS3BucketName = outputS3BucketName
        self.outputS3KeyPrefix = outputS3KeyPrefix
        self.sampleRate = sampleRate
        self.snsTopicArn = snsTopicArn
        self.speechMarkTypes = speechMarkTypes
        self.text = text
        self.textType = textType
        self.voiceId = voiceId
    }
}

struct StartSpeechSynthesisTaskInputBody: Swift.Equatable {
    public let engine: PollyClientTypes.Engine?
    public let languageCode: PollyClientTypes.LanguageCode?
    public let lexiconNames: [Swift.String]?
    public let outputFormat: PollyClientTypes.OutputFormat?
    public let outputS3BucketName: Swift.String?
    public let outputS3KeyPrefix: Swift.String?
    public let sampleRate: Swift.String?
    public let snsTopicArn: Swift.String?
    public let speechMarkTypes: [PollyClientTypes.SpeechMarkType]?
    public let text: Swift.String?
    public let textType: PollyClientTypes.TextType?
    public let voiceId: PollyClientTypes.VoiceId?
}

extension StartSpeechSynthesisTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engine = "Engine"
        case languageCode = "LanguageCode"
        case lexiconNames = "LexiconNames"
        case outputFormat = "OutputFormat"
        case outputS3BucketName = "OutputS3BucketName"
        case outputS3KeyPrefix = "OutputS3KeyPrefix"
        case sampleRate = "SampleRate"
        case snsTopicArn = "SnsTopicArn"
        case speechMarkTypes = "SpeechMarkTypes"
        case text = "Text"
        case textType = "TextType"
        case voiceId = "VoiceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineDecoded = try containerValues.decodeIfPresent(PollyClientTypes.Engine.self, forKey: .engine)
        engine = engineDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(PollyClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lexiconNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .lexiconNames)
        var lexiconNamesDecoded0:[Swift.String]? = nil
        if let lexiconNamesContainer = lexiconNamesContainer {
            lexiconNamesDecoded0 = [Swift.String]()
            for string0 in lexiconNamesContainer {
                if let string0 = string0 {
                    lexiconNamesDecoded0?.append(string0)
                }
            }
        }
        lexiconNames = lexiconNamesDecoded0
        let outputFormatDecoded = try containerValues.decodeIfPresent(PollyClientTypes.OutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let outputS3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3BucketName)
        outputS3BucketName = outputS3BucketNameDecoded
        let outputS3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3KeyPrefix)
        outputS3KeyPrefix = outputS3KeyPrefixDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let speechMarkTypesContainer = try containerValues.decodeIfPresent([PollyClientTypes.SpeechMarkType?].self, forKey: .speechMarkTypes)
        var speechMarkTypesDecoded0:[PollyClientTypes.SpeechMarkType]? = nil
        if let speechMarkTypesContainer = speechMarkTypesContainer {
            speechMarkTypesDecoded0 = [PollyClientTypes.SpeechMarkType]()
            for string0 in speechMarkTypesContainer {
                if let string0 = string0 {
                    speechMarkTypesDecoded0?.append(string0)
                }
            }
        }
        speechMarkTypes = speechMarkTypesDecoded0
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let textTypeDecoded = try containerValues.decodeIfPresent(PollyClientTypes.TextType.self, forKey: .textType)
        textType = textTypeDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(PollyClientTypes.VoiceId.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
    }
}

extension StartSpeechSynthesisTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartSpeechSynthesisTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EngineNotSupportedException" : self = .engineNotSupportedException(try EngineNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3BucketException" : self = .invalidS3BucketException(try InvalidS3BucketException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3KeyException" : self = .invalidS3KeyException(try InvalidS3KeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSampleRateException" : self = .invalidSampleRateException(try InvalidSampleRateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSnsTopicArnException" : self = .invalidSnsTopicArnException(try InvalidSnsTopicArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSsmlException" : self = .invalidSsmlException(try InvalidSsmlException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LanguageNotSupportedException" : self = .languageNotSupportedException(try LanguageNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LexiconNotFoundException" : self = .lexiconNotFoundException(try LexiconNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MarksNotSupportedForFormatException" : self = .marksNotSupportedForFormatException(try MarksNotSupportedForFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailureException" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SsmlMarksNotSupportedForTextTypeException" : self = .ssmlMarksNotSupportedForTextTypeException(try SsmlMarksNotSupportedForTextTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextLengthExceededException" : self = .textLengthExceededException(try TextLengthExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartSpeechSynthesisTaskOutputError: Swift.Error, Swift.Equatable {
    case engineNotSupportedException(EngineNotSupportedException)
    case invalidS3BucketException(InvalidS3BucketException)
    case invalidS3KeyException(InvalidS3KeyException)
    case invalidSampleRateException(InvalidSampleRateException)
    case invalidSnsTopicArnException(InvalidSnsTopicArnException)
    case invalidSsmlException(InvalidSsmlException)
    case languageNotSupportedException(LanguageNotSupportedException)
    case lexiconNotFoundException(LexiconNotFoundException)
    case marksNotSupportedForFormatException(MarksNotSupportedForFormatException)
    case serviceFailureException(ServiceFailureException)
    case ssmlMarksNotSupportedForTextTypeException(SsmlMarksNotSupportedForTextTypeException)
    case textLengthExceededException(TextLengthExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartSpeechSynthesisTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartSpeechSynthesisTaskOutputResponse(synthesisTask: \(Swift.String(describing: synthesisTask)))"}
}

extension StartSpeechSynthesisTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartSpeechSynthesisTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.synthesisTask = output.synthesisTask
        } else {
            self.synthesisTask = nil
        }
    }
}

public struct StartSpeechSynthesisTaskOutputResponse: Swift.Equatable {
    /// SynthesisTask object that provides information and attributes about a newly submitted speech synthesis task.
    public var synthesisTask: PollyClientTypes.SynthesisTask?

    public init (
        synthesisTask: PollyClientTypes.SynthesisTask? = nil
    )
    {
        self.synthesisTask = synthesisTask
    }
}

struct StartSpeechSynthesisTaskOutputResponseBody: Swift.Equatable {
    public let synthesisTask: PollyClientTypes.SynthesisTask?
}

extension StartSpeechSynthesisTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case synthesisTask = "SynthesisTask"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let synthesisTaskDecoded = try containerValues.decodeIfPresent(PollyClientTypes.SynthesisTask.self, forKey: .synthesisTask)
        synthesisTask = synthesisTaskDecoded
    }
}

extension PollyClientTypes.SynthesisTask: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case engine = "Engine"
        case languageCode = "LanguageCode"
        case lexiconNames = "LexiconNames"
        case outputFormat = "OutputFormat"
        case outputUri = "OutputUri"
        case requestCharacters = "RequestCharacters"
        case sampleRate = "SampleRate"
        case snsTopicArn = "SnsTopicArn"
        case speechMarkTypes = "SpeechMarkTypes"
        case taskId = "TaskId"
        case taskStatus = "TaskStatus"
        case taskStatusReason = "TaskStatusReason"
        case textType = "TextType"
        case voiceId = "VoiceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let engine = engine {
            try encodeContainer.encode(engine.rawValue, forKey: .engine)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lexiconNames = lexiconNames {
            var lexiconNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lexiconNames)
            for lexiconnamelist0 in lexiconNames {
                try lexiconNamesContainer.encode(lexiconnamelist0)
            }
        }
        if let outputFormat = outputFormat {
            try encodeContainer.encode(outputFormat.rawValue, forKey: .outputFormat)
        }
        if let outputUri = outputUri {
            try encodeContainer.encode(outputUri, forKey: .outputUri)
        }
        if requestCharacters != 0 {
            try encodeContainer.encode(requestCharacters, forKey: .requestCharacters)
        }
        if let sampleRate = sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let snsTopicArn = snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
        if let speechMarkTypes = speechMarkTypes {
            var speechMarkTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .speechMarkTypes)
            for speechmarktypelist0 in speechMarkTypes {
                try speechMarkTypesContainer.encode(speechmarktypelist0.rawValue)
            }
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskStatus = taskStatus {
            try encodeContainer.encode(taskStatus.rawValue, forKey: .taskStatus)
        }
        if let taskStatusReason = taskStatusReason {
            try encodeContainer.encode(taskStatusReason, forKey: .taskStatusReason)
        }
        if let textType = textType {
            try encodeContainer.encode(textType.rawValue, forKey: .textType)
        }
        if let voiceId = voiceId {
            try encodeContainer.encode(voiceId.rawValue, forKey: .voiceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineDecoded = try containerValues.decodeIfPresent(PollyClientTypes.Engine.self, forKey: .engine)
        engine = engineDecoded
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let taskStatusDecoded = try containerValues.decodeIfPresent(PollyClientTypes.TaskStatus.self, forKey: .taskStatus)
        taskStatus = taskStatusDecoded
        let taskStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskStatusReason)
        taskStatusReason = taskStatusReasonDecoded
        let outputUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputUri)
        outputUri = outputUriDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let requestCharactersDecoded = try containerValues.decode(Swift.Int.self, forKey: .requestCharacters)
        requestCharacters = requestCharactersDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let lexiconNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .lexiconNames)
        var lexiconNamesDecoded0:[Swift.String]? = nil
        if let lexiconNamesContainer = lexiconNamesContainer {
            lexiconNamesDecoded0 = [Swift.String]()
            for string0 in lexiconNamesContainer {
                if let string0 = string0 {
                    lexiconNamesDecoded0?.append(string0)
                }
            }
        }
        lexiconNames = lexiconNamesDecoded0
        let outputFormatDecoded = try containerValues.decodeIfPresent(PollyClientTypes.OutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let speechMarkTypesContainer = try containerValues.decodeIfPresent([PollyClientTypes.SpeechMarkType?].self, forKey: .speechMarkTypes)
        var speechMarkTypesDecoded0:[PollyClientTypes.SpeechMarkType]? = nil
        if let speechMarkTypesContainer = speechMarkTypesContainer {
            speechMarkTypesDecoded0 = [PollyClientTypes.SpeechMarkType]()
            for string0 in speechMarkTypesContainer {
                if let string0 = string0 {
                    speechMarkTypesDecoded0?.append(string0)
                }
            }
        }
        speechMarkTypes = speechMarkTypesDecoded0
        let textTypeDecoded = try containerValues.decodeIfPresent(PollyClientTypes.TextType.self, forKey: .textType)
        textType = textTypeDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(PollyClientTypes.VoiceId.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(PollyClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension PollyClientTypes.SynthesisTask: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SynthesisTask(creationTime: \(Swift.String(describing: creationTime)), engine: \(Swift.String(describing: engine)), languageCode: \(Swift.String(describing: languageCode)), lexiconNames: \(Swift.String(describing: lexiconNames)), outputFormat: \(Swift.String(describing: outputFormat)), outputUri: \(Swift.String(describing: outputUri)), requestCharacters: \(Swift.String(describing: requestCharacters)), sampleRate: \(Swift.String(describing: sampleRate)), snsTopicArn: \(Swift.String(describing: snsTopicArn)), speechMarkTypes: \(Swift.String(describing: speechMarkTypes)), taskId: \(Swift.String(describing: taskId)), taskStatus: \(Swift.String(describing: taskStatus)), taskStatusReason: \(Swift.String(describing: taskStatusReason)), textType: \(Swift.String(describing: textType)), voiceId: \(Swift.String(describing: voiceId)))"}
}

extension PollyClientTypes {
    /// SynthesisTask object that provides information about a speech synthesis task.
    public struct SynthesisTask: Swift.Equatable {
        /// Timestamp for the time the synthesis task was started.
        public var creationTime: ClientRuntime.Date?
        /// Specifies the engine (standard or neural) for Amazon Polly to use when processing input text for speech synthesis. Using a voice that is not supported for the engine selected will result in an error.
        public var engine: PollyClientTypes.Engine?
        /// Optional language code for a synthesis task. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the [DescribeVoices](https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html) operation for the LanguageCode parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.
        public var languageCode: PollyClientTypes.LanguageCode?
        /// List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice.
        public var lexiconNames: [Swift.String]?
        /// The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json.
        public var outputFormat: PollyClientTypes.OutputFormat?
        /// Pathway for the output speech file.
        public var outputUri: Swift.String?
        /// Number of billable characters synthesized.
        public var requestCharacters: Swift.Int
        /// The audio frequency specified in Hz. The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050", and "24000". The default value for standard voices is "22050". The default value for neural voices is "24000". Valid values for pcm are "8000" and "16000" The default value is "16000".
        public var sampleRate: Swift.String?
        /// ARN for the SNS topic optionally used for providing status notification for a speech synthesis task.
        public var snsTopicArn: Swift.String?
        /// The type of speech marks returned for the input text.
        public var speechMarkTypes: [PollyClientTypes.SpeechMarkType]?
        /// The Amazon Polly generated identifier for a speech synthesis task.
        public var taskId: Swift.String?
        /// Current status of the individual speech synthesis task.
        public var taskStatus: PollyClientTypes.TaskStatus?
        /// Reason for the current status of a specific speech synthesis task, including errors if the task has failed.
        public var taskStatusReason: Swift.String?
        /// Specifies whether the input text is plain text or SSML. The default value is plain text.
        public var textType: PollyClientTypes.TextType?
        /// Voice ID to use for the synthesis.
        public var voiceId: PollyClientTypes.VoiceId?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            engine: PollyClientTypes.Engine? = nil,
            languageCode: PollyClientTypes.LanguageCode? = nil,
            lexiconNames: [Swift.String]? = nil,
            outputFormat: PollyClientTypes.OutputFormat? = nil,
            outputUri: Swift.String? = nil,
            requestCharacters: Swift.Int = 0,
            sampleRate: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil,
            speechMarkTypes: [PollyClientTypes.SpeechMarkType]? = nil,
            taskId: Swift.String? = nil,
            taskStatus: PollyClientTypes.TaskStatus? = nil,
            taskStatusReason: Swift.String? = nil,
            textType: PollyClientTypes.TextType? = nil,
            voiceId: PollyClientTypes.VoiceId? = nil
        )
        {
            self.creationTime = creationTime
            self.engine = engine
            self.languageCode = languageCode
            self.lexiconNames = lexiconNames
            self.outputFormat = outputFormat
            self.outputUri = outputUri
            self.requestCharacters = requestCharacters
            self.sampleRate = sampleRate
            self.snsTopicArn = snsTopicArn
            self.speechMarkTypes = speechMarkTypes
            self.taskId = taskId
            self.taskStatus = taskStatus
            self.taskStatusReason = taskStatusReason
            self.textType = textType
            self.voiceId = voiceId
        }
    }

}

extension SynthesisTaskNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SynthesisTaskNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension SynthesisTaskNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SynthesisTaskNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The Speech Synthesis task with requested Task ID cannot be found.
public struct SynthesisTaskNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SynthesisTaskNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension SynthesisTaskNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct SynthesizeSpeechInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SynthesizeSpeechInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SynthesizeSpeechInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SynthesizeSpeechInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SynthesizeSpeechOutputError>
}

extension SynthesizeSpeechInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SynthesizeSpeechInput(engine: \(Swift.String(describing: engine)), languageCode: \(Swift.String(describing: languageCode)), lexiconNames: \(Swift.String(describing: lexiconNames)), outputFormat: \(Swift.String(describing: outputFormat)), sampleRate: \(Swift.String(describing: sampleRate)), speechMarkTypes: \(Swift.String(describing: speechMarkTypes)), text: \(Swift.String(describing: text)), textType: \(Swift.String(describing: textType)), voiceId: \(Swift.String(describing: voiceId)))"}
}

extension SynthesizeSpeechInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engine = "Engine"
        case languageCode = "LanguageCode"
        case lexiconNames = "LexiconNames"
        case outputFormat = "OutputFormat"
        case sampleRate = "SampleRate"
        case speechMarkTypes = "SpeechMarkTypes"
        case text = "Text"
        case textType = "TextType"
        case voiceId = "VoiceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let engine = engine {
            try encodeContainer.encode(engine.rawValue, forKey: .engine)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lexiconNames = lexiconNames {
            var lexiconNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lexiconNames)
            for lexiconnamelist0 in lexiconNames {
                try lexiconNamesContainer.encode(lexiconnamelist0)
            }
        }
        if let outputFormat = outputFormat {
            try encodeContainer.encode(outputFormat.rawValue, forKey: .outputFormat)
        }
        if let sampleRate = sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let speechMarkTypes = speechMarkTypes {
            var speechMarkTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .speechMarkTypes)
            for speechmarktypelist0 in speechMarkTypes {
                try speechMarkTypesContainer.encode(speechmarktypelist0.rawValue)
            }
        }
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let textType = textType {
            try encodeContainer.encode(textType.rawValue, forKey: .textType)
        }
        if let voiceId = voiceId {
            try encodeContainer.encode(voiceId.rawValue, forKey: .voiceId)
        }
    }
}

public struct SynthesizeSpeechInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SynthesizeSpeechInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SynthesizeSpeechInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SynthesizeSpeechInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SynthesizeSpeechOutputError>
}

extension SynthesizeSpeechInput {
    public func presignURL(config: AWSClientRuntime.AWSClientConfiguration, expiration: Swift.Int64) -> ClientRuntime.URL? {
        let serviceName = "Polly"
        let input = self
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "synthesizeSpeech")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "polly")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<SynthesizeSpeechInput, SynthesizeSpeechOutputResponse, SynthesizeSpeechOutputError>(id: "synthesizeSpeech")
        operation.initializeStep.intercept(position: .after, middleware: SynthesizeSpeechInputURLPathMiddleware())
        operation.initializeStep.intercept(position: .after, middleware: SynthesizeSpeechInputURLHostMiddleware())
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.serializeStep.intercept(position: .after, middleware: SynthesizeSpeechInputGETQueryItemMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(signatureType: .requestQueryParams, expiration: expiration, unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let presignedRequestBuilder = operation.presignedRequest(context: context.build(), input: input, next: ClientRuntime.NoopHandler())
        guard let builtRequest = presignedRequestBuilder?.build(), let presignedURL = builtRequest.endpoint.url else {
            return nil
        }
        return presignedURL
    }
}

extension SynthesizeSpeechInput {
    public func presign(config: AWSClientRuntime.AWSClientConfiguration, expiration: Swift.Int64) -> ClientRuntime.SdkHttpRequest? {
        let serviceName = "Polly"
        let input = self
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "synthesizeSpeech")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "polly")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<SynthesizeSpeechInput, SynthesizeSpeechOutputResponse, SynthesizeSpeechOutputError>(id: "synthesizeSpeech")
        operation.initializeStep.intercept(position: .after, middleware: SynthesizeSpeechInputURLPathMiddleware())
        operation.initializeStep.intercept(position: .after, middleware: SynthesizeSpeechInputURLHostMiddleware())
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let apiMetadata = AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0")
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: apiMetadata, frameworkMetadata: config.frameworkMetadata)))
        operation.serializeStep.intercept(position: .after, middleware: SynthesizeSpeechInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: SynthesizeSpeechInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<SynthesizeSpeechInput, SynthesizeSpeechOutputResponse, SynthesizeSpeechOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .after, middleware: SynthesizeSpeechInputBodyMiddleware())
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(expiration: expiration, unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let presignedRequestBuilder = operation.presignedRequest(context: context.build(), input: input, next: ClientRuntime.NoopHandler())
        guard let builtRequest = presignedRequestBuilder?.build() else {
            return nil
        }
        return builtRequest
    }
}

public struct SynthesizeSpeechInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SynthesizeSpeechInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SynthesizeSpeechInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SynthesizeSpeechInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SynthesizeSpeechOutputError>
}

public struct SynthesizeSpeechInputGETQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SynthesizeSpeechInputGETQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SynthesizeSpeechInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let engine = input.operationInput.engine {
            let queryItem = ClientRuntime.URLQueryItem(name: "Engine".urlPercentEncoding(), value: Swift.String(engine.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let languageCode = input.operationInput.languageCode {
            let queryItem = ClientRuntime.URLQueryItem(name: "LanguageCode".urlPercentEncoding(), value: Swift.String(languageCode.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let lexiconNames = input.operationInput.lexiconNames {
            lexiconNames.forEach { item in
                let queryItem = ClientRuntime.URLQueryItem(name: "LexiconNames".urlPercentEncoding(), value: Swift.String(item).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        if let outputFormat = input.operationInput.outputFormat {
            let queryItem = ClientRuntime.URLQueryItem(name: "OutputFormat".urlPercentEncoding(), value: Swift.String(outputFormat.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let sampleRate = input.operationInput.sampleRate {
            let queryItem = ClientRuntime.URLQueryItem(name: "SampleRate".urlPercentEncoding(), value: Swift.String(sampleRate).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let speechMarkTypes = input.operationInput.speechMarkTypes {
            speechMarkTypes.forEach { item in
                let queryItem = ClientRuntime.URLQueryItem(name: "SpeechMarkTypes".urlPercentEncoding(), value: Swift.String(item.rawValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        if let text = input.operationInput.text {
            let queryItem = ClientRuntime.URLQueryItem(name: "Text".urlPercentEncoding(), value: Swift.String(text).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let textType = input.operationInput.textType {
            let queryItem = ClientRuntime.URLQueryItem(name: "TextType".urlPercentEncoding(), value: Swift.String(textType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let voiceId = input.operationInput.voiceId {
            let queryItem = ClientRuntime.URLQueryItem(name: "VoiceId".urlPercentEncoding(), value: Swift.String(voiceId.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SynthesizeSpeechInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SynthesizeSpeechOutputError>
}

public struct SynthesizeSpeechInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SynthesizeSpeechInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: SynthesizeSpeechInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SynthesizeSpeechInput
    public typealias MOutput = ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SynthesizeSpeechOutputError>
}

public struct SynthesizeSpeechInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SynthesizeSpeechInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: SynthesizeSpeechInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/v1/speech"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SynthesizeSpeechInput
    public typealias MOutput = ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SynthesizeSpeechOutputError>
}

public struct SynthesizeSpeechInput: Swift.Equatable {
    /// Specifies the engine (standard or neural) for Amazon Polly to use when processing input text for speech synthesis. For information on Amazon Polly voices and which voices are available in standard-only, NTTS-only, and both standard and NTTS formats, see [Available Voices](https://docs.aws.amazon.com/polly/latest/dg/voicelist.html). NTTS-only voices When using NTTS-only voices such as Kevin (en-US), this parameter is required and must be set to neural. If the engine is not specified, or is set to standard, this will result in an error. Type: String Valid Values: standard | neural Required: Yes Standard voices For standard voices, this is not required; the engine parameter defaults to standard. If the engine is not specified, or is set to standard and an NTTS-only voice is selected, this will result in an error.
    public var engine: PollyClientTypes.Engine?
    /// Optional language code for the Synthesize Speech request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the [DescribeVoices](https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html) operation for the LanguageCode parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.
    public var languageCode: PollyClientTypes.LanguageCode?
    /// List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. For information about storing lexicons, see [PutLexicon](https://docs.aws.amazon.com/polly/latest/dg/API_PutLexicon.html).
    public var lexiconNames: [Swift.String]?
    /// The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. When pcm is used, the content returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format.
    /// This member is required.
    public var outputFormat: PollyClientTypes.OutputFormat?
    /// The audio frequency specified in Hz. The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050", and "24000". The default value for standard voices is "22050". The default value for neural voices is "24000". Valid values for pcm are "8000" and "16000" The default value is "16000".
    public var sampleRate: Swift.String?
    /// The type of speech marks returned for the input text.
    public var speechMarkTypes: [PollyClientTypes.SpeechMarkType]?
    /// Input text to synthesize. If you specify ssml as the TextType, follow the SSML format for the input text.
    /// This member is required.
    public var text: Swift.String?
    /// Specifies whether the input text is plain text or SSML. The default value is plain text. For more information, see [Using SSML](https://docs.aws.amazon.com/polly/latest/dg/ssml.html).
    public var textType: PollyClientTypes.TextType?
    /// Voice ID to use for the synthesis. You can get a list of available voice IDs by calling the [DescribeVoices](https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html) operation.
    /// This member is required.
    public var voiceId: PollyClientTypes.VoiceId?

    public init (
        engine: PollyClientTypes.Engine? = nil,
        languageCode: PollyClientTypes.LanguageCode? = nil,
        lexiconNames: [Swift.String]? = nil,
        outputFormat: PollyClientTypes.OutputFormat? = nil,
        sampleRate: Swift.String? = nil,
        speechMarkTypes: [PollyClientTypes.SpeechMarkType]? = nil,
        text: Swift.String? = nil,
        textType: PollyClientTypes.TextType? = nil,
        voiceId: PollyClientTypes.VoiceId? = nil
    )
    {
        self.engine = engine
        self.languageCode = languageCode
        self.lexiconNames = lexiconNames
        self.outputFormat = outputFormat
        self.sampleRate = sampleRate
        self.speechMarkTypes = speechMarkTypes
        self.text = text
        self.textType = textType
        self.voiceId = voiceId
    }
}

struct SynthesizeSpeechInputBody: Swift.Equatable {
    public let engine: PollyClientTypes.Engine?
    public let languageCode: PollyClientTypes.LanguageCode?
    public let lexiconNames: [Swift.String]?
    public let outputFormat: PollyClientTypes.OutputFormat?
    public let sampleRate: Swift.String?
    public let speechMarkTypes: [PollyClientTypes.SpeechMarkType]?
    public let text: Swift.String?
    public let textType: PollyClientTypes.TextType?
    public let voiceId: PollyClientTypes.VoiceId?
}

extension SynthesizeSpeechInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engine = "Engine"
        case languageCode = "LanguageCode"
        case lexiconNames = "LexiconNames"
        case outputFormat = "OutputFormat"
        case sampleRate = "SampleRate"
        case speechMarkTypes = "SpeechMarkTypes"
        case text = "Text"
        case textType = "TextType"
        case voiceId = "VoiceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineDecoded = try containerValues.decodeIfPresent(PollyClientTypes.Engine.self, forKey: .engine)
        engine = engineDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(PollyClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lexiconNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .lexiconNames)
        var lexiconNamesDecoded0:[Swift.String]? = nil
        if let lexiconNamesContainer = lexiconNamesContainer {
            lexiconNamesDecoded0 = [Swift.String]()
            for string0 in lexiconNamesContainer {
                if let string0 = string0 {
                    lexiconNamesDecoded0?.append(string0)
                }
            }
        }
        lexiconNames = lexiconNamesDecoded0
        let outputFormatDecoded = try containerValues.decodeIfPresent(PollyClientTypes.OutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let speechMarkTypesContainer = try containerValues.decodeIfPresent([PollyClientTypes.SpeechMarkType?].self, forKey: .speechMarkTypes)
        var speechMarkTypesDecoded0:[PollyClientTypes.SpeechMarkType]? = nil
        if let speechMarkTypesContainer = speechMarkTypesContainer {
            speechMarkTypesDecoded0 = [PollyClientTypes.SpeechMarkType]()
            for string0 in speechMarkTypesContainer {
                if let string0 = string0 {
                    speechMarkTypesDecoded0?.append(string0)
                }
            }
        }
        speechMarkTypes = speechMarkTypesDecoded0
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let textTypeDecoded = try containerValues.decodeIfPresent(PollyClientTypes.TextType.self, forKey: .textType)
        textType = textTypeDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(PollyClientTypes.VoiceId.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
    }
}

extension SynthesizeSpeechOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SynthesizeSpeechOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EngineNotSupportedException" : self = .engineNotSupportedException(try EngineNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSampleRateException" : self = .invalidSampleRateException(try InvalidSampleRateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSsmlException" : self = .invalidSsmlException(try InvalidSsmlException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LanguageNotSupportedException" : self = .languageNotSupportedException(try LanguageNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LexiconNotFoundException" : self = .lexiconNotFoundException(try LexiconNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MarksNotSupportedForFormatException" : self = .marksNotSupportedForFormatException(try MarksNotSupportedForFormatException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFailureException" : self = .serviceFailureException(try ServiceFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SsmlMarksNotSupportedForTextTypeException" : self = .ssmlMarksNotSupportedForTextTypeException(try SsmlMarksNotSupportedForTextTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextLengthExceededException" : self = .textLengthExceededException(try TextLengthExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SynthesizeSpeechOutputError: Swift.Error, Swift.Equatable {
    case engineNotSupportedException(EngineNotSupportedException)
    case invalidSampleRateException(InvalidSampleRateException)
    case invalidSsmlException(InvalidSsmlException)
    case languageNotSupportedException(LanguageNotSupportedException)
    case lexiconNotFoundException(LexiconNotFoundException)
    case marksNotSupportedForFormatException(MarksNotSupportedForFormatException)
    case serviceFailureException(ServiceFailureException)
    case ssmlMarksNotSupportedForTextTypeException(SsmlMarksNotSupportedForTextTypeException)
    case textLengthExceededException(TextLengthExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SynthesizeSpeechOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SynthesizeSpeechOutputResponse(audioStream: \(Swift.String(describing: audioStream)), contentType: \(Swift.String(describing: contentType)), requestCharacters: \(Swift.String(describing: requestCharacters)))"}
}

extension SynthesizeSpeechOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            self.contentType = contentTypeHeaderValue
        } else {
            self.contentType = nil
        }
        if let requestCharactersHeaderValue = httpResponse.headers.value(for: "x-amzn-RequestCharacters") {
            self.requestCharacters = Swift.Int(requestCharactersHeaderValue) ?? 0
        } else {
            self.requestCharacters = 0
        }
        if case .stream(let reader) = httpResponse.body {
            let data = reader
            self.audioStream = data
        } else {
            self.audioStream = nil
        }
    }
}

public struct SynthesizeSpeechOutputResponse: Swift.Equatable {
    /// Stream containing the synthesized speech.
    public var audioStream: ClientRuntime.ByteStream?
    /// Specifies the type audio stream. This should reflect the OutputFormat parameter in your request.
    ///
    /// * If you request mp3 as the OutputFormat, the ContentType returned is audio/mpeg.
    ///
    /// * If you request ogg_vorbis as the OutputFormat, the ContentType returned is audio/ogg.
    ///
    /// * If you request pcm as the OutputFormat, the ContentType returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format.
    ///
    /// * If you request json as the OutputFormat, the ContentType returned is audio/json.
    public var contentType: Swift.String?
    /// Number of characters synthesized.
    public var requestCharacters: Swift.Int

    public init (
        audioStream: ClientRuntime.ByteStream? = nil,
        contentType: Swift.String? = nil,
        requestCharacters: Swift.Int = 0
    )
    {
        self.audioStream = audioStream
        self.contentType = contentType
        self.requestCharacters = requestCharacters
    }
}

struct SynthesizeSpeechOutputResponseBody: Swift.Equatable {
    public let audioStream: ClientRuntime.ByteStream?
}

extension SynthesizeSpeechOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioStream = "AudioStream"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioStreamDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .audioStream)
        audioStream = audioStreamDecoded
    }
}

extension PollyClientTypes {
    public enum TaskStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case scheduled
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .scheduled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "completed"
            case .failed: return "failed"
            case .inProgress: return "inProgress"
            case .scheduled: return "scheduled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskStatus(rawValue: rawValue) ?? TaskStatus.sdkUnknown(rawValue)
        }
    }
}

extension TextLengthExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TextLengthExceededException(message: \(Swift.String(describing: message)))"}
}

extension TextLengthExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TextLengthExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The value of the "Text" parameter is longer than the accepted limits. For the SynthesizeSpeech API, the limit for input text is a maximum of 6000 characters total, of which no more than 3000 can be billed characters. For the StartSpeechSynthesisTask API, the maximum is 200,000 characters, of which no more than 100,000 can be billed characters. SSML tags are not counted as billed characters.
public struct TextLengthExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TextLengthExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TextLengthExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PollyClientTypes {
    public enum TextType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ssml
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [TextType] {
            return [
                .ssml,
                .text,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ssml: return "ssml"
            case .text: return "text"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TextType(rawValue: rawValue) ?? TextType.sdkUnknown(rawValue)
        }
    }
}

extension UnsupportedPlsAlphabetException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnsupportedPlsAlphabetException(message: \(Swift.String(describing: message)))"}
}

extension UnsupportedPlsAlphabetException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UnsupportedPlsAlphabetExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The alphabet specified by the lexicon is not a supported alphabet. Valid values are x-sampa and ipa.
public struct UnsupportedPlsAlphabetException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedPlsAlphabetExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension UnsupportedPlsAlphabetExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedPlsLanguageException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnsupportedPlsLanguageException(message: \(Swift.String(describing: message)))"}
}

extension UnsupportedPlsLanguageException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UnsupportedPlsLanguageExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The language specified in the lexicon is unsupported. For a list of supported languages, see [Lexicon Attributes](https://docs.aws.amazon.com/polly/latest/dg/API_LexiconAttributes.html).
public struct UnsupportedPlsLanguageException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedPlsLanguageExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension UnsupportedPlsLanguageExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PollyClientTypes.Voice: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalLanguageCodes = "AdditionalLanguageCodes"
        case gender = "Gender"
        case id = "Id"
        case languageCode = "LanguageCode"
        case languageName = "LanguageName"
        case name = "Name"
        case supportedEngines = "SupportedEngines"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalLanguageCodes = additionalLanguageCodes {
            var additionalLanguageCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalLanguageCodes)
            for languagecodelist0 in additionalLanguageCodes {
                try additionalLanguageCodesContainer.encode(languagecodelist0.rawValue)
            }
        }
        if let gender = gender {
            try encodeContainer.encode(gender.rawValue, forKey: .gender)
        }
        if let id = id {
            try encodeContainer.encode(id.rawValue, forKey: .id)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageName = languageName {
            try encodeContainer.encode(languageName, forKey: .languageName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let supportedEngines = supportedEngines {
            var supportedEnginesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedEngines)
            for enginelist0 in supportedEngines {
                try supportedEnginesContainer.encode(enginelist0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let genderDecoded = try containerValues.decodeIfPresent(PollyClientTypes.Gender.self, forKey: .gender)
        gender = genderDecoded
        let idDecoded = try containerValues.decodeIfPresent(PollyClientTypes.VoiceId.self, forKey: .id)
        id = idDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(PollyClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageName)
        languageName = languageNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let additionalLanguageCodesContainer = try containerValues.decodeIfPresent([PollyClientTypes.LanguageCode?].self, forKey: .additionalLanguageCodes)
        var additionalLanguageCodesDecoded0:[PollyClientTypes.LanguageCode]? = nil
        if let additionalLanguageCodesContainer = additionalLanguageCodesContainer {
            additionalLanguageCodesDecoded0 = [PollyClientTypes.LanguageCode]()
            for string0 in additionalLanguageCodesContainer {
                if let string0 = string0 {
                    additionalLanguageCodesDecoded0?.append(string0)
                }
            }
        }
        additionalLanguageCodes = additionalLanguageCodesDecoded0
        let supportedEnginesContainer = try containerValues.decodeIfPresent([PollyClientTypes.Engine?].self, forKey: .supportedEngines)
        var supportedEnginesDecoded0:[PollyClientTypes.Engine]? = nil
        if let supportedEnginesContainer = supportedEnginesContainer {
            supportedEnginesDecoded0 = [PollyClientTypes.Engine]()
            for string0 in supportedEnginesContainer {
                if let string0 = string0 {
                    supportedEnginesDecoded0?.append(string0)
                }
            }
        }
        supportedEngines = supportedEnginesDecoded0
    }
}

extension PollyClientTypes.Voice: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Voice(additionalLanguageCodes: \(Swift.String(describing: additionalLanguageCodes)), gender: \(Swift.String(describing: gender)), id: \(Swift.String(describing: id)), languageCode: \(Swift.String(describing: languageCode)), languageName: \(Swift.String(describing: languageName)), name: \(Swift.String(describing: name)), supportedEngines: \(Swift.String(describing: supportedEngines)))"}
}

extension PollyClientTypes {
    /// Description of the voice.
    public struct Voice: Swift.Equatable {
        /// Additional codes for languages available for the specified voice in addition to its default language. For example, the default language for Aditi is Indian English (en-IN) because it was first used for that language. Since Aditi is bilingual and fluent in both Indian English and Hindi, this parameter would show the code hi-IN.
        public var additionalLanguageCodes: [PollyClientTypes.LanguageCode]?
        /// Gender of the voice.
        public var gender: PollyClientTypes.Gender?
        /// Amazon Polly assigned voice ID. This is the ID that you specify when calling the SynthesizeSpeech operation.
        public var id: PollyClientTypes.VoiceId?
        /// Language code of the voice.
        public var languageCode: PollyClientTypes.LanguageCode?
        /// Human readable name of the language in English.
        public var languageName: Swift.String?
        /// Name of the voice (for example, Salli, Kendra, etc.). This provides a human readable voice name that you might display in your application.
        public var name: Swift.String?
        /// Specifies which engines (standard or neural) that are supported by a given voice.
        public var supportedEngines: [PollyClientTypes.Engine]?

        public init (
            additionalLanguageCodes: [PollyClientTypes.LanguageCode]? = nil,
            gender: PollyClientTypes.Gender? = nil,
            id: PollyClientTypes.VoiceId? = nil,
            languageCode: PollyClientTypes.LanguageCode? = nil,
            languageName: Swift.String? = nil,
            name: Swift.String? = nil,
            supportedEngines: [PollyClientTypes.Engine]? = nil
        )
        {
            self.additionalLanguageCodes = additionalLanguageCodes
            self.gender = gender
            self.id = id
            self.languageCode = languageCode
            self.languageName = languageName
            self.name = name
            self.supportedEngines = supportedEngines
        }
    }

}

extension PollyClientTypes {
    public enum VoiceId: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aditi
        case amy
        case aria
        case astrid
        case ayanda
        case bianca
        case brian
        case camila
        case carla
        case carmen
        case celine
        case chantal
        case conchita
        case cristiano
        case dora
        case emma
        case enrique
        case ewa
        case filiz
        case gabrielle
        case geraint
        case giorgio
        case gwyneth
        case hans
        case ines
        case ivy
        case jacek
        case jan
        case joanna
        case joey
        case justin
        case karl
        case kendra
        case kevin
        case kimberly
        case lea
        case liv
        case lotte
        case lucia
        case lupe
        case mads
        case maja
        case marlene
        case mathieu
        case matthew
        case maxim
        case mia
        case miguel
        case mizuki
        case naja
        case nicole
        case olivia
        case penelope
        case raveena
        case ricardo
        case ruben
        case russell
        case salli
        case seoyeon
        case takumi
        case tatyana
        case vicki
        case vitoria
        case zeina
        case zhiyu
        case sdkUnknown(Swift.String)

        public static var allCases: [VoiceId] {
            return [
                .aditi,
                .amy,
                .aria,
                .astrid,
                .ayanda,
                .bianca,
                .brian,
                .camila,
                .carla,
                .carmen,
                .celine,
                .chantal,
                .conchita,
                .cristiano,
                .dora,
                .emma,
                .enrique,
                .ewa,
                .filiz,
                .gabrielle,
                .geraint,
                .giorgio,
                .gwyneth,
                .hans,
                .ines,
                .ivy,
                .jacek,
                .jan,
                .joanna,
                .joey,
                .justin,
                .karl,
                .kendra,
                .kevin,
                .kimberly,
                .lea,
                .liv,
                .lotte,
                .lucia,
                .lupe,
                .mads,
                .maja,
                .marlene,
                .mathieu,
                .matthew,
                .maxim,
                .mia,
                .miguel,
                .mizuki,
                .naja,
                .nicole,
                .olivia,
                .penelope,
                .raveena,
                .ricardo,
                .ruben,
                .russell,
                .salli,
                .seoyeon,
                .takumi,
                .tatyana,
                .vicki,
                .vitoria,
                .zeina,
                .zhiyu,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aditi: return "Aditi"
            case .amy: return "Amy"
            case .aria: return "Aria"
            case .astrid: return "Astrid"
            case .ayanda: return "Ayanda"
            case .bianca: return "Bianca"
            case .brian: return "Brian"
            case .camila: return "Camila"
            case .carla: return "Carla"
            case .carmen: return "Carmen"
            case .celine: return "Celine"
            case .chantal: return "Chantal"
            case .conchita: return "Conchita"
            case .cristiano: return "Cristiano"
            case .dora: return "Dora"
            case .emma: return "Emma"
            case .enrique: return "Enrique"
            case .ewa: return "Ewa"
            case .filiz: return "Filiz"
            case .gabrielle: return "Gabrielle"
            case .geraint: return "Geraint"
            case .giorgio: return "Giorgio"
            case .gwyneth: return "Gwyneth"
            case .hans: return "Hans"
            case .ines: return "Ines"
            case .ivy: return "Ivy"
            case .jacek: return "Jacek"
            case .jan: return "Jan"
            case .joanna: return "Joanna"
            case .joey: return "Joey"
            case .justin: return "Justin"
            case .karl: return "Karl"
            case .kendra: return "Kendra"
            case .kevin: return "Kevin"
            case .kimberly: return "Kimberly"
            case .lea: return "Lea"
            case .liv: return "Liv"
            case .lotte: return "Lotte"
            case .lucia: return "Lucia"
            case .lupe: return "Lupe"
            case .mads: return "Mads"
            case .maja: return "Maja"
            case .marlene: return "Marlene"
            case .mathieu: return "Mathieu"
            case .matthew: return "Matthew"
            case .maxim: return "Maxim"
            case .mia: return "Mia"
            case .miguel: return "Miguel"
            case .mizuki: return "Mizuki"
            case .naja: return "Naja"
            case .nicole: return "Nicole"
            case .olivia: return "Olivia"
            case .penelope: return "Penelope"
            case .raveena: return "Raveena"
            case .ricardo: return "Ricardo"
            case .ruben: return "Ruben"
            case .russell: return "Russell"
            case .salli: return "Salli"
            case .seoyeon: return "Seoyeon"
            case .takumi: return "Takumi"
            case .tatyana: return "Tatyana"
            case .vicki: return "Vicki"
            case .vitoria: return "Vitoria"
            case .zeina: return "Zeina"
            case .zhiyu: return "Zhiyu"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VoiceId(rawValue: rawValue) ?? VoiceId.sdkUnknown(rawValue)
        }
    }
}
