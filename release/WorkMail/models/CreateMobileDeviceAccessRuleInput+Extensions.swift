// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateMobileDeviceAccessRuleInputHeadersMiddleware: Middleware {
    public let id: String = "CreateMobileDeviceAccessRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMobileDeviceAccessRuleInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMobileDeviceAccessRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMobileDeviceAccessRuleInput>
    public typealias MOutput = OperationOutput<CreateMobileDeviceAccessRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMobileDeviceAccessRuleOutputError>
}

public struct CreateMobileDeviceAccessRuleInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateMobileDeviceAccessRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMobileDeviceAccessRuleInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMobileDeviceAccessRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMobileDeviceAccessRuleInput>
    public typealias MOutput = OperationOutput<CreateMobileDeviceAccessRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMobileDeviceAccessRuleOutputError>
}

public struct CreateMobileDeviceAccessRuleInputBodyMiddleware: Middleware {
    public let id: String = "CreateMobileDeviceAccessRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMobileDeviceAccessRuleInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMobileDeviceAccessRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMobileDeviceAccessRuleInput>
    public typealias MOutput = OperationOutput<CreateMobileDeviceAccessRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMobileDeviceAccessRuleOutputError>
}

extension CreateMobileDeviceAccessRuleInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case deviceModels = "DeviceModels"
        case deviceOperatingSystems = "DeviceOperatingSystems"
        case deviceTypes = "DeviceTypes"
        case deviceUserAgents = "DeviceUserAgents"
        case effect = "Effect"
        case name = "Name"
        case notDeviceModels = "NotDeviceModels"
        case notDeviceOperatingSystems = "NotDeviceOperatingSystems"
        case notDeviceTypes = "NotDeviceTypes"
        case notDeviceUserAgents = "NotDeviceUserAgents"
        case organizationId = "OrganizationId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let deviceModels = deviceModels {
            var deviceModelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deviceModels)
            for devicemodellist0 in deviceModels {
                try deviceModelsContainer.encode(devicemodellist0)
            }
        }
        if let deviceOperatingSystems = deviceOperatingSystems {
            var deviceOperatingSystemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deviceOperatingSystems)
            for deviceoperatingsystemlist0 in deviceOperatingSystems {
                try deviceOperatingSystemsContainer.encode(deviceoperatingsystemlist0)
            }
        }
        if let deviceTypes = deviceTypes {
            var deviceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deviceTypes)
            for devicetypelist0 in deviceTypes {
                try deviceTypesContainer.encode(devicetypelist0)
            }
        }
        if let deviceUserAgents = deviceUserAgents {
            var deviceUserAgentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deviceUserAgents)
            for deviceuseragentlist0 in deviceUserAgents {
                try deviceUserAgentsContainer.encode(deviceuseragentlist0)
            }
        }
        if let effect = effect {
            try encodeContainer.encode(effect.rawValue, forKey: .effect)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notDeviceModels = notDeviceModels {
            var notDeviceModelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notDeviceModels)
            for devicemodellist0 in notDeviceModels {
                try notDeviceModelsContainer.encode(devicemodellist0)
            }
        }
        if let notDeviceOperatingSystems = notDeviceOperatingSystems {
            var notDeviceOperatingSystemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notDeviceOperatingSystems)
            for deviceoperatingsystemlist0 in notDeviceOperatingSystems {
                try notDeviceOperatingSystemsContainer.encode(deviceoperatingsystemlist0)
            }
        }
        if let notDeviceTypes = notDeviceTypes {
            var notDeviceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notDeviceTypes)
            for devicetypelist0 in notDeviceTypes {
                try notDeviceTypesContainer.encode(devicetypelist0)
            }
        }
        if let notDeviceUserAgents = notDeviceUserAgents {
            var notDeviceUserAgentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notDeviceUserAgents)
            for deviceuseragentlist0 in notDeviceUserAgents {
                try notDeviceUserAgentsContainer.encode(deviceuseragentlist0)
            }
        }
        if let organizationId = organizationId {
            try encodeContainer.encode(organizationId, forKey: .organizationId)
        }
    }
}
