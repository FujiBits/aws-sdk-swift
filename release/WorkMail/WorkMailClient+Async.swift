// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension WorkMailClient {
    /// <p>Adds a member (user or group) to the resource's set of delegates.</p>
    func associateDelegateToResource(input: AssociateDelegateToResourceInput) async throws -> AssociateDelegateToResourceOutputResponse
    {
        typealias associateDelegateToResourceContinuation = CheckedContinuation<AssociateDelegateToResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateDelegateToResourceContinuation) in
            associateDelegateToResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds a member (user or group) to the group's set.</p>
    func associateMemberToGroup(input: AssociateMemberToGroupInput) async throws -> AssociateMemberToGroupOutputResponse
    {
        typealias associateMemberToGroupContinuation = CheckedContinuation<AssociateMemberToGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateMemberToGroupContinuation) in
            associateMemberToGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Cancels a mailbox export job.</p>
    ///          <note>
    ///             <p>If the mailbox export job is near completion, it might not be possible to cancel
    ///             it.</p>
    ///          </note>
    func cancelMailboxExportJob(input: CancelMailboxExportJobInput) async throws -> CancelMailboxExportJobOutputResponse
    {
        typealias cancelMailboxExportJobContinuation = CheckedContinuation<CancelMailboxExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelMailboxExportJobContinuation) in
            cancelMailboxExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds an alias to the set of a given member (user or group) of Amazon WorkMail.</p>
    func createAlias(input: CreateAliasInput) async throws -> CreateAliasOutputResponse
    {
        typealias createAliasContinuation = CheckedContinuation<CreateAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAliasContinuation) in
            createAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a group that can be used in Amazon WorkMail by calling the <a>RegisterToWorkMail</a> operation.</p>
    func createGroup(input: CreateGroupInput) async throws -> CreateGroupOutputResponse
    {
        typealias createGroupContinuation = CheckedContinuation<CreateGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createGroupContinuation) in
            createGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new mobile device access rule for the specified Amazon WorkMail organization.</p>
    func createMobileDeviceAccessRule(input: CreateMobileDeviceAccessRuleInput) async throws -> CreateMobileDeviceAccessRuleOutputResponse
    {
        typealias createMobileDeviceAccessRuleContinuation = CheckedContinuation<CreateMobileDeviceAccessRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMobileDeviceAccessRuleContinuation) in
            createMobileDeviceAccessRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new Amazon WorkMail organization. Optionally, you can choose to associate an existing AWS Directory Service directory with your organization. If an AWS Directory Service directory ID is specified, the organization alias must match the directory alias. If you choose not to associate an existing directory with your organization, then we create a new Amazon WorkMail directory for you. For more information, see <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/add_new_organization.html">Adding an organization</a> in the <i>Amazon WorkMail Administrator Guide</i>.</p>
    ///          <p>You can associate multiple email domains with an organization, then set your default email domain from the Amazon WorkMail console. You can also associate a domain that is managed in an Amazon Route 53 public hosted zone. For more information, see <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/add_domain.html">Adding a domain</a> and <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/default_domain.html">Choosing the default domain</a> in the <i>Amazon WorkMail Administrator Guide</i>.</p>
    ///          <p>Optionally, you can use a customer managed master key from AWS Key Management Service
    ///          (AWS KMS) to encrypt email for your organization. If you don't associate an AWS KMS key, Amazon WorkMail creates a
    ///          default AWS managed master key for you.</p>
    func createOrganization(input: CreateOrganizationInput) async throws -> CreateOrganizationOutputResponse
    {
        typealias createOrganizationContinuation = CheckedContinuation<CreateOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createOrganizationContinuation) in
            createOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new Amazon WorkMail resource. </p>
    func createResource(input: CreateResourceInput) async throws -> CreateResourceOutputResponse
    {
        typealias createResourceContinuation = CheckedContinuation<CreateResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createResourceContinuation) in
            createResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a user who can be used in Amazon WorkMail by calling the <a>RegisterToWorkMail</a> operation.</p>
    func createUser(input: CreateUserInput) async throws -> CreateUserOutputResponse
    {
        typealias createUserContinuation = CheckedContinuation<CreateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserContinuation) in
            createUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an access control rule for the specified WorkMail organization.</p>
    func deleteAccessControlRule(input: DeleteAccessControlRuleInput) async throws -> DeleteAccessControlRuleOutputResponse
    {
        typealias deleteAccessControlRuleContinuation = CheckedContinuation<DeleteAccessControlRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAccessControlRuleContinuation) in
            deleteAccessControlRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Remove one or more specified aliases from a set of aliases for a given
    ///          user.</p>
    func deleteAlias(input: DeleteAliasInput) async throws -> DeleteAliasOutputResponse
    {
        typealias deleteAliasContinuation = CheckedContinuation<DeleteAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAliasContinuation) in
            deleteAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a group from Amazon WorkMail.</p>
    func deleteGroup(input: DeleteGroupInput) async throws -> DeleteGroupOutputResponse
    {
        typealias deleteGroupContinuation = CheckedContinuation<DeleteGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGroupContinuation) in
            deleteGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes permissions granted to a member (user or group).</p>
    func deleteMailboxPermissions(input: DeleteMailboxPermissionsInput) async throws -> DeleteMailboxPermissionsOutputResponse
    {
        typealias deleteMailboxPermissionsContinuation = CheckedContinuation<DeleteMailboxPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMailboxPermissionsContinuation) in
            deleteMailboxPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a mobile device access rule for the specified Amazon WorkMail organization.</p>
    func deleteMobileDeviceAccessRule(input: DeleteMobileDeviceAccessRuleInput) async throws -> DeleteMobileDeviceAccessRuleOutputResponse
    {
        typealias deleteMobileDeviceAccessRuleContinuation = CheckedContinuation<DeleteMobileDeviceAccessRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMobileDeviceAccessRuleContinuation) in
            deleteMobileDeviceAccessRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an Amazon WorkMail organization and all underlying AWS resources managed by Amazon WorkMail as part of the organization. You can choose whether to delete the associated directory. For more information, see <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/remove_organization.html">Removing an organization</a> in the <i>Amazon WorkMail Administrator Guide</i>.</p>
    func deleteOrganization(input: DeleteOrganizationInput) async throws -> DeleteOrganizationOutputResponse
    {
        typealias deleteOrganizationContinuation = CheckedContinuation<DeleteOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteOrganizationContinuation) in
            deleteOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified resource. </p>
    func deleteResource(input: DeleteResourceInput) async throws -> DeleteResourceOutputResponse
    {
        typealias deleteResourceContinuation = CheckedContinuation<DeleteResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteResourceContinuation) in
            deleteResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified retention policy from the specified organization.</p>
    func deleteRetentionPolicy(input: DeleteRetentionPolicyInput) async throws -> DeleteRetentionPolicyOutputResponse
    {
        typealias deleteRetentionPolicyContinuation = CheckedContinuation<DeleteRetentionPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRetentionPolicyContinuation) in
            deleteRetentionPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a user from Amazon WorkMail and all subsequent systems. Before you can delete a
    ///          user, the user state must be <code>DISABLED</code>. Use the <a>DescribeUser</a>
    ///          action to confirm the user state.</p>
    ///          <p>Deleting a user is permanent and cannot be undone. WorkMail archives user mailboxes for
    ///          30 days before they are permanently removed.</p>
    func deleteUser(input: DeleteUserInput) async throws -> DeleteUserOutputResponse
    {
        typealias deleteUserContinuation = CheckedContinuation<DeleteUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserContinuation) in
            deleteUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Mark a user, group, or resource as no longer used in Amazon WorkMail. This action
    ///          disassociates the mailbox and schedules it for clean-up. WorkMail keeps mailboxes for 30 days
    ///          before they are permanently removed. The functionality in the console is
    ///             <i>Disable</i>.</p>
    func deregisterFromWorkMail(input: DeregisterFromWorkMailInput) async throws -> DeregisterFromWorkMailOutputResponse
    {
        typealias deregisterFromWorkMailContinuation = CheckedContinuation<DeregisterFromWorkMailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterFromWorkMailContinuation) in
            deregisterFromWorkMail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the data available for the group.</p>
    func describeGroup(input: DescribeGroupInput) async throws -> DescribeGroupOutputResponse
    {
        typealias describeGroupContinuation = CheckedContinuation<DescribeGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeGroupContinuation) in
            describeGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the current status of a mailbox export job.</p>
    func describeMailboxExportJob(input: DescribeMailboxExportJobInput) async throws -> DescribeMailboxExportJobOutputResponse
    {
        typealias describeMailboxExportJobContinuation = CheckedContinuation<DescribeMailboxExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMailboxExportJobContinuation) in
            describeMailboxExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides more information regarding a given organization based on its
    ///          identifier.</p>
    func describeOrganization(input: DescribeOrganizationInput) async throws -> DescribeOrganizationOutputResponse
    {
        typealias describeOrganizationContinuation = CheckedContinuation<DescribeOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOrganizationContinuation) in
            describeOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the data available for the resource.</p>
    func describeResource(input: DescribeResourceInput) async throws -> DescribeResourceOutputResponse
    {
        typealias describeResourceContinuation = CheckedContinuation<DescribeResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeResourceContinuation) in
            describeResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides information regarding the user.</p>
    func describeUser(input: DescribeUserInput) async throws -> DescribeUserOutputResponse
    {
        typealias describeUserContinuation = CheckedContinuation<DescribeUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserContinuation) in
            describeUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a member from the resource's set of delegates.</p>
    func disassociateDelegateFromResource(input: DisassociateDelegateFromResourceInput) async throws -> DisassociateDelegateFromResourceOutputResponse
    {
        typealias disassociateDelegateFromResourceContinuation = CheckedContinuation<DisassociateDelegateFromResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateDelegateFromResourceContinuation) in
            disassociateDelegateFromResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a member from a group.</p>
    func disassociateMemberFromGroup(input: DisassociateMemberFromGroupInput) async throws -> DisassociateMemberFromGroupOutputResponse
    {
        typealias disassociateMemberFromGroupContinuation = CheckedContinuation<DisassociateMemberFromGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateMemberFromGroupContinuation) in
            disassociateMemberFromGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the effects of an organization's access control rules as they apply to a
    ///          specified IPv4 address, access protocol action, or user ID. </p>
    func getAccessControlEffect(input: GetAccessControlEffectInput) async throws -> GetAccessControlEffectOutputResponse
    {
        typealias getAccessControlEffectContinuation = CheckedContinuation<GetAccessControlEffectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAccessControlEffectContinuation) in
            getAccessControlEffect(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the default retention policy details for the specified organization.</p>
    func getDefaultRetentionPolicy(input: GetDefaultRetentionPolicyInput) async throws -> GetDefaultRetentionPolicyOutputResponse
    {
        typealias getDefaultRetentionPolicyContinuation = CheckedContinuation<GetDefaultRetentionPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDefaultRetentionPolicyContinuation) in
            getDefaultRetentionPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Requests a user's mailbox details for a specified organization and user.</p>
    func getMailboxDetails(input: GetMailboxDetailsInput) async throws -> GetMailboxDetailsOutputResponse
    {
        typealias getMailboxDetailsContinuation = CheckedContinuation<GetMailboxDetailsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMailboxDetailsContinuation) in
            getMailboxDetails(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Simulates the effect of the mobile device access rules for the given attributes of a sample access event. Use this method to test the effects of the current set of mobile device access
    ///          rules for the Amazon WorkMail organization for a particular user's attributes.</p>
    func getMobileDeviceAccessEffect(input: GetMobileDeviceAccessEffectInput) async throws -> GetMobileDeviceAccessEffectOutputResponse
    {
        typealias getMobileDeviceAccessEffectContinuation = CheckedContinuation<GetMobileDeviceAccessEffectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMobileDeviceAccessEffectContinuation) in
            getMobileDeviceAccessEffect(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the access control rules for the specified organization.</p>
    func listAccessControlRules(input: ListAccessControlRulesInput) async throws -> ListAccessControlRulesOutputResponse
    {
        typealias listAccessControlRulesContinuation = CheckedContinuation<ListAccessControlRulesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAccessControlRulesContinuation) in
            listAccessControlRules(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a paginated call to list the aliases associated with a given
    ///          entity.</p>
    func listAliases(input: ListAliasesInput) async throws -> ListAliasesOutputResponse
    {
        typealias listAliasesContinuation = CheckedContinuation<ListAliasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAliasesContinuation) in
            listAliases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns an overview of the members of a group. Users and groups can be members of a
    ///          group.</p>
    func listGroupMembers(input: ListGroupMembersInput) async throws -> ListGroupMembersOutputResponse
    {
        typealias listGroupMembersContinuation = CheckedContinuation<ListGroupMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listGroupMembersContinuation) in
            listGroupMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns summaries of the organization's groups.</p>
    func listGroups(input: ListGroupsInput) async throws -> ListGroupsOutputResponse
    {
        typealias listGroupsContinuation = CheckedContinuation<ListGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listGroupsContinuation) in
            listGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the mailbox export jobs started for the specified organization within the last
    ///          seven days.</p>
    func listMailboxExportJobs(input: ListMailboxExportJobsInput) async throws -> ListMailboxExportJobsOutputResponse
    {
        typealias listMailboxExportJobsContinuation = CheckedContinuation<ListMailboxExportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMailboxExportJobsContinuation) in
            listMailboxExportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the mailbox permissions associated with a user, group, or resource
    ///          mailbox.</p>
    func listMailboxPermissions(input: ListMailboxPermissionsInput) async throws -> ListMailboxPermissionsOutputResponse
    {
        typealias listMailboxPermissionsContinuation = CheckedContinuation<ListMailboxPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMailboxPermissionsContinuation) in
            listMailboxPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the mobile device access rules for the specified Amazon WorkMail organization.</p>
    func listMobileDeviceAccessRules(input: ListMobileDeviceAccessRulesInput) async throws -> ListMobileDeviceAccessRulesOutputResponse
    {
        typealias listMobileDeviceAccessRulesContinuation = CheckedContinuation<ListMobileDeviceAccessRulesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMobileDeviceAccessRulesContinuation) in
            listMobileDeviceAccessRules(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns summaries of the customer's organizations.</p>
    func listOrganizations(input: ListOrganizationsInput) async throws -> ListOrganizationsOutputResponse
    {
        typealias listOrganizationsContinuation = CheckedContinuation<ListOrganizationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOrganizationsContinuation) in
            listOrganizations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the delegates associated with a resource. Users and groups can be resource
    ///          delegates and answer requests on behalf of the resource.</p>
    func listResourceDelegates(input: ListResourceDelegatesInput) async throws -> ListResourceDelegatesOutputResponse
    {
        typealias listResourceDelegatesContinuation = CheckedContinuation<ListResourceDelegatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourceDelegatesContinuation) in
            listResourceDelegates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns summaries of the organization's resources.</p>
    func listResources(input: ListResourcesInput) async throws -> ListResourcesOutputResponse
    {
        typealias listResourcesContinuation = CheckedContinuation<ListResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourcesContinuation) in
            listResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the tags applied to an Amazon WorkMail organization resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns summaries of the organization's users.</p>
    func listUsers(input: ListUsersInput) async throws -> ListUsersOutputResponse
    {
        typealias listUsersContinuation = CheckedContinuation<ListUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUsersContinuation) in
            listUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds a new access control rule for the specified organization. The rule allows or
    ///          denies access to the organization for the specified IPv4 addresses, access protocol
    ///          actions, and user IDs. Adding a new rule with the same name as an existing rule replaces
    ///          the older rule.</p>
    func putAccessControlRule(input: PutAccessControlRuleInput) async throws -> PutAccessControlRuleOutputResponse
    {
        typealias putAccessControlRuleContinuation = CheckedContinuation<PutAccessControlRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putAccessControlRuleContinuation) in
            putAccessControlRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets permissions for a user, group, or resource. This replaces any pre-existing
    ///          permissions.</p>
    func putMailboxPermissions(input: PutMailboxPermissionsInput) async throws -> PutMailboxPermissionsOutputResponse
    {
        typealias putMailboxPermissionsContinuation = CheckedContinuation<PutMailboxPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putMailboxPermissionsContinuation) in
            putMailboxPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Puts a retention policy to the specified organization.</p>
    func putRetentionPolicy(input: PutRetentionPolicyInput) async throws -> PutRetentionPolicyOutputResponse
    {
        typealias putRetentionPolicyContinuation = CheckedContinuation<PutRetentionPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putRetentionPolicyContinuation) in
            putRetentionPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Registers an existing and disabled user, group, or resource for Amazon WorkMail use by
    ///          associating a mailbox and calendaring capabilities. It performs no change if the user,
    ///          group, or resource is enabled and fails if the user, group, or resource is deleted. This
    ///          operation results in the accumulation of costs. For more information, see <a href="https://aws.amazon.com/workmail/pricing">Pricing</a>. The equivalent console
    ///          functionality for this operation is <i>Enable</i>. </p>
    ///          <p>Users can either be created by calling the <a>CreateUser</a> API operation
    ///          or they can be synchronized from your directory. For more information, see <a>DeregisterFromWorkMail</a>.</p>
    func registerToWorkMail(input: RegisterToWorkMailInput) async throws -> RegisterToWorkMailOutputResponse
    {
        typealias registerToWorkMailContinuation = CheckedContinuation<RegisterToWorkMailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerToWorkMailContinuation) in
            registerToWorkMail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Allows the administrator to reset the password for a user.</p>
    func resetPassword(input: ResetPasswordInput) async throws -> ResetPasswordOutputResponse
    {
        typealias resetPasswordContinuation = CheckedContinuation<ResetPasswordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetPasswordContinuation) in
            resetPassword(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts a mailbox export job to export MIME-format email messages and calendar items
    ///          from the specified mailbox to the specified Amazon Simple Storage Service (Amazon S3)
    ///          bucket. For more information, see <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/mail-export.html">Exporting mailbox content</a> in
    ///          the <i>Amazon WorkMail Administrator Guide</i>.</p>
    func startMailboxExportJob(input: StartMailboxExportJobInput) async throws -> StartMailboxExportJobOutputResponse
    {
        typealias startMailboxExportJobContinuation = CheckedContinuation<StartMailboxExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startMailboxExportJobContinuation) in
            startMailboxExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Applies the specified tags to the specified Amazon WorkMail organization
    ///          resource.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Untags the specified tags from the specified Amazon WorkMail organization
    ///          resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a user's current mailbox quota for a specified organization and
    ///          user.</p>
    func updateMailboxQuota(input: UpdateMailboxQuotaInput) async throws -> UpdateMailboxQuotaOutputResponse
    {
        typealias updateMailboxQuotaContinuation = CheckedContinuation<UpdateMailboxQuotaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMailboxQuotaContinuation) in
            updateMailboxQuota(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a mobile device access rule for the specified Amazon WorkMail organization.</p>
    func updateMobileDeviceAccessRule(input: UpdateMobileDeviceAccessRuleInput) async throws -> UpdateMobileDeviceAccessRuleOutputResponse
    {
        typealias updateMobileDeviceAccessRuleContinuation = CheckedContinuation<UpdateMobileDeviceAccessRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMobileDeviceAccessRuleContinuation) in
            updateMobileDeviceAccessRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the primary email for a user, group, or resource. The current email is moved
    ///          into the list of aliases (or swapped between an existing alias and the current primary
    ///          email), and the email provided in the input is promoted as the primary.</p>
    func updatePrimaryEmailAddress(input: UpdatePrimaryEmailAddressInput) async throws -> UpdatePrimaryEmailAddressOutputResponse
    {
        typealias updatePrimaryEmailAddressContinuation = CheckedContinuation<UpdatePrimaryEmailAddressOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePrimaryEmailAddressContinuation) in
            updatePrimaryEmailAddress(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates data for the resource. To have the latest information, it must be preceded by
    ///          a <a>DescribeResource</a> call. The dataset in the request should be the one
    ///          expected when performing another <code>DescribeResource</code> call.</p>
    func updateResource(input: UpdateResourceInput) async throws -> UpdateResourceOutputResponse
    {
        typealias updateResourceContinuation = CheckedContinuation<UpdateResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateResourceContinuation) in
            updateResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
