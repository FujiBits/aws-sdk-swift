// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UngroupResourcesOutputResponseBody: Equatable {
    public let succeeded: [String]?
    public let failed: [FailedResource]?
    public let pending: [PendingResource]?
}

extension UngroupResourcesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failed = "Failed"
        case pending = "Pending"
        case succeeded = "Succeeded"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let succeededContainer = try containerValues.decodeIfPresent([String?].self, forKey: .succeeded)
        var succeededDecoded0:[String]? = nil
        if let succeededContainer = succeededContainer {
            succeededDecoded0 = [String]()
            for string0 in succeededContainer {
                if let string0 = string0 {
                    succeededDecoded0?.append(string0)
                }
            }
        }
        succeeded = succeededDecoded0
        let failedContainer = try containerValues.decodeIfPresent([FailedResource?].self, forKey: .failed)
        var failedDecoded0:[FailedResource]? = nil
        if let failedContainer = failedContainer {
            failedDecoded0 = [FailedResource]()
            for structure0 in failedContainer {
                if let structure0 = structure0 {
                    failedDecoded0?.append(structure0)
                }
            }
        }
        failed = failedDecoded0
        let pendingContainer = try containerValues.decodeIfPresent([PendingResource?].self, forKey: .pending)
        var pendingDecoded0:[PendingResource]? = nil
        if let pendingContainer = pendingContainer {
            pendingDecoded0 = [PendingResource]()
            for structure0 in pendingContainer {
                if let structure0 = structure0 {
                    pendingDecoded0?.append(structure0)
                }
            }
        }
        pending = pendingDecoded0
    }
}
