// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListGroupsInputBody: Equatable {
    public let filters: [GroupFilter]?
}

extension ListGroupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filters = "Filters"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([GroupFilter?].self, forKey: .filters)
        var filtersDecoded0:[GroupFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [GroupFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}
