// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListGroupsOutputResponseBody: Equatable {
    public let groupIdentifiers: [GroupIdentifier]?
    public let groups: [Group]?
    public let nextToken: String?
}

extension ListGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case groupIdentifiers = "GroupIdentifiers"
        case groups = "Groups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdentifiersContainer = try containerValues.decodeIfPresent([GroupIdentifier?].self, forKey: .groupIdentifiers)
        var groupIdentifiersDecoded0:[GroupIdentifier]? = nil
        if let groupIdentifiersContainer = groupIdentifiersContainer {
            groupIdentifiersDecoded0 = [GroupIdentifier]()
            for structure0 in groupIdentifiersContainer {
                if let structure0 = structure0 {
                    groupIdentifiersDecoded0?.append(structure0)
                }
            }
        }
        groupIdentifiers = groupIdentifiersDecoded0
        let groupsContainer = try containerValues.decodeIfPresent([Group?].self, forKey: .groups)
        var groupsDecoded0:[Group]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [Group]()
            for structure0 in groupsContainer {
                if let structure0 = structure0 {
                    groupsDecoded0?.append(structure0)
                }
            }
        }
        groups = groupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
