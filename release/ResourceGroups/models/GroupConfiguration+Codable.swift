// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GroupConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configuration = "Configuration"
        case failureReason = "FailureReason"
        case proposedConfiguration = "ProposedConfiguration"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            var configurationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configuration)
            for groupconfigurationlist0 in configuration {
                try configurationContainer.encode(groupconfigurationlist0)
            }
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let proposedConfiguration = proposedConfiguration {
            var proposedConfigurationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .proposedConfiguration)
            for groupconfigurationlist0 in proposedConfiguration {
                try proposedConfigurationContainer.encode(groupconfigurationlist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationContainer = try containerValues.decodeIfPresent([GroupConfigurationItem?].self, forKey: .configuration)
        var configurationDecoded0:[GroupConfigurationItem]? = nil
        if let configurationContainer = configurationContainer {
            configurationDecoded0 = [GroupConfigurationItem]()
            for structure0 in configurationContainer {
                if let structure0 = structure0 {
                    configurationDecoded0?.append(structure0)
                }
            }
        }
        configuration = configurationDecoded0
        let proposedConfigurationContainer = try containerValues.decodeIfPresent([GroupConfigurationItem?].self, forKey: .proposedConfiguration)
        var proposedConfigurationDecoded0:[GroupConfigurationItem]? = nil
        if let proposedConfigurationContainer = proposedConfigurationContainer {
            proposedConfigurationDecoded0 = [GroupConfigurationItem]()
            for structure0 in proposedConfigurationContainer {
                if let structure0 = structure0 {
                    proposedConfigurationDecoded0?.append(structure0)
                }
            }
        }
        proposedConfiguration = proposedConfigurationDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(GroupConfigurationStatus.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}
