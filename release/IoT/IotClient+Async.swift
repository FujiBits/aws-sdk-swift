// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension IotClient {
    /// <p>Accepts a pending certificate transfer. The default state of the certificate is
    ///          INACTIVE.</p>
    ///          <p>To check for pending certificate transfers, call <a>ListCertificates</a>
    ///          to enumerate your certificates.</p>
    func acceptCertificateTransfer(input: AcceptCertificateTransferInput) async throws -> AcceptCertificateTransferOutputResponse
    {
        typealias acceptCertificateTransferContinuation = CheckedContinuation<AcceptCertificateTransferOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptCertificateTransferContinuation) in
            acceptCertificateTransfer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds a thing to a billing group.</p>
    func addThingToBillingGroup(input: AddThingToBillingGroupInput) async throws -> AddThingToBillingGroupOutputResponse
    {
        typealias addThingToBillingGroupContinuation = CheckedContinuation<AddThingToBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addThingToBillingGroupContinuation) in
            addThingToBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds a thing to a thing group.</p>
    func addThingToThingGroup(input: AddThingToThingGroupInput) async throws -> AddThingToThingGroupOutputResponse
    {
        typealias addThingToThingGroupContinuation = CheckedContinuation<AddThingToThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addThingToThingGroupContinuation) in
            addThingToThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates a group with a continuous job. The following criteria must be met: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>The job must have been created with the <code>targetSelection</code> field set to
    ///                     "CONTINUOUS".</p>
    ///             </li>
    ///             <li>
    ///                 <p>The job status must currently be "IN_PROGRESS".</p>
    ///             </li>
    ///             <li>
    ///                 <p>The total number of targets associated with a job must not exceed 100.</p>
    ///             </li>
    ///          </ul>
    func associateTargetsWithJob(input: AssociateTargetsWithJobInput) async throws -> AssociateTargetsWithJobOutputResponse
    {
        typealias associateTargetsWithJobContinuation = CheckedContinuation<AssociateTargetsWithJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateTargetsWithJobContinuation) in
            associateTargetsWithJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches a policy to the specified target.</p>
    func attachPolicy(input: AttachPolicyInput) async throws -> AttachPolicyOutputResponse
    {
        typealias attachPolicyContinuation = CheckedContinuation<AttachPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachPolicyContinuation) in
            attachPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches the specified policy to the specified principal (certificate or other
    ///          credential).</p>
    ///          <p>
    ///             <b>Note:</b> This API is deprecated. Please use <a>AttachPolicy</a> instead.</p>
    @available(*, deprecated)
    func attachPrincipalPolicy(input: AttachPrincipalPolicyInput) async throws -> AttachPrincipalPolicyOutputResponse
    {
        typealias attachPrincipalPolicyContinuation = CheckedContinuation<AttachPrincipalPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachPrincipalPolicyContinuation) in
            attachPrincipalPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates a Device Defender security profile with a thing group or this account. Each
    ///         thing group or account can have up to five security profiles associated with it.</p>
    func attachSecurityProfile(input: AttachSecurityProfileInput) async throws -> AttachSecurityProfileOutputResponse
    {
        typealias attachSecurityProfileContinuation = CheckedContinuation<AttachSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachSecurityProfileContinuation) in
            attachSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches the specified principal to the specified thing. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities.</p>
    func attachThingPrincipal(input: AttachThingPrincipalInput) async throws -> AttachThingPrincipalOutputResponse
    {
        typealias attachThingPrincipalContinuation = CheckedContinuation<AttachThingPrincipalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachThingPrincipalContinuation) in
            attachThingPrincipal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Cancels a mitigation action task that is in progress. If the task
    ///       is not
    ///       in progress, an InvalidRequestException occurs.</p>
    func cancelAuditMitigationActionsTask(input: CancelAuditMitigationActionsTaskInput) async throws -> CancelAuditMitigationActionsTaskOutputResponse
    {
        typealias cancelAuditMitigationActionsTaskContinuation = CheckedContinuation<CancelAuditMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelAuditMitigationActionsTaskContinuation) in
            cancelAuditMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Cancels an audit that is in progress. The audit can be either scheduled or on demand. If the audit isn't in progress, an "InvalidRequestException" occurs.</p>
    func cancelAuditTask(input: CancelAuditTaskInput) async throws -> CancelAuditTaskOutputResponse
    {
        typealias cancelAuditTaskContinuation = CheckedContinuation<CancelAuditTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelAuditTaskContinuation) in
            cancelAuditTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Cancels a pending transfer for the specified certificate.</p>
    ///          <p>
    ///             <b>Note</b> Only the transfer source account can use this
    ///          operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT returns the
    ///          certificate to the source account in the INACTIVE state. After the destination account has
    ///          accepted the transfer, the transfer cannot be cancelled.</p>
    ///          <p>After a certificate transfer is cancelled, the status of the certificate changes from
    ///          PENDING_TRANSFER to INACTIVE.</p>
    func cancelCertificateTransfer(input: CancelCertificateTransferInput) async throws -> CancelCertificateTransferOutputResponse
    {
        typealias cancelCertificateTransferContinuation = CheckedContinuation<CancelCertificateTransferOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelCertificateTransferContinuation) in
            cancelCertificateTransfer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Cancels a Device Defender ML Detect mitigation action.
    ///       </p>
    func cancelDetectMitigationActionsTask(input: CancelDetectMitigationActionsTaskInput) async throws -> CancelDetectMitigationActionsTaskOutputResponse
    {
        typealias cancelDetectMitigationActionsTaskContinuation = CheckedContinuation<CancelDetectMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelDetectMitigationActionsTaskContinuation) in
            cancelDetectMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Cancels a job.</p>
    func cancelJob(input: CancelJobInput) async throws -> CancelJobOutputResponse
    {
        typealias cancelJobContinuation = CheckedContinuation<CancelJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelJobContinuation) in
            cancelJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Cancels the execution of a job for a given thing.</p>
    func cancelJobExecution(input: CancelJobExecutionInput) async throws -> CancelJobExecutionOutputResponse
    {
        typealias cancelJobExecutionContinuation = CheckedContinuation<CancelJobExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelJobExecutionContinuation) in
            cancelJobExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Clears the default authorizer.</p>
    func clearDefaultAuthorizer(input: ClearDefaultAuthorizerInput) async throws -> ClearDefaultAuthorizerOutputResponse
    {
        typealias clearDefaultAuthorizerContinuation = CheckedContinuation<ClearDefaultAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: clearDefaultAuthorizerContinuation) in
            clearDefaultAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Confirms a topic rule destination. When you create a rule requiring a destination, AWS
    ///          IoT sends a confirmation message to the endpoint or base address you specify. The message
    ///          includes a token which you pass back when calling <code>ConfirmTopicRuleDestination</code>
    ///          to confirm that you own or have access to the endpoint.</p>
    func confirmTopicRuleDestination(input: ConfirmTopicRuleDestinationInput) async throws -> ConfirmTopicRuleDestinationOutputResponse
    {
        typealias confirmTopicRuleDestinationContinuation = CheckedContinuation<ConfirmTopicRuleDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: confirmTopicRuleDestinationContinuation) in
            confirmTopicRuleDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Creates a Device Defender audit suppression.
    ///     </p>
    func createAuditSuppression(input: CreateAuditSuppressionInput) async throws -> CreateAuditSuppressionOutputResponse
    {
        typealias createAuditSuppressionContinuation = CheckedContinuation<CreateAuditSuppressionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAuditSuppressionContinuation) in
            createAuditSuppression(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an authorizer.</p>
    func createAuthorizer(input: CreateAuthorizerInput) async throws -> CreateAuthorizerOutputResponse
    {
        typealias createAuthorizerContinuation = CheckedContinuation<CreateAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAuthorizerContinuation) in
            createAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a billing group.</p>
    func createBillingGroup(input: CreateBillingGroupInput) async throws -> CreateBillingGroupOutputResponse
    {
        typealias createBillingGroupContinuation = CheckedContinuation<CreateBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBillingGroupContinuation) in
            createBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an X.509 certificate using the specified certificate signing
    ///          request.</p>
    ///          <p>
    ///             <b>Note:</b> The CSR must include a public key that is either an
    ///          RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384
    ///          curves. </p>
    ///          <p>
    ///             <b>Note:</b> Reusing the same certificate signing request (CSR)
    ///          results in a distinct certificate.</p>
    ///          <p>You can create multiple certificates in a batch by creating a directory, copying
    ///          multiple .csr files into that directory, and then specifying that directory on the command
    ///          line. The following commands show how to create a batch of certificates given a batch of
    ///          CSRs.</p>
    ///          <p>Assuming a set of CSRs are located inside of the directory
    ///          my-csr-directory:</p>
    ///
    ///          <p>On Linux and OS X, the command is:</p>
    ///
    ///          <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://my-csr-directory/{}</p>
    ///          <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name
    ///          to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the
    ///          corresponding CSR.</p>
    ///          <p>The aws iot create-certificate-from-csr part of the command can also be run in
    ///          parallel to speed up the certificate creation process:</p>
    ///          <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://my-csr-directory/{}</p>
    ///          <p>On Windows PowerShell, the command to create certificates for all CSRs in
    ///          my-csr-directory is:</p>
    ///          <p>> ls -Name my-csr-directory | %{aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://my-csr-directory/$_}</p>
    ///          <p>On a Windows command prompt, the command to create certificates for all CSRs in
    ///          my-csr-directory is:</p>
    ///          <p>> forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://@path"</p>
    func createCertificateFromCsr(input: CreateCertificateFromCsrInput) async throws -> CreateCertificateFromCsrOutputResponse
    {
        typealias createCertificateFromCsrContinuation = CheckedContinuation<CreateCertificateFromCsrOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCertificateFromCsrContinuation) in
            createCertificateFromCsr(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Use this API to define a
    ///       Custom
    ///       Metric
    ///       published by your devices to Device Defender. </p>
    func createCustomMetric(input: CreateCustomMetricInput) async throws -> CreateCustomMetricOutputResponse
    {
        typealias createCustomMetricContinuation = CheckedContinuation<CreateCustomMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCustomMetricContinuation) in
            createCustomMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Create a dimension that you can use to limit the scope of a metric used in a security profile for AWS IoT Device Defender. For example, using a <code>TOPIC_FILTER</code> dimension, you can narrow down the scope of the metric only to MQTT topics whose name match the pattern specified in the dimension.</p>
    func createDimension(input: CreateDimensionInput) async throws -> CreateDimensionOutputResponse
    {
        typealias createDimensionContinuation = CheckedContinuation<CreateDimensionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDimensionContinuation) in
            createDimension(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a domain configuration.</p>
    func createDomainConfiguration(input: CreateDomainConfigurationInput) async throws -> CreateDomainConfigurationOutputResponse
    {
        typealias createDomainConfigurationContinuation = CheckedContinuation<CreateDomainConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDomainConfigurationContinuation) in
            createDomainConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a dynamic thing group.</p>
    func createDynamicThingGroup(input: CreateDynamicThingGroupInput) async throws -> CreateDynamicThingGroupOutputResponse
    {
        typealias createDynamicThingGroupContinuation = CheckedContinuation<CreateDynamicThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDynamicThingGroupContinuation) in
            createDynamicThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a job.</p>
    func createJob(input: CreateJobInput) async throws -> CreateJobOutputResponse
    {
        typealias createJobContinuation = CheckedContinuation<CreateJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createJobContinuation) in
            createJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a job template.</p>
    func createJobTemplate(input: CreateJobTemplateInput) async throws -> CreateJobTemplateOutputResponse
    {
        typealias createJobTemplateContinuation = CheckedContinuation<CreateJobTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createJobTemplateContinuation) in
            createJobTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued
    ///          public key. You can also call <code>CreateKeysAndCertificate</code> over MQTT from a
    ///          device, for more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api">Provisioning MQTT API</a>.</p>
    ///          <p>
    ///             <b>Note</b> This is the only time AWS IoT issues the private key
    ///          for this certificate, so it is important to keep it in a secure location.</p>
    func createKeysAndCertificate(input: CreateKeysAndCertificateInput) async throws -> CreateKeysAndCertificateOutputResponse
    {
        typealias createKeysAndCertificateContinuation = CheckedContinuation<CreateKeysAndCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createKeysAndCertificateContinuation) in
            createKeysAndCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Only certain types of mitigation actions can be applied to specific check names. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/device-defender-mitigation-actions.html">Mitigation actions</a>. Each mitigation action can apply only one type of change.</p>
    func createMitigationAction(input: CreateMitigationActionInput) async throws -> CreateMitigationActionOutputResponse
    {
        typealias createMitigationActionContinuation = CheckedContinuation<CreateMitigationActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMitigationActionContinuation) in
            createMitigationAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an AWS IoT OTAUpdate on a target group of things or groups.</p>
    func createOTAUpdate(input: CreateOTAUpdateInput) async throws -> CreateOTAUpdateOutputResponse
    {
        typealias createOTAUpdateContinuation = CheckedContinuation<CreateOTAUpdateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createOTAUpdateContinuation) in
            createOTAUpdate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an AWS IoT policy.</p>
    ///          <p>The created policy is the default version for the policy. This operation creates a
    ///          policy version with a version identifier of <b>1</b> and sets
    ///             <b>1</b> as the policy's default version.</p>
    func createPolicy(input: CreatePolicyInput) async throws -> CreatePolicyOutputResponse
    {
        typealias createPolicyContinuation = CheckedContinuation<CreatePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPolicyContinuation) in
            createPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new version of the specified AWS IoT policy. To update a policy, create a
    ///          new policy version. A managed policy can have up to five versions. If the policy has five
    ///          versions, you must use <a>DeletePolicyVersion</a> to delete an existing version
    ///          before you create a new one.</p>
    ///          <p>Optionally, you can set the new version as the policy's default version. The default
    ///          version is the operative version (that is, the version that is in effect for the
    ///          certificates to which the policy is attached).</p>
    func createPolicyVersion(input: CreatePolicyVersionInput) async throws -> CreatePolicyVersionOutputResponse
    {
        typealias createPolicyVersionContinuation = CheckedContinuation<CreatePolicyVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPolicyVersionContinuation) in
            createPolicyVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a provisioning claim.</p>
    func createProvisioningClaim(input: CreateProvisioningClaimInput) async throws -> CreateProvisioningClaimOutputResponse
    {
        typealias createProvisioningClaimContinuation = CheckedContinuation<CreateProvisioningClaimOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProvisioningClaimContinuation) in
            createProvisioningClaim(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a fleet provisioning template.</p>
    func createProvisioningTemplate(input: CreateProvisioningTemplateInput) async throws -> CreateProvisioningTemplateOutputResponse
    {
        typealias createProvisioningTemplateContinuation = CheckedContinuation<CreateProvisioningTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProvisioningTemplateContinuation) in
            createProvisioningTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new version of a fleet provisioning template.</p>
    func createProvisioningTemplateVersion(input: CreateProvisioningTemplateVersionInput) async throws -> CreateProvisioningTemplateVersionOutputResponse
    {
        typealias createProvisioningTemplateVersionContinuation = CheckedContinuation<CreateProvisioningTemplateVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProvisioningTemplateVersionContinuation) in
            createProvisioningTemplateVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a role alias.</p>
    func createRoleAlias(input: CreateRoleAliasInput) async throws -> CreateRoleAliasOutputResponse
    {
        typealias createRoleAliasContinuation = CheckedContinuation<CreateRoleAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRoleAliasContinuation) in
            createRoleAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a scheduled audit that is run at a specified
    ///           time interval.</p>
    func createScheduledAudit(input: CreateScheduledAuditInput) async throws -> CreateScheduledAuditOutputResponse
    {
        typealias createScheduledAuditContinuation = CheckedContinuation<CreateScheduledAuditOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createScheduledAuditContinuation) in
            createScheduledAudit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a Device Defender security profile.</p>
    func createSecurityProfile(input: CreateSecurityProfileInput) async throws -> CreateSecurityProfileOutputResponse
    {
        typealias createSecurityProfileContinuation = CheckedContinuation<CreateSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSecurityProfileContinuation) in
            createSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data
    ///             bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files
    ///             associated with a stream.</p>
    func createStream(input: CreateStreamInput) async throws -> CreateStreamOutputResponse
    {
        typealias createStreamContinuation = CheckedContinuation<CreateStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStreamContinuation) in
            createStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a thing record in the registry. If this call is made multiple times using
    /// 			the same thing name and configuration, the call will succeed. If this call is made with
    /// 			the same thing name but different configuration a
    /// 				<code>ResourceAlreadyExistsException</code> is thrown.</p>
    /// 		       <note>
    /// 			         <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html">Authorization</a> for
    /// 				information about authorizing control plane actions.</p>
    /// 		       </note>
    func createThing(input: CreateThingInput) async throws -> CreateThingOutputResponse
    {
        typealias createThingContinuation = CheckedContinuation<CreateThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createThingContinuation) in
            createThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Create a thing group.</p>
    /// 		       <note>
    /// 			         <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html">Authorization</a> for
    /// 				information about authorizing control plane actions.</p>
    /// 		       </note>
    func createThingGroup(input: CreateThingGroupInput) async throws -> CreateThingGroupOutputResponse
    {
        typealias createThingGroupContinuation = CheckedContinuation<CreateThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createThingGroupContinuation) in
            createThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new thing type.</p>
    func createThingType(input: CreateThingTypeInput) async throws -> CreateThingTypeOutputResponse
    {
        typealias createThingTypeContinuation = CheckedContinuation<CreateThingTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createThingTypeContinuation) in
            createThingType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a rule. Creating rules is an administrator-level action. Any user who has
    ///          permission to create rules will be able to access data processed by the rule.</p>
    func createTopicRule(input: CreateTopicRuleInput) async throws -> CreateTopicRuleOutputResponse
    {
        typealias createTopicRuleContinuation = CheckedContinuation<CreateTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTopicRuleContinuation) in
            createTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a topic rule destination. The destination must be confirmed prior to use.</p>
    func createTopicRuleDestination(input: CreateTopicRuleDestinationInput) async throws -> CreateTopicRuleDestinationOutputResponse
    {
        typealias createTopicRuleDestinationContinuation = CheckedContinuation<CreateTopicRuleDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTopicRuleDestinationContinuation) in
            createTopicRuleDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Restores the default settings for Device Defender audits for this account. Any
    ///           configuration data you entered is deleted and all audit checks are reset to
    ///           disabled.  </p>
    func deleteAccountAuditConfiguration(input: DeleteAccountAuditConfigurationInput) async throws -> DeleteAccountAuditConfigurationOutputResponse
    {
        typealias deleteAccountAuditConfigurationContinuation = CheckedContinuation<DeleteAccountAuditConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAccountAuditConfigurationContinuation) in
            deleteAccountAuditConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Deletes a Device Defender audit suppression.
    ///     </p>
    func deleteAuditSuppression(input: DeleteAuditSuppressionInput) async throws -> DeleteAuditSuppressionOutputResponse
    {
        typealias deleteAuditSuppressionContinuation = CheckedContinuation<DeleteAuditSuppressionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAuditSuppressionContinuation) in
            deleteAuditSuppression(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an authorizer.</p>
    func deleteAuthorizer(input: DeleteAuthorizerInput) async throws -> DeleteAuthorizerOutputResponse
    {
        typealias deleteAuthorizerContinuation = CheckedContinuation<DeleteAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAuthorizerContinuation) in
            deleteAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the billing group.</p>
    func deleteBillingGroup(input: DeleteBillingGroupInput) async throws -> DeleteBillingGroupOutputResponse
    {
        typealias deleteBillingGroupContinuation = CheckedContinuation<DeleteBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBillingGroupContinuation) in
            deleteBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a registered CA certificate.</p>
    func deleteCACertificate(input: DeleteCACertificateInput) async throws -> DeleteCACertificateOutputResponse
    {
        typealias deleteCACertificateContinuation = CheckedContinuation<DeleteCACertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCACertificateContinuation) in
            deleteCACertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified certificate.</p>
    ///          <p>A certificate cannot be deleted if it has a policy or IoT thing attached to it or if
    ///          its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE
    ///          status.</p>
    func deleteCertificate(input: DeleteCertificateInput) async throws -> DeleteCertificateOutputResponse
    {
        typealias deleteCertificateContinuation = CheckedContinuation<DeleteCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCertificateContinuation) in
            deleteCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <note>
    ///             <p>Before you can delete a custom metric, you must first remove the custom metric from all
    ///         security profiles it's a part of.
    ///         The
    ///         security
    ///         profile associated with the custom metric can be found using the <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_ListSecurityProfiles.html">ListSecurityProfiles</a>
    ///         API with <code>metricName</code> set to your custom metric name.</p>
    ///          </note>
    ///          <p>
    ///       Deletes a Device Defender detect custom metric.
    ///     </p>
    func deleteCustomMetric(input: DeleteCustomMetricInput) async throws -> DeleteCustomMetricOutputResponse
    {
        typealias deleteCustomMetricContinuation = CheckedContinuation<DeleteCustomMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCustomMetricContinuation) in
            deleteCustomMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the specified dimension from your AWS account.</p>
    func deleteDimension(input: DeleteDimensionInput) async throws -> DeleteDimensionOutputResponse
    {
        typealias deleteDimensionContinuation = CheckedContinuation<DeleteDimensionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDimensionContinuation) in
            deleteDimension(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified domain configuration.</p>
    func deleteDomainConfiguration(input: DeleteDomainConfigurationInput) async throws -> DeleteDomainConfigurationOutputResponse
    {
        typealias deleteDomainConfigurationContinuation = CheckedContinuation<DeleteDomainConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDomainConfigurationContinuation) in
            deleteDomainConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a dynamic thing group.</p>
    func deleteDynamicThingGroup(input: DeleteDynamicThingGroupInput) async throws -> DeleteDynamicThingGroupOutputResponse
    {
        typealias deleteDynamicThingGroupContinuation = CheckedContinuation<DeleteDynamicThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDynamicThingGroupContinuation) in
            deleteDynamicThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a job and its related job executions.</p>
    ///          <p>Deleting a job may take time, depending on the number of job
    ///         executions created for the job and various other factors. While the job
    ///         is being deleted, the status of the job will be shown as
    ///         "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status
    ///         is already "DELETION_IN_PROGRESS" will result in an error.</p>
    ///          <p>Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or
    ///         a LimitExceededException will occur.</p>
    func deleteJob(input: DeleteJobInput) async throws -> DeleteJobOutputResponse
    {
        typealias deleteJobContinuation = CheckedContinuation<DeleteJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteJobContinuation) in
            deleteJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a job execution.</p>
    func deleteJobExecution(input: DeleteJobExecutionInput) async throws -> DeleteJobExecutionOutputResponse
    {
        typealias deleteJobExecutionContinuation = CheckedContinuation<DeleteJobExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteJobExecutionContinuation) in
            deleteJobExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified job template.</p>
    func deleteJobTemplate(input: DeleteJobTemplateInput) async throws -> DeleteJobTemplateOutputResponse
    {
        typealias deleteJobTemplateContinuation = CheckedContinuation<DeleteJobTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteJobTemplateContinuation) in
            deleteJobTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a defined mitigation action from your AWS account.</p>
    func deleteMitigationAction(input: DeleteMitigationActionInput) async throws -> DeleteMitigationActionOutputResponse
    {
        typealias deleteMitigationActionContinuation = CheckedContinuation<DeleteMitigationActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMitigationActionContinuation) in
            deleteMitigationAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Delete an OTA update.</p>
    func deleteOTAUpdate(input: DeleteOTAUpdateInput) async throws -> DeleteOTAUpdateOutputResponse
    {
        typealias deleteOTAUpdateContinuation = CheckedContinuation<DeleteOTAUpdateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteOTAUpdateContinuation) in
            deleteOTAUpdate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified policy.</p>
    ///          <p>A policy cannot be deleted if it has non-default versions or it is attached to any
    ///          certificate.</p>
    ///          <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default
    ///          versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any
    ///          certificate; and then use the DeletePolicy API to delete the policy.</p>
    ///          <p>When a policy is deleted using DeletePolicy, its default version is deleted with
    ///          it.</p>
    func deletePolicy(input: DeletePolicyInput) async throws -> DeletePolicyOutputResponse
    {
        typealias deletePolicyContinuation = CheckedContinuation<DeletePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePolicyContinuation) in
            deletePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified version of the specified policy. You cannot delete the default
    ///          version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default
    ///          version, use ListPolicyVersions.</p>
    func deletePolicyVersion(input: DeletePolicyVersionInput) async throws -> DeletePolicyVersionOutputResponse
    {
        typealias deletePolicyVersionContinuation = CheckedContinuation<DeletePolicyVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePolicyVersionContinuation) in
            deletePolicyVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a fleet provisioning template.</p>
    func deleteProvisioningTemplate(input: DeleteProvisioningTemplateInput) async throws -> DeleteProvisioningTemplateOutputResponse
    {
        typealias deleteProvisioningTemplateContinuation = CheckedContinuation<DeleteProvisioningTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProvisioningTemplateContinuation) in
            deleteProvisioningTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a fleet provisioning template version.</p>
    func deleteProvisioningTemplateVersion(input: DeleteProvisioningTemplateVersionInput) async throws -> DeleteProvisioningTemplateVersionOutputResponse
    {
        typealias deleteProvisioningTemplateVersionContinuation = CheckedContinuation<DeleteProvisioningTemplateVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProvisioningTemplateVersionContinuation) in
            deleteProvisioningTemplateVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a CA certificate registration code.</p>
    func deleteRegistrationCode(input: DeleteRegistrationCodeInput) async throws -> DeleteRegistrationCodeOutputResponse
    {
        typealias deleteRegistrationCodeContinuation = CheckedContinuation<DeleteRegistrationCodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRegistrationCodeContinuation) in
            deleteRegistrationCode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a role alias</p>
    func deleteRoleAlias(input: DeleteRoleAliasInput) async throws -> DeleteRoleAliasOutputResponse
    {
        typealias deleteRoleAliasContinuation = CheckedContinuation<DeleteRoleAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRoleAliasContinuation) in
            deleteRoleAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a scheduled audit.</p>
    func deleteScheduledAudit(input: DeleteScheduledAuditInput) async throws -> DeleteScheduledAuditOutputResponse
    {
        typealias deleteScheduledAuditContinuation = CheckedContinuation<DeleteScheduledAuditOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteScheduledAuditContinuation) in
            deleteScheduledAudit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Device Defender security profile.</p>
    func deleteSecurityProfile(input: DeleteSecurityProfileInput) async throws -> DeleteSecurityProfileOutputResponse
    {
        typealias deleteSecurityProfileContinuation = CheckedContinuation<DeleteSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSecurityProfileContinuation) in
            deleteSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a stream.</p>
    func deleteStream(input: DeleteStreamInput) async throws -> DeleteStreamOutputResponse
    {
        typealias deleteStreamContinuation = CheckedContinuation<DeleteStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteStreamContinuation) in
            deleteStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified thing. Returns successfully with no error if the deletion is
    /// 			successful or you specify a thing that doesn't exist.</p>
    func deleteThing(input: DeleteThingInput) async throws -> DeleteThingOutputResponse
    {
        typealias deleteThingContinuation = CheckedContinuation<DeleteThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteThingContinuation) in
            deleteThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a thing group.</p>
    func deleteThingGroup(input: DeleteThingGroupInput) async throws -> DeleteThingGroupOutputResponse
    {
        typealias deleteThingGroupContinuation = CheckedContinuation<DeleteThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteThingGroupContinuation) in
            deleteThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified thing type. You cannot delete a thing type if it has things
    /// 			associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and
    /// 			finally use <a>DeleteThingType</a> to delete the thing type.</p>
    func deleteThingType(input: DeleteThingTypeInput) async throws -> DeleteThingTypeOutputResponse
    {
        typealias deleteThingTypeContinuation = CheckedContinuation<DeleteThingTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteThingTypeContinuation) in
            deleteThingType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the rule.</p>
    func deleteTopicRule(input: DeleteTopicRuleInput) async throws -> DeleteTopicRuleOutputResponse
    {
        typealias deleteTopicRuleContinuation = CheckedContinuation<DeleteTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTopicRuleContinuation) in
            deleteTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a topic rule destination.</p>
    func deleteTopicRuleDestination(input: DeleteTopicRuleDestinationInput) async throws -> DeleteTopicRuleDestinationOutputResponse
    {
        typealias deleteTopicRuleDestinationContinuation = CheckedContinuation<DeleteTopicRuleDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTopicRuleDestinationContinuation) in
            deleteTopicRuleDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a logging level.</p>
    func deleteV2LoggingLevel(input: DeleteV2LoggingLevelInput) async throws -> DeleteV2LoggingLevelOutputResponse
    {
        typealias deleteV2LoggingLevelContinuation = CheckedContinuation<DeleteV2LoggingLevelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteV2LoggingLevelContinuation) in
            deleteV2LoggingLevel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deprecates a thing type. You can not associate new things with deprecated thing
    /// 			type.</p>
    func deprecateThingType(input: DeprecateThingTypeInput) async throws -> DeprecateThingTypeOutputResponse
    {
        typealias deprecateThingTypeContinuation = CheckedContinuation<DeprecateThingTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deprecateThingTypeContinuation) in
            deprecateThingType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about the Device Defender audit settings for this account.
    ///           Settings include how audit notifications are sent and which audit checks are
    ///           enabled or disabled.</p>
    func describeAccountAuditConfiguration(input: DescribeAccountAuditConfigurationInput) async throws -> DescribeAccountAuditConfigurationOutputResponse
    {
        typealias describeAccountAuditConfigurationContinuation = CheckedContinuation<DescribeAccountAuditConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountAuditConfigurationContinuation) in
            describeAccountAuditConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a single audit finding. Properties include the reason for
    ///       noncompliance, the severity of the issue,
    ///       and the start time
    ///       when the audit that returned the
    ///       finding.</p>
    func describeAuditFinding(input: DescribeAuditFindingInput) async throws -> DescribeAuditFindingOutputResponse
    {
        typealias describeAuditFindingContinuation = CheckedContinuation<DescribeAuditFindingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAuditFindingContinuation) in
            describeAuditFinding(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.</p>
    func describeAuditMitigationActionsTask(input: DescribeAuditMitigationActionsTaskInput) async throws -> DescribeAuditMitigationActionsTaskOutputResponse
    {
        typealias describeAuditMitigationActionsTaskContinuation = CheckedContinuation<DescribeAuditMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAuditMitigationActionsTaskContinuation) in
            describeAuditMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Gets information about a Device Defender audit suppression.
    ///     </p>
    func describeAuditSuppression(input: DescribeAuditSuppressionInput) async throws -> DescribeAuditSuppressionOutputResponse
    {
        typealias describeAuditSuppressionContinuation = CheckedContinuation<DescribeAuditSuppressionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAuditSuppressionContinuation) in
            describeAuditSuppression(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a Device Defender audit.</p>
    func describeAuditTask(input: DescribeAuditTaskInput) async throws -> DescribeAuditTaskOutputResponse
    {
        typealias describeAuditTaskContinuation = CheckedContinuation<DescribeAuditTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAuditTaskContinuation) in
            describeAuditTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes an authorizer.</p>
    func describeAuthorizer(input: DescribeAuthorizerInput) async throws -> DescribeAuthorizerOutputResponse
    {
        typealias describeAuthorizerContinuation = CheckedContinuation<DescribeAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAuthorizerContinuation) in
            describeAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a billing group.</p>
    func describeBillingGroup(input: DescribeBillingGroupInput) async throws -> DescribeBillingGroupOutputResponse
    {
        typealias describeBillingGroupContinuation = CheckedContinuation<DescribeBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeBillingGroupContinuation) in
            describeBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a registered CA certificate.</p>
    func describeCACertificate(input: DescribeCACertificateInput) async throws -> DescribeCACertificateOutputResponse
    {
        typealias describeCACertificateContinuation = CheckedContinuation<DescribeCACertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCACertificateContinuation) in
            describeCACertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about the specified certificate.</p>
    func describeCertificate(input: DescribeCertificateInput) async throws -> DescribeCertificateOutputResponse
    {
        typealias describeCertificateContinuation = CheckedContinuation<DescribeCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCertificateContinuation) in
            describeCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Gets information about a Device Defender detect custom metric.
    ///     </p>
    func describeCustomMetric(input: DescribeCustomMetricInput) async throws -> DescribeCustomMetricOutputResponse
    {
        typealias describeCustomMetricContinuation = CheckedContinuation<DescribeCustomMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCustomMetricContinuation) in
            describeCustomMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the default authorizer.</p>
    func describeDefaultAuthorizer(input: DescribeDefaultAuthorizerInput) async throws -> DescribeDefaultAuthorizerOutputResponse
    {
        typealias describeDefaultAuthorizerContinuation = CheckedContinuation<DescribeDefaultAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDefaultAuthorizerContinuation) in
            describeDefaultAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Gets information about a Device Defender ML Detect mitigation action.
    ///     </p>
    func describeDetectMitigationActionsTask(input: DescribeDetectMitigationActionsTaskInput) async throws -> DescribeDetectMitigationActionsTaskOutputResponse
    {
        typealias describeDetectMitigationActionsTaskContinuation = CheckedContinuation<DescribeDetectMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDetectMitigationActionsTaskContinuation) in
            describeDetectMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides details about a dimension that is defined in your AWS account.</p>
    func describeDimension(input: DescribeDimensionInput) async throws -> DescribeDimensionOutputResponse
    {
        typealias describeDimensionContinuation = CheckedContinuation<DescribeDimensionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDimensionContinuation) in
            describeDimension(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets summary information about a domain configuration.</p>
    func describeDomainConfiguration(input: DescribeDomainConfigurationInput) async throws -> DescribeDomainConfigurationOutputResponse
    {
        typealias describeDomainConfigurationContinuation = CheckedContinuation<DescribeDomainConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDomainConfigurationContinuation) in
            describeDomainConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a unique endpoint specific to the AWS account making the call.</p>
    func describeEndpoint(input: DescribeEndpointInput) async throws -> DescribeEndpointOutputResponse
    {
        typealias describeEndpointContinuation = CheckedContinuation<DescribeEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEndpointContinuation) in
            describeEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes event configurations.</p>
    func describeEventConfigurations(input: DescribeEventConfigurationsInput) async throws -> DescribeEventConfigurationsOutputResponse
    {
        typealias describeEventConfigurationsContinuation = CheckedContinuation<DescribeEventConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventConfigurationsContinuation) in
            describeEventConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a search index.</p>
    func describeIndex(input: DescribeIndexInput) async throws -> DescribeIndexOutputResponse
    {
        typealias describeIndexContinuation = CheckedContinuation<DescribeIndexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeIndexContinuation) in
            describeIndex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a job.</p>
    func describeJob(input: DescribeJobInput) async throws -> DescribeJobOutputResponse
    {
        typealias describeJobContinuation = CheckedContinuation<DescribeJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeJobContinuation) in
            describeJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a job execution.</p>
    func describeJobExecution(input: DescribeJobExecutionInput) async throws -> DescribeJobExecutionOutputResponse
    {
        typealias describeJobExecutionContinuation = CheckedContinuation<DescribeJobExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeJobExecutionContinuation) in
            describeJobExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a job template.</p>
    func describeJobTemplate(input: DescribeJobTemplateInput) async throws -> DescribeJobTemplateOutputResponse
    {
        typealias describeJobTemplateContinuation = CheckedContinuation<DescribeJobTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeJobTemplateContinuation) in
            describeJobTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a mitigation action.</p>
    func describeMitigationAction(input: DescribeMitigationActionInput) async throws -> DescribeMitigationActionOutputResponse
    {
        typealias describeMitigationActionContinuation = CheckedContinuation<DescribeMitigationActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMitigationActionContinuation) in
            describeMitigationAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a fleet provisioning template.</p>
    func describeProvisioningTemplate(input: DescribeProvisioningTemplateInput) async throws -> DescribeProvisioningTemplateOutputResponse
    {
        typealias describeProvisioningTemplateContinuation = CheckedContinuation<DescribeProvisioningTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProvisioningTemplateContinuation) in
            describeProvisioningTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a fleet provisioning template version.</p>
    func describeProvisioningTemplateVersion(input: DescribeProvisioningTemplateVersionInput) async throws -> DescribeProvisioningTemplateVersionOutputResponse
    {
        typealias describeProvisioningTemplateVersionContinuation = CheckedContinuation<DescribeProvisioningTemplateVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProvisioningTemplateVersionContinuation) in
            describeProvisioningTemplateVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a role alias.</p>
    func describeRoleAlias(input: DescribeRoleAliasInput) async throws -> DescribeRoleAliasOutputResponse
    {
        typealias describeRoleAliasContinuation = CheckedContinuation<DescribeRoleAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRoleAliasContinuation) in
            describeRoleAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a scheduled audit.</p>
    func describeScheduledAudit(input: DescribeScheduledAuditInput) async throws -> DescribeScheduledAuditOutputResponse
    {
        typealias describeScheduledAuditContinuation = CheckedContinuation<DescribeScheduledAuditOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeScheduledAuditContinuation) in
            describeScheduledAudit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a Device Defender security profile.</p>
    func describeSecurityProfile(input: DescribeSecurityProfileInput) async throws -> DescribeSecurityProfileOutputResponse
    {
        typealias describeSecurityProfileContinuation = CheckedContinuation<DescribeSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSecurityProfileContinuation) in
            describeSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a stream.</p>
    func describeStream(input: DescribeStreamInput) async throws -> DescribeStreamOutputResponse
    {
        typealias describeStreamContinuation = CheckedContinuation<DescribeStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStreamContinuation) in
            describeStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about the specified thing.</p>
    func describeThing(input: DescribeThingInput) async throws -> DescribeThingOutputResponse
    {
        typealias describeThingContinuation = CheckedContinuation<DescribeThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeThingContinuation) in
            describeThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describe a thing group.</p>
    func describeThingGroup(input: DescribeThingGroupInput) async throws -> DescribeThingGroupOutputResponse
    {
        typealias describeThingGroupContinuation = CheckedContinuation<DescribeThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeThingGroupContinuation) in
            describeThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a bulk thing provisioning task.</p>
    func describeThingRegistrationTask(input: DescribeThingRegistrationTaskInput) async throws -> DescribeThingRegistrationTaskOutputResponse
    {
        typealias describeThingRegistrationTaskContinuation = CheckedContinuation<DescribeThingRegistrationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeThingRegistrationTaskContinuation) in
            describeThingRegistrationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about the specified thing type.</p>
    func describeThingType(input: DescribeThingTypeInput) async throws -> DescribeThingTypeOutputResponse
    {
        typealias describeThingTypeContinuation = CheckedContinuation<DescribeThingTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeThingTypeContinuation) in
            describeThingType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Detaches a policy from the specified target.</p>
    func detachPolicy(input: DetachPolicyInput) async throws -> DetachPolicyOutputResponse
    {
        typealias detachPolicyContinuation = CheckedContinuation<DetachPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachPolicyContinuation) in
            detachPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the specified policy from the specified certificate.</p>
    ///          <p>
    ///             <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a> instead.</p>
    @available(*, deprecated)
    func detachPrincipalPolicy(input: DetachPrincipalPolicyInput) async throws -> DetachPrincipalPolicyOutputResponse
    {
        typealias detachPrincipalPolicyContinuation = CheckedContinuation<DetachPrincipalPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachPrincipalPolicyContinuation) in
            detachPrincipalPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates a Device Defender security profile from a thing group or from this account.</p>
    func detachSecurityProfile(input: DetachSecurityProfileInput) async throws -> DetachSecurityProfileOutputResponse
    {
        typealias detachSecurityProfileContinuation = CheckedContinuation<DetachSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachSecurityProfileContinuation) in
            detachSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Detaches the specified principal from the specified thing. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities.</p>
    /// 		       <note>
    /// 			         <p>This call is asynchronous. It might take several seconds for the detachment to
    /// 				propagate.</p>
    /// 		       </note>
    func detachThingPrincipal(input: DetachThingPrincipalInput) async throws -> DetachThingPrincipalOutputResponse
    {
        typealias detachThingPrincipalContinuation = CheckedContinuation<DetachThingPrincipalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachThingPrincipalContinuation) in
            detachThingPrincipal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the rule.</p>
    func disableTopicRule(input: DisableTopicRuleInput) async throws -> DisableTopicRuleOutputResponse
    {
        typealias disableTopicRuleContinuation = CheckedContinuation<DisableTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableTopicRuleContinuation) in
            disableTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the rule.</p>
    func enableTopicRule(input: EnableTopicRuleInput) async throws -> EnableTopicRuleOutputResponse
    {
        typealias enableTopicRuleContinuation = CheckedContinuation<EnableTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableTopicRuleContinuation) in
            enableTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Returns a Device Defender's ML Detect Security Profile training model's status.
    ///     </p>
    func getBehaviorModelTrainingSummaries(input: GetBehaviorModelTrainingSummariesInput) async throws -> GetBehaviorModelTrainingSummariesOutputResponse
    {
        typealias getBehaviorModelTrainingSummariesContinuation = CheckedContinuation<GetBehaviorModelTrainingSummariesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBehaviorModelTrainingSummariesContinuation) in
            getBehaviorModelTrainingSummaries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the approximate count of unique values that match the query.</p>
    func getCardinality(input: GetCardinalityInput) async throws -> GetCardinalityOutputResponse
    {
        typealias getCardinalityContinuation = CheckedContinuation<GetCardinalityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCardinalityContinuation) in
            getCardinality(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a list of the policies that have an effect on the authorization behavior of the
    ///          specified device when it connects to the AWS IoT device gateway.</p>
    func getEffectivePolicies(input: GetEffectivePoliciesInput) async throws -> GetEffectivePoliciesOutputResponse
    {
        typealias getEffectivePoliciesContinuation = CheckedContinuation<GetEffectivePoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEffectivePoliciesContinuation) in
            getEffectivePolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the indexing configuration.</p>
    func getIndexingConfiguration(input: GetIndexingConfigurationInput) async throws -> GetIndexingConfigurationOutputResponse
    {
        typealias getIndexingConfigurationContinuation = CheckedContinuation<GetIndexingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIndexingConfigurationContinuation) in
            getIndexingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a job document.</p>
    func getJobDocument(input: GetJobDocumentInput) async throws -> GetJobDocumentOutputResponse
    {
        typealias getJobDocumentContinuation = CheckedContinuation<GetJobDocumentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getJobDocumentContinuation) in
            getJobDocument(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the logging options.</p>
    ///          <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code>
    ///          instead.</p>
    func getLoggingOptions(input: GetLoggingOptionsInput) async throws -> GetLoggingOptionsOutputResponse
    {
        typealias getLoggingOptionsContinuation = CheckedContinuation<GetLoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLoggingOptionsContinuation) in
            getLoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets an OTA update.</p>
    func getOTAUpdate(input: GetOTAUpdateInput) async throws -> GetOTAUpdateOutputResponse
    {
        typealias getOTAUpdateContinuation = CheckedContinuation<GetOTAUpdateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getOTAUpdateContinuation) in
            getOTAUpdate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Groups the aggregated values that match the query into percentile groupings. The default
    ///         percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own
    ///         when you call <code>GetPercentiles</code>. This function returns a value for each
    ///         percentile group specified (or the default percentile groupings). The percentile group
    ///         "1" contains the aggregated field value that occurs in approximately one percent of the
    ///         values that match the query. The percentile group "5" contains the aggregated field value
    ///         that occurs in approximately five percent of the values that match the query, and so on.
    ///         The result is an approximation, the more values that match the query, the more accurate
    ///         the percentile values.</p>
    func getPercentiles(input: GetPercentilesInput) async throws -> GetPercentilesOutputResponse
    {
        typealias getPercentilesContinuation = CheckedContinuation<GetPercentilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPercentilesContinuation) in
            getPercentiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about the specified policy with the policy document of the default
    ///          version.</p>
    func getPolicy(input: GetPolicyInput) async throws -> GetPolicyOutputResponse
    {
        typealias getPolicyContinuation = CheckedContinuation<GetPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPolicyContinuation) in
            getPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about the specified policy version.</p>
    func getPolicyVersion(input: GetPolicyVersionInput) async throws -> GetPolicyVersionOutputResponse
    {
        typealias getPolicyVersionContinuation = CheckedContinuation<GetPolicyVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPolicyVersionContinuation) in
            getPolicyVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a registration code used to register a CA certificate with AWS IoT.</p>
    func getRegistrationCode(input: GetRegistrationCodeInput) async throws -> GetRegistrationCodeOutputResponse
    {
        typealias getRegistrationCodeContinuation = CheckedContinuation<GetRegistrationCodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRegistrationCodeContinuation) in
            getRegistrationCode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the count, average, sum, minimum, maximum, sum of squares, variance,
    ///       and standard deviation for the specified aggregated field. If the aggregation field is of type
    ///       <code>String</code>, only the count statistic is returned.</p>
    func getStatistics(input: GetStatisticsInput) async throws -> GetStatisticsOutputResponse
    {
        typealias getStatisticsContinuation = CheckedContinuation<GetStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getStatisticsContinuation) in
            getStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about the rule.</p>
    func getTopicRule(input: GetTopicRuleInput) async throws -> GetTopicRuleOutputResponse
    {
        typealias getTopicRuleContinuation = CheckedContinuation<GetTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTopicRuleContinuation) in
            getTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a topic rule destination.</p>
    func getTopicRuleDestination(input: GetTopicRuleDestinationInput) async throws -> GetTopicRuleDestinationOutputResponse
    {
        typealias getTopicRuleDestinationContinuation = CheckedContinuation<GetTopicRuleDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTopicRuleDestinationContinuation) in
            getTopicRuleDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the fine grained logging options.</p>
    func getV2LoggingOptions(input: GetV2LoggingOptionsInput) async throws -> GetV2LoggingOptionsOutputResponse
    {
        typealias getV2LoggingOptionsContinuation = CheckedContinuation<GetV2LoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getV2LoggingOptionsContinuation) in
            getV2LoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the active violations for a given Device Defender security profile.</p>
    func listActiveViolations(input: ListActiveViolationsInput) async throws -> ListActiveViolationsOutputResponse
    {
        typealias listActiveViolationsContinuation = CheckedContinuation<ListActiveViolationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listActiveViolationsContinuation) in
            listActiveViolations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the policies attached to the specified thing group.</p>
    func listAttachedPolicies(input: ListAttachedPoliciesInput) async throws -> ListAttachedPoliciesOutputResponse
    {
        typealias listAttachedPoliciesContinuation = CheckedContinuation<ListAttachedPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAttachedPoliciesContinuation) in
            listAttachedPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the findings (results) of a Device Defender audit or of the audits
    ///         performed during a specified time period. (Findings are retained for 90 days.)</p>
    func listAuditFindings(input: ListAuditFindingsInput) async throws -> ListAuditFindingsOutputResponse
    {
        typealias listAuditFindingsContinuation = CheckedContinuation<ListAuditFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuditFindingsContinuation) in
            listAuditFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the status of audit mitigation action tasks that were
    ///       executed.</p>
    func listAuditMitigationActionsExecutions(input: ListAuditMitigationActionsExecutionsInput) async throws -> ListAuditMitigationActionsExecutionsOutputResponse
    {
        typealias listAuditMitigationActionsExecutionsContinuation = CheckedContinuation<ListAuditMitigationActionsExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuditMitigationActionsExecutionsContinuation) in
            listAuditMitigationActionsExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a list of audit mitigation action tasks that match the specified filters.</p>
    func listAuditMitigationActionsTasks(input: ListAuditMitigationActionsTasksInput) async throws -> ListAuditMitigationActionsTasksOutputResponse
    {
        typealias listAuditMitigationActionsTasksContinuation = CheckedContinuation<ListAuditMitigationActionsTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuditMitigationActionsTasksContinuation) in
            listAuditMitigationActionsTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Lists your Device Defender audit listings.
    ///     </p>
    func listAuditSuppressions(input: ListAuditSuppressionsInput) async throws -> ListAuditSuppressionsOutputResponse
    {
        typealias listAuditSuppressionsContinuation = CheckedContinuation<ListAuditSuppressionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuditSuppressionsContinuation) in
            listAuditSuppressions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the Device Defender audits that have been performed during a given
    ///           time period.</p>
    func listAuditTasks(input: ListAuditTasksInput) async throws -> ListAuditTasksOutputResponse
    {
        typealias listAuditTasksContinuation = CheckedContinuation<ListAuditTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuditTasksContinuation) in
            listAuditTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the authorizers registered in your account.</p>
    func listAuthorizers(input: ListAuthorizersInput) async throws -> ListAuthorizersOutputResponse
    {
        typealias listAuthorizersContinuation = CheckedContinuation<ListAuthorizersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuthorizersContinuation) in
            listAuthorizers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the billing groups you have created.</p>
    func listBillingGroups(input: ListBillingGroupsInput) async throws -> ListBillingGroupsOutputResponse
    {
        typealias listBillingGroupsContinuation = CheckedContinuation<ListBillingGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBillingGroupsContinuation) in
            listBillingGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the CA certificates registered for your AWS account.</p>
    ///          <p>The results are paginated with a default page size of 25. You can use the returned
    ///          marker to retrieve additional results.</p>
    func listCACertificates(input: ListCACertificatesInput) async throws -> ListCACertificatesOutputResponse
    {
        typealias listCACertificatesContinuation = CheckedContinuation<ListCACertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCACertificatesContinuation) in
            listCACertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the certificates registered in your AWS account.</p>
    ///          <p>The results are paginated with a default page size of 25. You can use the returned
    ///          marker to retrieve additional results.</p>
    func listCertificates(input: ListCertificatesInput) async throws -> ListCertificatesOutputResponse
    {
        typealias listCertificatesContinuation = CheckedContinuation<ListCertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCertificatesContinuation) in
            listCertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the device certificates signed by the specified CA certificate.</p>
    func listCertificatesByCA(input: ListCertificatesByCAInput) async throws -> ListCertificatesByCAOutputResponse
    {
        typealias listCertificatesByCAContinuation = CheckedContinuation<ListCertificatesByCAOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCertificatesByCAContinuation) in
            listCertificatesByCA(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Lists your Device Defender detect custom metrics.
    ///     </p>
    func listCustomMetrics(input: ListCustomMetricsInput) async throws -> ListCustomMetricsOutputResponse
    {
        typealias listCustomMetricsContinuation = CheckedContinuation<ListCustomMetricsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCustomMetricsContinuation) in
            listCustomMetrics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Lists mitigation actions executions for a Device Defender ML Detect Security Profile.
    ///     </p>
    func listDetectMitigationActionsExecutions(input: ListDetectMitigationActionsExecutionsInput) async throws -> ListDetectMitigationActionsExecutionsOutputResponse
    {
        typealias listDetectMitigationActionsExecutionsContinuation = CheckedContinuation<ListDetectMitigationActionsExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDetectMitigationActionsExecutionsContinuation) in
            listDetectMitigationActionsExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       List of Device Defender ML Detect mitigation actions tasks.
    ///     </p>
    func listDetectMitigationActionsTasks(input: ListDetectMitigationActionsTasksInput) async throws -> ListDetectMitigationActionsTasksOutputResponse
    {
        typealias listDetectMitigationActionsTasksContinuation = CheckedContinuation<ListDetectMitigationActionsTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDetectMitigationActionsTasksContinuation) in
            listDetectMitigationActionsTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the set of dimensions that are defined for your AWS account.</p>
    func listDimensions(input: ListDimensionsInput) async throws -> ListDimensionsOutputResponse
    {
        typealias listDimensionsContinuation = CheckedContinuation<ListDimensionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDimensionsContinuation) in
            listDimensions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name.</p>
    func listDomainConfigurations(input: ListDomainConfigurationsInput) async throws -> ListDomainConfigurationsOutputResponse
    {
        typealias listDomainConfigurationsContinuation = CheckedContinuation<ListDomainConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDomainConfigurationsContinuation) in
            listDomainConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the search indices.</p>
    func listIndices(input: ListIndicesInput) async throws -> ListIndicesOutputResponse
    {
        typealias listIndicesContinuation = CheckedContinuation<ListIndicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIndicesContinuation) in
            listIndices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the job executions for a job.</p>
    func listJobExecutionsForJob(input: ListJobExecutionsForJobInput) async throws -> ListJobExecutionsForJobOutputResponse
    {
        typealias listJobExecutionsForJobContinuation = CheckedContinuation<ListJobExecutionsForJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobExecutionsForJobContinuation) in
            listJobExecutionsForJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the job executions for the specified thing.</p>
    func listJobExecutionsForThing(input: ListJobExecutionsForThingInput) async throws -> ListJobExecutionsForThingOutputResponse
    {
        typealias listJobExecutionsForThingContinuation = CheckedContinuation<ListJobExecutionsForThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobExecutionsForThingContinuation) in
            listJobExecutionsForThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of job templates.</p>
    func listJobTemplates(input: ListJobTemplatesInput) async throws -> ListJobTemplatesOutputResponse
    {
        typealias listJobTemplatesContinuation = CheckedContinuation<ListJobTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobTemplatesContinuation) in
            listJobTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists jobs.</p>
    func listJobs(input: ListJobsInput) async throws -> ListJobsOutputResponse
    {
        typealias listJobsContinuation = CheckedContinuation<ListJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobsContinuation) in
            listJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a list of all mitigation actions that match the specified filter criteria.</p>
    func listMitigationActions(input: ListMitigationActionsInput) async throws -> ListMitigationActionsOutputResponse
    {
        typealias listMitigationActionsContinuation = CheckedContinuation<ListMitigationActionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMitigationActionsContinuation) in
            listMitigationActions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists OTA updates.</p>
    func listOTAUpdates(input: ListOTAUpdatesInput) async throws -> ListOTAUpdatesOutputResponse
    {
        typealias listOTAUpdatesContinuation = CheckedContinuation<ListOTAUpdatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOTAUpdatesContinuation) in
            listOTAUpdates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists certificates that are being transferred but not yet accepted.</p>
    func listOutgoingCertificates(input: ListOutgoingCertificatesInput) async throws -> ListOutgoingCertificatesOutputResponse
    {
        typealias listOutgoingCertificatesContinuation = CheckedContinuation<ListOutgoingCertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOutgoingCertificatesContinuation) in
            listOutgoingCertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists your policies.</p>
    func listPolicies(input: ListPoliciesInput) async throws -> ListPoliciesOutputResponse
    {
        typealias listPoliciesContinuation = CheckedContinuation<ListPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPoliciesContinuation) in
            listPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the principals associated with the specified policy.</p>
    ///          <p>
    ///             <b>Note:</b> This API is deprecated. Please use <a>ListTargetsForPolicy</a> instead.</p>
    @available(*, deprecated)
    func listPolicyPrincipals(input: ListPolicyPrincipalsInput) async throws -> ListPolicyPrincipalsOutputResponse
    {
        typealias listPolicyPrincipalsContinuation = CheckedContinuation<ListPolicyPrincipalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPolicyPrincipalsContinuation) in
            listPolicyPrincipals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the versions of the specified policy and identifies the default
    ///          version.</p>
    func listPolicyVersions(input: ListPolicyVersionsInput) async throws -> ListPolicyVersionsOutputResponse
    {
        typealias listPolicyVersionsContinuation = CheckedContinuation<ListPolicyVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPolicyVersionsContinuation) in
            listPolicyVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the policies attached to the specified principal. If you use an Cognito
    ///          identity, the ID must be in <a href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format</a>.</p>
    ///          <p>
    ///             <b>Note:</b> This API is deprecated. Please use <a>ListAttachedPolicies</a> instead.</p>
    @available(*, deprecated)
    func listPrincipalPolicies(input: ListPrincipalPoliciesInput) async throws -> ListPrincipalPoliciesOutputResponse
    {
        typealias listPrincipalPoliciesContinuation = CheckedContinuation<ListPrincipalPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPrincipalPoliciesContinuation) in
            listPrincipalPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the things associated with the specified principal. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities. </p>
    func listPrincipalThings(input: ListPrincipalThingsInput) async throws -> ListPrincipalThingsOutputResponse
    {
        typealias listPrincipalThingsContinuation = CheckedContinuation<ListPrincipalThingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPrincipalThingsContinuation) in
            listPrincipalThings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>A list of fleet provisioning template versions.</p>
    func listProvisioningTemplateVersions(input: ListProvisioningTemplateVersionsInput) async throws -> ListProvisioningTemplateVersionsOutputResponse
    {
        typealias listProvisioningTemplateVersionsContinuation = CheckedContinuation<ListProvisioningTemplateVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProvisioningTemplateVersionsContinuation) in
            listProvisioningTemplateVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the fleet provisioning templates in your AWS account.</p>
    func listProvisioningTemplates(input: ListProvisioningTemplatesInput) async throws -> ListProvisioningTemplatesOutputResponse
    {
        typealias listProvisioningTemplatesContinuation = CheckedContinuation<ListProvisioningTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProvisioningTemplatesContinuation) in
            listProvisioningTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the role aliases registered in your account.</p>
    func listRoleAliases(input: ListRoleAliasesInput) async throws -> ListRoleAliasesOutputResponse
    {
        typealias listRoleAliasesContinuation = CheckedContinuation<ListRoleAliasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRoleAliasesContinuation) in
            listRoleAliases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all of your scheduled audits.</p>
    func listScheduledAudits(input: ListScheduledAuditsInput) async throws -> ListScheduledAuditsOutputResponse
    {
        typealias listScheduledAuditsContinuation = CheckedContinuation<ListScheduledAuditsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listScheduledAuditsContinuation) in
            listScheduledAudits(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the Device Defender security profiles
    ///       you've
    ///       created. You can filter security profiles by dimension or custom metric.</p>
    ///          <note>
    ///             <p>
    ///                <code>dimensionName</code> and <code>metricName</code> cannot be used in the same request.</p>
    ///          </note>
    func listSecurityProfiles(input: ListSecurityProfilesInput) async throws -> ListSecurityProfilesOutputResponse
    {
        typealias listSecurityProfilesContinuation = CheckedContinuation<ListSecurityProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSecurityProfilesContinuation) in
            listSecurityProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the Device Defender security profiles attached to a target (thing group).</p>
    func listSecurityProfilesForTarget(input: ListSecurityProfilesForTargetInput) async throws -> ListSecurityProfilesForTargetOutputResponse
    {
        typealias listSecurityProfilesForTargetContinuation = CheckedContinuation<ListSecurityProfilesForTargetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSecurityProfilesForTargetContinuation) in
            listSecurityProfilesForTarget(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all of the streams in your AWS account.</p>
    func listStreams(input: ListStreamsInput) async throws -> ListStreamsOutputResponse
    {
        typealias listStreamsContinuation = CheckedContinuation<ListStreamsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStreamsContinuation) in
            listStreams(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the tags (metadata) you have assigned to the resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List targets for the specified policy.</p>
    func listTargetsForPolicy(input: ListTargetsForPolicyInput) async throws -> ListTargetsForPolicyOutputResponse
    {
        typealias listTargetsForPolicyContinuation = CheckedContinuation<ListTargetsForPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTargetsForPolicyContinuation) in
            listTargetsForPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the targets (thing groups) associated with a given Device Defender security profile.</p>
    func listTargetsForSecurityProfile(input: ListTargetsForSecurityProfileInput) async throws -> ListTargetsForSecurityProfileOutputResponse
    {
        typealias listTargetsForSecurityProfileContinuation = CheckedContinuation<ListTargetsForSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTargetsForSecurityProfileContinuation) in
            listTargetsForSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the thing groups in your account.</p>
    func listThingGroups(input: ListThingGroupsInput) async throws -> ListThingGroupsOutputResponse
    {
        typealias listThingGroupsContinuation = CheckedContinuation<ListThingGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingGroupsContinuation) in
            listThingGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the thing groups to which the specified thing belongs.</p>
    func listThingGroupsForThing(input: ListThingGroupsForThingInput) async throws -> ListThingGroupsForThingOutputResponse
    {
        typealias listThingGroupsForThingContinuation = CheckedContinuation<ListThingGroupsForThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingGroupsForThingContinuation) in
            listThingGroupsForThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the principals associated with the specified thing. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities.</p>
    func listThingPrincipals(input: ListThingPrincipalsInput) async throws -> ListThingPrincipalsOutputResponse
    {
        typealias listThingPrincipalsContinuation = CheckedContinuation<ListThingPrincipalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingPrincipalsContinuation) in
            listThingPrincipals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Information about the thing registration tasks.</p>
    func listThingRegistrationTaskReports(input: ListThingRegistrationTaskReportsInput) async throws -> ListThingRegistrationTaskReportsOutputResponse
    {
        typealias listThingRegistrationTaskReportsContinuation = CheckedContinuation<ListThingRegistrationTaskReportsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingRegistrationTaskReportsContinuation) in
            listThingRegistrationTaskReports(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List bulk thing provisioning tasks.</p>
    func listThingRegistrationTasks(input: ListThingRegistrationTasksInput) async throws -> ListThingRegistrationTasksOutputResponse
    {
        typealias listThingRegistrationTasksContinuation = CheckedContinuation<ListThingRegistrationTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingRegistrationTasksContinuation) in
            listThingRegistrationTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the existing thing types.</p>
    func listThingTypes(input: ListThingTypesInput) async throws -> ListThingTypesOutputResponse
    {
        typealias listThingTypesContinuation = CheckedContinuation<ListThingTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingTypesContinuation) in
            listThingTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists your things. Use the <b>attributeName</b> and
    /// 				<b>attributeValue</b> parameters to filter your things.
    /// 			For example, calling <code>ListThings</code> with attributeName=Color and
    /// 			attributeValue=Red retrieves all things in the registry that contain an attribute
    /// 				<b>Color</b> with the value <b>Red</b>. </p>
    /// 		       <note>
    /// 			         <p>You will not be charged for calling this API if an <code>Access denied</code> error is returned. You will also not be charged if no attributes or pagination token was provided in request and no pagination token and no results were returned.</p>
    /// 		       </note>
    func listThings(input: ListThingsInput) async throws -> ListThingsOutputResponse
    {
        typealias listThingsContinuation = CheckedContinuation<ListThingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingsContinuation) in
            listThings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the things you have added to the given billing group.</p>
    func listThingsInBillingGroup(input: ListThingsInBillingGroupInput) async throws -> ListThingsInBillingGroupOutputResponse
    {
        typealias listThingsInBillingGroupContinuation = CheckedContinuation<ListThingsInBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingsInBillingGroupContinuation) in
            listThingsInBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the things in the specified group.</p>
    func listThingsInThingGroup(input: ListThingsInThingGroupInput) async throws -> ListThingsInThingGroupOutputResponse
    {
        typealias listThingsInThingGroupContinuation = CheckedContinuation<ListThingsInThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingsInThingGroupContinuation) in
            listThingsInThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all the topic rule destinations in your AWS account.</p>
    func listTopicRuleDestinations(input: ListTopicRuleDestinationsInput) async throws -> ListTopicRuleDestinationsOutputResponse
    {
        typealias listTopicRuleDestinationsContinuation = CheckedContinuation<ListTopicRuleDestinationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTopicRuleDestinationsContinuation) in
            listTopicRuleDestinations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the rules for the specific topic.</p>
    func listTopicRules(input: ListTopicRulesInput) async throws -> ListTopicRulesOutputResponse
    {
        typealias listTopicRulesContinuation = CheckedContinuation<ListTopicRulesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTopicRulesContinuation) in
            listTopicRules(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists logging levels.</p>
    func listV2LoggingLevels(input: ListV2LoggingLevelsInput) async throws -> ListV2LoggingLevelsOutputResponse
    {
        typealias listV2LoggingLevelsContinuation = CheckedContinuation<ListV2LoggingLevelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listV2LoggingLevelsContinuation) in
            listV2LoggingLevels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the Device Defender security profile violations discovered during the given time period.
    ///       You can use filters to limit the results to those alerts issued for a particular security profile,
    ///       behavior, or thing (device).</p>
    func listViolationEvents(input: ListViolationEventsInput) async throws -> ListViolationEventsOutputResponse
    {
        typealias listViolationEventsContinuation = CheckedContinuation<ListViolationEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listViolationEventsContinuation) in
            listViolationEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign
    ///          device certificates, which can be then registered with AWS IoT. You can register up to 10
    ///          CA certificates per AWS account that have the same subject field. This enables you to have
    ///          up to 10 certificate authorities sign your device certificates. If you have more than one
    ///          CA certificate registered, make sure you pass the CA certificate when you register your
    ///          device certificates with the RegisterCertificate API.</p>
    func registerCACertificate(input: RegisterCACertificateInput) async throws -> RegisterCACertificateOutputResponse
    {
        typealias registerCACertificateContinuation = CheckedContinuation<RegisterCACertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerCACertificateContinuation) in
            registerCACertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Registers a device certificate with AWS IoT. If you have more than one CA certificate
    ///          that has the same subject field, you must specify the CA certificate that was used to sign
    ///          the device certificate being registered.</p>
    func registerCertificate(input: RegisterCertificateInput) async throws -> RegisterCertificateOutputResponse
    {
        typealias registerCertificateContinuation = CheckedContinuation<RegisterCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerCertificateContinuation) in
            registerCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Register a certificate that does not have a certificate authority (CA).</p>
    func registerCertificateWithoutCA(input: RegisterCertificateWithoutCAInput) async throws -> RegisterCertificateWithoutCAOutputResponse
    {
        typealias registerCertificateWithoutCAContinuation = CheckedContinuation<RegisterCertificateWithoutCAOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerCertificateWithoutCAContinuation) in
            registerCertificateWithoutCA(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provisions a thing in the device registry. RegisterThing calls other AWS IoT control
    ///          plane APIs. These calls might exceed your account level <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot">
    ///             AWS IoT Throttling Limits</a> and cause throttle errors. Please contact <a href="https://console.aws.amazon.com/support/home">AWS Customer Support</a> to raise
    ///          your throttling limits if necessary.</p>
    func registerThing(input: RegisterThingInput) async throws -> RegisterThingOutputResponse
    {
        typealias registerThingContinuation = CheckedContinuation<RegisterThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerThingContinuation) in
            registerThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer,
    ///          the certificate status changes from <b>PENDING_TRANSFER</b> to
    ///             <b>INACTIVE</b>.</p>
    ///          <p>To check for pending certificate transfers, call <a>ListCertificates</a>
    ///          to enumerate your certificates.</p>
    ///          <p>This operation can only be called by the transfer destination. After it is called,
    ///          the certificate will be returned to the source's account in the INACTIVE state.</p>
    func rejectCertificateTransfer(input: RejectCertificateTransferInput) async throws -> RejectCertificateTransferOutputResponse
    {
        typealias rejectCertificateTransferContinuation = CheckedContinuation<RejectCertificateTransferOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rejectCertificateTransferContinuation) in
            rejectCertificateTransfer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the given thing from the billing group.</p>
    func removeThingFromBillingGroup(input: RemoveThingFromBillingGroupInput) async throws -> RemoveThingFromBillingGroupOutputResponse
    {
        typealias removeThingFromBillingGroupContinuation = CheckedContinuation<RemoveThingFromBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeThingFromBillingGroupContinuation) in
            removeThingFromBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Remove the specified thing from the specified group.</p>
    /// 		       <p>You must specify either a <code>thingGroupArn</code> or a
    /// 			<code>thingGroupName</code> to identify the thing group and
    /// 			either a <code>thingArn</code> or a <code>thingName</code> to
    /// 			identify the thing to remove from the thing group.
    /// 		</p>
    func removeThingFromThingGroup(input: RemoveThingFromThingGroupInput) async throws -> RemoveThingFromThingGroupOutputResponse
    {
        typealias removeThingFromThingGroupContinuation = CheckedContinuation<RemoveThingFromThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeThingFromThingGroupContinuation) in
            removeThingFromThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Replaces the rule. You must specify all parameters for the new rule. Creating rules
    ///          is an administrator-level action. Any user who has permission to create rules will be able
    ///          to access data processed by the rule.</p>
    func replaceTopicRule(input: ReplaceTopicRuleInput) async throws -> ReplaceTopicRuleOutputResponse
    {
        typealias replaceTopicRuleContinuation = CheckedContinuation<ReplaceTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: replaceTopicRuleContinuation) in
            replaceTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>The query search index.</p>
    func searchIndex(input: SearchIndexInput) async throws -> SearchIndexOutputResponse
    {
        typealias searchIndexContinuation = CheckedContinuation<SearchIndexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchIndexContinuation) in
            searchIndex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets the default authorizer. This will be used if a websocket connection is made
    ///          without specifying an authorizer.</p>
    func setDefaultAuthorizer(input: SetDefaultAuthorizerInput) async throws -> SetDefaultAuthorizerOutputResponse
    {
        typealias setDefaultAuthorizerContinuation = CheckedContinuation<SetDefaultAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setDefaultAuthorizerContinuation) in
            setDefaultAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets the specified version of the specified policy as the policy's default
    ///          (operative) version. This action affects all certificates to which the policy is attached.
    ///          To list the principals the policy is attached to, use the ListPrincipalPolicy
    ///          API.</p>
    func setDefaultPolicyVersion(input: SetDefaultPolicyVersionInput) async throws -> SetDefaultPolicyVersionOutputResponse
    {
        typealias setDefaultPolicyVersionContinuation = CheckedContinuation<SetDefaultPolicyVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setDefaultPolicyVersionContinuation) in
            setDefaultPolicyVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets the logging options.</p>
    ///          <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code>
    ///          instead.</p>
    func setLoggingOptions(input: SetLoggingOptionsInput) async throws -> SetLoggingOptionsOutputResponse
    {
        typealias setLoggingOptionsContinuation = CheckedContinuation<SetLoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setLoggingOptionsContinuation) in
            setLoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets the logging level.</p>
    func setV2LoggingLevel(input: SetV2LoggingLevelInput) async throws -> SetV2LoggingLevelOutputResponse
    {
        typealias setV2LoggingLevelContinuation = CheckedContinuation<SetV2LoggingLevelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setV2LoggingLevelContinuation) in
            setV2LoggingLevel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets the logging options for the V2 logging service.</p>
    func setV2LoggingOptions(input: SetV2LoggingOptionsInput) async throws -> SetV2LoggingOptionsOutputResponse
    {
        typealias setV2LoggingOptionsContinuation = CheckedContinuation<SetV2LoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setV2LoggingOptionsContinuation) in
            setV2LoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts a task that applies a set of mitigation actions to the specified target.</p>
    func startAuditMitigationActionsTask(input: StartAuditMitigationActionsTaskInput) async throws -> StartAuditMitigationActionsTaskOutputResponse
    {
        typealias startAuditMitigationActionsTaskContinuation = CheckedContinuation<StartAuditMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startAuditMitigationActionsTaskContinuation) in
            startAuditMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Starts a Device Defender ML Detect mitigation actions task.
    ///     </p>
    func startDetectMitigationActionsTask(input: StartDetectMitigationActionsTaskInput) async throws -> StartDetectMitigationActionsTaskOutputResponse
    {
        typealias startDetectMitigationActionsTaskContinuation = CheckedContinuation<StartDetectMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startDetectMitigationActionsTaskContinuation) in
            startDetectMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts an on-demand Device Defender audit.</p>
    func startOnDemandAuditTask(input: StartOnDemandAuditTaskInput) async throws -> StartOnDemandAuditTaskOutputResponse
    {
        typealias startOnDemandAuditTaskContinuation = CheckedContinuation<StartOnDemandAuditTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startOnDemandAuditTaskContinuation) in
            startOnDemandAuditTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a bulk thing provisioning task.</p>
    func startThingRegistrationTask(input: StartThingRegistrationTaskInput) async throws -> StartThingRegistrationTaskOutputResponse
    {
        typealias startThingRegistrationTaskContinuation = CheckedContinuation<StartThingRegistrationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startThingRegistrationTaskContinuation) in
            startThingRegistrationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Cancels a bulk thing provisioning task.</p>
    func stopThingRegistrationTask(input: StopThingRegistrationTaskInput) async throws -> StopThingRegistrationTaskOutputResponse
    {
        typealias stopThingRegistrationTaskContinuation = CheckedContinuation<StopThingRegistrationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopThingRegistrationTaskContinuation) in
            stopThingRegistrationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds to or modifies the tags of the given resource. Tags are metadata which can be
    /// 			used to manage a resource.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Tests if a specified principal is authorized to perform an AWS IoT action on a
    ///          specified resource. Use this to test and debug the authorization behavior of devices that
    ///          connect to the AWS IoT device gateway.</p>
    func testAuthorization(input: TestAuthorizationInput) async throws -> TestAuthorizationOutputResponse
    {
        typealias testAuthorizationContinuation = CheckedContinuation<TestAuthorizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testAuthorizationContinuation) in
            testAuthorization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Tests a custom authorization behavior by invoking a specified custom authorizer. Use
    ///          this to test and debug the custom authorization behavior of devices that connect to the AWS
    ///          IoT device gateway.</p>
    func testInvokeAuthorizer(input: TestInvokeAuthorizerInput) async throws -> TestInvokeAuthorizerOutputResponse
    {
        typealias testInvokeAuthorizerContinuation = CheckedContinuation<TestInvokeAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testInvokeAuthorizerContinuation) in
            testInvokeAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Transfers the specified certificate to the specified AWS account.</p>
    ///          <p>You can cancel the transfer until it is acknowledged by the recipient.</p>
    ///          <p>No notification is sent to the transfer destination's account. It is up to the caller
    ///          to notify the transfer target.</p>
    ///          <p>The certificate being transferred must not be in the ACTIVE state. You can use the
    ///          UpdateCertificate API to deactivate it.</p>
    ///          <p>The certificate must not have any policies attached to it. You can use the
    ///          DetachPrincipalPolicy API to detach them.</p>
    func transferCertificate(input: TransferCertificateInput) async throws -> TransferCertificateOutputResponse
    {
        typealias transferCertificateContinuation = CheckedContinuation<TransferCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: transferCertificateContinuation) in
            transferCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the given tags (metadata) from the resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Configures or reconfigures the Device Defender audit settings for this account.
    ///           Settings include how audit notifications are sent and which audit checks are
    ///           enabled or disabled.</p>
    func updateAccountAuditConfiguration(input: UpdateAccountAuditConfigurationInput) async throws -> UpdateAccountAuditConfigurationOutputResponse
    {
        typealias updateAccountAuditConfigurationContinuation = CheckedContinuation<UpdateAccountAuditConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAccountAuditConfigurationContinuation) in
            updateAccountAuditConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Updates a Device Defender audit suppression.
    ///     </p>
    func updateAuditSuppression(input: UpdateAuditSuppressionInput) async throws -> UpdateAuditSuppressionOutputResponse
    {
        typealias updateAuditSuppressionContinuation = CheckedContinuation<UpdateAuditSuppressionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAuditSuppressionContinuation) in
            updateAuditSuppression(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an authorizer.</p>
    func updateAuthorizer(input: UpdateAuthorizerInput) async throws -> UpdateAuthorizerOutputResponse
    {
        typealias updateAuthorizerContinuation = CheckedContinuation<UpdateAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAuthorizerContinuation) in
            updateAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates information about the billing group.</p>
    func updateBillingGroup(input: UpdateBillingGroupInput) async throws -> UpdateBillingGroupOutputResponse
    {
        typealias updateBillingGroupContinuation = CheckedContinuation<UpdateBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBillingGroupContinuation) in
            updateBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a registered CA certificate.</p>
    func updateCACertificate(input: UpdateCACertificateInput) async throws -> UpdateCACertificateOutputResponse
    {
        typealias updateCACertificateContinuation = CheckedContinuation<UpdateCACertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCACertificateContinuation) in
            updateCACertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the status of the specified certificate. This operation is
    ///          idempotent.</p>
    ///          <p>Certificates must be in the ACTIVE state to authenticate devices that use
    ///          a certificate to connect to AWS IoT.</p>
    ///          <p>Within a few minutes of updating a certificate from the ACTIVE state to any other
    ///          state, AWS IoT disconnects all devices that used that certificate to connect. Devices cannot
    ///          use a certificate that is not in the ACTIVE state to reconnect.</p>
    func updateCertificate(input: UpdateCertificateInput) async throws -> UpdateCertificateOutputResponse
    {
        typealias updateCertificateContinuation = CheckedContinuation<UpdateCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCertificateContinuation) in
            updateCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a
    ///       Device Defender detect custom metric. </p>
    func updateCustomMetric(input: UpdateCustomMetricInput) async throws -> UpdateCustomMetricOutputResponse
    {
        typealias updateCustomMetricContinuation = CheckedContinuation<UpdateCustomMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCustomMetricContinuation) in
            updateCustomMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the definition for a dimension. You
    ///       cannot
    ///       change the type of a dimension after
    ///       it is created (you can delete it and
    ///       recreate
    ///       it).</p>
    func updateDimension(input: UpdateDimensionInput) async throws -> UpdateDimensionOutputResponse
    {
        typealias updateDimensionContinuation = CheckedContinuation<UpdateDimensionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDimensionContinuation) in
            updateDimension(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.</p>
    func updateDomainConfiguration(input: UpdateDomainConfigurationInput) async throws -> UpdateDomainConfigurationOutputResponse
    {
        typealias updateDomainConfigurationContinuation = CheckedContinuation<UpdateDomainConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDomainConfigurationContinuation) in
            updateDomainConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a dynamic thing group.</p>
    func updateDynamicThingGroup(input: UpdateDynamicThingGroupInput) async throws -> UpdateDynamicThingGroupOutputResponse
    {
        typealias updateDynamicThingGroupContinuation = CheckedContinuation<UpdateDynamicThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDynamicThingGroupContinuation) in
            updateDynamicThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the event configurations.</p>
    func updateEventConfigurations(input: UpdateEventConfigurationsInput) async throws -> UpdateEventConfigurationsOutputResponse
    {
        typealias updateEventConfigurationsContinuation = CheckedContinuation<UpdateEventConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEventConfigurationsContinuation) in
            updateEventConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the search configuration.</p>
    func updateIndexingConfiguration(input: UpdateIndexingConfigurationInput) async throws -> UpdateIndexingConfigurationOutputResponse
    {
        typealias updateIndexingConfigurationContinuation = CheckedContinuation<UpdateIndexingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIndexingConfigurationContinuation) in
            updateIndexingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates supported fields of the specified job.</p>
    func updateJob(input: UpdateJobInput) async throws -> UpdateJobOutputResponse
    {
        typealias updateJobContinuation = CheckedContinuation<UpdateJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateJobContinuation) in
            updateJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the definition for the specified mitigation action.</p>
    func updateMitigationAction(input: UpdateMitigationActionInput) async throws -> UpdateMitigationActionOutputResponse
    {
        typealias updateMitigationActionContinuation = CheckedContinuation<UpdateMitigationActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMitigationActionContinuation) in
            updateMitigationAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a fleet provisioning template.</p>
    func updateProvisioningTemplate(input: UpdateProvisioningTemplateInput) async throws -> UpdateProvisioningTemplateOutputResponse
    {
        typealias updateProvisioningTemplateContinuation = CheckedContinuation<UpdateProvisioningTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProvisioningTemplateContinuation) in
            updateProvisioningTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a role alias.</p>
    func updateRoleAlias(input: UpdateRoleAliasInput) async throws -> UpdateRoleAliasOutputResponse
    {
        typealias updateRoleAliasContinuation = CheckedContinuation<UpdateRoleAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRoleAliasContinuation) in
            updateRoleAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a scheduled audit, including which checks are performed and
    ///           how often the audit takes place.</p>
    func updateScheduledAudit(input: UpdateScheduledAuditInput) async throws -> UpdateScheduledAuditOutputResponse
    {
        typealias updateScheduledAuditContinuation = CheckedContinuation<UpdateScheduledAuditOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateScheduledAuditContinuation) in
            updateScheduledAudit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a Device Defender security profile.</p>
    func updateSecurityProfile(input: UpdateSecurityProfileInput) async throws -> UpdateSecurityProfileOutputResponse
    {
        typealias updateSecurityProfileContinuation = CheckedContinuation<UpdateSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSecurityProfileContinuation) in
            updateSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing stream. The stream version will be incremented by one.</p>
    func updateStream(input: UpdateStreamInput) async throws -> UpdateStreamOutputResponse
    {
        typealias updateStreamContinuation = CheckedContinuation<UpdateStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateStreamContinuation) in
            updateStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the data for a thing.</p>
    func updateThing(input: UpdateThingInput) async throws -> UpdateThingOutputResponse
    {
        typealias updateThingContinuation = CheckedContinuation<UpdateThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThingContinuation) in
            updateThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Update a thing group.</p>
    func updateThingGroup(input: UpdateThingGroupInput) async throws -> UpdateThingGroupOutputResponse
    {
        typealias updateThingGroupContinuation = CheckedContinuation<UpdateThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThingGroupContinuation) in
            updateThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the groups to which the thing belongs.</p>
    func updateThingGroupsForThing(input: UpdateThingGroupsForThingInput) async throws -> UpdateThingGroupsForThingOutputResponse
    {
        typealias updateThingGroupsForThingContinuation = CheckedContinuation<UpdateThingGroupsForThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThingGroupsForThingContinuation) in
            updateThingGroupsForThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a topic rule destination. You use this to change the status, endpoint URL, or
    ///          confirmation URL of the destination.</p>
    func updateTopicRuleDestination(input: UpdateTopicRuleDestinationInput) async throws -> UpdateTopicRuleDestinationOutputResponse
    {
        typealias updateTopicRuleDestinationContinuation = CheckedContinuation<UpdateTopicRuleDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTopicRuleDestinationContinuation) in
            updateTopicRuleDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Validates a Device Defender security profile behaviors specification.</p>
    func validateSecurityProfileBehaviors(input: ValidateSecurityProfileBehaviorsInput) async throws -> ValidateSecurityProfileBehaviorsOutputResponse
    {
        typealias validateSecurityProfileBehaviorsContinuation = CheckedContinuation<ValidateSecurityProfileBehaviorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: validateSecurityProfileBehaviorsContinuation) in
            validateSecurityProfileBehaviors(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
