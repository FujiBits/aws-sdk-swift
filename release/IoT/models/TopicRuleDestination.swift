// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>A topic rule destination.</p>
public struct TopicRuleDestination: Equatable {
    /// <p>The topic rule destination URL.</p>
    public let arn: String?
    /// <p>The date and time when the topic rule destination was created.</p>
    public let createdAt: Date?
    /// <p>Properties of the HTTP URL.</p>
    public let httpUrlProperties: HttpUrlDestinationProperties?
    /// <p>The date and time when the topic rule destination was last updated.</p>
    public let lastUpdatedAt: Date?
    /// <p>The status of the topic rule destination. Valid values are:</p>
    ///          <dl>
    ///             <dt>IN_PROGRESS</dt>
    ///             <dd>
    ///                <p>A topic rule destination was created but has not been confirmed. You can set
    ///                      <code>status</code> to <code>IN_PROGRESS</code> by calling
    ///                      <code>UpdateTopicRuleDestination</code>. Calling
    ///                      <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to
    ///                   be sent to your confirmation endpoint.</p>
    ///             </dd>
    ///             <dt>ENABLED</dt>
    ///             <dd>
    ///                <p>Confirmation was completed, and traffic to this destination is allowed. You can
    ///                   set <code>status</code> to <code>DISABLED</code> by calling
    ///                      <code>UpdateTopicRuleDestination</code>.</p>
    ///             </dd>
    ///             <dt>DISABLED</dt>
    ///             <dd>
    ///                <p>Confirmation was completed, and traffic to this destination is not allowed. You
    ///                   can set <code>status</code> to <code>ENABLED</code> by calling
    ///                      <code>UpdateTopicRuleDestination</code>.</p>
    ///             </dd>
    ///             <dt>ERROR</dt>
    ///             <dd>
    ///                <p>Confirmation could not be completed, for example if the confirmation timed out.
    ///                   You can call <code>GetTopicRuleDestination</code> for details about the error. You
    ///                   can set <code>status</code> to <code>IN_PROGRESS</code> by calling
    ///                      <code>UpdateTopicRuleDestination</code>. Calling
    ///                      <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to
    ///                   be sent to your confirmation endpoint.</p>
    ///             </dd>
    ///          </dl>
    public let status: TopicRuleDestinationStatus?
    /// <p>Additional details or reason why the topic rule destination is in the current
    ///          status.</p>
    public let statusReason: String?
    /// <p>Properties of the virtual private cloud (VPC) connection.</p>
    public let vpcProperties: VpcDestinationProperties?

    public init (
        arn: String? = nil,
        createdAt: Date? = nil,
        httpUrlProperties: HttpUrlDestinationProperties? = nil,
        lastUpdatedAt: Date? = nil,
        status: TopicRuleDestinationStatus? = nil,
        statusReason: String? = nil,
        vpcProperties: VpcDestinationProperties? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.httpUrlProperties = httpUrlProperties
        self.lastUpdatedAt = lastUpdatedAt
        self.status = status
        self.statusReason = statusReason
        self.vpcProperties = vpcProperties
    }
}

extension TopicRuleDestination: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TopicRuleDestination(arn: \(String(describing: arn)), createdAt: \(String(describing: createdAt)), httpUrlProperties: \(String(describing: httpUrlProperties)), lastUpdatedAt: \(String(describing: lastUpdatedAt)), status: \(String(describing: status)), statusReason: \(String(describing: statusReason)), vpcProperties: \(String(describing: vpcProperties)))"}
}
