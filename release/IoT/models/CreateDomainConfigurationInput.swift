// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateDomainConfigurationInput: Equatable {
    /// <p>An object that specifies the authorization service for a domain.</p>
    public let authorizerConfig: AuthorizerConfig?
    /// <p>The name of the domain configuration. This value must be unique to a region.</p>
    public let domainConfigurationName: String?
    /// <p>The name of the domain.</p>
    public let domainName: String?
    /// <p>The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN.
    ///       This value is not required for AWS-managed domains.</p>
    public let serverCertificateArns: [String]?
    /// <p>The type of service delivered by the endpoint.</p>
    ///          <note>
    ///             <p>AWS IoT Core currently supports only the <code>DATA</code> service type.</p>
    ///          </note>
    public let serviceType: ServiceType?
    /// <p>Metadata which can be used to manage the domain configuration.</p>
    ///          <note>
    ///             <p>For URI Request parameters use format: ...key1=value1&key2=value2...</p>
    ///             <p>For the CLI command-line parameter use format: &&tags
    ///             "key1=value1&key2=value2..."</p>
    ///             <p>For the cli-input-json file use format: "tags":
    ///             "key1=value1&key2=value2..."</p>
    ///          </note>
    public let tags: [Tag]?
    /// <p>The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority.
    ///          This value is not required for AWS-managed domains.</p>
    public let validationCertificateArn: String?

    public init (
        authorizerConfig: AuthorizerConfig? = nil,
        domainConfigurationName: String? = nil,
        domainName: String? = nil,
        serverCertificateArns: [String]? = nil,
        serviceType: ServiceType? = nil,
        tags: [Tag]? = nil,
        validationCertificateArn: String? = nil
    )
    {
        self.authorizerConfig = authorizerConfig
        self.domainConfigurationName = domainConfigurationName
        self.domainName = domainName
        self.serverCertificateArns = serverCertificateArns
        self.serviceType = serviceType
        self.tags = tags
        self.validationCertificateArn = validationCertificateArn
    }
}

extension CreateDomainConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateDomainConfigurationInput(authorizerConfig: \(String(describing: authorizerConfig)), domainConfigurationName: \(String(describing: domainConfigurationName)), domainName: \(String(describing: domainName)), serverCertificateArns: \(String(describing: serverCertificateArns)), serviceType: \(String(describing: serviceType)), tags: \(String(describing: tags)), validationCertificateArn: \(String(describing: validationCertificateArn)))"}
}
