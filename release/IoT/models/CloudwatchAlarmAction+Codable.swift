// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudwatchAlarmAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmName
        case roleArn
        case stateReason
        case stateValue
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stateReason = stateReason {
            try encodeContainer.encode(stateReason, forKey: .stateReason)
        }
        if let stateValue = stateValue {
            try encodeContainer.encode(stateValue, forKey: .stateValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let alarmNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let stateValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateValue)
        stateValue = stateValueDecoded
    }
}
