// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListDetectMitigationActionsExecutionsInputHeadersMiddleware: Middleware {
    public let id: String = "ListDetectMitigationActionsExecutionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDetectMitigationActionsExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDetectMitigationActionsExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDetectMitigationActionsExecutionsInput>
    public typealias MOutput = OperationOutput<ListDetectMitigationActionsExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDetectMitigationActionsExecutionsOutputError>
}

public struct ListDetectMitigationActionsExecutionsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListDetectMitigationActionsExecutionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDetectMitigationActionsExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDetectMitigationActionsExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let thingName = input.operationInput.thingName {
            let thingNameQueryItem = URLQueryItem(name: "thingName".urlPercentEncoding(), value: String(thingName).urlPercentEncoding())
            input.builder.withQueryItem(thingNameQueryItem)
        }
        if let startTime = input.operationInput.startTime {
            let startTimeQueryItem = URLQueryItem(name: "startTime".urlPercentEncoding(), value: String(startTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startTimeQueryItem)
        }
        if let endTime = input.operationInput.endTime {
            let endTimeQueryItem = URLQueryItem(name: "endTime".urlPercentEncoding(), value: String(endTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endTimeQueryItem)
        }
        if let taskId = input.operationInput.taskId {
            let taskIdQueryItem = URLQueryItem(name: "taskId".urlPercentEncoding(), value: String(taskId).urlPercentEncoding())
            input.builder.withQueryItem(taskIdQueryItem)
        }
        if let violationId = input.operationInput.violationId {
            let violationIdQueryItem = URLQueryItem(name: "violationId".urlPercentEncoding(), value: String(violationId).urlPercentEncoding())
            input.builder.withQueryItem(violationIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDetectMitigationActionsExecutionsInput>
    public typealias MOutput = OperationOutput<ListDetectMitigationActionsExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDetectMitigationActionsExecutionsOutputError>
}

extension ListDetectMitigationActionsExecutionsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
