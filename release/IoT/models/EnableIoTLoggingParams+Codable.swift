// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EnableIoTLoggingParams: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logLevel
        case roleArnForLogging
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let roleArnForLogging = roleArnForLogging {
            try encodeContainer.encode(roleArnForLogging, forKey: .roleArnForLogging)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnForLoggingDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArnForLogging)
        roleArnForLogging = roleArnForLoggingDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
    }
}
