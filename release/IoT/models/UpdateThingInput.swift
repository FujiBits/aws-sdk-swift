// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The input for the UpdateThing operation.</p>
public struct UpdateThingInput: Equatable {
    /// <p>A list of thing attributes, a JSON string containing name-value pairs. For
    /// 			example:</p>
    /// 		       <p>
    /// 			         <code>{\"attributes\":{\"name1\":\"value2\"}}</code>
    /// 		       </p>
    /// 		       <p>This data is used to add new attributes or update existing attributes.</p>
    public let attributePayload: AttributePayload?
    /// <p>The expected version of the thing record in the registry. If the version of the
    /// 			record in the registry does not match the expected version specified in the request, the
    /// 				<code>UpdateThing</code> request is rejected with a
    /// 				<code>VersionConflictException</code>.</p>
    public let expectedVersion: Int?
    /// <p>Remove a thing type association. If <b>true</b>, the
    /// 			association is removed.</p>
    public let removeThingType: Bool
    /// <p>The name of the thing to update.</p>
    /// 		       <p>You can't change a thing's name. To change a thing's name, you must create a
    /// 			new thing, give it the new name, and then delete the old thing.</p>
    public let thingName: String?
    /// <p>The name of the thing type.</p>
    public let thingTypeName: String?

    public init (
        attributePayload: AttributePayload? = nil,
        expectedVersion: Int? = nil,
        removeThingType: Bool = false,
        thingName: String? = nil,
        thingTypeName: String? = nil
    )
    {
        self.attributePayload = attributePayload
        self.expectedVersion = expectedVersion
        self.removeThingType = removeThingType
        self.thingName = thingName
        self.thingTypeName = thingTypeName
    }
}

extension UpdateThingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateThingInput(attributePayload: \(String(describing: attributePayload)), expectedVersion: \(String(describing: expectedVersion)), removeThingType: \(String(describing: removeThingType)), thingName: \(String(describing: thingName)), thingTypeName: \(String(describing: thingTypeName)))"}
}
