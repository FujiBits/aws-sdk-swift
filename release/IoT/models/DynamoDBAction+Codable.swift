// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDBAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hashKeyField
        case hashKeyType
        case hashKeyValue
        case operation
        case payloadField
        case rangeKeyField
        case rangeKeyType
        case rangeKeyValue
        case roleArn
        case tableName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hashKeyField = hashKeyField {
            try encodeContainer.encode(hashKeyField, forKey: .hashKeyField)
        }
        if let hashKeyType = hashKeyType {
            try encodeContainer.encode(hashKeyType.rawValue, forKey: .hashKeyType)
        }
        if let hashKeyValue = hashKeyValue {
            try encodeContainer.encode(hashKeyValue, forKey: .hashKeyValue)
        }
        if let operation = operation {
            try encodeContainer.encode(operation, forKey: .operation)
        }
        if let payloadField = payloadField {
            try encodeContainer.encode(payloadField, forKey: .payloadField)
        }
        if let rangeKeyField = rangeKeyField {
            try encodeContainer.encode(rangeKeyField, forKey: .rangeKeyField)
        }
        if let rangeKeyType = rangeKeyType {
            try encodeContainer.encode(rangeKeyType.rawValue, forKey: .rangeKeyType)
        }
        if let rangeKeyValue = rangeKeyValue {
            try encodeContainer.encode(rangeKeyValue, forKey: .rangeKeyValue)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let operationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operation)
        operation = operationDecoded
        let hashKeyFieldDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hashKeyField)
        hashKeyField = hashKeyFieldDecoded
        let hashKeyValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hashKeyValue)
        hashKeyValue = hashKeyValueDecoded
        let hashKeyTypeDecoded = try containerValues.decodeIfPresent(DynamoKeyType.self, forKey: .hashKeyType)
        hashKeyType = hashKeyTypeDecoded
        let rangeKeyFieldDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rangeKeyField)
        rangeKeyField = rangeKeyFieldDecoded
        let rangeKeyValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rangeKeyValue)
        rangeKeyValue = rangeKeyValueDecoded
        let rangeKeyTypeDecoded = try containerValues.decodeIfPresent(DynamoKeyType.self, forKey: .rangeKeyType)
        rangeKeyType = rangeKeyTypeDecoded
        let payloadFieldDecoded = try containerValues.decodeIfPresent(String.self, forKey: .payloadField)
        payloadField = payloadFieldDecoded
    }
}
