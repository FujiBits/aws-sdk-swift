// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeSigningCertificateChain: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateName
        case inlineDocument
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let inlineDocument = inlineDocument {
            try encodeContainer.encode(inlineDocument, forKey: .inlineDocument)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let inlineDocumentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inlineDocument)
        inlineDocument = inlineDocumentDecoded
    }
}
