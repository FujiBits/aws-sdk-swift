// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ThingTypeDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case thingTypeArn
        case thingTypeMetadata
        case thingTypeName
        case thingTypeProperties
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let thingTypeArn = thingTypeArn {
            try encodeContainer.encode(thingTypeArn, forKey: .thingTypeArn)
        }
        if let thingTypeMetadata = thingTypeMetadata {
            try encodeContainer.encode(thingTypeMetadata, forKey: .thingTypeMetadata)
        }
        if let thingTypeName = thingTypeName {
            try encodeContainer.encode(thingTypeName, forKey: .thingTypeName)
        }
        if let thingTypeProperties = thingTypeProperties {
            try encodeContainer.encode(thingTypeProperties, forKey: .thingTypeProperties)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let thingTypeArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thingTypeArn)
        thingTypeArn = thingTypeArnDecoded
        let thingTypePropertiesDecoded = try containerValues.decodeIfPresent(ThingTypeProperties.self, forKey: .thingTypeProperties)
        thingTypeProperties = thingTypePropertiesDecoded
        let thingTypeMetadataDecoded = try containerValues.decodeIfPresent(ThingTypeMetadata.self, forKey: .thingTypeMetadata)
        thingTypeMetadata = thingTypeMetadataDecoded
    }
}
