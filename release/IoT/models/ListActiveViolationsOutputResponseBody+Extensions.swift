// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListActiveViolationsOutputResponseBody: Equatable {
    public let activeViolations: [ActiveViolation]?
    public let nextToken: String?
}

extension ListActiveViolationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activeViolations
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeViolationsContainer = try containerValues.decodeIfPresent([ActiveViolation?].self, forKey: .activeViolations)
        var activeViolationsDecoded0:[ActiveViolation]? = nil
        if let activeViolationsContainer = activeViolationsContainer {
            activeViolationsDecoded0 = [ActiveViolation]()
            for structure0 in activeViolationsContainer {
                if let structure0 = structure0 {
                    activeViolationsDecoded0?.append(structure0)
                }
            }
        }
        activeViolations = activeViolationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
