// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateSecurityProfileInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateSecurityProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateSecurityProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateSecurityProfileInput>
    public typealias MOutput = OperationOutput<UpdateSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateSecurityProfileOutputError>
}

public struct UpdateSecurityProfileInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateSecurityProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateSecurityProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedVersion = input.operationInput.expectedVersion {
            let expectedVersionQueryItem = URLQueryItem(name: "expectedVersion".urlPercentEncoding(), value: String(expectedVersion).urlPercentEncoding())
            input.builder.withQueryItem(expectedVersionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateSecurityProfileInput>
    public typealias MOutput = OperationOutput<UpdateSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateSecurityProfileOutputError>
}

public struct UpdateSecurityProfileInputBodyMiddleware: Middleware {
    public let id: String = "UpdateSecurityProfileInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateSecurityProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateSecurityProfileInput>
    public typealias MOutput = OperationOutput<UpdateSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateSecurityProfileOutputError>
}

extension UpdateSecurityProfileInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalMetricsToRetain
        case additionalMetricsToRetainV2
        case alertTargets
        case behaviors
        case deleteAdditionalMetricsToRetain
        case deleteAlertTargets
        case deleteBehaviors
        case securityProfileDescription
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalMetricsToRetain = additionalMetricsToRetain {
            var additionalMetricsToRetainContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMetricsToRetain)
            for additionalmetricstoretainlist0 in additionalMetricsToRetain {
                try additionalMetricsToRetainContainer.encode(additionalmetricstoretainlist0)
            }
        }
        if let additionalMetricsToRetainV2 = additionalMetricsToRetainV2 {
            var additionalMetricsToRetainV2Container = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMetricsToRetainV2)
            for additionalmetricstoretainv2list0 in additionalMetricsToRetainV2 {
                try additionalMetricsToRetainV2Container.encode(additionalmetricstoretainv2list0)
            }
        }
        if let alertTargets = alertTargets {
            var alertTargetsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .alertTargets)
            for (dictKey0, alerttargets0) in alertTargets {
                try alertTargetsContainer.encode(alerttargets0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let behaviors = behaviors {
            var behaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .behaviors)
            for behaviors0 in behaviors {
                try behaviorsContainer.encode(behaviors0)
            }
        }
        if deleteAdditionalMetricsToRetain != false {
            try encodeContainer.encode(deleteAdditionalMetricsToRetain, forKey: .deleteAdditionalMetricsToRetain)
        }
        if deleteAlertTargets != false {
            try encodeContainer.encode(deleteAlertTargets, forKey: .deleteAlertTargets)
        }
        if deleteBehaviors != false {
            try encodeContainer.encode(deleteBehaviors, forKey: .deleteBehaviors)
        }
        if let securityProfileDescription = securityProfileDescription {
            try encodeContainer.encode(securityProfileDescription, forKey: .securityProfileDescription)
        }
    }
}
