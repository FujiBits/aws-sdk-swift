// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes an action to write to a DynamoDB table.</p>
///          <p>The <code>tableName</code>, <code>hashKeyField</code>, and <code>rangeKeyField</code>
///          values must match the values used when you created the table.</p>
///          <p>The <code>hashKeyValue</code> and <code>rangeKeyvalue</code> fields use a
///          substitution template syntax. These templates provide data at runtime. The syntax is as
///          follows: ${<i>sql-expression</i>}.</p>
///          <p>You can specify any valid expression in a WHERE or SELECT clause, including JSON
///          properties, comparisons, calculations, and functions. For example, the following field uses
///          the third level of the topic:</p>
///          <p>
///             <code>"hashKeyValue": "${topic(3)}"</code>
///          </p>
///          <p>The following field uses the timestamp:</p>
///          <p>
///             <code>"rangeKeyValue": "${timestamp()}"</code>
///          </p>
public struct DynamoDBAction: Equatable {
    /// <p>The hash key name.</p>
    public let hashKeyField: String?
    /// <p>The hash key type. Valid values are "STRING" or "NUMBER"</p>
    public let hashKeyType: DynamoKeyType?
    /// <p>The hash key value.</p>
    public let hashKeyValue: String?
    /// <p>The type of operation to be performed. This follows the substitution template, so it
    ///          can be <code>${operation}</code>, but the substitution must result in one of the following:
    ///             <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>.</p>
    public let operation: String?
    /// <p>The action payload. This name can be customized.</p>
    public let payloadField: String?
    /// <p>The range key name.</p>
    public let rangeKeyField: String?
    /// <p>The range key type. Valid values are "STRING" or "NUMBER"</p>
    public let rangeKeyType: DynamoKeyType?
    /// <p>The range key value.</p>
    public let rangeKeyValue: String?
    /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
    public let roleArn: String?
    /// <p>The name of the DynamoDB table.</p>
    public let tableName: String?

    public init (
        hashKeyField: String? = nil,
        hashKeyType: DynamoKeyType? = nil,
        hashKeyValue: String? = nil,
        operation: String? = nil,
        payloadField: String? = nil,
        rangeKeyField: String? = nil,
        rangeKeyType: DynamoKeyType? = nil,
        rangeKeyValue: String? = nil,
        roleArn: String? = nil,
        tableName: String? = nil
    )
    {
        self.hashKeyField = hashKeyField
        self.hashKeyType = hashKeyType
        self.hashKeyValue = hashKeyValue
        self.operation = operation
        self.payloadField = payloadField
        self.rangeKeyField = rangeKeyField
        self.rangeKeyType = rangeKeyType
        self.rangeKeyValue = rangeKeyValue
        self.roleArn = roleArn
        self.tableName = tableName
    }
}

extension DynamoDBAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DynamoDBAction(hashKeyField: \(String(describing: hashKeyField)), hashKeyType: \(String(describing: hashKeyType)), hashKeyValue: \(String(describing: hashKeyValue)), operation: \(String(describing: operation)), payloadField: \(String(describing: payloadField)), rangeKeyField: \(String(describing: rangeKeyField)), rangeKeyType: \(String(describing: rangeKeyType)), rangeKeyValue: \(String(describing: rangeKeyValue)), roleArn: \(String(describing: roleArn)), tableName: \(String(describing: tableName)))"}
}
