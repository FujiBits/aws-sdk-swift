// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListSecurityProfilesForTargetInputHeadersMiddleware: Middleware {
    public let id: String = "ListSecurityProfilesForTargetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListSecurityProfilesForTargetInput>,
                  next: H) -> Swift.Result<OperationOutput<ListSecurityProfilesForTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListSecurityProfilesForTargetInput>
    public typealias MOutput = OperationOutput<ListSecurityProfilesForTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListSecurityProfilesForTargetOutputError>
}

public struct ListSecurityProfilesForTargetInputQueryItemMiddleware: Middleware {
    public let id: String = "ListSecurityProfilesForTargetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListSecurityProfilesForTargetInput>,
                  next: H) -> Swift.Result<OperationOutput<ListSecurityProfilesForTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        let recursiveQueryItem = URLQueryItem(name: "recursive".urlPercentEncoding(), value: String(input.operationInput.recursive).urlPercentEncoding())
        input.builder.withQueryItem(recursiveQueryItem)
        if let securityProfileTargetArn = input.operationInput.securityProfileTargetArn {
            let securityProfileTargetArnQueryItem = URLQueryItem(name: "securityProfileTargetArn".urlPercentEncoding(), value: String(securityProfileTargetArn).urlPercentEncoding())
            input.builder.withQueryItem(securityProfileTargetArnQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListSecurityProfilesForTargetInput>
    public typealias MOutput = OperationOutput<ListSecurityProfilesForTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListSecurityProfilesForTargetOutputError>
}

extension ListSecurityProfilesForTargetInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
