// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BehaviorCriteria: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparisonOperator
        case consecutiveDatapointsToAlarm
        case consecutiveDatapointsToClear
        case durationSeconds
        case mlDetectionConfig
        case statisticalThreshold
        case value
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let consecutiveDatapointsToAlarm = consecutiveDatapointsToAlarm {
            try encodeContainer.encode(consecutiveDatapointsToAlarm, forKey: .consecutiveDatapointsToAlarm)
        }
        if let consecutiveDatapointsToClear = consecutiveDatapointsToClear {
            try encodeContainer.encode(consecutiveDatapointsToClear, forKey: .consecutiveDatapointsToClear)
        }
        if let durationSeconds = durationSeconds {
            try encodeContainer.encode(durationSeconds, forKey: .durationSeconds)
        }
        if let mlDetectionConfig = mlDetectionConfig {
            try encodeContainer.encode(mlDetectionConfig, forKey: .mlDetectionConfig)
        }
        if let statisticalThreshold = statisticalThreshold {
            try encodeContainer.encode(statisticalThreshold, forKey: .statisticalThreshold)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let valueDecoded = try containerValues.decodeIfPresent(MetricValue.self, forKey: .value)
        value = valueDecoded
        let durationSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .durationSeconds)
        durationSeconds = durationSecondsDecoded
        let consecutiveDatapointsToAlarmDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .consecutiveDatapointsToAlarm)
        consecutiveDatapointsToAlarm = consecutiveDatapointsToAlarmDecoded
        let consecutiveDatapointsToClearDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .consecutiveDatapointsToClear)
        consecutiveDatapointsToClear = consecutiveDatapointsToClearDecoded
        let statisticalThresholdDecoded = try containerValues.decodeIfPresent(StatisticalThreshold.self, forKey: .statisticalThreshold)
        statisticalThreshold = statisticalThresholdDecoded
        let mlDetectionConfigDecoded = try containerValues.decodeIfPresent(MachineLearningDetectionConfig.self, forKey: .mlDetectionConfig)
        mlDetectionConfig = mlDetectionConfigDecoded
    }
}
