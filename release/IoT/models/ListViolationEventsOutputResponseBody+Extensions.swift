// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListViolationEventsOutputResponseBody: Equatable {
    public let violationEvents: [ViolationEvent]?
    public let nextToken: String?
}

extension ListViolationEventsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case violationEvents
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let violationEventsContainer = try containerValues.decodeIfPresent([ViolationEvent?].self, forKey: .violationEvents)
        var violationEventsDecoded0:[ViolationEvent]? = nil
        if let violationEventsContainer = violationEventsContainer {
            violationEventsDecoded0 = [ViolationEvent]()
            for structure0 in violationEventsContainer {
                if let structure0 = structure0 {
                    violationEventsDecoded0?.append(structure0)
                }
            }
        }
        violationEvents = violationEventsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
