// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDimensionOutputResponseBody: Equatable {
    public let name: String?
    public let arn: String?
    public let type: DimensionType?
    public let stringValues: [String]?
    public let creationDate: Date?
    public let lastModifiedDate: Date?
}

extension DescribeDimensionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn
        case creationDate
        case lastModifiedDate
        case name
        case stringValues
        case type
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DimensionType.self, forKey: .type)
        type = typeDecoded
        let stringValuesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .stringValues)
        var stringValuesDecoded0:[String]? = nil
        if let stringValuesContainer = stringValuesContainer {
            stringValuesDecoded0 = [String]()
            for string0 in stringValuesContainer {
                if let string0 = string0 {
                    stringValuesDecoded0?.append(string0)
                }
            }
        }
        stringValues = stringValuesDecoded0
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}
