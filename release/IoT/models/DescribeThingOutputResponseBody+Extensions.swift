// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeThingOutputResponseBody: Equatable {
    public let defaultClientId: String?
    public let thingName: String?
    public let thingId: String?
    public let thingArn: String?
    public let thingTypeName: String?
    public let attributes: [String:String]?
    public let version: Int
    public let billingGroupName: String?
}

extension DescribeThingOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributes
        case billingGroupName
        case defaultClientId
        case thingArn
        case thingId
        case thingName
        case thingTypeName
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultClientIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultClientId)
        defaultClientId = defaultClientIdDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thingId)
        thingId = thingIdDecoded
        let thingArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thingArn)
        thingArn = thingArnDecoded
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .attributes)
        var attributesDecoded0: [String:String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let versionDecoded = try containerValues.decode(Int.self, forKey: .version)
        version = versionDecoded
        let billingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .billingGroupName)
        billingGroupName = billingGroupNameDecoded
    }
}
