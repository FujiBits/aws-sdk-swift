// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>The job execution object represents the execution of a job on a particular device.</p>
public struct JobExecution: Equatable {
    /// <p>The estimated number of seconds that remain before the job execution status will be
    ///            changed to <code>TIMED_OUT</code>. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes).
    ///            The actual job execution timeout can occur up to 60 seconds later than the estimated duration.
    ///        This value will not be included if the job execution has reached a terminal status.</p>
    public let approximateSecondsBeforeTimedOut: Int?
    /// <p>A string (consisting of the digits "0" through "9") which identifies this particular job execution on
    ///             this particular device. It can be used in commands which return or update job execution information.
    ///         </p>
    public let executionNumber: Int?
    /// <p>Will be <code>true</code> if the job execution was canceled with the optional <code>force</code>
    ///           parameter set to <code>true</code>.</p>
    public let forceCanceled: Bool?
    /// <p>The unique identifier you assigned to the job when it was created.</p>
    public let jobId: String?
    /// <p>The time, in seconds since the epoch, when the job execution was last updated.</p>
    public let lastUpdatedAt: Date?
    /// <p>The time, in seconds since the epoch, when the job execution was queued.</p>
    public let queuedAt: Date?
    /// <p>The time, in seconds since the epoch, when the job execution started.</p>
    public let startedAt: Date?
    /// <p>The status of the job execution (IN_PROGRESS, QUEUED, FAILED, SUCCEEDED, TIMED_OUT,
    ///             CANCELED, or REJECTED).</p>
    public let status: JobExecutionStatus?
    /// <p>A collection of name/value pairs that describe the status of the job execution.</p>
    public let statusDetails: JobExecutionStatusDetails?
    /// <p>The ARN of the thing on which the job execution is running.</p>
    public let thingArn: String?
    /// <p>The version of the job execution. Job execution versions are incremented each time they are updated
    ///       by a device.</p>
    public let versionNumber: Int

    public init (
        approximateSecondsBeforeTimedOut: Int? = nil,
        executionNumber: Int? = nil,
        forceCanceled: Bool? = nil,
        jobId: String? = nil,
        lastUpdatedAt: Date? = nil,
        queuedAt: Date? = nil,
        startedAt: Date? = nil,
        status: JobExecutionStatus? = nil,
        statusDetails: JobExecutionStatusDetails? = nil,
        thingArn: String? = nil,
        versionNumber: Int = 0
    )
    {
        self.approximateSecondsBeforeTimedOut = approximateSecondsBeforeTimedOut
        self.executionNumber = executionNumber
        self.forceCanceled = forceCanceled
        self.jobId = jobId
        self.lastUpdatedAt = lastUpdatedAt
        self.queuedAt = queuedAt
        self.startedAt = startedAt
        self.status = status
        self.statusDetails = statusDetails
        self.thingArn = thingArn
        self.versionNumber = versionNumber
    }
}

extension JobExecution: CustomDebugStringConvertible {
    public var debugDescription: String {
        "JobExecution(approximateSecondsBeforeTimedOut: \(String(describing: approximateSecondsBeforeTimedOut)), executionNumber: \(String(describing: executionNumber)), forceCanceled: \(String(describing: forceCanceled)), jobId: \(String(describing: jobId)), lastUpdatedAt: \(String(describing: lastUpdatedAt)), queuedAt: \(String(describing: queuedAt)), startedAt: \(String(describing: startedAt)), status: \(String(describing: status)), statusDetails: \(String(describing: statusDetails)), thingArn: \(String(describing: thingArn)), versionNumber: \(String(describing: versionNumber)))"}
}
