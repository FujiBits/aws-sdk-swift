// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeThingRegistrationTaskOutputResponseBody: Equatable {
    public let taskId: String?
    public let creationDate: Date?
    public let lastModifiedDate: Date?
    public let templateBody: String?
    public let inputFileBucket: String?
    public let inputFileKey: String?
    public let roleArn: String?
    public let status: Status?
    public let message: String?
    public let successCount: Int
    public let failureCount: Int
    public let percentageProgress: Int
}

extension DescribeThingRegistrationTaskOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creationDate
        case failureCount
        case inputFileBucket
        case inputFileKey
        case lastModifiedDate
        case message
        case percentageProgress
        case roleArn
        case status
        case successCount
        case taskId
        case templateBody
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let inputFileBucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputFileBucket)
        inputFileBucket = inputFileBucketDecoded
        let inputFileKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputFileKey)
        inputFileKey = inputFileKeyDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Status.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let successCountDecoded = try containerValues.decode(Int.self, forKey: .successCount)
        successCount = successCountDecoded
        let failureCountDecoded = try containerValues.decode(Int.self, forKey: .failureCount)
        failureCount = failureCountDecoded
        let percentageProgressDecoded = try containerValues.decode(Int.self, forKey: .percentageProgress)
        percentageProgress = percentageProgressDecoded
    }
}
