// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateJobTemplateInputHeadersMiddleware: Middleware {
    public let id: String = "CreateJobTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateJobTemplateInput>
    public typealias MOutput = OperationOutput<CreateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateJobTemplateOutputError>
}

public struct CreateJobTemplateInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateJobTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateJobTemplateInput>
    public typealias MOutput = OperationOutput<CreateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateJobTemplateOutputError>
}

public struct CreateJobTemplateInputBodyMiddleware: Middleware {
    public let id: String = "CreateJobTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateJobTemplateInput>
    public typealias MOutput = OperationOutput<CreateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateJobTemplateOutputError>
}

extension CreateJobTemplateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case abortConfig
        case description
        case document
        case documentSource
        case jobArn
        case jobExecutionsRolloutConfig
        case presignedUrlConfig
        case tags
        case timeoutConfig
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abortConfig = abortConfig {
            try encodeContainer.encode(abortConfig, forKey: .abortConfig)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let document = document {
            try encodeContainer.encode(document, forKey: .document)
        }
        if let documentSource = documentSource {
            try encodeContainer.encode(documentSource, forKey: .documentSource)
        }
        if let jobArn = jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobExecutionsRolloutConfig = jobExecutionsRolloutConfig {
            try encodeContainer.encode(jobExecutionsRolloutConfig, forKey: .jobExecutionsRolloutConfig)
        }
        if let presignedUrlConfig = presignedUrlConfig {
            try encodeContainer.encode(presignedUrlConfig, forKey: .presignedUrlConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let timeoutConfig = timeoutConfig {
            try encodeContainer.encode(timeoutConfig, forKey: .timeoutConfig)
        }
    }
}
