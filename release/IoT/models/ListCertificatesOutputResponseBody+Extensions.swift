// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCertificatesOutputResponseBody: Equatable {
    public let certificates: [Certificate]?
    public let nextMarker: String?
}

extension ListCertificatesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificates
        case nextMarker
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificatesContainer = try containerValues.decodeIfPresent([Certificate?].self, forKey: .certificates)
        var certificatesDecoded0:[Certificate]? = nil
        if let certificatesContainer = certificatesContainer {
            certificatesDecoded0 = [Certificate]()
            for structure0 in certificatesContainer {
                if let structure0 = structure0 {
                    certificatesDecoded0?.append(structure0)
                }
            }
        }
        certificates = certificatesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}
