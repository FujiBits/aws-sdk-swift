// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAuthorizersOutputResponseBody: Equatable {
    public let authorizers: [AuthorizerSummary]?
    public let nextMarker: String?
}

extension ListAuthorizersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authorizers
        case nextMarker
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizersContainer = try containerValues.decodeIfPresent([AuthorizerSummary?].self, forKey: .authorizers)
        var authorizersDecoded0:[AuthorizerSummary]? = nil
        if let authorizersContainer = authorizersContainer {
            authorizersDecoded0 = [AuthorizerSummary]()
            for structure0 in authorizersContainer {
                if let structure0 = structure0 {
                    authorizersDecoded0?.append(structure0)
                }
            }
        }
        authorizers = authorizersDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}
