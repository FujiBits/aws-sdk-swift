// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EventType {
    case caCertificate
    case certificate
    case job
    case jobExecution
    case policy
    case thing
    case thingGroup
    case thingGroupHierarchy
    case thingGroupMembership
    case thingType
    case thingTypeAssociation
    case sdkUnknown(String)
}

extension EventType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EventType] {
        return [
            .caCertificate,
            .certificate,
            .job,
            .jobExecution,
            .policy,
            .thing,
            .thingGroup,
            .thingGroupHierarchy,
            .thingGroupMembership,
            .thingType,
            .thingTypeAssociation,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .caCertificate: return "CA_CERTIFICATE"
        case .certificate: return "CERTIFICATE"
        case .job: return "JOB"
        case .jobExecution: return "JOB_EXECUTION"
        case .policy: return "POLICY"
        case .thing: return "THING"
        case .thingGroup: return "THING_GROUP"
        case .thingGroupHierarchy: return "THING_GROUP_HIERARCHY"
        case .thingGroupMembership: return "THING_GROUP_MEMBERSHIP"
        case .thingType: return "THING_TYPE"
        case .thingTypeAssociation: return "THING_TYPE_ASSOCIATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
    }
}
