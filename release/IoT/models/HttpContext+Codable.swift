// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HttpContext: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case headers
        case queryString
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headers = headers {
            var headersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .headers)
            for (dictKey0, httpheaders0) in headers {
                try headersContainer.encode(httpheaders0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let headersContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .headers)
        var headersDecoded0: [String:String]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [String:String]()
            for (key0, httpheadervalue0) in headersContainer {
                if let httpheadervalue0 = httpheadervalue0 {
                    headersDecoded0?[key0] = httpheadervalue0
                }
            }
        }
        headers = headersDecoded0
        let queryStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryString)
        queryString = queryStringDecoded
    }
}
