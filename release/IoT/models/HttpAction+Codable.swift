// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HttpAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case auth
        case confirmationUrl
        case headers
        case url
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auth = auth {
            try encodeContainer.encode(auth, forKey: .auth)
        }
        if let confirmationUrl = confirmationUrl {
            try encodeContainer.encode(confirmationUrl, forKey: .confirmationUrl)
        }
        if let headers = headers {
            var headersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headers)
            for headerlist0 in headers {
                try headersContainer.encode(headerlist0)
            }
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let confirmationUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .confirmationUrl)
        confirmationUrl = confirmationUrlDecoded
        let headersContainer = try containerValues.decodeIfPresent([HttpActionHeader?].self, forKey: .headers)
        var headersDecoded0:[HttpActionHeader]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [HttpActionHeader]()
            for structure0 in headersContainer {
                if let structure0 = structure0 {
                    headersDecoded0?.append(structure0)
                }
            }
        }
        headers = headersDecoded0
        let authDecoded = try containerValues.decodeIfPresent(HttpAuthorization.self, forKey: .auth)
        auth = authDecoded
    }
}
