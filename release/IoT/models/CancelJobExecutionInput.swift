// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CancelJobExecutionInput: Equatable {
    /// <p>(Optional) The expected current version of the job execution. Each time you update the job
    ///           execution, its version is incremented. If the version of the job execution stored in Jobs does
    ///           not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that
    ///           contains the current job execution status data is returned. (This makes it unnecessary to
    ///           perform a separate DescribeJobExecution request in order to obtain the job execution status
    ///           data.)</p>
    public let expectedVersion: Int?
    /// <p>(Optional) If <code>true</code> the job execution will be canceled if it has status
    ///           IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status
    ///           QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set
    ///           <code>force</code> to <code>true</code>, then an <code>InvalidStateTransitionException</code>
    ///           will be thrown. The default is <code>false</code>.</p>
    ///         <p>Canceling a job execution which is "IN_PROGRESS", will cause the device to be unable
    ///           to update the job execution status.  Use caution and ensure that the device is able to
    ///           recover to a valid state.</p>
    public let force: Bool
    /// <p>The ID of the job to be canceled.</p>
    public let jobId: String?
    /// <p>A collection of name/value pairs that describe the status of the job execution. If not
    ///           specified, the statusDetails are unchanged. You can specify at most 10 name/value pairs.</p>
    public let statusDetails: [String:String]?
    /// <p>The name of the thing whose execution of the job will be canceled.</p>
    public let thingName: String?

    public init (
        expectedVersion: Int? = nil,
        force: Bool = false,
        jobId: String? = nil,
        statusDetails: [String:String]? = nil,
        thingName: String? = nil
    )
    {
        self.expectedVersion = expectedVersion
        self.force = force
        self.jobId = jobId
        self.statusDetails = statusDetails
        self.thingName = thingName
    }
}

extension CancelJobExecutionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelJobExecutionInput(expectedVersion: \(String(describing: expectedVersion)), force: \(String(describing: force)), jobId: \(String(describing: jobId)), statusDetails: \(String(describing: statusDetails)), thingName: \(String(describing: thingName)))"}
}
