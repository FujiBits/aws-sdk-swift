// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateJobInputBody: Equatable {
    public let targets: [String]?
    public let documentSource: String?
    public let document: String?
    public let description: String?
    public let presignedUrlConfig: PresignedUrlConfig?
    public let targetSelection: TargetSelection?
    public let jobExecutionsRolloutConfig: JobExecutionsRolloutConfig?
    public let abortConfig: AbortConfig?
    public let timeoutConfig: TimeoutConfig?
    public let tags: [Tag]?
    public let namespaceId: String?
    public let jobTemplateArn: String?
}

extension CreateJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case abortConfig
        case description
        case document
        case documentSource
        case jobExecutionsRolloutConfig
        case jobTemplateArn
        case namespaceId
        case presignedUrlConfig
        case tags
        case targetSelection
        case targets
        case timeoutConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .targets)
        var targetsDecoded0:[String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let documentSourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentSource)
        documentSource = documentSourceDecoded
        let documentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .document)
        document = documentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let presignedUrlConfigDecoded = try containerValues.decodeIfPresent(PresignedUrlConfig.self, forKey: .presignedUrlConfig)
        presignedUrlConfig = presignedUrlConfigDecoded
        let targetSelectionDecoded = try containerValues.decodeIfPresent(TargetSelection.self, forKey: .targetSelection)
        targetSelection = targetSelectionDecoded
        let jobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(JobExecutionsRolloutConfig.self, forKey: .jobExecutionsRolloutConfig)
        jobExecutionsRolloutConfig = jobExecutionsRolloutConfigDecoded
        let abortConfigDecoded = try containerValues.decodeIfPresent(AbortConfig.self, forKey: .abortConfig)
        abortConfig = abortConfigDecoded
        let timeoutConfigDecoded = try containerValues.decodeIfPresent(TimeoutConfig.self, forKey: .timeoutConfig)
        timeoutConfig = timeoutConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let namespaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespaceId)
        namespaceId = namespaceIdDecoded
        let jobTemplateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobTemplateArn)
        jobTemplateArn = jobTemplateArnDecoded
    }
}
