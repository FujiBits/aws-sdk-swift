// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListJobsInputHeadersMiddleware: Middleware {
    public let id: String = "ListJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListJobsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListJobsInput>
    public typealias MOutput = OperationOutput<ListJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListJobsOutputError>
}

public struct ListJobsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListJobsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let thingGroupId = input.operationInput.thingGroupId {
            let thingGroupIdQueryItem = URLQueryItem(name: "thingGroupId".urlPercentEncoding(), value: String(thingGroupId).urlPercentEncoding())
            input.builder.withQueryItem(thingGroupIdQueryItem)
        }
        if let namespaceId = input.operationInput.namespaceId {
            let namespaceIdQueryItem = URLQueryItem(name: "namespaceId".urlPercentEncoding(), value: String(namespaceId).urlPercentEncoding())
            input.builder.withQueryItem(namespaceIdQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let thingGroupName = input.operationInput.thingGroupName {
            let thingGroupNameQueryItem = URLQueryItem(name: "thingGroupName".urlPercentEncoding(), value: String(thingGroupName).urlPercentEncoding())
            input.builder.withQueryItem(thingGroupNameQueryItem)
        }
        if let status = input.operationInput.status {
            let statusQueryItem = URLQueryItem(name: "status".urlPercentEncoding(), value: String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        if let targetSelection = input.operationInput.targetSelection {
            let targetSelectionQueryItem = URLQueryItem(name: "targetSelection".urlPercentEncoding(), value: String(targetSelection.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(targetSelectionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListJobsInput>
    public typealias MOutput = OperationOutput<ListJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListJobsOutputError>
}

extension ListJobsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
