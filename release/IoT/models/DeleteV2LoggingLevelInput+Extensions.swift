// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DeleteV2LoggingLevelInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteV2LoggingLevelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteV2LoggingLevelInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteV2LoggingLevelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteV2LoggingLevelInput>
    public typealias MOutput = OperationOutput<DeleteV2LoggingLevelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteV2LoggingLevelOutputError>
}

public struct DeleteV2LoggingLevelInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteV2LoggingLevelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteV2LoggingLevelInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteV2LoggingLevelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let targetName = input.operationInput.targetName {
            let targetNameQueryItem = URLQueryItem(name: "targetName".urlPercentEncoding(), value: String(targetName).urlPercentEncoding())
            input.builder.withQueryItem(targetNameQueryItem)
        }
        if let targetType = input.operationInput.targetType {
            let targetTypeQueryItem = URLQueryItem(name: "targetType".urlPercentEncoding(), value: String(targetType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(targetTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteV2LoggingLevelInput>
    public typealias MOutput = OperationOutput<DeleteV2LoggingLevelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteV2LoggingLevelOutputError>
}

extension DeleteV2LoggingLevelInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
