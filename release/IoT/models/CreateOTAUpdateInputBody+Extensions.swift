// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateOTAUpdateInputBody: Equatable {
    public let description: String?
    public let targets: [String]?
    public let protocols: [`Protocol`]?
    public let targetSelection: TargetSelection?
    public let awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig?
    public let awsJobPresignedUrlConfig: AwsJobPresignedUrlConfig?
    public let awsJobAbortConfig: AwsJobAbortConfig?
    public let awsJobTimeoutConfig: AwsJobTimeoutConfig?
    public let files: [OTAUpdateFile]?
    public let roleArn: String?
    public let additionalParameters: [String:String]?
    public let tags: [Tag]?
}

extension CreateOTAUpdateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case additionalParameters
        case awsJobAbortConfig
        case awsJobExecutionsRolloutConfig
        case awsJobPresignedUrlConfig
        case awsJobTimeoutConfig
        case description
        case files
        case protocols
        case roleArn
        case tags
        case targetSelection
        case targets
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let targetsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .targets)
        var targetsDecoded0:[String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let protocolsContainer = try containerValues.decodeIfPresent([`Protocol`?].self, forKey: .protocols)
        var protocolsDecoded0:[`Protocol`]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [`Protocol`]()
            for string0 in protocolsContainer {
                if let string0 = string0 {
                    protocolsDecoded0?.append(string0)
                }
            }
        }
        protocols = protocolsDecoded0
        let targetSelectionDecoded = try containerValues.decodeIfPresent(TargetSelection.self, forKey: .targetSelection)
        targetSelection = targetSelectionDecoded
        let awsJobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(AwsJobExecutionsRolloutConfig.self, forKey: .awsJobExecutionsRolloutConfig)
        awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfigDecoded
        let awsJobPresignedUrlConfigDecoded = try containerValues.decodeIfPresent(AwsJobPresignedUrlConfig.self, forKey: .awsJobPresignedUrlConfig)
        awsJobPresignedUrlConfig = awsJobPresignedUrlConfigDecoded
        let awsJobAbortConfigDecoded = try containerValues.decodeIfPresent(AwsJobAbortConfig.self, forKey: .awsJobAbortConfig)
        awsJobAbortConfig = awsJobAbortConfigDecoded
        let awsJobTimeoutConfigDecoded = try containerValues.decodeIfPresent(AwsJobTimeoutConfig.self, forKey: .awsJobTimeoutConfig)
        awsJobTimeoutConfig = awsJobTimeoutConfigDecoded
        let filesContainer = try containerValues.decodeIfPresent([OTAUpdateFile?].self, forKey: .files)
        var filesDecoded0:[OTAUpdateFile]? = nil
        if let filesContainer = filesContainer {
            filesDecoded0 = [OTAUpdateFile]()
            for structure0 in filesContainer {
                if let structure0 = structure0 {
                    filesDecoded0?.append(structure0)
                }
            }
        }
        files = filesDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let additionalParametersContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .additionalParameters)
        var additionalParametersDecoded0: [String:String]? = nil
        if let additionalParametersContainer = additionalParametersContainer {
            additionalParametersDecoded0 = [String:String]()
            for (key0, value0) in additionalParametersContainer {
                if let value0 = value0 {
                    additionalParametersDecoded0?[key0] = value0
                }
            }
        }
        additionalParameters = additionalParametersDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
