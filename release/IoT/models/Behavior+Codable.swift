// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Behavior: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case criteria
        case metric
        case metricDimension
        case name
        case suppressAlerts
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let criteria = criteria {
            try encodeContainer.encode(criteria, forKey: .criteria)
        }
        if let metric = metric {
            try encodeContainer.encode(metric, forKey: .metric)
        }
        if let metricDimension = metricDimension {
            try encodeContainer.encode(metricDimension, forKey: .metricDimension)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let suppressAlerts = suppressAlerts {
            try encodeContainer.encode(suppressAlerts, forKey: .suppressAlerts)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let metricDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metric)
        metric = metricDecoded
        let metricDimensionDecoded = try containerValues.decodeIfPresent(MetricDimension.self, forKey: .metricDimension)
        metricDimension = metricDimensionDecoded
        let criteriaDecoded = try containerValues.decodeIfPresent(BehaviorCriteria.self, forKey: .criteria)
        criteria = criteriaDecoded
        let suppressAlertsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .suppressAlerts)
        suppressAlerts = suppressAlertsDecoded
    }
}
