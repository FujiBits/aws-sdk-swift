// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TestAuthorizationInputBody: Equatable {
    public let principal: String?
    public let cognitoIdentityPoolId: String?
    public let authInfos: [AuthInfo]?
    public let policyNamesToAdd: [String]?
    public let policyNamesToSkip: [String]?
}

extension TestAuthorizationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authInfos
        case cognitoIdentityPoolId
        case policyNamesToAdd
        case policyNamesToSkip
        case principal
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .principal)
        principal = principalDecoded
        let cognitoIdentityPoolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cognitoIdentityPoolId)
        cognitoIdentityPoolId = cognitoIdentityPoolIdDecoded
        let authInfosContainer = try containerValues.decodeIfPresent([AuthInfo?].self, forKey: .authInfos)
        var authInfosDecoded0:[AuthInfo]? = nil
        if let authInfosContainer = authInfosContainer {
            authInfosDecoded0 = [AuthInfo]()
            for structure0 in authInfosContainer {
                if let structure0 = structure0 {
                    authInfosDecoded0?.append(structure0)
                }
            }
        }
        authInfos = authInfosDecoded0
        let policyNamesToAddContainer = try containerValues.decodeIfPresent([String?].self, forKey: .policyNamesToAdd)
        var policyNamesToAddDecoded0:[String]? = nil
        if let policyNamesToAddContainer = policyNamesToAddContainer {
            policyNamesToAddDecoded0 = [String]()
            for string0 in policyNamesToAddContainer {
                if let string0 = string0 {
                    policyNamesToAddDecoded0?.append(string0)
                }
            }
        }
        policyNamesToAdd = policyNamesToAddDecoded0
        let policyNamesToSkipContainer = try containerValues.decodeIfPresent([String?].self, forKey: .policyNamesToSkip)
        var policyNamesToSkipDecoded0:[String]? = nil
        if let policyNamesToSkipContainer = policyNamesToSkipContainer {
            policyNamesToSkipDecoded0 = [String]()
            for string0 in policyNamesToSkipContainer {
                if let string0 = string0 {
                    policyNamesToSkipDecoded0?.append(string0)
                }
            }
        }
        policyNamesToSkip = policyNamesToSkipDecoded0
    }
}
