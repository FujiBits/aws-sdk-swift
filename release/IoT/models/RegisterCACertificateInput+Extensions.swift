// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RegisterCACertificateInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterCACertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterCACertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterCACertificateInput>
    public typealias MOutput = OperationOutput<RegisterCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterCACertificateOutputError>
}

public struct RegisterCACertificateInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterCACertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterCACertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        let allowAutoRegistrationQueryItem = URLQueryItem(name: "allowAutoRegistration".urlPercentEncoding(), value: String(input.operationInput.allowAutoRegistration).urlPercentEncoding())
        input.builder.withQueryItem(allowAutoRegistrationQueryItem)
        let setAsActiveQueryItem = URLQueryItem(name: "setAsActive".urlPercentEncoding(), value: String(input.operationInput.setAsActive).urlPercentEncoding())
        input.builder.withQueryItem(setAsActiveQueryItem)
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterCACertificateInput>
    public typealias MOutput = OperationOutput<RegisterCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterCACertificateOutputError>
}

public struct RegisterCACertificateInputBodyMiddleware: Middleware {
    public let id: String = "RegisterCACertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterCACertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterCACertificateInput>
    public typealias MOutput = OperationOutput<RegisterCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterCACertificateOutputError>
}

extension RegisterCACertificateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case caCertificate
        case registrationConfig
        case tags
        case verificationCertificate
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caCertificate = caCertificate {
            try encodeContainer.encode(caCertificate, forKey: .caCertificate)
        }
        if let registrationConfig = registrationConfig {
            try encodeContainer.encode(registrationConfig, forKey: .registrationConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let verificationCertificate = verificationCertificate {
            try encodeContainer.encode(verificationCertificate, forKey: .verificationCertificate)
        }
    }
}
